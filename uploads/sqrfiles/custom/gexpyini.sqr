!***********************************************************************
!  GEXPYINI:   This program initializes the PaySheets                  *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *
!***********************************************************************
!  xxx	   SXK	       08/28/1997     INITIAL CREATION                 *
!                                                                      *
!  xxx     CJH         03/16/1998     We do not want to clear out other*
!                                     earnings tbl due to Addl Pay     *
!                                     creating Oth Earnings entries.   *
!                                                                      *
!          SXK         11/25/1998     Update job_pay in pay_oth_earns  *
!                                                                      *
!          SXK         11/301/1998    Do not zero out if paygroup      *
!				      belongs to any one of EXE, OFF,  *
!				      OF2 or OF3, otherwise do it.     *
!                                                                      *
!          CJH         04/09/1999     Add update to OVERRIDE_HOURLY_RT *
!                                     field on PAY_EARNINGS            *
!                                                                      *
!          CJH         05/17/1999     update pay earnings for all LTD/LTD
!                                     EEs regardless of empl_status    *
!                                                                      *
!          CJH         06/01/1999     Add PLA/WC1,WC2,WC3 to 5/17/1999 *
!                                     chgs to upd pay earnings         *
!                                     regardless of status             *
!                                                                      *
!          CJH         06/21/1999     Correct selection criteria for   *
!                                     Action/Reason combinations.  Also*
!                                     added back the zeroing of        *
!                                     oth_Earns records only for HOL   *
!                                     earnings. (All other oth_earns   *
!                                     are potentially valid -          *
!                                     separation pay, etc.)            *
!                                                                      *
!          CJH         07/09/1999     Correct Leave EEs selections &   *
!                                     performance chgs.                *
!                                                                      *
!          CJH         09/13/1999     Add Action/Reason combinations to*
!                                     zeroing-out selection criteria.  *
!                                                                      *
!          CWB         02/04/2000     Removed 'date-time ()' function  *
!                                    (dropped in version 4). Replaced  *
!                                     with '$AsOfNow' variable to get  *
!                                     $timeprocess.                    *
!                                                                      *
!          CWB         06/20/2000     Added <> 'KAP' to paygroup logic.* 
!                                                                      *
!          CJH         01/09/2001     Added COD Paygroups              *
!                                                                      *
!          CJH         10/03/2001     CSR HR-10111 changes - abort when*
!                                     encoutering Oracle error and     *
!                                     zero-out RFI/OF4 Hourly sheets in*
!                                     Deptids C490,C510,C550 and C811. *
!                                                                      *  
!          CWB         09/06/2003     Removed RULE hints to improve    *
!                                     performance in 8.3               *
!                                                                      *
!          CJH         03/05/2004     Add I.S. dept ids to process for *
!                                     clearing paysheets               *
!                                                                      *  
!          CWB         02/09/2005     Added max(effseq) logic to JOB   *
!                                     select.                          *
!                                                                      *  
!          AXL         09/27/2005     Added C708                       *
!                                                                      *
!          AXL         03/10/2006     Added run control logic for Corp *
!                                     deptids.                         *
!					AMS					10/10/2007    Customized code to move PAY_EARNINGS* 
!				                            row to PAY_OTH_EARNS for Salaried EE*
!***********************************************************************
#include 'setenv.sqc' !Set environment
begin-setup

#Include 'setupdb.sqc'

! begin-sql
!  ALTER SESSION SET OPTIMIZER_GOAL=RULE
! end-sql

 
end-setup
 
begin-report
  do Init-DateTime
  do Init-Number
  do stdapi-init
  do Get-Current-DateTime
  move 'PayInit' to $ReportID
  move 'Initialize PaySheets' to $ReportTitle
  display $ReportTitle


  do Get-Current-DateTime

!  do payroll-report-initialization
!********************************************************************
!This logic looks for the process scheduler instances and if they are
!not found, prompts the user to enter the required fields to process. 
!If the process scheduler is in action, it retrieves the necessary
!values to proceed further
!********************************************************************   

!  if $prcs_process_instance = ''
!      input $Run_ID 'Enter Payroll Run ID' type=char
!       uppercase $Run_ID
!       do Edit-Run

!       if RTRIM($Run_ID, ' ') <> ''
!           if RTRIM($Pay_End_Dt, ' ') = ''
!               input $Pay_End_Dt 'Enter Pay End Date ({Prompt-Date})' type=date
!           end-if
!       else
!	   goto Report-Exit
!       end-if
!    else
!       do Select-Parameters
!       move $RC_PAYINIT.run_ID to $Run_ID
!       move $RC_PAYINIT.Pay_End_DT to $Pay_End_dt

!       if $Run_Id <> ''

!         do Edit-Run
!       else
!         display 'Error found -- Run Control Id is invalid'	
!	 goto Report-Exit 
!       end-if
!    end-if

!    if RTRIM($Pay_End_Dt, ' ') <> ''
!       do Edit-PayCalendar
!    else
!       display 'Error --  Pay End dt is invalid'
!    end-if

!    if $prcs_process_instance <> ''
!      and $Found = 'N'
!        goto Report-Exit
!    end-if
  
  Let $GEXXX902_Deptid_Alias   = 'a2.deptid'
  Do GEXXX902-Select-Deptid-Parameters

  do MAIN   !  MAIN renamed Report
  do update-job-pay 
  do update-job-pay-1
  do Commit-Transaction
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term
  !*do Reset

Report-Exit:
end-report

!*********************************************************************
!This procedure retrieves all the employees that satisfy the criteria
!and depending upon the employee type it updates pay_earnings and 
!pay_oth_Earns tables to initialize the necessary fields
!*********************************************************************

begin-procedure Main    ! Procedure MAIN renamed Report

!   move $slctrunid to $run_id
   do edit-pay-calendar
  move 0 to #EE_cnt
  move 0 to #EE_disp

  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan
  display 'Pay End Date : ' noline
  display $pay_end_dt
  
begin-select ON-ERROR=SQL-Error-Found('MAIN')
!/*+ RULE */
A.EMPLID
A.EMPL_RCD
A.EMPL_TYPE
A.DEPTID
A.EFFDT		! 03/10/2006 - Add
A.EFFSEQ	! 03/10/2006 - Add
I.COMPANY
I.PAYGROUP
I.OFF_CYCLE
I.PAY_END_DT
I.PAGE_NUM
I.LINE_NUM
I.ADDL_NBR
I.SEPCHK	! GEX-CXB 10/11/2007 HCM 9.0 Upgrade BEGIN
I.BENEFIT_RCD_NBR
I.EARNS_END_DT
I.EARNS_BEGIN_DT
I.ADDLPAY_REASON
I.DISABLE_DIR_DEP
I.GROSSUP
I.PAY_LINE_STATUS
I.OK_TO_PAY
I.SINGLE_CHECK_USE
I.ACCT_CD
I.GL_PAY_TYPE
I.DEPTID
I.JOBCODE
I.POSITION_NBR
I.SHIFT
I.SHIFT_RT
I.HOURLY_RT
I.FLSA_RT
I.RATE_USED
I.FLSA_REQUIRED
I.ERNCD_REG_HRS
I.ERNCD_OT_HRS
I.REG_EARN_HRS
I.REG_PAY_HRS
I.REG_HRS
I.OT_HRS
I.REG_HRLY_EARNS
I.OT_HRLY_EARNS
I.ERNCD_REG_EARNS
I.REG_PAY
I.REG_EARNS
I.DED_TAKEN
I.DED_SUBSET_ID
I.DED_TAKEN_GENL
I.DED_SUBSET_GENL
I.STATE
I.LOCALITY
I.PAY_FREQUENCY
I.TAX_PERIODS
I.TAX_METHOD
I.ADDL_TAXES
I.OVERRIDE_HOURLY_RT
I.TL_SOURCE
I.PAY_SHEET_SRC
I.BUSINESS_UNIT
I.EI_PRIOR_PD_CORR
I.COMP_RATECD_REG
I.COMP_RATECD_OT
I.COMPRATE_USED_REG
I.COMPRATE_USED_OT
I.FICA_STATUS_EE
I.PAID_PRDS_PER_YEAR
I.FLSA_END_DT
I.ORIG_PAYGROUP
I.FLSA_STATUS
I.XREF_NUM
I.UNION_CD
I.BEN_DED_STATUS
I.GENL_DED_STATUS 
I.JOB_PAY
!I.ERNCD_OT_HRS
!I.ERNCD_REG_HRS



			! GEX-CXB 10/11/2007 HCM 9.0 Upgrade BEGIN

	show ' ---->> EMPLOYEE ---->> '  noline
	show &A.EMPLID 
	show &A.EMPL_TYPE
	show &I.company
	show &I.paygroup
  MOVE &I.ADDL_NBR TO #ADDL_NBR

! 07/09/1999 - CJH - begin
!   let $updated = 'n'
  add +1 to #EE_cnt
  add +1 to #EE_disp
  if #EE_cnt = 100
     move 0 to #EE_cnt

   ! CWB 02/04/2000 Begin
   ! date-time () hh:mi:ss &timeProcess
     let $timeprocess = $AsOfNow 
   ! CWB 02/04/2000 End

     display #EE_disp 99999 noline
     display ' Employee Paylines Processed: ' noline
     display $timeProcess
  end-if

  do get-action-and-reason

  if $action_reason_found = 'Y'  
  			 
     do update-pay-earnings
     do update-pay-oth-earnings    !HOL earnings only
!              let $updated = 'y'							!AMS
  end-if
  
  

! 10/03/2001 - CJH
  If &I.COMPANY = 'RFI' and &I.PAYGROUP = 'OF4' and
     &A.EMPL_TYPE = 'H' and 
     (&A.DEPTID = 'C510' or 
     &A.DEPTID = 'C550' or &A.DEPTID = 'C811')
     do update-pay-earnings
     do update-pay-oth-earnings 
  end-if
! 10/03/2001 - CJH

      
! 03/04/2004 - CJH - clear dept sheets for C006,C024,C025,C028,C084
! 09/26/2005 - AXL - and C708

! 03/10/2006 - AXL - New
     let $panel_processing = 'N'																	!AMS
     Do Panel-Processing		!AXL 3/10/2006 Process Run Control info
  
  ! If (&A.DEPTID = 'C006' or &A.DEPTID = 'C024' or  &A.DEPTID = 'C025' or 
  !     &A.DEPTID = 'C028' or &A.DEPTID = 'C084' or  &A.DEPTID = 'C708')		
        !   do update-pay-earnings
        !   do update-pay-oth-earnings 
        !end-if
! 03/04/2004 - CJH
! 03/10/2006 - AXL - End

  evaluate &A.EMPL_TYPE 
     when = 'H' 
          if $out_action_reason = 'Y' or
             (&I.PAYGROUP <> 'EXE' and &I.PAYGROUP <> 'OFF' and
            ! CJH - 01/09/2001 - begin
             &I.PAYGROUP <> 'OF4' and
            ! CJH - 01/09/2001 - end
            ! CWB 06/20/2000 - begin 
            !                  &I.PAYGROUP <> 'OF2' and &I.PAYGROUP <> 'OF3')  			  			 			
              &I.PAYGROUP <> 'OF2' and &I.PAYGROUP <> 'OF3' and  			  			 			
              &I.PAYGROUP <> 'KAP')
            ! CWB 06/20/2000 - end 
              do update-pay-earnings
              do update-pay-oth-earnings   ! HOL earnings only
          end-if
	  break
     when = 'E'
   ! CJH - 01/09/2001 - begin
   !           if (&I.PAYGROUP <> 'OFF')
          if (&I.PAYGROUP <> 'OFF' and &I.PAYGROUP <> 'OF2' and
              &I.PAYGROUP <> 'OF3' and &I.PAYGROUP <> 'OF4')
   ! CJH - 01/09/2001 - end
              do update-pay-earnings
               do update-pay-oth-earnings   ! HOL earnings only
          end-if
	  break
     when = 'S'
        if $out_action_reason = 'Y' or
	     (&I.PAYGROUP <> 'EXE' and &I.PAYGROUP <> 'OFF' and
        ! CJH - 01/09/2001 - begin
             &I.PAYGROUP <> 'OF4' and
        ! CJH - 01/09/2001 - end

        ! CWB 06/20/2000 - begin 
        !                  &I.PAYGROUP <> 'OF2' and &I.PAYGROUP <> 'OF3')  			  			 			
             &I.PAYGROUP <> 'OF2' and &I.PAYGROUP <> 'OF3' and  			  			 			
             &I.PAYGROUP <> 'KAP')
        ! CWB 06/20/2000 - end 
			  			 			
	           do update-pay-earnings
             do update-pay-oth-earnings   ! HOL earnings only
!             let $updated = 'y'																	!AMS
			else																												!AMS	
			    show 'in salaried >>>>>> ' 
			    show #GEX_RC_DEPTID_ROWS
			    show '$panel processing >>>>>>>>>>> '
			    show $panel_processing
			    if #GEX_RC_DEPTID_ROWS > 0 and $panel_processing = 'Y'  !AMS 
			       show 'Inside dept proc'
			       do update-pay-earnings																!AMS
			       do update-pay-oth-earnings   ! HOL earnings only			!AMS
			    else																										!AMS
			      show 'Outside dept proc'
			      do get-addl-number																		!AMS
            do insert-pay-oth-earnings														!AMS
            do update-pay-earnings-reg-pay												!AMS
           end-if																									!AMS
       end-if                                                     
  end-evaluate	
! 07/09/1999 - CJH - end
!    if &A.EMPL_TYPE = 'S' 
      
            
!     let $updated = 'n'
!     end-if
!     let $updated = 'n'
FROM PS_JOB A, PS_PAY_EARNINGS I

WHERE I.PAY_END_DT = $pay_end_dt
  and I.EMPLID     = A.EMPLID
  and I.EMPL_RCD  = A.EMPL_RCD
  and I.COMPANY = A.COMPANY
  and I.PAYGROUP = A.PAYGROUP
  and I.EMPLID > '0'
  AND A.EMPL_TYPE IN ('H','E','S')
  AND A.EFFDT = (select max(aa.effdt) from ps_job aa
                 where aa.emplid = a.emplid
                   and aa.empl_rcd = a.empl_rcd
                   and aa.effdt <= $pay_end_dt)

! CWB 02/09/2005 BEGIN
  AND A.EFFSEQ =
        (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES
        WHERE A.EMPLID = A_ES.EMPLID
          AND A.EMPL_RCD = A_ES.EMPL_RCD
          AND A.EFFDT = A_ES.EFFDT)
! CWB 02/09/2005 END

  AND I.OFF_CYCLE = 'N'



end-select
end-procedure

!03/10/2006 - AXL - New procedure
!*********************************************************************
begin-procedure Panel-Processing
!*********************************************************************
begin-select ON-ERROR=SQL-Error-Found('Panel-Processing')

A2.EMPLID
A2.EMPL_RCD
A2.EMPL_TYPE
A2.DEPTID
I2.COMPANY
I2.PAYGROUP
I2.OFF_CYCLE
I2.PAGE_NUM
I2.LINE_NUM
I2.ADDL_NBR
     show '---> inside panel processing <---- '
     do update-pay-earnings
     do update-pay-oth-earnings 
!     let $updated = 'y'
     let $panel_processing = 'Y'

FROM PS_JOB A2, PS_PAY_EARNINGS I2

WHERE  I2.EMPLID	= &A.EMPLID 
 AND I2.EMPL_RCD        = &A.EMPL_RCD
 AND I2.COMPANY         = &I.COMPANY
 AND I2.PAYGROUP        = &I.PAYGROUP
 AND I2.OFF_CYCLE       = &I.OFF_CYCLE   
 AND A2.EMPL_TYPE       = &A.EMPL_TYPE 
 AND A2.EFFDT           = &A.EFFDT 
 AND A2.EFFSEQ          = &A.EFFSEQ 
 
 AND I2.PAY_END_DT = $pay_end_dt
 AND I2.EMPLID     = A2.EMPLID
 AND I2.EMPL_RCD   = A2.EMPL_RCD
 AND I2.COMPANY    = A2.COMPANY
 AND I2.PAYGROUP   = A2.PAYGROUP

 AND [$GEXXX902_Include_Deptid_Criteria]
end-select

end-procedure
!03/10/2006 - AXL - New procedure -End

!********************************************************************
!This procedure retrieves the action and reason for the employees if
!they are salaried
!********************************************************************

begin-procedure get-action-and-reason

move 'N' to $error-found
move 'N' to $action_reason_found
move 'N' to $out_action_reason

begin-select ON-ERROR=sql-error-found('get-action-and-reason')
!/*+ RULE */
F.ACTION
F.ACTION_REASON
F.EFFDT
F.EMPL_TYPE

  if ((&F.ACTION = 'LTD' and &F.ACTION_REASON = 'LTD')
         or
      (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'WC1')
         or
      (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'WC2')
         or
      (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'WC3'))
      show ' --> action reason found ---- '
      show &f.Action
      show &f.action_reason
      show &f.effdt
      show &f.empl_type 
      let $action_reason_found = 'Y'
  
  else

!  modify STD actions - CJH - 09/13/1999
    if (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'FML') or  	
       (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'LOF') or  	            
       (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'MIL') or  	
       (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'PER') or
       (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'PRS') or  	
       (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'STD') or  	            
       (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'ST2') or
       (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'ST3') or
       (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'ST4') or
       (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'SU1') or
       (&F.ACTION = 'PLA' and &F.ACTION_REASON = 'SU2') or  		

       (&F.ACTION = 'RWP' and &F.ACTION_REASON = 'BTH') or
       (&F.ACTION = 'RWP' and &F.ACTION_REASON = 'RWB') or
       (&F.ACTION = 'RWP' and &F.ACTION_REASON = 'ERW') or
       (&F.ACTION = 'RWP' and &F.ACTION_REASON = 'PAY') or

       (&F.ACTION = 'STD' and &F.ACTION_REASON = 'ST1') or
       (&F.ACTION = 'STD' and &F.ACTION_REASON = 'ST2') or

       (&F.ACTION = 'TWB' and &F.ACTION_REASON = 'LOF') or
       (&F.ACTION = 'TWB' and &F.ACTION_REASON = 'SEV') or
       (&F.ACTION = 'TWB' and &F.ACTION_REASON = 'TWB') or

       (&F.ACTION = 'TWP' and &F.ACTION_REASON = 'SEV') or
       (&F.ACTION = 'TWP' and &F.ACTION_REASON = 'TWP') 

! modify STD actions - CJH - 09/13/1999 - end

        let $out_action_reason = 'Y'
      show ' --> out action  found ---- '
      show &f.Action
      show &f.action_reason
      show &f.effdt
      show &f.empl_type 
     end-if
   end-if

FROM PS_JOB F

WHERE F.EMPLID = &A.EMPLID
  AND F.EMPL_RCD = &A.EMPL_RCD
  AND F.EFFDT <=     
! CJH - 06/21/1999 - begin
      (SELECT MAX(G.EFFDT)
         FROM PS_JOB G
        WHERE G.EMPLID = &A.EMPLID
	  AND G.EMPL_RCD = &A.EMPL_RCD
          AND G.EMPL_STATUS in ('L','P','R','T','Q','U')
  	  AND G.EFFDT <= $pay_end_dt)
  and F.EFFDT >= (SELECT MIN(GG.EFFDT)
                   FROM PS_JOB GG
                  WHERE GG.EMPLID = &A.EMPLID
                    AND GG.EMPL_RCD = &A.EMPL_RCD
                    AND GG.EMPL_STATUS in ('L','P','R','T','Q','U')
                    AND GG.EFFDT >= (SELECT MAX(GGG.EFFDT)
                                   FROM PS_JOB GGG
                                   WHERE GGG.EMPLID = &A.EMPLID
                          	     AND GGG.EMPL_RCD = &A.EMPL_RCD
                                     AND GGG.EMPL_STATUS not in ('L','P','R','T','Q','U')))
  AND F.EMPL_STATUS in ('L','P','R','T','Q','U')

! CJH - 06/21/1999 - end
end-select
end-procedure


!********************************************************************
!This procedure updates the JOB_PAY column for all the employees for
!that particular pay_end_dt
!********************************************************************

begin-procedure update-job-pay

move 'N' to $job_pay
! CJH - 04/09/1999
move 'Y' to $override_hourly_rt

begin-SQL ON-ERROR=SQL-Error-Found('Update-job-pay')

   UPDATE PS_PAY_EARNINGS
    SET   JOB_PAY    = $job_pay,
          OVERRIDE_HOURLY_RT = $override_hourly_rt
   where PAY_END_DT = $pay_end_dt
     and OFF_CYCLE = 'N'
end-SQL
! CJH - 04/09/1999

end-procedure

!********************************************************************
!This procedure updates the JOB_PAY column for all the employees for
!that particular pay_end_dt
!********************************************************************

begin-procedure update-job-pay-1

move 'N' to $job_pay

begin-SQL ON-ERROR=SQL-Error-Found('Update-job-pay-1')

   !UPDATE /*+ RULE */ PS_PAY_OTH_EARNS
   UPDATE PS_PAY_OTH_EARNS
    SET   JOB_PAY    = $job_pay
   where PAY_END_DT = $pay_end_dt 
     and OFF_CYCLE = 'N'
end-SQL

end-procedure

!*********************************************************************
!This procedure resets the necessary columns for the particular employee
!records in the pay_earnings table
!*********************************************************************

begin-procedure update-pay-earnings
let #reg_earns = 0
let #reg_pay = 0
let #reg_pay_hrs = 0
let #ot_hrs = 0
let $error-found = 'N'

begin-SQL ON-ERROR=SQL-Error-Found('Update-pay-Earnings')


   !UPDATE  /*+ RULE */ PS_PAY_EARNINGS
   UPDATE PS_PAY_EARNINGS
    SET   REG_EARNS    = #reg_earns,
          REG_PAY      = #reg_pay,
          REG_PAY_HRS  = #reg_pay_hrs,
          OT_HRS       = #ot_hrs

   where  company = &I.COMPANY
     and  paygroup = &I.paygroup
     and  pay_End_Dt = $pay_end_dt
     and  off_cycle = &I.off_cycle
     and  page_num = &I.page_num
     and  line_num = &I.line_num
     and  addl_nbr = &I.addl_nbr

!          EMPLID     = &A.EMPLID
!     and  EMPL_RCD  = &A.EMPL_RCD
!     and  PAY_END_DT = $pay_end_dt
end-SQL

end-procedure

!*********************************************************************
!This procedure resets the necessary columns for the particular employee
!records in the pay_oth_earns table
!*********************************************************************

begin-procedure Update-pay-Oth-Earnings

let #oth_earns = 0
let #oth_hrs = 0
let #oth_pay = 0
let $add_gross = ' '
let #addl_seq = 0
let $error-found = 'N'

begin-SQL ON-ERROR=SQL-Error-Found('Update-pay-Oth-Earns')
   !UPDATE /*+ RULE */ PS_PAY_OTH_EARNS
   UPDATE PS_PAY_OTH_EARNS
    SET   OTH_EARNS    = #oth_earns,
          OTH_HRS      = #oth_hrs,
          OTH_PAY      = #oth_pay,
          ADD_GROSS    = $add_gross,
          ADDL_SEQ     = #addl_seq

   where  COMPANY    = &I.Company
     and  PAYGROUP   = &I.PayGroup
     and  PAY_END_DT = $Pay_End_Dt
     and  OFF_CYCLE  = &I.off_cycle
     and  PAGE_NUM      = &I.Page_NUM
     and  LINE_NUM      = &I.Line_NUM
     and  ADDL_NBR      = &I.ADDL_NBR
     and  ERNCD = 'HOL'
end-SQL

end-procedure


!************************************************************************
!GEX-CXB   10/09/2007   HCM 9.0 UPGRADE  BEGIN
!************************************************************************

!*********************************************************************
!This procedure moves all salary of salaried employee from 
!the pay_earnings table to pay_oth_earns
!*********************************************************************

begin-procedure insert-pay-oth-earnings

   SHOW 'IN insert-pay-oth-earnings'


		if &I.REG_PAY > 0
				SHOW '-->INSERT FOR EMP -->  ' &A.EMPLID
				
				do insert-into-pay-oth-earnings_reg_erns
				do insert-pay-earnings
				!do insert-into-pay-oth-earnings_ot_erns								! AMS
				SHOW 'INSERT SUCESSFULLY '
				SHOW 'REG_EARN INSERTED '  &I.REG_PAY
		end-if
		let #addl_nbr=&I.ADDL_NBR			!Added GEX-CXB   10/16/2007   HCM 9.0 UPGRADE  



end-procedure


         
!*********************************************************************
!This procedure moves all Regular salary of salaried employee from 
!the pay_earnings table to pay_oth_earns
!*********************************************************************      
       
begin-procedure insert-into-pay-oth-earnings_reg_erns
  show '  --->  pay_OTH_EARNS'
  show &I.COMPANY
  show &I.PAYGROUP
  show &I.PAY_END_DT
  show &I.OFF_CYCLE
  show &I.PAGE_NUM
  show &I.LINE_NUM
  show &I.addl_nbr
  SHOW #ADDL_NUM_INSERT

begin-sql  ON-ERROR=SQL-Error-Found('insert-into-pay-oth-earnings_reg_erns')
insert into PS_PAY_OTH_EARNS 	(COMPANY,
	 			 PAYGROUP,
	 			 PAY_END_DT,
	 			 OFF_CYCLE,
	 			 PAGE_NUM,
	 			 LINE_NUM,
	 			 ADDL_NBR,
	 			 ERNCD,
	 			 SEPCHK,
	 			 JOB_PAY,	
	 			 OTH_HRS,
	 			 OTH_PAY,
	 			 OTH_EARNS,
	 			 ADD_GROSS,
	 			 TAX_METHOD,
	 			 ADDL_SEQ,
	 			 TL_SOURCE,
	 			 RATE_USED,
	 			 BAS_CREDIT_SW,
	 			 COMP_RATECD,
	 			 COMPRATE,
	 			 COMPRATE_USED,
	 			 HRS_DIST_SW,
	 			 XREF_NUM,
	 			 EX_DOC_ID,
	 			 EX_DOC_TYPE,
	 			 EX_LINE_NBR,
	 			 CURRENCY_CD,
	 			 VC_PLAN_ID,
	 			 VC_PAYOUT_PRD_ID,
	 			 GB_GROUP_ID,
	 			 APPLID,
	 			 AWARD_DATE,
	 			 NOTIFY_STATUS,
	 			 EIM_KEY)
			   VALUES(&I.COMPANY,
	 			  &I.PAYGROUP,
	 			  &I.PAY_END_DT,
	 			  &I.OFF_CYCLE,
	 			  &I.PAGE_NUM,
	 			  &I.LINE_NUM,
	 			 #ADDL_NUM_INSERT,
	 	 		  'REG',
	 	 		  &I.SEPCHK,
	 			  'N', 
	 			  &I.REG_HRS,
	 			  &I.REG_PAY,
	 			  &I.REG_EARNS,
		 		  'N',
		 		  'A',
	 			  '01',
	 			  'G',
	 			  'H',
	 			  'N',
	 			  ' ',
	 			  0,
	 			  &I.COMPRATE_USED_REG,
	 			  'N',
	 			  0,
	 			  ' ',
	 			  ' ',
	 			  0,
	 			  ' ',
	 			  ' ',
	 			  ' ',
	 			  ' ',
	 			  ' ',
	 			  '',
	 			  'N',
	 			  ' ')
end-sql
end-procedure

!*********************************************************************
!This procedure moves all OT salary of salaried employee from 
!the pay_earnings table to pay_oth_earns
!*********************************************************************  	 		

begin-procedure insert-into-pay-oth-earnings_ot_erns
!LET  #addl_nbr=#addl_nbr + 1
!SHOW '#addl_nbr FOR OT_EARNS INSERT '
begin-sql ON-ERROR=SQL-Error-Found('insert-into-pay-oth-earnings_ot_erns')
insert into PS_PAY_OTH_EARNS 
	(COMPANY
	 ,PAYGROUP
	 ,PAY_END_DT
	 ,OFF_CYCLE
	 ,PAGE_NUM
	 ,LINE_NUM
	 ,ADDL_NBR
	 ,ERNCD
	 ,SEPCHK
	 ,JOB_PAY
	 ,OTH_HRS
	 ,OTH_PAY
	 ,OTH_EARNS
	 ,ADD_GROSS
	 ,TAX_METHOD
	 ,ADDL_SEQ
	 ,TL_SOURCE
	 ,RATE_USED
	 ,BAS_CREDIT_SW
	 ,COMP_RATECD
	 ,COMPRATE
	 ,COMPRATE_USED
	 ,HRS_DIST_SW
	 ,XREF_NUM
	 ,EX_DOC_ID
	 ,EX_DOC_TYPE
	 ,EX_LINE_NBR
	 ,CURRENCY_CD
	 ,VC_PLAN_ID
	 ,VC_PAYOUT_PRD_ID
	 ,GB_GROUP_ID
	 ,APPLID
	 ,AWARD_DATE
	 ,NOTIFY_STATUS
	 ,EIM_KEY
	 )
	 VALUES(&I.COMPANY,
	 	&I.PAYGROUP,
	 	&I.PAY_END_DT,
	 	&I.OFF_CYCLE,
	 	&I.PAGE_NUM,
	 	&I.LINE_NUM,
	 	#addl_nbr,
	 	&I.ERNCD_OT_HRS,
	 	&I.SEPCHK,
	 	&I.JOB_PAY,
	 	&I.OT_HRS,
	 	&I.REG_PAY,
	 	#tot_ot_earns,	
	 	'N',
	 	'A',
	 	'2',
	 	'N',
	 	'H',
	 	'N',
	 	&I.COMP_RATECD_OT,
	 	'0',
	 	&I.COMPRATE_USED_OT,
	 	'N',
	 	'0',
	 	'1',
	 	'A',
	 	'1',
	 	'C',
	 	'6',
	 	'7',
	 	'8',
	 	'9',
	 	'5-MAY-2005',
	 	'N',
	 	'Q')
	

end-sql
end-procedure

!************************************************************************
!GEX-CXB   10/09/2007   HCN 9.0 UPGRADE  END
!************************************************************************


!************************************************************************

begin-procedure Edit-Pay-Calendar
  move 'N' to $Found
begin-select loops=1

!Y1.COMPANY
!Y1.PAYGROUP
Y1.PAY_END_DT 
Y1.pay_begin_dt 

  move 'Y' to $Found
  move &Y1.PAY_END_DT to $pay_end_dt
  move &Y1.PAY_BEGIN_DT TO $pay_begin_dt

!  move &Y1.company to $company
!  move &y1.paygroup to $paygroup

  FROM PS_PAY_CALENDAR Y1
where Y1.PAY_SHEETS_RUN = 'Y'
  AND Y1.PAY_CONFIRM_RUN = 'N'
  AND Y1.PAY_END_DT = (SELECT MAX(PAY_END_DT)
                         FROM PS_PAY_CALENDAR
                        WHERE PAY_SHEETS_RUN = 'Y'
                          AND PAY_CONFIRM_RUN = 'N'
                          AND RUN_ID > ' '
                          AND PAY_END_DT <= $AsOfToday 
! 01/02/2001 - Add criteria to ignore off-cycle calendar entries
                          AND PAY_OFF_CYCLE_CAL = 'N')
  AND Y1.PAY_OFF_CYCLE_CAL = 'N'
! 01/02/2001 - end
  AND Y1.RUN_ID > ' '

end-select

  if $Found = 'N'
    display 'Error --  Pay Calendar not found or not setup for the Run ID.'
    move ' ' to $SlctCompany
    STOP
  end-if

end-procedure

!********************************************************************
!This procedure validates the Run Control Id for this program 
!********************************************************************
!CJH
!begin-procedure Edit-Run

!move 0 to #Found

!begin-select ON-ERROR=SQL-Error-Found('Edit-Run') 
!N.PAY_END_DT
!N.PAY_BEGIN_DT
!  add 1 to #Found

!FROM PS_PAY_CALENDAR N
!WHERE N.RUN_ID = $Run_ID
!end-select

!  if #Found = 0
!    display 'Error --  Run ID not valid for any Pay Calendar.'
!    move ' ' to $Run_ID
!  else
!    if #Found = 1
!      move &N.Pay_End_Dt to $Pay_End_Dt
!      move &N.Pay_Begin_Dt to $Pay_Begin_Dt
!    else
!      display 'There is more than one Pay Calendar for the Run ID.'
!      if $prcs_process_instance = ''
!        move ''  to $Pay_End_Dt
!        move ''  to $Pay_Begin_Dt
!      end-if
!    end-if
!  end-if

!end-procedure

!********************************************************************
!This validates the run control parameters for this program
!********************************************************************
! CJH
!begin-procedure Edit-PayCalendar
!  move 'N' to $Found

!begin-SELECT ON-ERROR=SQL-Error-Found('Edit-PayCaleder')
!J.Pay_Confirm_Start
  
!  move 'Y' to $Found

!FROM PS_PAY_CALENDAR J
!WHERE J.RUN_ID = $Run_Id
!  AND J.PAY_END_DT = $Pay_End_Dt
!end-SELECT

!  if $Found = 'N'
!    display 'Error --  Pay Calendar not found.'
!    move ''  to $Pay_End_Dt
!  end-if

!  if &J.Pay_Confirm_Start = 'Y'
!    move 'N' to $Found
!    display 'Error --  Pay Calendar has been confirmed.'
!    move ''  to $Pay_End_Dt
!  end-if

!end-procedure

!*********************************************************************
!This procedure displays the sql errors that occured in the program
!*********************************************************************

begin-procedure SQL-Error-Found($Proc_Name) 
  do error-found
  display 'SQL Error in ' 
  display $Proc_Name 
  display 'sql-error = '
  display $_sql-error 
! 10/03/2001 - CJH - add stop condition to SQL error routine
  STOP
! 10/03/2001 - CJH

end-procedure

!*********************************************************************
!This procedure resets the necessary columns for the particular employee
!records in the pay_earnings table
!*********************************************************************

begin-procedure insert-pay-earnings
  show  '---> pay_EARNingS'
  show &I.COMPANY
  show &I.PAYGROUP
  show &I.PAY_END_DT
  show &I.OFF_CYCLE
  show &I.PAGE_NUM
  show &I.LINE_NUM
  show &I.addl_nbr
  SHOW #ADDL_NUM_INSERT
  let #pay_reg_pay = 0
begin-sql ON-ERROR=SQL-Error-Found('insert-into-pay-EARNINGS')
insert into PS_PAY_EARNINGS
		(COMPANY
	 ,PAYGROUP
	 ,PAY_END_DT
	 ,OFF_CYCLE
	 ,PAGE_NUM
	 ,LINE_NUM
	 ,ADDL_NBR
   ,SEPCHK
   ,EMPLID
   ,EMPL_RCD
   ,BENEFIT_RCD_NBR
   ,EARNS_END_DT
   ,EARNS_BEGIN_DT
   ,ADDLPAY_REASON
   ,DISABLE_DIR_DEP
   ,GROSSUP
   ,PAY_LINE_STATUS
   ,OK_TO_PAY
   ,JOB_PAY
   ,SINGLE_CHECK_USE
   ,ACCT_CD
   ,GL_PAY_TYPE
   ,DEPTID
   ,JOBCODE
   ,POSITION_NBR
   ,SHIFT
   ,SHIFT_RT
   ,HOURLY_RT
   ,FLSA_RT
   ,RATE_USED
   ,FLSA_REQUIRED
   ,ERNCD_REG_HRS
   ,ERNCD_OT_HRS
   ,REG_PAY_HRS
   ,REG_HRS
   ,OT_HRS
   ,REG_HRLY_EARNS
   ,OT_HRLY_EARNS
   ,ERNCD_REG_EARNS
   ,REG_PAY
   ,REG_EARNS
   ,REG_EARN_HRS
   ,DED_TAKEN
   ,DED_SUBSET_ID
   ,DED_TAKEN_GENL
   ,DED_SUBSET_GENL
   ,STATE
   ,LOCALITY
   ,PAY_FREQUENCY
   ,TAX_PERIODS
   ,TAX_METHOD
   ,ADDL_TAXES
   ,OVERRIDE_HOURLY_RT
   ,TL_SOURCE
   ,PAY_SHEET_SRC
   ,BUSINESS_UNIT
   ,EI_PRIOR_PD_CORR
   ,COMP_RATECD_REG
   ,COMP_RATECD_OT
   ,COMPRATE_USED_REG
   ,COMPRATE_USED_OT
   ,FICA_STATUS_EE
   ,PAID_PRDS_PER_YEAR
   ,FLSA_END_DT
   ,ORIG_PAYGROUP
   ,FLSA_STATUS
   ,XREF_NUM
   ,UNION_CD
   ,BEN_DED_STATUS
   ,GENL_DED_STATUS)
   VALUES
   (&I.COMPANY
	 	,&I.PAYGROUP
	 	,&I.PAY_END_DT
	 	,&I.OFF_CYCLE
	 	,&I.PAGE_NUM
	 	,&I.LINE_NUM
	 	,#addl_num_insert
   ,&I.SEPCHK
   ,&A.EMPLID
   ,&A.EMPL_RCD
   ,&I.BENEFIT_RCD_NBR
   ,&I.EARNS_END_DT
   ,&I.EARNS_BEGIN_DT
   ,&I.ADDLPAY_REASON
   ,&I.DISABLE_DIR_DEP
   ,&I.GROSSUP
   ,&I.PAY_LINE_STATUS
   ,&I.OK_TO_PAY
   ,&I.JOB_PAY
   ,&I.SINGLE_CHECK_USE
   ,&I.ACCT_CD
   ,&I.GL_PAY_TYPE
   ,&I.DEPTID
   ,&I.JOBCODE
   ,&I.POSITION_NBR
   ,&I.SHIFT
   ,&I.SHIFT_RT
   ,&I.HOURLY_RT
   ,&I.FLSA_RT
   ,&I.RATE_USED
   ,&I.FLSA_REQUIRED
   ,&I.ERNCD_REG_HRS
   ,&I.ERNCD_OT_HRS
   ,&I.REG_PAY_HRS
   ,&I.REG_HRS
   ,&I.OT_HRS
   ,&I.REG_HRLY_EARNS
   ,&I.OT_HRLY_EARNS
   ,&I.ERNCD_REG_EARNS
   ,#pay_reg_pay															!reg_pay
   ,&I.REG_EARNS
   ,&I.REG_EARN_HRS
   ,&I.DED_TAKEN
   ,&I.DED_SUBSET_ID
   ,&I.DED_TAKEN_GENL
   ,&I.DED_SUBSET_GENL
   ,&I.STATE
   ,&I.LOCALITY
   ,&I.PAY_FREQUENCY
   ,&I.TAX_PERIODS
   ,&I.TAX_METHOD
   ,&I.ADDL_TAXES
   ,&I.OVERRIDE_HOURLY_RT
   ,&I.TL_SOURCE
   ,&I.PAY_SHEET_SRC
   ,&I.BUSINESS_UNIT
   ,&I.EI_PRIOR_PD_CORR
   ,&I.COMP_RATECD_REG
   ,&I.COMP_RATECD_OT
   ,&I.COMPRATE_USED_REG
   ,&I.COMPRATE_USED_OT
   ,&I.FICA_STATUS_EE
   ,&I.PAID_PRDS_PER_YEAR
   ,&I.FLSA_END_DT
   ,&I.ORIG_PAYGROUP
   ,&I.FLSA_STATUS
   ,&I.XREF_NUM
   ,&I.UNION_CD
   ,&I.BEN_DED_STATUS
   ,&I.GENL_DED_STATUS)
   
end-sql
end-procedure


!*********************************************************************
!This procedure resets the necessary columns for the particular employee
!records in the pay_earnings table
!*********************************************************************

begin-procedure get-addl-number
 LET #ADDL_NUM_INSERT = 0
begin-select

MAX(pe1.ADDL_Nbr)		&ADDL_NUM_INSERT

			LET #ADDL_NUM_INSERT = &ADDL_NUM_INSERT + 1
			show ' ---> addl num --> ' #ADDL_NUM_INSERT
			
from ps_pay_earnings PE1
  where PE1.COMPANY = &I.COMPANY AND
  PE1.PAYGROUP = &I.PAYGROUP AND
  PE1.OFF_CYCLE = &I.OFF_CYCLE and
  PE1.PAY_END_DT = &I.PAY_END_DT and
  PE1.PAGE_NUM = &I.PAGE_NUM and
  PE1.LINE_NUM = &I.LINE_NUM
  
end-select
end-procedure

!*********************************************************************
!This procedure resets the necessary columns for the particular employee
!records in the pay_earnings table
!*********************************************************************

begin-procedure update-pay-earnings-reg-pay
let #reg_earns = 0
let #reg_pay = 0
let #reg_pay_hrs = 0
let #ot_hrs = 0
let $error-found = 'N'

begin-SQL ON-ERROR=SQL-Error-Found('Update-pay-Earnings')


   !UPDATE  /*+ RULE */ PS_PAY_EARNINGS
   UPDATE PS_PAY_EARNINGS
    SET   REG_EARNS    = #reg_earns,
          REG_PAY      = #reg_pay,
          REG_PAY_HRS  = #reg_pay_hrs,
          OT_HRS       = #ot_hrs

   where  company = &I.COMPANY
     and  paygroup = &I.paygroup
     and  pay_End_Dt = $pay_end_dt
     and  off_cycle = &I.off_cycle
     and  page_num = &I.page_num
     and  line_num = &I.line_num
     and  addl_nbr = &I.addl_nbr

!          EMPLID     = &A.EMPLID
!     and  EMPL_RCD  = &A.EMPL_RCD
!     and  PAY_END_DT = $pay_end_dt
end-SQL

end-procedure


!********************************************************************
!This procedures displays the error messages for the records that are
!in progress
!********************************************************************

begin-procedure Error-Found
  move 'Y' to $Error-Found
end-procedure

#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
!*#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
!#Include 'payinit.sqc'
#Include 'payrnctl.sqc'  !Select-Parameters
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#include 'gexxx902.sqc'  !Get deptid multiple row table