!***********************************************************************
!  TAX960LC :  Create Local W-2 Files for Selected Locals              *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2012, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2012/12/29:19:26:49                                 !

!       $Release:  HR9                                                 !

!    $Resolution:  885414                                              !

!                                                                      *
!***********************************************************************
!                                                                      *
! Rimini Street Modification Log                                       *
!                                                                      *
!  08/22/2013   RSI-HCM103548 v1.0                                     *
!  Descr: Added Email address validation as per SSA Specifications.    *
!                                                                      *
!  06/02/2014   RSI-HCM103949 v2.0                                     *
!  Descr: Included new sqc for State EIN validations                   *
!                                                                      *
!  08/05/2014   RSI-HCM103951  v3.0                                    *
!  Descr: Modified the SQR to generate .XLS file for Detroit Michigan  *
!         MI/22000, rather than SSA Format.                            *
!         Modified the SQR for City of Flint, Michigan state that the  *
!         file must be named W2REPORT                                  *
!                                                                      *
!  11/21/2014  RSI-HCM103992 V4.0                                      *
!  Descr:Modified the SQR for Ohio Cities (Kettering,Lakewood ,        *
!        Lorain and Middletown ), Record ‘RS’ position 5-9 to report   * 
!        W2_MAG_CODE value as Tax Entity Code.       
!***********************************************************************
! Modified for Education & Government                                  *
! HP00001       Retirement Contributions for Massachusetts             *
! vendkxy       02/10/2010     Added the Code as per the S3# 13866650  *
! GEXTX_851_B0292_02 2011-02-22 Vahini Katta                           *
! Added the agencies to After-W2-Reporting-Co-Chg,                     *
! Write-S-Record-from-Local procedures                                 *
! GEXTX_851_P118964_01  2013-01-21 Vahini Katta                        *
! Added PTJED agency to After-W2-Reporting-Co-Chg,                     *
! Write-S-Record-from-Local procedures                                 *
!*************************************************************************************************
! Date        Modification ID       Author   Description                                         *
! 11/11/2013  GEXPY_848_E144189_01  ISDVMZA  Tax Update 13-E Retrofit.                           *
!                                   Added Email address validation as per SSA Specifications.    *
!*************************************************************************************************
! Date        Modification ID       Author   Description                                         *
! 01/11/2014  GEXPY_848_E165221_01  ISDVMZA  Tax Update 13-F Retrofit.                           *
!                                            Added CANFIELD to list of Agency                    *
! 11/26/2014  GEXPY_TAX_UPG_14E     ISDVMZA  Tax Update 14-E Retrofit.                           *
!                                            Changed validein.sqc to rsieincd.sqc for            *
!                                               State EIN validation                             *
!                                            Retrofit modifications are also identified by       *
!                                               RSI-HCM103949.                                   *
!*************************************************************************************************

#include 'setenv.sqc'  !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#Define Prgm_Ver       '4.0'   !Corresponds to Modification History above.                                             !RSI-HCM103992                                          

Begin-Program

  display ''
  display 'Creating Selected W-2 Local Files in SSA Format'
                                                                                                                         !RSI-HCM103951 Begin
  Show 'TAX960LC.SQR - Version ' {Prgm_Ver}
  Show '**************************************************'
  do Stdapi-Init
  do Get-Tax-Reporting-Run-Controls
  do DTRT-Remove-Line
                                                                                                                        !RSI-HCM103951 End
  Let $t1 = datenow()
  Show 'Report Started at : ' $t1

  Move 0 to $Zero_fill 099999999999999

  do Init-Report
  do Process-Main

  do Stdapi-Term

  Display ''
  Let $t2 = datenow()
  Show 'Report Ended at : ' $t2
End-Program
                                                                                                                       !RSI-HCM103951 Begin
!******************************************************************
! Procedure DTRT-Remove-Line
!******************************************************************
Begin-Procedure DTRT-Remove-Line

  let $InputAgency = 'DET'
  let $InputJurisdiction = '22000'

Begin-Select
CCC.REG_SELECT_PROC

   move &CCC.REG_SELECT_PROC to $CCC_REG_SELECT_PROC

FROM PS_RC_TAX960LC CCC
WHERE CCC.OPRID               = $Prcs_OprID
  AND CCC.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID
End-Select

  If $CCC_REG_SELECT_PROC = 'J' OR $CCC_REG_SELECT_PROC = 'T'
     display ''
     display 'Creating Selected W-2 Local Files in SSA Format'
  End-If

  If $CCC_REG_SELECT_PROC = 'A'
     do Read-Agencies
     let $SelectedAgencies = rtrim($SelectedAgencies, ' ')
     If $SelectedAgencies <> $InputAgency
        display ''
        display 'Creating Selected W-2 Local Files in SSA Format'
     End-If
  End-If

  If $CCC_REG_SELECT_PROC = 'L'
     do Read-Jurisdictions
     let $SelectedJurisdictions = rtrim($SelectedJurisdictions, ' ')
     If $SelectedJurisdictions <> $InputJurisdiction
        display ''
        display 'Creating Selected W-2 Local Files in SSA Format'
     End-If
  End-If

End-Procedure DTRT-Remove-Line
                                                                                                                       !RSI-HCM103951 End
Begin-Procedure Init-Report
  do Get-EandG                                                          !HP00001
  do Get-FederalProduct                                                 !FED0001
  do Init-DateTime
  do Init-Number
  do Get-Calendar-Year-Id
                                                                                                                       !RSI-HCM103951 REMOVED 2 LINES
  do Initialization

  If $Prcs_Process_Instance = ''
    Display 'Report cannot be run outside of PeopleSoft, please use process scheduler.'
    Stop
  End-if

End-Procedure

Begin-Procedure Populate-Headings
  let $ReportID = 'TAX960LC'
  let $Program = 'LC'
  move $E.W2_State to $State
  do Get-ee-State-Code
  move &S.NUMERIC_CD to $StateNumCd
  move &S.NUMERIC_CD to $StateNumCdA
  let $StateName = rtrim(&S.DESCR, ' ')
  let $ReportTitle = ' W-2 File Summary Report'
  show $StateName ' W-2 File Records'
  show ' '
  do File-Create
  let $Col5Hdr2 = '                    '
  let $Col6Hdr2 = '            Wages  '
  let $Col7Hdr2 = ' Income Tax'

End-Procedure


Begin-Procedure Initialization

  do Get-Current-DateTime
  move '1' to $MMLZero
  do Format-DateTime($AsOfToday, $960Date, {DEFYMD},'','')
  move $960Date to $AsOfYear xxxx   !extract the current year
  move $AsOfYear  to #AsOfYear
  move #AsOfYear  to #saveAsOfYear
  subtract 1    from #AsOfYear

  move ''  to $Last_Emplid
  move ''  to $Last_W2_Rpt_Co
  move ''  to $Last_Company
  move ''  to $Last_State
  move ''  to $Last_locality

  If &TX.Balance_Year <> #AsOfYear
    display ''
    display 'Please note : Current Year is not one greater than Tax Reporting Year.'
    display 'Current Year is    ' noline
    display  #saveAsOfYear  9999
    display 'Tax Reporting Year ' noline
    display &TX.Balance_Year
    display ''
  End-if

  display 'Beginning with tax year 2012, TAX960LC will not create files for submitting W-2 data for PA Local Earned Income Taxes to PA Act 32 Tax Collection Districts.'
  display 'TAX960LC will create the file for submitting Philadelphia Wage Tax W-2 data to the City of Philadelphia Revenue Department.'
  display ' '

Begin-Select
TEMP_SSN_MASK
FROM PS_INSTALLATION
End-Select

Begin-Select
LC960.REPORTING_MEDIUM
LC960.DISKETTE_TYPE
LC960.REG_SELECT_PROC

   move &LC960.REG_SELECT_PROC to $ProcessType
   move &LC960.REPORTING_MEDIUM to $FileType
   move &LC960.Diskette_Type    to $DisketteType


FROM PS_RC_TAX960LC LC960
WHERE LC960.OPRID               = $Prcs_OprID
  AND LC960.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID

End-Select

  if $ProcessType = 'J'
    let $Space = ''' '''
    let $LTT2.SelectedAgencies = 'AND LTT2.W2_RPTG_AGENCY <> ' || $Space
    move ' ' to $AA.SelectedStates
    move ' ' to $LTT2.SelectedJurisdictions
  end-if
  if $ProcessType = 'A'
    do Read-Agencies
    move ' ' to $AA.SelectedStates
    move ' ' to $LTT2.SelectedJurisdictions
  end-if
  if $ProcessType = 'T'
    do Read-States
    let $Space = ''' '''
    let $LTT2.SelectedAgencies = 'AND LTT2.W2_RPTG_AGENCY <> ' || $Space
    move ' ' to $LTT2.SelectedJurisdictions
  end-if
  if $ProcessType = 'L'
    do Read-Jurisdictions
    let $Space = ''' '''
    let $LTT2.SelectedAgencies = 'AND LTT2.W2_RPTG_AGENCY <> ' || $Space
    move ' ' to $AA.SelectedStates
  end-if

End-Procedure


Begin-Procedure File-Create

  do Close-File
  move &TX.Company       to $XCompany  !TX.Company is the Transmitter
  move &TX.Balance_Year to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')
  let $EffDate = $CalYear || '1231'
  do Format-DateTime($EffDate, $EffDate, {DEFCMP}, '', 'native')
  do Get-Transmitter-Data
                                                                                                                       !RSI-HCM103951 Begin 
  If $DTRTHeader <> 'X'
    let $ECompany = rtrim(&E.Company, ' ')
  End-If
                                                                                                                       !RSI-HCM103951 End
  if $E.W2_State = 'PA'
    do Check-Disk
    else
    if $Agency = 'STRA'
      do Check-Disk
      else
        move &LC960.REPORTING_MEDIUM to $FileType
    end-if
  end-if
  do Open-File
  do Write-Transmitter-Records

End-Procedure


Begin-Procedure Get-Transmitter-Data
  Let $XmitterFound = 'N'
Begin-Select
X.DESCR
X.FEDERAL_EIN
X.CITY
X.STATE
X.POSTAL
X.COUNTRY

  Let $XmitterFound = 'Y'

FROM  PS_W2_COMPANY X
WHERE COMPANY = $XCompany
  AND X.CALENDAR_YEAR = &TX.Balance_Year
End-Select

  If $XmitterFound = 'N'
    Show 'W2 COMPANY DATA NOT SETUP FOR COMPANY : ' $XCompany '  BALANCE YEAR : ' &TX.Balance_Year
    Stop
  End-if

  move $XCompany to $Trans_Company
  move &TX.Balance_Year to #Trans_Balance_Year
  do Get-X-Address

Begin-Select
RC960.EMPLR_PIN
RC960.RESUB_INDICATOR
RC960.RESUB_TLCN
RC960.CONTACT_NAME_SSA
RC960.TELEPHONE_NBR
RC960.PHONE_EXTN
RC960.EMAIL_ADDR_MMREF
RC960.CONTACT_FAX
RC960.NOTIFY_METHOD

FROM PS_TAX960_PARM RC960

End-Select

  if rtrim(&RC960.CONTACT_NAME_SSA, ' ') = ''
    Show 'Electronic Parameters must be set up on SETUP Menu.'
    Show 'Re-execute after establishing Electronic Parameters.'
    Stop
  End-if

  move &RC960.EMAIL_ADDR_MMREF to $RC960.EMAIL_ADDR
  uppercase $RC960.EMAIL_ADDR

  !Begin RSI-HCM103548
  !Begin GEXPY_848_E144189_01 -- ISDVMZA

  Let $Valid_Email = 'Y'

  do Validate-Email-Address($RC960.EMAIL_ADDR,$Valid_Email)



  If $Valid_Email = 'N'

     show 'ERROR: The Contact Email Address is blank or does not meet the required format.'

     show 'Please review the Contact Email Address format to ensure compliance with the '

     show 'required Social Security Administration Email Address specifications. '

     STOP

  End-If
  !End RSI-HCM103548
  !End GEXPY_848_E144189_01 -- ISDVMZA



  Let $RC960.CONTACT_NAME_SSA = translate(&RC960.CONTACT_NAME_SSA,',','')
  Let #RecordLength = 512
  if $FileType = 'D'
    do Calculate-Diskette-Capacity
  end-if
  #ifdef TAXTEST
     move 5 to #MaxRecordsPerDiskette
  #endif

End-Procedure

Begin-Procedure Write-Transmitter-Records
  move &X.Federal_EIN       to $FedEIN  099999999
  move &RC960.EMPLR_PIN     to $EmprPIN ! 09999999999999999
!  let  $EmprPIN = rpad(rtrim(&RC960.EMPLR_PIN, ' '),17,'0')

  move '99'  to $SoftwareCd

  If &RC960.RESUB_INDICATOR = 'Y'
    Let $RS_Ind = '1'
  Else
    Let $RS_Ind = '0'
  End-if

  If &RC960.PHONE_EXTN <> 0
    move &RC960.PHONE_EXTN to $Phone_Extn
  Else
    move '    ' to $Phone_Extn
  End-if

  move &RC960.RESUB_TLCN      to $TLCN
  move &X.Descr        to $Xmitr_Name
  move &X.Descr        to $Xmitr_Name2
  move &X.City         to $City
  let  $StateCd = rtrim(&X.State, ' ')
  move &X.Postal       to $Zip
  move &X.Country      to $Country
  move &X.City         to $City2
  let  $StateCd = rtrim(&X.State, ' ')
  move &X.Postal       to $Zip2
  move &X.Country      to $Country2

  do Foreign-Address-Test('Format 3',25)

  uppercase $Xmitr_Name
  uppercase $Xmitr_Name2


  If $ForeignAddrInd = 'X'
     Let $US_Zip      = ' '
     Let $US_ZipXtnsn = ' '
     Let $US_State    = ' '
     Let $Frgn_Zip    = $Zip
     Let $Frgn_State  = $StateName
  Else
     Let $US_Zip      = $Zip
     Let $US_ZipXtnsn = $ZipExtsn
     Let $US_State    = $StateCd
     Let $Frgn_Zip    = ' '
     Let $Frgn_State  = ' '
     Let $Country-2Char   = ' '
     Let $US_Zip2      = $Zip
     Let $US_ZipXtnsn2 = $ZipExtsn
     Let $US_State2    = $StateCd
     Let $Frgn_Zip2    = ' '
     Let $Frgn_State2  = ' '
     Let $Country-2Char2   = ' '
  End-if

  !Unique Local Requirements - Different from SSA format
  ! Decide to write the RA record

  Evaluate $Agency
    when = 'YATB'

      break

    when = 'WSTB'                      !All other PA localities should go here unless
    when = 'ALLEN'                     ! otherwise specified (See YATB)
      do Write-RA-Record-for-PA
      do Check-Disk

      add 1 to #RecordCount
      add 1 to #Tot_Record_Count
      break

    when = 'HURON'
    when = 'STLTA'
    when = 'CTCB'
    when = 'LCTCB'
      if $Agency = 'HURON'
        let $EmprPIN = ' '
        let $RS_Ind = ' '
        let $TLCN = ' '
        let $SoftwareCD = ' '
        let $Xmitr_Name = ' '
        let $X.Address1 = ' '
        let $X.Address2 = ' '
        let $City = ' '
        let $US_State = ' '
        let $US_Zip = ' '
        let $US_ZipXtnsn = ' '
        let $Frgn_State2 = ' '
        let $Frgn_Zip2 = ' '
        let $Country-2Char2 = ' '
        let $RC960.Contact_name_ssa = ' '
        let $RC960.Telephone_Nbr = ' '
        let $Phone_Extn = ' '
        let $RC960.Email_addr = ' '
        let $RC960.Contact_Fax = ' '
        let $RC960.Notify_Method = ' '
      end-if
      if $Agency = 'STLTA'
        let $EmprPIN = ' '
        let $RS_Ind = ' '
        let $TLCN = ' '
        let $SoftwareCD = ' '
        let $X.Address1 = ' '
        let $X.Address2 = ' '
        let $City = ' '
        let $US_State = ' '
        let $US_Zip = ' '
        let $US_ZipXtnsn = ' '
        let $Frgn_State = ' '
        let $Frgn_Zip = ' '
        let $Country-2Char = ' '
        let $Xmitr_Name2= ' '
        let $X.Address1-2 = ' '
        let $X.Address2-2 = ' '
        let $City2 = ' '
        let $US_State2 = ' '
        let $US_Zip2 = ' '
        let $US_ZipXtnsn2 = ' '
        let $Frgn_State2 = ' '
        let $Frgn_Zip2 = ' '
        let $Country-2Char2 = ' '
        let $RC960.Contact_name_ssa = ' '
        let $RC960.Telephone_Nbr = ' '
        let $Phone_Extn = ' '
        let $RC960.Email_addr = ' '
        let $RC960.Contact_Fax = ' '
        let $RC960.Notify_Method = ' '
      end-if
      if $Agency = 'CTCB'
        let $EmprPIN = ' '
        let $RS_Ind = ' '
        let $TLCN = ' '
        let $SoftwareCD = ' '
        let $Frgn_State = ' '
        let $Frgn_Zip = ' '
        let $Country-2Char = ' '
        let $Xmitr_Name2 = ' '
        let $X.Address1-2 = ' '
        let $X.Address2-2 = ' '
        let $City2 = ' '
        let $US_State2 = ' '
        let $US_Zip2 = ' '
        let $US_ZipXtnsn2 = ' '
        let $Frgn_State2 = ' '
        let $Frgn_Zip2 = ' '
        let $Country-2Char2 = ' '
        let $RC960.Contact_name_ssa = ' '
        let $RC960.Telephone_Nbr = ' '
        let $Phone_Extn = ' '
        let $RC960.Email_addr = ' '
        let $RC960.Contact_Fax = ' '
        let $RC960.Notify_Method = ' '
      end-if
      if $Agency = 'LCTCB'
        let $EmprPIN = ' '
        move 0     to $RS_Ind
        let $TLCN = ' '
        let $SoftwareCD = ' '
        let $Xmitr_Name = ' '
        let $X.Address1 = ' '
        let $X.Address2 = ' '
        let $City = ' '
        let $US_State = ' '
        let $US_Zip = ' '
        let $US_ZipXtnsn = ' '
        let $Frgn_State = ' '
        let $Frgn_Zip = ' '
        let $Country-2Char = ' '
        let $Frgn_State2 = ' '
        let $Frgn_Zip2 = ' '
        let $Country-2Char2 = ' '
        let $RC960.Notify_Method = ' '
        let $RC960.Telephone_Nbr = &RC960.Telephone_Nbr
        move &RC960.Phone_Extn to $Phone_Extn 09999
        let $RC960.Email_addr = &RC960.Email_addr_mmref
        let $RC960.Contact_Fax = &RC960.Contact_Fax
      end-if

      if $Agency = 'STLTA'
        let $SftwrVendorCd = ' '
      else
        let $SftwrVendorCd = '1414'
      end-if

        do Write-RA-Record-for-Locals
        do Check-Disk
        add 1 to #RecordCount
        add 1 to #Tot_Record_Count
        break

    when-other

      do Write-RA-Record
      do Check-Disk
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count
      break
  end-evaluate

End-Procedure


Begin-Procedure Process-Main

  move '0' to $StatutoryEe
  move 0   to #RetirePlan
  move '0' to $DeceasedFlag
  move 0   to #Third_Party_Sick_Ind

Begin-Select
LTT2.W2_RPTG_AGENCY  () on-break print=never before=Before-State  level=1
                                           AFTER=After-State  level=1
E.W2_STATE
A.W2_REPORTING_CO  () on-break print=never before=Before-W2-Reporting-Co-Chg  level=2
                                           AFTER=After-W2-Reporting-Co-Chg  level=2
A.DESCR
A.FEDERAL_EIN
A.CITY
A.STATE
A.POSTAL
A.COUNTRY
A.OTHER_EIN
A.BUSI_TERM_IND
A.EMPLOYMENT_TYPE
A.EMPLOYER_KIND

E.COMPANY
E.EMPLID           () on-break print=never before=Before-EmplID   level=3
                                           AFTER=AFTER-EMPLID  level=3
E.SEQUENCE_NUMBER
E.TAXFORM_ID
E.EMPLOYER_ID_SWT
E.SSN
E.YE_FNAME
E.YE_MIDDLE_NAME
E.YE_LNAME
E.YE_SUFFIX
E.CITY
E.STATE
E.POSTAL
E.COUNTRY
E.STATUTORY_EE
E.PENSION_PLAN
E.DECEASED
E.THIRDPARTY_SICKPAY
EE.PROCESS_FLAG
LTT2.W2_MAG_CODE
LTT2.LOCALITY
LTT2.STATE

    let $Agency = rtrim(&LTT2.W2_RPTG_AGENCY, ' ')
    move &E.Company         to $E.Company
    move &E.TaxForm_ID      to $E.TaxForm_ID
    move &E.Sequence_Number to #E.Sequence_Number
    move &E.Employer_ID_SWT to $E.Employer_ID_SWT
    move &LTT2.LOCALITY     to $LTT2.LOCALITY
    move &LTT2.STATE        to $LTT2.STATE
    move &E.W2_STATE        to $E.W2_State

  If &E.Statutory_Ee = 'Y'
    move '1' to $StatutoryEe
  End-if

  If &E.Pension_Plan = 'Y'
    move 1 to #RetirePlan
  End-if

  If &E.Deceased = 'Y'
    move '1' to $DeceasedFlag
  End-if

  If &E.ThirdParty_SickPay = 'Y'
     move 1 to #Third_Party_Sick_Ind
  End-if

  if $E.Emplid <> $Last_Emplid
        or &A.W2_REPORTING_CO <> $Last_W2_Rpt_Co
        or ($E.Emplid = $Last_Emplid
                and &A.W2_REPORTING_CO = $Last_W2_Rpt_Co
                and ($LTT2.STATE <> $Last_State
                or $LTT2.LOCALITY <> $Last_Locality))
    move 1 to #W2_Co_Count
    do Get-W2-Co-Count
  else
    if ($E.Emplid = $Last_Emplid
                and &A.W2_REPORTING_CO = $Last_W2_Rpt_Co
                and &E.COMPANY <> $Last_Company
                and $LTT2.STATE = $Last_State
                and $LTT2.LOCALITY = $Last_Locality
                )

        or

        (

         $E.Emplid = $Last_Emplid

         and &A.W2_REPORTING_CO = $Last_W2_Rpt_Co

         and &E.COMPANY = $Last_Company

         and $LTT2.STATE = $Last_State

         and $LTT2.LOCALITY = $Last_Locality

         and $LTT2.STATE = 'PA'

         and $LTT2.LOCALITY = '510101'

        )

       add 1  to #W2_Co_Count
    end-if
  end-if

  !Unique Local Requirements - Different from SSA format
  !
    do Load-Local-Amounts
    evaluate $E.W2_State
      when = 'MA'
        if $PublicSector= 'Y'  or                                    !HP00001
           $FederalProduct = 'Y'                                     !HP00001
            do Gather-FRMALOC-Amounts                                !HP00001
        else                                                         !HP00001
            move 0 to #FRMALOC-Retire-Fund
        end-if                                                       !HP00001
        break
      when = 'MD'
        do Gather-Local-Amounts
        break
      when = 'PA'
        if $Agency = 'PHILA' and
           $Local-Reportable = 'Y'
           move $E.COMPANY  to $Phila_Company
           move $E.W2_STATE    to $Phila_StateCode
           move $LTT2.LOCALITY to $Phila_Locality
           do Get-PHILA-EIN
        end-if
        break
    end-evaluate

  move $E.Emplid           to $Last_Emplid
  move &A.W2_REPORTING_CO  to $Last_W2_Rpt_Co
  move $E.COMPANY          to $Last_Company
  move $LTT2.STATE         to $Last_State
  move $LTT2.LOCALITY      to $Last_Locality

FROM  PS_W2_COMPANY A, PS_YE_EE EE, PS_YE_DATA E,
      PS_YE_AMOUNTS AA, PS_LOCAL_TAX_TBL2 LTT2
WHERE A.CALENDAR_YEAR    = &TX.Balance_Year
  AND A.W2_REPORTING_CO <> ' '
  AND A.TAXFORM_ID      =  'W'
  AND A.COMPANY          = E.COMPANY
  AND A.CALENDAR_YEAR    = E.CALENDAR_YEAR
  AND A.TAXFORM_ID       = E.TAXFORM_ID
  AND E.TAXFORM_ID       = 'W'
  AND E.COMPANY          = EE.COMPANY
  AND E.EMPLID           = EE.EMPLID
  AND E.TAXFORM_ID       = EE.TAXFORM_ID
  AND E.CALENDAR_YEAR    = EE.CALENDAR_YEAR
  AND E.COMPANY          = AA.COMPANY
  AND E.EMPLID           = AA.EMPLID
  AND E.CALENDAR_YEAR    = AA.CALENDAR_YEAR
  AND E.TAXFORM_ID       = AA.TAXFORM_ID
  AND E.SEQUENCE_NUMBER  = AA.SEQUENCE_NUMBER
  AND AA.LOCALITY = LTT2.LOCALITY
  AND AA.STATE    = LTT2.STATE
  AND (AA.STATE<>'PA'
       OR (AA.STATE='PA'
           AND AA.LOCALITY='510101'
           AND LTT2.W2_RPTG_AGENCY='PHILA'))
  [$LTT2.SelectedAgencies]
  [$E.SelectedStates]
  [$LTT2.SelectedJurisdictions]
  AND AA.BOX = '18'
  AND EE.PROCESS_FLAG   <> 'V'
  AND LTT2.EFFDT=(SELECT MAX(EFFDT) FROM PS_LOCAL_TAX_TBL2 LTT3
                  WHERE LTT2.STATE = LTT3.STATE
                    AND LTT2.LOCALITY = LTT3.LOCALITY)

ORDER BY  LTT2.W2_RPTG_AGENCY, E.W2_STATE, A.W2_REPORTING_CO, E.SSN, E.EMPLID,
          LTT2.LOCALITY

end-select

  If #Count-T <> 0
    do Write-T-Record
  End-if

  If #Count-U <> 0
    do Write-U-Record
  End-if

End-Procedure


Begin-Procedure  Before-W2-Reporting-Co-Chg

  move '  ' to $RESp
  move 0    to #Total_W2_Co
  move 0    to #W2_Co_Count
  move &A.W2_Reporting_Co to $Company
  move &A.W2_Reporting_Co to $A.W2_Reporting_Co

  move &A.EMPLOYMENT_TYPE to $EMPLOYMENT_TYPE
  move &A.EMPLOYER_KIND   to $EMPLOYER_KIND

  do Get-W2-Co-Information

  move &A.W2_Reporting_Co to $Co_Company
  move &TX.Balance_Year to #Co_Balance_Year
  do Get-A-Address

  If $A.Busi_Term_Ind = 'Y'
     Let $A.Busi_Term_Ind = '1'
  Else
     Let $A.Busi_Term_Ind = '0'
  End-if

  do Get-Third-Party-Amount

  do Get-Third-Party-Sick

  move 0 to #Count-S
  move 0 to #Count-T
  move 0 to #Count-U
  move 'N' to $E-Written

  If $E-Written = 'N'
    do Write-E-Record
  End-if

end-procedure

Begin-Procedure  After-W2-Reporting-Co-Chg

  If #Count-T <> 0
    do Write-T-Record
  End-if

  If #Count-U <> 0
    do Write-U-Record
  End-if

  Evaluate $Agency
     when = 'KCFD'
     when = 'CCA'
     when = 'RITA'
     when = 'SPRMI'
     when = 'DUBLN'
     when = 'SOLON'
     when = 'STOW'
     when = 'NRIDG'
     when = 'WLMDE'
     when = 'BERK'
     when = 'RAVEN'
     when = 'NEWRK'
     when = 'FSTPK'
     when = 'AKRON'     !vendkxy on 02/10/2010  added the Code as per the S3# 13866650
     when = 'AMHST'     !vendkxy on 02/10/2010  added the Code as per the S3# 13866650
     !GEXTX_851_B0292_02 2011-02-22 Vahini Katta Begins
     when = 'BDFRD'
     when = 'CANTN'
     when = 'CNFLD'
     when = 'CLMBS'
     when = 'GHNNA'
     when = 'GREEN'
     when = 'PARMA'
     when = 'COPAK'
     when = 'CYFLS'
     when = 'HBARD'
     when = 'LORAI'
     when = 'MASSI'
     when = 'WARRE'
     when = 'WSTRV'
     when = 'PHGTS'
     when = 'PTJED' !GEXTX_851_P118964_01
     when = 'RCHFD'
     when = 'SPAKJ'
     when = 'GENEV'
     when = 'VERNC'
     !GEXTX_851_B0292_02 2011-02-22 Vahini Katta Ends
       break
     when-other
       add #Count-S         to #Count-F
       break
  end-evaluate

  do Zero-S-Record
  move 0               to #SS-Med-T
  move 0               to #FRMALOC-Retire-Fund-T
  move 0               to #MA-Fed-Wages-T
  move 0               to #Count-S

  if $Rsiein_W2_State = 'KY'                                                                                            !RSI-HCM103949
     move $StateEIN_Numeric to $RptStateEIN                                                                             !RSI-HCM103949
  else                                                                                                                  !RSI-HCM103949
     move $Employer_StateEIN to $RptStateEIN                                                                            !RSI-HCM103949
  end-if
  
  print $RptStateEIN   (+2,3)                             !State Tax ID

  do Format-Number(#Count-T, $out, 'B99,999')             !Count
  print $out  (,23)

  do Format-Number(#Count-S, $out, 'B99,999')             !Count
  print $out  (,23)

  let #out = #State_Wages-T / 100
  do Format-Number(#out, $out, 'B99,999,999.99')          !State wages
  print $out  (,38)

  let #out = #State_Tax-T / 100
  do Format-Number(#out, $out, 'B9,999,999.99')           !State tax
  print $out  (,59)

  do Print-Local

  do Zero-T-Record

End-Procedure

Begin-Procedure Print-Local

  let $Local_Desc = ' Total all locals: '

  print $Local_Desc (,74)
  let #out = #Local_Wages-T / 100                   !Local Wages
  do Format-Number(#out, $out, 'B99,999,999.99')    !
  print $out  (,95)

  let #out = #Local_Tax-T / 100                     !Local Taxes
  do Format-Number(#out, $out, 'B9,999,999.99')     !
  print $out  (,111)

  do Print-Temp-Table
  do Delete-Temp-Table

End-Procedure

Begin-Procedure Get-Third-Party-Amount
   Let #Third_party_tax = 0


Begin-Select
TRD_PTY.THIRD_PARTY_TAX

   add &TRD_PTY.THIRD_PARTY_TAX to #Third_party_tax

FROM  PS_RC_THIRD_PARTY   TRD_PTY,  PS_W2_COMPANY  TRD_W2_CPNY
WHERE TRD_PTY.OPRID               = $Prcs_OprID
  AND TRD_PTY.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID
  AND TRD_PTY.COMPANY             = TRD_W2_CPNY.COMPANY
  AND TRD_W2_CPNY.CALENDAR_YEAR   = &TX.Balance_Year
  AND TRD_W2_CPNY.TAXFORM_ID      = 'W'
  AND TRD_W2_CPNY.W2_REPORTING_CO = &A.W2_REPORTING_CO
End-Select

   Let #Third_party_tax = #Third_party_tax * 100
   Move #Third_party_tax to $Third_party_tax 099999999999999

End-Procedure

Begin-Procedure Get-Third-Party-Sick
   Let $Thrd_Pty_Sick = '0'
Begin-Select
TSI.COUNTRY

   Let $Thrd_Pty_Sick = '1'

FROM PS_INSTALLATION TSI
WHERE EXISTS (SELECT 'X'
              FROM  PS_YE_EE TSE, PS_YE_DATA TS, PS_W2_COMPANY TSC
              WHERE TSC.W2_REPORTING_CO   = &A.W2_Reporting_Co
                AND TSC.COMPANY           = TS.COMPANY
                AND TSC.CALENDAR_YEAR     = TS.CALENDAR_YEAR
                AND TS.CALENDAR_YEAR      = &TX.Balance_Year
                AND TS.SEQUENCE_NUMBER    = 1
                AND TS.COMPANY            = TSE.COMPANY
                AND TS.EMPLID             = TSE.EMPLID
                AND TS.TAXFORM_ID         = TSE.TAXFORM_ID
                AND TS.CALENDAR_YEAR      = TSE.CALENDAR_YEAR
                AND TSE.PROCESS_FLAG      <> 'V'
                AND TS.THIRDPARTY_SICKPAY = 'Y')
End-Select
End-Procedure

Begin-Procedure Before-State
  move &LTT2.W2_RPTG_AGENCY to $W2_RPTG_AGENCY
  let $Agency = rtrim(&LTT2.W2_RPTG_AGENCY, ' ')
  move &E.W2_State        to $E.W2_State
  let $ReportID2 = rtrim(&LTT2.W2_RPTG_AGENCY, ' ')
  do Populate-Headings
  print 'State: ' (+2,1)
  print &S.DESCR   (,8)
  print '  Agency: ' (,30)
  print $Agency  (,40)

End-Procedure


Begin-Procedure Before-EmplID

  #ifdef TAXDISPLAY
    Show 'Processing EMPLID : ' &E.EMPLID
  #endif

  Let $FirstTime = 'Y'
  let $State-Reportable = 'N'

  move &E.SSN to $S123 xxx
  If $S123 = &Temp_SSN_Mask or RTRIM(&E.SSN, ' ') = ''
    move '000000000' to $E.SSN
  else
    move &E.SSN to $E.SSN
  End-if

  move &E.YE_Fname  to $FirstName
  move &E.YE_Middle_name to $MiddleName
  move &E.YE_Lname  to $LastName
  move &E.YE_Suffix to $Suffix
  move '         '  to $Phila-SSN
  move '     '      to $TaxingEntityCd

  uppercase $FirstName
  uppercase $MiddleName
  uppercase $LastName
  uppercase $Suffix

  let $FirstName-RW = $FirstName
  let $MiddleName-RW = $MiddleName
  let $LastName-RW   = $LastName
  let $Suffix-RW     = $Suffix

  move &E.Emplid       to $E.Emplid
  move &A.W2_Reporting_Co to $W2.W2_Reporting_Co
  move $E.Emplid          to $W2.EMPLID
  move &TX.Balance_Year   to #W2.Balance_Year
  do Get-W2-Address
  move &E.City         to $E.City
  let  $E.StateCd = rtrim(&E.State, ' ')
  move &E.Postal       to $E.Zip
  move &E.Country      to $E.Country

  do Populate-EE-Address

  move 0 to #Running_Wages
  move 0 to #Running_Tax

  do Load-Fed-Amounts
  do Load-State-Amounts

  End-Procedure

  Begin-Procedure Populate-EE-Address

  If rtrim($E.City,' ') = ''
    Show 'City is blank in YE data for employee "' $E.Emplid '" in the personal data.'
    Show 'Fix it and run the load program (Tax910ld.sqr) again.'
    Stop
  End-if

  move $E.City         to $City

  move $E.StateCd      to $StateCd
  move $E.Zip          to $Zip
  move $E.Country      to $Country
  do Foreign-Address-Test('Format 3',25)
  If $ForeignAddrInd = 'X'
     Let $US_Zip      = ' '
     Let $US_ZipXtnsn = ' '
     Let $US_State    = ' '
     Let $Frgn_Zip    = $Zip
     Let $Frgn_State  = $StateName
  else
     Let $US_Zip      = $Zip
     Let $US_ZipXtnsn = $ZipExtsn
     Let $US_State    = $StateCd
     Let $Frgn_Zip    = ' '
     Let $Frgn_State  = ' '
     Let $Country-2Char   = ' '
  End-if

  let $US_Zip-RW = $US_Zip
  let $US_ZipXtnsn-RW = $US_ZipXtnsn
  let $US_State-RW    = $US_State
  let $Frgn_Zip-RW    = $Frgn_Zip
  let $Frgn_State-RW  = $Frgn_State

  uppercase $E.City
  let $E.Address1-RW = $E.Address1
  let $E.Address2-RW = $E.Address2
  let $City-RW       = $E.City
End-Procedure

Begin-Procedure Load-Fed-Amounts

  move 0 to #Fed_Wages
  move 0 to #State_Wages
  move 0 to #State_Tax

Begin-Select
D.BOX
D.W2_AMOUNT

  do Assign-Year-End-Variables
  let $D.Box = &D.Box
  move $D.Box to $Box xx
  let $Pos3 = substr($D.Box, 3,1)
  if $Box = $YE_Box12_StartPos  or
     $Box = $YE_Other
    and $Pos3 > ' '
    let $D.Box = rpad($D.Box,4,' ')
  else
    let $D.Box = RTRIM(&D.Box,' ')
  end-if
  let #Amount = &D.W2_Amount * 100
  if #Amount < 0  and $D.Box <> $YE_Adv_EIC
    display 'EMPLID ' noline
    display $E.Emplid noline
    display '  W2 Box ID ' noline
    display &D.BOX noline
    display ' Amount ' noline
    display #Amount  noline
    display ' Amount set to Zero '
    move 0 to #Amount
  end-if

    move &E.TaxForm_ID to $E.TaxForm_ID

    do Evaluate-Box

FROM  PS_YE_AMOUNTS D
WHERE D.CALENDAR_YEAR   = &TX.Balance_Year
  AND D.EMPLID          = &E.Emplid
  AND D.TAXFORM_ID      = &E.TaxForm_ID
  AND D.SEQUENCE_NUMBER = 1
  AND D.STATE           = '$U'
  AND D.COMPANY         IN (SELECT DA.COMPANY FROM PS_W2_COMPANY DA
                             WHERE DA.W2_REPORTING_CO = &A.W2_REPORTING_CO)

End-Select
End-Procedure


begin-procedure Load-State-Amounts

  do Assign-Year-End-Variables
  let $State-Reportable = 'N'
  move &E.Sequence_Number to #E.Sequence_Number

begin-SELECT
DS.BOX
DS.W2_AMOUNT
  let #Amount = &DS.W2_Amount * 100

  let $DS.Box = RTRIM(&DS.Box,' ')

  do Evaluate-State-Box

  let $State-Reportable = 'Y'

FROM  PS_YE_AMOUNTS DS
WHERE DS.COMPANY IN
      (SELECT DS1.COMPANY
       FROM PS_W2_COMPANY DS1
       WHERE DS1.W2_REPORTING_CO = &A.W2_REPORTING_CO
         AND DS1.CALENDAR_YEAR = &TX.Balance_Year
         AND DS1.TAXFORM_ID = &E.TaxForm_ID)
  AND DS.CALENDAR_YEAR   = &TX.Balance_Year
  AND DS.EMPLID          = &E.Emplid
  AND DS.TAXFORM_ID      = &E.TaxForm_ID
  AND DS.SEQUENCE_NUMBER = #E.Sequence_Number
  AND DS.BOX    IN ('16','17')
end-SELECT

end-procedure

begin-procedure Gather-Local-Amounts

begin-SELECT
GL.BOX
GL.W2_AMOUNT
GL.STATE
GL.LOCALITY

  move &GL.STATE to $TestState
  move &GL.LOCALITY to $TestLocality

  do Check-Locality

  if $Locality-Supported = 'Y'
    let #Amount = &GL.W2_Amount * 100

    evaluate $GL.Box
      when = $YE_Local_Wages         !Local wages
        add  #Amount to #Local_Wages
        break
      when = $YE_Local_Tax           !Local withheld
        add  #Amount to #Local_Tax
        break
    end-evaluate
  end-if

FROM  PS_YE_AMOUNTS GL
WHERE GL.COMPANY         = $E.COMPANY
  AND GL.CALENDAR_YEAR   = &TX.Balance_Year
  AND GL.EMPLID          = $E.Emplid
  AND GL.TAXFORM_ID      = $E.TaxForm_ID
  AND GL.SEQUENCE_NUMBER = #E.Sequence_Number
  AND GL.STATE           = $State
  AND GL.BOX    IN ('18','19')
end-SELECT
end-procedure

begin-Procedure Gather-FRMALOC-Amounts                                  !HP00001
                                                                        !HP00001
  move 0 to #FRMALOC-Retire-Fund                                        !HP00001
                                                                        !HP00001
  move 'N' to $Ded_Processed                                            !HP00001
  move ' ' to $Prev_PlanType                                            !HP00001
  move ' ' to $Prev_DedCd                                               !HP00001
  move ' ' to $Prev_DedClass                                            !HP00001
  move ' ' to $Prev_BenefitPlan                                         !HP00001
  move 0   to #Prev_BenefitRcdNbr                                       !HP00001
                                                                        !HP00001
begin-SELECT                                                            !HP00001
                                                                        !HP00001
FRMALOC.PLAN_TYPE                                                       !HP00001
FRMALOC.DEDCD                                                           !HP00001
FRMALOC.DED_CLASS                                                       !HP00001
FRMALOC.BENEFIT_PLAN                                                    !HP00001
FRMALOC.BENEFIT_RCD_NBR                                                 !HP00001
FRMALOC.DED_YTD                                                         !HP00001
MA.DEDCD                                                                !HP00001
MA.DED_CLASS                                                            !HP00001
                                                                        !HP00001
  if    &FRMALOC.PLAN_TYPE        <> $Prev_PlanType                     !HP00001
     or &FRMALOC.DEDCD            <> $Prev_DedCd                        !HP00001
     or &FRMALOC.DED_CLASS        <> $Prev_DedClass                     !HP00001
     or &FRMALOC.BENEFIT_PLAN     <> $Prev_BenefitPlan                  !HP00001
     or &FRMALOC.BENEFIT_RCD_NBR  <> #Prev_BenefitRcdNbr                !HP00001
                                                                        !HP00001
      let $Prev_PlanType      = &FRMALOC.PLAN_TYPE                      !HP00001
      let $Prev_DedCd         = &FRMALOC.DEDCD                          !HP00001
      let $Prev_DedClass      = &FRMALOC.DED_CLASS                      !HP00001
      let $Prev_BenefitPlan   = &FRMALOC.BENEFIT_PLAN                   !HP00001
      let #Prev_BenefitRcdNbr = &FRMALOC.BENEFIT_RCD_NBR                !HP00001
      let $Ded_Processed      = 'N'                                     !HP00001
  end-if                                                                !HP00001
                                                                        !HP00001
  if $Ded_Processed        = 'N'                                        !HP00001
                                                                        !HP00001
      let #Amount = &FRMALOC.DED_YTD * 100                              !HP00001
                                                                        !HP00001
      if (rtrim(&MA.DEDCD, ' ') = ''                                    !HP00001
          or &MA.DEDCD = &FRMALOC.DEDCD)                                !HP00001
         and (rtrim(&MA.DED_CLASS, ' ')  = ''                           !HP00001
              or &MA.DED_CLASS = &FRMALOC.DED_CLASS)                    !HP00001
                                                                        !HP00001
          add #Amount to #FRMALOC-Retire-Fund                           !HP00001
          move 'Y'    to $Ded_Processed                                 !HP00001
      end-if                                                            !HP00001
  end-if                                                                !HP00001
                                                                        !HP00001
FROM  PS_DEDUCTION_BAL FRMALOC, PS_RC_TAX960MA MA                       !HP00001
WHERE FRMALOC.EMPLID        = &E.EMPLID                                 !HP00001
  AND FRMALOC.COMPANY       = &E.COMPANY                                !HP00001
  AND FRMALOC.BALANCE_YEAR  = &TX.Balance_Year                          !HP00001
  AND FRMALOC.BALANCE_ID    = $Calendar_Year_Id                         !HP00001
  AND FRMALOC.PLAN_TYPE     = MA.PLAN_TYPE                              !HP00001
  AND MA.OPRID               = $Prcs_OprID                              !HP00001
  AND MA.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID                        !HP00001
  AND FRMALOC.BALANCE_PERIOD    =                                       !HP00001
      (SELECT MAX(BALANCE_PERIOD)                                       !HP00001
       FROM   PS_DEDUCTION_BAL                                          !HP00001
       WHERE  EMPLID            = FRMALOC.EMPLID                        !HP00001
         AND  COMPANY           = FRMALOC.COMPANY                       !HP00001
         AND  BALANCE_YEAR      = FRMALOC.BALANCE_YEAR                  !HP00001
         AND  BALANCE_ID        = FRMALOC.BALANCE_ID                    !HP00001
         AND  BENEFIT_PLAN      = FRMALOC.BENEFIT_PLAN                  !HP00001
         AND  BENEFIT_RCD_NBR   = FRMALOC.BENEFIT_RCD_NBR               !HP00001
         AND  PLAN_TYPE         = FRMALOC.PLAN_TYPE                     !HP00001
         AND  DEDCD             = FRMALOC.DEDCD                         !HP00001
         AND  DED_CLASS         = FRMALOC.DED_CLASS)                    !HP00001
  AND FRMALOC.DED_YTD           <> 0                                    !HP00001
ORDER BY FRMALOC.PLAN_TYPE, FRMALOC.DEDCD, FRMALOC.DED_CLASS,           !HP00001
         FRMALOC.BENEFIT_PLAN, FRMALOC.BENEFIT_RCD_NBR                  !HP00001
                                                                        !HP00001
end-SELECT                                                              !HP00001
end-procedure                                                           !HP00001

begin-procedure Load-Local-Amounts
move 1 to #Times
let $Local-Reportable = 'N'

begin-SELECT      !Local Data
DL.BOX
DL.W2_AMOUNT
DL.STATE
DL.LOCALITY       () on-break print=never after=Process-Local-Amounts

  move &DL.STATE to $TestState
  move &DL.LOCALITY to $TestLocality

  do Check-Locality
  if $Locality-Supported = 'Y'
    let $LCL_Status =  nvl (&DL.Locality,'none')
    if  $LCL_Status = 'none'
      display 'No Locality identified for local amount.'
      display 'Processing employee: ' noline
      display $E.EmplID               noline
      display '  In company: '        noline
      display $E.Company
      STOP
    end-if

    let #Amount = &DL.W2_Amount * 100
    let $DL.Locality = RTRIM(&DL.Locality,' ')
    let $DL.Box = RTRIM(&DL.Box,' ')
    let $DL.State = RTRIM(&DL.State,' ')

    if $DL.STATE = 'IN' and $DL.LOCALITY = '99990'
      add #Amount to #STATE_EIC
      move 0 to #Local_Wages
      add #Amount to #Local_Tax
    else
      evaluate $DL.Box
        when = $YE_Local_Wages         !Local wages
          add  #Amount to #Local_Wages
          break
        when = $YE_Local_Tax           !Local withheld
          add  #Amount to #Local_Tax
          break
     end-evaluate
    end-if
  end-if

  let $Local-Reportable = 'Y'


FROM  PS_YE_AMOUNTS DL
WHERE DL.COMPANY         = $E.COMPANY
  AND DL.CALENDAR_YEAR   = &TX.Balance_Year
  AND DL.EMPLID          = $E.Emplid
  AND DL.TAXFORM_ID      = $E.TaxForm_ID
  AND DL.SEQUENCE_NUMBER = #E.Sequence_Number
  AND DL.LOCALITY        = $LTT2.LOCALITY
  AND DL.STATE           = $LTT2.STATE
  AND DL.BOX    IN ('18','19')
ORDER BY DL.LOCALITY DESC
end-SELECT
end-procedure                      !Load-Local-Amounts

begin-procedure  Process-Local-Amounts

  if #W2_Co_Count = #Total_W2_Co
    do Report-Local-Amounts
  end-if

end-procedure

begin-procedure  Report-Local-Amounts
  let $Locality = RTRIM($DL.Locality,' ')
  do  Get-Locality-Mag-CD
  let $Loc_Tax_Cd = rtrim ($Loc_Tax_Cd,' ')

  Evaluate  $Agency
     When = 'PHILA'
     When = 'WLMDE'
     let $Loc_Tax_Cd = $Agency
     break

     When-Other
     break
  end-evaluate

  if $Loc_Tax_Cd <> ''

    add #Local_Wages to #Running_Wages
    add #Local_Tax   to #Running_Tax
    let $LocalReportable = 'Y'
    let $State-Reportable = 'Y'
    do Update-Temp-Table
    evaluate $E.W2_State
    when = 'IN'
      move 'D' to $Loc_Tax_Tp
      break
    when = 'OH'
      move 'E' to $Loc_Tax_Tp
      break
    end-evaluate
    let $Local_Save = $Locality
    let $Loc_Mag_Cd = $Loc_Tax_Cd
    if $Agency <> 'LJCKY'
      do Write-S-Record-from-Local
    end-if
  else
     if $Locality = '99990'
       do Update-Temp-Table
     end-if
  end-if
  move 0 to #Local_Wages
  move 0 to #Local_Tax
  move ' ' to $Loc_Tax_Tp
  move ' ' to $Loc_Mag_Cd
end-procedure                      !Report-Local-Amounts

begin-procedure  Report-LJCKY-Amounts
  let $Locality = RTRIM($DL.Locality,' ')
  do  Get-Locality-Mag-CD
  let $Loc_Tax_Cd = rtrim ($Loc_Tax_Cd,' ')

  let $Local_Save = $Locality
  let $Loc_Mag_Cd = $Loc_Tax_Cd

  move #Running_Wages to #Local_Wages
  move #Running_Tax   to #Local_Tax

  do Write-S-Record-from-Local

  move ' ' to $Loc_Tax_Tp
  move ' ' to $Loc_Mag_Cd
end-procedure                      !Report-LJCKY-Amounts

Begin-Procedure Check-Locality

move 'N' to $Locality-Supported

begin-SELECT
LTT2A.W2_MAG_CODE

  let $W2-Mag-Code = rtrim(&LTT2A.W2_MAG_CODE, ' ')
  move 'Y' to $Locality-Supported

FROM PS_LOCAL_TAX_TBL2 LTT2A
WHERE LTT2A.LOCALITY = $TestLocality
  AND LTT2A.STATE = $TestState
  AND LTT2A.W2_RPTG_AGENCY = &LTT2.W2_RPTG_AGENCY

end-SELECT

End-Procedure

Begin-Procedure After-EmplID

  if $Agency = 'LJCKY'
    do Report-LJCKY-Amounts
  end-if

  !Unique Local Requirements - Different from SSA format
  !  RS record requires specific changes
  !    Be advised - TAXMMREF contains some Local Specific
  !        RS record code also.

  Move 0 to $Zero_fill 099999999999999
  move #Local_Wages      to $Local_Wages    09999999999
  move #Local_Tax        to $Local_Taxes    09999999999
  move 'C'               to $Tax_Type_Cd

  evaluate $Agency
    when = 'WALKE'
      let $OtherStateData = 'WLK  '
      break
    when = 'STLTA'
      let $Tax_Type_Cd = 'C'
      let $StateNumCdA = ' '
      let $TaxingEntityCd = ' '
      let $US_ZipXtnsn = ' '
      let $Frgn_State = ' '
      let $Frgn_Zip = ' '
      let $Country-2Char = ' '
      let $ReportingPeriod = ' '
      let $WorkWeeks = ' '
      let $EmployDate = ' '
      let $SepDate = ' '
      let $StateEIN = ' '
      let $StateNumCd = ' '
      let $State_Tax = ' '
      let $OtherStateData = ' '
      let $StateControlNumber = ' '
      break
    when = 'CCA'
      let $OtherStateData = ' '
      let $Tax_Type_Cd = 'C'
      break
    when = 'CINCI'
      let $Tax_Type_Cd = 'C'
      break
    end-evaluate

  if $State-Reportable = 'Y'

  ! The $LocalReportable variable is set = 'Y' in the procedure Report-Local-Amounts if
  ! the Local Tax Table W2_Mag_Code field (now called Taxing Entity Code) is NOT blank.
  ! Therefore, the code below only writes data to the W-2 file if Taxing Entity Code IS blank, and
  ! it should not normally write anything because a blank Taxing Entity Code is incorrect setup.
  ! Usually the RW, RS and RO records are written from Write-S-Record-from-Local procedure
  ! when the Taxing Entity Code is NOT blank,
  ! It should not be necessary to modify the code below for any new EFW2 supported locals.

    evaluate $Agency

      when = 'HURON'
      when = 'CTCB'
      when = 'LCTCB'
      when = 'YATB'
      when = 'MATCB'
        if $LocalReportable <> 'Y'
          do Write-S-Record
        end-if
        break
      when = 'CCA'
      when = 'BTLCK'
      when = 'SAGIN'
      when = 'STLTA'
      when = 'CINCI'
      when = 'CNFLD'                !GEXPY_848_E165221_01  ISDVMZA
      when = 'DAYTO'
      when = 'FINDL'
      when = 'JOHNS'
      when = 'MORAI'
      when = 'CYFLS'
      when = 'WSTRV'
      when = 'MASSI'
      when = 'LJCKY'
      when = 'WSTB'
      when = 'ALLEN'
      when = 'SIDNE'
      when = 'WILLD'
      when = 'SPRMI'
      when = 'DUBLN'
      when = 'SOLON'
      when = 'STOW'
      when = 'NRIDG'
      when = 'BERK'
        if $LocalReportable <> 'Y'
          do Write-W-Record
          do Write-S-Record
        end-if
        break
      when = 'WALKR'
      when = 'GRAPD'
      when = 'KCFD'
      when = 'RITA'
      when = 'CLMBS'
      when = 'LOUIS'
      when = 'AKRON'
      when = 'LSING'
      when = 'MRYSV'
      when = 'NWASH'
      when = 'STRA'
      when = 'WARRE'
        if $LocalReportable <> 'Y'
          do Write-W-Record
          do Write-O-Record
          do Write-S-Record
        end-if
        break
      when-other
        if $LocalReportable <> 'Y'
          do Write-W-Record
          do Write-O-Record
          do Write-S-Record
        end-if
        break

    end-evaluate
  end-if

  If $Agency = 'DET'                                                                                                   !RSI-HCM103951 Begin
    If $E.Company <> $Old_Company
       let $Old_Company = $E.Company
       do State-End-Totals
       If $DTRTHeader <> 'X'
          do Get-DTRT-Header-Details
          let $DTRTHeader = 'X'
       Else
            let $ECompany = rtrim($E.Company, ' ')
            do File-Create
            let #DetFileNo = #DetFileNo + 1
            do Get-DTRT-Header-Details
            let $DTRTHeader = 'X'
            let $Old_Emplid = 'Y'
       End-If
    End-If
    If $E.Emplid <> $Old_Emplid
       let $Old_Emplid= $E.Emplid
       let $Old_Company = $E.Company
       do Get-DTRT-Emp-Details
    End-If
  End-If           

  do Zero-W-Record
  do Zero-O-Record
  do Zero-S-Record
  do Clear-Space-Fields

  move 'N' to $WriteORec
  move '0' to $StatutoryEe
  move 0   to #RetirePlan
  move '0' to $DeceasedFlag
  move 0   to #Third_Party_Sick_Ind

  Let $LocalReportable = 'N'

End-Procedure

!*****************************************************************
! Procedure Get-DTRT-Header-Details
!*****************************************************************
Begin-Procedure Get-DTRT-Header-Details
Begin-Select
ABC.DESCR
ABC.FEDERAL_EIN
ABC.ADDRESS1
ABC.ADDRESS2
ABC.CITY
ABC.STATE
ABC.POSTAL

  move &ABC.DESCR to $ABCDESCR
  move &ABC.FEDERAL_EIN to $ABCFEDERAL_EIN
  move &ABC.ADDRESS1 to $ABCADDRESS1
  let $Len = Length($ABCADDRESS1)
  move $Len to #Len
  find ' ' In $ABCADDRESS1 0 #SpacePosition
  If #SpacePosition <> -1
     let $Street_Number = substr($ABCADDRESS1,1,#SpacePosition)
  End-If
  let $Street_Name = substr($ABCADDRESS1,#SpacePosition+2,#Len)
  move &ABC.ADDRESS2 to $ABCADDRESS2
  move &ABC.CITY to $ABCCITY
  move &ABC.STATE to $ABCSTATE
  move &ABC.POSTAL to $ABCPOSTAL

FROM PS_W2_COMPANY ABC
Where ABC.CALENDAR_YEAR = &TX.Balance_Year AND ABC.COMPANY = $E.Company
End-Select

  let $tab = chr(9)

  let $XLSHeader = ''

  string      'COMPANY_NAME' by $tab into $XLSHeader
  string $XLSHeader 'YEAR_OF_FILING' by $tab into $XLSHeader
  string $XLSHeader 'EIN' by $tab into $XLSHeader
  string $XLSHeader 'COMPANY_ADDRESS_STREET_NUM' by $tab into $XLSHeader
  string $XLSHeader 'COMPANY_ADDRESS_STREET_NAME' by $tab into $XLSHeader
  string $XLSHeader 'COMPANY_ADDRESS_LINE 2' by $tab into $XLSHeader
  string $XLSHeader 'COMPANY_CITY' by $tab into $XLSHeader
  string $XLSHeader 'COMPANY_STATE' by $tab into $XLSHeader
  string $XLSHeader 'COMPANY_ZIP' by $tab into $XLSHeader
  string $XLSHeader 'NUMBER_OF_EMPLOYEES' by $tab into $XLSHeader
  string $XLSHeader 'TOTAL_DETROIT_TAX_WITHHELD' by $tab into $XLSHeader
  string $XLSHeader 'TOTAL_GROSS_WAGES_PAID' by $tab into $XLSHeader
  string $XLSHeader 'TOTAL_LOCAL_WAGES_PAID' by $tab into $XLSHeader

  write 10 from $XLSHeader

  do DTRT-Company-Totals

  let $XLSLine = ''

  string          $ABCDESCR by $tab into $XLSLine
  string $XLSLine &TX.Balance_Year by $tab into $XLSLine
  string $XLSLine $ABCFEDERAL_EIN by $tab into $XLSLine
  string $XLSLine $Street_Number by $tab into $XLSLine
  string $XLSLine $Street_Name by $tab into $XLSLine
  string $XLSLine $ABCADDRESS2 by $tab into $XLSLine
  string $XLSLine $ABCCITY by $tab into $XLSLine
  string $XLSLine $ABCSTATE by $tab into $XLSLine
  string $XLSLine $ABCPOSTAL by $tab into $XLSLine
  string $XLSLine $DTRTEmployeeCount by $tab into $XLSLine
  string $XLSLine $EMPLOYEE_DETROIT_TAX_WITHHELD by $tab into $XLSLine
  string $XLSLine $EAmount by $tab into $XLSLine
  string $XLSLine $EMPLOYEE_TOTAL_LOCAL_WAGES_PAID by $tab into $XLSLine

  write 10 from $XLSLine

  let $XLSHeader1 = ''

  string       'EMPLOYEE_LAST_NAME' by $tab into $XLSHeader1
  string $XLSHeader1 'EMPLOYEE_FIRST_NAME' by $tab into $XLSHeader1
  string $XLSHeader1 'EMPLOYEE_MIDDLE_NAME' by $tab into $XLSHeader1
  string $XLSHeader1 'EMPLOYEE_SSN' by $tab into $XLSHeader1
  string $XLSHeader1 'EMPLOYEE_STREET_NUM' by $tab into $XLSHeader1
  string $XLSHeader1 'EMPLOYEE_STREET_NAME' by $tab into $XLSHeader1
  string $XLSHeader1 'EMPLOYEE_STREEST_ADDRESS' by $tab into $XLSHeader1
  string $XLSHeader1 'EMPLOYEE_CITY' by $tab into $XLSHeader1
  string $XLSHeader1 'EMPLOYEE_STATE' by $tab into $XLSHeader1
  string $XLSHeader1 'EMPLOYEE_ZIP' by $tab into $XLSHeader1
  string $XLSHeader1 'EMPLOYEE_DETROIT_TAX_WITHHELD' by $tab into $XLSHeader1
  string $XLSHeader1 'EMPLOYEE_GROSS_WAGES_PAID' by $tab into $XLSHeader1
  string $XLSHeader1 'EMPLOYEE_TOTAL_LOCAL_WAGES_PAID' by $tab into $XLSHeader1

  write 10 from $XLSHeader1

End-Procedure Get-DTRT-Header-Details

!*****************************************************************
! Procedure DTRT-Company-Totals
!*****************************************************************
Begin-Procedure DTRT-Company-Totals
Begin-Select
count(*) &BE.DTRTEmployeeCount

   Move &BE.DTRTEmployeeCount to $DTRTEmployeeCount

FROM  PS_W2_COMPANY BA, PS_YE_EE BEE, PS_YE_DATA BE,
      PS_YE_AMOUNTS BAA, PS_LOCAL_TAX_TBL2 BLTT2
WHERE BA.CALENDAR_YEAR    = &TX.Balance_Year
  AND BA.W2_REPORTING_CO <> ' '
  AND BA.TAXFORM_ID      =  'W'
  AND BA.COMPANY          = BE.COMPANY
  AND BA.CALENDAR_YEAR    = BE.CALENDAR_YEAR
  AND BA.TAXFORM_ID       = BE.TAXFORM_ID
  AND BE.TAXFORM_ID       = 'W'
  AND BE.COMPANY          = BEE.COMPANY
  AND BE.EMPLID           = BEE.EMPLID
  AND BE.TAXFORM_ID       = BEE.TAXFORM_ID
  AND BE.CALENDAR_YEAR    = BEE.CALENDAR_YEAR
  AND BE.COMPANY          = BAA.COMPANY
  AND BE.EMPLID           = BAA.EMPLID
  AND BE.CALENDAR_YEAR    = BAA.CALENDAR_YEAR
  AND BE.TAXFORM_ID       = BAA.TAXFORM_ID
  AND BE.SEQUENCE_NUMBER  = BAA.SEQUENCE_NUMBER
  AND BAA.LOCALITY = BLTT2.LOCALITY
  AND BAA.STATE    = BLTT2.STATE
  AND BAA.STATE = 'MI' AND BAA.LOCALITY = '22000'
  AND BAA.BOX = '18' AND BEE.COMPANY = $E.Company
  AND BEE.PROCESS_FLAG   <> 'V'
  AND BLTT2.EFFDT=(SELECT MAX(EFFDT) FROM PS_LOCAL_TAX_TBL2 BLTT3
                  WHERE BLTT2.STATE = BLTT3.STATE
                    AND BLTT2.LOCALITY = BLTT3.LOCALITY)
End-Select

Begin-Select
Sum(FG.W2_AMOUNT) &FG.ETOTAL_LOCAL_WAGES_PAID

  move &FG.ETOTAL_LOCAL_WAGES_PAID to $EMPLOYEE_TOTAL_LOCAL_WAGES_PAID

FROM PS_YE_AMOUNTS FG
WHERE FG.CALENDAR_YEAR = &TX.Balance_Year AND FG.COMPANY = $E.Company AND FG.TAXFORM_ID = 'W'
AND FG.LOCALITY='22000' AND FG.STATE='MI' AND FG.BOX='18'
End-Select

Begin-Select
Sum(GH.W2_AMOUNT) &GH.E_DETROIT_TAX_WITHHELD

  move &GH.E_DETROIT_TAX_WITHHELD to $EMPLOYEE_DETROIT_TAX_WITHHELD

FROM PS_YE_AMOUNTS GH
WHERE GH.CALENDAR_YEAR = &TX.Balance_Year AND GH.COMPANY = $E.Company AND GH.TAXFORM_ID = 'W'
AND GH.LOCALITY='22000' AND GH.STATE='MI' AND GH.BOX='19'
End-Select

Begin-Select
Sum(HI.W2_AMOUNT) &HI.EAMOUNT

  move &HI.EAMOUNT to $EAmount

FROM PS_YE_AMOUNTS HI
WHERE HI.CALENDAR_YEAR = &TX.Balance_Year AND HI.COMPANY = $E.Company AND HI.TAXFORM_ID = 'W'
AND HI.STATE='$U' AND HI.BOX='01'
AND (EXISTS (SELECT 'X' FROM PS_YE_AMOUNTS NN
WHERE NN.CALENDAR_YEAR = &TX.Balance_Year AND NN.COMPANY = $E.Company AND NN.TAXFORM_ID = 'W'
AND NN.LOCALITY='22000' AND NN.STATE='MI' AND NN.BOX='19' AND HI.EMPLID =NN.EMPLID)
OR EXISTS (SELECT 'X' FROM PS_YE_AMOUNTS MM
WHERE MM.CALENDAR_YEAR = &TX.Balance_Year AND MM.COMPANY = $E.Company AND MM.TAXFORM_ID = 'W'
AND MM.LOCALITY='22000' AND MM.STATE='MI' AND MM.BOX='18' AND HI.EMPLID =MM.EMPLID))
End-Select

End-Procedure DTRT-Company-Totals

!*****************************************************************
! Procedure Get-DTRT-Emp-Details
!*****************************************************************
Begin-Procedure Get-DTRT-Emp-Details
Begin-Select
KK.EMPLID
KK.YE_LNAME
KK.YE_FNAME
KK.YE_MIDDLE_NAME
KK.SSN
KK.ADDRESS1
KK.ADDRESS2
KK.CITY
KK.STATE
KK.POSTAL

    move &KK.YE_LNAME to $KKLastName
    move &KK.YE_FNAME to $KKFirstName
    let $KK.YE_MIDDLE_NAME =  substr(&KK.YE_MIDDLE_NAME,1,1)
    move $KK.YE_MIDDLE_NAME to $KKMiddleName
    move &KK.SSN to $KKSSN
    move &KK.ADDRESS1 to $KKADDRESS1
    Let $Len1 = Length($KKADDRESS1)
    move $Len1 to #Len1
    find ' ' In $KKADDRESS1 0 #SpacePosition1
    If #SpacePosition1 <> -1
       let $Street_Number1 = substr($KKADDRESS1,1,#SpacePosition1)
       move $Street_Number1 to #KKStreet1
    End-If
    let $Street_Name1 = substr($KKADDRESS1,#SpacePosition1+2,#Len1)
    move $Street_Name1 to $KKSreetName
    move &KK.ADDRESS2 to $KKStreetAddress2
    move &KK.CITY to $KKCity
    move &KK.STATE to $KKState
    move &KK.POSTAL to $KKPostal

FROM PS_YE_DATA KK WHERE KK.EMPLID = $Old_Emplid AND KK.COMPANY = $E.Company
AND KK.CALENDAR_YEAR = &TX.Balance_Year AND KK.TAXFORM_ID = 'W'
End-Select

Begin-Select
LL.W2_AMOUNT

   If #EmpTax = 0
      move &LL.W2_AMOUNT to #EmpTax
      Let $EmpTax = #EmpTax
   Else
      let #EmpTax = #EmpTax + &LL.W2_AMOUNT
      let $EmpTax = #EmpTax
   End-If
   move &LL.W2_AMOUNT to #LLamount

FROM PS_YE_AMOUNTS LL
WHERE LL.EMPLID = $Old_Emplid AND LL.CALENDAR_YEAR = &TX.Balance_Year AND LL.TAXFORM_ID = 'W'
AND LL.COMPANY = $E.Company  AND LL.LOCALITY = '22000' AND LL.STATE = 'MI' AND LL.BOX = '19'
End-Select

Begin-Select
MM.W2_AMOUNT

   If #EmpGross = 0
      move &MM.W2_AMOUNT to #EmpGross
      let $EmpGross = #EmpGross
   Else
      let #EmpGross = #EmpGross + &MM.W2_AMOUNT
      let $EmpGross = #EmpGross
   End-If
   move &MM.W2_AMOUNT to #mmAmount

FROM PS_YE_AMOUNTS MM
WHERE MM.CALENDAR_YEAR = &TX.Balance_Year AND MM.STATE = '$U' AND MM.TAXFORM_ID = 'W'
AND MM.COMPANY = $E.Company AND MM.EMPLID = $Old_Emplid AND MM.BOX='01'
End-Select

Begin-Select
NN.W2_AMOUNT

   If #EmpLocalWages = 0
      move &NN.W2_AMOUNT to #EmpLocalWages
      let $EmpLocalWages = #EmpLocalWages
   Else
      let #EmpLocalWages  = #EmpLocalWages  + &NN.W2_AMOUNT
      let $EmpLocalWages = #EmpLocalWages
   End-If
   move &NN.W2_AMOUNT to #nnAmount

FROM PS_YE_AMOUNTS NN
WHERE NN.EMPLID = $Old_Emplid AND NN.CALENDAR_YEAR = &TX.Balance_Year AND NN.TAXFORM_ID = 'W'
AND NN.COMPANY = $E.Company AND NN.LOCALITY='22000' AND NN.STATE='MI' AND NN.BOX='18'
End-Select

do Write-DTRT-XLS-Data

End-Procedure Get-DTRT-Emp-Details

!*****************************************************************
! Procedure Write-DTRT-XLS-Data
!*****************************************************************
Begin-Procedure Write-DTRT-XLS-Data

     let $XLSLine1 = ''

     string           $KKLastName by $tab into $XLSLine1
     string $XLSLine1 $KKFirstName  by $tab into $XLSLine1
     string $XLSLine1 $KKMiddleName by $tab into $XLSLine1
     string $XLSLine1 $KKSSN by $tab into $XLSLine1
     string $XLSLine1 #KKStreet1 by $tab into $XLSLine1
     string $XLSLine1 $KKSreetName by $tab into $XLSLine1
     string $XLSLine1 $KKStreetAddress2 by $tab into $XLSLine1
     string $XLSLine1 $KKCity by $tab into $XLSLine1
     string $XLSLine1 $KKState by $tab into $XLSLine1
     string $XLSLine1 $KKPostal by $tab into $XLSLine1
     string $XLSLine1 #LLamount by $tab into $XLSLine1
     string $XLSLine1 #mmAmount by $tab into $XLSLine1
     string $XLSLine1 #nnAmount by $tab into $XLSLine1

     write 10 from $XLSLine1

End-Procedure Write-DTRT-XLS-Data

Begin-Procedure Clear-Space-Fields

!  These fields are space filled  'RS' Record
  move '  '          to $WorkWeeks
  move '        '    to $EmployDate
  move '        '    to $SepDate
  move '  '          to $OtherStateData
  move ''            to $SupplData1
  move ''            to $SupplData2
  move '      '      to $ReportingPeriod
  move ' '           to $Tax_Type_CD
  move '       '     to $StateControlNumber

End-Procedure

Begin-Procedure RW-CommonClear

      move '     '         to $City
      move '00000000000'   to #SS_Wages
      move '00000000000'   to #SS_Tax
      move '00000000000'   to #Med_Wages
      move '00000000000'   to #Med_Tax
      move '00000000000'   to #SS_Tips
      move '00000000000'   to #Adv_EIC
      move '00000000000'   to #Dep_Care
      move '00000000000'   to #401K
      move '00000000000'   to #403B
      move '00000000000'   to #408K6
      move '00000000000'   to #457B
      move '00000000000'   to #501C18
      move '00000000000'   to #Non_Qual_457_Y
      move '00000000000'   to #Non_Qual_457_N
      move '00000000000'   to #Group_Term_ER_Cost
      move '00000000000'   to #Nonstatutory_Stock_Opt
      move '00000000000'   to #HSA_Employer_Contrib
      move ' '   to $StatutoryEe
      move '0'   to #RetirePlan
      move '0'   to #Third_Party_Sick_Ind

End-Procedure

Begin-Procedure RS-CommonClear

      move '     '   to $Suffix
      move '     '   to $E.Address1
      move '     '   to $E.Address2
      move '     '   to $E.City
      move '     '   to $US_State
      move '     '   to $US_Zip
      move '     '   to $US_ZipXtnsn
      move '     '   to $Frgn_State
      move '     '   to $Frgn_Zip
      move '     '   to $Country-2Char
      move ' '       to $Tax_Type_Cd
      move 0         to $Zero_fill 099999999999999
End-Procedure

Begin-Procedure Indiana-Specific

  move #Local_Wages      to $Local_Wages    09999999999
  move #Local_Tax        to $Local_Taxes    09999999999
  move $StateEmplIN      to $StateControlNumber
  move $Loc_Mag_CD       to $OtherStateData x~
  let $OtherStateData = lpad($OtherStateData,10, ' ')
  move $Loc_Mag_CD       to $Tax_Type_Cd ~x
  move '      '          to $Zero_fill
  move '      '          to $StateEIN
End-Procedure

Begin-Procedure NJ-Specific

  move 0 to   #OtherD
  move 0 to   #OtherE
  move ' '               to $DPTC
  move '              '  to $PDPN
begin-SELECT
NJ.VDI_PLAN
NJ.VDI_PLAN_NBR

  if &NJ.VDI_PLAN = 'Y'
    move 'P' to $DPTC
    let  $PDPN = rpad(rtrim(&NJ.VDI_PLAN_NBR, ' '),14,' ')
  end-if

FROM  PS_CO_STATETAX_TBL NJ
WHERE NJ.COMPANY = $Company
  AND NJ.STATE   = $State
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_CO_STATETAX_TBL
       WHERE  COMPANY = $Company
         AND  STATE   = $State
         AND  EFFDT  <= $AsOfDate)
end-SELECT

begin-SELECT
NG.BOX
NG.W2_AMOUNT
  let #Amount = &NG.W2_Amount * 100

  let $NG.Box = RTRIM(&NG.Box,' ')
  evaluate $NG.Box
      when = $YE_OtherD
        add  #Amount to #OtherD
        break
      when = $YE_OtherE
        add  #Amount to #OtherE
        break
  end-evaluate

FROM  PS_YE_AMOUNTS NG
WHERE NG.COMPANY         = $E.Company
  AND NG.CALENDAR_YEAR   = &TX.Balance_Year
  AND NG.EMPLID          = $E.Emplid
  AND NG.TAXFORM_ID      = $E.TaxForm_ID
  AND NG.SEQUENCE_NUMBER = #E.Sequence_Number
  AND NG.BOX    IN ('14D','14E')
end-SELECT
End-Procedure

Begin-Procedure Ohio-Specific

  move '      '          to $Zero_fill
  move $Loc_Mag_CD       to $StateControlNumber
  let $StateControlNumber = lpad($StateControlNumber,7, ' ')
  let $Local_Tax_Cd = RTRIM($Loc_Tax_Cd,' ')
  if $Local_Tax_Cd <> ''
    move #Local_Wages      to $Local_Wages    09999999999
    move #Local_Tax        to $Local_Taxes    09999999999
  else
    move 0                 to $Local_Wages    09999999999
    move 0                 to $Local_Taxes    09999999999
    move 0                 to #Local_Wages
    move 0                 to #Local_Tax
  end-if

  if $Agency = 'RITA'
    let $City-Name = ' '
    let $TaxingEntityCd = 'RO' || &LTT2.W2_MAG_CODE
  end-if

  if $Agency = 'CLMBS'
    let $City-Name = rtrim($CityName, ' ')
  end-if

End-Procedure


Begin-Procedure CCA-Ohio-Specific

  move '      '          to $Zero_fill
  let $OtherStateData = lpad($OtherStateData,10, ' ')
  let $Local_Tax_Cd = RTRIM($Loc_Tax_Cd,' ')
  if $Local_Tax_Cd <> ''
    move #Local_Wages      to $Local_Wages    09999999999
    move #Local_Tax        to $Local_Taxes    09999999999
  else
    move 0                 to $Local_Wages    09999999999
    move 0                 to $Local_Taxes    09999999999
    move 0                 to #Local_Wages
    move 0                 to #Local_Tax
  end-if
End-Procedure

Begin-Procedure Get-Company-Local-Data

  move ' ' to $Employer_ID_LWT

begin-SELECT
CL.EMPLOYER_ID_LWT

  move &CL.EMPLOYER_ID_LWT to $Employer_ID_LWT

FROM  PS_CO_LOCALTAX_TBL CL
WHERE CL.COMPANY = $Company
  AND CL.STATE   = $State
  AND CL.LOCALITY = $Locality
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_CO_LOCALTAX_TBL
       WHERE  COMPANY = $Company
         AND  STATE   = $State
         AND  LOCALITY = $Locality
         AND  EFFDT  <= $AsOfDate)
end-SELECT
End-Procedure


Begin-Procedure After-State

  evaluate $Agency
    when = 'HURON'
    when = 'STLTA'
    when = 'SIDNE'
    when = 'YATB'
    when = 'LJCKY'
    when = 'PHILA'
      break
    when-other
      do Write-F-Record
      break
  end-evaluate
                                                                                                                       !RSI-HCM103951 Begin  
  If $Agency <> 'DET'
     do State-End-Totals
  End-If
  If $Agency = 'DET' and #DetFileNo >= 1
      let #Tot_Record_Count = #Tot_Record_Count - #DetFileNo
  End-If  
                                                                                                                       !RSI-HCM103951  
  do Process-Totals
  do Zero-F-Record

End-Procedure


Begin-Procedure Write-E-Record

let $BTANumber = ' '

Begin-SELECT
CP.COMMON_PAY_ID

FROM PS_COMPANY_TBL CP
WHERE CP.COMPANY = &E.Company
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_COMPANY_TBL
       WHERE  COMPANY = &E.Company
         AND  EFFDT  <= $EffDate)
end-SELECT
  move $A.Federal_EIN  to $FedEIN   099999999
  If #A.Other_EIN <> 0
    move #A.Other_EIN  to $OtherEIN 099999999
  else
    move ' '           to $OtherEIN
  End-if
  move $A.Descr        to $ErName
  move $A.City         to $ErCity
  move $A.State        to $StateCd
  move $A.Zip          to $Zip
  move $A.Country      to $Country
  do Foreign-Address-Test('Format 3',25)
  move &TX.Employment_Type to $Empl_Type
  let $Common_Pay_ID = RTRIM(&CP.Common_Pay_ID,' ')
!  If $Common_Pay_ID > ''
!    move '2' to $AgentID
!  else
    move '   ' to $AgentID
!  end-if

  uppercase $ErName
  uppercase $ErCity

!**************************************************************************
!***  ISDVMZA Tax Upgrade 14-E Retrofit -- GEXPY_TAX_UPG_14E --  Begin  ***
!**************************************************************************
!  move &E.Employer_ID_SWT  to $Employer-ID-SWT
!  move $E.W2_State  to $W2-State

!  do  Validate-SWT-ID-No-Abort

  move &E.Employer_ID_SWT to $Rsiein_Employer_SWT_ID                                                                    !RSI-HCM103949
  move &E.W2_State to $Rsiein_W2_State                                                                                  !RSI-HCM103949

  do Rsiein-Validate-SWT-ID                                                                                             !RSI-HCM103949

!**************************************************************************
!***  ISDVMZA Tax Upgrade 14-E Retrofit --  GEXPY_TAX_UPG_14E --   End  ***
!**************************************************************************

!  if $Error-Message-Generated = 'Y'
  If $Rsiein_Err_Msg_Generated = 'Y'                                                                                    !RSI-HCM103949
     display ''
     display 'Process continuing for Company: ' noline
     display  $ErName
!     display $Message
     display $Rsiein_Err_Msg                                                                                            !RSI-HCM103949
     display 'If the EIN format must be changed, correct the EIN format on the Company State Tax Table and rerun the year-end '
     display 'load before rerunning TAX960LC.SQR.  If the EIN format has changed, please notify PeopleSoft.  The file can be '
     display 'released to the taxing authority.'
     display ''
  end-if

  If $ForeignAddrInd = 'X'
     Let $ErUS_Zip      = ' '
     Let $ErUS_ZipXtnsn = ' '
     Let $ErUS_State    = ' '
     Let $ErFrgn_Zip    = $Zip
     Let $ErFrgn_State  = $StateName
  else
     Let $ErUS_Zip      = $Zip
     Let $ErUS_ZipXtnsn = $ZipExtsn
     Let $ErUS_State    = $StateCd
     Let $ErFrgn_Zip    = ' '
     Let $ErFrgn_State  = ' '
     Let $ErCountry-2Char   = ' '
  End-if

  !Unique Agency Requirements - Different from SSA format
  !  Agency has specific requirements for RE record

  evaluate $Agency
    when = 'HURON'
      let $AgentID = ' '
      let $A.Busi_Term_Ind = ' '
      if rtrim($ErAddress1, ' ') <> ''
         move $ErAddress1 to $ErAddress2
         move ' ' to $ErAddress1
      end-if
      let $ErFrgn_State = ' '
      let $ErFrgn_Zip = ' '
      let $ErCountry-2Char = ' '
      let $Empl_Type = ' '
      let $Tax_Jurisdiction = ' '
      let $Thrd_Pty_Sick = ' '
      let $BTANumber = ' '
      let $RESp = ' '
      break
    when = 'STLTA'
      let $AgentID = ' '
      let $A.Busi_Term_Ind = ' '
      let $OtherEIN = ' '
      let $ErAddress1 = ' '
      let $ErAddress2 = ' '
      let $ErCity = ' '
      let $ErUS_State = ' '
      let $ErUS_Zip = ' '
      let $ErUS_ZipXtnsn = ' '
      let $ErFrgn_State = ' '
      let $ErFrgn_Zip = ' '
      let $ErCountry-2Char = ' '
      let $Tax_Jurisdiction = ' '
      let $Empl_Type = ' '
      let $Thrd_Pty_Sick = ' '
      let $BTANumber = ' '
      let $RESp = ' '
      break
    when = 'CCA'
      let $AgentID = ' '
      let $A.Busi_Term_Ind = ' '
      let $ErFrgn_State = ' '
      let $ErFrgn_Zip = ' '
      let $ErCountry-2Char = ' '
      let $Tax_Jurisdiction = ' '
      let $Empl_Type = ' '
      let $Thrd_Pty_Sick = ' '
      let $BTANumber = ' '
      let $RESp = ' '
      break
    when = 'CTCB'
      let $A.Busi_Term_Ind = ' '
      let $OtherEIN = ' '
      let $ErFrgn_State = ' '
      let $ErFrgn_Zip = ' '
      let $ErCountry-2Char = ' '
      let $Tax_Jurisdiction = ' '
      let $Empl_Type = ' '
      let $Thrd_Pty_Sick = ' '
      let $BTANumber = ' '
      let $RESp = ' '
      break
    when = 'PHILA'
      move &E.COMPANY  to $Phila_Company
      move &E.W2_STATE    to $Phila_StateCode
      move &LTT2.LOCALITY to $Phila_Locality
      do Get-PHILA-EIN
      break
    when = 'LCTCB'
      let $Thrd_Pty_Sick = 'Y'
      let $BTANumber = '13     '
      break
    when = 'MATCB'
      let $Thrd_Pty_Sick = 'Y'
      let $BTANumber = '13     '
      break
    when-other
      break

  end-evaluate
  do Check-Disk
  do Write-RE-Record
  add 1 to #RecordCount
  add 1 to #Tot_Record_Count
  move 'Y' to $E-Written
End-Procedure

begin-Procedure RE-GroupClear

      move '    '    to $A.Busi_Term_Ind
      move '     '   to $ErFrgn_State
      move '     '   to $ErFrgn_Zip
      move '     '   to $ErCountry-2Char
      move '     '   to $Empl_Type
      move '     '   to $Tax_Jurisdiction
      move '     '   to $Thrd_Pty_Sick
      move '     '   to $EMPLOYMENT_TYPE
end-procedure

begin-procedure Get-PHILA-EIN
  Move 0 to #Phila_EIN

begin-SELECT
CL1.EMPLOYER_ID_LWT
CL1.COMPANY
CL1.STATE

  let $Phila_EIN = RTRIM(&CL1.Employer_ID_LWT, ' ')
  let #DashPosition = INSTR($Phila_EIN,'-',1)
  if #DashPosition <> 2 and #DashPosition <> 3
    let $Phila_ID_Ltrim = ltrim ($Phila_EIN, ' ')
  else
    let $Phila_ID_Ltrim = ltrim ($Phila_EIN, ' ')
    let $Phila_ID_Ltrim = ltrim ($Phila_ID_Ltrim, '0123456789')
    let $Phila_ID_Ltrim = ltrim ($Phila_ID_Ltrim, '-')
  end-if
  let $Phila_ID_Numeric  = substr ($Phila_ID_Ltrim, 1, 7)
  let #Phila_EIN = $Phila_ID_Numeric
  move  #Phila_EIN         to  $Phila_EIN    0999999

  do  Check-Is-String-Numeric ($Phila_ID_Numeric, #Return_Value)                                                        !RSI-HCM103949
  if #Return_Value = 0
    do BTA-Invalid
  end-if
  move  #Phila_EIN         to  $BTANumber    0999999

FROM  PS_CO_LOCALTAX_TBL  CL1
WHERE CL1.COMPANY  = $Phila_Company
  AND CL1.STATE    = $Phila_StateCode
  AND CL1.LOCALITY = $Phila_Locality
  AND CL1.EFFDT =
      (SELECT MAX(CL2.EFFDT)
       FROM   PS_CO_LOCALTAX_TBL CL2
       WHERE  CL1.COMPANY = CL2.COMPANY
         AND  CL1.STATE   = CL2.STATE
         AND  CL1.LOCALITY = CL2.LOCALITY
         AND  CL1.EFFDT  <= $AsOfDate)
end-SELECT

  If #Phila_EIN = 0
     display 'Philadelphia BTA - Employer ID (LWT) - not setup'
     display 'For Reporting Company : ' noline
     display $E.COMPANY
     display 'and locality : ' noline
     display  $DL.Locality
     display 'Process terminating.'
     Stop
  End-If

  if #Phila_EIN <> 0
     move #Phila_EIN to  $StateControlNumber
  else
     move '       '  to  $StateControlNumber
  end-if
end-procedure

Begin-procedure  BTA-Invalid
    display ''
    display 'Invalid Philadelphia BTA -- process terminating'
    display 'For Company: ' noline
    display  $ErName        noline
    display  $Company
    display 'Philadelphia BTA number is: ' noline
    display  &CL1.Employer_ID_LWT
    display ''
    display 'Should be numbers only '
    display ''
    stop
end-procedure

begin-Procedure Check-Disk

if $FileType = 'D'

  if $Agency = 'CLMBS'
     if #FileExtension > 1
       close 10
       display ' '
       display $Agency           noline
       display ' does not accept multiple-volume diskettes.'
       display 'Submission for company ' noline
       display $Company                  noline
       display ' must be on file.'
       display ' '
       stop
     end-if
  end-if

  if $Agency = 'READ'
       display ' '
       display $Agency           noline
       display ' does not accept diskettes, tape or cartidge.'
       display 'Submission for company ' noline
       display $Company                  noline
       display ' must be electronic.'
       display ' '
       move 'T' to $FileType
  end-if


  if $Agency = 'STRA'
       display ' '
       display $Agency           noline
       display ' does not accept diskettes.'
       display 'Submission for company ' noline
       display $Company                  noline
       display ' must be other than diskette.'
       display ' '
       move 'X' to $FileType
  end-if

end-if

End-Procedure

Begin-Procedure Write-W-Record

evaluate $Agency
  when = 'STLTA'
    let $FirstName-RW = ' '
    let $MiddleName-RW = ' '
    let $LastName-RW = ' '
    let $Suffix-RW = ' '
    let $E.Address1-RW = ' '
    let $E.Address2-RW = ' '
    let $City-RW     = ' '
    let $US_State-RW = ' '
    let $US_Zip-RW   = ' '
    let $US_ZipXtnsn-RW =  ' '
    let $Frgn_State-RW   = ' '
    let $Frgn_Zip-RW     = ' '
    let $Country-2Char-RW = ' '
    let $Fed_Tax = ' '
    let $SS_Wages = ' '
    let $SS_Tax = ' '
    let $Med_Wages = ' '
    let $Med_Tax = ' '
    let $SS_Tips = ' '
    let $Adv_EIC = ' '
    let $Dep_Care = ' '
    let $MilBasicQtrs = ' '
    let $HSA_Employer_Contrib = ' '
    let $Non_Qual_457_Y = ' '
    let $Non_Qual_457_N = ' '
    let $Combat_Pay = ' '
    let $Group_Term_ER_Cost = ' '
    let $Nonstatutory_Stock_Opt = ' '
    let $409A_Def_NQ_Def_Comp = ' '
    let $Roth_401K = ' '
    let $Roth_403B = ' '
    let $StatutoryEe = ' '
    let $RetirePlan = ' '
    let $Third_Party_Sick_Ind = ' '
    break
  when = 'WLMDE'
    move #Med_Wages to  #SS_Wages
    break
end-evaluate

  do Write-RW-Record-for-Local
  do Check-Disk

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count
  add 1 to #Count-T
End-Procedure


Begin-Procedure Write-O-Record
  If $WriteORec ='Y'

    do Write-RO-Record
    do Check-Disk

    add 1 to #RecordCount
    add 1 to #Tot_Record_Count
    add 1 to #Count-U
  End-if
End-Procedure

Begin-procedure Write-S-Record-from-Local

  if $Agency <> 'LJCKY'
    move &E.Emplid       to $E.Emplid
    move &A.W2_Reporting_Co to $W2.W2_Reporting_Co
    move $E.Emplid          to $W2.EMPLID
    move &TX.Balance_Year   to #W2.Balance_Year
    do Get-W2-Address
    move &E.City         to $E.City
    let  $E.StateCd = rtrim(&E.State, ' ')
    move &E.Postal       to $E.Zip
    move &E.Country      to $E.Country

    do Populate-EE-Address
  end-if

  Evaluate $Agency
    when = 'BGOH'
    when = 'BTLCK'         !MI Battle Creek
    when = 'GAH'
    when = 'SAGIN'         !MI Saginaw
    when = 'STLTA'
    when = 'LJCKY'
    when = 'LORAI'
    when = 'KETTE'                                                                                                     !RSI-HCM103992
    when = 'MIDCT'                                                                                                     !RSI-HCM103992
    when = 'LKWD'                                                                                                      !RSI-HCM10399
    when = 'WSTB'
    when = 'ALLEN'
    when = 'READ'
    when = 'WILLD'
    when = 'SPRMI'         !MI Springfield
    when = 'DUBLN'
    when = 'SOLON'
    when = 'STOW'
    when = 'NRIDG'
    when = 'WLMDE'
    when = 'BERK'
    when = 'RAVEN'
    when = 'NEWRK'
    when = 'FSTPK'
      if $FirstTime = 'Y'
        do Write-W-Record
        let $FirstTime = 'N'
      end-if
      do Write-S-Record
      move 0 to #Fed_Wages
      move 0 to #Fed_Tax
      break
    when = 'AKRON'
    when = 'CCA'
    when = 'CINCI'
    when = 'DAYTO'
    when = 'FINDL'
    when = 'JOHNS'
    when = 'MORAI'
    when = 'CYFLS'
    when = 'WSTRV'
    when = 'MASSI'
    when = 'RITA'
    when = 'CLMBS'
    when = 'SIDNE'
    when = 'AMHST'     !vendkxy on 02/10/2010  added the Code as per the S3# 13866650
    !GEXTX_851_B0292_02 2011-02-22 Vahini Katta Begins
    when = 'PARMA'
    when = 'CANTN'
    when = 'CNFLD'     !GEXPY_848_E165221_01  ISDVMZA
    when = 'COPAK'
    when = 'PHGTS'
    when = 'PTJED'  !GEXTX_851_P118964_01
    when = 'RCHFD'
    when = 'SPAKJ'
    when = 'VERNC'
    !GEXTX_851_B0292_02 2011-02-22 Vahini Katta Ends
      do Ohio-Specific
      if $FirstTime = 'Y'
        do Write-W-Record
        let $FirstTime = 'N'
      end-if
      do Write-S-Record
      if $Agency <> 'CINCI'
         move 0 to #Fed_Wages
      end-if
      break
    when = 'ALB'           !MI Albion
    when = 'BR'            !MI Big Rapids
    when = 'FLINT'         !MI Flint
    when = 'GRA'           !MI Grayling
    when = 'GRAPD'         !MI Grand Rapids
    when = 'ION'           !MI Ionia
    when = 'JAC'           !MI Jackson
    when = 'LAP'           !MI Lapeer
    when = 'LSING'         !MI Lansing
    when = 'MKG'           !MI Muskegon
    when = 'PNT'           !MI Pontiac
    when = 'POR'           !MI Portland
    when = 'WALKR'         !MI Walker
    when = 'BDFRD'         !OH Bedford
    when = 'FFD'           !OH Fairfield
    when = 'HARRS'         !OH Harrison
    when = 'LIBJD'         !OH Liberty
    when = 'KCFD'
    when = 'RITA'
    when = 'CLMBS'
    when = 'LOUIS'
    when = 'LKWD'
    when = 'AKRON'
    when = 'MRYSV'
    when = 'NWASH'
    when = 'STRA'
    when = 'WARRE'
    when = 'PHILA'
      if $FirstTime = 'Y'
          do Write-W-Record
          do Write-O-Record
          let $FirstTime = 'N'
      end-if
      do Write-S-Record
      move 0 to #Fed_Wages
      move 0 to #Fed_Tax
      break
    when-other
      do Write-S-Record
      break
  end-evaluate
  if $Agency <> 'CINCI'
    move 0 to #State_Wages     !Only Report once
    move 0 to #State_Tax
  end-if
  move 0   to #Local_Wages
  move 0   to #Local_Tax
  move 0 to #State_EIC
end-procedure

begin-procedure Write-S-Record
  move #Local_Wages      to $Local_Wages    09999999999
  move #Local_Tax        to $Local_Taxes    09999999999
  move 'C'               to $Tax_Type_Cd

  evaluate $Agency
    when = 'ALB'           !MI Albion
    when = 'BTLCK'         !MI Battle Creek
    when = 'BR'            !MI Big Rapids
    when = 'FLINT'         !MI Flint
    when = 'GRA'           !MI Grayling
    when = 'ION'           !MI Ionia
    when = 'JAC'           !MI Jackson
    when = 'LAP'           !MI Lapeer
    when = 'LSING'         !MI Lansing
    when = 'MKG'           !MI Muskegon
    when = 'PNT'           !MI Pontiac
    when = 'POR'           !MI Portland
    when = 'SAGIN'         !MI Saginaw
    when = 'SPRMI'         !MI Springfield
    when = 'GAH'
    when = 'LORAI'
    when = 'KETTE'                                                                                                     !RSI-HCM103992
    when = 'MIDCT'                                                                                                     !RSI-HCM103992
    when = 'LKWD'                                                                                                      !RSI-HCM10399
    when = 'LKWD'
    when = 'MRYSV'
    when = 'NWASH'
    when = 'WARRE'
    when = 'BDFRD'         !OH Bedford
    when = 'FFD'           !OH Fairfield
    when = 'HARRS'         !OH Harrison
    when = 'LIBJD'         !OH Liberty
      let $TaxingEntityCd = $Loc_Tax_Cd
      break
    when = 'READ'
      let $TaxingEntityCd = $Loc_Tax_Cd
      let $StateEIN = $FedEIN
      break
    when = 'HURON'         !MI Port Huron
      let $StateNumCdA = ' '
      let $TaxingEntityCD = $Loc_Tax_Cd
      let $Suffix = ' '
      if rtrim($E.Address1, ' ') <> ''
         move $E.Address1 to $E.Address2
         move ' ' to $E.Address1
      end-if
      let $Frgn_State = ' '
      let $Frgn_Zip   = ' '
      let $Country-2Char = ' '
      let $ReportingPeriod = ' '
      let $Zero_fill = ' '
      let $WorkWeeks = ' '
      let $EmployDate = ' '
      let $SepDate = ' '
      let $StateEIN = ' '
      let $StateNumCd = ' '
      let $OtherStateData = ' '
      let $StateControlNumber = ' '
      break
    when = 'WALKR'         !MI Walker
    when = 'GRAPD'         !MI Grand Rapids
      let $OtherStateData = &LTT2.W2_MAG_CODE
      break

    when = 'STLTA'
      let $StateNumCdA = ' '
      let $TaxingEntityCD = ' '
      let $US_ZipXtnsn = ' '
      let $Frgn_State = ' '
      let $Frgn_Zip   = ' '
      let $Country-2Char = ' '
      let $ReportingPeriod = ' '
      let $Zero_fill = ' '
      let $WorkWeeks = ' '
      let $EmployDate = ' '
      let $SepDate = ' '
      let $StateEIN = ' '
      let $StateNumCd = ' '
      let $OtherStateData = ' '
      let $Tax_Type_Cd = 'C'
      let $StateControlNumber = ' '
      if #Nonstatutory_Stock_Opt <> 0
          move #Nonstatutory_Stock_Opt to $Nonstatutory_Stock_Opt 09999999999
      else
          let $Nonstatutory_Stock_Opt = ' '
      end-if
      if $Nonstatutory_Stock_Opt <> ' '
         let $SupplData1 = 'STK' || $Nonstatutory_Stock_Opt
      else
         let $SupplData1 = ' '
      end-if
      break

    when = 'AKRON'
      let $OtherStateData = &LTT2.W2_MAG_CODE
      let $OtherStateData = lpad($OtherStateData, 10, ' ')
      break

    when = 'BGOH'
      let $TaxingEntityCd = $Loc_Tax_Cd
    !hardcoding below because LOCAL_TAX_TABLE2.W2_MAG_CODE field is only 5 char long
      let $StateControlNumber = 'BGCITY'
      break

    when = 'CCA'
    when = 'AMHST'   !vendkxy on 02/10/2010  added the Code as per the S3# 13866650
      let $StateNumCdA = ' '
      let $TaxingEntityCD = 'CC' || $W2-Mag-Code
      let $Suffix = ' '
      let $Frgn_State = ' '
      let $Frgn_Zip   = ' '
      let $Country-2Char = ' '
      let $ReportingPeriod = ' '
      let $WorkWeeks = ' '
      let $EmployDate = ' '
      let $SepDate = ' '
      let $StateEIN = ' '
      let $StateNumCd = ' '
      let $OtherStateData = ' '
      let $Tax_Type_Cd = 'C'
      let $StateControlNumber = ' '
      break

    when = 'CINCI'
      let $Tax_Type_Cd = 'C'
      let $StateControlNumber = $W2-Mag-Code
      move #Fed_Wages to $OtherStateData  0999999999
      break

    when = 'DAYTO'
      let $TaxingEntityCd = $Loc_Tax_Cd
      let $Tax_Type_Cd = 'C'
      let $StateControlNumber = '     '
      move #Local_Wages to $Special-Local-Wages 099999999999
      let $SupplData1 = $Special-Local-Wages
      break

    when = 'FINDL'
      let $Tax_Type_Cd = 'C'
      let $StateControlNumber = $Agency
      break

    when = 'WSTB'
      let $Tax_Type_Cd = 'F'
      let $TaxingEntityCd = $Loc_Tax_Cd
      break

    when = 'JOHNS'
    when = 'MORAI'
    when = 'CYFLS'
    when = 'WSTRV'
    when = 'MASSI'
    when = 'LJCKY'
      let $Tax_Type_Cd = 'C'
      let $TaxingEntityCd = $Loc_Tax_Cd
      let $StateEIN = ' '
      let $StateNumCd = ' '
      let $StateControlNumber = ' '
      break

    when = 'RITA'
      let $OtherStateData = ' '
      let $Tax_Type_Cd = 'C'
      let $StateControlNumber = ' '
      let $Suppldata1 = ' '
      let $TaxingEntityCd = 'RO' || &LTT2.W2_MAG_CODE
      break

    when = 'CLMBS'
      let $OtherStateData = lpad($W2-Mag-Code,10,' ')
      let $Tax_Type_Cd = 'C'
      let $StateControlNumber = ' '
      let $Suppldata1 = $City-Name
      break

    when = 'SIDNE'
      let $StateNumCdA = ' '
      let $TaxingEntityCD = $Loc_Tax_Cd
      let $Suffix = ' '
      let $Frgn_State = ' '
      let $Frgn_Zip   = ' '
      let $Country-2Char = ' '
      let $ReportingPeriod = ' '
      let $Zero_fill = ' '
      let $WorkWeeks = ' '
      let $EmployDate = ' '
      let $SepDate = ' '
      let $StateEIN = ' '
      let $StateNumCd = ' '
      let $Tax_Type_Cd = 'C'
      let $StateControlNumber = ' '
      break

    when = 'ALLEN'
      let $TaxingEntityCd = $Loc_Tax_Cd
      let $Tax_Type_Cd = 'C'
      do Get-Company-Local-Data
      let $SupplData1 = $Employer_ID_LWT
      break

    when = 'CTCB'
      let $TaxingEntityCd = ' '
      let $Frgn_State = ' '
      let $Frgn_Zip   = ' '
      let $Country-2Char = ' '
      let $ReportingPeriod = ' '
      let $Zero_fill = ' '
      let $WorkWeeks = ' '
      let $EmployDate = ' '
      let $SepDate = ' '
      let $StateEIN = ' '
      let $StateNumCd = ' '
      break

    when = 'LCTCB'
      let $TaxingEntityCd = ' '
      let $Frgn_State = ' '
      let $Frgn_Zip   = ' '
      let $Country-2Char = ' '
      let $ReportingPeriod = ' '
      let $Zero_fill = ' '
      let $WorkWeeks = ' '
      let $EmployDate = ' '
      let $SepDate = ' '
      let $Tax_Type_Cd = ' '
      let $SupplData1 = '            EIT         '
      break

    when = 'YATB'
      let $TaxingEntityCd = $Loc_Tax_Cd
      let $Tax_Type_Cd = 'F'
      break

    when = 'MATCB'
      let $TaxingEntityCd = ' '
      let $Tax_Type_Cd = ' '
      let $SupplData1 = '            EIT         '
      break

    when = 'STRA'
      let $TaxingEntityCd = $Loc_Tax_Cd
      break

    when = 'PHILA'
      let $StateEIN = ' '
      if $StateControlNumber =  '       '
           move $E.COMPANY  to $Phila_Company
           move $E.W2_STATE    to $Phila_StateCode
           move $LTT2.LOCALITY to $Phila_Locality
           do Get-PHILA-EIN
      end-if
      break

    when = 'NRIDG'
      let $TaxingEntityCd = &LTT2.W2_MAG_CODE
      break

    when = 'BERK'
      let $StateNumCdA = ' '
      let $TaxingEntityCd = $Loc_Tax_Cd
      let $Frgn_State = ' '
      let $Frgn_Zip   = ' '
      let $Country-2Char = ' '
      let $ReportingPeriod = ' '
      let $WorkWeeks = ' '
      let $EmployDate = ' '
      let $SepDate = ' '
      let $StateEIN = ' '
      let $StateNumCd = ' '
      let $OtherStateData = ' '
      let $Tax_Type_Cd = ' '
      let $StateControlNumber = ' '
      let $SupplData1 = ' '
      let $SupplData2 = ' '
      break

    when = 'RAVEN'
      let $TaxingEntityCd = $Agency
      break

    when = 'FSTPK'
      let $TaxingEntityCd = $Agency
      break

    when-other
      break

  end-evaluate



  do Write-RS-Record

  if $Agency = 'LCTCB' or $Agency = 'MATCB'
     add 1 to #Count-T
     add 1 to #Count-F-LCTCB
     add #Local_Wages to #Local_Wages_T
     add #Local_Tax   to #Local_Tax_T
     add #Local_Wages to #Local_Wages_F
     add #Local_Tax   to #Local_Tax_F
  end-if

  do Check-Disk

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count
end-procedure


Begin-Procedure Write-T-Record
  move #Count-T           to $Count-T 0999999                     !Count

! Unique Agency requirements
!    Agency does not require RT Record

  Evaluate $Agency
    when = 'HURON'
    when = 'STLTA'
    when = 'SIDNE'
    when = 'CTCB'
    when = 'YATB'
    when = 'LJCKY'
    when = 'PHILA'
      break

    when-other
      do Write-RT-Record
      do Check-Disk
      add 1 to #RecordCount
      add 1 to #Tot_Record_Count
      break
  end-evaluate

  add #Count-T  to    #Count-F !Company count

End-Procedure


Begin-Procedure Write-U-Record

  if $Agency = 'PHILA'
    do Zero-U-Record
  else
    do Write-RU-Record
    do Check-Disk

    add 1 to #RecordCount
    add 1 to #Tot_Record_Count
    do Zero-U-Record
  end-if
End-Procedure


Begin-Procedure Write-F-Record

  move #Count-F to $Count-F   099999999

  if $Agency = 'LCTCB' or $Agency = 'MATCB'
        do Write-RF-Record-LCTCB
     else
        do Write-RF-Record
  end-if
  do Check-Disk

  move 0         to #Count-S
  do Zero-F-Record

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count

End-Procedure

Begin-Procedure Process-Totals

  do Format-Number (#Tot_Record_Count, $out, 'B99,999')
  print 'Total File Record Count: '(+3,8)
  print $out (,33)
  move 0 to #Tot_Record_Count

End-Procedure


begin-procedure Get-Locality-Mag-CD
  do Check-Temp-Table
  if $Code_Found = 'N'

    do Check-Master-Table
    move &L2.W2_Mag_Code   to $Loc_Tax_Cd
  else
    move &LL.W2_Mag_Code  to $Loc_Tax_Cd
  end-if
end-procedure

begin-procedure Check-Temp-Table
  let $Code_Found = 'N'
begin-SELECT
LL.W2_MAG_CODE
LL.LOCALITY
LL.W2_MAG_MEDIA_NAME

  let $Code_Found = 'Y'
  let $CityName = &LL.W2_MAG_MEDIA_NAME

FROM  PS_R_TAX960XX  LL
WHERE LL.STATE    = $State
  AND LL.LOCALITY = $Locality
end-select
end-procedure

begin-procedure  Check-Master-Table

  move 'N' to $LocalityNameFound

begin-SELECT
L2.W2_MAG_CODE
L2.W2_MAG_MEDIA_NAME

  let $CityName = &L2.W2_MAG_MEDIA_NAME

FROM  PS_LOCAL_TAX_TBL2 L2
WHERE L2.STATE     = $State
  AND L2.LOCALITY  = $Locality
  AND L2.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL2
       WHERE  STATE    = L2.STATE
         AND  LOCALITY = L2.LOCALITY
         AND  EFFDT   <= $AsOfDate)
end-SELECT

begin-SELECT
L.LOCALITY_NAME
L.LOCALITY

  do Build-Temp-Table

FROM  PS_LOCAL_TAX_TBL L
WHERE L.STATE    = $State
  AND L.LOCALITY = $Locality
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL
       WHERE  STATE    = L.STATE
         AND  LOCALITY = L.LOCALITY
         AND  EFFDT   <= $AsOfDate)
end-SELECT
end-procedure

begin-procedure  Build-Temp-Table
begin-SQL on-error=Insert-Error
  INSERT INTO PS_R_TAX960XX (STATE,
                             LOCALITY,
                             W2_MAG_CODE,
                             LOCALITY_NAME,
                             W2_MAG_MEDIA_NAME,
                             WAGES,
                             TAXES)
          VALUES ($State,
                  $Locality,
                  &L2.W2_Mag_Code,
                  &L.Locality_Name,
                  &L2.W2_MAG_MEDIA_NAME,
                  0,0)
end-SQL
end-procedure

begin-procedure Insert-Error
  display 'Error on insert to temporary local table '

  Evaluate $E.W2_State
    when = 'OH'
      display 'Ohio School District requires Mag Media code, it may be blank'
      break
  end-evaluate
end-procedure

begin-procedure Delete-Temp-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_R_TAX960XX
end-SQL
end-procedure

begin-procedure Ignore
! dummy procedure to avoid SQL error message on delete of empty table
end-procedure

begin-procedure  Update-Temp-Table
begin-SQL on-error=Update-Error
  UPDATE  PS_R_TAX960XX
  SET     WAGES = WAGES + #Local_Wages, TAXES = TAXES + #Local_Tax
  WHERE   STATE    = $State     AND
          LOCALITY = $Locality

end-SQL
end-procedure

begin-procedure Update-Error
  display 'Error on update of temporary local table '
end-procedure

begin-procedure  Print-Temp-Table
  let #LnSp = 2
begin-SELECT
LCL.LOCALITY_NAME
LCL.WAGES
LCL.TAXES
LCL.W2_MAG_CODE

  let $LCL.W2_Mag_Code = ltrim (&LCL.W2_Mag_Code,' ')
  if $LCL.W2_Mag_Code <> ''

    let $Local_Desc = substr (&LCL.Locality_Name,1,18)
    print $Local_Desc (+#LnSp,74)
    let #LnSp = 1

    let $Local_Desc = ''

    let #out = &LCL.Wages / 100                       !County Wages
    do Format-Number(#out, $out, 'B99,999,999.99')    !
    print $out  (,95)

    let #out = &LCL.Taxes / 100                       !County Taxes
    do Format-Number(#out, $out, 'B9,999,999.99')     !
    print $out  (,111)

  end-if

FROM PS_R_TAX960XX LCL

end-select
end-procedure

begin-procedure Foreign-Address-Test($Format,#MaxLength)
  Let $_StateName = ''

  If $_Country = 'USA'
    move ' ' to $_ForeignAddrInd
  else
    move 'X' to $_ForeignAddrInd

    If $_Country <> $priorCountry
      do Get-Country-Code
      move $_Country to $priorCountry
      move &_Descr   to $CountryName
      move &_COUNTRY_CD_1042 to $_Country-2Char
    End-if

    if $_StateCd = ''
      Show '      Note: No state code for this record.  Country - ' $_Country
    else
      do Get-State-Code
      move &_STATE.DESCR to $_StateName
      uppercase $_StateName
    End-if

    Evaluate $Format
      when = 'Format 1'
        let #Length = LENGTH(RTRIM($CountryName,' '))
        let $_City = SUBSTR(RTRIM($_City,' '),1,(#MaxLength - #Length - 4) )
        let $_City = $_City || ' ' || $_StateCd || ' ' || $CountryName
        move ' ' to $_StateCd
      when = 'Format 2'
        let $_StateCd = $_StateCd || ' ' || $CountryName
        uppercase $_StateCd
      when = 'Format 3'
        let $_StateCd = $_StateCd
        uppercase $_StateCd
    End-evaluate
  End-if
  uppercase $_City
  let $EditZip = RTRIM($_Zip, ' ')
  let #DashPosition = INSTR($EditZip,'-',1)
  if #DashPosition <> 6
    move $_Zip to $_ZipExtsn ~~~~~xxxx
  else
    move $_Zip to $_ZipExtsn ~~~~~~xxxx
  end-if
End-Procedure

Begin-Procedure Get-Country-Code
  Let $Record_found = 'N'
Begin-Select
COUNTRY_2CHAR
DESCR
  Let $Record_found = 'Y'
FROM  PS_COUNTRY_TBL
WHERE COUNTRY = $Country
End-Select

 If $Record_found = 'N'
   Show ' Two Character Country code for ' $Country ' doesn''t exist in Country table.'
   Stop
 End-if

  Let $Record_found = 'N'
Begin-Select
COUNTRY_CD_1042
  Let $Record_found = 'Y'
FROM  PS_CNTRY_1042_TBL
WHERE COUNTRY = $Country
End-Select

 If $Record_found = 'N'
   Show ' Two Character Country code for ' $Country ' doesn''t exist in Country 1042 table.'
   Stop
 End-if
End-Procedure

Begin-Procedure Get-State-Code
  Let $Record_found = 'N'
Begin-Select
STATE.NUMERIC_CD
STATE.DESCR
  Let $Record_found = 'Y'
FROM  PS_STATE_NAMES_TBL  STATE
WHERE STATE.COUNTRY = $Country
  AND STATE.STATE   = $StateCd
End-Select

 If $Record_found = 'N'
   Show ' State code State : ' $StateCd ', Country : ' $Country ' doesn''t exist in State table.'
   Stop
 End-if
End-Procedure


Begin-Procedure Get-ee-State-Code

  Let $Record_found = 'N'
Begin-Select
S.NUMERIC_CD
S.DESCR
  Let $Record_found = 'Y'
FROM  PS_STATE_NAMES_TBL  S
WHERE  S.STATE   = $E.W2_State
   AND S.COUNTRY = 'USA'
End-Select

 If $Record_found = 'N'
   Show ' State code State : ' $E.W2_State ', Country : ' $Country ' doesn''t exist in State table.'
   Stop
 End-if
End-Procedure

Begin-Procedure State-End-Totals
  let $DTRTECompany = rtrim($E.Company, ' ')                                                                           !RSI-HCM103951
  display ''
  If $FileType = 'D'
    display 'Upon successful conclusion of this program, following diskette'
    display 'file(s) will have been created:'
    move 1 to #i
    while #i <= #FileExtension
     move #i to $i 099
     #ifdef OS400
       let $FileExtension = '(D' || $i || ')'
                                                                                                                       !RSI-HCM103951 Begin       
       If $ReportID2 = 'DET'
          let $FileID = '{IMPORTPREFIX}' || $ReportID2 || $i ||'_' ||$DTRTECompany ||'.XLS'
       Else
         If $ReportID2 = 'FLINT'
            let $FileID = '{IMPORTPREFIX}' || 'W2REPORT' || $i
         Else          
            let $FileID = '{IMPORTPREFIX}' || $ReportID2 || $i                                                           
         End-If
       End-If
                                                                                                                       !RSI-HCM103951 End       
     #else
                                                                                                                       !RSI-HCM103951 Begin     
        If $ReportID2 = 'DET'
           let $FileID = '{IMPORTPREFIX}' || $ReportID2 || '.' || $i ||'_' ||$DTRTECompany ||'.XLS'
        Else 
          If $ReportID2 = 'FLINT'
            let $FileID = '{IMPORTPREFIX}' || 'W2REPORT' || '.' || $i
          Else
            let $FileID = '{IMPORTPREFIX}' || $ReportID2 || '.' || $i
          End-If
        End-If
                                                                                                                       !RSI-HCM103951 End  
     #endif
       display $FileID
       add 1 to #i
    end-while
  else
    display 'Upon successful conclusion of this program, one file will have'
    display 'been created:'
    display ''
    
                                                                                                                       !RSI-HCM103951 Begin    
    If $ReportID2 = 'DET'
       let $FileID =  '{IMPORTPREFIX}' ||$ReportID2||'_'||$DTRTECompany ||'.XLS'            
    Else
      If $ReportID2 = 'FLINT'    
         let $FileID =  '{IMPORTPREFIX}' || 'W2REPORT' || '{IMPORTSUFFIX}'
      Else
         let $FileID =  '{IMPORTPREFIX}' || $ReportID2 || '{IMPORTSUFFIX}'                                                 
      End-If
    End-If
                                                                                                                       !RSI-HCM103951 End    
    display $FileID            noline
    display ' contains W-2 file.'
  end-if
  display ''
                                                                                                                       !RSI-HCM103951 Begin  
  If $ReportID2 <> 'DET'
     do Delete-Temp-Table
  End-If
                                                                                                                       !RSI-HCM103951 End

End-Procedure

begin-procedure Read-States

move 'AND E.W2_STATE IN (''' to $E.SelectedStates
move ' ' to $SelectedState

begin-SELECT
F.STATE

  move &F.STATE    to $SelectedState

  let $E.SelectedStates = $E.SelectedStates ||$SelectedState || ''','''
  if rtrim($SelectedState, ' ') <> ' '
    move 'Y' to $State-Selected
  end-if

FROM PS_RC_TAX960LC_ST F
WHERE F.OPRID               = $Prcs_OprID
  AND F.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID
end-SELECT

  if $State-Selected = 'Y'
    let $E.SelectedStates = SUBSTR($E.SelectedStates,1,LENGTH($E.SelectedStates) - 2)
    let $E.SelectedStates = $E.SelectedStates || ')'
  else
    let $E.SelectedStates = ' '
  end-if

end-procedure

begin-procedure Read-Agencies

move 'AND LTT2.W2_RPTG_AGENCY IN (''' to $LTT2.SelectedAgencies
move ' ' to $SelectedAgencies
begin-SELECT
G.W2_RPTG_AGENCY

  move &G.W2_RPTG_AGENCY    to $SelectedAgencies

  let $LTT2.SelectedAgencies = $LTT2.SelectedAgencies ||$SelectedAgencies || ''','''
  if rtrim($SelectedAgencies, ' ') <> ' '
    move 'Y' to $Agency-Selected
  end-if

FROM PS_RC_TAX960LC_AGE G
WHERE G.OPRID               = $Prcs_OprID
  AND G.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID
end-SELECT
  if $Agency-Selected = 'Y'
    let $LTT2.SelectedAgencies = SUBSTR($LTT2.SelectedAgencies,1,LENGTH($LTT2.SelectedAgencies) - 2)
    let $LTT2.SelectedAgencies = $LTT2.SelectedAgencies || ')'
  end-if

end-procedure


begin-procedure Read-Jurisdictions

move 'AND LTT2.LOCALITY IN (''' to $LTT2.SelectedJurisdictions
move ' ' to $SelectedJurisditions

begin-SELECT
H.LOCALITY

  move &H.LOCALITY    to $SelectedJurisdictions

  let $LTT2.SelectedJurisdictions = $LTT2.SelectedJurisdictions ||$SelectedJurisdictions || ''','''
  if rtrim($SelectedJurisdictions, ' ') <> ''
    move 'Y' to $Jurisdiction-Selected
  end-if

FROM PS_RC_TAX960LC_JUR H
WHERE H.OPRID               = $Prcs_OprID
  AND H.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID
end-SELECT

  if $Jurisdiction-Selected = 'Y'
    let $LTT2.SelectedJurisdictions = SUBSTR($LTT2.SelectedJurisdictions,1,LENGTH($LTT2.SelectedJurisdictions) - 2)
    let $LTT2.SelectedJurisdictions = $LTT2.SelectedJurisdictions || ')'
  else
    move ' ' to $LTT2.SelectedJurisdictions
  end-if

end-procedure


begin-procedure Get-W2-Co-Information

begin-SELECT
A1.DESCR
A1.FEDERAL_EIN
A1.CITY
A1.STATE
A1.POSTAL
A1.COUNTRY
A1.OTHER_EIN
A1.BUSI_TERM_IND
A1.EMPLOYMENT_TYPE
A1.EMPLOYER_KIND

   move &A1.Descr           to $A.Descr
   move &A1.Federal_EIN     to $A.Federal_EIN
   move &A1.City            to $A.City
   let  $A.State = rtrim(&A1.State, ' ')
   move &A1.Postal          to $A.Zip
   move &A1.Country         to $A.Country
   move &A1.Other_EIN       to #A.Other_EIN
   move &A1.Busi_Term_Ind   to $A.Busi_Term_Ind

   move &A1.EMPLOYMENT_TYPE to $EMPLOYMENT_TYPE
   move &A1.EMPLOYER_KIND   to $EMPLOYER_KIND

FROM PS_W2_COMPANY A1
WHERE A1.COMPANY          = $A.W2_Reporting_Co
  AND A1.CALENDAR_YEAR    = &TX.Balance_Year
  AND A1.TAXFORM_ID       =  'W'

end-SELECT
end-procedure


begin-procedure Get-W2-Co-Count
begin-SELECT
COUNT(*)    &Total_W2_Co

  move &Total_W2_Co  to #Total_W2_Co

FROM PS_W2_COMPANY A2
WHERE A2.W2_REPORTING_CO  = $A.W2_Reporting_Co
  AND A2.CALENDAR_YEAR    = &TX.Balance_Year
  AND A2.TAXFORM_ID       =  'W'
  AND EXISTS (SELECT 'X'
              FROM PS_YE_AMOUNTS AA2
              WHERE AA2.COMPANY = A2.COMPANY
                AND AA2.EMPLID = $E.Emplid
                AND AA2.CALENDAR_YEAR   = &TX.Balance_Year
                AND AA2.TAXFORM_ID      = $E.TaxForm_ID
                AND AA2.SEQUENCE_NUMBER = #E.Sequence_Number
                AND AA2.LOCALITY        = $LTT2.LOCALITY
                AND AA2.STATE           = $LTT2.STATE
                AND AA2.BOX    IN ('18','19'))
end-SELECT
end-procedure


#Include 'geteandg.sqc'  !Get-EandG procedure                           !HP00001
#Include 'getfed.sqc'    !Get-Federalproduct procedure                  !FED0001
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#include 'stw2smry.sqc'  !report page heading and column headings
#Include 'taxmmref.sqc'  !Electronic record layout for W2
#Include 'w2.sqc'        !Assign-Year-End-Variables
#Include 'w2box.sqc'     !Evaluate-Box
#Include 'w2addr.sqc'    !Get-W2-Address procedure
#Include 'rsieincd.sqc'  !State EIN validation procedures                                                               !RSI-HCM103949
#Include 'rsiemval.sqc'  !Validate-Email-Address procedure       !RSI-HCM103548 !GEXPY_848_E144189_01  ISDVMZA