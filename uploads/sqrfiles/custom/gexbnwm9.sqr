!***********************************************************************
! GEXBNWM9:  This program evaluates HBC employees to the appropriate   *
!            hours worked ranges basedon their benefit program.        *
!            Depending on the level of benefits which the EE evaluates *
!            to, this program may insert a JOB row to trigger benefit  *
!            changes based on the initial hours worked from the eff date*
!            of the benefit program or rehire date of the employee     * 
!                                                                      *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE	     *	
!***********************************************************************
!  GBNC030   JNB       06/17/1998     INITIAL CREATION                 *
!                                     CLONED GEXBNWM4                  * 
!            SXK       08/08/1998     Added logic to find the last     *
!              			      pay period confirmed               *
!            JNB       06/29/1999     Pointed to gexbnmda.sqc from     *
!                                     gexbnmdt.sqc. This sqc selects   *
!                                     last pay period based on A cale- *
!                                     ndar. This was necessary because *
!                                     job runs in split month schedule *      
!                                                                      *
!            CWB       03/07/2001     Added 'AZ' and 'CZ' to the       *
!                                     exclusion codes.                 * 
!***********************************************************************


#include 'setenv.sqc' !Set environment

begin-setup

#include 'setup32a.sqc'

declare-report Report-log
Printer-Type=HPLASERJET
  layout=DEFAULT
end-declare

end-setup

!*********************************************************************
!Initial processing, retrieving current dates and calls the main 
!procedure to do the processing.                                     
!*********************************************************************
begin-report

  use-report Report-log

  do Init-DateTime
  do Init-Number
  do stdapi-init
  
  move 'GEXBNWM9' to $ReportID
  move 'Benefit Changes based on Initial Hours Worked' to $ReportTitle
  display $ReportTitle

  do Get-Current-DateTime
  let $reportdate_mm = substr($reportdate,1,2)
  let $reportdate_dd = substr($reportdate,4,2)
  let $reportdate_yy = substr($reportdate,7,2)
  do MakeYear4Digits ($reportdate_yy)

!SXK 08/08/1998 Begin
  do edit-pay-calendar
  
  let $reportdate_ccyyyy = $reportdate_mm||'/'||$reportdate_dd||'/'||$reportdate_yy
  do format-datetime($reportdate_ccyyyy,$reportdate_ccyy,{DEFMDY},'','NATIVE') 

!  let $curr_mm_dt = $reportdate_mm||'/'||'01'||'/'||$reportdate_yy
!  do format-datetime($curr_mm_dt,$curr_mm_dt_Dbf,{DEFMDY},'','NATIVE') 
!  let $effdt_dbf = $curr_mm_dt_dbf

!SXK 08/08/1998 End
  
  do Report
  do Commit-Transaction
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term

end-report

!*********************************************************************
!If this Program is being executed through process scheduler, 
!the run control parameters and calls the main processing procedure.
!Otherwise, interrogates the user for the run control parameters and 
!validates them. If the run control parameters are invalid, stops the
!execution.
!*********************************************************************
begin-procedure Report

date-time () hh:mi:ss &timeBegan
display 'Report Began: ' noline
display &timeBegan

 move 'N' to $Errorfound
 move 6 to #clicker_count_max

!if $prcs_process_instance = ''
!    input $rnctl_date 'Enter Run Control Date({Prompt-Date}): ' type=char
!    do format-datetime($rnctl_date,$rnctl_date_dbf,{prompt-mask},'','native')
!else
!    do Select-Parameters
!    if $found = 'N'
!        goto report-exit
!    end-if
!   move &RC.rnctl_date to $rnctl_Date
!end-if

move $reportdate_ccyyyy to $rnctl_date

let $rnctl_mm = substr($rnctl_Date,1,2)
let $rnctl_dd = substr($rnctl_Date,4,2)
let $rnctl_yyyy = substr($rnctl_Date,7,4)       
let $rnctl_yy  = substr($rnctl_date,9,2)
move $rnctl_yyyy to #rnctl_yyyy
move $rnctl_yy to #rnctl_yy

 do process-employee-data

Report-Exit:


  date-time () hh:mi:ss &timeProcess
  display #InputTran 99999 noline
  display ' Transactions Processed: ' noline
  display &timeProcess

end-procedure

!*********************************************************************
!Prints the header information in the report log.
!*********************************************************************

begin-heading 8 for-reports=(report-log)

do get-bp-description

unstring $reporttitle by '(' into $reporttitle $temp_right

concat '(' with $reporttitle
concat $prev_bp_name with $reporttitle
concat '-' with $reporttitle
concat &DES.DESCR with $reporttitle
concat ')' with $reporttitle
 #Include 'stdhdg01.sqc'

!  date-time () DD-MON-YYYY &curr_Date 
!  print &curr_Date ()
  position (-1)
  print 'Report Log' () center bold

  position (+3)
  print 'Trans#' (,1) bold
  print 'Emplid' (,18) bold
  print 'Message' (,50) bold
  print '-' (+1,1,127) fill
 

end-heading

!*********************************************************************
!Prints the footer in the report log
!*********************************************************************

begin-footing 2 for-reports=(Report-log)
page-number (1,108) 'Page '  
last-page () ' of ' '.'

end-footing

!*********************************************************************
!Determines previous month's number of weeks to find out the weekly 
!hours worked for each employee. Calls the main benefits participation
!logic
!*********************************************************************

Begin-Procedure Process-Employee-Data

move 'N' to $errorfound
move 'N' to $found
!********************************************************
!  01/07/98 - modification
!  Company and Paygroup set here to use when querying the
!  Pay Calendar to retrieve the correct check date rows.
!  This is used for testing, but more SQL needs added to
!  retrieve the correct Company and Paygroup from the 
!  Elig Rules for the Ben Pgm instead of hardcoding the
!  values here.  We could also select one EE that is enrolled
!  in the current BP and use the Company & Paygroup from the
!  EE's JOB record to query the calendar with.  This SQR will
!  execute for more than GEMCO Retail Benefit Programs, but
!  all BPs will be part of Retail - paid on Thursday.
!********************************************************
! move 'GEI' to $Co_Name   ! need to add some sql to get right company
! move 'RET' to $Pay_Name


! do determine-prev-month-pay-period

!if ($errorfound = 'Y') or ($found = 'N')
!   goto skip-processing
!end-if

!*******************************************
!Added logic to go to GEX_SQR_PROCESS table and retrieves all the 
!benefit programs that need to be run through this SQR
!*******************************************

  do Retrieve-benefit-pgms

  if $ben_pgm_found = 'N'
     display 'No Benefit Programs found for Process:GEXBNWM9'
  end-if



skip-processing:

end-procedure

!*********************************************************************
!Retrieves each employee who participated in G01 Benefit Program and
!calls necessary procedures to determine their weekly hours. 
!********************************************************************* 

begin-procedure process-benefit-partic

move 'N' to $errorfound
move 'N' to $beninfo_found
if $log_printed = 'Y'
   use-report report-log
   new-page
end-if
move $bp_name to $prev_bp_name
use-report report-log

let #whse_seq = 4

begin-select on-error=sql-error-found('process-benefit-partic')
B.EMPLID  &emplid
to_char(B.EFFDT,'MM/DD/YYYY') &b.effdt
C.ERNCD_SPCL
C1.FIELDNAME
C1.FIELDNAME2
D.EMPL_RCD
D.EFFDT
D.EFFSEQ
D.ELIG_CONFIG1
D.ELIG_CONFIG2
D.COMPANY  &company
D.DEPTID
D.ACCT_CD
D.JOBCODE
D.GEX_VOLUN_LOW_HRS
D.EMPL_STATUS 
E.NAME

   move 'Y' to $beninfo_found
   move &company to $company
   move &emplid to $emplid
   display $emplid
   if RTRIM(&C1.FIELDNAME2,' ') <> ''
      display 'FIELDNAME2 ' noline
      display &c1.fieldname2
      Let $RelatedTo2 = 'Y'
      display '$RelatedTo2 ' noline
      display $RelatedTo2 
   end-if
   move &B.EFFDT to $start_Date
  !SXK 08/08/1998 Begin - #end_month, #end_yy are set in gexbnmdt sqc
  !   move $reportdate_mm to #end_month
  !   let #end_month = #end_month - 1
  !   move $reportdate_yy to $end_yy
  !SXK 08/08/1998 End

  
  do format-datetime($start_date,$BP_Start_date,{DEFMDY},'','NATIVE') 

   do find-REHIRE-action-for-employee
   let #start_month = substr($start_Date,1,2)
   let $start_yy = substr($start_date,7,4)

   display 'Start Month:' noline
   display #start_month
   display 'End Month:' noline
   display #end_Month

   display 'Start Year:' noline
   display $start_yy
   display 'End Year:' noline
   display $end_YY

         let #week_hrs = 0
      let #sum_mtd_hrs = 0

   if $start_yy = $end_yy
      do calculate-sum-of-mtd-hrs-4
   else
      do calculate-sum-of-mtd-hrs-in-range
   end-if


 !    display 'error found: ' noline
 !    display $errorfound
      move #week_hrs to $week_hrs
  
 !     display 'week hrs: ' noline
 !     display $week_hrs
    if ($errorfound = 'N') !and (#week_hrs > 0)
        display 'process elig rules'
         move 'N' to $atleast_one_found
         add 1 to #inputtran
         do process-elig-rules
           display $errorfound  
       if $errorfound = 'N'
            do evaluate-config-value
         end-if
     end-if

FROM PS_BEN_PROG_PARTIC B,
     PS_SPCL_EARNS_TBL C,
     PS_BEN_DEFN_PGM C1,
     PS_JOB D,
     PS_PERSONAL_DATA E
WHERE B.BENEFIT_PROGRAM = $BP_name
  AND B.EMPLID = D.EMPLID
  AND B.EMPL_RCD = D.EMPL_RCD
  AND D.EMPL_STATUS IN ('A','L','P')
!  AND substr(D.ELIG_CONFIG2,4,7) not in ('AH00000','CH00000')   ! CWB 03/07/2001
  AND substr(D.ELIG_CONFIG2,4,7) not in ('AH00000','CH00000','AZ00000','CZ00000')
  AND B.EMPLID = E.EMPLID
  AND C1.BENEFIT_PROGRAM = B.BENEFIT_PROGRAM
  AND C1.GEX_SPCL_ACCUM_CD = C.ERNCD_SPCL
  AND B.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_BEN_PROG_PARTIC
                  WHERE EMPLID = B.EMPLID
                    AND EMPL_RCD = B.EMPL_RCD
                    AND EFFDT <= $curr_mm_dt_dbf)
  AND C1.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_BEN_DEFN_PGM
                  WHERE BENEFIT_PROGRAM = $BP_name
!                    AND GEX_SPCL_ACCUM_CD = C.ERNCD_SPCL
                    AND EFFDT <= $curr_mm_dt_dbf) !used to be reportdate_ccyy
  AND C.EFFDT = (SELECT MAX(C3.EFFDT)
                   FROM PS_SPCL_EARNS_TBL C3 
                  WHERE C3.ERNCD_SPCL = C.ERNCD_SPCL
                    AND C3.EFF_STATUS = 'A'
                    AND C3.EFFDT <= $curr_mm_dt_dbf)
  AND D.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_JOB
                  WHERE EMPLID = D.EMPLID
                    AND EMPL_RCD = D.EMPL_RCD
                    AND EFFDT <= $curr_mm_dt_dbf)
  AND D.EFFSEQ = (SELECT MAX(EFFSEQ)
                   FROM PS_JOB
                  WHERE EMPLID = D.EMPLID
                    AND EMPL_RCD = D.EMPL_RCD
                    AND EFFDT = D.EFFDT)
ORDER BY D.DEPTID, E.NAME
end-SELECT

if $beninfo_found = 'N'
   do error-found
   print 'No Benefit Participation information found' (,34)
end-if

end-procedure

!*********************************************************************
!Compares the existing job table config2 field and the calculated field
!and processes further
!*********************************************************************

begin-procedure Evaluate-config-value

move &D.ELIG_CONFIG2 to $elig_config2_job
move $ee_config2_val to $elig_config2

let $ee_config2_val_nospaces = rtrim($ee_config2_Val,' ')
let $ee_config2_job_nospaces = rtrim($elig_config2_job,' ')

let $ee_config2_val_4to7 = substr($ee_config2_val_nospaces,4,7)
let $ee_config2_job_4to7 = substr($ee_config2_job_nospaces,4,7)

let $elig_config2_1to3 = substr($elig_config2_job,1,3)
                    
 Evaluate $ee_config2_val_4to7
     when = 'A000000'
       let $elig_config2 = $elig_config2_1to3||'AH00000'
       Do insert-procedure
       !do write-report-log
       !       print 'Employee met the hours requirement and should have a row inserted' (,34)
         
 end-evaluate
               

!display 'Job Config2 Value:'
!display $elig_config2_job
!display 'Pgm Config2 Value:'
!display $ee_config2_val_nospaces
!display 'Volun Value:'
!display &d.gex_volun_low_hrs
!display $ee_config2_val_nospaces
!display $ee_config2_job_nospaces
!if $ee_config2_val_nospaces = $ee_Config2_job_nospaces

end-procedure

!**********************************************************************
!Finds out if the employee has been rehired after the benefit program
!enrollment.
!**********************************************************************

Begin-Procedure find-rehire-action-for-employee

move 'N' to $errorfound

Begin-Select on-error=sql-error-found('Find-Rehire-Action-For-Employee')
to_char(REH.EFFDT,'MM/DD/YYYY') &reh.effdt
   display 'REH effective date:' noline
   display &reh.effdt
   move &REH.EFFDT to $start_date

FROM PS_JOB REH

WHERE REH.EMPLID = &emplid
  AND REH.EMPL_RCD = &D.EMPL_RCD
  AND REH.ACTION = 'REH'
  AND REH.ACTION_REASON NOT IN ('REI')
  AND REH.EFFDT = (SELECT MAX(EFFDT)
                     FROM PS_JOB
                    WHERE EMPLID = &emplid
                      AND EMPL_RCD = &D.EMPL_RCD
                      AND ACTION = 'REH'
		      AND ACTION_REASON NOT IN ('REI')
                      AND EFFDT >= $BP_Start_date)     ! Effdt of BP Participation
  AND REH.EFFSEQ = (SELECT MAX(EFFSEQ)
                      FROM PS_JOB
                     WHERE EMPLID = &emplid
                       AND EMPL_RCD = &D.EMPL_RCD
                       AND EFFDT = REH.EFFDT)

END-SELECT

end-procedure
  
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
!*#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'payrnctl.sqc'  !Select-Parameters
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'readxlat.sqc'  !Read xlattable
#Include 'gexbnahp.sqc'  !
! JNB 06/29/1999 begin 
#Include 'gexbnmda.sqc'  !Pay check issue dt calculation
!#Include 'gexbnmdt.sqc'  !Pay check issue dt calculation
! JNB 06/29/1999 end  
 
