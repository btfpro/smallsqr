!***********************************************************************
!  GEXPY021:  Tax Summary Report                                       *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! PeopleSoft, Inc.; it is not to be copied, reproduced, or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of PeopleSoft.                        *
!                                                                      *
! Copyright (c) 1988-1996 PeopleSoft, Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
!      $Date:: 7/29/97 5:58p    $                                      *
!  $Revision:: 3                $                                      *
!  $Workfile:: TAX010.SQR       $                                      *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!   INITIALS        DATE            DESCRIPTION OF THE CHANGE          *
!***********************************************************************
!   JDH             05/07/1998      Initial Creation  (Cloned TAX010)  *
!                                   Modified to include current pay    *
!                                     period information.              *
!                                                                      *
!   JDH             10/22/1998      Added run_id parameter             *
!                                                                      *
!   SXK             12/10/1998      Modified to use current month if   *
!				    is not populated                   *
!                                                                      *
!   SXK             12/16/1998      Modified to print Sub totals       *
!                                                                      *
!   SXK             12/20/1998      Modified to not to add sub totals  *
!				    to totals array twice              *
!                                                                      *
!   SXK             05/25/1999      Modified to create vouchers        *
!                                                                      *
!   JDH             08/19/1999      Added subquery to tax_balance      *
!                                   select statement.                  *
!                                   Commented out all changes made on  *
!                                   05/25/1999 by SXK.  This change    *
!                                   ended up being ready for           *
!                                   migration prior to 05/25 changes   *
!                                                                      *
!   SXK             10/09/1999      Error log be printed even if no    *
!                                   errors                             *
!                                                                      *
!   SXK             10/13/1999      Modified to have aps.gex_ap_freq   *
!                                   instead of ap.gex_ap_freq for state*
!                                   vouchers                           *
!                                                                      *
!   SXK             11/04/1999      Modified to have orig_source as    *
!			            combination of first letter of     *
!				    run_id and TX text. This is done   *
!				    to not to delete A run entries     *
!	                            when B run is running. Previously  * 
!				    orig_source used to be TAX.        *
!                                                                      *
!   SXK             01/07/2000      Modified evaluate of month to get  * 
!				    quarter end date for quarterly due *
!				    AP checks.                         *
!                                                                      *
!   SXK             01/18/2000      Modified to include usarpt.sqc to  *
!                                   get NID_COUNTRY parameter, also    *
!                                   &locality is changed to $LocalName *
!                                   and &country is changed to         *
!                                   $LocalCnty. And added sqrtrans.sqc *
!                                   to get the month name in a literal *
!                                   format.                            * 
!                                                                      *
!   CWB             04/14/2000      Added logic to not process Occ Tax *
!                                   Memo rows (those with tax_class =  *
!                                   'P' and locality = ' '.            *
!                                                                      *
!   KMW 	    04/24/2000      Changed due dates for month and qtr*
!                                   to be the 7th rather than the 1st  * 
!                                                                      *
!   CJH             08/18/2000      Tax_class commented from EFFDT     *
!                                   subselect so correct row will be   *
!                                   retrieved.  Look for Active        *
!                                   eff_status row.                    *
!                                                                      *
!   AXL             01/17/2001      Added a procedure to handle        *
!                                   #AsOfMonth during split-month ends *
!                                                                      *
!   SCM             04/10/2002      Modified to process TIPS for       *
!                                   Bradley Catering.  Add taxclass=G  *
!                                   for OASDI tips and taxclass=T      *
!                                   for Medicare tips).  OASDT and     *
!                                   MEDIT will display for descriptions*   
!                                   Also modified getstdta.sqc         *
!GEX_PY270 SXD     08/23/2007       No changes are made to sqr         *
!GEX ISDVNPK       11/19/2007       Commented the AP interface call as per 9.0
!GEX-TLL 	   03/19/2008 	    HCM 9.0 Upgrade Retrofitting       *
!GEX-PY-SC00074444 Kundan kumar Yeedibilli Roll back the changes PS_CO_LOCALTAX_TBL
!					as part of tax update 12B 
! ISDVMZA  07/03/2012   GEXPY848_130119                                *
!                       ITG#130119 -- Removed the condition added as   *
!                       part of tax update 12B                         *
! GEXPY_848_E158770_01 2013-09-25 Vahini Katta                         * 
! Added Tax class 7 Additional Medicare                                *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'usarpt.sqc' 

begin-setup
#include 'setup32a.sqc'
declare-report tax-report
Printer-Type=HPLASERJET
 layout=default
end-declare
! GEX ISDVNPK 11/19/2007
!declare-report report-log
!Printer-Type=HPLASERJET
! layout=default
!end-declare
! GEX ISDVNPK 11/19/2007

end-setup

begin-report
  use-report tax-report
  do Init-Report
  !  GEX ISDVNPK 11/19/2007
  !if #error_count = 0
  !    use-report report-log
  !   print 'NO ERROR MESSAGES FOUND' (+1,1)
  !   use-report tax-report
  !end-if
  ! GEX ISDVNPK 11/19/2007
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'GEXPY021' to $ReportID
  move 'Tax Summary Report' to $ReportTitle
  display $ReportTitle
!  let $orig_source = 'TAX'
  let #error_Count = 0
  do Init-DateTime
  do Init-Number
  do get-current-datetime
  do convert-to-dtu-date($asoftoday,$asoftoday_dtu)
  let $asofmonth_dtu = substr($asoftoday_dtu,6,2)
   !display '$asofmonth_dtu ' noline
   !display $asofmonth_dtu
   do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialize
  do Standard-Initialization
end-procedure

begin-procedure Initialize
  if $prcs_process_instance = ''
    do Prompt
  else
    do Select-Parameters
    do Process-Run-Control
  end-if
  if $RC_PAY.Run_ID = ''

     !SXK 11/04/1999 Begin
     display 'Run_ID is required'
     stop
     !SXK 11/04/1999 end

     Let $Run_ID_Criteria = '1=1'
     Let $Run_ID_Criteria_1 = '1=1'
   !SXK 12/16/1998 Begin
     Let $Run_id_criteria_2 = '1=1'
   !SXK 12/16/1998 End
  else
     !SXK 11/04/1999 Begin
     !GEX-TLL 03/19/2008 HCM 9.0 Upgrade Begin
     !let $orig_source = substr($RC_PAY.Run_ID,1,1)||'TX'
     let $orig_source = substr($RC_PAY.Run_ID,7,1)||'TX' 
     !GEX-TLL 03/19/2008 HCM 9.0 Upgrade End
     !SXK 11/04/1999 end

     Let $Run_ID_Criteria = 'pc.run_id = ''' || $RC_PAY.Run_ID || ''''
     Let $Run_ID_Criteria_1 = 'PC1.RUN_ID = PC.RUN_ID'
  !SXK 12/16/1998 Begin
     Let $Run_ID_Criteria_2 = 'c1.run_id = ''' || $RC_PAY.Run_ID || ''''
  !SXK 12/16/1998 End
  end-if

if $RptPeriod = 'M'
    let #AsOfQtr = #AsOfMonth
    let #AsOfQtr = ((#AsOfQtr - 1)/ 3) + 1
    do Format-Number(#AsOfQtr, $AsOfQtr, '9.99') !avoid rounding the integer portion
    move $AsOfQtr to $AsOfQtr x     !save the integer portion
end-if
!SXK 12/16/1998 Begin
!            SCM  04/10/2002    Increased # in array from 14 to 16 to accomodate new taxclasses
!GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Begins
  !create-array name=CurArray size=5
  !			     field=curType:char:16         !SCM  04/10/2002
  !			     field=curRt:number:16	   !SCM  04/10/2002
  !			     field=curtxGrs:number:16      !SCM  04/10/2002
  !			     field=curTax:number:16        !SCM  04/10/2002
  !			     field=curExcess:number:16     !SCM  04/10/2002
			     
  create-array name=CurArray size=5
			     field=curType:char:17        
			     field=curRt:number:17	  
			     field=curtxGrs:number:17     
			     field=curTax:number:17       
			     field=curExcess:number:17    
!GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Ends
!                                         SCM  04/10/2002 Had to renumber the order in the array
!                                              because I inserted 2 Tax Classes for storing values. 
!                                              Order must be in tact: (i.e.$Tax_Classes='HCPDGFTMNVBUSRE') 
! put 'W/H'     into CurArray(0) CurType(1)
  put 'EIC'     into CurArray(0) CurType(2)
! put 'OccPr'   into CurArray(0) CurType(3)
  put 'SDI'     into CurArray(0) CurType(4)
  put 'OASDT'   into CurArray(0) CurType(5)           !SCM  04/10/2002  added for tips,taxclass=G
  put 'MEDI'    into CurArray(0) CurType(6)           !SCM  04/10/2002  reordered from 5 to 6
  
  !GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Begins
  
  !put 'MEDIT'   into CurArray(0) CurType(7)           !SCM  04/10/2002  added for tips,taxclass=T
  !put 'WFDP'    into CurArray(0) CurType(8)           !SCM  04/10/2002  reordered from 6 to 8
  !put 'HCSF'    into CurArray(0) CurType(9)	      !SCM  04/10/2002  reordered from 7 to 9
  !put 'UI EE'   into CurArray(0) CurType(10)	      !SCM  04/10/2002  reordered from 8 to 10
  !put 'ER/EE'   into CurArray(0) CurType(11)	      !SCM  04/10/2002  reordered from 9 to 11
  !put 'UI'      into CurArray(0) CurType(12)	      !SCM  04/10/2002  reordered from 10 to 12
  !put 'UI Sp'   into CurArray(0) CurType(13)	      !SCM  04/10/2002  reordered from 11 to 13
  !put 'LOCAL'   into CurArray(0) CurType(14)	      !SCM  04/10/2002  reordered from 12 to 14
  !put 'DisER'   into CurArray(0) CurType(15)	      !SCM  04/10/2002  reordered from 13 to 15

  put 'Addl MED' into CurArray(0) CurType(7)
  put 'MEDIT'    into CurArray(0) CurType(8)           
  put 'WFDP'     into CurArray(0) CurType(9)           
  put 'HCSF'     into CurArray(0) CurType(10)	      
  put 'UI EE'    into CurArray(0) CurType(11)	      
  put 'ER/EE'    into CurArray(0) CurType(12)	      
  put 'UI'       into CurArray(0) CurType(13)	      
  put 'UI Sp'    into CurArray(0) CurType(14)	      
  put 'LOCAL'    into CurArray(0) CurType(15)	      
  put 'DisER'    into CurArray(0) CurType(16)	      
  
  !GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Ends

!SXK 12/16/1998 End
  
!            SCM  04/10/2002    Increased # in array from 14 to 16 to accomodate new taxclasses
  !GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Begins
  !create-array name=TaxArray size=5
			     !field=TaxType:char:16
			     !field=TaxRt:number:16
			     !field=TxGrs:number:16
			     !field=Tax:number:16
			     !field=Excess:number:16
  create-array name=TaxArray size=5
			     field=TaxType:char:17
			     field=TaxRt:number:17
			     field=TxGrs:number:17
			     field=Tax:number:17
			     field=Excess:number:17			     
  !GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Ends			     

! put 'W/H'     into TaxArray(0) TaxType(1)
  put 'EIC'     into TaxArray(0) TaxType(2)
! put 'OccPr'   into TaxArray(0) TaxType(3)
  put 'SDI'     into TaxArray(0) TaxType(4)
  put 'OASDT'   into TaxArray(0) TaxType(5)          !SCM  04/10/2002  added for tips,taxclass=G
  put 'MEDI'    into TaxArray(0) TaxType(6)          !SCM  04/10/2002  reordered from 5 to 6
  
  !GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Begins
  !put 'MEDIT'   into TaxArray(0) TaxType(7)          !SCM  04/10/2002  added for tips,taxclass=T
  !put 'WFDP'    into TaxArray(0) TaxType(8)          !SCM  04/10/2002  reordered from 6 to 8
  !put 'HCSF'    into TaxArray(0) TaxType(9)          !SCM  04/10/2002  reordered from 7 to 9
  !put 'UI EE'   into TaxArray(0) TaxType(10)         !SCM  04/10/2002  reordered from 8 to 10
  !put 'ER/EE'   into TaxArray(0) TaxType(11)         !SCM  04/10/2002  reordered from 9 to 11
  !put 'UI'      into TaxArray(0) TaxType(12)         !SCM  04/10/2002  reordered from 10 to 12
  !put 'UI Sp'   into TaxArray(0) TaxType(13)         !SCM  04/10/2002  reordered from 11 to 13
  !put 'LOCAL'   into TaxArray(0) TaxType(14)         !SCM  04/10/2002  reordered from 12 to 14
  !put 'DisER'   into TaxArray(0) TaxType(15)         !SCM  04/10/2002  reordered from 13 to 15
  
  put 'Addl MED' into TaxArray(0) TaxType(7)
  put 'MEDIT'    into TaxArray(0) TaxType(8)
  put 'WFDP'     into TaxArray(0) TaxType(9)
  put 'HCSF'     into TaxArray(0) TaxType(10)  
  put 'UI EE'    into TaxArray(0) TaxType(11) 
  put 'ER/EE'    into TaxArray(0) TaxType(12) 
  put 'UI'       into TaxArray(0) TaxType(13) 
  put 'UI Sp'    into TaxArray(0) TaxType(14) 
  put 'LOCAL'    into TaxArray(0) TaxType(15) 
  put 'DisER'    into TaxArray(0) TaxType(16) 
  !GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Ends


  create-array name=SectCols size=5
			     field=Count:number
			     field=TypeCol:number
			     field=RateCol:number
			     field=GrossCol:number
			     field=TaxCol:number
			     field=ExcessCol:number

  put 0   into SectCols(1) TypeCol
  put 0   into SectCols(1) RateCol
  put 24  into SectCols(1) GrossCol
  put 40  into SectCols(1) TaxCol
  put 0   into SectCols(1) ExcessCol

  put 56  into SectCols(2) TypeCol
  put 63  into SectCols(2) RateCol
  put 69  into SectCols(2) GrossCol
  put 85  into SectCols(2) TaxCol
  put 101 into SectCols(2) ExcessCol

  put 117 into SectCols(3) TypeCol
  put 124 into SectCols(3) RateCol
  put 130 into SectCols(3) GrossCol
  put 146 into SectCols(3) TaxCol
  put 162 into SectCols(3) ExcessCol

  create-array name=Totals size=4
			   field=TotalName:char
			   field=total_MTD:number:4
			   field=total_QTD:number:4
			   field=total_YTD:number:4
			   field=startCol:number:4
			   field=total_CUR:number:4
  put 'Grand Total'    into Totals(1) TotalName
  put 'Company Total'  into Totals(2) TotalName
  put  40 into Totals(0) startCol(1)
  put  85 into Totals(0) startCol(2)
  put 146 into Totals(0) startCol(3)
 
!SCM  04/10/2002    Begin commented old and  Added TIPS  (Tax class=G and T in section 2)
!  let $Tax_Classes  = 'HCPDFMNVBUSRE'            !for storing array info
!  let $TaxSection   = '1112222223333'            !section for tax class
!  let $TaxesFound   = 'HCPDFMNVBUSRE'            !track which taxes found
!  let $TaxesFound2  = 'HCPDFMNVBUSRE'            !track which taxes found
!  let #Num_Tax_Classes = 13                      !for tax entity

!GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Begins
  !let $Tax_Classes  = 'HCPDGFTMNVBUSRE'         !for storing array info
  !let $TaxSection   = '111222222223333'         !section for tax class
  !let $TaxesFound   = 'HCPDGFTMNVBUSRE'         !track which taxes found
  !let $TaxesFound2  = 'HCPDGFTMNVBUSRE'         !track which taxes found
  !let #Num_Tax_Classes = 15                     !for tax entity since 15 classes are tracked
  
  let $Tax_Classes  = 'HCPDGF7TMNVBUSRE'         !for storing array info
  let $TaxSection   = '1112222222223333'         !section for tax class
  let $TaxesFound   = 'HCPDGF7TMNVBUSRE'         !track which taxes found
  let $TaxesFound2  = 'HCPDGF7TMNVBUSRE'         !track which taxes found
  let #Num_Tax_Classes = 16                     !for tax entity since 15 classes are tracked
!GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Ends
!SCM  04/10/2002    End    TIPS
end-procedure

begin-procedure Prompt
  while 1 = 1
    input $RC_PAY.Run_ID maxlen=3 'Enter Pay Run ID'
    if Rtrim($RC_PAY.Run_ID, ' ') <> ''
      break
    end-if
  end-while
  input $RptYear  maxlen=4 'Enter Year  (1998,1999,2000,etc)'
  let #RptYear = to_number($RptYear)
  do Get-Reporting-Period
  if $RptPeriod = 'Q'
!    move 'Quarterly ' to $ReportTitlePeriod
    move 1 to #QTR
    while #QTR = 1
	input $RptQtr   maxlen=1 'Enter Quarter (1,2,3 or 4)'
	let $AsofQtr = $RptQtr
	evaluate $RptQtr
	  when = '1'
	    move '03' to $MonthCd
	    let #AsOfMonth = to_number($MonthCD)
	    let $AsOfMonth = $MonthCD
	    move '1st Quarter' to $Period
	    let #AsofQtr = 1
	    move 0 to #QTR
	    break
	  when = '2'
	    move '06' to $MonthCd
	    let #AsOfMonth = to_number($MonthCD)
	    let $AsOfMonth = $MonthCD
	    move '2nd Quarter' to $Period
	    move 0 to #QTR
	    break
	  when = '3'
	    move '09' to $MonthCd
	    let #AsOfMonth = to_number($MonthCD)
	    let $AsOfMonth = $MonthCD
	    move '3rd Quarter' to $Period
	    move 0 to #QTR
	    break
	  when = '4'
	    move '12' to $MonthCd
	    let #AsOfMonth = to_number($MonthCD)
	    let $AsOfMonth = $MonthCD
	    move '4th Quarter' to $Period
	    move 0 to #QTR
	    break
	  when-other
	end-evaluate
    end-while
  else
    while 1 = 1
    input $MonthCd maxlen=2 'Enter Month (1,2,etc)'
    let #AsofMonth = to_number($MonthCD)
      if #AsofMonth > 0
      AND #AsofMonth < 13
	move $MonthCd to $MonthCd  09
	do Get-Month-Name($MonthCd, $MonthName)
	move $MonthName to $Period
!	move 'Monthly ' to $ReportTitlePeriod
	let $AsOfMonth = $MonthCD
	move 'M' to $RptPeriod
	! display 'Monthly'
	break
      else
	display 'Month must be 1 - 12'
      end-if
    end-while

  end-if
end-procedure

begin-procedure Process-Run-Control
  move &RC_PAY.Balance_Year to $RptYear 9999
  move $RptYear to #RptYear
  move &RC_PAY.Balance_Qtr         to $RptQtr

  if &RC_PAY.Balance_Qtr > 0
    move 'Q'          to $RptPeriod
!    move 'Quarterly ' to $ReportTitlePeriod
    let #AsOfQTR = to_number($RptQtr)
    let $AsofQtr = $RptQtr
    evaluate $RptQtr
      when = '1'
	move '03' to $MonthCd
	let #AsOfMonth = to_number($MonthCD)
	let $AsOfMonth = $MonthCD
	move '1st Quarter' to $Period
	break
      when = '2'
	move '06' to $MonthCd
	let #AsOfMonth = to_number($MonthCD)
	let $AsOfMonth = $MonthCD
	move '2nd Quarter' to $Period
	break
      when = '3'
	move '09' to $MonthCd
	let #AsOfMonth = to_number($MonthCD)
	let $AsOfMonth = $MonthCD
	move '3rd Quarter' to $Period
	break
      when = '4'
	move '12' to $MonthCd
	let #AsOfMonth = to_number($MonthCD)
	let $AsOfMonth = $MonthCD
	move '4th Quarter' to $Period
	break
    end-evaluate
  else
    move &RC_PAY.Balance_Period to #MonthCd
    let #AsofMonth = #MonthCd
    move 'M'        to $RptPeriod
!    move 'Monthly ' to $ReportTitlePeriod
    ! display 'Monthly'
    if #MonthCd <> 0
      ! display 'If part'
      ! display #monthcd
      move #MonthCd to $MonthCd  09
      do Get-Month-Name($MonthCd, $MonthName)
      move $MonthName to $Period
      let $AsOfMonth = $MonthCD
 !SXK 12/10/98 Begin
    else
      ! display 'Else part'
      !AXL 01/17/2001 New logic to determine #AsOfMonth - Begin
      do Get-As-of-Month
      !let #asofmonth = to_number($AsOfMonth_dtu)
      let #asofmonth = &PCAL.BALANCE_PERIOD
      let #MonthCd = #AsOfMonth
      !let $AsOfMonth = $AsOfMonth_dtu
      let $AsOfMonth = to_char(#AsOfMonth)
      !AXL 01/17/2001 New logic to determine #AsOfMonth - End
      move 'M'          to $RptPeriod
      Evaluate #asofmonth
          when <= 3
              move '1' to $AsOfQtr
              break
          when <= 6
              move '2' to $AsOfQtr
              break
          when <= 9
              move '3' to $AsOfQtr
              break
          when-other
              move '4' to $AsOfQtr
      End-Evaluate
      !display '#asofmonth ' noline
      !display #asofmonth
    end-if
 !SXK 12/10/98 End
  end-if
  !SXK 12/16/1998 Begin
!  concat $ReportTitle with $ReportTitlePeriod
!  move $ReportTitlePeriod to $ReportTitle
!SXK 12/16/1998 End
end-procedure

!AXL 01/17/2001 New logic to determine #AsOfMonth - Begin
!***********************************************************************
Begin-Procedure Get-As-Of-Month
!***********************************************************************

Begin-SELECT DISTINCT

PCAL.BALANCE_PERIOD

FROM PS_PAY_CAL_BAL_ID PCAL,
     PS_PAY_CALENDAR PC
WHERE  PCAL.BALANCE_ID 	= $Calendar_Year_Id
    AND PCAL.COMPANY  	= PC.COMPANY
    AND PCAL.PAYGROUP 	= PC.PAYGROUP
    AND PCAL.PAY_END_DT = PC.PAY_END_DT
    AND PC.RUN_ID 	= $RC_PAY.Run_ID

end-select

end-procedure
!AXL 01/17/2001 New logic to determine #AsOfMonth - End

! GEX ISDVNPK 11/19/2007
!begin-heading 9 for-reports=(report-log)
!let $reportid = 'PY021LOG'
!let $reporttitle = 'Report Log'
! #include 'stdhdg02.sqc'
!
! print 'Message ' (+3,1)
! print '-' (+1,1,160) fill

!end-heading
! GEX ISDVNPK 11/19/2007


begin-heading 9 for-reports=(tax-report)
let $reportid = 'PY021TAX'
let $reporttitle = 'TAX SUMMARY REPORT'
let $reporttitle = $reporttitle||'-'||$RptYear
  #Include 'stdhdg02.sqc'  !standard heading 1
!  print $Period                                                    (+0,80)
!  print $RptYear                                                   (+0,92)
  print 'State  Locality'                                          (+3,1)
  print '-------  Withholding  --------'                           (0,24)
  print '---------------  Other Employee Taxes  --------------------' (0,56)
  print '-----------------  Employer Taxes  ------------------------' (0,117)
  print 'Loc Name/(County)'                                        (+1,1)
  print '      Gross             Tax  '                            (0,24)
  print 'Type    Rate       Gross             Tax           Excess  ' (0,56)
  print 'Type    Rate       Gross             Tax           Excess  ' (0,117)
  print 'Paygroup' (+1,8)
end-heading

begin-procedure Report
  !display #rptyear
  !display #asofmonth
  !display $asofmonth
  !display $asofqtr
 let #asofqtr = to_number($asofqtr)
  !display #asofqtr
  !display $rptyear
  !display $rptperiod

begin-SELECT
C.COMPANY   () on-break level=1 print=never save=$Previous_Company
					     before=Before-Company
					     AFTER=AFTER-COMPANY
C.STATE     () on-break level=2 print=never save=$Previous_State
C.LOCALITY  () on-break level=3 print=never save=$Previous_Locality
					     before=Before-State-Local
					     AFTER=AFTER-STATE-LOCAL
C.TAX_CLASS () on-break level=4 print=never  after=After-Class
C.BALANCE_QTR
C.BALANCE_PERIOD
C.TXGRS_MTD
C.TXGRS_QTD
C.TXGRS_YTD
C.TAX_MTD
C.TAX_QTD
C.TAX_YTD,
(C.NLGRS_MTD - C.TXGRS_MTD) &Excess_MTD
(C.NLGRS_QTD - C.TXGRS_QTD) &Excess_QTD
(C.NLGRS_YTD - C.TXGRS_YTD) &Excess_YTD

  move &C.Tax_Class to $priorTaxClass
  let #i = INSTR($Tax_Classes,&C.Tax_Class,1)
   display '**********************'
   display '#i:' noline
   display #i
   display 'State:' noline
   display &c.state
   display 'Locality:' noline
   display &c.locality
   display 'Tax Class:' noline
   display &c.tax_class
   display 'Period:' noline
   display &c.balance_period
   display '$asofmonth:' noline
   display $asofmonth
   display 'Qtr:' noline
   display &c.balance_qtr
   display 'Txgrs_ytd:' noline
   display &c.txgrs_ytd
   display &c.txgrs_qtd
   display &c.txgrs_mtd
   display &c.tax_ytd
   display &c.tax_qtd
   display &c.tax_mtd
   display '**********************'

! CWB 04/14/2000 Begin
  evaluate &c.tax_class
    when = 'P'
      if &c.locality = ' '
        else
  	  if &C.Balance_Period = to_number($AsOfMonth)
	    ARRAY-ADD &C.TxGrs_MTD &C.Tax_MTD to TAXARRAY(1) TXGRS(#I) TAX(#I)
	  end-if
	  if &C.Balance_Qtr = to_number($AsOfQtr)
	    ARRAY-ADD &C.TxGrs_QTD &C.Tax_QTD to TAXARRAY(2) TXGRS(#I) TAX(#I)
	  end-if
	  ARRAY-ADD &C.TxGrs_YTD &C.Tax_YTD to TAXARRAY(3) TXGRS(#I) TAX(#I)
       end-if
     when-other	
! CWB 04/14/2000 End 

  	if &C.Balance_Period = to_number($AsOfMonth)
	    ARRAY-ADD &C.TxGrs_MTD &C.Tax_MTD to TAXARRAY(1) TXGRS(#I) TAX(#I)
	  end-if
	  if &C.Balance_Qtr = to_number($AsOfQtr)
	    ARRAY-ADD &C.TxGrs_QTD &C.Tax_QTD to TAXARRAY(2) TXGRS(#I) TAX(#I)
	  end-if
	  ARRAY-ADD &C.TxGrs_YTD &C.Tax_YTD to TAXARRAY(3) TXGRS(#I) TAX(#I)

! CWB 04/14/2000 Begin 
  end-evaluate
! CWB 04/14/2000 End

  evaluate &C.Tax_Class
    when = 'E'     !Employer Disability
    when = 'F'     !Medicare
    when = '7'     !Addl Medicare !GEXPY_848_E158770_01 2013-09-25 Vahini Katta
    when = 'D'     !OASDI/Disability
    when = 'G'     !OASDI Tips                      SCM  04/10/2002  Tips
    when = 'M'     !New Jersey WDPF
    when = 'N'     !New Jersey HCSF
    when = 'T'     !Medicare Tips                   SCM  04/10/2002  Tips
    when = 'V'     !Employee Unemployment
    when = 'U'     !Employer Unemployment
    when = 'S'     !Special Unemployment
      if &C.Balance_Period = to_number($AsOfMonth)
	  ARRAY-ADD &Excess_MTD to TAXARRAY(1) EXCESS(#I)
      end-if
      if &C.Balance_Qtr = to_number($AsOfQtr)
	  ARRAY-ADD &Excess_QTD to TAXARRAY(2) EXCESS(#I)
      end-if
      ARRAY-ADD &Excess_YTD   to TAXARRAY(3) EXCESS(#I)
  end-evaluate

FROM  PS_TAX_BALANCE C
WHERE C.BALANCE_YEAR = #RptYear
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.TAX_CLASS     <> 'W'
!
! JDH - 08/19/99 - Begin
! AND C.BALANCE_PERIOD = #AsofMonth
  AND C.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  COMPANY         = C.COMPANY
         AND  EMPLID          = C.EMPLID
         AND  STATE           = C.STATE
         AND  LOCALITY        = C.LOCALITY
         AND  TAX_CLASS       = C.TAX_CLASS
         AND  BALANCE_ID      = C.BALANCE_ID
         AND  BALANCE_YEAR    = C.BALANCE_YEAR
         AND  BALANCE_PERIOD <= #AsofMonth)
! JDH - 08/19/99 - End
!
  AND C.COMPANY IN (SELECT c1.COMPANY
                     FROM PS_PAY_CALENDAR c1
                    WHERE [$run_id_criteria_2])
!AND C.LOCALITY IN ('O070275S','O022824C','O630393S') 
!AND (C.TAX_YTD <> 0 OR C.TAX_QTD <> 0 OR C.TAX_MTD <> 0)       ! ISDVMZA  07/03/2012   GEXPY848_130119            
ORDER BY C.COMPANY, C.STATE, C.LOCALITY, C.TAX_CLASS
end-SELECT
  if $Company = ''
    display 'No data selected'
    print 'No data selected'    (+5,1)  center
  end-if
  move 1 to #totalRow
  move 1 to #changeLevel
  move 'Y' to $End
  do Print-Totals
end-procedure

Begin-Procedure Current-Pay-Period-Info
#debug9 Show 'Current-Pay-Period-Info'

let #sub_txgrs_cur = 0
let #sub_tax_cur   = 0
let #sub_excess_cur = 0


 ! display $Previous_Company
 ! display $previous_state
 ! display $previous_locality
 ! display '$run_id_criteria  $run_id_criteria_1  $asofdate'    
 ! display $run_id_criteria
 ! display $run_id_criteria_1
 ! display $asofdate
 ! let $asofdate = '08-APR-2002'         TEMP FOR TESTING ONLY

Begin-Select
PT.PAYGROUP  () on-break level=5 print=never save=$Previous_Paygroup after=After-Paygroup
PK.DEPTID !Added 05/25/1999
PT.TAX_CLASS
PT.PAY_END_DT !Added 05/25/1999
PC.CHECK_DT !Added 05/25/1999 
Sum(PT.TXGRS_CUR) &PT.TXGRS_CUR
Sum(PT.TAX_CUR) &PT.TAX_CUR,
Sum(PT.NLGRS_CUR - PT.TXGRS_CUR) &Excess_CUR

  move &PT.Tax_Class to $priorTaxClass2
  let #i = INSTR($Tax_Classes,&PT.Tax_Class,1)
 ! display &pt.txgrs_cur
 ! display &pt.tax_cur
 
  !SXK 05/25/1999 Begin
  ! do format-voucher-info   ! GEX ISDVNPK 11/19/2007
  !SXK 05/25/1999 End
 
  ARRAY-ADD &PT.TxGrs_CUR &PT.Tax_CUR to TAXARRAY(4) TXGRS(#I) TAX(#I)
  ! display #i
 !SXK 12/16/1998 Begin

  ARRAY-ADD &PT.TxGrs_CUR &PT.Tax_CUR to CURARRAY(4) CURtxGRS(#I) CURTAX(#I)

 !SXK 12/16/1998 End

  evaluate &PT.Tax_Class
    when = 'E'     !Employer Disability
    when = 'F'     !Medicare
    when = '7'     !Addl Medicare !GEXPY_848_E158770_01 2013-09-25 Vahini Katta
    when = 'D'     !OASDI/Disability
    when = 'G'     !OASDI Tips                      SCM  04/10/2002  Tips
    when = 'M'     !New Jersey WDPF
    when = 'N'     !New Jersey HCSF
    when = 'T'     !Medicare Tips                   SCM  04/10/2002  Tips
    when = 'V'     !Employee Unemployment
    when = 'U'     !Employer Unemployment
    when = 'S'     !Special Unemployment
      ARRAY-ADD &Excess_CUR to TAXARRAY(4) EXCESS(#I)
      ARRAY-ADD &Excess_CUR to CURARRAY(4) curEXCESS(#I)
  end-evaluate

  evaluate $priorTaxClass2
    when = 'D'
      if $State <> '$U'
	let #TaxRt2 = #SDIRate * 100
	put 'SDI'   into TaxArray(0) TaxType(4)
        put 'SDI'   into CurArray(0) CurType(4)
      else
	let #TaxRt2 = #OASDIRate * 100
	put 'OASDI' into TaxArray(0) TaxType(4)
        put 'OASDI' into CurArray(0) CurType(4)
      end-if
    when = 'E'
      let #TaxRt2 = &Dis_Experience_Rt
    when = 'F'
      let #TaxRt2 = #MEDIRate * 100
    !GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Begins  
    when = '7'
      let #TaxRt2 = #AddlMEDIRate * 100
    !GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Ends
    when = 'G'                               	      	!SCM 03/20/2002   OASDI Tips     
      let #TaxRt2 = #OASDITipRate * 100			!SCM 03/20/2002   OASDI Tips
    when = 'R'
      let #TaxRt2 = 0
    when = 'S'
      let #TaxRt2 = #SpecialUIRate * 100
    when = 'T'                               	      	!SCM 03/20/2002   Medi Tips     
      let #TaxRt2 = #MEDITipRate * 100			!SCM 03/20/2002   Medi Tips
    when = 'U'
      if $State <> '$U'
	 let #TaxRt2 = &SUT_Experience_Rt
      else
	let #TaxRt2 = #FUTARate * 100
      end-if
    when = 'M'
      let #TaxRt2 = #WFDPRate * 100
    when = 'N'
      let #TaxRt2 = #HCSFRate * 100
    when = 'V'
      let #TaxRt2 = #EmployeeUIRate * 100
  end-evaluate

  let #i = INSTR($Tax_Classes,$priorTaxClass2,1)
  put #TaxRt2 into TaxArray(4) TaxRt(#i)

  let $TaxesFound2 = TRANSLATE($TaxesFound2,$priorTaxClass2,'x')
  ! display 'First taxesfound flag'
  ! display $taxesfound2
From   PS_PAY_CALENDAR        PC,
       PS_PAY_TAX             PT
!SXK 05/25/1999 Begin
,       PS_PAY_CHECK           PK
!sxk 05/25/1999 End
Where [$Run_ID_Criteria]
And    PC.COMPANY             = PT.COMPANY
And    PC.PAYGROUP            = PT.PAYGROUP
And    PC.PAY_END_DT          = PT.PAY_END_DT
And    PC.PAY_END_DT          =
      (Select Max(PC1.PAY_END_DT)
       From   PS_PAY_CALENDAR PC1
       Where  PC1.COMPANY         = PC.COMPANY
       And    PC1.PAYGROUP        = PC.PAYGROUP
       And    PC1.PAY_END_DT     <= $AsOfDate
       And   [$Run_ID_Criteria_1])
And    PT.COMPANY             = $Previous_Company
And    PT.STATE               = $Previous_State
And    PT.LOCALITY            = $Previous_Locality
!SXK 05/25/1999 Begin
AND    PK.COMPANY = PT.COMPANY
AND    PK.PAYGROUP = PT.PAYGROUP
AND    PK.PAY_END_DT = PT.PAY_END_DT
AND    PK.PAGE_NUM = PT.PAGE_NUM
AND    PK.LINE_NUM = PT.LINE_NUM
AND    PK.SEPCHK = PT.SEPCHK
AND    PK.OFF_CYCLE = PT.OFF_CYCLE
Group By PT.PAYGROUP, PK.DEPTID, PT.TAX_CLASS, PT.PAY_END_DT, PC.CHECK_DT !Added deptid, pay_end_dt, check_dt 05/25/99
Order By PT.PAYGROUP, PK.DEPTID, PT.TAX_CLASS, PT.PAY_END_DT, PC.CHECK_DT !Added deptid, pay_end_dt, check_dt 05/25/99
!SXK 05/25/1999 End
End-Select
End-Procedure

!SXK 05/25/1999 begin
begin-procedure format-voucher-info

  if rtrim($previous_locality,' ') <> ''
     if (&PT.TAX_CLASS = 'H')     !Withholding
       or (&PT.TAX_CLASS = 'P') !Occupational Tax
           do get-AP-vendor-info
           if rtrim(&ap.gex_ap_freq,' ') <> ''
           if $ap_info_found = 'Y' 
		if rtrim(&AP.AP_VENDOR_ID_10,' ') = ''	  !GEX-PY-SC00074444 Kundan kumar Yeedibilli
		!if rtrim(&APs.AP_VENDOR_ID_10,' ') = ''  !GEX-PY-SC00074444 Kundan kumar Yeedibilli
                   ! use-report report-log
                   add 1 to #error_count
	   	   print 'AP Vendor Id is blank for Deptid :' (+1,1)
		   print $prev_deptid ()
		   print '; No Voucher is created, please create it manually' ()
			use-report tax-report
                  goto exit-voucher
		end-if

              let $V_AP_VENDOR_ID = &AP.AP_VENDOR_ID_10||substr(to_char(&AP.ADDRESS_SEQ_NUM),1,3)    !GEX-PY-SC00074444 Kundan kumar Yeedibilli
            !  let $V_AP_VENDOR_ID = &APs.AP_VENDOR_ID_10||substr(to_char(&APs.ADDRESS_SEQ_NUM),1,3) !GEX-PY-SC00074444 Kundan kumar Yeedibilli
              let $V_DEPTID = &PK.DEPTID
              let $V_INVOICE_DT = &PT.PAY_END_DT
              let #V_GROSS_AMT = &PT.TAX_CUR
              let $V_ENTERED_DT = $AsOfDate
              if &PT.TAX_CLASS = 'H'
                 let $V_ACCOUNT = &AP.GL_LWT
              else
                 let $V_ACCOUNT = '222070'
              end-if
              evaluate &AP.GEX_AP_FREQ
                  when = 'W'
                     do convert-to-dtu-date(&pt.pay_end_Dt,$friday_dtu)
                     do dtu-add-days($friday_Dtu,6,$friday_dtu_dt)
		     do convert-from-dtu-date($friday_dtu_dt,$v_due_dt)
                 when = 'S'
                     do convert-to-dtu-date(&pc.check_dt,$friday_dtu)
                     let #date_string = substr($friday_dtu,9,2)
 		     if #date_string <= 15
 		        let $friday_dtu_dt = substr($friday_dtu,1,8)||'15'
                     else
	                do dtu-add-months($friday_dtu,1,$friday_dtu)                     
 			let $friday_dtu_dt = substr($friday_dtu,1,8)||'01'
                     end-if
		     do convert-from-dtu-date($friday_dtu_dt,$v_due_dt)

 		  when = 'M'
                     do convert-to-dtu-date(&Pc.CHECK_DT,$check_Dt)
                     do dtu-add-months($check_Dt,1,$due_dt)                     
                     let $due_month_begin = substr($due_dt,1,8)||'07'
                     do convert-from-dtu-date($due_month_begin,$v_due_dt)
                     
                  when = 'Q'
                     do convert-to-dtu-date(&Pc.CHECK_DT,$check_Dt)
                     let #month_dtu = substr($check_dt,6,2)
		     evaluate #month_dtu
			when <= 3
        			let $due_month_begin = substr($check_dt,1,5)||'04-07'		
				break
			when <= 6
   				let $due_month_begin = substr($check_dt,1,5)||'07-07'
				break
			when <= 9
				let $due_month_begin = substr($check_dt,1,5)||'10-07'		
				break
			when-other
				do dtu-add-months($check_dt,4,$due_dt)
				let $due_month_begin = substr($due_dt,1,5)||'01-07'
		     end-evaluate							
	
                     do convert-from-dtu-date($due_month_begin,$v_due_dt)

             end-evaluate
             ! do create-AP-voucher
             use-report tax-report             
             if $bu_found = 'N' and #V_GROSS_AMT <> 0
		      ! use-report report-log
		      add 1 to #error_count
		      print 'AP Voucher Creation failed:' (+1,1)
		      print '$V_AP_VENDOR_ID ' (+1,5)
		      print $V_AP_VENDOR_ID    ()
		      print '$V_DEPTID '       (+1,5)
		      print $V_DEPTID          ()
		      print '$V_ACCOUNT '      (+1,5)
		      print $V_ACCOUNT         ()
		      print '#V_GROSS_AMT '    (+1,5) 
		      print #V_GROSS_AMT       ()
		      print '$V_ENTERED_DT '   (+1,5)
		      print $V_ENTERED_DT      ()
		      print '$V_INVOICE_DT '   (+1,5)
		      print $V_INVOICE_DT      ()
		      print '$V_DUE_DT '       (+1,5)
		      print $V_DUE_DT          ()
		      use-report tax-report
	     end-if
          else
             ! use-report report-log
	     add 1 to #error_count
             print  'AP Information is not found' (+1,1)
             print  'Company ' (+1,5)
             print $previous_company ()
             print  'State ' (+1,5)
             print $previous_state ()
             print 'Locality ' (+1,5)
             print $previous_locality ()
             print 'vouchers are not created for this group; please create them manually' (+1,1)
		use-report tax-report
          end-if
         end-if
      end-if
   else  !State Vouchers
     if (&PT.TAX_CLASS = 'H') or (&PT.TAX_CLASS = 'U') or (&PT.TAX_CLASS = 'V')     !Withholding, unemployment ee, unemployment er
         if $previous_state <> '$U'
           if ($previous_state <> 'OH') or 
            (($previous_state = 'OH') and (substr(&PK.DEPTID,1,1) <> 'C'))

           do get-AP-vendor-info-state
           if rtrim(&aps.gex_ap_freq,' ') <> '' and &aps.eff_status = 'A'
           if $ap_info_found = 'Y'
		if rtrim(&APs.AP_VENDOR_ID_10,' ') = ''
			! use-report report-log
			add 1 to #error_count
		   print 'AP Vendor Id is blank for Deptid :' (+1,1)
		   print $prev_deptid ()
		   print '; No Voucher is created, please create it manually' ()
			use-report tax-report
                  goto exit-voucher
		end-if

              let $V_AP_VENDOR_ID = &APs.AP_VENDOR_ID_10||substr(to_char(&APs.ADDRESS_SEQ_NUM),1,3)
              let $V_DEPTID = &PK.DEPTID
              let $V_INVOICE_DT = &PT.PAY_END_DT
              let #V_GROSS_AMT = &PT.TAX_CUR
              let $V_ENTERED_DT = $AsOfDate
	      evaluate &PT.TAX_CLASS 
		WHEN = 'H'
                  let $V_ACCOUNT = &APs1.GL_SWT
                WHEN = 'V'
		   let $V_ACCOUNT = &aps1.gl_sut
		when = 'U'
		   let $V_ACCOUNT = &aps1.gl_sut_er
              end-evaluate
              evaluate &APs.GEX_AP_FREQ
                  when = 'W'
                     do convert-to-dtu-date(&pt.pay_end_Dt,$friday_dtu)
                     do dtu-add-days($friday_Dtu,6,$friday_dtu_dt)
		     do convert-from-dtu-date($friday_dtu_dt,$v_due_dt)
                 when = 'S'
                     do convert-to-dtu-date(&pc.check_dt,$friday_dtu)
                     let #date_string = substr($friday_dtu,9,2)
 		     if #date_string <= 15
 		        let $friday_dtu_dt = substr($friday_dtu,1,8)||'15'
                     else
	                do dtu-add-months($friday_dtu,1,$friday_dtu)                     
 			let $friday_dtu_dt = substr($friday_dtu,1,8)||'01'
                     end-if
		     do convert-from-dtu-date($friday_dtu_dt,$v_due_dt)

 		  when = 'M'
                     do convert-to-dtu-date(&Pc.CHECK_DT,$check_Dt)
                     do dtu-add-months($check_Dt,1,$due_dt)                     
                     let $due_month_begin = substr($due_dt,1,8)||'07'
                     do convert-from-dtu-date($due_month_begin,$v_due_dt)
                     
                  when = 'Q'
                     do convert-to-dtu-date(&Pc.CHECK_DT,$check_Dt)
                     let #month_dtu = substr($check_dt,6,2)
		     evaluate #month_dtu
			when <= 3
        			let $due_month_begin = substr($check_dt,1,5)||'04-07'
				break
			when <= 6
   				let $due_month_begin = substr($check_dt,1,5)||'07-07'
				break
			when <= 9
				let $due_month_begin = substr($check_dt,1,5)||'10-07'		
				break
			when-other
				do dtu-add-months($check_dt,4,$due_dt)
				let $due_month_begin = substr($due_dt,1,5)||'01-07'
		     end-evaluate							
	
                     do convert-from-dtu-date($due_month_begin,$v_due_dt)

             end-evaluate
             ! do create-AP-voucher
             use-report tax-report             
             if $bu_found = 'N' and #V_GROSS_AMT <> 0
	      ! use-report report-log
	      add 1 to #error_Count
	      print 'AP Voucher Creation failed:' (+1,1)
	      print '$V_AP_VENDOR_ID ' (+1,5)
	      print $V_AP_VENDOR_ID    ()
	      print '$V_DEPTID '       (+1,5)
	      print $V_DEPTID          ()
	      print '$V_ACCOUNT '      (+1,5)
	      print $V_ACCOUNT         ()
	      print '#V_GROSS_AMT '    (+1,5) 
	      print #V_GROSS_AMT       ()
	      print '$V_ENTERED_DT '   (+1,5)
	      print $V_ENTERED_DT      ()
	      print '$V_INVOICE_DT '   (+1,5)
	      print $V_INVOICE_DT      ()
	      print '$V_DUE_DT '       (+1,5)
	      print $V_DUE_DT          ()
	      use-report tax-report	  
	   end-if

         end-if
        end-if
       end-if
      end-if
      end-if
  end-if
exit-voucher:

   let $V_AP_VENDOR_ID = ' '
   let $V_DEPTID = ' '
   let $V_INVOICE_DT = ' '
   let #GROSS_AMT = 0
   let $V_ENTERED_DT = ' '
   let $V_ACCOUNT = ' '
   let $V_DUE_DT = ' '

end-procedure
!SXK 05/25/1999 End


begin-procedure Before-Company
  move &C.Company to $Company
  do Get-Company-Data
end-procedure

begin-procedure After-Company
  move 2 to #totalRow
  move 2 to #changeLevel
  do Print-Totals
  new-page
end-procedure

begin-procedure Before-State-Local
  let $State = rtrim(&C.State, ' ')
  do Get-State-Tax-Data
  Show '#OASDITipRate:  = ' #OASDITipRate
  Show '#MEDITipRate :  = ' #MEDITipRate    

  if rtrim(&C.State, ' ') = '$U'
    print 'FEDERAL'          (1,1)
  else
 !   if #total_MTD <> 0 and #total_QTD <> 0 and #total_YTD <> 0				!ISDVAKG
    print &C.State           (1,1,2)
    print &C.Locality        (0,+2)
    if RTRIM(&C.Locality, ' ') <> ''
      move &C.Locality to $Locality
      do Get-Local-Tax-Data
      print $LocalName   (2,1,18)
      let $field = '(' || RTRIM($LocalCnty, ' ') || ')'
      print $field           (3,1,20)
  !   end-if 																													!ISDVAKG
    end-if
  end-if
end-procedure

begin-procedure After-State-Local
  let $paygroup_cur = 'N'
  do Print-State-Local
  do Current-Pay-Period-Info
  next-listing skiplines=1
 !SXK 12/16/1998 Begin
  if $paygroup_cur = 'Y'
     do After-Cur
     next-listing skiplines=1
  end-if
 !SXK 12/16/1998 End 
end-procedure

begin-procedure After-Class
  evaluate $priorTaxClass
    when = 'D'
      if $State <> '$U'
	let #TaxRt = #SDIRate * 100
	put 'SDI'   into TaxArray(0) TaxType(4)
      else
	let #TaxRt = #OASDIRate * 100
	put 'OASDI' into TaxArray(0) TaxType(4)
      end-if
    when = 'G'                               	      	!SCM 03/20/2002   OASDI Tips
      let #TaxRt = #OASDITipRate * 100			!SCM 03/20/2002   OASDI Tips
    when = 'E'
      let #TaxRt = &Dis_Experience_Rt
    when = 'F'
      let #TaxRt = #MEDIRate * 100
    !GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Begins  
    when = '7'
      let #TaxRt = #AddlMEDIRate * 100
    !GEXPY_848_E158770_01 2013-09-25 Vahini Katta - Ends  
    when = 'R'
      let #TaxRt = 0
    when = 'S'
      let #TaxRt = #SpecialUIRate * 100
    when = 'T'                               	      	!SCM 03/20/2002   Medi Tips
      let #TaxRt = #MEDITipRate * 100			!SCM 03/20/2002   Medi Tips
    when = 'U'
      if $State <> '$U'
	let #TaxRt = &SUT_Experience_Rt
      else
	let #TaxRt = #FUTARate * 100
      end-if
    when = 'M'
      let #TaxRt = #WFDPRate * 100
    when = 'N'
      let #TaxRt = #HCSFRate * 100
    when = 'V'
      let #TaxRt = #EmployeeUIRate * 100
  end-evaluate

  let #i = INSTR($Tax_Classes,$priorTaxClass,1)
  put #TaxRt into TaxArray(1) TaxRt(#i)
  put #TaxRt into TaxArray(2) TaxRt(#i)
  put #TaxRt into TaxArray(3) TaxRt(#i)

  let $TaxesFound = TRANSLATE($TaxesFound,$priorTaxClass,'x')
end-procedure

begin-procedure After-Paygroup
#debug9 Show 'After-Paygroup'
  ! display $taxesfound2
  move 1 to #i
  while #i <= #Num_Tax_Classes
    let #Section = TO_NUMBER(SUBSTR($TaxSection,#i,1))
    if SUBSTR($TaxesFound2,#i,1) = 'x'
      array-add 1 to SectCols(#Section) Count
    end-if
    add 1 to #i
  end-while

  move 1 to #i
  while #i <= 3
    get #Count from SectCols(#i) Count
    if #Count > #MaxCount
      let #MaxCount = #Count
    end-if
    put 0 into SectCols(#i) Count
    add 1 to #i
  end-while

  let #line = 1
  let $paygroup_cur = 'Y'
  print $Previous_Paygroup (#line,8)
  print 'CUR' (#line,20)

  move 0 to #priorSection
  move 1 to #i
  while #i <= #Num_Tax_Classes
    ! display 'In the while'
    if SUBSTR($TaxesFound2,#i,1) = 'x'
      ! display 'Inside the loop'
      let #Section = TO_NUMBER(SUBSTR($TaxSection,#i,1))
      if #Section <> #priorSection
        move 1 to #line
      end-if
      move #Section to #priorSection
      get #TypeCol #RateCol #GrossCol #TaxCol #ExcessCol
        from SectCols(#Section) TypeCol RateCol GrossCol TaxCol ExcessCol
      get $TaxType from TaxArray(0) TaxType(#i)
      get #TaxRt #TxGrs #Tax #Excess
        from TaxArray(4) TaxRt(#i) TxGrs(#i) Tax(#i) Excess(#i)


      if RTRIM($TaxType,' ') <> ''
        if $TaxType <> 'EIC'
          print $TaxType     (#line,#TypeCol)
        else
          print '(EIC)'      (#line,#GrossCol)
        end-if
      end-if

      if #RateCol <> 0
        do Format-Number(#TaxRt, $out, '99.999')
        print $out         (#line,#RateCol)
      end-if

      if #GrossCol <> 0
        if $TaxType <> 'EIC'
          do Format-Number(#TxGrs, $out, 'b99,999,999.99mi')
          print $out         (#line,#GrossCol)
        end-if
      end-if

      if #TaxCol <> 0
        do Format-Number(#Tax, $out, 'b99,999,999.99mi')
        print $out         (#line,#TaxCol)
        array-add #Tax to Totals(2) total_CUR(#Section)
      end-if

      if #ExcessCol <> 0
        do Format-Number(#Excess, $out, 'b99,999,999.99mi')
        print $out         (#line,#ExcessCol)
      end-if

      put 0 0 0 0
        into TaxArray(4) TaxRt(#i) TxGrs(#i) Tax(#i) Excess(#i)
      add 1 to #line
    end-if
    add 1 to #i
  end-while
!SXK 12/16/1998 Begin
!  move 0 to $MaxCount
!  let $TaxesFound2  = $Tax_Classes
!SXK 12/16/1998 End

  next-listing skiplines=0 need=2
end-procedure

begin-procedure After-Cur
#debug9 Show 'After-Cur'

  move 1 to #j
  while #j <= #Num_Tax_Classes
    let #Section = TO_NUMBER(SUBSTR($TaxSection,#j,1))
    if SUBSTR($TaxesFound2,#j,1) = 'x'
      array-add 1 to SectCols(#Section) Count
    end-if
    add 1 to #j
  end-while

  move 1 to #j
  while #j <= 3
    get #Count from SectCols(#j) Count
    if #Count > #MaxCount
      let #MaxCount = #Count
    end-if
    put 0 into SectCols(#j) Count
    add 1 to #j
  end-while

  let #line = 1
  Print 'Company' (#line,1) 
  print $company (#line,10)
  print 'CUR' (#line,20)

  move 0 to #priorSection
  move 1 to #j
  while #j <= #Num_Tax_Classes
    if SUBSTR($TaxesFound2,#j,1) = 'x'
      let #Section = TO_NUMBER(SUBSTR($TaxSection,#j,1))
      if #Section <> #priorSection
        move 1 to #line
      end-if
      move #Section to #priorSection
      get #TypeCol #RateCol #GrossCol #TaxCol #ExcessCol
        from SectCols(#Section) TypeCol RateCol GrossCol TaxCol ExcessCol
      get $TaxType from CurArray(0) CurType(#j)
      get #TxGrs #Tax #Excess
        from CurArray(4) CurTxGrs(#j) CurTax(#j) CurExcess(#j)

#debug8 show $Previous_Company
#debug8 show $Previous_State
#debug8 show $Previous_Locality
#debug8 show $Previous_Paygroup
#debug8 show #TaxType
#debug8 show #TaxRt
#debug8 show #TxGrs
#debug8 show #Tax
#debug8 show #Excess
#debug8 show '-------------------------'

      if RTRIM($TaxType,' ') <> ''
        if $TaxType <> 'EIC'
          print $TaxType     (#line,#TypeCol)
        else
          print '(EIC)'      (#line,#GrossCol)
        end-if
      end-if

!      if #RateCol <> 0
!        do Format-Number(#TaxRt, $out, '99.999')
!        print $out         (#line,#RateCol)
!      end-if

      if #GrossCol <> 0
        if $TaxType <> 'EIC'
          do Format-Number(#TxGrs, $out, 'b99,999,999.99mi')
          print $out         (#line,#GrossCol)
        end-if
      end-if
!SXK 12/20/998 Begin No need to add to totals array agian here, it will
! be done at paygroup sub total level
      if #TaxCol <> 0
        do Format-Number(#Tax, $out, 'b99,999,999.99mi')
        print $out         (#line,#TaxCol)
!        array-add #Tax to Totals(2) total_CUR(#Section)
      end-if
!SXK 12/20/998 End

      if #ExcessCol <> 0
        do Format-Number(#Excess, $out, 'b99,999,999.99mi')
        print $out         (#line,#ExcessCol)
      end-if

      put 0 0 0
        into CurArray(4) CurTxGrs(#j) CurTax(#j) CurExcess(#j)
      add 1 to #line
    end-if
    add 1 to #j
  end-while

  move 0 to $MaxCount
  let $TaxesFound2  = $Tax_Classes

  next-listing skiplines=0 need=2

end-procedure
!SXK 12/16/1998 End

begin-procedure Print-State-Local
#debug9 Show 'Print-State-Local'
  move 1 to #i
  while #i <= #Num_Tax_Classes
    let #Section = TO_NUMBER(SUBSTR($TaxSection,#i,1))
    if SUBSTR($TaxesFound,#i,1) = 'x'
      array-add 1 to SectCols(#Section) Count
    end-if
    add 1 to #i
  end-while

  move 1 to #i
  while #i <= 3
    get #Count from SectCols(#i) Count
    if #Count > #MaxCount
      let #MaxCount = #Count
    end-if
    put 0 into SectCols(#i) Count
    add 1 to #i
  end-while

  let #ToDate = COND($RptPeriod = 'M',1,2)
  while #ToDate <= 3
    evaluate #ToDate
      when = 1
	move 'MTD' to $ToDate
	let #startline = 1
      when = 2
	move 'QTD' to $ToDate
	if $RptPeriod = 'M'
	  let #startline = 1 + #MaxCount
	else
	  let #startline = 1
	end-if
      when = 3
	move 'YTD' to $ToDate
	if $RptPeriod = 'M'
	  let #startline = 1 + (2 * #MaxCount)
	else
	  let #startline = 1 + #MaxCount
	end-if
    end-evaluate
   show #total_MTD 
 !  If #total_MTD <> 0   													!ISDVAKG
    print $ToDate (#startline,20)
 !  End-If
    move 0 to #priorSection
    move 1 to #i
    while #i <= #Num_Tax_Classes
      if SUBSTR($TaxesFound,#i,1) = 'x'
	let #Section = TO_NUMBER(SUBSTR($TaxSection,#i,1))
	if #Section <> #priorSection
	  move #startline to #line
	end-if

	move #Section to #priorSection
	get #TypeCol #RateCol #GrossCol #TaxCol #ExcessCol
	  from SectCols(#Section) TypeCol RateCol GrossCol TaxCol ExcessCol
	get $TaxType from TaxArray(0) TaxType(#i)
	get #TaxRt #TxGrs #Tax #Excess
	  from TaxArray(#ToDate) TaxRt(#i) TxGrs(#i) Tax(#i) Excess(#i)

	if RTRIM($TaxType,' ') <> ''
	  if $TaxType <> 'EIC'
	    print $TaxType     (#line,#TypeCol)
	  else
	    print '(EIC)'      (#line,#GrossCol)
	  end-if
	end-if

	if #RateCol <> 0
	  do Format-Number(#TaxRt, $out, '99.999')
	  print $out         (#line,#RateCol)
	end-if

	if #GrossCol <> 0
	  if $TaxType <> 'EIC'
	    do Format-Number(#TxGrs, $out, 'b99,999,999.99mi')
	    print $out         (#line,#GrossCol)
	  end-if
	end-if

	if #TaxCol <> 0
	  do Format-Number(#Tax, $out, 'b99,999,999.99mi')
	  print $out         (#line,#TaxCol)
	  evaluate #ToDate
	    when = 1
	      array-add #Tax to Totals(2) total_MTD(#Section)
	    when = 2
	      array-add #Tax to Totals(2) total_QTD(#Section)
	    when = 3
	      array-add #Tax to Totals(2) total_YTD(#Section)
	  end-evaluate
	end-if

	if #ExcessCol <> 0
	  do Format-Number(#Excess, $out, 'b99,999,999.99mi')
	  print $out         (#line,#ExcessCol)
	end-if

	put 0 0 0 0
	    into TaxArray(#ToDate) TaxRt(#i) TxGrs(#i) Tax(#i) Excess(#i)
	add 1 to #line
      end-if
      add 1 to #i
    end-while
    add 1 to #ToDate
  end-while

  move 0 to #MaxCount
  let $TaxesFound  = $Tax_Classes

  next-listing skiplines=1 need=6
end-procedure

begin-procedure Print-Totals
 Show 'Print-Totals'
  position (+1)
  while #totalRow >= #changeLevel
    let #rollRow = #totalRow - 1
    get $TotalName from Totals(#totalRow) TotalName
    print $TotalName (+2,7)
    if $RptPeriod = 'M'
      print 'MTD'     (0,23)
      print 'QTD'     (+1,23)
      print 'YTD'     (+1,23)
      print 'CUR'     (+1,23)
      position (-3)
    else
      print 'QTD'     (0,23)
      print 'YTD'     (+1,23)
      print 'CUR'     (+1,23)
      position (-2)
    end-if
    move 1 to #i
    while #i <= 3
      move 0 to #subLine
      get #startCol from Totals(0) startCol(#i)
      if $RptPeriod = 'M'
	  get #total_MTD from Totals(#totalRow) total_MTD(#i)
	  do Format-Number(#total_MTD, $out, 'b99,999,999.99mi')
	  print $out (+#subLine,#startCol)
	  move 1 to #subLine
      end-if
      get #total_QTD from Totals(#totalRow) total_QTD(#i)
      do Format-Number(#total_QTD, $out, 'b99,999,999.99mi')
      print $out (+#subline,#startCol)
      move 1 to #subLine
      get #total_YTD from Totals(#totalRow) total_YTD(#i)
      do Format-Number(#total_YTD, $out, 'b99,999,999.99mi')
      print $out (+#subLine,#startCol)
      move 1 to #subLine
      get #total_CUR from Totals(#totalRow) total_CUR(#i)
      do Format-Number(#total_CUR, $out, 'b99,999,999.99mi')
      print $out (+#subLine,#startCol)
      array-add #total_MTD #total_QTD #total_YTD #total_CUR
	  to Totals(#rollRow) total_MTD(#i) total_QTD(#i) total_YTD(#i) total_CUR(#i)
      put 0 0 0 0
	  into Totals(#totalRow) total_MTD(#i) total_QTD(#i) total_YTD(#i) total_CUR(#i)
      add 1 to #i
      if #i <= 3
	  if $RptPeriod = 'M'
	    position (-3)
	  else
	    position (-2)
	  end-if
      end-if
    end-while
    subtract 1 from #totalRow
  end-while
  if $End = 'Y'
    do Reset
  end-if
end-procedure

!sxk 05/25/1999 Begin
begin-procedure get-ap-vendor-info
let $aP_info_found = 'N'
let $ap_frequency = ' '
begin-select
AP.AP_VENDOR_ID_10
AP.ADDRESS_SEQ_NUM
AP.GEX_AP_FREQ
AP.GL_LWT
  let $ap_info_found = 'Y'
  move &ap.gex_ap_freq to $ap_frequency
FROM PS_CO_LOCALTAX_TBL AP
WHERE AP.COMPANY  = $Previous_Company
  AND AP.STATE    = $Previous_State
  AND AP.LOCALITY = $Previous_Locality
  AND AP.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_CO_LOCALTAX_TBL
       WHERE  COMPANY  = $previous_Company
         AND  STATE    = $previous_State
         AND  LOCALITY = $previous_Locality
         AND  EFFDT   <= $AsOfDate)
end-SELECT 
end-procedure
!SXK 05/25/1999 End

!sxk 05/25/1999 Begin
begin-procedure get-ap-vendor-info-state
let $aP_info_found = 'N'
let $ap_frequency = ' '
begin-select
APs.AP_VENDOR_ID_10
APs.ADDRESS_SEQ_NUM
APs.GEX_AP_FREQ
APs.TAX_CLASS
APs.eff_status
APs1.GL_SWT
APS1.GL_SUT
APS1.GL_SUT_ER

 if &APs.eff_status = 'A'
   let $ap_info_found = 'Y'
   move &aps.gex_ap_freq to $ap_frequency
 end-if

FROM PS_GEX_STATETAX_AP APs, PS_CO_STATETAX_TBL APS1
WHERE APS.COMPANY  = $Previous_Company
  AND APS.STATE    = $Previous_State
  AND APs.tax_class = &pt.tax_class
  AND APS.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_GEX_STATETAX_AP
       WHERE  COMPANY  = $previous_Company
         AND  STATE    = $previous_State
! 08/18/2000
	 and  tax_class = &pt.tax_class
!        and eff_status = 'A'
! 08/18/2000
         AND  EFFDT   <= $AsOfDate)
  AND APS.COMPANY  = APS1.COMPANY
  AND APS.STATE = aPS1.STATE
  AND APS1.EFFDT = (SELECT MAX(EFFDT)
			FROM PS_CO_STATETAX_TBL
			WHERE COMPANY = APS1.COMPANY
			AND STATE = APS1.STATE
			AND EFFDT <= $AsOfDate)
end-SELECT 
end-procedure
!SXK 05/25/1999 End

!*********************************************************************
!Displays the error messages and stops execution
!*********************************************************************
 
begin-procedure SQL-Error-Found($Proc_Name) 

  display 'SQL Error in ' 
  display $Proc_Name 
  display $_sql-error
  display 'sql-status:' 
  display #_sql-status 

  STOP

end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'stdinit.sqc'   !Standard-Initialization procedure
#Include 'getqtrcd.sqc'  !Get-Quarter-Month-Codes procedure
#Include 'getrptpd.sqc'  !Get-Report-Period procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure    
#Include 'getlcdta.sqc'  !Get-Local-Tax-Data procedure
#Include 'getmonnm.sqc'  !Get-Month-Name procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'
#Include 'number.sqc'    !Routines to format numbers

#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrctl2.sqc'  !Process Scheduler Run Controls
!#include 'gexpyvhu.sqc'  !Creates AP Voucher information
#include 'sqrtrans.sqc'
