!***********************************************************************
!  GEX960LC:  Create W-2 Print File for locals, 4 EEs to a page.       *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of PeopleSoft, Inc.; it is not to be copied, reproduced, or          *
! transmitted in any form, by any means, in whole or in part,          *
! nor is it to be used for any purpose other than that for             *
! which it is expressly provided under the applicable license          *
! agreement.                                                           *
!                                                                      *
! Copyright (c) 1988-2003 PeopleSoft, Inc. All Rights Reserved.        *
!                                                                      *
!***********************************************************************
!                                                                      *
!                $Date:  2003/1/7:18:44:32                             !
!             $Release:  HRMS830                                       !
!            $Revision:  108                                           !
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!            MVA       11/15/2011     Re-design of GEX960LC to fix Sort*
!                                     The old version is GEX960LC.old  *
!                                                                      *
!***********************************************************************
!***********************************************************************
! For the normal W2 runs, uncomment the logic for the postage information.
! For reprints, after the main run is complete, comment out the        *
! postage information.                                                 *
! Lines for postage have the comment !POSTAGE at the end of the line.  *
! There are 24 such lines that need to be commented/uncommented.       *
! Make sure you catch the font changes for the postage.  Main address  *
! is in 12 point, postage is in 5.                                     *
! Locate the address info by searching for KMW.                        *
!***********************************************************************
!                                                                      *
!  Notes:  01/24/2012  -- Modify the program to do the following:      *
!          1.  Remove the use of custom run control table.             *
!          2.  Verify the box printing -- compare to TAX960US.         *
!                                                                      *
!                                                                      *
!***********************************************************************


#DEFINE WCOLUMN1 5      !Set up first print column of W2 form
#DEFINE WCOLUMN2 42     !Set up mid-point column of W2 form
#DEFINE SIZE_OF_FONT 8
#DEFINE TAX960US        !Used for Tax Locality Sort
#include 'setenv.sqc'   !Set environment
#define PRINTER_TYPE LINEPRINTER
!#define debug1 1        !Level 1 debug
!#define debug2 2        !Level 2 debug

begin-setup

#include 'prtforml.sqc' ! Form Layout selection
                        ! Edit this file to direct output to printer
#include 'setupdb.sqc'  ! Database specific setup

!
! The escape codes, unless otherwise noted, are for PCL-compatible printers
! being used as a line printer. If the printer you are using is not
! PCL-compatible, then these codes will not work as intended. Please refer
! to the user's manual for your printer to determine the correct codes.
!

#ifndef EBCDIC                       ! If not running on IBM MVS or AS/400

#if {PRINTER_TYPE} = 'LINEPRINTER'
declare-printer LP-definition
  type=LINEPRINTER
  init-string=<27>E<27>(0N<27>&l8D<27>&l0E<27>&l88F
!                 |      |      |       |       |
!                 |      |      |       |       |
!                 |      |      |       |        --> 88 text lines
!                 |      |      |        --> top margin = 0 lines
!                 |      |       --> 8 lines per inch
!                 |       --> ISO 8859-1 symbol set
!                  --> Reset
end-declare
#endif

#else                                ! EBCDIC Ports

#if {PRINTER_TYPE} = 'LINEPRINTER'
declare-printer LP-definition
  type=LINEPRINTER

! If you intended to download the output file created by SQR to print it on a
! PCL-compatible printer attached to an ASCII-bases operating system, such as
! Windows or Unix, use the following escape codes.
!
! Note: These codes may not work as intended if the output is copied to a
!       printer defined as a directly-attached printer or a remote network
!       printer, even if the printer is PCL-compatible
!
! init-string=<39>E<39>(0N<39>&l8D<39>&l0E<39>&l88F
!             |    |       |       |       |
!             |    |       |       |        --> 88 text lines
!             |    |       |        --> top margin = 0 lines
!             |    |        --> 8 lines per inch
!             |     --> ISO 8859-1 symbol set
!              --> Reset
!
! If you intended to copy the output file created by SQR to a printer defined as
! a directly-attached printer or a remote network printer on EBCDIC-bases operating
! systems, such as MVS or OS/400, use this init-string
!
! THIS IS THE DEFAULT FOR EBCDIC SYSTEMS
!
  init-string=<241>
!             |
!              --> FCFC "1" for top of page
!

end-declare
#endif

#endif

#if {PRINTER_TYPE} = 'POSTSCRIPT'
declare-printer PS-definition
  type={PRINTER_TYPE}
  point-size=12
  font=3                                 ! Courier font

end-declare
#endif

#if {PRINTER_TYPE} = 'HPLASERJET'
declare-printer HP-definition
  type={PRINTER_TYPE}
  symbol-set=0U                          ! ASCII symbol set
  point-size=12
  pitch=10
  font=3

end-declare
#endif

end-setup

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
#ifdef debug1
  show 'Procedure = Init-Report'
#endif

  display 'Printing Locality W-2'
  date-time () hh:mi:ss &t1
  display 'Start at: '  noline
  display &t1

    let #StdFont     = 5                  !Times Roman proportional
    let #StmtPntSize = 7                  !statement point-size
    let #ChkPntSize  = 5                  !check point-size
    encode '<27>&l0L' into $perforation_skip
    encode '<27>&l4H' into $chktray
    encode '<27>(<27>(s1p12v0s0b4113t' into $linedraw
    encode '<27>(<27>(s0p12h0s0b4099T' into $twelvepoint
    encode '<27>(<27>(s1p7v0s0b4101T' into $fivepoint
    encode '<27>(<27>(s1p12v0s3b4101T' into $bold
    encode '<27>(<27>(s0p8h0s0b4099T'  into $eightpoint

    encode '<27>&l3A' into $legal
    encode '<27>E' into $reset
    encode '<27>&l8C' into $verticalmotion
    encode '<27>&l8.25D' into $linespace    !tweak this for alignment
    encode '<27>(s12H' into $horizontal     !controls font size
    encode '<27>&l0E' into $topmargin
    encode '<27>&a1L' into $leftmargin
    encode '<27>&l115F' into $pagelength
    encode '<27>&k2G'   into $lineterm
    encode '<27>&l0O'  into $portrait
    print $reset () code

    print $perforation_skip () code
    print $pagelength () code
    print $legal () code
    print $twelvepoint () code

    print $portrait () code

    print $linespace () code
    print $topmargin () code
    print $horizontal () code
    print $leftmargin () code
    print $lineterm   () code

#ifdef debug1
    Show 'printing top Margin '
#endif

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Initialization

  if $PRCS_Process_Instance = ''
     do Prompts
     if $SortCode1 = '7'
     and #Locals_Per_Form <> 1
       display '******************************************************'
       display 'Locals Per Form specifed on Tax Form Print Parameters '
       display 'Panel must be 1 for the Locality sort within State    '
       display 'to execute.                                           '
       display '******************************************************'
       display 'Locals Per Form ' noline
       display #Locals_Per_Form
       stop
     end-if
  else
     do Select-US-Year-End-Parameters
     do Convert-Parameters
  end-if
  move $RC_US_YE.Reprint_Descr to $Reprint_Descr

  if &TX.Align_Count > 0
    do Print-Alignment-Forms
  end-if

  let $MultiFormDescr   = ' '
  if $Reprint_Descr = 'R'
    move 'REISSUED STATEMENT' to $ReprintDescr
    move 'REISSUED '          to $ReprintDescr1
    move 'STATEMENT'          to $ReprintDescr2
  else
    if $Reprint_Descr = 'C'
      move 'CORRECTED         ' to $ReprintDescr
      move 'CORRECTED'          to $ReprintDescr1
      move '         '          to $ReprintDescr2
    else
      move '                  ' to $ReprintDescr
      move '         '          to $ReprintDescr1
      move '         '          to $ReprintDescr2
    end-if
  end-if

  do Report-File-Create
  if &TX.Align_Count > 0
    add #Align_Count to #T_Count
  end-if

  if $EE_Selected = 'Y'
    do Delete-Sel-Employees-Table
  end-if

  if  $Company_Selected = 'Y'
    do  Delete-Sel-Company-Table
  end-if

  if $EmployeeFound = 'N'
    display ' '
    display '****** No Employee Records Selected ******'
    display ' '
    new-page
    print '********************************'  (+3,1)
    print '  No Employee Records Selected  '  (+1,1)
    print '********************************'  (+1,1)
  else
    display ''
    display 'Upon successful conclusion of this program, one file will have'
    display 'been created:'
    display ''
    display '{FILEPREFIX}GEX960US.LIS contains print images for paper W-2s.'
    display ''

!    if $SortCode1 <> '7'
      do Print-Grand-Totals
!    end-if
  end-if

  date-time () hh:mi:ss &t2
  display 'End at: '  noline
  display &t2
end-procedure

begin-procedure Initialization
#ifdef debug1
   show 'Procedure = Initialization'
#endif

!  Short edge offset - negative or positive decipoints
!     Modify the codes below to adjust up or down -
!     PCL code &lnnZ not effective on HP4000 printers

  let $LP6 = ''
  let $LP8L = ''
  let $LP8 = ''
#if {PRINTER_TYPE} = 'LINEPRINTER'
#ifndef EBCDIC
  encode '<27>&l6D<27>&l66F' into $LP6
  encode '<27>&l3A<27>&l104F<27>&l50Z' into $LP8L
  encode '<27>&l5Z' into $LP8
#else
!  encode '<39>&l6D<39>&l66F' into $LP6
!  encode '<39>&l3A<39>&l104F<39>&l50Z' into $LP8L
!  encode '<39>&l5Z' into $LP8
#endif
#endif

  do Get-Current-DateTime
  move '1' to $MMLZero
  move '1' to $Year4
  do Format-DateTime($AsOfToday, $910Date, {DEFYMD},'','')

  move $910Date to $AsOfYear xxxx   !extract the current year
  move $AsOfYear  to #AsOfYear
  move #AsOfYear  to #saveAsOfYear
  subtract 1    from #AsOfYear

  do Get-Tax-Reporting-Run-Controls

  if RTRIM(&TX.Form_ID,' ') = ''
    display '*********************************************************'
    display 'Form ID not specified on Tax Reporting Parameters Panel  '
    display 'Program stopped'
    display '*********************************************************'
    stop
  end-if

  move &TX.Employees_Per_Page to #EmployeesPerPage
  If not (#EmployeesPerPage > 0)
    display '**********************************************************************'
    display 'Employees Per Page not specified on Tax Reporting Parameters Panel    '
    display 'Program stopped'
    display '**********************************************************************'
    stop
  End-if

  let $Form_ID = RTRIM(&TX.Form_ID,' ')
  if $Form_ID <> 'IMP01'
    if $Form_ID <> 'LSR02A'
      if $Form_ID <> 'LSR03'
        if $Form_ID <> 'LW2PS'
          if $Form_ID <> 'LSR01'
            if $Form_ID <> 'LPS4V'
            display '*********************************************************'
            display 'U.S. Form ID  not specified on Tax Reporting             '
            display 'Parameters Panel - Program stopped                       '
            display '*********************************************************'
            stop
            end-if
          end-if
        end-if
      end-if
    end-if
  end-if

#ifdef debug1
   show '$Form_ID = ' $Form_ID
#endif

  if $Form_ID = 'LSR01'
      #ifndef LayoutW2-8
        show 'For FormId "LSR01", LayoutW2-8 should be defined in PRTFORML.SQC'
        stop
      #endif
      let #WCOLUMN1 = 4
      let #WCOLUMN2 = 42
      print $LP8 () code                ! Decipoints
      let #MAXLOCAL = 11
  end-if

  if $Form_ID = 'LPS4V'
      #ifndef LayoutW2-8LF
        show 'For FormId "LPS4V", LayoutW2-8LF should be defined in PRTFORML.SQC'
        stop
      #endif
      let #WCOLUMN1 = 4
      let #WCOLUMN2 = 42
      print $LP8L () code               ! Decipoints
      let #MAXLOCAL = 11

  end-if

  if $Form_ID = 'IMP01'
      #ifndef LayoutW2-6
        show 'For FormId "IMP01", LayoutW2-6 should be defined in PRTFORML.SQC'
        stop
      #endif
      let #WCOLUMN1 = 3
      let #WCOLUMN2 = 42
      print $LP6 () code                ! Decipoints
      let #MAXLOCAL = 7
  end-if

  if $Form_ID = 'LSR02A'
      #ifndef LayoutW2-8
        show 'For FormId "LSR02A", LayoutW2-8 should be defined in PRTFORML.SQC'
        stop
      #endif
      let #WCOLUMN1 = 2
      let #WCOLUMN2 = 42
      print $LP8 () code                ! Decipoints
      let #MAXLOCAL = 11
  end-if

  if $Form_ID = 'LSR03'
      #ifndef LayoutW2-6
        show 'For FormId "LSR03", LayoutW2-6 should be defined in PRTFORML.SQC'
        stop
      #endif
      let #WCOLUMN1 = 3
      let #WCOLUMN2 = 42
      print $LP6 () code                 ! Decipoints
      let #MAXLOCAL = 7
  end-if

  if $Form_ID = 'LW2PS'
      #ifndef LayoutW2-8L
        show 'For FormId "LW2PS", LayoutW2-8L should be defined in PRTFORML.SQC'
        stop
      #endif
      if #EmployeesPerPage <> 1
        display '*********************************************************'
        display 'Employees per page specified in Tax reporting Parameters'
        display 'must be "1" for Form ID "LW2PS".'
        display 'Program stopped'
        display '*********************************************************'
        stop
      end-if
      let #WCOLUMN1 = 2
      let #WCOLUMN2 = 42
      print $LP8L () code                ! Decipoints
      let #MAXLOCAL = 7
  end-if
  let $Program = 'US'
  move &TX.Balance_Year to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')

  if &TX.BALANCE_YEAR <> #AsOfYear and $Prcs_Process_Instance = ''
    display ''
    display 'Current Year is not one greater than Tax Reporting Year.'
    display 'Current Year is    ' noline
    display  #saveAsOfYear  9999
    display 'Tax Reporting Year ' noline
    display &TX.Balance_Year
    input $Answer maxlen=1 'Do you want to continue? (Y/N)'
    uppercase $Answer
    if $Answer <> 'Y'
      stop
    end-if
  end-if

  do Load-W2-PRT

  move 0 to #T_Count
  move  0 to #Form#

  if $Layout_Style = '4CORNER'
    COLUMNS #WCOLUMN1 #WCOLUMN2
    move 4 to #FormsPerPage
  end-if


  if $Layout_Style = '4CORNERPS'
    COLUMNS #WCOLUMN1 #WCOLUMN2
    move 1 to #FormsPerPage
  end-if

  if $Layout_Style = '2VERTICAL'
    COLUMNS #WCOLUMN1
    move 2 to #FormsPerPage
  end-if

  if $Layout_Style = '4VERTICAL'
    COLUMNS #WCOLUMN1
   move 4 to #FormsPerPage

  end-if

  if #EmployeesPerPage  > #FormsPerPage
     or ($Layout_Style = '4CORNER' and #EmployeesPerPage = 2)
     or ($Layout_Style = '4CORNER' and #EmployeesPerPage = 3)
     or ($Layout_Style = '4VERTICAL' and #EmployeesPerPage = 2)
     or ($Layout_Style = '4VERTICAL' and #EmployeesPerPage = 3)
    display '*********************************************************'
    display 'Employees Per Page specifed on Tax Reporting Parameters  '
    display 'Panel is not valid for the Layout Style selected         '
    display '*********************************************************'
    stop
  end-if

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

  create-array name=Box14 size=30
    field=Box:char
    field=Text:char
    field=Column:number
    field=Amount:number

  create-array name=Locals size=21
    field=Locality:char
    field=TxGrs:number
    field=Tax:number

end-procedure

begin-procedure Report-File-Create
#ifdef debug1
   show 'Procedure = Report-File-Create'
#endif

  move 'N' to $EmployeeFound
  move '7' to $SortCode1
  let $SortSQL10 = $Sort2
  let $procname = 'Report-File-Create'

begin-SELECT
A.W2_REPORTING_CO
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.ADDRESS2
A.CITY
A.STATE
A.POSTAL
A.COUNTRY
A.TAXFORM_ID
A.TCD_CODE

  move &A.Federal_EIN     to $Federal_EIN 099999999
  move $Federal_EIN       to $A.Federal_EIN xx-xxxxxxx
  move &A.Descr           to $A.Descr
  move &A.Address1        to $A.Address1
  move &A.Address2        to $A.Address2
  move &A.Country         to $A.Country
  let  $A.City            =  RTRIM(&A.City,' ')
  let $A.State = rtrim(&A.State, ' ')
  move &A.Postal          to $A.Zip
  move &A.W2_Reporting_Co to $A.W2_Reporting_Co
  move &A.TCD_Code        to $A.TCD_Code

  UPPERCASE $A.Descr
  UPPERCASE $A.Address1
  UPPERCASE $A.Address2
  UPPERCASE $A.Country
  UPPERCASE $A.City


  let $A.Federal_EIN = substr($A.Federal_EIN,1,#YE_ER_ID_Box_Size)
  let $A.Descr = substr($A.Descr,1,#YE_ER_Name_Box_Size)
  let $A.Address1 = substr($A.Address1,1,#YE_ER_Address1_Box_Size)
  let $A.Address2 = substr($A.Address2,1,#YE_ER_Address2_Box_Size)

  move 0 to #I_Count

  do State-Locality-Select

FROM  PS_W2_COMPANY A
WHERE A.CALENDAR_YEAR    = &TX.BALANCE_YEAR
  AND A.W2_REPORTING_CO  = A.COMPANY
       [$A.SelectedCompanies]    !NULL string if SELECT Company option not used
  AND A.W2_REPORTING_CO <> ' '
ORDER BY A.W2_REPORTING_CO, A.STATE, A.POSTAL
end-SELECT
end-procedure

begin-procedure State-Locality-Select
#ifdef debug1
   show 'Procedure = State-Locality-Select'
#endif

   let $Sort_Condition  = ''

   let $Quot      = ''''
   let $Paren     = ')'
   let $Spc       = ' '
   let $SortSQL1  = 'AND EXISTS (Select '
   let $SortSQL2  = '''X'' From PS_YE_AMOUNTS '
   let $SortSQL3  = 'WHERE COMPANY = E.COMPANY '
   let $SortSQL4  = 'AND EMPLID = E.EMPLID '
   let $SortSQL5  = 'AND CALENDAR_YEAR = E.CALENDAR_YEAR '
   let $SortSQL6  = 'AND TAXFORM_ID = E.TAXFORM_ID '
   let $SortSQL7  = 'AND SEQUENCE_NUMBER = E.SEQUENCE_NUMBER '
   let $SortSQL8  = 'AND STATE = '
   let $SortSQL9  = ' AND LOCALITY = '

#ifdef debug1
begin-SELECT DISTINCT loops=5
#else
begin-SELECT DISTINCT
#endif

SL.STATE
SL.COMPANY   () on-break level=1
SL.LOCALITY  () on-break level=2 print=never !Before=Proc-New-Page

   let $Sort2 = $SortSQL1 || $SortSQL2 || $SortSQL3 || $SortSQL4 ||
                $SortSQL5 || $SortSQL6 || $SortSQL7 || $SortSQL8 || $Quot ||
                &SL.STATE || $Quot || $SortSQL9 || $Quot ||
                &SL.LOCALITY || $Quot || $Paren || $Spc || $SortSQL10

   if RTRIM(&SL.LOCALITY, ' ') <> ''

     let $Sort_Company  = &SL.COMPANY
     let $Sort_Locality = &SL.LOCALITY
     let $Sort_Condition  = ' AND W.COMPANY = ''' || $Sort_Company || ''' AND LOCALITY = ''' || $Sort_Locality || ''''

     do Read-Employee-Data

   end-if

FROM PS_YE_AMOUNTS SL
WHERE SL.COMPANY IN
      (SELECT COMPANY FROM PS_W2_COMPANY
        WHERE W2_REPORTING_CO = &A.W2_REPORTING_CO
          AND CALENDAR_YEAR = &TX.BALANCE_YEAR)
  AND SL.CALENDAR_YEAR  = &TX.BALANCE_YEAR
       [$SL.SelectedCompanies]    !NULL string if SELECT Company option not used
  AND SL.TAXFORM_ID     = 'W'
  AND SL.BOX = '19'
  AND SL.W2_AMOUNT  > 0
ORDER BY 1,2,3
end-SELECT

end-procedure

!######################################################################
!*********************************************************************
begin-procedure save-excluded-locals
! Keep these in case we need them later
!*********************************************************************
! DON'T PRINT FOR PITTSBURGH LOCALITIES
! DON'T PRINT FOR OHIO CCA LOCALITIES
! DON'T PRINT FOR COLUMBUS, OHIO LOCALITY
! DON'T PRINT FOR RITA-OHIO AGENCIES
begin-SELECT DISTINCT
xx.STATE
xx.LOCALITY
from ps_ye_amounts xx
where   xx.locality not in
	('I022193S',       ! Pittsburgh
	'I022612C1',       ! Pittsburgh
	'I022612C2',       ! Pittsburgh
	'I022612M1',       ! Pittsburgh
	'I022612M2',       ! Pittsburgh
	'I022612S2',       ! Pittsburgh
	'13554',
	'16000',
	'29610',
	'49056',
	'49098',
	'49700',
	'59416',
	'68056',
	'73684',
	'80304',
	'85498',
	'85512',
        '18000',           ! Columbus
       !Rita - Begin
	'03464','04920','05690','08364','09064','11066','13358','19806',
	'25256','29428','30198','36652','41664','45556','45990','47306',
	'48482','49644','56882','57008','71682','72088','72060','73264',
	'75014','75098','78932','79002','79716','83622','85652',
       !Rita - End
       !New Codes - Begin
	'19778',
	'01000',
	'03828',
	'80990')
       !New Codes - End
end-SELECT
end-procedure   save-excluded-locals
!######################################################################

begin-procedure Read-Employee-Data
!Added to eject form when local changes
!program selects all employees for company, local then reads again
!a 4 count in form causes a form feed before printing
#ifdef debug1
   show 'Procedure = Read-Employee-Data'
#endif

   move 4 to #form#

   let $Local_wages =  'N'

#ifdef debug1
begin-SELECT loops=20
#else
begin-SELECT
#endif
E.EMPLID           () on-break level=1 print=never before=Before-EmplID
E.TAXFORM_ID
E.SEQUENCE_NUMBER  () on-break level=2 print=never after=After-Seq
E.CONTROL_NUMBER
E.W2_STATE
E.EMPLOYER_ID_SWT
E.SSN
E.YE_FNAME
E.YE_MIDDLE_NAME
E.YE_LNAME
E.YE_SUFFIX
E.ADDRESS1
E.ADDRESS2
E.CITY
E.STATE
E.POSTAL
E.COUNTRY
E.STATUTORY_EE
E.PENSION_PLAN
E.THIRDPARTY_SICKPAY
EE.PROCESS_FLAG
R.NAME  !GEX-MXT added

  move &E.Sequence_Number to #tempnum
  let $tempEmplid = &E.EmplID

  if $tempEmplid = $E.Emplid and #tempnum = #E.Sequence_Number and rtrim(&E.W2_State,' ') <> $E.W2_State
       let $Check-ID = 'Y'
  end-if


  if &E.STATUTORY_EE  = 'Y'
     move &E.STATUTORY_EE  to $E.Statutory_Ee
  end-if
  if &E.PENSION_PLAN   = 'Y'
     move &E.PENSION_PLAN  to $E.Pension_Plan
  end-if
  if &E.THIRDPARTY_SICKPAY   = 'Y'
     move &E.THIRDPARTY_SICKPAY to $E.Thirdparty_Sickpay
  end-if

  move &E.TaxForm_ID      to $E.TaxForm_ID
  move &E.Sequence_Number to #E.Sequence_Number

  move $Sort_Company to $E.Company

  if $Check-ID = 'Y'
     if RTRIM(&E.W2_State,' ') <> ''
       move &E.W2_State to $E.W2_State
       move &E.Employer_ID_SWT to $E.Employer_ID_SWT
     else
       if $TempST <> ' '
        let $E.W2_State  = $TempST
        let $E.Employer_ID_SWT = $TempSWT
       else
        let $E.W2_State = ' '
        let $E.Employer_ID_SWT = ' '
       end-if
     end-if
     let $Check-ID = 'N'
   else
    move &E.W2_State to $E.W2_State
    if RTRIM(&E.Employer_ID_SWT,' ') <> ''
       move &E.Employer_ID_SWT to $E.Employer_ID_SWT
    else
       let $E.Employer_ID_SWT = ' '
    end-if
   end-if

   let $E.Employer_ID_SWT = substr($E.Employer_ID_SWT,1,#YE_State_ID_Box_Size)

  let $TempSWT =  $E.Employer_ID_SWT
  let $TempST = $E.W2_State

  move 'Y' to $EmployeeFound

FROM  PS_YE_EE EE, PS_YE_DATA E, PS_NAMES R, PS_W2_COMPANY W, PS_YE_AMOUNTS AMT   !GEX-MXT added for upgrade 90
WHERE W.W2_REPORTING_CO  = &A.W2_Reporting_Co
  AND W.COMPANY          = E.COMPANY
  [$W.SelectedCompanies]    !NULL string if SELECT Company option not used
  AND W.CALENDAR_YEAR    = E.CALENDAR_YEAR
  AND E.COMPANY          = EE.COMPANY
  AND E.EMPLID           = EE.EMPLID
  AND E.TAXFORM_ID       = 'W'
  AND E.TAXFORM_ID       = EE.TAXFORM_ID
  AND E.CALENDAR_YEAR    = EE.CALENDAR_YEAR
  AND E.CALENDAR_YEAR    = &TX.BALANCE_YEAR
  AND R.EMPLID            = EE.EMPLID	!GEX-MXT added for upgrade 90
  AND EE.PROCESS_FLAG   <> 'V'
  AND AMT.COMPANY =  E.COMPANY
  AND AMT.EMPLID = E.EMPLID
  AND AMT.CALENDAR_YEAR = E.CALENDAR_YEAR
  AND AMT.TAXFORM_ID = E.TAXFORM_ID
  AND E.SEQUENCE_NUMBER  = AMT.SEQUENCE_NUMBER
  AND AMT.BOX = '19'
  AND AMT.W2_AMOUNT  > 0
  [$Sort_Condition]
ORDER BY E.COMPANY, AMT.LOCALITY, E.EMPLID
end-SELECT

end-procedure

begin-procedure Before-EmplID
#ifdef debug1
  display 'processing ' noline
  display $Sort_Company  noline
  display ' '  noline
  display &E.w2_state     noline
  display ' '  noline
  display &R.name     noline	!GEX-MXT added for upgrade 90
  display ' '  noline
  display &E.EmplID
#endif

  move &E.EmplID   to $E.EmplID
  move 0 to #MultiForm
  let $TempSWT = ' '
  let $TempST = ' '

  move &E.SSN to $S123 xxx

#ifdef debug1
  show ' &E.SSN  ' &E.SSN
#endif

  if $S123 = &Temp_SSN_Mask or RTRIM(&E.SSN, ' ') = ''
    move 'Applied For' to $E.SSN

  else
    move &E.SSN to $E.SSN xxx-xx-xxxx
  end-if
  move &E.YE_FNAME to $E.Name
  move &E.YE_FNAME to $E.Fname
  move &E.YE_MIDDLE_NAME to $E.MiddleName
  move &E.YE_LNAME to $E.Lname
  move &E.YE_SUFFIX to $E.Suffix
  let $E.Fname = rtrim($E.Fname, ' ')  || ' '
  let $E.Name = rtrim($E.Name, ' ')  || ' '
  let $E.MiddleName = rtrim($E.MiddleName, ' ') || ' '
  let $E.Lname = rtrim($E.Lname, ' ')  || ' '
  let $E.Suffix =rtrim($E.Suffix, ' ')  || ' '
  if $E.MiddleName <> ' '
    let $E.YE_Name = $E.Name || $E.MiddleName || $E.Lname || $E.Suffix
  else
    let $E.YE_Name = $E.Name || $E.Lname || $E.Suffix
  end-if

  move $E.YE_Name to $YE_Name
  move $YE_Name to $E.YE_Name

  if $E.MiddleName <> ' '
    let $E.YE_Fname = $E.Fname || $E.MiddleName
  else
    let $E.YE_Fname = $E.Fname
  end-if

  if $E.Suffix <> ' '
    let $E.YE_Lname = $E.Lname ||  $E.Suffix
  else
    let $E.YE_Lname = $E.Lname
  end-if
  move $E.YE_Fname to $YE_Fname
  move $YE_Fname to $E.YE_Fname

  move $E.YE_LName to $YE_LName
  move $YE_LName to $E.YE_LName

!new code
  let $Use_Alternate_Name = 'N'

  if ($Form_ID = 'LSR03' and (Length($E.YE_FName) > #YE_EE_FName_Box_Size
                           or Length($E.YE_LName) > #YE_EE_LName_Box_Size))
  or ($Form_ID <> 'LSR03' and Length($E.YE_Name)  > #YE_EE_FullName_Box_Size)
      let $Use_Alternate_Name = 'Y'
      if $E.MiddleName <> ' '
          Let $Alternate_Name = substr($E.YE_FName,1,1) || ' ' || substr($E.MiddleName,1,1) || ' ' ||$E.YE_LName
      else
          Let $Alternate_Name = substr($E.YE_Fname,1,1) || ' ' || $E.YE_LName
      end-if
      if $Form_ID = 'LSR03'
         Let $Alternate_Name = substr($Alternate_Name,1,(#YE_EE_FName_Box_Size + #YE_EE_LName_Box_Size))
      else
         Let $Alternate_Name = substr($Alternate_Name,1,#YE_EE_FullName_Box_Size)
      end-if
  end-if
!new code

  move &E.Control_Number  to $E.Control_Number
  move &E.Address1        to $E.Address1
  move &E.Address2        to $E.Address2
  move &E.Country         to $E.Country
  let  $E.City            =  RTRIM(&E.City,' ')
  let $E.State = rtrim(&E.State, ' ')
  move &E.Postal          to $E.Zip

  uppercase $E.YE_Name
  uppercase $E.Address1
  uppercase $E.Address2
  uppercase $E.Country
  uppercase $E.City

  let $E.Control_Number = substr($E.Control_Number,1,#YE_Control_Nbr_Box_Size)
  !let $E.SSN = substr($E.SSN,1,#YE_EE_SSN_Box_Size) !Vendaxg commented as SSN is not getting Printed
  let $E.YE_Name = substr($E.YE_Name,1,#YE_EE_FullName_Box_Size)
  let $E.Address1 = substr($E.Address1,1,#YE_EE_Address1_Box_Size)
  let $E.Address2 = substr($E.Address2,1,#YE_EE_Address2_Box_Size)

  let $E.YE_FName = substr($E.YE_Fname,1,#YE_EE_FName_Box_Size)
  let $E.YE_LName = substr($E.YE_LName,1,#YE_EE_LName_Box_Size)

  !if $Form_ID = 'LPS4V'
  if $Form_ID <> 'LPS4V' !Vendaxg Modified for Form ID LPS4V
  and #Align_Count = 0
      do Get-EE-Address-Line3
  end-if

  if #T_Count = 0
    move 0 to #Form#
  end-if

end-procedure


begin-procedure After-Seq
#ifdef debug1
  Show 'Procedure = After-Seq'
#endif

  do Load-Amounts
  if #LocalCount > 2
    move 1 to #MultiForm
  end-if
  do Print-W2

  if &E.Sequence_Number = 1
    add 1 to #I_Count
  end-if

  let $Local_wages =  'N'

end-procedure

begin-procedure Proc-New-Page
   new-page
end-procedure

begin-procedure Print-W2
  move 'N' to $Combat_Pay

  if $SortCode1 <> '7'
    do Identify-Box12-Entries
    let $Box12PrintString = SUBSTR($Box12CheckString,1,8)
  end-if

  move 0 to #NextLocal
  move 0 to #HoldNextLocal
  move 1 to #j
  if #EmployeesPerPage > 0
   while #j <= #FormsPerPage/#EmployeesPerPage  !loop for individual ee's

   if $Form_ID <> 'LPS4V' !Vendaxg Modified for Form ID LPS4V
    and #Align_Count = 0
    and #j = 1
       do LongNameAddressEE
    end-if

    do Next-Form
    do Print-ER-Data
    do Print-EE-Data
    do Print-Fed-State-Amounts

    if #LocalCount > 0 or #Align_Count > 0
      move #HoldNextLocal to #NextLocal
      if $SortCode1 <> '7'
        do Print-Local-Amounts
      else
          do Print-Locality-Sort-Amounts
      end-if
    end-if
    do Print-Box14
    if #E.Sequence_Number = 1 or #Align_Count > 0
      do Print-Box13
    end-if
    if $SortCode1 <> '7'
      do Print-Box12
    end-if
    add 1 to #j
   end-while
   if $Form_ID = 'LW2PS' and #Align_Count = 0
     do LongNameAddress
   end-if
  end-if

  if $SortCode1 <> '7'
    let $Box12CheckString = LTRIM($Box12CheckString,$Box12PrintString)
    while $Box12CheckString <> ''
      let $Box12PrintString = SUBSTR($Box12CheckString,1,4)
      move 1 to #j
      while #j <= #FormsPerPage/#EmployeesPerPage  !loop for individual ee's

        !if $Form_ID = 'LPS4V'
        if $Form_ID <> 'LPS4V' !Vendaxg Modified for Form ID LPS4V
        and #Align_Count = 0
        and #j = 1
           do LongNameAddressEE
        end-if

     do Next-Form
        do Print-ER-Data
        do Print-EE-Data
        do Print-Box12
        move #L_14_Start to #L_14
        do Print-Suppl-Box14
        add 1 to #j
      end-while
      if $Form_ID = 'LW2PS' and #Align_Count = 0
        do LongNameAddress
      end-if
      let $Box12CheckString = LTRIM($Box12CheckString,$Box12PrintString)
    end-while
  end-if

  if $SortCode1 <> '7'
    while #NextLocal < #LocalCount
      move #NextLocal to #HoldNextLocal
      move 1 to #j
      if #EmployeesPerPage > 0
       while #j <= #FormsPerPage/#EmployeesPerPage  !loop for individual ee's

      if #form# = 4
          Let #forms_count = #forms_count + 1
          next-listing
      end-if

!        if $Form_ID = 'LPS4V'
        if $Form_ID <> 'LPS4V' !Vendaxg Modified for Form ID LPS4V
        and #Align_Count = 0
        and #j = 1
           do LongNameAddressEE
        end-if

        do Next-Form
        do Print-ER-Data
        do Print-EE-Data
        move #HoldNextLocal to #NextLocal
        do Print-Local-Amounts
        move #L_14_Start to #L_14
        do Print-Suppl-Box14
        add 1 to #j
       end-while
       if $Form_ID = 'LW2PS' and #Align_Count = 0
         do LongNameAddress
       end-if
     end-if
   end-while
  end-if

  if #form#=4
   let #forms_count = #forms_count + 1
       next-listing
  end-if

  move 0 to #Fed_Wages
  move 0 to #Fed_Tax
  move 0 to #SS_Wages
  move 0 to #SS_Tax
  move 0 to #Med_Wages
  move 0 to #Med_Tax
  move 0 to #SS_Tips
  move 0 to #Alloc_Tips
  move 0 to #Adv_EIC
  move 0 to #Dep_Care
  move 0  to #Non_Qual_457_Amt
  move 'N' to $Non_Qual_457_Y
  move 'N' to $Non_Qual_457_N
  move 0 to #Uncoll_SS_Tax_On_Tips
  move 0 to #Uncoll_Med_Tax_On_Tips
  move 0 to #Group_Term_Life
  move 0 to #401K
  move 0 to #403B
  move 0 to #408K6
  move 0 to #457B
  move 0 to #501C18D
  move 0 to #Sick_Pay
  move 0 to #Excise_Tax
  move 0 to #Business_Exp
  move 0 to #Uncoll_SS_Tax_GTL
  move 0 to #Uncoll_Med_Tax_GTL
  move 0 to #Excl_Moving_Exp
  move 0 to #Basic_Qtrs_and_Subsist
  move 0 to #Med_Svgs_Acct
  move 0 to #408P_Simple_Retirement
  move 0 to #Adoption_Exp
  move 0 to #NonStatutory_Stock_Opt
  move 0 to #State_Wages
  move 0 to #State_Tax
  move 0 to #OtherA
  move 0 to #OtherB
  move 0 to #OtherC
  move 0 to #OtherD
  move 0 to #OtherE
  move 0 to #OtherF
  move 0 to #OtherG
  move 0 to #OtherH
  move 0 to #OtherI
  move 0 to #OtherJ
  move 0 to #OtherK
  move 0 to #OtherL
  move 0 to #OtherM
  move 0 to #OtherN
  move 0 to #OtherO
  move 0 to #OtherP
  move 0 to #OtherQ
  move 0 to #OtherR
  move 0 to #OtherS
  move 0 to #OtherT
  move 0 to #OtherU
  move 0 to #OtherV
  move 0 to #OtherW
  move 0 to #OtherX
  move 0 to #OtherY
  move 0 to #OtherZ
  if #Align_Count = 0
    do Zero-Box14
  end-if
  if #LocalCount > 0
    do Zero-Local-Table
  end-if

  move ' ' to $E.Statutory_Ee
  move ' ' to $E.Pension_Plan
  move ' ' to $E.Thirdparty_Sickpay

end-procedure

begin-procedure Print-ER-Data

  do Print-Value($A.Federal_EIN,#L_B,#C_B,'Box B')
  do Print-Value($A.Descr,#L_C1,#C_C1,'Box C1')
  do Print-Value($A.Address1,#L_C2,#C_C2,'Box C2')
  if RTRIM($A.Address2, ' ') <> ''
    do Print-Value($A.Address2,#L_C3,#C_C3,'Box C3')
    move 'N' to $LineShift
  else
    move 'Y' to $LineShift
  end-if
  if #Align_Count = 0
    if $A.Country = 'USA'
      move $A.Zip            to $A.ZipExtsn ~~~~~~xxxx
      if instr($A.Zip,'-',6) = 0
      and $A.ZipExtsn <> '    '
        let $A.Zip = substr($A.Zip,1,5) || '-' || substr($A.Zip,6,4)
      end-if
      let $C4 = $A.City || ' ' || $A.State || ' ' || $A.Zip
      if length($C4) > #YE_State_City_Zip_Box_Size
          let #newlen = length($A.City) + #YE_State_City_Zip_Box_Size - length($C4)
          let $C4 = substr($A.City,1,#newlen) || ' ' || $A.State || ' ' || $A.Zip
      end-if
    else
      let $C4 = $A.City || ' ' || $A.State || ' ' ||
              $A.Country || ' ' || $A.Zip
      if length($C4) > #YE_State_City_Zip_Box_Size
          let #newlen = length($A.City) + #YE_State_City_Zip_Box_Size - length($C4)
          let $C4 = substr($A.City,1,#newlen) || ' ' || $A.State || ' ' ||
                  $A.Country || ' ' || $A.Zip
      end-if
    end-if
  end-if
  if $LineShift = 'Y'
    let #PrintLine = #L_C3
  else
    let #PrintLine = #L_C4
  end-if
  do Print-Value($C4,#PrintLine,#C_C4,'Box C4')
end-procedure

begin-procedure Print-EE-Data

  add 1 to #T_Count

#ifdef debug1
  show ' $E.Control_Number in box a ' $E.Control_Number   '/'   #L_A   '/'   #C_A
#endif

  do Print-Value($E.Control_Number,#L_A,#C_A,'Box A')

  Evaluate $Form_id

    when = 'LPS4V'
    when = 'LSR01'
      do Print-Value($ReprintDescr1, #L_R1, #C_R1, 'Box R1')
      do Print-Value($ReprintDescr2, #L_R2, #C_R2, 'Box R2')
      break
    when = 'LSR02A'
      if #Form# < 3
         do Print-Value($ReprintDescr1, #L_R1, #C_R1, 'Box R1')
         do Print-Value($ReprintDescr2, #L_R2, #C_R2, 'Box R2')
       else
         do Print-Value($ReprintDescr, 40, 11, 'Box R')
       end-if
       break
    when-other
       do Print-Value($ReprintDescr, #L_R, #C_R, 'Box R')
       break
   end-evaluate

  !if $Form_ID <> 'LPS4V'
  if $Form_ID = 'LPS4V' !Vendaxg Modified for Form ID LPS4V
     if &EE.Process_Flag = 'V' or #Align_Count <> 0
       do Print-Value('X',#L_V,#C_V,'Box V')
     end-if
  end-if

#ifdef debug1
  Show 'Print Value SSN : '#L_D '  : ' #C_D
#endif

  do Print-Value($E.SSN,#L_D,#C_D,'Box D')
  if $Form_ID <> 'LSR03'
    if $Use_Alternate_Name = 'Y'
        do Print-Value($Alternate_Name,#L_E,#C_E,'Box E')
    else
        do Print-Value($E.YE_Name,#L_E,#C_E,'Box E')
    end-if
  else
    if $Use_Alternate_Name = 'Y'
        do Print-Value($Alternate_Name,#L_E1,#C_E1,'Box E1')
    else
        do Print-Value($E.YE_FName,#L_E1,#C_E1,'Box E1')
        do Print-Value($E.YE_LName,#L_E3,#C_E3,'Box E3')
    end-if
  end-if
  do Print-Value($E.Address1,#L_F1,#C_F1,'Box F1')
  if RTRIM($E.Address2, ' ') <> ''
    do Print-Value($E.Address2,#L_F2,#C_F2,'Box F2')
    move 'N' to $LineShift
  else
    move 'Y' to $LineShift
  end-if

  if #Align_Count = 0
     do Get-EE-Address-Line3
  end-if

  if $LineShift = 'Y'
    let #PrintLine = #L_F2
  else
    let #PrintLine = #L_F3
  end-if
  do Print-Value($F3,#PrintLine,#C_F3,'Box F3')
end-procedure

begin-procedure Get-EE-Address-Line3
#ifdef debug1
   show 'Procedure = Get-EE-Address-Line3'
#endif

    if $E.Country = 'USA'
      move $E.Zip            to $E.ZipExtsn ~~~~~~xxxx
      if instr($E.Zip,'-',6) = 0
      and $E.ZipExtsn <> '    '
        let $E.Zip = substr($E.Zip,1,5) || '-' || substr($E.Zip,6,4)
      end-if
      let $E.Zip = rtrim($E.Zip, ' ')
      let $F3 = $E.City || ' ' || $E.State || ' ' || $E.Zip
      if length($F3) > #YE_EE_Country_Box_Size
          let #newlen = length($E.City) + #YE_EE_Country_Box_Size - length($F3)
          let $F3 = substr($E.City,1,#newlen) || ' ' || $E.State || ' ' || $E.Zip
      end-if
    else
      do Get-Country-Code
      let $Country = SUBSTR(&CT.Descr,1,15)
      let $Country = rtrim($Country, ' ')
      uppercase $Country
      let $E.Zip = rtrim($E.Zip, ' ')
      let $F3 = $E.City || ' ' || $E.State || ' ' ||
                $E.Zip  || ' '  || $Country
      if length($F3) > #YE_EE_Country_Box_Size
          let #newlen = length($E.City) + #YE_EE_Country_Box_Size - length($F3)
          let $F3 = substr($E.City,1,#newlen) || ' ' || $E.State || ' ' ||
                $E.Zip  || ' '  || $Country
      end-if
    end-if
end-procedure

begin-procedure Load-Amounts
#ifdef debug1
   show 'Procedure = Load-Amounts'
#endif

  move 0 to #LocalCount
  move 'N' to $Local_wages
begin-SELECT
C.W2_REPORTING_CO
D.STATE
D.LOCALITY
D.BOX
#ifdef DB2ALL
DECIMAL(SUM(D.W2_AMOUNT),15,3) &D.W2_Amount
#else
SUM(D.W2_AMOUNT) &D.W2_Amount
#endif
  move &D.W2_Amount to #Amount

! CWB 2006
!   let $D.Box = RTRIM(&D.Box,' ')
   let $D.Box = &d.box
   move $D.Box to $Box xx
   let $Pos3 = substr($D.Box, 3,1)
   if $Box = $YE_Box12_StartPos  or
      $Box = $YE_Other
     and $Pos3 > ' '
     let $D.Box = &D.Box
   else
     let $D.Box = RTRIM(&D.Box,' ')
   end-if

   do evaluate-box


     If $D.BOX = $YE_Local_Wages                       !Local wages
       if $E.W2_State <> 'MD'
         add 1 to #LocalCount
         let $Local_wages =  'Y'
         if #LocalCount > 20
            display 'Local Array Size Exceeded - Processing Stopped'
            STOP
         end-if

         PUT &D.Locality INTO LOCALS(#LOCALCOUNT) LOCALITY

         PUT #Amount INTO LOCALS(#LOCALCOUNT) TXGRS
       end-if
     end-if
     if $D.BOX= $YE_Local_Tax                         !Local tax
       if $E.W2_State <> 'MD'
         if $Local_wages =  'N'
            add 1 to #LocalCount
            PUT &D.Locality INTO LOCALS(#LOCALCOUNT) LOCALITY
         end-if
         PUT #Amount INTO LOCALS(#LOCALCOUNT) TAX
       else
         add #Amount to #State_Tax
       end-if
         move 'N' to $Local_wages
     end-if

       if $Box = $YE_Other
          Let #i = 0
          let $Box14Letter = SUBSTR($D.Box,1,4)
          While #i < 30
            Get $BoxLetter from BOX14(#i) Box
            if $BoxLetter = $Box14Letter
              ARRAY-ADD #Amount to BOX14(#i) AMOUNT
              let #i = 30
            end-if
            let #i=#i+1
          End-While
          move '  ' to $Box
       end-if

FROM  PS_YE_AMOUNTS D, PS_W2_COMPANY C
WHERE C.W2_REPORTING_CO = &A.W2_Reporting_Co
  AND C.COMPANY         = D.COMPANY
  [$C.SelectedCompanies]    !NULL string if SELECT Company option not used
  AND C.CALENDAR_YEAR   = D.CALENDAR_YEAR
  AND D.EMPLID          = $E.Emplid
  AND D.CALENDAR_YEAR   = &TX.BALANCE_YEAR
  AND D.TAXFORM_ID      = $E.TaxForm_ID
  AND D.SEQUENCE_NUMBER = #E.Sequence_Number
GROUP BY C.W2_REPORTING_CO, D.STATE, D.LOCALITY, D.BOX
ORDER BY C.W2_REPORTING_CO, D.STATE, D.LOCALITY, D.BOX
end-SELECT
end-procedure


begin-procedure Print-Fed-State-Amounts
  if #T_Count > #Align_Count
    if #j = 1
      add #Fed_Wages to #Fed_Wages_I
      add #Fed_Tax to #Fed_Tax_I
      add #SS_Wages to #SS_Wages_I
      add #SS_Tax to #SS_Tax_I
      add #Med_Wages to #Med_Wages_I
      add #Med_Tax to #Med_Tax_I
      add #SS_Tips to #SS_Tips_I
      add #Alloc_Tips to #Alloc_Tips_I
      add #Adv_EIC to #Adv_EIC_I
      add #Dep_Care to #Dep_Care_I
      add #Non_Qual_457_Amt to #Non_Qual_457_Amt_I
      add #14 to #14_I
      add #State_Tax to #State_Tax_I
      add #State_Wages to #State_Wages_I
      add #Uncoll_SS_Tax_On_Tips to #Uncoll_SS_Tax_On_Tips_I
      add #Uncoll_Med_Tax_On_Tips to #Uncoll_Med_Tax_On_Tips_I
      add #Group_Term_Life to #Group_Term_Life_I
      add #401K to #401K_I
      add #403B to #403B_I
      add #457B to #457B_I
      add #408K6 to #408K6_I
      add #501C18D to #501C18D_I
      add #Sick_Pay to #Sick_Pay_I
      add #Excise_Tax to #Excise_Tax_I
      add #Business_Exp to #Business_Exp_I
      add #Uncoll_SS_Tax_GTL to #Uncoll_SS_Tax_GTL_I
      add #Uncoll_Med_Tax_GTL to #Uncoll_Med_Tax_GTL_I
      add #Excl_Moving_Exp to #Excl_Moving_Exp_I
      add #Basic_Qtrs_and_Subsist to #Basic_Qtrs_and_Subsist_I
      add #Med_Svgs_Acct to #Med_Svgs_Acct_I
      add #408P_Simple_Retirement to #408P_Simple_Retirement_I
      add #Adoption_Exp to #Adoption_Exp_I
      add #NonStatutory_Stock_Opt to #NonStatutory_Stock_Opt_I
      add #OtherA to #OtherA_I
      add #OtherB to #OtherB_I
      add #OtherC to #OtherC_I
      add #OtherD to #OtherD_I
      add #OtherE to #OtherE_I
      add #OtherF to #OtherF_I
      add #OtherG to #OtherG_I
      add #OtherH to #OtherH_I
      add #OtherI to #OtherI_I
      add #OtherJ to #OtherJ_I
      add #OtherK to #OtherK_I
      add #OtherL to #OtherL_I
      add #OtherM to #OtherM_I
      add #OtherN to #OtherN_I
      add #OtherO to #OtherO_I
      add #OtherP to #OtherP_I
      add #OtherQ to #OtherQ_I
      add #OtherR to #OtherR_I
      add #OtherS to #OtherS_I
      add #OtherT to #OtherT_I
      add #OtherU to #OtherU_I
      add #OtherV to #OtherV_I
      add #OtherW to #OtherW_I
      add #OtherX to #OtherX_I
      add #OtherY to #OtherY_I
      add #OtherZ to #OtherZ_I
      move 0 to #local
    end-if
  end-if

  do Format-Number(#Fed_Wages, $out, $F01)                      !Federal wages
  do Print-Value($out,#L_01,#C_01,'Box 01')

  do Format-Number(#Fed_Tax, $out, $F02)                        !Federal tax
  do Print-Value($out,#L_02,#C_02,'Box 02')

  do Format-Number(#SS_Wages, $out, $F03)                       !SS wages
  do Print-Value($out,#L_03,#C_03,'Box 03')

  do Format-Number(#SS_Tax, $out, $F04)                         !SS Tax
  do Print-Value($out,#L_04,#C_04,'Box 04')

  do Format-Number(#Med_Wages, $out, $F05)                      !Medicare wages
  do Print-Value($out,#L_05,#C_05,'Box 05')

  do Format-Number(#Med_Tax, $out, $F06)                        !Medicare tax
  do Print-Value($out,#L_06,#C_06,'Box 06')

  do Format-Number(#SS_Tips, $out, $F07)                        !SS tips
  do Print-Value($out,#L_07,#C_07,'Box 07')

  do Format-Number(#Alloc_Tips, $out, $F08)                     !Allocated tips
  do Print-Value($out,#L_08,#C_08,'Box 08')

  do Format-Number(#Adv_EIC, $out, $F09)                        !EIC
  do Print-Value($out,#L_09,#C_09,'Box 09')

  do Format-Number(#Dep_Care, $out, $F10)                       !Dependent care
  do Print-Value($out,#L_10,#C_10,'Box 10')

  do Format-Number(#Non_Qual_457_Amt, $out, $F11)               !Non-qualified plan total
  do Print-Value($out,#L_11,#C_11,'Box 11')

  if $Non_Qual_457_Y = 'Y'
    if $Non_Qual_457_N = 'N'
      do Print-Value('G',#L_11,#C_11,'Box 11')
    end-if
  end-if

  if RTRIM($E.W2_State,' ') <> ''
    do Print-Value($E.W2_State,#L_15,#C_15,'Box 15')            !State
    do Print-Value($E.Employer_ID_SWT,#L_15A,#C_15A,'Box 15A')  !State employer ID
  else
      do Print-Value(' ',#L_15,#C_15,' ')
  end-if

  do Format-Number(#State_Wages, $out, $F16)                 !State wages
  do Print-Value($out,#L_16,#C_16,'Box 16')

  do Format-Number(#State_Tax, $out, $F17)                   !State tax
  do Print-Value($out,#L_17,#C_17,'Box 17')
  if #E.Sequence_Number > 1
    do Print-Suppl-Box14
  end-if
end-procedure

begin-procedure Print-Locality-Sort-Amounts
#ifdef debug1
   show 'Procedure = Print-Locality-Sort-Amounts'
#endif

  move 1 to #i
  move #L_18 to #LocalPrintLine18
  move #L_19 to #LocalPrintLine19
  move #L_20 to #LocalPrintLine20

  while #NextLocal < #LocalCount and #i <= #Locals_Per_Form
    add 1 to #NextLocal

    get $Locality #Local_Wages #Local_Tax from Locals(#NextLocal)
    if &SL.LOCALITY = $Locality
      let $Locality = RTRIM($Locality,' ')
      if $Locality = $priorLocality
        if $E.W2_State <> $priorState
          move $E.W2_State to $priorState
          do Get-Locality-Print-Name
          move $Locality to $priorLocality
        end-if
      else
          do Get-Locality-Print-Name
          move $Locality to $priorLocality
      end-if
!      if &E.Sequence_Number > 1
        do Print-Value($E.W2_State,#L_15,#C_15,'Box 15')                !State
        do Print-Value($E.Employer_ID_SWT,#L_15A,#C_15A,'Box 15A')      !State employer ID
!      end-if

      do Format-Number(#Local_Wages, $out, $F18)                     !Local wages
      do Print-Value($out,#LocalPrintLine18,#C_18,'Box 18')

      do Format-Number(#Local_Tax, $out, $F19)                       !Local tax
      do Print-Value($out,#LocalPrintLine19,#C_19,'Box 19')

      uppercase $LocalityPrintName

      do Print-Value($LocalityPrintName,#LocalPrintLine20,#C_20,'Box 20')

      add 2 to #LocalPrintLine18
      add 2 to #LocalPrintLine19
      add 2 to #LocalPrintLine20
      add 1 to #i

      if #j = 1
      and #align_count = 0
        add #Local_Wages to #Local_Wages_I
        add #Local_Tax to #Local_Tax_I
        if #i = 1
          add 1 to #local
        end-if
      end-if
    end-if
   end-while
end-procedure

begin-procedure Print-Local-Amounts
#ifdef debug1
   show 'Procedure = Print-Local-Amounts'
#endif

  move 1 to #i
  move #L_18 to #LocalPrintLine18
  move #L_19 to #LocalPrintLine19
  move #L_20 to #LocalPrintLine20

  while #NextLocal < #LocalCount and #i <= #Locals_Per_Form
    add 1 to #NextLocal
    get $Locality #Local_Wages #Local_Tax from Locals(#NextLocal)

    let $Locality = RTRIM($Locality,' ')

    if $Locality = $priorLocality
      if $E.W2_State <> $priorState
        move $E.W2_State to $priorState
        do Get-Locality-Print-Name
        move $Locality to $priorLocality
      end-if
    else
        do Get-Locality-Print-Name
        move $Locality to $priorLocality
    end-if
    if #i = 1
      if #NextLocal > 1
        do Print-Value($E.W2_State,#L_15,#C_15,'Box 15')                !State
        do Print-Value($E.Employer_ID_SWT,#L_15A,#C_15A,'Box 15A')      !State employer ID
      end-if
    end-if

    if &E.Sequence_Number > 1
      do Print-Value($E.W2_State,#L_15,#C_15,'Box 15')                  !State
      do Print-Value($E.Employer_ID_SWT,#L_15A,#C_15A,'Box 15A')        !State employer ID
    end-if

      do Format-Number(#Local_Wages, $out, $F18)                       !Local wages
      do Print-Value($out,#LocalPrintLine18,#C_18,'Box 18')

      do Format-Number(#Local_Tax, $out, $F19)                         !Local tax
      do Print-Value($out,#LocalPrintLine19,#C_19,'Box 19')

      uppercase $LocalityPrintName

      do Print-Value($LocalityPrintName,#LocalPrintLine20,#C_20,'Box 20')

    add 2 to #LocalPrintLine18
    add 2 to #LocalPrintLine19
    add 2 to #LocalPrintLine20

    if #j = 1
    and #align_count = 0
       add #Local_Wages to #Local_Wages_I
       add #Local_Tax to #Local_Tax_I
       if #i = 1
         add 1 to #local
       end-if
    end-if

    add 1 to #i
  end-while
end-procedure

!##############################################
!begin-procedure Identify-Box12-Entries
!begin-procedure Print-Box12
! Procedures now found in w2prt.sqc
! CWB 2006
!################################################

begin-procedure Print-Box14
  move #L_14_Start to #L_14

  if #L_14 <= 0
    display ''
    display '***************************************'
    display 'Print Line not defined for Box 14'
    display 'in Tax Form Print Parameters Table.'
    display 'Program Stopped.'
    display '***************************************'
    display ''
    stop
  end-if

  move 0 to #m                  ! CWB 01/04/2007
  move 6 to #Last_Box14_Line    ! CWB 01/18/2005
  move 'N' to $Is_NJ_VDI

  if $E.W2_State = 'NJ'
    get #14 from Box14(4) Amount          !box 14D
    if #14 > 0
      get #14 from Box14(5) Amount        !box 14E
      if #14 > 0
        get #14 from Box14(7) Amount      !box 14G
        if #14 > 0
          put 0 into Box14(3) Amount      !box 14C
        end-if
      end-if
    end-if
  end-if


!$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
!   CWB 2006
!  Added logic to reset first box 14 line to 10 for emps with 6 box 14 entries
  move 0 to #14_cntr
  move 0 to #cb
   while #cb < 30
    move #cb to $cb 99
    get  $B_14 $T_14 #C_14 #14 from Box14(#cb) Box Text Column Amount
    if #14 > 0
       add 1 to #14_cntr
    end-if
    if #14_cntr = 6
      move 10 to #L_14
     end-if
    if #14_cntr > 6
      show '**** More than 6 Box 14 Entries for emplid: ' $e.ssn ', ' $e.name ' ****'
     end-if
    let #cb = #cb + 1
   end-while

  if $E.W2_State = 'PA'
    get $T_14 #C_14 #14 from Box14(5) Text Column Amount
    if #14 > 0
       do Print-PA-Box14
    end-if
    get $T_14 #C_14 #14 from Box14(#boxYN) text Column Amount    !box 14YN
    if #14 > 0
       do Print-PA-Box14
    end-if
    get $T_14 #C_14 #14 from Box14(#boxYT) text Column Amount    !box 14YT
    if #14 > 0
       do Print-PA-Box14
    end-if
    get $T_14 #C_14 #14 from Box14(#boxZN) text Column Amount    !box 14ZN
    if #14 > 0
       do Print-PA-Box14
    end-if
    if #E.Sequence_Number > 1
      let #m = 30
    else
      let #m = 6
    end-if
  end-if
!###################################################################

  while #m <= 29 and (#L_14 - #L_14_Start) < #Last_Box14_Line

!##########################################
!    get $T_14 #C_14 #14 from Box14(#m) Text Column Amount
    get $B_14 $T_14 #C_14 #14 from Box14(#m) Box Text Column Amount
    if rtrim($T_14, ' ') = ''
      move $B_14 to $T_14
    end-if
!##########################################
    if #m <> #boxYN and
       #m <> #boxYT and
       #m <> #boxZN
    if #14 > 0
      if #Align_Count <> 0
        move 61 to #C_14
        print 'XXXXX' (#L_14,#C_14,5)
      else
        print $T_14   (#L_14,#C_14,5)
      end-if
      do Format-Number(#14, $out, $F14)
      print $out ()
      add 1 to #L_14
      if $E.W2_State = 'NJ' and #m = 7    !box 14G
        do Print-NJSUT
      end-if
    end-if
    end-if
    add 1 to #m
  end-while

  if $E.W2_State = 'NJ'
    do Print-NJSUT
  end-if

  if (#L_14 - #L_14_Start) = 7
    show '#L_14: ' #L_14 ', #L_14_Start: ' #L_14_Start
    display 'Attempt to create more than 6 Box 14 entries for ' noline
    display $E.SSN noline
    display ' ' noline
    display $E.YE_Name
    do Print-Suppl-Box14
  end-if

  if #E.Sequence_Number > 1
    do Print-Suppl-Box14
  end-if
end-procedure

begin-procedure Print-Suppl-Box14
  if (#L_14 - #L_14_Start) < 3
    move #L_14_Start to #L_14
    move #C_14_Start to #C_14
    move 4 to #Last_Box14_Line
    add 2 to #L_14
    print 'FED W-2 DATA IS' (#L_14,#C_14,15)
    add 1 to #L_14
    print 'ON SEPARATE W-2' (#L_14,#C_14,15)
    add 1 to #L_14
  end-if

end-procedure
begin-procedure Print-NJSUT
begin-SELECT
CS.EMPLOYER_ID_SUT
CS.VDI_PLAN_NBR


      move &CS.VDI_Plan_Nbr to $VDI_Plan_Nbr
      let $VDI_Plan_Nbr = 'DI PP # ' || $VDI_Plan_Nbr
      let #vdi_length = length($VDI_Plan_Nbr)
      print $VDI_Plan_Nbr (#L_14,#C_14_vdi,#vdi_length)
      add 1 to #L_14

FROM  PS_CO_STATETAX_TBL CS
WHERE CS.COMPANY = $E.Company
  AND CS.STATE = 'NJ'
  AND CS.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_CO_STATETAX_TBL
       WHERE  COMPANY = $E.Company
         AND  STATE   = 'NJ'
         AND  EFFDT  <= $AsOfDate)
end-SELECT
end-procedure

!###################################################################
! CWB 2006 copied from TAX960US
begin-procedure Print-PA-Box14
#ifdef debug1
  Show 'Print PA Box14 $T_14 : '$T_14 ' #L_14:  ' #L_14 ' #C_14 : '#C_14
#endif
  print $T_14   (#L_14,#C_14,5)
  do Format-Number(#14, $out, $F14)
  print $out ()
  if #T_Count > #Align_Count
    if #j = 1
      let #Amount = #14
      do Add-Box14-Totals
    end-if
  end-if
  add 1 to #L_14

end-procedure
!###################################################################


begin-procedure Zero-Box14
  move 1 to #m
  while #m <= 29
    put 0 into Box14(#m) Amount
    add 1 to #m
  end-while
  move #L_14_Start to #L_14
end-procedure

begin-procedure Zero-Local-Table
   move 1 to #l
   while #l <= 10
      put '      ' into Locals(#l) Locality
      put 0 into Locals(#l)   TxGrs
      put 0 into Locals(#l)  Tax
      add 1 to #l
   end-while
end-procedure

begin-procedure Print-Box13
  if #Align_Count > 0
    do Print-Value('S',#L_13A,#C_13A,'Box 13A')
    do Print-Value('P',#L_13B,#C_13B,'Box 13B')
    do Print-Value('T',#L_13C,#C_13C,'Box 13C')
  end-if

  if $E.Statutory_Ee = 'Y'
    do Print-Value('X',#L_13A,#C_13A,'Box 13A')
  end-if
  if $E.Pension_Plan = 'Y'
    do Print-Value('X',#L_13B,#C_13B,'Box 13B')
  end-if
  if $E.Thirdparty_Sickpay = 'Y'
    do Print-Value('X',#L_13C,#C_13C,'Box 13C')
  end-if

end-procedure

begin-procedure Print-Intermediate-Total
  move 1 to #j
  while #j <= #FormsPerPage/#EmployeesPerPage  !loop for individual ee's
    do Next-Form
    do Print-ER-Data

    do Format-Number(#Fed_Wages_I, $out, $F01)          !Federal wages
    do Print-Value($out,#L_01,#C_01,'Box 01')

#ifdef debug1
    Show 'Print intermediate total Fed_Tax_I : '#Fed_Tax_I
#endif

    do Format-Number(#Fed_Tax_I, $out, $F02)          !Federal tax
    do Print-Value($out,#L_02,#C_02,'Box 02')

    do Format-Number(#SS_Wages_I, $out, $F03)          !SS wages
    do Print-Value($out,#L_03,#C_03,'Box 03')

    do Format-Number(#SS_Tax_I, $out, $F04)          !SS Tax
    do Print-Value($out,#L_04,#C_04,'Box 04')

    do Format-Number(#Med_Wages_I, $out, $F05)          !Medicare wages
    do Print-Value($out,#L_05,#C_05,'Box 05')

    do Format-Number(#Med_Tax_I, $out, $F06)          !Medicare tax
    do Print-Value($out,#L_06,#C_06,'Box 06')

    do Format-Number(#SS_Tips_I, $out, $F07)          !SS tips
    do Print-Value($out,#L_07,#C_07,'Box 07')

    do Format-Number(#Alloc_Tips_I, $out, $F08)          !Allocated tips
    do Print-Value($out,#L_08,#C_08,'Box 08')

    do Format-Number(#Adv_EIC_I, $out, $F09)          !EIC
    do Print-Value($out,#L_09,#C_09,'Box 09')

    do Format-Number(#Dep_Care_I, $out, $F10)          !Dependent care
    do Print-Value($out,#L_10,#C_10,'Box 10')

    do Format-Number(#Non_Qual_457_Amt_I, $out, $F11)          !non-qualified plan total
    do Print-Value($out,#L_11,#C_11,'Box 11')

    add 1 to #j
  end-while

  add #Fed_Wages_I to #Fed_Wages_T
  move 0 to #Fed_Wages_I
  add #Fed_Tax_I to #Fed_Tax_T
  move 0 to #Fed_Tax_I
  add #SS_Wages_I to #SS_Wages_T
  move 0 to #SS_Wages_I
  add #SS_Tax_I to #SS_Tax_T
  move 0 to #SS_Tax_I
  add #Med_Wages_I to #Med_Wages_T
  move 0 to #Med_Wages_I
  add #Med_Tax_I to #Med_Tax_T
  move 0 to #Med_Tax_I
  add #SS_Tips_I to #SS_Tips_T
  move 0 to #SS_Tips_I
  add #Alloc_Tips_I to #Alloc_Tips_T
  move 0 to #Alloc_Tips_I
  add #Adv_EIC_I to #Adv_EIC_T
  move 0 to #Adv_EIC_I
  add #Dep_Care_I to #Dep_Care_T
  move 0 to #Dep_Care_I
  add #Non_Qual_457_Amt_I to #Non_Qual_457_Amt_T
  move 0 to #Non_Qual_457_Amt_I
  add #401K_I to #401K_T
  move 0 to #401K_I
  add #403B_I to #403B_T
  move 0 to #403B_I
  add #408K6_I to #408K6_T
  move 0 to #408K6_I
  add #501C18D_I to #501C18D_T
  move 0 to #501C18D_I
  add #Uncoll_SS_Tax_On_Tips_I to #Uncoll_SS_Tax_On_Tips_T
  move 0 to #Uncoll_SS_Tax_On_Tips_I
  add #Uncoll_Med_Tax_On_Tips_I to #Uncoll_Med_Tax_On_Tips_T
  move 0 to #Uncoll_Med_Tax_On_Tips_I
  add #Group_Term_Life_I to #Group_Term_Life_T
  move 0 to #Group_Term_Life_I
  add #Sick_Pay_I to #Sick_Pay_T
  move 0 to #Sick_Pay_I
  add #Excise_Tax_I to #Excise_Tax_T
  move 0 to #Excise_Tax_I
  add #Business_Exp_I to #Business_Exp_T
  move 0 to #Business_Exp_I
  add #Uncoll_SS_Tax_GTL_I to #Uncoll_SS_Tax_GTL_T
  move 0 to #Uncoll_SS_Tax_GTL_I
  add #Uncoll_Med_Tax_GTL_I to #Uncoll_Med_Tax_GTL_T
  move 0 to #Uncoll_Med_Tax_GTL_I
  add #Excl_Moving_Exp_I to #Excl_Moving_Exp_T
  move 0 to #Excl_Moving_Exp_I
  add #Basic_Qtrs_and_Subsist_I to #Basic_Qtrs_and_Subsist_T
  move 0 to #Basic_Qtrs_and_Subsist_I
  add #Med_Svgs_Acct_I to #Med_Svgs_Acct_T
  move 0 to #Med_Svgs_Acct_I
  add #408P_Simple_Retirement_I to #408P_Simple_Retirement_T
  move 0 to #408P_Simple_Retirement_I
  add #Adoption_Exp_I to #Adoption_Exp_T
  move 0 to #Adoption_Exp_I
  add #NonStatutory_Stock_Opt_I to #NonStatutory_Stock_Opt_T
  move 0 to #NonStatutory_Stock_Opt_I
  add #State_Wages_I to #State_Wages_T
  move 0 to #State_Wages_I
  add #State_Tax_I to #State_Tax_T
  move 0 to #State_Tax_I
  add #Local_Wages_I to #Local_Wages_T
  move 0 to #Local_Wages_I
  add #Local_Tax_I to #Local_Tax_T
  move 0 to #Local_Tax_I

  add #OtherA_I to #OtherA_T
  move 0 to #OtherA_I
  add #OtherB_I to #OtherB_T
  move 0 to #OtherB_I
  add #OtherC_I to #OtherC_t
  move 0 to #OtherC_I
  add #OtherD_I to #OtherD_T
  move 0 to #OtherD_I
  add #OtherE_I to #OtherE_T
  move 0 to #OtherE_I
  add #OtherF_I to #OtherF_T
  move 0 to #OtherF_I
  add #OtherG_I to #OtherG_T
  move 0 to #OtherG_I
  add #OtherH_I to #OtherH_T
  move 0 to #OtherH_I
  add #OtherI_I to #OtherI_T
  move 0 to #OtherI_I
  add #OtherJ_I to #OtherJ_T
  move 0 to #OtherJ_I
  add #OtherK_I to #OtherK_T
  move 0 to #OtherK_I
  add #OtherL_I to #OtherL_T
  move 0 to #OtherL_I
  add #OtherM_I to #OtherM_T
  move 0 to #OtherM_I
  add #OtherN_I to #OtherN_T
  move 0 to #OtherN_I
  add #OtherO_I to #OtherO_T
  move 0 to #OtherO_I
  add #OtherP_I to #OtherP_T
  move 0 to #OtherP_I
  add #OtherQ_I to #OtherQ_T
  move 0 to #OtherQ_I
  add #OtherR_I to #OtherR_T
  move 0 to #OtherR_I
  add #OtherS_I to #OtherS_T
  move 0 to #OtherS_I
  add #OtherT_I to #OtherT_T
  move 0 to #OtherT_I
  add #OtherU_I to #OtherU_T
  move 0 to #OtherU_I
  add #OtherV_I to #OtherV_T
  move 0 to #OtherV_I
  add #OtherW_I to #OtherW_T
  move 0 to #OtherW_I
  add #OtherX_I to #OtherX_T
  move 0 to #OtherX_I
  add #OtherY_I to #OtherY_T
  move 0 to #OtherY_I
  add #OtherZ_I to #OtherZ_T
  move 0 to #OtherZ_I

end-procedure

begin-procedure Print-Grand-Totals

  if #Fed_Wages_I > 0
    do Format-Number(#Fed_Wages_I, $out,'999,999,999,999.99')          !Federal wages
    display 'Federal wages             ' noline
    display $out
  end-if

  if #Fed_Tax_I > 0
    do Format-Number(#Fed_Tax_I, $out,'999,999,999,999.99')          !Federal tax
    display 'Federal tax               ' noline
    display $out
  end-if

  if #SS_Wages_I > 0
    do Format-Number(#SS_Wages_I, $out,'999,999,999,999.99')          !SS wages
    display 'SS wages                  ' noline
    display $out
  end-if

  if #SS_Tax_I > 0
    do Format-Number(#SS_Tax_I, $out,'999,999,999,999.99')          !SS Tax
    display 'SS tax                    ' noline
    display $out
  end-if

  if #Med_Wages_I > 0
    do Format-Number(#Med_Wages_I, $out,'999,999,999,999.99')          !Medicare wages
    display 'Medicare wages            ' noline
    display $out
  end-if

  if #Med_Tax_I > 0
    do Format-Number(#Med_Tax_I, $out,'999,999,999,999.99')          !Medicare tax
    display 'Medicare tax              ' noline
    display $out
  end-if

  if #SS_Tips_I > 0
    do Format-Number(#SS_Tips_I, $out,'999,999,999,999.99')          !SS tips
    display 'SS tips                   ' noline
    display $out
  end-if

  if #Alloc_Tips_I > 0
    do Format-Number(#Alloc_Tips_I, $out,'999,999,999,999.99')          !Allocated tips
    display 'Allocated tips            ' noline
    display $out
  end-if

  if #Adv_EIC_I > 0
    do Format-Number(#Adv_EIC_I, $out,'999,999,999,999.99')          !EIC
    display 'EIC                       ' noline
    display $out
  end-if

  if #Dep_Care_I > 0
    do Format-Number(#Dep_Care_I, $out,'999,999,999,999.99')          !Dependent care
    display 'Dependent care            ' noline
    display $out
  end-if

  if #Non_Qual_457_Amt_I > 0
    do Format-Number(#Non_Qual_457_Amt_I, $out,'999,999,999,999.99')          !non-qualified plan total
    display 'Non-qual plan             ' noline
    display $out
  end-if

  if #Uncoll_SS_Tax_On_Tips_I > 0
    do Format-Number(#Uncoll_SS_Tax_On_Tips_I, $out,'999,999,999,999.99')         !Uncoll SS tax on tips
    display 'Uncoll SS Tax Tips Tot    ' noline
    display $out
  end-if

  if #Uncoll_Med_Tax_On_Tips_I > 0
    do Format-Number(#Uncoll_Med_Tax_On_Tips_I, $out,'999,999,999,999.99')         !Uncoll Medicare Tax on TIPS
    display 'Uncoll MED Tax TIPS       ' noline
    display $out
  end-if

  if #Group_Term_Life_I > 0
    do Format-Number(#Group_Term_Life_I, $out,'999,999,999,999.99')         !GTL
    display 'Group Term Life           ' noline
    display $out
  end-if

  if #401K_I > 0
    do Format-Number(#401K_I, $out,'999,999,999,999.99')          !401k
    display '401(K)                    ' noline
    display $out
  end-if

  if #403B_I > 0
    do Format-Number(#403B_I, $out,'999,999,999,999.99')          !403(b)
    display '403(b)                    ' noline
    display $out
  end-if

  if #408K6_I > 0
    do Format-Number(#408K6_I, $out,'999,999,999,999.99')          !408(k)6
    display '408(k)6                   ' noline
    display $out
  end-if

  if #457B_I > 0
    do Format-Number(#457B_I, $out,'999,999,999,999.99')          !457(b)
    display '457(b)                    ' noline
    display $out
  end-if

  if #501C18D_I > 0
    do Format-Number(#501C18D_I, $out,'999,999,999,999.99')          !501(c)18(d)
    display '501(c)18(d)               ' noline
    display $out
  end-if

  if #Sick_Pay_I > 0
    do Format-Number(#Sick_Pay_I, $out,'999,999,999,999.99')         !Sick Pay
    display 'Sick Pay total            ' noline
    display $out
  end-if

  if #Excise_Tax_I > 0
    do Format-Number(#Excise_Tax_I, $out,'999,999,999,999.99')         !Excise Tax
    display 'Excise Tax                ' noline
    display $out
  end-if

  if #Business_Exp_I > 0
    do Format-Number(#Business_Exp_I, $out,'999,999,999,999.99')         !Business Expense
    display 'Business Expense total    ' noline
    display $out
  end-if

  if #Uncoll_SS_Tax_GTL_I > 0
    do Format-Number(#Uncoll_SS_Tax_GTL_I, $out,'999,999,999,999.99')         !Uncoll SS Tax - GTL
    display 'Uncoll SS Tax - GTL       ' noline
    display $out
  end-if

  if #Uncoll_Med_Tax_GTL_I > 0
    do Format-Number(#Uncoll_Med_Tax_GTL_I, $out,'999,999,999,999.99')         !Uncoll Medicare Tax - GTL
    display 'Uncoll MED Tax - GTL      ' noline
    display $out
  end-if

  if #Excl_Moving_Exp_I > 0
    do Format-Number(#Excl_Moving_Exp_I, $out,'999,999,999,999.99')         !Excl Moving Exp
    display 'Excl Moving Exp           ' noline
    display $out
  end-if

  if #Basic_Qtrs_and_Subsist_I > 0
    do Format-Number(#Basic_Qtrs_and_Subsist_I, $out,'999,999,999,999.99')         !Basic Quarters & Subsistence
    display 'Quarters & Subsistence    ' noline
    display $out
  end-if

  if #Med_Svgs_Acct_I > 0
    do Format-Number(#Med_Svgs_Acct_I, $out,'999,999,999,999.99')         !Medical Spending Acct
    display 'Medical Spending Acct     ' noline
    display $out
  end-if

  if #408P_Simple_Retirement_I > 0
    do Format-Number(#408P_Simple_Retirement_I, $out,'999,999,999,999.99')         !Sec 418(p) SIMPLE Ret
    display 'Sec 418(p) SIMPLE Ret     ' noline
    display $out
  end-if

  if #Adoption_Exp_I > 0
    do Format-Number(#Adoption_Exp_I, $out,'999,999,999,999.99')         !Adoption Expenses
    display 'Adoption Expenses         ' noline
    display $out
  end-if

  if #NonStatutory_Stock_Opt_I > 0
    do Format-Number(#NonStatutory_Stock_Opt_I, $out,'999,999,999,999.99')  !NonStatutory Stock Opt
    display 'NonStatutory Stock Opt    ' noline
    display $out
  end-if

  if #State_Wages_I > 0
    do Format-Number(#State_Wages_I, $out,'999,999,999,999.99')          !State Wages
    display 'State Wages Total         ' noline
    display $out
  end-if

  if #State_Tax_I > 0
    do Format-Number(#State_Tax_I, $out,'999,999,999,999.99')          !State Taxes
    display 'State Tax Total           ' noline
    display $out
  end-if

  if #Local_Wages_I > 0
    do Format-Number(#Local_Wages_I, $out,'999,999,999,999.99')          !Local Wages
    display 'Local Wages Total         ' noline
    display $out
  end-if

  if #Local_Tax_I > 0
    do Format-Number(#Local_Tax_I, $out,'999,999,999,999.99')          !Local Taxes
    display 'Local Tax Total           ' noline
    display $out
  end-if

  if #OtherA_I > 0
    do Format-Number(#OtherA_I, $out,'999,999,999,999.99')           !Box 14A
    display 'CASDI                     ' noline
    display $out
  end-if

  if #OtherB_I > 0
    do Format-Number(#OtherB_I, $out,'999,999,999,999.99')          !Box 14B
    display 'CA-VPDI                   ' noline
    display $out
  end-if

  if #OtherC_I > 0
    do Format-Number(#OtherC_I, $out,'999,999,999,999.99')          !Box 14C
    display 'NJWDPF                    ' noline
    display $out

  end-if
  if #OtherD_I > 0
    do Format-Number(#OtherD_I, $out,'999,999,999,999.99')          !Box 14D
    display 'NJ-UI/HC                  ' noline
    display $out
  end-if

  if #OtherE_I > 0
    do Format-Number(#OtherE_I, $out,'999,999,999,999.99')          !Box 14E
    display 'NJ-SDI                    ' noline
    display $out
  end-if

  if #OtherF_I > 0
    do Format-Number(#OtherF_I, $out,'999,999,999,999.99')          !Box 14F
    display 'PA UI                     ' noline
    display $out

  end-if
  if #OtherG_I > 0
    do Format-Number(#OtherG_I, $out,'999,999,999,999.99')          !Box 14G
    display 'NJ-VPDI                   ' noline
    display $out
  end-if

  if #OtherH_I > 0
    do Format-Number(#OtherH_I, $out,'999,999,999,999.99')          !Box 14H
    display 'Other H                   ' noline
    display $out
  end-if

  if #OtherI_I > 0
    do Format-Number(#OtherI_I, $out,'999,999,999,999.99')          !Box 14I
    display 'Other I                   ' noline
    display $out
  end-if

  if #OtherJ_I > 0
    do Format-Number(#OtherJ_I, $out,'999,999,999,999.99')          !Box 14J
    display 'Other J                   ' noline
    display $out
  end-if

  if #OtherK_I > 0
    do Format-Number(#OtherK_I, $out,'999,999,999,999.99')          !Box 14K
    display 'Other K                   ' noline
    display $out
  end-if

  if #OtherL_I > 0
    do Format-Number(#OtherL_I, $out,'999,999,999,999.99')          !Box 14L
    display 'Other L                   ' noline
    display $out

  end-if
  if #OtherM_I > 0
    do Format-Number( #OtherL_I, $out,'999,999,999,999.99')          !Box 14M
    display 'Other M                   ' noline
    display $out
  end-if

  if #OtherN_I > 0
    do Format-Number(#OtherN_I, $out,'999,999,999,999.99')          !Box 14N
    display 'Other N                   ' noline
    display $out
  end-if

  if #OtherO_I > 0
    do Format-Number(#OtherO_I, $out,'999,999,999,999.99')          !Box 14O
    display 'Other O                   ' noline
    display $out
  end-if

  if #OtherP_I > 0
    do Format-Number(#OtherP_I, $out,'999,999,999,999.99')          !Box 14P
    display 'Other K                   ' noline
    display $out
  end-if

  if #OtherQ_I > 0
    do Format-Number(#OtherQ_I, $out,'999,999,999,999.99')          !Box 14Q
    display 'Other Q                   ' noline
    display $out

  end-if
  if #OtherR_I > 0
    do Format-Number( #OtherR_I, $out,'999,999,999,999.99')          !Box 14R
    display 'Other R                   ' noline
    display $out
  end-if

  if #OtherS_I > 0
    do Format-Number(#OtherS_I, $out,'999,999,999,999.99')          !Box 14S
    display 'Other S                   ' noline
    display $out
  end-if

  if #OtherT_I > 0
    do Format-Number(#OtherT_I, $out,'999,999,999,999.99')          !Box 14T
    display 'Other T                   ' noline
    display $out
  end-if

  if #OtherU_I > 0
    do Format-Number(#OtherU_I, $out,'999,999,999,999.99')          !Box 14U
    display 'Other U                   ' noline
    display $out

  end-if
  if #OtherV_I > 0
    do Format-Number( #OtherV_I, $out,'999,999,999,999.99')          !Box 14V
    display 'Other V                   ' noline
    display $out
  end-if

  if #OtherW_I > 0
    do Format-Number(#OtherW_I, $out,'999,999,999,999.99')          !Box 14W
    display 'Other W                   ' noline
    display $out
  end-if

  if #OtherX_I > 0
    do Format-Number(#OtherX_I, $out,'999,999,999,999.99')          !Box 14X
    display 'Other X                   ' noline
    display $out
  end-if

  if #OtherY_I > 0
    do Format-Number(#OtherY_I, $out,'999,999,999,999.99')          !Box 14Y
    display 'Other Y                   ' noline
    display $out
  end-if

  if #OtherZ_I > 0
    do Format-Number(#OtherZ_I, $out,'999,999,999,999.99')          !Box 14Z
    display 'Other Z                   ' noline
    display $out
  end-if

  do Format-Number(#T_Count, $out,'999,999,999')
  display 'Total forms including alignment and subtotals'  noline
  display $out

  do Format-Number(#page_count,$nbr_pages,'999,999,999')
  display 'Total number of pages printed: ' noline
  display $nbr_pages

end-procedure

begin-procedure Next-Form
  evaluate $Layout_Style
    when = '4CORNER'
    when = '4CORNERPS'
      do Next-Form-FourCorner
      break
    when = '4VERTICAL'
      do Next-Form-FourVertical
      break
    when = '2VERTICAL'
      do Next-Form-TwoVertical
      break
  end-evaluate
end-procedure

begin-procedure Next-Form-FourCorner
  if #Form# <> 4
    add  1 to #Form#
  else
    move 1 to #Form#
  end-if

  evaluate #Form#
    when = 1
      if $Layout_Style <> '4CORNERPS'
        new-page
      else
        if $First_page_PS = 'N'
          next-listing   ! for all pages except the first - layout: 4CORNERPS
        end-if
        Let $First_page_PS = 'N'
      end-if
      do Print-Value(' ',#Top_Margin,1,'Top Margin')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 2
      next-column
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 3
      next-listing
      do Print-Value(' ',#Center_Split,1,'Center Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 4
      next-column
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
  end-evaluate
end-procedure

begin-procedure Next-Form-FourVertical
#ifdef debug1
  Show 'Procedure = Next-Form-FourVertical -- $Form_ID  : '$Form_ID '  #Form# : '#Form#
#endif

  if #Form# <> 4
    add 1 to #Form#
  else
    move 1 to #form#
  end-if

  evaluate #Form#                 !use to position for next forms
    when = 1

      if $Form_ID <> 'LPS4V'
          next-listing
      else
          add 1 to #page_count
          new-page
      end-if
      do Print-Value(' ',#Top_Margin,1,'Top Margin')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 2
      next-listing
      do Print-Value(' ',#Top_Split,1,'Top Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 3
      next-listing
      do Print-Value(' ',#Center_Split,1,'Center Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 4
      next-listing
      do Print-Value(' ',#Bottom_Split,1,'Bottom Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
  end-evaluate
end-procedure

begin-procedure Next-Form-TwoVertical
#ifdef debug1
  Show 'Procedure = Next-Form-TwoVertical -- $Form_ID  : '$Form_ID '  #Form# : '#Form#
#endif
  if #Form# <> 2
    add 1 to #Form#
  else
    move 1 to #form#
  end-if

  evaluate #Form#                 !use to position for next forms
    when = 1
      new-page
      next-column
      do Print-Value(' ',#Top_Margin,1,'Top Margin')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 2
      next-listing
      do Print-Value(' ',#Center_Split,1,'Center Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
  end-evaluate
end-procedure

begin-procedure Load-W2-PRT
#ifdef debug1
  Show 'Procedure = Load-W2-PRT'
#endif

begin-SELECT
F.LAYOUT_STYLE
F.TOP_MARGIN
F.TOP_SPLIT
F.CENTER_SPLIT
F.BOTTOM_SPLIT
F.LAST_PRINT_LINE
F.LOCALS_PER_FORM
F.TAXFORM_ID

  let $Layout_Style = RTRIM(&F.Layout_Style,' ')

  move &F.Top_Margin       to #Top_Margin
  move &F.Top_Split        to #Top_Split
  move &F.Center_Split     to #Center_Split
  move &F.Bottom_Split     to #Bottom_Split
  move &F.Last_Print_Line  to #Last_Print_Line
  move &F.Locals_Per_Form  to #Locals_Per_Form
  move &F.Taxform_Id       to $Taxform_Id

! encode '<27>E<27>(0N<27>&l6D<27>&l0E<27>&l66F' into $SetupString
! print $SetupString (1,1)
!            |    |       |       |       |
!            |    |       |       |        --> 66 text lines
!            |    |       |        --> top margin = 0 lines
!            |    |        --> 6 lines per inch
!            |     --> ISO 8859-1 symbol set
!             --> Reset

FROM  PS_TAXFORM_FORM F
WHERE F.FORM_ID = &TX.Form_ID
  AND F.TAXFORM_ID = 'W'
  AND F.EFFDT   =
      (SELECT MAX(EFFDT)
       FROM   PS_TAXFORM_TBL
       WHERE  TAXFORM_ID = F.TAXFORM_ID
         AND  EFFDT  <= $AsOfDate)
end-SELECT

#ifdef debug1
  Show 'Top_Margin       = ' #Top_Margin
  Show 'Top_Split        = ' #Top_Split
  Show 'Center_Split     = ' #Center_Split
  Show 'Bottom_Split     = ' #Bottom_Split
  Show 'Last_Print_Line  = ' #Last_Print_Line
  Show 'Locals_Per_Form  = ' #Locals_Per_Form
  Show 'Taxform_Id       = ' $Taxform_Id
#endif

  do assign-year-end-variables

!#######################################################################3

let #m = 0

Begin-SELECT
N.BOX

  let $N.Box = &N.Box
  move $N.Box to $Box xx
  let $Pos3 = substr($N.Box, 3,1)

  if $Box = $YE_Other
    and $Pos3 > ' '
    let $Box14Letter = SUBSTR($N.Box,3,2)
    let $Box14Letter = rpad($Box14Letter,2,' ')
    PUT &N.BOX INTO BOX14(#m) BOX
    if $N.Box = $YE_OtherYN
       let #boxYN = #m
    end-if
    if $N.Box = $YE_OtherYT
       let #boxYT= #m
    end-if
    if $N.Box = $YE_OtherZN
       let #boxZN = #m
    end-if
    let #m=#m+1
  end-if

FROM PS_TAXFORM_BOX N WHERE
 TAXFORM_ID = 'W'
  AND N.EFFDT   =
      (SELECT MAX(EFFDT)
       FROM   PS_TAXFORM_TBL
       WHERE  TAXFORM_ID = N.TAXFORM_ID
         AND  EFFDT  <= $AsOfDate)
ORDER BY N.BOX

END-SELECT

begin-SELECT
P.BOX
P.PRINT_LINE
P.PRINT_COL
P.PRINT_FORMAT
P.PRINT_TEXT

  let $P.Box = &P.Box
  move $P.Box to $Box xx
  let $Pos3 = substr($P.Box, 3,1)
  if ($Box = $YE_Box12_StartPos or
      $Box = $YE_Other)
    and $Pos3 > ' '
    let $P.Box = &P.Box
  else
    let $P.Box = RTRIM(&P.Box,' ')
  end-if

  Do Evaluate-Print-Box             ! Found in W2prt.sqc

     if $P.Box = $YE_Other
       move &P.Print_Line   to #L_14_Start
       let $F14 = RTRIM(&P.Print_Format,' ')
     else
     if $Box = $YE_Other
       move &P.Print_Col    to #C_14_Start
       let #m = 0
       let $Box14Letter = SUBSTR($P.Box,1,4)
       While #m < 30
         Get $BoxLetter from BOX14(#m) Box
         if $BoxLetter = $Box14Letter
           let $m = #m
           let $P.Print_Text = RTRIM(&P.Print_Text,' ')
           PUT &P.Print_Col $P.Print_Text INTO BOX14(#m) COLUMN TEXT

#ifdef debug2
           Show ' $BoxLetter : '$BoxLetter noline
           show '  &P.Print_Col ' &P.Print_Col  Noline
           show '  $P.Print_Text '  $P.Print_Text
#endif

         end-if
         let #m=#m+1
       End-While
       move '  ' to $Box
      end-if
      end-if
!#######################################################################3

FROM  PS_TAXFORM_PRT P
WHERE P.FORM_ID = &TX.Form_ID
  AND P.TAXFORM_ID = 'W'
  AND P.EFFDT   =
      (SELECT MAX(EFFDT)
       FROM   PS_TAXFORM_TBL
       WHERE  TAXFORM_ID = P.TAXFORM_ID
         AND  EFFDT  <= $AsOfDate)
ORDER BY P.BOX
end-SELECT

end-procedure


begin-procedure Get-Locality-Print-Name
#ifdef debug1
  Show 'Procedure = Get-Locality-Print-Name '
#endif
 if $AlignForm  = 'Y'
    let $LocalilityPrintName =
         LPAD($x,TO_NUMBER(SUBSTR($F20,3,INSTR($F20,')',1)-2)),'X')
    move 'N' to $AlignForm
 else
 if RTRIM($E.W2_State,' ') = 'OH' and &TX.BALANCE_YEAR = 2001     !For year 2001 Warren OH requires the locality tax
  and RTRIM($Locality,' ') = '80892'                              !to be split into the first and second half of the
     move 'Y' to $LocalityNameFound                               !year.  The load program has split the balances.
     move 'Q4 WARR' to $LocalityPrintName                       !The print program just needs to change the name to
  else                                                            !describe the balances for the same locality.

      if RTRIM($E.W2_State,' ') = 'OH' and &TX.BALANCE_YEAR = 2001
      and RTRIM($Locality,' ') = '80892A'
        move 'Y' to $LocalityNameFound
        move 'Q2 WARR' to $LocalityPrintName
      else

          if RTRIM($E.W2_State,' ') = 'PA' and &TX.BALANCE_YEAR > 2011
             if  $Locality = '510101' OR
                 $WorkPSD  = '510101' OR
                 $ResPSD   = '510101'
                 move 'Y' to $LocalityNameFound
                 move 'PHILADE' to $LocalityPrintName
                 let #YE_Locality_Box_Size = 7
             else
                 if RTRIM($A.TCD_Code,' ') <> ''
                    move 'Y' to $LocalityNameFound
                    move $A.TCD_Code to $LocalityPrintName
                 else
                    if $WorkPSD = '880000' OR
                       $WorkPSD = '990000'
                       move 'Y' to $LocalityNameFound
                       let $LocalityPrintName = substr($ResPSD,1,2)
                    else
                       move 'Y' to $LocalityNameFound
                       let $LocalityPrintName = substr($WorkPSD,1,2)
                    end-if
                 end-if
             end-if

          else
              do Get-Locality-Name
          end-if

      end-if
    end-if
  end-if

 if RTRIM($E.W2_State, ' ') = 'IN' and &TX.BALANCE_YEAR > 2002
    and RTRIM($Locality,' ') <> '99990'                       !Locality 99990 represents Indiana EIC
      let $LocalityPrintName = 'C ' || $LocalityPrintName
 end-if

 if #YE_Locality_Box_Size > #MAXLOCAL
    let #YE_Locality_Box_Size = #MAXLOCAL
 end-if

 if Length($LocalityPrintName) > #YE_Locality_Box_Size
    let $LocalityPrintName = substr($LocalityPrintName,1,#YE_Locality_Box_Size)
 end-if

end-procedure

begin-procedure Get-Locality-Name
#ifdef debug1
  Show 'Procedure = Get-Locality-Name '
#endif

  move 'N' to $LocalityNameFound

begin-SELECT
L2.W2_PRT_NAME
L2.LOCALITY_ABBRV

  move 'Y' to $LocalityNameFound

FROM  PS_LOCAL_TAX_TBL2 L2
WHERE L2.STATE     = $E.W2_State
  AND L2.LOCALITY  = $Locality
  AND L2.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL2
       WHERE  STATE    = L2.STATE
         AND  LOCALITY = L2.LOCALITY
         AND  EFFDT   <= $AsOfDate)
end-SELECT

if #YE_Locality_Box_Size > #MAXLOCAL
   let #YE_Locality_Box_Size = #MAXLOCAL
end-if
  if $LocalityNameFound = 'Y' and RTRIM(&L2.W2_Prt_Name,' ') <> ''
    let $LocalityPrintName  = SUBSTR(&L2.W2_Prt_Name,1,#YE_Locality_Box_Size)
  else
    if $LocalityNameFound = 'Y' and RTRIM(&L2.Locality_Abbrv,' ') <> ''
      let $LocalityPrintName  = SUBSTR(&L2.Locality_Abbrv,1,#YE_Locality_Box_Size)
    else
       do Get-Locality-Abbrv
    end-if
  end-if
end-procedure

begin-procedure Get-Locality-Abbrv
begin-SELECT
L.LOCALITY_NAME

  let $LocalityPrintName  = SUBSTR(&L.LOCALITY_NAME,1,#YE_Locality_Box_Size)

FROM  PS_LOCAL_TAX_TBL L
WHERE L.STATE      = $E.W2_State
  AND L.LOCALITY   = $Locality
  AND L.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL
       WHERE  STATE    = L.STATE
         AND  LOCALITY = L.LOCALITY
         AND  EFFDT   <= $AsOfDate)
end-SELECT

end-procedure

begin-procedure Get-Country-Code
#ifdef debug1
  Show 'Procedure = Get-Country-Code '
#endif

begin-SELECT
CT.DESCR
FROM  PS_COUNTRY_TBL CT
WHERE CT.COUNTRY = $E.Country
end-SELECT
end-procedure

begin-procedure Prompts

  do Prompt-for-Sort

  if $SortCode1 <> '7'
    while $SelectEEs = ''
      display ''
      display 'Regular processing or Select employees?'
      input $SelectEEs 'Enter R or S'
      uppercase $SelectEEs
      if INSTR('RS',$SelectEEs,1) = 0
        display 'Enter R or S'
        move '' to $SelectEEs
      end-if
    end-while
  end-if

  if $SelectEEs = 'S'
  and $SortCode1 <> '7'
    display 'Enter EmplID or hit ENTER to stop selecting'
    move 'AND E.EMPLID in (''' to $E.SelectedEEs
    move 'AND S.EMPLID in (''' to $S.SelectedEEs
    move 'AND J.EMPLID in (''' to $J.SelectedEEs
    move ' ' to $SelectedEmplID
    while $SelectedEmplID <> ''
      input $SelectedEmplID ' '
      uppercase $SelectedEmplID
      if $SelectedEmplID <> ''
        let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
        let $S.SelectedEEs = $S.SelectedEEs || $SelectedEmplID || ''','''
        let $J.SelectedEEs = $J.SelectedEEs || $SelectedEmplID || ''','''
        move 'Y' to $EE_Selected
      end-if
    end-while

    if $EE_Selected <> 'Y'
      display ''
      display 'No employees selected. Program stopped.'
      display ''
      stop
    end-if

    let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
    let $E.SelectedEEs = $E.SelectedEEs || ')'

    let $S.SelectedEEs = SUBSTR($S.SelectedEEs,1,LENGTH($S.SelectedEEs) - 2)
    let $S.SelectedEEs = $S.SelectedEEs || ')'

    let $J.SelectedEEs = SUBSTR($J.SelectedEEs,1,LENGTH($J.SelectedEEs) - 2)
    let $J.SelectedEEs = $J.SelectedEEs || ')'
  else
    move '' to $E.SelectedEEs
    move '' to $S.SelectedEEs
    move '' to $J.SelectedEEs
  end-if
end-procedure

begin-procedure Load-Test-Data
#ifdef debug1
  Show 'Procedure = Load-Test-Data '
#endif
  let $E.Control_Number =
         LPAD($x,TO_NUMBER(SUBSTR($FA,3,INSTR($FA,')',1)-2)),'X')

  let $A.Federal_EIN =
         LPAD($x,TO_NUMBER(SUBSTR($FB,3,INSTR($FB,')',1)-2)),'X')

  let $A.Descr =
         LPAD($x,TO_NUMBER(SUBSTR($FC1,3,INSTR($FC1,')',1)-2)),'X')

  let $A.Address1 =
         LPAD($x,TO_NUMBER(SUBSTR($FC2,3,INSTR($FC2,')',1)-2)),'X')

  let $A.Address2 =
         LPAD($x,TO_NUMBER(SUBSTR($FC3,3,INSTR($FC3,')',1)-2)),'X')

  let $C4 =
         LPAD($x,TO_NUMBER(SUBSTR($FC4,3,INSTR($FC4,')',1)-2)),'X')

  let $E.SSN =
         LPAD($x,TO_NUMBER(SUBSTR($FD,3,INSTR($FD,')',1)-2)),'X')

  let $E.YE_Name =
         LPAD($x,TO_NUMBER(SUBSTR($FE,3,INSTR($FE,')',1)-2)),'X')

  let $E.YE_FName =
         LPAD($x,TO_NUMBER(SUBSTR($FE1,3,INSTR($FE1,')',1)-2)),'X')

  let $E.YE_LName =
         LPAD($x,TO_NUMBER(SUBSTR($FE3,3,INSTR($FE3,')',1)-2)),'X')

  let $E.Address1 =
         LPAD($x,TO_NUMBER(SUBSTR($FF1,3,INSTR($FF1,')',1)-2)),'X')

  let $E.Address2 =
         LPAD($x,TO_NUMBER(SUBSTR($FF2,3,INSTR($FF2,')',1)-2)),'X')

  let $F3 =
         LPAD($x,TO_NUMBER(SUBSTR($FF3,3,INSTR($FF3,')',1)-2)),'X')

  if $Form_ID <> 'LSR02A'
    let $ReprintDescr =
         LPAD($x,TO_NUMBER(SUBSTR($FReprint,3,INSTR($FReprint,')',1)-2)),'X')
  else
    let $ReprintDescr =
         LPAD($x,15,'X')
  end-if

  let $ReprintDescr1 =
         LPAD($x,TO_NUMBER(SUBSTR($FReprint1,3,INSTR($FReprint1,')',1)-2)),'X')

  let $ReprintDescr2 =
         LPAD($x,TO_NUMBER(SUBSTR($FReprint2,3,INSTR($FReprint2,')',1)-2)),'X')

  move $F01 to $01
  let $01 = TRANSLATE($01,'Bb','99')              !Federal wages
  move $01 to #Fed_Wages

  move $F02 to $02
  let $02 = TRANSLATE($02,'Bb','99')              !Federal tax
  move $02 to #Fed_Tax

  move $F03 to $03
  let $03 = TRANSLATE($03,'Bb','99')              !SS wages
  move $03 to #SS_Wages

  move $F04 to $04
  let $04 = TRANSLATE($04,'Bb','99')              !SS Tax
  move $04 to #SS_Tax

  move $F05 to $05
  let $05 = TRANSLATE($05,'Bb','99')              !Medicare wages
  move $05 to #Med_Wages

  move $F06 to $06
  let $06 = TRANSLATE($06,'Bb','99')              !Medicare tax
  move $06 to #Med_Tax

  move $F07 to $07
  let $07 = TRANSLATE($07,'Bb','99')              !SS tips
  move $07 to #SS_Tips

  move $F08 to $08
  let $08 = TRANSLATE($08,'Bb','99')              !Allocated tips
  move $08 to #Alloc_Tips

  move $F09 to $09
  let $09 = TRANSLATE($09,'Bb','99')              !EIC
  move $09 to #Adv_EIC

  move $F10 to $10
  let $10 = TRANSLATE($10,'Bb','99')              !Dependent care
  move $10 to #Dep_Care

  move $F11 to $11
  let $11 = TRANSLATE($11,'Bb','99')              !Non-qualified plans
  move $11 to #Non_Qual_457_Amt

  move $F12 to $12
  let $12 = TRANSLATE($12,'Bb','99')              !Box 12 Amounts
  move $12 to #Uncoll_SS_Tax_On_Tips
  move $12 to #Uncoll_Med_Tax_On_Tips
  move $12 to #Group_Term_Life
  move $12 to #401K

  move $F14 to $14
  let $14 = TRANSLATE($14,'Bb','99')              !Box 14 Amounts
  move $14 to #14
  move 1 to #i
  while #i <= 4
    put #14 into Box14(#i) Amount
    add 1 to #i
  end-while

  let $E.W2_State =
         LPAD($x,TO_NUMBER(SUBSTR($F15,3,INSTR($F15,')',1)-2)),'X')

  let $E.Employer_ID_SWT =
         LPAD($x,TO_NUMBER(SUBSTR($F15A,3,INSTR($F15A,')',1)-2)),'X')

  move $F16 to $16
  let $16 = TRANSLATE($16,'Bb','99')              !State wages
  move $16 to #State_Wages

  move $F17 to $17
  let $17 = TRANSLATE($17,'Bb','99')              !State tax
  move $17 to #State_Tax

  let #LOCALSIZE = TO_NUMBER(SUBSTR($F20,3,INSTR($F20,')',1)-2))

  if #LOCALSIZE > #MAXLOCAL
     let $LocalityPrintName = LPAD($x,#MAXLOCAL,'X')
  else
     let $LocalityPrintName = LPAD($x,#LOCALSIZE,'X')
  end-if

  move $F18 to $18
  let $18 = TRANSLATE($18,'Bb','99')              !Local wages
  move $18 to #Local_Wages

  move $F19 to $19
  let $19 = TRANSLATE($19,'Bb','99')              !Local tax
  move $19 to #Local_Tax

  put #Local_Wages #Local_Tax into Locals(1) TxGrs Tax
  put #Local_Wages #Local_Tax into Locals(2) TxGrs Tax

  move #Locals_Per_Form to #LocalCount
end-procedure

begin-procedure Print-Alignment-Forms
#ifdef debug1
  Show 'Procedure = Print-Alignment-Forms'
#endif

  move &TX.Align_Count to #Align_Count
  move 'Y' to $AlignForm
  let #Align_Count = #Align_Count * #FormsPerPage
  move #EmployeesPerPage to #temp
  move #FormsPerPage to #EmployeesPerPage
  move 1 to #k
  while #k <= #Align_Count
    do Load-Test-Data

    if $Form_ID <> 'LPS4V' and (#k = 1 or mod(#k - 1,4) = 0)
       do LongNameAddressEE
    end-if

    do Print-W2
    if $Form_ID = 'LW2PS' and mod(#k,4) = 0   ! For the 4th form in every page.
      do LongNameAddress
    end-if
    add 1 to #k
  end-while
  let $FirstEE = 'Y'
  move 0 to #Align_Count
  move #temp to #EmployeesPerPage
  move '' to $priorState
  move '' to $priorLocality
  move '' to $LocalityPrintName
  do Zero-Box14
end-procedure

begin-procedure Print-Value($String,#Line,#Col,$Identifier)
#ifdef debug2
  DISPLAY $String
  DISPLAY #Line
  DISPLAY #Col
  DISPLAY $Identifier
#endif

  if #Line > 0
    print $String (#Line,#Col)
  else
    display ''
    display '***************************************'
    display 'Print Line not defined for ' noline
    display $Identifier
    display 'in Tax Form Print Parameters Table.'
    display 'Program Stopped.'
    display '***************************************'
    display ''
    stop
  end-if
end-procedure


begin-procedure Convert-Parameters
#ifdef debug1
  Show 'Procedure = Convert-Parameters '
#endif

  move $RC_US_YE.Reg_Select_Proc   to $SelectEEs
  move $RC_US_YE.Reg_Select_Comp   to $SelectCompanies
  move $RC_US_YE.Sort_Code1        to $SortCode1
  move $RC_US_YE.Sort_Code3        to $SortCode3


  if $SelectEEs = 'S'
    do Read-EEs
  end-if

  if $SelectCompanies = 'C'
    do Read-Companies
  end-if

  do Create-Order-By

end-procedure

begin-procedure Create-Order-By
#ifdef debug1
  Show 'Procedure = Create-Order-By '
#endif

  move 'ORDER BY E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2

  if $SortCode1 <> '1'
    display ' '
    display 'Selected As-Of Date for retrieving the sorted data.'
    display $AsofDate

    evaluate $SortCode3
      when = '1'               !ID
        evaluate $SortCode1
          when = '2'
            move 'ORDER BY E.W2_STATE, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
          when = '3'
            move 'ORDER BY J.PAYGROUP, S.EMPLID' to $Sort1
          when = '4'
            move 'ORDER BY J.DEPTID, S.EMPLID' to $Sort1
          when = '5'
            move 'ORDER BY E.POSTAL, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
          when = '6'
            move 'ORDER BY K.MAIL_DROP, S.EMPLID' to $Sort1
          when = '7'
            move 'ORDER BY E.W2_STATE, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
        end-evaluate

      when = '2'               !SSN
        evaluate $SortCode1
          when = '2'
            move 'ORDER BY E.W2_STATE, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
          when = '3'
            move 'ORDER BY J.PAYGROUP, S1.NATIONAL_ID' to $Sort1
          when = '4'
            move 'ORDER BY J.DEPTID, S1.NATIONAL_ID' to $Sort1
          when = '5'
            move 'ORDER BY E.POSTAL, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
          when = '6'
            move 'ORDER BY K.MAIL_DROP, S1.NATIONAL_ID' to $Sort1
          when = '7'
            move 'ORDER BY E.W2_STATE, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
        end-evaluate

      when = '3'               !Name
        evaluate $SortCode1
          when = '2'
            !move 'ORDER BY E.W2_STATE,P.NAME, E.SSN, E.SEQUENCE_NUMBER' to $Sort2	!GEX-MXT commented for Upgrade 90
            move 'ORDER BY E.W2_STATE,R.NAME, E.SSN, E.SEQUENCE_NUMBER' to $Sort2	!GEX-MXT added for Upgrade 90
          when = '3'
            move 'ORDER BY J.PAYGROUP, S.NAME, S1.NATIONAL_ID' to $Sort1
          when = '4'
            move 'ORDER BY J.DEPTID, S.NAME, S1.NATIONAL_ID' to $Sort1
          when = '5'
            move 'ORDER BY E.POSTAL, R.NAME, E.SSN, E.SEQUENCE_NUMBER' to $Sort2	!GEX-MXT added for Upgrade 90
          when = '6'
            move 'ORDER BY K.MAIL_DROP, S.NAME, S1.NATIONAL_ID' to $Sort1
          when = '7'
            move 'ORDER BY E.W2_STATE, R.NAME, E.SSN, E.SEQUENCE_NUMBER' to $Sort2	!GEX-MXT added for Upgrade 90
        end-evaluate

      when = ''               ! None  - default Emplid
        evaluate $SortCode1
          when = '2'
            move 'ORDER BY E.W2_STATE, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
          when = '3'
            move 'ORDER BY J.PAYGROUP, S.EMPLID' to $Sort1
          when = '4'
            move 'ORDER BY J.DEPTID, S.EMPLID' to $Sort1
          when = '5'
            move 'ORDER BY E.POSTAL, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
          when = '6'
            move 'ORDER BY K.MAIL_DROP, S.EMPLID' to $Sort1
          when = '7'
            move 'ORDER BY E.W2_STATE, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
        end-evaluate

    end-evaluate
  else
    evaluate $SortCode3
      when = '1'
        move 'ORDER BY E.EMPLID, E.SEQUENCE_NUMBER, E.COMPANY' to $Sort2
      when = '2'
        move 'ORDER BY E.SSN, E.SEQUENCE_NUMBER, E.COMPANY'    to $Sort2
      when = '3'
	move 'ORDER BY R.NAME, E.SSN, E.SEQUENCE_NUMBER, E.COMPANY' to $Sort2	!GEX-MXT added for Upgrade 90
      when = ''
        move 'ORDER BY E.EMPLID, E.SEQUENCE_NUMBER, E.COMPANY' to $Sort2
    end-evaluate
  end-if
end-procedure


begin-procedure Read-EEs

move 'AND E.EMPLID in (''' to $E.SelectedEEs
move 'AND S.EMPLID in (''' to $S.SelectedEEs
move 'AND J.EMPLID in (''' to $J.SelectedEEs
move ' ' to $SelectedEmplID

begin-SELECT
C.SELECTED_EE

  move &C.Selected_EE     to $SelectedEmplID



  let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
  let $S.SelectedEEs = $S.SelectedEEs || $SelectedEmplID || ''','''
  let $J.SelectedEEs = $J.SelectedEEs || $SelectedEmplID || ''','''
  move 'Y' to $EE_Selected

FROM  PS_RC_TAX960US C
WHERE C.OPRID         = $Prcs_OprID
  AND C.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT


let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
let $E.SelectedEEs = $E.SelectedEEs || ')'

let $S.SelectedEEs = SUBSTR($S.SelectedEEs,1,LENGTH($S.SelectedEEs) - 2)
let $S.SelectedEEs = $S.SelectedEEs || ')'

let $J.SelectedEEs = SUBSTR($J.SelectedEEs,1,LENGTH($J.SelectedEEs) - 2)
let $J.SelectedEEs = $J.SelectedEEs || ')'

end-procedure

begin-procedure Delete-Sel-Employees-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_RC_TAX960US
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL
end-procedure

begin-procedure Read-Companies

move 'AND A.COMPANY in (''' to $A.SelectedCompanies
move 'AND W.COMPANY in (''' to $W.SelectedCompanies
move 'AND SL.COMPANY in (''' to $SL.SelectedCompanies
move 'AND C.COMPANY in (''' to $C.SelectedCompanies
move ' ' to $SelectedEmplID

begin-SELECT
D.SELECTED_COMPANY

  move &D.SELECTED_COMPANY    to $SelectedCompany

  let $A.SelectedCompanies = $A.SelectedCompanies || $SelectedCompany || ''','''
  let $W.SelectedCompanies = $W.SelectedCompanies || $SelectedCompany || ''','''
  let $SL.SelectedCompanies = $SL.SelectedCompanies || $SelectedCompany || ''','''
  let $C.SelectedCompanies = $C.SelectedCompanies || $SelectedCompany || ''','''
  move 'Y' to $Company_Selected

FROM  PS_RC_SEL_COMPANY D
WHERE D.OPRID         = $Prcs_OprID
  AND D.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT

let $A.SelectedCompanies = SUBSTR($A.SelectedCompanies,1,LENGTH($A.SelectedCompanies) - 2)
let $A.SelectedCompanies = $A.SelectedCompanies || ')'

let $W.SelectedCompanies = SUBSTR($W.SelectedCompanies,1,LENGTH($W.SelectedCompanies) - 2)
let $W.SelectedCompanies = $W.SelectedCompanies || ')'

let $SL.SelectedCompanies = SUBSTR($SL.SelectedCompanies,1,LENGTH($SL.SelectedCompanies) - 2)
let $SL.SelectedCompanies = $SL.SelectedCompanies || ')'

let $C.SelectedCompanies = SUBSTR($C.SelectedCompanies,1,LENGTH($C.SelectedCompanies) - 2)
let $C.SelectedCompanies = $C.SelectedCompanies || ')'

end-procedure

begin-procedure Delete-Sel-Company-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_RC_SEL_COMPANY
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL
end-procedure

begin-procedure Read-States

  move 'N' to $States_Selected

  let $SelectedPrint1 = 'AND EXISTS (SELECT ''X'' FROM PS_YE_AMOUNTS YA ' ||
                        'WHERE YA.COMPANY = EE.COMPANY AND YA.EMPLID = EE.EMPLID ' ||
                        'AND YA.CALENDAR_YEAR = EE.CALENDAR_YEAR AND ('
  let $SelectedPrint2 = 'AND EXISTS (SELECT ''X'' FROM PS_YE_AMOUNTS YA ' ||
                        'WHERE YA.COMPANY = J.COMPANY AND YA.EMPLID = J.EMPLID ' ||
                        'AND YA.CALENDAR_YEAR = ' || $rpt_year || ' AND ('
  let $SelectedPrint3 = 'AND ('

begin-SELECT
SS.STATE
SS.LOCALITY

  let $SelectedState    = rtrim(&SS.STATE, ' ')
  let $SelectedLocality = rtrim(&SS.LOCALITY, ' ')

  if $States_Selected = 'Y'
     let $SelectedPrint1 = $SelectedPrint1 || ' OR '
     let $SelectedPrint2 = $SelectedPrint2 || ' OR '
     let $SelectedPrint3 = $SelectedPrint3 || ' OR '
  else
     move 'Y' to $States_Selected
  end-if

  let $SelectedPrint1 = $SelectedPrint1 || '(YA.STATE = ''' || $SelectedState || ''''
  let $SelectedPrint2 = $SelectedPrint2 || '(YA.STATE = ''' || $SelectedState || ''''
  let $SelectedPrint3 = $SelectedPrint3 || '(SL.STATE = ''' || $SelectedState || ''''

  if $SelectedLocality = ''
     let $SelectedPrint1 = $SelectedPrint1 || ')'
     let $SelectedPrint2 = $SelectedPrint2 || ')'
     let $SelectedPrint3 = $SelectedPrint3 || ')'
  else
     let $SelectedPrint1 = $SelectedPrint1 || ' AND YA.LOCALITY = ''' || $SelectedLocality || ''')'
     let $SelectedPrint2 = $SelectedPrint2 || ' AND YA.LOCALITY = ''' || $SelectedLocality || ''')'
     let $SelectedPrint3 = $SelectedPrint3 || ' AND SL.LOCALITY = ''' || $SelectedLocality || ''')'
  end-if

FROM  PS_RC_SEL_STATE SS
WHERE SS.OPRID       = $Prcs_OprID
  AND SS.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-SELECT

  if $States_Selected = 'Y'
     let $SelectedPrint1 = $SelectedPrint1 || '))'
     let $SelectedPrint2 = $SelectedPrint2 || '))'
     let $SelectedPrint3 = $SelectedPrint3 || ')'
  else
     let $SelectedPrint1 = ' '
     let $SelectedPrint2 = ' '
     let $SelectedPrint3 = ' '
  end-if

end-procedure

begin-procedure Delete-Sel-State-Table
begin-SQL on-error=Ignore
DELETE FROM PS_RC_SEL_STATE
WHERE OPRID       = $Prcs_OprID
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-SQL
end-procedure


begin-procedure Ignore
! dummy procedure to avoid SQL error message on delete of empty table
end-procedure

begin-procedure LongNameAddressEE
#ifdef debug1
  show 'Procedure = LongNameAddressEE'
#endif

  new-page

  if $FirstEE = 'Y'
  and #Align_Count = 0
    do Get-EE-Address-Line3
    let $firstEE = 'N'
  end-if

  if RTRIM($E.Address2, ' ') <> ''
   if $Use_Alternate_Name = 'Y'
       print $Alternate_Name     (6,24)
   else
       print $E.YE_Name          (6,24)
   end-if
   print $E.Address1    (+1,24)
   print $E.Address2    (+1,24)
   print $F3            (+1,24)
 else
   if $Use_Alternate_Name = 'Y'
       print $Alternate_Name     (7,24)
   else
       print $E.YE_Name          (7,24)
   end-if
   print $E.Address1    (+1,24)
   print $F3            (+1,24)
 end-if
end-procedure

begin-procedure LongNameAddress

#ifdef debug1
  show 'Procedure = LongNameAddress'
#endif

  next-column

  print $A.Descr (45,2)
  print $A.Address1 (+1,2)
  if RTRIM($A.Address2, ' ') <> ''
    print $A.Address2 (+1,2)
  end-if
  print $C4 (+1,2)

  if RTRIM($E.Address2, ' ') <> ''
    if $Use_Alternate_Name = 'Y'
        print $Alternate_Name     (60,21)
    else
        print $E.YE_Name          (60,21)
    end-if
    print $E.Address1    (+1,21)
    print $E.Address2    (+1,21)
    print $F3            (+1,21)
  else
    if $Use_Alternate_Name = 'Y'
        print $Alternate_Name     (61,21)
    else
        print $E.YE_Name          (61,21)
    end-if
    print $E.Address1    (+1,21)
    print $F3            (+1,21)
  end-if

end-procedure

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'w2sort.sqc'    !Routines to sorting W-2s
#Include 'txrnctl2.sqc'  !US Year End Process Scheduler Run Controls
#Include 'taxrnctl.sqc'  !US Year End Tax Reporting Run Control record
#Include 'stdapi.sqc'    !Update Process API
#Include 'gexw2.sqc'     !Routine for W2 Year End Box variables !vendaxg added
#Include 'w2box.sqc'     !Evaluate-Box                   ! CWB 2006 added
#Include 'w2prt.sqc'     !Print Box 12                   ! CWB 2006 added
#Include 'pyxmlbld.sqc'  !Creates xml tags/elements	 ! GEX-MXT added