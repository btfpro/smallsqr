!***********************************************************************
! GEXBNWY1:  This program evaluates OK Grocery employees to the appropriate   *
!            hours worked ranges based on their benefit program.        *
!            Depending on the level of benefits which the EE evaluates
!            to, this program may insert a JOB row to trigger benefit
!            changes based on the actual hours worked in the previous 
!            year.
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE	     *	
!***********************************************************************
!  GBNC026   SXK       06/03/1998     INITIAL CREATION                 *
!  GBNC026   SXK       07/26/1999     Modified to use ongoing eligibility
!					byte for both W04 and W02 programs
!  GBNC026   SXK       08/16/1999     Modified to create run control parameters
!***********************************************************************


#include 'setenv.sqc' !Set environment

begin-setup

#include 'setup32a.sqc'

declare-report Report-log
Printer-Type=HPLASERJET
  layout=DEFAULT
end-declare

end-setup

!*********************************************************************
!Initial processing, retrieving current dates and calls the main 
!procedure to do the processing.                                     
!*********************************************************************
begin-report

  use-report Report-log

  do Init-DateTime
  do Init-Number
  do stdapi-init
  
  move 'GEXBNWY1' to $ReportID
  move 'Benefit Changes based on Actual Hours Worked' to $ReportTitle
  display $ReportTitle
  !SXK 08/16/1999 Begin
  Let $GEXXX911_Benefit_Program_Alias = 'B.BENEFIT_PROGRAM'
  !SXK 08/16/1999 End
  do Get-Current-DateTime
  let $reportdate_mm = substr($reportdate,1,2)
  let $reportdate_dd = substr($reportdate,4,2)
  let $reportdate_yy = substr($reportdate,7,2)
  do MakeYear4Digits ($reportdate_yy)

  let $reportdate_ccyyyy = $reportdate_mm||'/'||$reportdate_dd||'/'||$reportdate_yy

  do format-datetime($reportdate_ccyyyy,$reportdate_ccyy,{DEFMDY},'','NATIVE') 

  do Report
  do Commit-Transaction
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term

end-report

!*********************************************************************
!If this Program is being executed through process scheduler, 
!the run control parameters and calls the main processing procedure.
!Otherwise, interrogates the user for the run control parameters and 
!validates them. If the run control parameters are invalid, stops the
!execution.
!*********************************************************************
begin-procedure Report

date-time () hh:mi:ss &timeBegan
display 'Report Began: ' noline
display &timeBegan

 move 'N' to $Errorfound
 move 6 to #clicker_count_max

!SXK 08/16/1999 Begin
if $prcs_process_instance = ''
   do P110-SQRW-Run-Controls
else
   do P120-Process-Scheduler-Run-Controls
end-if
!SXK 08/16/1999 End

move $reportdate_ccyyyy to $rnctl_date

let $rnctl_mm = substr($rnctl_Date,1,2)
let $rnctl_dd = substr($rnctl_Date,4,2)
let $rnctl_yyyy = substr($rnctl_Date,7,4)       
let $rnctl_yy  = substr($rnctl_date,9,2)
move $rnctl_yyyy to #rnctl_yyyy
move $rnctl_yy to #rnctl_yy



 do process-employee-data

Report-Exit:


  date-time () hh:mi:ss &timeProcess
  display #InputTran 99999 noline
  display ' Transactions Processed: ' 
  display #job_inserts 99999 noline
  display ' Transactions Inserted into JOB: ' noline

  display &timeProcess

end-procedure

begin-procedure P110-SQRW-Run-Controls
  Let $BenefitProgramString = ''''
  While 1=1
    Display 'Enter Benefit Program or leave blank to exit.'
      Input $In-Benefit-Program Maxlen=3 'Benefit Program'
      Uppercase $In-Benefit-Program
      If Rtrim($In-Benefit-Program, ' ') = ''
	Concat '''' With $BenefitProgramString
	Break
      End-If
      If $BenefitProgramString <> ''''
	Concat ''',''' With $BenefitProgramString
      End-If
      Concat $In-Benefit-Program With $BenefitProgramString
    End-While

    If $BenefitProgramString = ''''''
      Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA = '1=1'
      Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_DISPLAY_CRITERIA = 'ALL'
    Else
      Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA = $GEXXX911_Benefit_Program_Alias || ' In (' || $BenefitProgramString || ')'
      Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_DISPLAY_CRITERIA = $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA
    End-If

end-procedure


begin-procedure P120-Process-Scheduler-Run-Controls

  Do GEXXX911-Select-Benefit-Program-Parameters
end-procedure


!*********************************************************************
!Prints the header information in the report log.
!*********************************************************************

begin-heading 8 for-reports=(report-log)

do get-bp-description

unstring $reporttitle by '(' into $reporttitle $temp_right

concat '(' with $reporttitle
concat $prev_bp_name with $reporttitle
concat '-' with $reporttitle
concat &DES.DESCR with $reporttitle
concat ')' with $reporttitle
 #Include 'stdhdg01.sqc'

!  date-time () DD-MON-YYYY &curr_Date 
!  print &curr_Date ()
  position (-1)
  print 'Report Log' () center bold

  position (+3)
  print 'Trans#' (,1) bold
  print 'Emplid' (,18) bold
  print 'Message' (,50) bold
  print '-' (+1,1,127) fill
 

end-heading

!*********************************************************************
!Prints the footer in the report log
!*********************************************************************

begin-footing 2 for-reports=(Report-log)
page-number (1,108) 'Page '  
last-page () ' of ' '.'

end-footing

!*********************************************************************
!Determines previous month's number of weeks to find out the weekly 
!hours worked for each employee. Calls the main benefits participation
!logic
!*********************************************************************

Begin-Procedure get-contract-pay-end-dt

begin-select on-error=sql-error-found('Get-Contract-Pay-End-Dt')
PAY.PAY_END_DT

  move &PAY.PAY_END_DT to $pay_end_Dt

FROM PS_PAY_CALENDAR PAY

WHERE PAY_END_DT = (SELECT MIN(PAY_END_DT)
   		      FROM PS_PAY_CALENDAR
		     WHERE PAY_END_DT > $contract_date)
end-select

end-procedure

!*********************************************************************
!Determines previous month's number of weeks to find out the weekly 
!hours worked for each employee. Calls the main benefits participation
!logic
!*********************************************************************

Begin-Procedure Process-Employee-Data

move 'N' to $errorfound
move 'N' to $found
!*******************************************
!Added logic to go to GEX_SQR_PROCESS table and retrieves all the 
!benefit programs that need to be run through this SQR
!*******************************************

  do Retrieve-benefit-pgms

  if $ben_pgm_found = 'N'
     display 'No Benefit Programs found for Process:GEXBNWY1'
  end-if

end-procedure

!*********************************************************************
!Retrieves each employee who participated in G01 Benefit Program and
!calls necessary procedures to determine their weekly hours. 
!********************************************************************* 

begin-procedure process-benefit-partic

move 'N' to $errorfound
move 'N' to $beninfo_found

let #whse_seq = 5

if $log_printed = 'Y'
   use-report report-log
   new-page
end-if
move $bp_name to $prev_bp_name
use-report report-log

!SXK 07/26/1999 Begin
let $year_byte_string =  ' AND substr(D.ELIG_CONFIG2,4,7) in '||
			'('||''''||'A'||&sqr.gex_init_byte||'00000'||''''||
		','||''''||'A'||&sqr.gex_year_byte||'00000'||''''||
		','||''''||'C'||&sqr.gex_year_byte||'00000'||''''||')'
let $init_compare_string = 'A'||&sqr.gex_init_byte||'00000'
let $year_compare_string = 'A'||&sqr.gex_year_byte||'00000'
let $year_compare_string_1 = 'C'||&sqr.gex_year_byte||'00000' 
show $year_byte_string
show $init_compare_string
show $year_compare_string
show $year_compare_string_1
evaluate $BP_Name
    when = 'W04'
	let $contract_mm = '09/19/'
    when = 'W02'
	let $contract_mm = '09/30/'
end-evaluate

let $contract_mdy = $contract_mm||$rnctl_yyyy

do format-datetime($contract_mdy,$contract_date,{DEFMDY},'','NATIVE') 

let $effdt_dbf = $contract_date

do get-contract-pay-end-dt

!SXK 07/26/1999 End

begin-select on-error=sql-error-found('process-benefit-partic')
B.EMPLID  &emplid
B.EMPL_RCD
to_char(B.EFFDT,'MM/DD/YYYY') &b.effdt
C.ERNCD_SPCL
C1.FIELDNAME
C1.FIELDNAME2
D.EMPL_RCD
D.EFFDT
D.EFFSEQ
D.ELIG_CONFIG1
D.ELIG_CONFIG2
D.COMPANY
D.DEPTID
D.ACCT_CD
D.JOBCODE
D.GEX_VOLUN_LOW_HRS
D.EMPL_STATUS 

   move 'Y' to $beninfo_found
   move 'N' to $skip_employee_processing

   move &emplid to $emplid
   move &D.COMPANY to $company
   move &B.EMPL_RCD to #empl_rcd

   display $emplid

   if RTRIM(&C1.FIELDNAME2,' ') <> ''
      display 'FIELDNAME2 ' noline
      display &c1.fieldname2
      Let $RelatedTo2 = 'Y'
      display '$RelatedTo2 ' noline
      display $RelatedTo2 
   end-if


   if substr(&D.ELIG_CONFIG2,4,7) = $init_compare_string !'AI00000' Used to be this SXK 07/26/1999
 
      do get-job-effdt

      if $job_effdt_found = 'Y'

         do convert-to-dtu-date($job_effdt,$job_effdt_dtu)    
         do convert-to-dtu-date($pay_end_dt,$pay_end_dt_dtu)
     
         do dtu-add-months($pay_End_Dt_dtu,-12,$prev_year_date)
  
         display 'Job Effdt:' noline
         display $job_effdt_dtu
         display 'Prev Year Date:' noline
         display $prev_year_date

        if $job_effdt_dtu > $prev_year_date
           let $skip_employee_processing = 'Y'
        end-if
      else
        let $skip_employee_processing = 'Y'
      end-if
   end-if
            
   if $skip_employee_processing = 'N'

      let #rnctl_yyyy = to_number($rnctl_yyyy)
      let #start_yy = #rnctl_yyyy - 1

      move #start_yy to $start_yy
      move $rnctl_yyyy to $end_yy      
      
      let $start_month = substr($contract_mm,1,2)

      let #start_month = to_number($start_month)
      if $Bp_name = 'W02'
         let #start_month = #start_month + 1
      end-if  
      let #end_month = #start_month

      display 'Start Month:' noline
      display #start_month
      display 'End Month:' noline
      display #end_Month

      display 'Start Year:' noline
      display $start_yy
      display 'End Year:' noline
      display $end_YY

      move $pay_end_dt to $reportdate_ccyy
      move $pay_end_dt to $effdt_dbf

      let #week_hrs = 0
      let #sum_mtd_hrs = 0

      if $start_yy = $end_yy
         do calculate-sum-of-mtd-hrs-4
      else
         do calculate-sum-of-mtd-hrs-in-range
      end-if

  !   display 'error found: ' noline
  !   display $errorfound


      move #week_hrs to $week_hrs
  
 !     display 'week hrs: ' noline
 !     display $week_hrs

    if ($errorfound = 'N')! and (#week_hrs > 0)
        display 'process elig rules'
         move 'N' to $atleast_one_found

         do process-elig-rules
         if $errorfound = 'N'
            do evaluate-config-value

         end-if
     end-if
   end-if

   add 1 to #inputtran

FROM PS_BEN_PROG_PARTIC B,
     PS_SPCL_EARNS_TBL C,
     PS_BEN_DEFN_PGM C1,
     PS_JOB D

WHERE B.BENEFIT_PROGRAM = $BP_name
  AND B.EMPLID = D.EMPLID
  AND B.EMPL_RCD = D.EMPL_RCD
  AND D.EMPL_STATUS IN ('A','L','P')
  AND D.REG_TEMP = 'E'    ! Regular Part time
!SXK 07/26/1999 Begin
!  AND substr(D.ELIG_CONFIG2,4,7) in ('AI00000','AY00000','CY00000')
[$year_byte_string]
!SXK 07/26/1999 End
!SXK 08/16/1999 Begin
  AND [$GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA]
!SXK 08/16/1999 End
  AND C1.BENEFIT_PROGRAM = B.BENEFIT_PROGRAM
  AND C1.GEX_SPCL_ACCUM_CD = C.ERNCD_SPCL
  AND B.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_BEN_PROG_PARTIC
                  WHERE EMPLID = B.EMPLID
                    AND EMPL_RCD = B.EMPL_RCD
                    AND EFFDT <= $pay_end_dt)
  AND C1.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_BEN_DEFN_PGM
                  WHERE BENEFIT_PROGRAM = $BP_name
!                    AND GEX_SPCL_ACCUM_CD = C.ERNCD_SPCL
                    AND EFFDT <= $pay_end_Dt)
  AND C.EFFDT = (SELECT MAX(C3.EFFDT)
                   FROM PS_SPCL_EARNS_TBL C3
                  WHERE C3.ERNCD_SPCL = C.ERNCD_SPCL
                    AND C3.EFF_STATUS = 'A'
                    AND C3.EFFDT <= $pay_end_Dt)
  AND D.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_JOB
                  WHERE EMPLID = D.EMPLID
                    AND EMPL_RCD = D.EMPL_RCD
                    AND EFFDT <= $pay_end_Dt)
  AND D.EFFSEQ = (SELECT MAX(EFFSEQ)
                   FROM PS_JOB
                  WHERE EMPLID = D.EMPLID
                    AND EMPL_RCD = D.EMPL_RCD
                    AND EFFDT = D.EFFDT)
end-SELECT

if $beninfo_found = 'N'
   let $emplid = ' '
   let #inputtran = 0
   do error-found
   print 'No Benefit Participation information found' (,34)
end-if
exit-process:

end-procedure

!*********************************************************************
!Retrieves Maximum of AI00000 config2 row from JOB table where
!employee first eligible to AI00000 from non-AI00000 config2
!*********************************************************************

Begin-Procedure Get-job-Effdt

move 'N' to $job_effdt_found

Begin-Select on-error=sql-error-found('Get-job-Effdt')
HB.EFFDT

  move 'Y' to $job_effdt_Found
  move &HB.EFFDT to $job_effdt
  exit-select

FROM PS_JOB HB

WHERE HB.EMPLID = $emplid
  AND HB.EMPL_RCD = #empl_rcd
  AND HB.EFFDT = (SELECT MIN(EFFDT)
		    FROM PS_JOB
		   WHERE EMPLID = $emplid
		     AND EMPL_RCD = #empl_rcd
                     AND substr(ELIG_CONFIG2,4,7) = $init_compare_string   !'AI00000'
		     AND EFFDT > (SELECT MAX(MN.EFFDT)
                                     FROM PS_JOB MN
                                    WHERE MN.EMPLID = $emplid
                                      AND MN.EMPL_RCD = #empl_rcd
                                      AND substr(MN.ELIG_CONFIG2,4,7) <> $init_compare_string !'AI00000'
                                      AND MN.EFFDT <= $pay_end_Dt))
end-select

if $job_effdt_found = 'N'
   do get-min-enroll-row
   if $job_effdt_found = 'N'
      do error-found
     !SXK 07/26/1999 Begin 
      print 'No previous ' (,34)
      print $init_compare_string ()
      print ' row found for Emplid:' ()
     !SXK 07/26/1999 End
      print $emplid ()
   end-if
end-if

end-procedure

!*********************************************************************
!Retrieves Minimum AI00000 from Job
!*********************************************************************

Begin-Procedure Get-min-enroll-row

Begin-Select on-error=sql-error-found('Get-Min-Enroll_row')
HB1.EFFDT

  move 'Y' to $job_effdt_Found
  move &HB1.EFFDT to $job_effdt
  exit-select

FROM PS_JOB HB1

WHERE HB1.EMPLID = $emplid
  AND HB1.EMPL_RCD = #empl_rcd
  AND HB1.EFFDT = (SELECT MIN(EFFDT)
		    FROM PS_JOB
		   WHERE EMPLID = $emplid
		     AND EMPL_RCD = #empl_rcd
                     AND substr(ELIG_CONFIG2,4,7) = $init_compare_string  !'AI00000'
		     AND EFFDT <= $pay_end_Dt)
end-select

end-procedure

!*********************************************************************
!Compares the existing job table config2 field and the calculated field
!and processes further
!*********************************************************************

begin-procedure Evaluate-config-value

move &D.ELIG_CONFIG2 to $elig_config2_job
move $ee_config2_val to $elig_config2

let $ee_config2_val_nospaces = rtrim($ee_config2_Val,' ')
let $ee_config2_job_nospaces = rtrim($elig_config2_job,' ')

display 'Job Config2 Value:'
display $elig_config2_job
display 'Pgm Config2 Value:'
display $ee_config2_val_nospaces
!display 'Volun Value:'
!display &d.gex_volun_low_hrs
!display $ee_config2_val_nospaces
!display $ee_config2_job_nospaces
!if $ee_config2_val_nospaces = $ee_Config2_job_nospaces

  let $ee_config2_val_5to6 = substr($ee_config2_val_nospaces,5,6)
  let $ee_config2_job_4to7 = substr($ee_config2_job_nospaces,4,7)

  do convert-to-dtu-date($pay_end_dt,$pay_end_dt_dtu)
  do dtu-add-days($pay_end_Dt_dtu,1,$curr_mm_dt_dtu)
  do convert-from-dtu-date($curr_mm_dt_dtu,$curr_mm_dt_dbf)
  do format-datetime($reportdate_ccyyyy,$reportdate_ccyy,{DEFMDY},'','NATIVE')   

   Evaluate $ee_config2_val_5to6
     when = 'A00000'
!SXK 07/26/1999 Begin
!	 evaluate $ee_config2_job_4to7 
         if $ee_config2_job_4to7 = $init_compare_string or
            $ee_config2_job_4to7 = $year_compare_string_1 
!	     when = 'AI00000'
!             when = 'CY00000'
                 let $elig_config2 = substr($elig_config2,1,3)||'A'||&Sqr.gex_year_byte||substr($elig_config2,6,5)

		 do insert-procedure            
                 add 1 to #job_inserts
!          end-evaluate
         end-if
     when = 'C00000'
!          evaluate $ee_config2_job_4to7
         if $ee_config2_job_4to7 = $year_compare_string or
            $ee_config2_job_4to7 = $init_compare_string
!	     when = 'AY00000'
!	     when = 'AI00000'
                 let $elig_config2 = substr($elig_config2,1,3)||'C'||&sqr.gex_year_byte||substr($elig_config2,6,5)
                 do insert-procedure
                 add 1 to #job_inserts
!	  end-evaluate                        
         end-if
!SXK 07/26/1999 End
   end-evaluate

end-procedure

#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
!*#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'payrnctl.sqc'  !Select-Parameters
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'readxlat.sqc'  !Read xlattable
#Include 'gexbnahp.sqc'  !
#Include 'gexxx911.sqc'
