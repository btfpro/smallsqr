!***********************************************************************
!  TAX960US:  Create W-2 Print File                                    *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/02/25:18:15:26                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  885420                                              !
!                                                                      *
! GEX_HR848_144187_01  -- 2013-10-09  ISDVMZA                          *
!                         Tax Update 13-C & 13-D Retrofit              *
!                                                                      *
!***********************************************************************

#DEFINE TAX960US        !Used for Tax Locality Sort
#include 'setenv.sqc'   !Set environment
#define PRINTER_TYPE LINEPRINTER

begin-setup
#include 'prtforml.sqc' ! Form Layout selection
                        ! Edit this file to direct output to printer
#include 'setupdb.sqc'  ! Database specific setup

!
! The escape codes, unless otherwise noted, are for PCL-compatible printers
! being used as a line printer. If the printer you are using is not
! PCL-compatible, then these codes will not work as intended. Please refer
! to the user's manual for your printer to determine the correct codes.
!

#ifndef EBCDIC                       ! If not running on IBM MVS or AS/400

#if {PRINTER_TYPE} = 'LINEPRINTER'
declare-printer LP-definition
  type=LINEPRINTER
  init-string=<27>E<27>(0N<27>&l8D<27>&l0E<27>&l88F
!                 |      |      |       |       |
!                 |      |      |       |       |
!                 |      |      |       |        --> 88 text lines
!                 |      |      |        --> top margin = 0 lines
!                 |      |       --> 8 lines per inch
!                 |       --> ISO 8859-1 symbol set
!                  --> Reset
end-declare
#endif

#else                                ! EBCDIC Ports

#if {PRINTER_TYPE} = 'LINEPRINTER'
declare-printer LP-definition
  type=LINEPRINTER

! If you intended to download the output file created by SQR to print it on a
! PCL-compatible printer attached to an ASCII-bases operating system, such as
! Windows or Unix, use the following escape codes.
!
! Note: These codes may not work as intended if the output is copied to a
!       printer defined as a directly-attached printer or a remote network
!       printer, even if the printer is PCL-compatible
!
! init-string=<39>E<39>(0N<39>&l8D<39>&l0E<39>&l88F
!             |    |       |       |       |
!             |    |       |       |        --> 88 text lines
!             |    |       |        --> top margin = 0 lines
!             |    |        --> 8 lines per inch
!             |     --> ISO 8859-1 symbol set
!              --> Reset
!
! If you intended to copy the output file created by SQR to a printer defined as
! a directly-attached printer or a remote network printer on EBCDIC-bases operating
! systems, such as MVS or OS/400, use this init-string
!
! THIS IS THE DEFAULT FOR EBCDIC SYSTEMS
!
  init-string=<241>
!             |
!              --> FCFC "1" for top of page
!

end-declare
#endif

#endif

#if {PRINTER_TYPE} = 'POSTSCRIPT'
declare-printer PS-definition
  type={PRINTER_TYPE}
  point-size=12
  font=3                                 ! Courier font

!
! add STARTUP-FILE=dir\filename to change the symbol set
!
end-declare
#endif

#if {PRINTER_TYPE} = 'HPLASERJET'
declare-printer HP-definition
  type={PRINTER_TYPE}
  symbol-set=0U                          ! ASCII symbol set
  point-size=12
  pitch=10
  font=3

end-declare
#endif

end-setup

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  display ''
  display 'Creating W-2 print file.'
  display ''

  date-time () hh:mi:ss &t1
  display 'Start at: '  noline
  display &t1

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Initialization

  if $PRCS_Process_Instance = ''
     let $SelectedPrint1 = ' '
     let $SelectedPrint2 = ' '
     let $SelectedPrint3 = ' '
     do Prompts
     if $SortCode1 = '7'
     and #Locals_Per_Form <> 1
       display '******************************************************'
       display 'Locals Per Form specifed on Tax Form Print Parameters '
       display 'Panel must be 1 for the Locality sort within State    '
       display 'to execute.                                           '
       display '******************************************************'
       display 'Locals Per Form ' noline
       display #Locals_Per_Form
       stop
     end-if
  else
     do Select-US-Year-End-Parameters
     do Convert-Parameters
  end-if
  move $RC_US_YE.Reprint_Descr to $Reprint_Descr

!**** XML Publisher
  if $XMLPublisher = 'Y'

     if $RC_US_YE.Py_W2_Type <> 'W'
        display 'Incorrect process selected. PYYEW2 is not for territory.'
        stop
     end-if

     do Get-XMLP-Definitions

     do Format-DateTime($AsOfToday, $out, {DEFYMD},'','')
     do Format-DateTime($out, $IssueDate, {DEFYMD},'','native')

     do Clear-Guide-Temp

     move 0 to #BatchSize
     move 1 to #BatchId
     let $BurstValueSave = ''

     let #FNum  = 0
     let #FStat = 0

     let $FName2 = 'TAXW21XM.xml'
     let $sourceFile2     = $FName2 || '{IMPORTSUFFIX}'
     let $sourceLocation2 = '{IMPORTPREFIX}' || ''
     let $sourceFileName2 = rtrim($sourceLocation2,' ') || rtrim($sourceFile2,' ')
     let #FNum2  = 4
     let #FStat2 = 0
     do Open-XML-File($FName2, #FNum2, #FStat2)

     if #FStat2                                      !ISDVMZA
        show 'Error opening file: ' $sourceFileName2
     end-if

     do XML-Open-Tag('USA_YearEnd', $openTag2)
     do Write-XML-Line(#Fnum2, $openTag2)

  end-if

  if &TX.Align_Count > 0 and $XMLPublisher <> 'Y'
    do Print-Alignment-Forms
  end-if

  let $MultiFormDescr   = ' '

  if $XMLPublisher = 'Y'

     if $RC_US_YE.Py_W2_Process_Type = '1'     !Original
        move ' ' to $ReprintDescr
     else
        let $FieldName = 'PY_W2_PROCESS_TYPE'
        let $FieldValue = $RC_US_YE.Py_W2_Process_Type
        do Select_From_Xlat($FieldName, $FieldValue,
                                  $ShortName, $LongName)
        move $LongName to $ReprintDescr
     end-if
  else
     if $Reprint_Descr = 'R'
       move 'REISSUED STATEMENT' to $ReprintDescr
       move 'REISSUED '          to $ReprintDescr1
       move 'STATEMENT'          to $ReprintDescr2
     else
       if $Reprint_Descr = 'C'
         move 'CORRECTED         ' to $ReprintDescr
         move 'CORRECTED'          to $ReprintDescr1
         move '         '          to $ReprintDescr2
       else
         move '                  ' to $ReprintDescr
         move '         '          to $ReprintDescr1
         move '         '          to $ReprintDescr2
       end-if
     end-if
  end-if

  do Report-File-Create

  if $XMLPublisher = 'Y'
      do Capture-OS
      do Insert-YE-Runcontrol
  end-if

  if &TX.Align_Count > 0
    add #Align_Count to #T_Count
  end-if

  if $EE_Selected = 'Y'
    do Delete-Sel-Employees-Table
  end-if

  if  $Company_Selected = 'Y'
    do  Delete-Sel-Company-Table
  end-if

  if $States_Selected = 'Y'
    do Delete-Sel-State-Table
  end-if

  if $EmployeeFound = 'N'
    display ' '
    display '****** No Employee Records Selected ******'
    display ' '
    if $XMLPublisher <> 'Y'
       new-page
       print '********************************'  (+3,1)
       print '  No Employee Records Selected  '  (+1,1)
       print '********************************'  (+1,1)
    end-if
  else

     if $XMLPublisher <> 'Y'
        display ''
        display 'Upon successful conclusion of this program, one file will have'
        display 'been created.'
        display ''
     end-if

     if $SortCode1 <> '7'
        do Print-Grand-Totals
     end-if
  end-if

!**** XML Publisher
  if $XMLPublisher = 'Y'
      do XML-Close-Tag('USA_YearEnd', $closeTag)
      do Write-XML-Line(#Fnum2, $closeTag)
      do Close-XML-File(#FNum2)

      if $RC_US_YE.Py_W2_Copy_Type = '2' and #Fnum <> 0
         do Write-XML-Line(#Fnum, $closeTag)
         do Close-XML-File(#FNum)
      end-if
  end-if

  date-time () hh:mi:ss &t2
  display 'End at: '  noline
  display &t2
end-procedure

begin-procedure Initialization

!  Short edge offset - negative or positive decipoints
!     Modify the codes below to adjust up or down -
!     PCL code &lnnZ not effective on HP4000 printers

  let $LP6 = ''
  let $LP8L = ''
  let $LP8 = ''
#if {PRINTER_TYPE} = 'LINEPRINTER'
#ifndef EBCDIC
  encode '<27>&l6D<27>&l66F' into $LP6
  encode '<27>&l3A<27>&l104F<27>&l85Z' into $LP8L
  encode '<27>&l10Z' into $LP8
#else
!  encode '<39>&l6D<39>&l66F' into $LP6
!  encode '<39>&l3A<39>&l104F<39>&l85Z' into $LP8L
!  encode '<39>&l10Z' into $LP8
#endif
#endif

  do Get-Current-DateTime
  move '1' to $MMLZero
  move '1' to $Year4
  do Format-DateTime($AsOfToday, $910Date, {DEFYMD},'','')

  move $910Date to $AsOfYear xxxx   !extract the current year
  move $AsOfYear  to #AsOfYear
  move #AsOfYear  to #saveAsOfYear
  subtract 1    from #AsOfYear

  do Get-Tax-Reporting-Run-Controls
  move &TX.BALANCE_YEAR to $rpt_year 9999

  if RTRIM(&TX.Form_ID,' ') = ''
    display '*********************************************************'
    display 'Form ID not specified on Tax Reporting Parameters Panel  '
    display 'Program stopped'
    display '*********************************************************'
    stop
  end-if

  move &TX.Employees_Per_Page to #EmployeesPerPage
  If not (#EmployeesPerPage > 0)
    display '**********************************************************************'
    display 'Employees Per Page not specified on Tax Reporting Parameters Panel    '
    display 'Program stopped'
    display '**********************************************************************'
    stop
  End-if

  let $Form_ID = RTRIM(&TX.Form_ID,' ')

  if $Form_ID = 'XMLP'
     let $XMLPublisher = 'Y'

  else
     let $XMLPublisher = 'N'
  end-if

  if $Form_ID <> 'IMP01'
    if $Form_ID <> 'LSR02A'
      if $Form_ID <> 'LSR03'
        if $Form_ID <> 'LSR03P'
          if $Form_ID <> 'LW2PS'
            if $Form_ID <> 'LSR01'
              if $Form_ID <> 'LPS4V'
                if $Form_ID <> 'XMLP'
              display '*********************************************************'
              display 'U.S. Form ID  not specified on Tax Reporting             '
              display 'Parameters Panel  - Program stopped                     '
              display '*********************************************************'
              stop
                end-if
              end-if
            end-if
          end-if
        end-if
      end-if
    end-if
  end-if

  if $Form_ID = 'LSR01'
      #ifndef LayoutW2-8
        show 'For FormId "LSR01", LayoutW2-8 should be defined in PRTFORML.SQC'
        stop
      #endif
      let #WCOLUMN1 = 2
      let #WCOLUMN2 = 42
      let #MAXLOCAL = 8
  end-if

  if $Form_ID = 'LPS4V'
      #ifndef LayoutW2-8LF
        show 'For FormId "LPS4V", LayoutW2-8LF should be defined in PRTFORML.SQC'
        stop
      #endif
      if #EmployeesPerPage <> 1
        display '*********************************************************'
        display 'Employees per page specified in Tax reporting Parameters'
        display 'must be "1" for Form ID "LPS4V".'
        display 'Program stopped'
        display '*********************************************************'
        stop
      end-if
      let #WCOLUMN1 = 2
      let #WCOLUMN2 = 42
      print $LP8L () code               ! Decipoints
      let #MAXLOCAL = 7
  end-if

  if $Form_ID = 'IMP01'
      #ifndef LayoutW2-6
        show 'For FormId "IMP01", LayoutW2-6 should be defined in PRTFORML.SQC'
        stop
      #endif
      let #WCOLUMN1 = 3
      let #WCOLUMN2 = 42
      print $LP6 () code                ! Decipoints
      let #MAXLOCAL = 7
  end-if

  if $Form_ID = 'LSR02A'
      #ifndef LayoutW2-8
        show 'For FormId "LSR02A", LayoutW2-8 should be defined in PRTFORML.SQC'
        stop
      #endif
      let #WCOLUMN1 = 2
      let #WCOLUMN2 = 42
      print $LP8 () code                ! Decipoints
      let #MAXLOCAL = 11
  end-if

  if $Form_ID = 'LSR01'
      #ifndef LayoutW2-8
        show 'For FormId "LSR01", LayoutW2-8 should be defined in PRTFORML.SQC'
        stop
      #endif
      let #WCOLUMN1 = 2
      let #WCOLUMN2 = 42
      print $LP8 () code                ! Decipoints
      let #MAXLOCAL = 11
  end-if

  if $Form_ID = 'LSR03'
      #ifndef LayoutW2-6
        show 'For FormId "LSR03", LayoutW2-6 should be defined in PRTFORML.SQC'
        stop
      #endif
      let #WCOLUMN1 = 3
      let #WCOLUMN2 = 42
      print $LP6 () code                 ! Decipoints
      let #MAXLOCAL = 7
  end-if

 if $Form_ID = 'LSR03P'
      #ifndef LayoutW2-6
        show 'For FormId "LSR03P", LayoutW2-6 should be defined in PRTFORML.SQC'
        stop
      #endif
      let #WCOLUMN1 = 3
      let #WCOLUMN2 = 42
      print $LP6 () code                   ! Decipoints
      let #MAXLOCAL = 7
  end-if

  if $Form_ID = 'LW2PS'
      #ifndef LayoutW2-8L
        show 'For FormId "LW2PS", LayoutW2-8L should be defined in PRTFORML.SQC'
        stop
      #endif
      if #EmployeesPerPage <> 1
        display '*********************************************************'
        display 'Employees per page specified in Tax reporting Parameters'
        display 'must be "1" for Form ID "LW2PS".'
        display 'Program stopped'
        display '*********************************************************'
        stop
      end-if
      let #WCOLUMN1 = 2
      let #WCOLUMN2 = 42
      print $LP8L () code                ! Decipoints
      let #MAXLOCAL = 7
  end-if

  if $Form_ID = 'XMLP'
     let #WCOLUMN1 = 3
     let #MAXLOCAL = 7
  end-if

  let $Program = 'US'
  move &TX.Balance_Year to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')

  if &TX.BALANCE_YEAR <> #AsOfYear and $Prcs_Process_Instance = ''
    display ''
    display 'Current Year is not one greater than Tax Reporting Year.'
    display 'Current Year is    ' noline
    display  #saveAsOfYear  9999
    display 'Tax Reporting Year ' noline
    display &TX.Balance_Year
    input $Answer maxlen=1 'Do you want to continue? (Y/N)'
    uppercase $Answer
    if $Answer <> 'Y'
      stop
    end-if
  end-if

  do Load-W2-PRT
  if $XMLPublisher <> 'Y'
     do Check-Box14-Print-Parameters
  end-if

!smh
  move 0 to #T_Count
!smh
  move  0 to #Form#

  if $Layout_Style = '4CORNER'
    COLUMNS #WCOLUMN1 #WCOLUMN2
    move 4 to #FormsPerPage
  end-if


  if $Layout_Style = '4CORNERPS'
    COLUMNS #WCOLUMN1 #WCOLUMN2
    move 1 to #FormsPerPage
  end-if

  if $Layout_Style = '2VERTICAL'
    COLUMNS #WCOLUMN1
    move 2 to #FormsPerPage
  end-if

  if $Layout_Style = '4VERTICAL'
    COLUMNS #WCOLUMN1
    move 4 to #FormsPerPage
  end-if

  if $Layout_Style = 'XMLP'
    COLUMNS #WCOLUMN1
    move 1 to #FormsPerPage
    move 1 to #EmployeesPerPage
  end-if

  if #EmployeesPerPage  > #FormsPerPage
     or ($Layout_Style = '4CORNER' and #EmployeesPerPage = 2)
     or ($Layout_Style = '4CORNER' and #EmployeesPerPage = 3)
     or ($Layout_Style = '4VERTICAL' and #EmployeesPerPage = 2)
     or ($Layout_Style = '4VERTICAL' and #EmployeesPerPage = 3)
    display '*********************************************************'
    display 'Employees Per Page specifed on Tax Reporting Parameters  '
    display 'Panel is not valid for the Layout Style selected         '
    display '*********************************************************'
    stop
  end-if

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

  create-array name=Box14 size=30
    field=Box:char
    field=Text:char
    field=Column:number
    field=Amount:number

  create-array name=Locals size=21
    field=Locality:char
    field=WorkPSD:char
    field=ResPSD:char
    field=TxGrs:number
    field=Tax:number

  create-array name=Locals1 size=21
    field=Locality:char
    field=WorkPSD:char
    field=ResPSD:char
    field=TxGrs:number
    field=Tax:number

end-procedure

begin-procedure Report-File-Create
  move 'N' to $EmployeeFound

  let $SortSQL10 = $Sort2

begin-SELECT
A.W2_REPORTING_CO
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.ADDRESS2
A.CITY
A.STATE
A.POSTAL
A.COUNTRY
A.TAXFORM_ID
A.TCD_CODE

  move &A.Federal_EIN     to $Federal_EIN 099999999
  move $Federal_EIN       to $A.Federal_EIN xx-xxxxxxx
  move &A.Descr           to $A.Descr
  move &A.Address1        to $A.Address1
  move &A.Address2        to $A.Address2
  move &A.Country         to $A.Country
  let  $A.City            =  RTRIM(&A.City,' ')
  let $A.State = rtrim(&A.State, ' ')
  move &A.Postal          to $A.Zip
  move &A.W2_Reporting_Co to $A.W2_Reporting_Co
  move &A.TCD_Code        to $A.TCD_Code

  UPPERCASE $A.Descr
  UPPERCASE $A.Address1
  UPPERCASE $A.Address2
  UPPERCASE $A.Country
  UPPERCASE $A.City


  let $A.Federal_EIN = substr($A.Federal_EIN,1,#YE_ER_ID_Box_Size)
  let $A.Descr = substr($A.Descr,1,#YE_ER_Name_Box_Size)
  let $A.Address1 = substr($A.Address1,1,#YE_ER_Address1_Box_Size)
  let $A.Address2 = substr($A.Address2,1,#YE_ER_Address2_Box_Size)

!smh
  !move 0 to #T_Count
!smh
  move 0 to #I_Count

  do Get-Setup-Viewing-Date

  evaluate $SortCode1

    when = '1'
    when = '2'
    when = '5'
      let $SelectedPrint = $SelectedPrint1
      do Read-Employee-Data
    break

    when = '3'
    when = '4'
    when = '6'
      let $SelectedPrint = ' '
      do W2-Sort
    break

    when = '7'
      let $SelectedPrint = ' '
      do State-Locality-Select
    break
  end-evaluate

  !if #T_Count > 41 and #I_Count > 0     commented out intermediate totals
  !  do Print-Intermediate-Total
  !end-if

FROM  PS_W2_COMPANY A
WHERE A.CALENDAR_YEAR    = &TX.BALANCE_YEAR
  AND A.W2_REPORTING_CO  = A.COMPANY
       [$A.SelectedCompanies]    !NULL string if SELECT Company option not used
  AND A.W2_REPORTING_CO <> ' '
ORDER BY A.W2_REPORTING_CO
end-SELECT
end-procedure

begin-procedure State-Locality-Select

   let $Quot      = ''''
   let $Paren     = ')'
   let $Spc       = ' '
   let $SortSQL1  = 'AND EXISTS (Select '
   let $SortSQL2  = '''X'' From PS_YE_AMOUNTS '
   let $SortSQL3  = 'WHERE COMPANY = E.COMPANY '
   let $SortSQL4  = 'AND EMPLID = E.EMPLID '
   let $SortSQL5  = 'AND CALENDAR_YEAR = E.CALENDAR_YEAR '
   let $SortSQL6  = 'AND TAXFORM_ID = E.TAXFORM_ID '
   let $SortSQL7  = 'AND SEQUENCE_NUMBER = E.SEQUENCE_NUMBER '
   let $SortSQL8  = 'AND STATE = '
   let $SortSQL9  = ' AND LOCALITY = '


begin-SELECT DISTINCT
SL.STATE
SL.LOCALITY

   let $Sort2 = $SortSQL1 || $SortSQL2 || $SortSQL3 || $SortSQL4 ||
                $SortSQL5 || $SortSQL6 || $SortSQL7 || $SortSQL8 || $Quot ||
                &SL.STATE || $Quot || $SortSQL9 || $Quot ||
                &SL.LOCALITY || $Quot || $Paren || $Spc || $SortSQL10

   if RTRIM(&SL.LOCALITY, ' ') <> ''
     do Read-Employee-Data
   end-if

FROM PS_YE_AMOUNTS SL
WHERE SL.COMPANY IN
      (SELECT COMPANY FROM PS_W2_COMPANY
        WHERE W2_REPORTING_CO = &A.W2_REPORTING_CO
          AND CALENDAR_YEAR = &TX.BALANCE_YEAR)
  AND SL.CALENDAR_YEAR  = &TX.BALANCE_YEAR
  AND SL.TAXFORM_ID     = 'W'
  [$SelectedPrint3]
end-SELECT
end-procedure

begin-procedure Read-Employee-Data

!Vendaxg added on 01/18/2009 - Begin
If $XMLPublisher = 'Y'
	Let $SelectConsent = 'AND E.EMPLID = E.EMPLID'
Else
	Let $SelectConsent = 'AND E.EMPLID NOT IN (SELECT EMPLID FROM PS_PY_YE_CONS_USA WHERE YE_CONSENT_CURRENT = ''C'')'
End-if
!Vendaxg added on 01/18/2009 - Begin
let $Local_wages =  'N'
begin-SELECT
E.COMPANY
E.EMPLID           () on-break level=1 print=never before=Before-EmplID
E.TAXFORM_ID
E.SEQUENCE_NUMBER  () on-break level=2 print=never after=After-Seq
E.CONTROL_NUMBER
E.W2_STATE
E.EMPLOYER_ID_SWT
E.SSN
E.YE_FNAME
E.YE_MIDDLE_NAME
E.YE_LNAME
E.YE_SUFFIX
E.ADDRESS1
E.ADDRESS2
E.CITY
E.STATE
E.POSTAL
E.COUNTRY
E.STATUTORY_EE
E.PENSION_PLAN
E.THIRDPARTY_SICKPAY
EE.PROCESS_FLAG
P.NAME

  move &E.Sequence_Number to #tempnum
  let $tempEmplid = &E.EmplID

  if $tempEmplid = $E.Emplid and #tempnum = #E.Sequence_Number and rtrim(&E.W2_State,' ') <> $E.W2_State
       let $Check-ID = 'Y'
  end-if


  if &E.STATUTORY_EE  = 'Y'
     move &E.STATUTORY_EE  to $E.Statutory_Ee
  end-if
  if &E.PENSION_PLAN   = 'Y'
     move &E.PENSION_PLAN  to $E.Pension_Plan
  end-if
  if &E.THIRDPARTY_SICKPAY   = 'Y'
     move &E.THIRDPARTY_SICKPAY to $E.Thirdparty_Sickpay
  end-if

  move &E.TaxForm_ID      to $E.TaxForm_ID
  move &E.Sequence_Number to #E.Sequence_Number

  move &E.Company to $E.Company

  if $Check-ID = 'Y'
     if RTRIM(&E.W2_State,' ') <> ''
       move &E.W2_State to $E.W2_State
       move &E.Employer_ID_SWT to $E.Employer_ID_SWT
     else
       if $TempST <> ' '
        let $E.W2_State  = $TempST
        let $E.Employer_ID_SWT = $TempSWT
       else
        let $E.W2_State = ' '
        let $E.Employer_ID_SWT = ' '
       end-if
     end-if
     let $Check-ID = 'N'
   else
    move &E.W2_State to $E.W2_State
    if RTRIM(&E.Employer_ID_SWT,' ') <> ''
       move &E.Employer_ID_SWT to $E.Employer_ID_SWT
    else
       let $E.Employer_ID_SWT = ' '
    end-if
   end-if

   let $E.Employer_ID_SWT = substr($E.Employer_ID_SWT,1,#YE_State_ID_Box_Size)

!  let $E.Employer_ID_SWT = substr($E.Employer_ID_SWT,1,15)

  let $TempSWT =  $E.Employer_ID_SWT
  let $TempST = $E.W2_State

  move 'Y' to $EmployeeFound

FROM  PS_YE_EE EE, PS_YE_DATA E, PS_NAMES P, PS_W2_COMPANY W
WHERE W.W2_REPORTING_CO  = &A.W2_Reporting_Co
  AND W.COMPANY          = E.COMPANY
  AND W.CALENDAR_YEAR    = E.CALENDAR_YEAR
  AND E.COMPANY          = EE.COMPANY
  AND E.EMPLID           = EE.EMPLID
  AND E.TAXFORM_ID       = 'W'
  AND E.TAXFORM_ID       = EE.TAXFORM_ID
  AND E.CALENDAR_YEAR    = EE.CALENDAR_YEAR
  AND E.CALENDAR_YEAR    = &TX.BALANCE_YEAR
  AND P.EMPLID           = EE.EMPLID
  AND P.NAME_TYPE = 'PRI'
  AND P.EFFDT =
      (SELECT MAX(PX.EFFDT)
       FROM   PS_NAMES PX
       WHERE  PX.EMPLID    = P.EMPLID
         AND  PX.NAME_TYPE = P.NAME_TYPE
         AND  PX.EFFDT    <= $AsOfDate)
  [$E.SelectedEEs]             !NULL string if SELECT EEs option not used
  [$SelectedPrint]
  [$SelectConsent]  		!Vendaxg added on 01/18/2009
  AND EE.PROCESS_FLAG   <> 'V'
[$Sort2]
end-SELECT
end-procedure

begin-procedure Before-EmplID

  move &E.EmplID   to $E.EmplID
  move 0 to #MultiForm
  let $TempSWT = ' '
  let $TempST = ' '
  let $Alternate_FName = ' '
  let $Alternate_LName = ' '

  move &E.SSN to $S123 xxx
  if $S123 = &Temp_SSN_Mask or RTRIM(&E.SSN, ' ') = ''
    move 'Applied For' to $E.SSN
  else
    move &E.SSN to $E.SSN xxx-xx-xxxx
  end-if
  move &E.YE_FNAME to $E.Name
  move &E.YE_FNAME to $E.Fname
  move &E.YE_MIDDLE_NAME to $E.MiddleName
  move &E.YE_LNAME to $E.Lname
  move &E.YE_SUFFIX to $E.Suffix
  let $E.Fname = rtrim($E.Fname, ' ')  || ' '
  let $E.Name = rtrim($E.Name, ' ')  || ' '
  let $E.MiddleName = rtrim($E.MiddleName, ' ') || ' '
  let $E.Lname = rtrim($E.Lname, ' ')  || ' '
  let $E.Suffix =rtrim($E.Suffix, ' ')
  if $E.MiddleName <> ' '
    let $E.YE_Name = $E.Name || $E.MiddleName || $E.Lname  || $E.Suffix
  else
    let $E.YE_Name = $E.Name || $E.Lname  || $E.Suffix
  end-if

  move $E.YE_Name to $YE_Name
  move $YE_Name to $E.YE_Name

  if $E.MiddleName <> ' '
    let $E.YE_Fname = $E.Fname || $E.MiddleName
  else
    let $E.YE_Fname = $E.Fname
  end-if

  let $E.YE_Lname = $E.Lname
  move $E.YE_Fname to $YE_Fname
  move $YE_Fname to $E.YE_Fname

  move $E.YE_LName to $YE_LName
  move $YE_LName to $E.YE_LName

  move $E.Suffix to $E.YE_Suffix
  move $E.YE_Suffix to $E.Suffix

!new code
  let $Use_Alternate_Name = 'N'

  if (($Form_ID = 'LSR03' or $Form_ID = 'LSR03P' or $Form_ID = 'XMLP')  and (Length($E.YE_FName) > #YE_EE_FName_Box_Size
                           or Length($E.YE_LName) > #YE_EE_LName_Box_Size))
  or (($Form_ID <> 'LSR03' and $Form_ID <> 'LSR03P') and Length($E.YE_Name)  > #YE_EE_FullName_Box_Size)
      let $Use_Alternate_Name = 'Y'
      if $E.MiddleName <> ' '
          Let $Alternate_Name = substr($E.YE_FName,1,1) || ' ' || substr($E.MiddleName,1,1) || ' ' ||$E.YE_LName
      else
          Let $Alternate_Name = substr($E.YE_Fname,1,1) || ' ' || $E.YE_LName
      end-if
      if $Form_ID = 'LSR03' or $Form_ID = 'LSR03P' or $Form_ID = 'XMLP'
         Let $Alternate_Name = substr($Alternate_Name,1,(#YE_EE_FName_Box_Size + #YE_EE_LName_Box_Size))
      else
         Let $Alternate_Name = substr($Alternate_Name,1,#YE_EE_FullName_Box_Size)
      end-if

      let $Alternate_FName = substr($Alternate_Name,1,#YE_EE_FName_Box_Size)
      let $Alternate_LName = substr($Alternate_Name,(#YE_EE_FName_Box_Size + 1),#YE_EE_LName_Box_Size)

  end-if


  let $Use_Alternate_Name_flap = 'N'

  if ($Form_ID = 'LPS4V' or $Form_ID = 'XMLP')
      if Length($E.YE_Name) > 55
         let $Use_Alternate_Name_flap = 'Y'
         if $E.MiddleName <> ' '
            Let $Alternate_Name_flap = substr($E.YE_FName,1,1) || ' ' || substr($E.MiddleName,1,1) || ' ' || $E.YE_LName || $E.YE_Suffix
         else
            Let $Alternate_Name_flap = substr($E.YE_Fname,1,1) || ' ' || $E.YE_LName || $E.YE_Suffix
         end-if
      else
         Let $E.YE_Name_flap = $E.YE_Name
      end-if
  end-if


!new code

  move &E.Control_Number  to $E.Control_Number
  move &E.Address1        to $E.Address1
  move &E.Address2        to $E.Address2
  move &E.Country         to $E.Country
  let  $E.City            =  RTRIM(&E.City,' ')
  let $E.State = rtrim(&E.State, ' ')
  move &E.Postal          to $E.Zip

  uppercase $E.YE_Name
  uppercase $E.YE_Suffix
  uppercase $E.Address1
  uppercase $E.Address2
  uppercase $E.Country
  uppercase $E.City

  let $E.YE_Name_flap  = substr($E.YE_Name,1,55)
  let $E.Address1_flap = substr($E.Address1,1,55)
  let $E.Address2_flap = substr($E.Address2,1,55)

  let $E.Control_Number = substr($E.Control_Number,1,#YE_Control_Nbr_Box_Size)
  let $E.SSN = substr($E.SSN,1,#YE_EE_SSN_Box_Size)
  let $E.YE_Name = substr($E.YE_Name,1,#YE_EE_FullName_Box_Size)
  let $E.Address1 = substr($E.Address1,1,#YE_EE_Address1_Box_Size)
  let $E.Address2 = substr($E.Address2,1,#YE_EE_Address2_Box_Size)

  let $E.YE_FName = substr($E.YE_Fname,1,#YE_EE_FName_Box_Size)
  let $E.YE_LName = substr($E.YE_LName,1,#YE_EE_LName_Box_Size)
  let $E.YE_Suffix = substr($E.YE_Suffix,1,#YE_EE_Suffix_Box_Size)

  if $Form_ID = 'LPS4V'
  and #Align_Count = 0
      do Get-EE-Address-Line3
  end-if

  if #T_Count = 0
    move 0 to #Form#
  end-if

  if #OPT_BLK.PY_RPT_BATCH_SIZE > 0
     add 1 to #BatchSize
     if #BatchSize > #OPT_BLK.PY_RPT_BATCH_SIZE
        move 0 to #BatchSize
        add 1 to #BatchId
     end-if
  end-if

end-procedure


begin-procedure After-Seq
  let #SW-keep18 = 0
  let #SW-keep19 = 0
  do Load-Amounts
  if #SW-keep18 > 0
     PUT #TotBox18 INTO LOCALS(#PosIdx18) TXGRS
     let #SW-keep18 = 0
  end-if
  if #SW-keep19 > 0
     PUT #TotBox19 INTO LOCALS(#PosIdx19) TAX
     let #SW-keep19 = 0
  end-if

  let #IndREsp=0
  let #IndLocal=0
  while #IndLocal < #LocalCount
    add 1 to #IndLocal
    get $Locality $WorkPSD $ResPSD #Local_Wages #Local_Tax from LOCALS(#IndLocal)
    let $Locality = RTRIM($Locality,' ')
    if $Locality<>''
       add 1 to #IndResp
       put $Locality $WorkPSD $ResPSD #Local_Wages #Local_Tax into LOCALS1(#IndResp)
    end-if
  end-while

  let #IndLocal=0
  while #IndLocal < #IndResp
    add 1 to #IndLocal
    get $Locality $WorkPSD $ResPSD #Local_Wages #Local_Tax from LOCALS1(#IndLocal)
    put $Locality $WorkPSD $ResPSD #Local_Wages #Local_Tax into LOCALS(#IndLocal)
  end-while

  let #LocalCount=#IndResp

  if #LocalCount > 2
    move 1 to #MultiForm
  end-if

  do Print-W2

  if $RC_US_YE.Py_W2_Copy_Type = '2' and $XMLPublisher = 'Y'
      do Insert-Guide-Data
  end-if

  if &E.Sequence_Number = 1
    add 1 to #I_Count
  end-if

  let $Local_wages =  'N'

  !if #I_Count = 41                  commented out intermediate totals
  !  do Print-Intermediate-Total
  !  move 0 to #I_Count
  !end-if
end-procedure

begin-procedure Print-W2

  move 'N' to $Combat_Pay
  if $SortCode1 <> '7'
    do Identify-Box12-Entries
    let $Box12PrintString = SUBSTR($Box12CheckString,1,8)
  end-if

  move 'N'  to $NJ_VPFLI
  move 'N'  to $NJ_DI
  move 'N'  to $NJ_UI
  move 'N'  to $NJFLI_Printed
  move 0 to #NJFLI_VPFLI_Tot
  move 0 to #NextLocal
  move 0 to #HoldNextLocal
  move 1 to #j

  if #EmployeesPerPage > 0 or $XMLPublisher = 'Y'
    while (#j <= #FormsPerPage/#EmployeesPerPage) or $XMLPublisher = 'Y'  !loop for individual ee's

      if $Form_ID = 'LPS4V'
         and #Align_Count = 0
         and #j = 1
          do LongNameAddressEE
      end-if

      do Next-Form
      do Print-ER-Data
      do Print-EE-Data
      do Print-Fed-State-Amounts

      if #LocalCount > 0 or #Align_Count > 0
         move #HoldNextLocal to #NextLocal
         if $SortCode1 <> '7'
            do Print-Local-Amounts
         else
            do Print-Locality-Sort-Amounts
         end-if
      end-if

      do Print-Box14

      if &TX.BALANCE_YEAR > 2008
         if ($NJ_UI = 'N' or $NJ_DI = 'N') and (#NJFLI_VPFLI_Tot <> 0) and  #Align_Count = 0
            if $Form_ID <> 'LSR02A'
               do Print-NJFLI                  ! Print NJ FLI data on original page
               let $NJFLI_Printed = 'Y'
            end-if
         end-if
      end-if

      if #E.Sequence_Number = 1 or #Align_Count > 0
         do Print-Box13
      end-if

      if $SortCode1 <> '7'
         do Print-Box12
      end-if

      add 1 to #j

      if $XMLPublisher = 'Y'

         do XML-Close-Tag('W2_Data', $closeTag)

         if ($RC_US_YE.Py_W2_Copy_Type = '2' and $Consent <> 'C') or
            $RC_US_YE.Py_W2_Copy_Type <> '2'

            do Write-XML-Line(#Fnum2, $closeTag)
         end-if

         if $RC_US_YE.Py_W2_Copy_Type = '2' and #FNum <> 0
            do Write-XML-Line(#Fnum, $closeTag)
         end-if

         BREAK
      end-if
   end-while

   if $Form_ID = 'LW2PS' and #Align_Count = 0
      do LongNameAddress
   end-if
  end-if

  if $NJFLI_Printed = 'Y'
     move 0 to #NJFLI_VPFLI_Tot
  end-if

  if $SortCode1 <> '7'
     !*** GEX_HR848_144187_01  -- 2013-10-09  ISDVMZA  Begin  ***!
     !let $Box12CheckString = substr($Box12CheckString,9,100)
     let #Len_Box12Print = length($Box12PrintString)
     let #Len_Box12Check = length($Box12CheckString)
     let $Box12CheckString = SUBSTR($Box12CheckString,(#Len_Box12Print + 1),(#Len_Box12Check  - #Len_Box12Print) )
     !*** GEX_HR848_144187_01  -- 2013-10-09  ISDVMZA  End  ***!

    while $Box12CheckString <> ''
      let $Box12PrintString = SUBSTR($Box12CheckString,1,8)
      move 1 to #j
      while #j <= #FormsPerPage/#EmployeesPerPage  !loop for individual ee's

        if $Form_ID = 'LPS4V'
        and #Align_Count = 0
        and #j = 1
           do LongNameAddressEE
        end-if

        do Next-Form
        do Print-ER-Data
        do Print-EE-Data
        do Print-Box12

        if #NJFLI_VPFLI_Tot <> 0  and  #Align_Count = 0 and &TX.BALANCE_YEAR > 2008
           do Print-NJFLI        ! Print NJ FLI data on overflow page
        end-if

        move #L_14_Start to #L_14
        move 1 to #box14Count
        do Print-Suppl-Box14
        add 1 to #j

        if $XMLPublisher = 'Y'
           do XML-Close-Tag('W2_Data', $closeTag)

           if ($RC_US_YE.Py_W2_Copy_Type = '2' and $Consent <> 'C') or
              $RC_US_YE.Py_W2_Copy_Type <> '2'

              do Write-XML-Line(#Fnum2, $closeTag)
           end-if

           if $RC_US_YE.Py_W2_Copy_Type = '2' and #FNum <> 0
              do Write-XML-Line(#Fnum, $closeTag)
           end-if
        end-if

      end-while
      if $Form_ID = 'LW2PS' and #Align_Count = 0
        do LongNameAddress
      end-if
      !*** GEX_HR848_144187_01  -- 2013-10-09  ISDVMZA  Begin  ***!
      !let $Box12CheckString = LTRIM($Box12CheckString,$Box12PrintString)
      let #Len_Box12Print = length($Box12PrintString)
      let #Len_Box12Check = length($Box12CheckString)
      let $Box12CheckString = SUBSTR($Box12CheckString,(#Len_Box12Print + 1),(#Len_Box12Check  - #Len_Box12Print) )
      !*** GEX_HR848_144187_01  -- 2013-10-09  ISDVMZA  End  ***!
      let #NJFLI_VPFLI_Tot = 0
    end-while
  end-if


  !Print NJ FLI on an overflow page

  if #NJFLI_VPFLI_Tot <> 0  and  #Align_Count = 0  and &TX.BALANCE_YEAR > 2008

      move 1 to #j
      while #j <= #FormsPerPage/#EmployeesPerPage  !loop for individual ee's

        if $Form_ID = 'LPS4V'
        and #Align_Count = 0
        and #j = 1
           do LongNameAddressEE
        end-if

        do Next-Form
        do Print-ER-Data
        do Print-EE-Data
        do Print-NJFLI

        move #L_14_Start to #L_14
        move 1 to #box14Count
        do Print-Suppl-Box14
        add 1 to #j

        if $XMLPublisher = 'Y'
           do XML-Close-Tag('W2_Data', $closeTag)

           if ($RC_US_YE.Py_W2_Copy_Type = '2' and $Consent <> 'C') or
              $RC_US_YE.Py_W2_Copy_Type <> '2'

              do Write-XML-Line(#Fnum2, $closeTag)
           end-if

           if $RC_US_YE.Py_W2_Copy_Type = '2' and #FNum <> 0
              do Write-XML-Line(#Fnum, $closeTag)
           end-if
        end-if

      end-while

      let #NJFLI_VPFLI_Tot = 0
  end-if


  if $SortCode1 <> '7'
    while #NextLocal < #LocalCount
      move #NextLocal to #HoldNextLocal
      move 1 to #j
      if #EmployeesPerPage > 0
       while #j <= #FormsPerPage/#EmployeesPerPage  !loop for individual ee's

        if $Form_ID = 'LPS4V'
        and #Align_Count = 0
        and #j = 1
           do LongNameAddressEE
        end-if

        do Next-Form
        do Print-ER-Data
        do Print-EE-Data
        move #HoldNextLocal to #NextLocal
        do Print-Local-Amounts

        move #L_14_Start to #L_14
        move 1 to #box14Count
        do Print-Suppl-Box14
        add 1 to #j

        if $XMLPublisher = 'Y'
           do XML-Close-Tag('W2_Data', $closeTag)

           if ($RC_US_YE.Py_W2_Copy_Type = '2' and $Consent <> 'C') or
              $RC_US_YE.Py_W2_Copy_Type <> '2'

              do Write-XML-Line(#Fnum2, $closeTag)
           end-if

           if $RC_US_YE.Py_W2_Copy_Type = '2' and #FNum <> 0
              do Write-XML-Line(#Fnum, $closeTag)
           end-if

        end-if

       end-while
       if $Form_ID = 'LW2PS' and #Align_Count = 0
         do LongNameAddress
       end-if
      end-if
    end-while
  end-if

  move 0 to #Fed_Wages
  move 0 to #Fed_Tax
  move 0 to #SS_Wages
  move 0 to #SS_Tax
  move 0 to #Med_Wages
  move 0 to #Med_Tax
  move 0 to #SS_Tips
  move 0 to #Alloc_Tips
  move 0 to #Adv_EIC
  move 0 to #Dep_Care
  move 0  to #Non_Qual_457_Amt
  move 'N' to $Non_Qual_457_Y
  move 'N' to $Non_Qual_457_N
  move 0 to #Uncoll_SS_Tax_On_Tips
  move 0 to #Roth_401K
  move 0 to #Uncoll_Med_Tax_On_Tips
  move 0 to #Roth_403B
  move 0 to #HIRE_WTips
  move 0 to #ER_Health_Cost
  move 0 to #Roth_457B
  move 0 to #Group_Term_Life
  move 0 to #401K
  move 0 to #403B
  move 0 to #408K6
  move 0 to #457B
  move 0 to #501C18D
  move 0 to #Sick_Pay
  move 0 to #Excise_Tax
  move 0 to #Business_Exp
  move 0 to #Uncoll_SS_Tax_GTL
  move 0 to #Uncoll_Med_Tax_GTL
  move 0 to #Excl_Moving_Exp
  move 0 to #Basic_Qtrs_and_Subsist
  move 0 to #Combat_Pay
  move 0 to #Med_Svgs_Acct
  move 0 to #408P_Simple_Retirement
  move 0 to #Adoption_Exp
  move 0 to #NonStatutory_Stock_Opt
  move 0 to #HSA_Employer_Contrib
  move 0 to #409A_Def_NQ_Def_Comp
  move 0 to #409A_Inc_NQ_Def_Comp
  move 0 to #State_Wages
  move 0 to #State_Tax
  move 0 to #OtherA
  move 0 to #OtherB
  move 0 to #OtherC
  move 0 to #OtherD
  move 0 to #OtherE
  move 0 to #OtherF
  move 0 to #OtherG
  move 0 to #OtherH
  move 0 to #OtherI
  move 0 to #OtherJ
  move 0 to #OtherK
  move 0 to #OtherL
  move 0 to #OtherM
  move 0 to #OtherN
  move 0 to #OtherO
  move 0 to #OtherP
  move 0 to #OtherQ
  move 0 to #OtherR
  move 0 to #OtherS
  move 0 to #OtherT
  move 0 to #OtherU
  move 0 to #OtherV
  move 0 to #OtherW
  move 0 to #OtherX
  move 0 to #OtherY
  move 0 to #OtherYN
  move 0 to #OtherYT
  move 0 to #OtherZ
  move 0 to #OtherZN
  if #Align_Count = 0
    do Zero-Box14
  end-if
  if #LocalCount > 0
    do Zero-Local-Table
  end-if

  move ' ' to $E.Statutory_Ee
  move ' ' to $E.Pension_Plan
  move ' ' to $E.Thirdparty_Sickpay

end-procedure

begin-procedure Print-ER-Data

  if $XMLPublisher = 'Y'

! create burst value for this slip
     move &TX.Balance_Year to $CalYear 9999
     let $BurstValue = rtrim($E.EmplID, ' ') || $CalYear
     let $BurstValue = $BurstValue || rtrim(&A.W2_Reporting_Co, ' ') || 'W2'

     do format-number(#E.SEQUENCE_NUMBER, $W2SeqNo, '09')
     let $BurstValue = $BurstValue || $W2SeqNo
!
     if $RC_US_YE.Py_W2_Copy_Type = '2'

        if $BurstValue <> $BurstValueSave

           if $BurstValueSave <> ''
!              do XML-Close-Tag('W2_Data',$closeTag)
!              do Write-XML-Line(#Fnum, $closeTag)
              do XML-Close-Tag('USA_YearEnd', $closeTag)
              do Write-XML-Line(#Fnum, $closeTag)
              do Close-XML-File(#FNum)
           end-if

           move $BurstValue to $BurstValueSave

           let $FName = rtrim($BurstValue,' ') || '.xml'
           let $sourceFile     = $FName || '{IMPORTSUFFIX}'
           let $sourceLocation = '{IMPORTPREFIX}' || ''
           let $sourceFileName = rtrim($sourceLocation,' ') || rtrim($sourceFile,' ')
           let #FNum  = 3
           let #FStat = 0
           do Open-XML-File($FName, #FNum, #FStat)

           if #FStat                                        !ISDVMZA
              show 'Error opening file: ' $sourceFileName
           end-if

           do XML-Open-Tag('USA_YearEnd', $openTag)
           do Write-XML-Line(#Fnum, $openTag)
        end-if
     end-if

     do XML-Open-Tag('W2_Data', $openTag)

     if $RC_US_YE.Py_W2_Copy_Type = '2' and #FNum <> 0
        do Write-XML-Line(#Fnum, $openTag)
     end-if

     do Get-SS-Consent
     if ($RC_US_YE.Py_W2_Copy_Type = '2' and $Consent <> 'C') or
         $RC_US_YE.Py_W2_Copy_Type <> '2'
        do Write-XML-Line(#Fnum2, $openTag)
     end-if

     do Build-XML-Line('BURST_VALUE', $BurstValue, 'Y', #FNum, #FNum2, $UserFlag)
     do Build-XML-Line('EMPLID', $E.EmplID, 'Y', #FNum, #FNum2, $UserFlag)

     do format-number(#BatchId, $W2Batch, '09999')
     do Build-XML-Line('BATCH_ID', $W2Batch, 'Y', #FNum, #FNum2, $UserFlag)

  end-if

  if $XMLPublisher = 'Y'
     do Build-XML-Line('ER_EIN', $A.Federal_EIN, 'Y', #FNum, #FNum2, $UserFlag)
     do Build-XML-Line('Box_Year', $CalYear, 'Y', #FNum, #FNum2, $UserFlag)
  else

    if #Form# = 2 and $Form_ID = 'LSR03P' and &TX.BALANCE_YEAR = 2004
      let #L_B = #L_B + 1
      do Print-Value($A.Federal_EIN,#L_B,#C_B,'Box B')
      let #L_B = #L_B - 1
    else
      do Print-Value($A.Federal_EIN,#L_B,#C_B,'Box B')
    end-if
  end-if

  if $XMLPublisher = 'Y'
     do Build-XML-Line('ER_Name', $A.Descr, 'Y', #FNum, #FNum2, $UserFlag)
     do Build-XML-Line('ER_Address1', $A.Address1, 'Y', #FNum, #FNum2, $UserFlag)
  else
     do Print-Value($A.Descr,#L_C1,#C_C1,'Box C1')
     do Print-Value($A.Address1,#L_C2,#C_C2,'Box C2')
  end-if

  if RTRIM($A.Address2, ' ') <> ''
     if $XMLPublisher = 'Y'
        do Build-XML-Line('ER_Address2', $A.Address2, 'Y', #FNum, #FNum2, $UserFlag)
     else
        do Print-Value($A.Address2,#L_C3,#C_C3,'Box C3')
     end-if
     move 'N' to $LineShift
  else
    move 'Y' to $LineShift
  end-if

  if #Align_Count = 0
    if $A.Country = 'USA'
      move $A.Zip            to $A.ZipExtsn ~~~~~~xxxx
      if instr($A.Zip,'-',6) = 0
      and $A.ZipExtsn <> '    '
        let $A.Zip = substr($A.Zip,1,5) || '-' || substr($A.Zip,6,4)
      end-if
      let $C4 = $A.City || ' ' || $A.State || ' ' || $A.Zip
      if length($C4) > #YE_State_City_Zip_Box_Size
          let #newlen = length($A.City) + #YE_State_City_Zip_Box_Size - length($C4)
          let $C4 = substr($A.City,1,#newlen) || ' ' || $A.State || ' ' || $A.Zip
      end-if
    else
      let $C4 = $A.City || ' ' || $A.State || ' ' ||
              $A.Country || ' ' || $A.Zip
      if length($C4) > #YE_State_City_Zip_Box_Size
          let #newlen = length($A.City) + #YE_State_City_Zip_Box_Size - length($C4)
          let $C4 = substr($A.City,1,#newlen) || ' ' || $A.State || ' ' ||
                  $A.Country || ' ' || $A.Zip
      end-if
    end-if
  end-if
  if $LineShift = 'Y'
    let #PrintLine = #L_C3
  else
    let #PrintLine = #L_C4
  end-if

  if $XMLPublisher = 'Y'
     if RTRIM($A.Address2, ' ') <> ''
        do Build-XML-Line('ER_Address3', $C4, 'Y', #FNum, #FNum2, $UserFlag)
     else
        do Build-XML-Line('ER_Address2', $C4, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
  else
     do Print-Value($C4,#PrintLine,#C_C4,'Box C4')
  end-if
end-procedure

begin-procedure Print-EE-Data
  add 1 to #T_Count

  if $XMLPublisher = 'Y'
     do Build-XML-Line('EE_SSN', $E.SSN, 'Y', #FNum, #FNum2, $UserFlag)
  else
     if &TX.Balance_Year > 2006
        do Print-Value($E.SSN,#L_A,#C_A,'Box A')
     else
        do Print-Value($E.Control_Number,#L_A,#C_A,'Box A')
     end-if
  end-if

  Evaluate $Form_id

    when = 'LPS4V'
    when = 'LSR01'
      do Print-Value($ReprintDescr1, #L_R1, #C_R1, 'Box R1')
      do Print-Value($ReprintDescr2, #L_R2, #C_R2, 'Box R2')
      break
    when = 'LSR02A'
      if #Form# < 3
         do Print-Value($ReprintDescr1, #L_R1, #C_R1, 'Box R1')
         do Print-Value($ReprintDescr2, #L_R2, #C_R2, 'Box R2')
       else
         do Print-Value($ReprintDescr, 40, 11, 'Box R')
       end-if
       break
    when = 'XMLP'
       if $XMLPublisher = 'Y'
          do Build-XML-Line('Box_R', $ReprintDescr, 'Y', #FNum, #FNum2, $UserFlag)
       end-if
       break
    when-other
       do Print-Value($ReprintDescr, #L_R, #C_R, 'Box R')
       break
   end-evaluate

  if $Form_ID <> 'LPS4V'
     if &EE.Process_Flag = 'V' or #Align_Count <> 0
        if $XMLPublisher = 'Y'
           do Build-XML-Line('Box_V', 'Y', 'Y', #FNum, #FNum2, $UserFlag)
        else
           do Print-Value('X',#L_V,#C_V,'Box V')
        end-if
     end-if
  end-if

  if $XMLPublisher = 'Y'
     do Build-XML-Line('Control_Number', $E.Control_Number, 'Y', #FNum, #FNum2, $UserFlag)
  else
     if &TX.Balance_Year > 2006
        do Print-Value($E.Control_Number,#L_D,#C_D,'Box D')
     else
        do Print-Value($E.SSN,#L_D,#C_D,'Box D')
     end-if
  end-if

  if $XMLPublisher = 'Y'
     if $Use_Alternate_Name = 'Y'
       do Build-XML-Line('EE_FirstName', $Alternate_FName, 'Y', #FNum, #FNum2, $UserFlag)
       do Build-XML-Line('EE_LastName', $Alternate_LName, 'Y', #FNum, #FNum2, $UserFlag)
       if &TX.BALANCE_YEAR > 2005
         do Build-XML-Line('EE_Suffix', $E.YE_Suffix, 'Y', #FNum, #FNum2, $UserFlag)
       end-if
       do Build-XML-Line('EE_YEName', $Alternate_Name, 'Y', #FNum, #FNum2, $UserFlag)

       if &TX.BALANCE_YEAR >= 2008

      ! max length of name print area
         if length($Alternate_Name) + 1 + length($E.YE_Suffix)  <= #YE_EE_FullName_Box_Size
           let $Alternate_Name_Prt = rtrim($Alternate_Name, ' ') || ' ' || rtrim($E.Suffix,' ')
         else
           let $Alternate_Name_Prt = $Alternate_Name
         end-if

         do Build-XML-Line('EE_FullName', $Alternate_Name_Prt, 'Y', #FNum, #FNum2, $UserFlag)
       end-if
     else

       do Build-XML-Line('EE_FirstName', $E.YE_FName, 'Y', #FNum, #FNum2, $UserFlag)
       do Build-XML-Line('EE_LastName', $E.YE_LName, 'Y', #FNum, #FNum2, $UserFlag)
       if &TX.BALANCE_YEAR > 2005
         do Build-XML-Line('EE_Suffix', $E.YE_Suffix, 'Y', #FNum, #FNum2, $UserFlag)
       end-if
       do Build-XML-Line('EE_YEName', $E.YE_Name, 'Y', #FNum, #FNum2, $UserFlag)

       if &TX.BALANCE_YEAR >= 2008
         let $E.YE_Name = $E.YE_Name
         do Build-XML-Line('EE_FullName', $E.YE_Name, 'Y', #FNum, #FNum2, $UserFlag)
       end-if
     end-if

     if $Use_Alternate_Name_flap = 'Y'
        do Build-XML-Line('EE_FullName_flap', $Alternate_Name_flap, 'Y', #FNum, #FNum2, $UserFlag)
     else
        do Build-XML-Line('EE_FullName_flap', $E.YE_Name_flap, 'Y', #FNum, #FNum2, $UserFlag)
     end-if

  else
     if $Form_ID <> 'LSR03' and $Form_ID <> 'LSR03P'
       if $Use_Alternate_Name = 'Y'
           do Print-Value($Alternate_Name,#L_E,#C_E,'Box E')
       else
           do Print-Value($E.YE_Name,#L_E,#C_E,'Box E')
       end-if
     else
       if $Use_Alternate_Name = 'Y'
           do Print-Value($Alternate_Name,#L_E1,#C_E1,'Box E1')
       else
           do Print-Value($E.YE_FName,#L_E1,#C_E1,'Box E1')
           do Print-Value($E.YE_LName,#L_E3,#C_E3,'Box E3')
           if &TX.BALANCE_YEAR > 2005
              do Print-Value($E.YE_Suffix,#L_E4,#C_E4,'Box E4')
           end-if
       end-if
     end-if
  end-if

  if $XMLPublisher = 'Y'
     do Build-XML-Line('EE_Address1', $E.Address1, 'Y', #FNum, #FNum2, $UserFlag)
     do Build-XML-Line('EE_Address1_flap', $E.Address1_flap, 'Y', #FNum, #FNum2, $UserFlag)
  else
     do Print-Value($E.Address1,#L_F1,#C_F1,'Box F1')
  end-if

  if RTRIM($E.Address2, ' ') <> ''
     if $XMLPublisher = 'Y'
        do Build-XML-Line('EE_Address2', $E.Address2, 'Y', #FNum, #FNum2, $UserFlag)
        do Build-XML-Line('EE_Address2_flap', $E.Address2_flap, 'Y', #FNum, #FNum2, $UserFlag)
     else
        do Print-Value($E.Address2,#L_F2,#C_F2,'Box F2')
     end-if
     move 'N' to $LineShift
  else
    move 'Y' to $LineShift
  end-if

  if #Align_Count = 0
     do Get-EE-Address-Line3
  end-if

  if $LineShift = 'Y'
    let #PrintLine = #L_F2
  else
    let #PrintLine = #L_F3
  end-if

  if $XMLPublisher = 'Y'
     if RTRIM($E.Address2, ' ') <> ''
        do Build-XML-Line('EE_Address3', $F3, 'Y', #FNum, #FNum2, $UserFlag)
        do Build-XML-Line('EE_Address3_flap', $F3_flap, 'Y', #FNum, #FNum2, $UserFlag)
     else
        do Build-XML-Line('EE_Address2', $F3, 'Y', #FNum, #FNum2, $UserFlag)
        do Build-XML-Line('EE_Address2_flap', $F3_flap, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
  else
     do Print-Value($F3,#PrintLine,#C_F3,'Box F3')
  end-if
end-procedure

begin-procedure Get-EE-Address-Line3
    if $E.Country = 'USA'
      move $E.Zip            to $E.ZipExtsn ~~~~~~xxxx
      if instr($E.Zip,'-',6) = 0
      and $E.ZipExtsn <> '    '
        let $E.Zip = substr($E.Zip,1,5) || '-' || substr($E.Zip,6,4)
      end-if
      let $E.Zip = rtrim($E.Zip, ' ')
      let $F3 = $E.City || ' ' || $E.State || ' ' || $E.Zip
      let $F3_flap = $F3
      if length($F3) > #YE_EE_Country_Box_Size
          let #newlen = length($E.City) + #YE_EE_Country_Box_Size - length($F3)
          let $F3 = substr($E.City,1,#newlen) || ' ' || $E.State || ' ' || $E.Zip
      end-if
    else
      do Get-Country-Code
      let $Country = SUBSTR(&CT.Descr,1,15)
      let $Country = rtrim($Country, ' ')
      uppercase $Country
      let $E.Zip = rtrim($E.Zip, ' ')
      let $F3 = $E.City || ' ' || $E.State || ' ' ||
                $E.Zip  || ' '  || $Country
      let $F3_flap = $F3
      if length($F3) > 55
          let #flaplen = length($E.City) + 55 - length($F3)
          let $F3_flap = substr($E.City,1,#flaplen) || ' ' || $E.State || ' ' ||
                         $E.Zip  || ' '  || $Country
      end-if
      if length($F3) > #YE_EE_Country_Box_Size
          let #newlen = length($E.City) + #YE_EE_Country_Box_Size - length($F3)
          let $F3 = substr($E.City,1,#newlen) || ' ' || $E.State || ' ' ||
                $E.Zip  || ' '  || $Country
      end-if
    end-if
end-procedure

begin-procedure Load-Amounts
  move 0 to #LocalCount
  move 'N' to $Local_wages
begin-SELECT
C.W2_REPORTING_CO
D.STATE
D.LOCALITY
D.WORK_PSD_CD
D.RES_PSD_CD
D.BOX
#ifdef DB2ALL
DECIMAL(SUM(D.W2_AMOUNT),15,3) &D.W2_Amount
#else
SUM(D.W2_AMOUNT) &D.W2_Amount
#endif
   move &D.W2_Amount to #Amount

   let $D.Box = &D.Box
   move $D.Box to $Box xx
   let $Pos3 = substr($D.Box, 3,1)
   if $Box = $YE_Box12_StartPos  or
      $Box = $YE_Other
     and $Pos3 > ' '
     let $D.Box = &D.Box
     let $D.Box = rpad($D.Box,4,' ')
   else
     let $D.Box = RTRIM(&D.Box,' ')
   end-if

   do Evaluate-Box

    if $D.Box = $YE_Local_Wages                  !Local wages
      if $E.W2_State <> 'MD'
        add 1 to #LocalCount
        let $Local_wages =  'Y'
        if #LocalCount > 20
          display 'Local Array Size Exceeded - Processing Stopped'
          STOP
        end-if

        if $E.W2_State = 'PA' and &D.LOCALITY = '510101'
          add 1 to #SW-keep18
          do AddBox18
        else
          PUT &D.Locality INTO LOCALS(#LOCALCOUNT) LOCALITY
          PUT &D.Work_PSD_Cd INTO LOCALS(#LOCALCOUNT) WORKPSD
          PUT &D.Res_PSD_Cd  INTO LOCALS(#LOCALCOUNT) RESPSD
          PUT #Amount INTO LOCALS(#LOCALCOUNT) TXGRS
        end-if
      end-if
    end-if

    if $D.Box = $YE_Local_Tax                      !Local tax
      if $E.W2_State <> 'MD'
        if $Local_wages =  'N'
          add 1 to #LocalCount

        end-if
        if $E.W2_State = 'PA' and &D.LOCALITY = '510101'
          add 1 to #SW-keep19
          do AddBox19
        else
          PUT &D.Locality INTO LOCALS(#LOCALCOUNT) LOCALITY
          PUT &D.Work_PSD_Cd INTO LOCALS(#LOCALCOUNT) WORKPSD
          PUT &D.Res_PSD_Cd  INTO LOCALS(#LOCALCOUNT) RESPSD
          PUT #Amount INTO LOCALS(#LOCALCOUNT) TAX
        end-if
      else
        add #Amount to #State_Tax
      end-if
      move 'N' to $Local_wages
    end-if

    if $Box = $YE_Other
       Let #i = 0
       let $Box14Letter = SUBSTR($D.Box,1,4)
       While #i < 30
         Get $BoxLetter from BOX14(#i) Box
         if $BoxLetter = $Box14Letter
           ARRAY-ADD #Amount to BOX14(#i) AMOUNT
           let #i = 30
         end-if
         let #i=#i+1
       End-While
       move '  ' to $Box
    end-if

FROM  PS_YE_AMOUNTS D, PS_W2_COMPANY C
WHERE C.W2_REPORTING_CO = &A.W2_Reporting_Co
  AND C.COMPANY         = D.COMPANY
  AND C.CALENDAR_YEAR   = D.CALENDAR_YEAR
  AND D.EMPLID          = $E.Emplid
  AND D.CALENDAR_YEAR   = &TX.BALANCE_YEAR
  AND D.TAXFORM_ID      = $E.TaxForm_ID
  AND D.SEQUENCE_NUMBER = #E.Sequence_Number
GROUP BY C.W2_REPORTING_CO, D.STATE, D.LOCALITY, D.WORK_PSD_CD, D.RES_PSD_CD, D.BOX
ORDER BY C.W2_REPORTING_CO, D.STATE, D.LOCALITY, D.WORK_PSD_CD, D.RES_PSD_CD, D.BOX
end-SELECT
end-procedure

begin-procedure AddBox18
   if #SW-keep18 = 1
          let #TotBox18 = 0
      let #PosIdx18 = #LocalCount
      PUT &D.Locality INTO LOCALS(#PosIdx18) LOCALITY
      PUT &D.Work_PSD_Cd INTO LOCALS(#PosIdx18) WORKPSD
      PUT &D.Res_PSD_Cd  INTO LOCALS(#PosIdx18) RESPSD
   end-if
   let #TotBox18 = #Amount + #TotBox18
end-procedure

begin-procedure AddBox19
   if #SW-keep19 = 1
          let #TotBox19 = 0
      let #PosIdx19 = #LocalCount
      PUT &D.Locality INTO LOCALS(#PosIdx19) LOCALITY
      PUT &D.Work_PSD_Cd INTO LOCALS(#PosIdx19) WORKPSD
      PUT &D.Res_PSD_Cd  INTO LOCALS(#PosIdx19) RESPSD
   end-if
   let #TotBox19 = #Amount + #TotBox19
end-procedure

begin-procedure Print-Fed-State-Amounts
  if #T_Count > #Align_Count
    if #j = 1
      do Add-EE-to-Interum
    end-if
  end-if

  if $XMLPublisher = 'Y'                                         !Federal wages
     if #Fed_Wages <> 0
        do Format-Number (#Fed_Wages, $out, '99999999.99')
        do Build-XML-Line('Fed_Wages', $out, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
  else
     do Format-Number(#Fed_Wages, $out, $F01)
     if #Form# = 2 and $Form_ID = 'LSR03P' and &TX.BALANCE_YEAR = 2004
       let #L_01 = #L_01 + 1
       do Print-Value($out,#L_01,#C_01,'Box 01')
       let #L_01 = #L_01 - 1
     else
       do Print-Value($out,#L_01,#C_01,'Box 01')
     end-if
  end-if

  if $XMLPublisher = 'Y'                                        !Federal tax
     if #Fed_Tax <> 0
        do Format-Number (#Fed_Tax, $out, '99999999.99')
        do Build-XML-Line('Fed_Tax', $out, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
  else
     do Format-Number(#Fed_Tax, $out, $F02)
     if #Form# = 2 and $Form_ID = 'LSR03P' and &TX.BALANCE_YEAR = 2004
       let #L_02 = #L_02 + 1
       do Print-Value($out,#L_02,#C_02,'Box 02')
       let #L_02 = #L_02 - 1
     else
       do Print-Value($out,#L_02,#C_02,'Box 02')
     end-if
  end-if

  if $XMLPublisher = 'Y'
     if #SS_Wages <> 0
        do Format-Number (#SS_Wages, $out, '99999999.99')          !SS wages
        do Build-XML-Line('SS_Wages', $out, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
  else
     do Format-Number(#SS_Wages, $out, $F03)
     do Print-Value($out,#L_03,#C_03,'Box 03')
  end-if

  if $XMLPublisher = 'Y'                                        !SS Tax
     if #SS_Tax <> 0
        do Format-Number (#SS_Tax, $out, '99999999.99')
        do Build-XML-Line('SS_Tax', $out, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
  else
     do Format-Number(#SS_Tax, $out, $F04)
     do Print-Value($out,#L_04,#C_04,'Box 04')
  end-if

  if $XMLPublisher = 'Y'                                        !Medicare wages
     if #Med_Wages <> 0
        do Format-Number (#Med_Wages, $out, '99999999.99')
        do Build-XML-Line('Med_Wages', $out, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
  else
     do Format-Number(#Med_Wages, $out, $F05)
     do Print-Value($out,#L_05,#C_05,'Box 05')
  end-if

  if $XMLPublisher = 'Y'                                        !Medicare tax
     if #Med_Tax <> 0
        do Format-Number (#Med_Tax, $out, '99999999.99')
        do Build-XML-Line('Med_Tax', $out, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
  else
     do Format-Number(#Med_Tax, $out, $F06)
     do Print-Value($out,#L_06,#C_06,'Box 06')
  end-if

  if $XMLPublisher = 'Y'                                        !SS tips
     if #SS_Tips <> 0
        do Format-Number (#SS_Tips, $out, '99999999.99')
        do Build-XML-Line('SS_Tips', $out, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
  else
     do Format-Number(#SS_Tips, $out, $F07)
     do Print-Value($out,#L_07,#C_07,'Box 07')
  end-if

  if $XMLPublisher = 'Y'                                        !Allocated tips
     if #Alloc_Tips <> 0
        do Format-Number (#Alloc_Tips, $out, '99999999.99')
        do Build-XML-Line('Alloc_Tips', $out, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
  else
     do Format-Number(#Alloc_Tips, $out, $F08)
     do Print-Value($out,#L_08,#C_08,'Box 08')
  end-if

  if #Adv_EIC <> 0
     if $XMLPublisher = 'Y'                                     !EIC
        do Format-Number (#Adv_EIC, $out, '99999999.99')
        do Build-XML-Line('Adv_EIC', $out, 'Y', #FNum, #FNum2, $UserFlag)
     else
        do Format-Number(#Adv_EIC, $out, $F09)
        do Print-Value($out,#L_09,#C_09,'Box 09')
     end-if
  end-if

  if $XMLPublisher = 'Y'                                        !Dependent care
     if #Dep_Care <> 0
        do Format-Number (#Dep_Care, $out, '99999999.99')
        do Build-XML-Line('DEP_Care', $out, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
  else
     do Format-Number(#Dep_Care, $out, $F10)
     do Print-Value($out,#L_10,#C_10,'Box 10')
  end-if

  if $XMLPublisher = 'Y'                                        !Non-qualified plan total
     if #Non_Qual_457_Amt <> 0
        do Format-Number (#Non_Qual_457_Amt, $out, '99999999.99')
        do Build-XML-Line('NonQual_457AB', $out, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
  else
     do Format-Number(#Non_Qual_457_Amt, $out, $F11)
     do Print-Value($out,#L_11,#C_11,'Box 11')
  end-if

  if &TX.BALANCE_YEAR = 2001
    if $Non_Qual_457_Y = 'Y'
      if $Non_Qual_457_N = 'N'
        do Print-Value('G',#L_11,#C_11,'Box 11')
      else
        do Print-Value(' ',#L_11,#C_11,'Box 11')
      end-if
    end-if
  end-if

  if RTRIM($E.W2_State,' ') <> ''
     if $XMLPublisher = 'Y'
        do Build-XML-Line('ST1_ST', $E.W2_State, 'Y', #FNum, #FNum2, $UserFlag)
        do Build-XML-Line('ST1_StateID', $E.Employer_ID_SWT, 'Y', #FNum, #FNum2, $UserFlag)
     else
        do Print-Value($E.W2_State,#L_15,#C_15,'Box 15')            !State
        do Print-Value($E.Employer_ID_SWT,#L_15A,#C_15A,'Box 15A')  !State employer ID
     end-if
  else
     if $XMLPublisher <> 'Y'
        do Print-Value(' ',#L_15,#C_15,' ')
     end-if
  end-if

  if $XMLPublisher = 'Y'
     if #State_Wages <> 0
        do Format-Number (#State_Wages, $out, '99999999.99')       !State wages
        do Build-XML-Line('ST1_WAGES', $out, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
     if #State_Tax <> 0
        do Format-Number (#State_Tax, $out, '99999999.99')         !State tax
        do Build-XML-Line('ST1_TAXES', $out, 'Y', #FNum, #FNum2, $UserFlag)
     end-if
  else
     do Format-Number(#State_Wages, $out, $F16)                 !State wages
     do Print-Value($out,#L_16,#C_16,'Box 16')

     do Format-Number(#State_Tax, $out, $F17)                   !State tax
     do Print-Value($out,#L_17,#C_17,'Box 17')
  end-if
end-procedure

begin-procedure Print-Locality-Sort-Amounts
  move 1 to #i
  move #L_18 to #LocalPrintLine18
  move #L_19 to #LocalPrintLine19
  move #L_20 to #LocalPrintLine20

  while #NextLocal < #LocalCount and #i <= #Locals_Per_Form
    add 1 to #NextLocal

    get $Locality $WorkPSD $ResPSD #Local_Wages #Local_Tax from Locals(#NextLocal)

    if &SL.LOCALITY = $Locality
       let $Locality = RTRIM($Locality,' ')
       let $WorkPSD  = RTRIM($WorkPSD,' ')
       let $ResPSD   = RTRIM($ResPSD,' ')

       if $Locality = $priorLocality
          if $E.W2_State <> $priorState
             move $E.W2_State to $priorState
          end-if
          if $WorkPSD <> $priorWorkPSD
             move $WorkPSD to $priorWorkPSD
          end-if
          if $ResPSD <> $priorResPSD
             move $ResPSD to $priorResPSD
          end-if

          do Get-Locality-Print-Name
          move $Locality to $priorLocality
       else
          do Get-Locality-Print-Name
          move $Locality to $priorLocality
       end-if

      if &E.Sequence_Number > 1
         if $XMLPublisher = 'Y'
            do Build-XML-Line('ST1_ST', $E.W2_State, 'Y', #FNum, #FNum2, $UserFlag)
            do Build-XML-Line('ST1_StateID', $E.Employer_ID_SWT, 'Y', #FNum, #FNum2, $UserFlag)
         else
            do Print-Value($E.W2_State,#L_15,#C_15,'Box 15')                !State
            do Print-Value($E.Employer_ID_SWT,#L_15A,#C_15A,'Box 15A')      !State employer ID
         end-if
      end-if

      if $XMLPublisher = 'Y' and #i <= #Locals_Per_Form
         if #i = 1
           if #Local_Wages <> 0
              do Format-Number (#Local_Wages, $out, '99999999.99')
              do Build-XML-Line('LOC1_WAGES', $out, 'Y', #FNum, #FNum2, $UserFlag)
           end-if
           if #Local_Tax <> 0
              do Format-Number (#Local_Tax, $out, '99999999.99')
              do Build-XML-Line('LOC1_TAXES', $out, 'Y', #FNum, #FNum2, $UserFlag)
           end-if
           uppercase $LocalityPrintName
           do Build-XML-Line('LOC1_LOC', $LocalityPrintName, 'Y', #FNum, #FNum2, $UserFlag)
         else
           if #Local_Wages <> 0
              do Format-Number (#Local_Wages, $out, '99999999.99')
              do Build-XML-Line('LOC2_WAGES', $out, 'Y', #FNum, #FNum2, $UserFlag)
           end-if
           if #Local_Tax <> 0
              do Format-Number (#Local_Tax, $out, '99999999.99')
              do Build-XML-Line('LOC2_TAXES', $out, 'Y', #FNum, #FNum2, $UserFlag)
           end-if
           uppercase $LocalityPrintName
           do Build-XML-Line('LOC2_LOC', $LocalityPrintName, 'Y', #FNum, #FNum2, $UserFlag)
         end-if
      else

         do Format-Number(#Local_Wages, $out, $F18)                     !Local wages
         do Print-Value($out,#LocalPrintLine18,#C_18,'Box 18')

         do Format-Number(#Local_Tax, $out, $F19)                       !Local tax
         do Print-Value($out,#LocalPrintLine19,#C_19,'Box 19')

         uppercase $LocalityPrintName
         do Print-Value($LocalityPrintName,#LocalPrintLine20,#C_20,'Box 20')

         add 2 to #LocalPrintLine18
         add 2 to #LocalPrintLine19
         add 2 to #LocalPrintLine20
      end-if
      add 1 to #i

      if #j = 1
      and #align_count = 0
        add #Local_Wages to #Local_Wages_I
        add #Local_Tax to #Local_Tax_I
        if #i = 1
          add 1 to #local
        end-if
      end-if
    end-if
   end-while
end-procedure

begin-procedure Print-Local-Amounts
  move 1 to #i
  move #L_18 to #LocalPrintLine18
  move #L_19 to #LocalPrintLine19
  move #L_20 to #LocalPrintLine20

  if $XMLPublisher = 'Y' and #Locals_Per_Form <> 1
     move 1 to #Locals_Per_Form
  end-if

  while #NextLocal < #LocalCount and #i <= #Locals_Per_Form
    add 1 to #NextLocal

    get $Locality $WorkPSD $ResPSD #Local_Wages #Local_Tax from Locals(#NextLocal)

    let $Locality = RTRIM($Locality,' ')
    let $WorkPSD  = RTRIM($WorkPSD,' ')
    let $ResPSD = RTRIM($ResPSD,' ')

    if $Locality = $priorLocality
       if $E.W2_State <> $priorState
          move $E.W2_State to $priorState
       end-if
       if $WorkPSD <> $priorWorkPSD
          move $WorkPSD to $priorWorkPSD
       end-if
       if $ResPSD <> $priorResPSD
          move $ResPSD to $priorResPSD
       end-if

       do Get-Locality-Print-Name
       move $Locality to $priorLocality
    else
       do Get-Locality-Print-Name
       move $Locality to $priorLocality
    end-if

    let $Box15Done = 'N'
    if #i = 1
       if #NextLocal > 1
          if $XMLPublisher = 'Y'
             let $Box15Done = 'Y'
             do Build-XML-Line('ST1_ST', $E.W2_State, 'Y', #FNum, #FNum2, $UserFlag)
             do Build-XML-Line('ST1_StateID', $E.Employer_ID_SWT, 'Y', #FNum, #FNum2, $UserFlag)
          else
             do Print-Value($E.W2_State,#L_15,#C_15,'Box 15')                !State
             do Print-Value($E.Employer_ID_SWT,#L_15A,#C_15A,'Box 15A')      !State employer ID
          end-if
       end-if
    end-if

    if &E.Sequence_Number > 1
       if $XMLPublisher = 'Y' and $Box15Done = 'N'
          do Build-XML-Line('ST1_ST', $E.W2_State, 'Y', #FNum, #FNum2, $UserFlag)
          do Build-XML-Line('ST1_StateID', $E.Employer_ID_SWT, 'Y', #FNum, #FNum2, $UserFlag)
       else
          if $XMLPublisher <> 'Y'
               do Print-Value($E.W2_State,#L_15,#C_15,'Box 15')                  !State
               do Print-Value($E.Employer_ID_SWT,#L_15A,#C_15A,'Box 15A')        !State employer ID
          end-if
       end-if
    end-if

    if $XMLPublisher = 'Y' and #i <= #Locals_Per_Form
       if #i = 1
         if #Local_Wages <> 0
            do Format-Number (#Local_Wages, $out, '99999999.99')
            do Build-XML-Line('LOC1_WAGES', $out, 'Y', #FNum, #FNum2, $UserFlag)
         end-if
         if #Local_Tax <> 0
            do Format-Number (#Local_Tax, $out, '99999999.99')
            do Build-XML-Line('LOC1_TAXES', $out, 'Y', #FNum, #FNum2, $UserFlag)
         end-if
         uppercase $LocalityPrintName
         do Build-XML-Line('LOC1_LOC', $LocalityPrintName, 'Y', #FNum, #FNum2, $UserFlag)
       else
         if #Local_Wages <> 0
            do Format-Number (#Local_Wages, $out, '99999999.99')
            do Build-XML-Line('LOC2_WAGES', $out, 'Y', #FNum, #FNum2, $UserFlag)
         end-if
         if #Local_Tax <> 0
            do Format-Number (#Local_Tax, $out, '99999999.99')
            do Build-XML-Line('LOC2_TAXES', $out, 'Y', #FNum, #FNum2, $UserFlag)
         end-if
         uppercase $LocalityPrintName
         do Build-XML-Line('LOC2_LOC', $LocalityPrintName, 'Y', #FNum, #FNum2, $UserFlag)
       end-if
    else

       do Format-Number(#Local_Wages, $out, $F18)                       !Local wages
       do Print-Value($out,#LocalPrintLine18,#C_18,'Box 18')

       do Format-Number(#Local_Tax, $out, $F19)                         !Local tax
       do Print-Value($out,#LocalPrintLine19,#C_19,'Box 19')

       uppercase $LocalityPrintName
       do Print-Value($LocalityPrintName,#LocalPrintLine20,#C_20,'Box 20')

       if $Form_ID = 'LPS4V'

          add 1 to #LocalPrintLine18
          add 1 to #LocalPrintLine19
          add 1 to #LocalPrintLine20

       else
          add 2 to #LocalPrintLine18
          add 2 to #LocalPrintLine19
          add 2 to #LocalPrintLine20
       end-if
    end-if

    if #j = 1
    and #align_count = 0
       add #Local_Wages to #Local_Wages_I
       add #Local_Tax to #Local_Tax_I
       if #i = 1
         add 1 to #local
       end-if
    end-if

    add 1 to #i
  end-while
end-procedure

begin-procedure Print-Box14

  move #L_14_Start to #L_14

  if #L_14 <= 0 and $XMLPublisher <> 'Y'
    display ''
    display '***************************************'
    display 'Print Line not defined for Box 14'
    display 'in Tax Form Print Parameters Table.'
    display 'Program Stopped.'
    display '***************************************'
    display ''
    stop
  end-if

  move 0 to #m

  if $XMLPublisher = 'Y'
     move 4 to #Last_Box14_Line
     move 1 to #box14Count
  else
     move 4 to #Last_Box14_Line
  end-if

  if $E.W2_State = 'NJ'
    get #14 from Box14(4) Amount          !box 14D
    if #14 > 0
      get #14 from Box14(5) Amount        !box 14E
      if #14 > 0
        get #14 from Box14(7) Amount      !box 14G
        if #14 > 0
          if &TX.BALANCE_YEAR < 2009
             put 0 into Box14(3) Amount      !box 14C
          end-if
        end-if
      end-if
    end-if
  end-if

  if $E.W2_State = 'PA'
    get $B_14 $T_14 #C_14 #14 from Box14(5) Box Text Column Amount
    if #14 > 0
       let #F14ID = 5
       let $F14Print = $F14
       do Print-PA-Box14
    end-if
    get $B_14 $T_14 #C_14 #14 from Box14(#boxYN) Box Text Column Amount    !box 14YN
    if #14 > 0
       let #F14ID = 3
       let $F14Print = $F14Spec
       do Print-PA-Box14
    end-if
    get $B_14 $T_14 #C_14 #14 from Box14(#boxYT) Box Text Column Amount    !box 14YT
    if #14 > 0
       let #F14ID = 3
       let $F14Print = $F14Spec
       do Print-PA-Box14
    end-if
    get $B_14 $T_14 #C_14 #14 from Box14(#boxZN) Box Text Column Amount    !box 14ZN
    if #14 > 0
       let #F14ID = 3
       let $F14Print = $F14Spec
       do Print-PA-Box14
    end-if
    if #E.Sequence_Number > 1
      let #m = 30
    else
      let #m = 6
    end-if
  end-if

  let #myCount = 0

  if $XMLPublisher = 'Y'
     while #m <= 29 and (#box14Count <= #Last_Box14_Line)
       get $B_14 $T_14 #C_14 #14 from Box14(#m) Box Text Column Amount
       if &TX.BALANCE_YEAR < 2006 or
         (#m <> #boxYN and
          #m <> #boxYT and
          #m <> #boxZN)
         if #14 > 0

            do Format-Number (#14, $out, '9999999.99')
            let $b14Amt = lpad(ltrim($out,' '),10,' ')
            let $b14Lbl = rpad(rtrim($T_14,' '),5, ' ')

            let $b14    = $b14Lbl || ' ' || $b14Amt

             if (#m = #box14D or #m = #box14E or #m = #box14G or #m = #box14C or #m = #box14H)
               if #m = #box14D
                 let $NJ_UI = 'Y'
                 let #Local_Tax = #14
                 let $LocalityPrintName = substr($T_14,1,7)
                 uppercase $LocalityPrintName
                 if  #myCount = 0

                   if #Local_Tax <> 0
                     do Format-Number (#Local_Tax, $out, '99999999.99')
                     do Build-XML-Line('LOC1_TAXES', $out, 'Y', #FNum, #FNum2, $UserFlag)
                   end-if
                   do Build-XML-Line('LOC1_LOC', $LocalityPrintName, 'Y', #FNum, #FNum2, $UserFlag)
                   add 1 to #myCount
                 else
                    do Format-Number (#Local_Tax, $out, '99999999.99')
                    do Build-XML-Line('LOC2_Text1', $out, 'Y', #FNum, #FNum2, $UserFlag)
                    do Build-XML-Line('LOC2_Text2', $LocalityPrintName, 'Y', #FNum, #FNum2, $UserFlag)
                    add 1 to #myCount
                 end-if

                 move ' ' to  $LocalityPrintName

               else
                 if (#m = #box14E or #m = #box14G)
                    add #14 to #NJSDI_VPDI_Tot
                    let $NJDI_text = substr($T_14,1,7)
                    uppercase $NJDI_text
                    let $NJ_DI = 'Y'
                 else
                    if #j = 1
                       add #14 to #NJFLI_VPFLI_Tot
                       let $NJFLI_text = substr($T_14,1,7)
                       uppercase $NJFLI_text
                       if #m = #box14H
                          let $NJ_VPFLI = 'Y'
                       end-if
                    end-if
                 end-if
               end-if
            else
              if #box14Count = 1
                 do Build-XML-Line('Other1', $b14, 'Y', #FNum, #FNum2, $UserFlag)
!                do Build-XML-Line('B14_LBL1', $T_14, 'Y', #FNum, #FNum2, $UserFlag)
!                do Build-XML-Line('B14_AMT1', $out, 'Y', #FNum, #FNum2, $UserFlag)
              else
                 if #box14Count = 2
                    do Build-XML-Line('Other2', $b14, 'Y', #FNum, #FNum2, $UserFlag)
!                   do Build-XML-Line('B14_LBL2', $T_14, 'Y', #FNum, #FNum2, $UserFlag)
!                   do Build-XML-Line('B14_AMT2', $out, 'Y', #FNum, #FNum2, $UserFlag)
                 else
                    if #box14Count = 3
                       do Build-XML-Line('Other3', $b14, 'Y', #FNum, #FNum2, $UserFlag)
!                      do Build-XML-Line('B14_LBL3', $T_14, 'Y', #FNum, #FNum2, $UserFlag)
!                      do Build-XML-Line('B14_AMT3', $out, 'Y', #FNum, #FNum2, $UserFlag)
                    else
                       do Build-XML-Line('Other4', $b14, 'Y', #FNum, #FNum2, $UserFlag)
!                      do Build-XML-Line('B14_LBL4', $T_14, 'Y', #FNum, #FNum2, $UserFlag)
!                      do Build-XML-Line('B14_AMT4', $out, 'Y', #FNum, #FNum2, $UserFlag)
                    end-if

                end-if
              end-if
              add 1 to #box14Count
            end-if
            let #Amount = #14
            do Add-Box14-Totals
            if $E.W2_State = 'NJ' and #m = 6   !box 14G
               do Print-NJSUT
            end-if
         end-if
       end-if
       add 1 to #m
     end-while
  else

    let #myL_20 = #L_20
    let #myLocalPrintLine19 = #L_19

    while #m <= 29 and (#L_14 - #L_14_Start) < #Last_Box14_Line

      get $B_14 $T_14 #C_14 #14 from Box14(#m) Box Text Column Amount
      if &TX.BALANCE_YEAR < 2006 or
        (#m <> #boxYN and
         #m <> #boxYT and
         #m <> #boxZN)
         if #14 > 0
           if #Align_Count <> 0
             print 'XXXXX' (#L_14,#C_14,5)
           else
             if (#m = #box14D or #m = #box14E or #m = #box14G or #m = #box14C or #m = #box14H)
               if #m = #box14D
                  let $NJ_UI = 'Y'
                  let #myLocalityBoxSize = #YE_Locality_Box_Size
                  #ifndef LayoutW2-6
                     print $T_14 (#myL_20,#C_20,#myLocalityBoxSize)
                     add 1 to #myL_20
                  #endif
                  #ifdef LayoutW2-6
                     let #myLocalityBoxSize = #myLocalityBoxSize - 1
                     print $T_14 (#myL_20,#C_20,#myLocalityBoxSize)
                     add 2 to #myL_20
                  #endif
               end-if
             else
               print $T_14   (#L_14,#C_14,5)
             end-if
           end-if

           if (#m = #box14D or #m = #box14E or #m = #box14G or #m = #box14C or #m = #box14H) and
              #Align_Count = 0
              if #m = #box14D
                do Format-Number(#14, $out, $F14)
                do Print-Value($out,#myLocalPrintLine19,#C_19,'Box 19')
                #ifndef LayoutW2-6
                   add 1 to #myLocalPrintLine19
                #endif
                #ifdef LayoutW2-6
                   add 2 to #myLocalPrintLine19
                #endif
              end-if
           else
              do Format-Number(#14, $out, $F14)
              print $out ()
              add 1 to #L_14
           end-if

           if (#m = #box14E or #m = #box14G)
             add #14 to #NJSDI_VPDI_Tot
             let $NJDI_text = $T_14
             let $NJ_DI = 'Y'
           end-if

           if (#m = #box14C or #m = #box14H) and (#j = 1)
             add #14 to #NJFLI_VPFLI_Tot
             let $NJFLI_text = $T_14
             if #m = #box14H
                let $NJ_VPFLI = 'Y'
             end-if
           end-if

           if #T_Count > #Align_Count
              if #j = 1
                let #Amount = #14
                do Add-Box14-Totals
              end-if
           end-if
           if $E.W2_State = 'NJ' and #m = 6   !box 14G
             do Print-NJSUT
           end-if
         end-if
      end-if

      add 1 to #m
    end-while
  end-if

  ! Print NJ Box 14E and 14G combined in box 19 (amount) and box 20 (text)
  if $XMLPublisher = 'Y'
    if #NJSDI_VPDI_Tot <> 0
       do Format-Number (#NJSDI_VPDI_Tot, $out, '99999999.99')
       if  #myCount = 0
         do Build-XML-Line('LOC1_TAXES', $out, 'Y', #FNum, #FNum2, $UserFlag)
         do Build-XML-Line('LOC1_LOC', $NJDI_text, 'Y', #FNum, #FNum2, $UserFlag)
       else
         do Build-XML-Line('LOC2_Text1', $out, 'Y', #FNum, #FNum2, $UserFlag)
         do Build-XML-Line('LOC2_Text2', $NJDI_text, 'Y', #FNum, #FNum2, $UserFlag)
       end-if
       let #NJSDI_VPDI_Tot = 0
    end-if
  else
    if #NJSDI_VPDI_Tot <> 0
       let #myLocalityBoxSize = #YE_Locality_Box_Size
       #ifndef LayoutW2-6
          print $NJDI_text (#myL_20,#C_20,#myLocalityBoxSize)
          add 1 to #myL_20
       #endif
       #ifdef LayoutW2-6
          let #myLocalityBoxSize = #myLocalityBoxSize - 1
          print $NJDI_text (#myL_20,#C_20,#myLocalityBoxSize)
          add 2 to #myL_20
       #endif

       do Format-Number(#NJSDI_VPDI_Tot, $out, $F14)
       do Print-Value($out,#myLocalPrintLine19,#C_19,'Box 19')
       #ifndef LayoutW2-6
          add 1 to #myLocalPrintLine19
       #endif
       #ifdef LayoutW2-6
          add 2 to #myLocalPrintLine19
       #endif
       let #NJSDI_VPDI_Tot = 0
    end-if
  end-if

  if (#L_14 - #L_14_Start) = 5
    display 'Attempt to create more than 4 Box 14 entries for ' noline
    display $E.SSN noline
    display ' ' noline
    display $E.YE_Name
  end-if

  if #E.Sequence_Number > 1
    do Print-Suppl-Box14
  end-if

end-procedure

begin-procedure Print-Suppl-Box14

  if $XMLPublisher = 'Y'
     if #box14Count < 3 and #box14Count <> 0
        let $b14x = 'FED W-2 DATA IS'
        let $b14y = 'ON SEPARATE W-2'
        move 3 to #box14Count
        do Build-XML-Line('Other3', $b14x, 'Y', #FNum, #FNum2, $UserFlag)
        do Build-XML-Line('Other4', $b14y, 'Y', #FNum, #FNum2, $UserFlag)
        add 2 to #box14Count
        add 2 to #L_14
     end-if
  else
     if (#L_14 - #L_14_Start) < 3
       move #L_14_Start to #L_14
       move #C_14_Start to #C_14
       move 4 to #Last_Box14_Line
       add 2 to #L_14
       print 'FED W-2 DATA IS' (#L_14,#C_14,15)
       add 1 to #L_14
       print 'ON SEPARATE W-2' (#L_14,#C_14,15)
       add 1 to #L_14
     end-if
  end-if

end-procedure

begin-procedure Print-NJSUT
begin-SELECT
CS.EMPLOYER_ID_SUT
CS.VDI_PLAN_NBR
CS.PNA_FLI_PLAN_NBR

 !   evaluate $Layout_Style
 !     when = '4VERTICAL'
 !       print &CS.Employer_ID_Sut (#Last_Print_Line,#C_20)
 !       break
 !     when-other
 !       print &CS.Employer_ID_Sut (#Last_Print_Line,#C_16A)
 !       break
 !   end-evaluate

  move &CS.VDI_Plan_Nbr to $VDI_Plan_Nbr
  let $VDI_Plan_Nbr = 'DI PP # ' || $VDI_Plan_Nbr
  let #vdi_length = length($VDI_Plan_Nbr)

  let $FLI_Plan_Text = 'FLI PP #     '
  let $FLI_Plan_Nbr = rtrim(&CS.PNA_FLI_Plan_Nbr,' ')  || '         '

  if #m = 6         ! DI Plan #
     if $XMLPublisher = 'Y'

        do Build-XML-Line('NJ_DI_NBR', $VDI_Plan_Nbr, 'Y', #FNum, #FNum2, $UserFlag)
     else

       #ifndef LayoutW2-6
          let #L15A = #L_15A + 1
       #endif
       #ifdef LayoutW2-6
          let #L15A = #L_15A + 2
       #endif
       print $VDI_Plan_Nbr (#L15A,#C_15A,#vdi_length)

     end-if
  else           !FLI Plan #
     if $XMLPublisher = 'Y'

        if $NJ_UI = 'Y' and $NJ_DI = 'Y'
           do Build-XML-Line('ST1_TAXES', $FLI_Plan_Text, 'Y', #FNum, #FNum2, $UserFlag)
           do Build-XML-Line('LOC1_WAGES', $FLI_Plan_Nbr,  'Y', #FNum, #FNum2, $UserFlag)
        else
           do Build-XML-Line('NJ_FLI_TXT', $FLI_Plan_Text, 'Y', #FNum, #FNum2, $UserFlag)
           do Build-XML-Line('NJ_FLI_NBR', $FLI_Plan_Nbr,  'Y', #FNum, #FNum2, $UserFlag)
        end-if
     else

       if ($NJ_UI = 'Y' and $NJ_DI = 'Y') or ($Form_ID = 'LSR02A')
          let #L17 = #L_17
          let #L18 = #L_18
       else
          #ifndef LayoutW2-6
             let #L17 = #L_17 + 1
             let #L18 = #L_18 + 1
          #endif
          #ifdef LayoutW2-6
             let #L17 = #L_17 + 2
             let #L18 = #L_18 + 2
          #endif
       end-if

       print $FLI_Plan_Text (#L17,#C_17)

       if $Form_ID <> 'LSR02A'
          print $FLI_Plan_Nbr (#L18,#C_18)
       else
          let #L17 = #L_17 + 1
          print $FLI_Plan_Nbr (#L17,#C_17)
       end-if

     end-if
  end-if

FROM  PS_CO_STATETAX_TBL CS
WHERE CS.COMPANY = $E.Company
  AND CS.STATE = 'NJ'
  AND CS.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_CO_STATETAX_TBL
       WHERE  COMPANY = $E.Company
         AND  STATE   = 'NJ'
         AND  EFFDT  <= $AsOfDate)
end-SELECT
end-procedure


begin-procedure Print-NJFLI

  ! Print NJ Box 14C and 14H combined in box 19 (amount) and box 20 (text)

  let #myCount = 0                                  !Print on the 1st line of box 19/20
  if ($NJ_UI = 'Y' and $NJ_DI = 'N') or ($NJ_UI = 'N' and $NJ_DI = 'Y')
     let #myCount = 1                               !Print on the 2nd line of box 19/20
  end-if

  if $Form_ID = 'LSR02A'
     let #myCount = 0
  end-if

  if (#myCount = 0) and ($NJ_DI = 'Y')              !Overflow page

     if RTRIM($E.W2_State,' ') <> ''
        if $XMLPublisher = 'Y'
           do Build-XML-Line('ST1_ST', $E.W2_State, 'Y', #FNum, #FNum2, $UserFlag)
           do Build-XML-Line('ST1_StateID', $E.Employer_ID_SWT, 'Y', #FNum, #FNum2, $UserFlag)
        else
           do Print-Value($E.W2_State,#L_15,#C_15,'Box 15')            !State
           do Print-Value($E.Employer_ID_SWT,#L_15A,#C_15A,'Box 15A')  !State employer ID
        end-if
     else
        if $XMLPublisher <> 'Y'
           do Print-Value(' ',#L_15,#C_15,' ')
        end-if
     end-if
  end-if

  if $NJ_VPFLI = 'Y'                  !box 14H
     let #m = 0
     do Print-NJSUT
  end-if


  if $XMLPublisher = 'Y'
    if #NJFLI_VPFLI_Tot <> 0
       do Format-Number (#NJFLI_VPFLI_Tot, $out, '99999999.99')
       if  #myCount = 0
         do Build-XML-Line('LOC1_TAXES', $out, 'Y', #FNum, #FNum2, $UserFlag)
         do Build-XML-Line('LOC1_LOC', $NJFLI_text, 'Y', #FNum, #FNum2, $UserFlag)
       else
         do Build-XML-Line('LOC2_Text1', $out, 'Y', #FNum, #FNum2, $UserFlag)
         do Build-XML-Line('LOC2_Text2', $NJFLI_text, 'Y', #FNum, #FNum2, $UserFlag)
       end-if
    end-if
  else
    if #NJFLI_VPFLI_Tot <> 0
       if #myCount = 0
          let #L19 = #L_19
          let #L20 = #L_20
       else
          #ifndef LayoutW2-6
             let #L19 = #L_19 + 1
             let #L20 = #L_20 + 1
          #endif
          #ifdef LayoutW2-6
             let #L19 = #L_19 + 2
             let #L20 = #L_20 + 2
          #endif

       end-if

       let #myLocalityBoxSize = #YE_Locality_Box_Size
       #ifndef LayoutW2-6
          print $NJFLI_text (#L20,#C_20,#myLocalityBoxSize)
       #endif
       #ifdef LayoutW2-6
          let #myLocalityBoxSize = #myLocalityBoxSize - 1
          print $NJFLI_text (#L20,#C_20,#myLocalityBoxSize)
       #endif

       do Format-Number(#NJFLI_VPFLI_Tot, $out, $F14)
       do Print-Value($out,#L19,#C_19,'Box 19')
    end-if
  end-if

end-procedure

begin-procedure Print-PA-Box14

  if $XMLPublisher = 'Y'
     do Format-Number (#14, $out, '9999999.99')
     let $b14Amt = lpad(ltrim($out,' '),10,' ')
     if $B_14 = '14YN'  or
        $B_14 = '14YT'  or
        $B_14 = '14ZN'
       let $b14Lbl = substr($T_14,1,3)
       let $b14Lbl = rpad($b14Lbl,6,' ')
     else
       let $b14Lbl = substr($T_14,1,5)
       let $b14Lbl = rpad($b14Lbl,6,' ')
     end-if
     let $b14    = $b14Lbl || ' ' || $b14Amt
     if #box14Count = 1
        do Build-XML-Line('Other1', $b14, 'Y', #FNum, #FNum2, $UserFlag)
!       do Build-XML-Line('B14_LBL1', $T_14, 'Y', #FNum, #FNum2, $UserFlag)
!       do Build-XML-Line('B14_AMT1', $out, 'Y', #FNum, #FNum2, $UserFlag)
     else
        if #box14Count = 2
           do Build-XML-Line('Other2', $b14, 'Y', #FNum, #FNum2, $UserFlag)
!          do Build-XML-Line('B14_LBL2', $T_14, 'Y', #FNum, #FNum2, $UserFlag)
!          do Build-XML-Line('B14_AMT2', $out, 'Y', #FNum, #FNum2, $UserFlag)
        else
           if #box14Count = 3
              do Build-XML-Line('Other3', $b14, 'Y', #FNum, #FNum2, $UserFlag)
!             do Build-XML-Line('B14_LBL3', $T_14, 'Y', #FNum, #FNum2, $UserFlag)
!             do Build-XML-Line('B14_AMT3', $out, 'Y', #FNum, #FNum2, $UserFlag)
           else
              do Build-XML-Line('Other4', $b14, 'Y', #FNum, #FNum2, $UserFlag)
!             do Build-XML-Line('B14_LBL4', $T_14, 'Y', #FNum, #FNum2, $UserFlag)
!             do Build-XML-Line('B14_AMT4', $out, 'Y', #FNum, #FNum2, $UserFlag)
           end-if
        end-if
     end-if
     let #Amount = #14
     do Add-Box14-Totals
     add 1 to #box14Count

  else
    print $T_14   (#L_14,#C_14,#F14ID)
    do Format-Number(#14, $out, $F14Print)
    print $out ()
    if #T_Count > #Align_Count
      if #j = 1
        let #Amount = #14
        do Add-Box14-Totals
      end-if
    end-if
    add 1 to #L_14
  end-if

end-procedure

begin-procedure Zero-Box14
  move 0 to #m
  while #m <= 29
    put 0 into Box14(#m) Amount
    add 1 to #m
  end-while
  move #L_14_Start to #L_14
end-procedure

begin-procedure Zero-Local-Table
   move 0 to #l
   while #l <= 20
      put '      ' into Locals(#l) Locality
      put '      ' into Locals(#l) WorkPSD
      put '      ' into Locals(#l) ResPSD
      put 0 into Locals(#l)   TxGrs
      put 0 into Locals(#l)  Tax
      add 1 to #l
   end-while
end-procedure

begin-procedure Print-Box13
  if #Align_Count > 0 AND $XMLPublisher <> 'Y'
    do Print-Value('S',#L_13A,#C_13A,'Box 13A')
    do Print-Value('P',#L_13B,#C_13B,'Box 13B')
    do Print-Value('T',#L_13C,#C_13C,'Box 13C')
  end-if

  if $XMLPublisher = 'Y'
     if $E.Statutory_Ee = 'Y'
        do Build-XML-Line('STAT_EE', 'Y', 'Y', #FNum, #FNum2, $UserFlag)
     end-if
     if $E.Pension_Plan = 'Y'
        do Build-XML-Line('RETIRE_EE', 'Y', 'Y', #FNum, #FNum2, $UserFlag)
     end-if
     if $E.Thirdparty_Sickpay = 'Y'
        do Build-XML-Line('SICK_EE', 'Y', 'Y', #FNum, #FNum2, $UserFlag)
     end-if

  else
     if $E.Statutory_Ee = 'Y'
       do Print-Value('X',#L_13A,#C_13A,'Box 13A')
     end-if
     if $E.Pension_Plan = 'Y'
       do Print-Value('X',#L_13B,#C_13B,'Box 13B')
     end-if
     if $E.Thirdparty_Sickpay = 'Y'
       do Print-Value('X',#L_13C,#C_13C,'Box 13C')
     end-if
  end-if

end-procedure

begin-procedure Print-Intermediate-Total
  move 1 to #j
  while #j <= #FormsPerPage/#EmployeesPerPage  !loop for individual ee's
    do Next-Form
    do Print-ER-Data

    do Format-Number(#Fed_Wages_I, $out, $F01)          !Federal wages
    do Print-Value($out,#L_01,#C_01,'Box 01')

    do Format-Number(#Fed_Tax_I, $out, $F02)          !Federal tax
    do Print-Value($out,#L_02,#C_02,'Box 02')

    do Format-Number(#SS_Wages_I, $out, $F03)          !SS wages
    do Print-Value($out,#L_03,#C_03,'Box 03')

    do Format-Number(#SS_Tax_I, $out, $F04)          !SS Tax
    do Print-Value($out,#L_04,#C_04,'Box 04')

    do Format-Number(#Med_Wages_I, $out, $F05)          !Medicare wages
    do Print-Value($out,#L_05,#C_05,'Box 05')

    do Format-Number(#Med_Tax_I, $out, $F06)          !Medicare tax
    do Print-Value($out,#L_06,#C_06,'Box 06')

    do Format-Number(#SS_Tips_I, $out, $F07)          !SS tips
    do Print-Value($out,#L_07,#C_07,'Box 07')

    do Format-Number(#Alloc_Tips_I, $out, $F08)          !Allocated tips
    do Print-Value($out,#L_08,#C_08,'Box 08')

    if #Adv_EIC_I <> 0                                !EIC
       do Format-Number(#Adv_EIC_I, $out, $F09)
       do Print-Value($out,#L_09,#C_09,'Box 09')
    end-if

    do Format-Number(#Dep_Care_I, $out, $F10)          !Dependent care
    do Print-Value($out,#L_10,#C_10,'Box 10')

    do Format-Number(#Non_Qual_457_Amt_I, $out, $F11)          !non-qualified plan total
    do Print-Value($out,#L_11,#C_11,'Box 11')

    add 1 to #j
  end-while

  do Add-Interum-to-Totals

end-procedure

begin-procedure Print-Grand-Totals

  do Print-Box-Totals

end-procedure

begin-procedure Next-Form
  evaluate $Layout_Style
    when = '4CORNER'
    when = '4CORNERPS'
      do Next-Form-FourCorner
      break
    when = '4VERTICAL'
      do Next-Form-FourVertical
      break
    when = '2VERTICAL'
      do Next-Form-TwoVertical
      break
  end-evaluate
end-procedure

begin-procedure Next-Form-FourCorner
  if #Form# <> 4
    add  1 to #Form#
  else
    move 1 to #Form#
  end-if

  evaluate #Form#
    when = 1
      if $Layout_Style <> '4CORNERPS'
        new-page
      else
        if $First_page_PS = 'N'
          next-listing   ! for all pages except the first - layout: 4CORNERPS
        end-if
        Let $First_page_PS = 'N'
      end-if
      do Print-Value(' ',#Top_Margin,1,'Top Margin')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 2
      next-column
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 3
      next-listing
      do Print-Value(' ',#Center_Split,1,'Center Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 4
      next-column
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
  end-evaluate
end-procedure

begin-procedure Next-Form-FourVertical

  if #Form# <> 4
    add 1 to #Form#
  else
    move 1 to #form#
  end-if

  evaluate #Form#                 !use to position for next forms
    when = 1

      if $Form_ID = 'LPS4V'
          next-listing
      else
          new-page
      end-if
      do Print-Value(' ',#Top_Margin,1,'Top Margin')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 2
      next-listing
      do Print-Value(' ',#Top_Split,1,'Top Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 3
      next-listing
      do Print-Value(' ',#Center_Split,1,'Center Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 4
      next-listing
      do Print-Value(' ',#Bottom_Split,1,'Bottom Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
  end-evaluate
end-procedure

begin-procedure Next-Form-TwoVertical
  if #Form# <> 2
    add 1 to #Form#
  else
    move 1 to #form#
  end-if

  evaluate #Form#                 !use to position for next forms
    when = 1
      new-page
      next-column
      do Print-Value(' ',#Top_Margin,1,'Top Margin')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 2
      next-listing
      do Print-Value(' ',#Center_Split,1,'Center Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
  end-evaluate
end-procedure

begin-procedure Load-W2-PRT

begin-SELECT
F.LAYOUT_STYLE
F.TOP_MARGIN
F.TOP_SPLIT
F.CENTER_SPLIT
F.BOTTOM_SPLIT
F.LAST_PRINT_LINE
F.LOCALS_PER_FORM
F.TAXFORM_ID

  let $Layout_Style = RTRIM(&F.Layout_Style,' ')

  move &F.Top_Margin       to #Top_Margin
  move &F.Top_Split        to #Top_Split
  move &F.Center_Split     to #Center_Split
  move &F.Bottom_Split     to #Bottom_Split
  move &F.Last_Print_Line  to #Last_Print_Line
  move &F.Locals_Per_Form  to #Locals_Per_Form
  move &F.Taxform_Id       to $Taxform_Id

! encode '<27>E<27>(0N<27>&l6D<27>&l0E<27>&l66F' into $SetupString
! print $SetupString (1,1)
!            |    |       |       |       |
!            |    |       |       |        --> 66 text lines
!            |    |       |        --> top margin = 0 lines
!            |    |        --> 6 lines per inch
!            |     --> ISO 8859-1 symbol set
!             --> Reset

FROM  PS_TAXFORM_FORM F
WHERE F.FORM_ID = &TX.Form_ID
  AND F.TAXFORM_ID = 'W'
  AND F.EFFDT   =
      (SELECT MAX(EFFDT)
       FROM   PS_TAXFORM_TBL
       WHERE  TAXFORM_ID = F.TAXFORM_ID
         AND  EFFDT  <= $AsOfDate)
end-SELECT


!smh
  do assign-year-end-variables
!smh


let #m = 0
let #Box14ArrayCount = 0

Begin-SELECT
N.BOX

  let $N.Box = &N.Box
  let $N.Box = rpad($N.Box,4,' ')
  move $N.Box to $Box xx
  let $Pos3 = substr($N.Box, 3,1)

  if $Box = $YE_Other
    and $Pos3 > ' '
    let $Box14Letter = SUBSTR($N.Box,3,2)
    let $Box14Letter = rpad($Box14Letter,2,' ')
    PUT $N.BOX INTO BOX14(#m) BOX
    if $N.Box = $YE_OtherYN
       let #boxYN = #m
    end-if
    if $N.Box = $YE_OtherYT
       let #boxYT= #m
    end-if
    if $N.Box = $YE_OtherZN
       let #boxZN = #m
    end-if
    if $N.Box = $YE_OtherD
       let #box14D = #m
    end-if
    if $N.Box = $YE_OtherE
       let #box14E = #m
    end-if
    if $N.Box = $YE_OtherG
       let #box14G = #m
    end-if
    if $N.Box = $YE_OtherC
       let #box14C = #m
    end-if
    if $N.Box = $YE_OtherH
       let #box14H = #m
    end-if
    let #m=#m+1
  end-if

FROM PS_TAXFORM_BOX N WHERE
 TAXFORM_ID = 'W'
  AND N.EFFDT   =
      (SELECT MAX(EFFDT)
       FROM   PS_TAXFORM_TBL
       WHERE  TAXFORM_ID = N.TAXFORM_ID
         AND  EFFDT  <= $AsOfDate)
ORDER BY N.BOX
END-SELECT

  let #Box14ArrayCount = #m

begin-SELECT
P.BOX
P.PRINT_LINE
P.PRINT_COL
P.PRINT_FORMAT
P.PRINT_TEXT

  let $P.Box = &P.Box
  move $P.Box to $Box xx
  let $Pos3 = substr($P.Box, 3,1)
  if ($Box = $YE_Box12_StartPos or
      $Box = $YE_Other)
    and $Pos3 > ' '
    let $P.Box = &P.Box
    let $P.Box = rpad($P.Box,4,' ')
  else
    let $P.Box = RTRIM(&P.Box,' ')
  end-if

  Do Evaluate-Print-Box

  if $P.Box = $YE_Other
     move &P.Print_Line   to #L_14_Start
     let $F14 = RTRIM(&P.Print_Format,' ')
  else
     if $Box = $YE_Other
       move &P.Print_Col    to #C_14_Start
       let #m = 0
       let $Box14Letter = SUBSTR($P.Box,1,4)
       While #m < 30
         Get $BoxLetter from BOX14(#m) Box
         if $BoxLetter = $Box14Letter
           let $m = #m
           let $P.Print_Text = RTRIM(&P.Print_Text,' ')
           PUT &P.Print_Col $P.Print_Text INTO BOX14(#m) COLUMN TEXT
           let #m = 30
         end-if
         let #m=#m+1
       End-While
       move '  ' to $Box
      end-if
  end-if

FROM  PS_TAXFORM_PRT P
WHERE P.FORM_ID = &TX.Form_ID
  AND P.TAXFORM_ID = 'W'
  AND P.EFFDT   =
      (SELECT MAX(EFFDT)
       FROM   PS_TAXFORM_TBL
       WHERE  TAXFORM_ID = P.TAXFORM_ID
         AND  EFFDT  <= $AsOfDate)
ORDER BY P.BOX
end-SELECT
end-procedure

begin-procedure Check-Box14-Print-Parameters

 let $LikeBox14 = $YE_Other||'%'
 let $Box14ErrorFound = 'N'

begin-SELECT DISTINCT
Q.BOX
    let #m = 0
    let $QBox = rtrim(&Q.BOX,' ')
    While #m < #Box14ArrayCount
      Get $14ArrayBox #14ArrayColumn from BOX14(#m) Box Column
        let $14ArrayBox = rtrim($14ArrayBox,' ')
        if $14ArrayBox = $QBox and
           #14ArrayColumn = 0
             if $Box14ErrorFound = 'N'
               display '***************************************************************'
             end-if
             display 'Error - Box 'noline
             display &Q.BOX
             let $Box14ErrorFound = 'Y'
        end-if
      let #m = #m+1
    End-While

FROM PS_YE_AMOUNTS Q
WHERE Q.BOX LIKE $LikeBox14
  AND Q.CALENDAR_YEAR = &TX.BALANCE_YEAR
  AND Q.TAXFORM_ID    = $Taxform_id
  ORDER BY Q.BOX
end-SELECT

  if $Box14ErrorFound = 'Y'
             display 'Print parameters have not been defined, or Print Column is'
             display 'blank on the Tax Form Print Parameters table for the box'
             display 'numbers shown above.'
             display 'Add or update the parameters on the Print Parameter table for'
             display 'each Form ID you are using.'
             display '***************************************************************'
     stop
  end-if

end-procedure

begin-procedure Get-Locality-Print-Name

 if $AlignForm  = 'Y'
    let $LocalityPrintName =
         LPAD($x,TO_NUMBER(SUBSTR($F20,3,INSTR($F20,')',1)-2)),'X')
    move 'N' to $AlignForm
 else
 if RTRIM($E.W2_State,' ') = 'OH' and &TX.BALANCE_YEAR = 2001     !For year 2001 Warren OH requires the locality tax
  and RTRIM($Locality,' ') = '80892'                              !to be split into the first and second half of the
     move 'Y' to $LocalityNameFound                               !year.  The load program has split the balances.
     move 'Q4 WARR' to $LocalityPrintName                       !The print program just needs to change the name to
  else                                                            !describe the balances for the same locality.

      if RTRIM($E.W2_State,' ') = 'OH' and &TX.BALANCE_YEAR = 2001
      and RTRIM($Locality,' ') = '80892A'
        move 'Y' to $LocalityNameFound
        move 'Q2 WARR' to $LocalityPrintName
      else

          if RTRIM($E.W2_State,' ') = 'PA' and &TX.BALANCE_YEAR > 2011
             if  $Locality = '510101' OR
                 $WorkPSD  = '510101' OR
                 $ResPSD   = '510101'
                 move 'Y' to $LocalityNameFound
                 move 'PHILADE' to $LocalityPrintName
                 let #YE_Locality_Box_Size = 7
             else
                 if RTRIM($A.TCD_Code,' ') <> ''
                    move 'Y' to $LocalityNameFound
                    move $A.TCD_Code to $LocalityPrintName
                 else
                    if $WorkPSD = '880000' OR
                       $WorkPSD = '990000'
                       move 'Y' to $LocalityNameFound
                       let $LocalityPrintName = substr($ResPSD,1,2)
                    else
                       move 'Y' to $LocalityNameFound
                       let $LocalityPrintName = substr($WorkPSD,1,2)
                    end-if
                 end-if
             end-if

          else
              do Get-Locality-Name
          end-if

      end-if
    end-if
  end-if

 if RTRIM($E.W2_State, ' ') = 'IN' and &TX.BALANCE_YEAR > 2002
    and RTRIM($Locality,' ') <> '99990'                       !Locality 99990 represents Indiana EIC
      let $LocalityPrintName = 'C ' || $LocalityPrintName
 end-if

 if #YE_Locality_Box_Size > #MAXLOCAL
    let #YE_Locality_Box_Size = #MAXLOCAL
 end-if

 if Length($LocalityPrintName) > #YE_Locality_Box_Size
    let $LocalityPrintName = substr($LocalityPrintName,1,#YE_Locality_Box_Size)
 end-if

end-procedure

begin-procedure Get-Locality-Name

  move 'N' to $LocalityNameFound

begin-SELECT
L2.W2_PRT_NAME
L2.LOCALITY_ABBRV

  move 'Y' to $LocalityNameFound

FROM  PS_LOCAL_TAX_TBL2 L2
WHERE L2.STATE     = $E.W2_State
  AND L2.LOCALITY  = $Locality
  AND L2.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL2
       WHERE  STATE    = L2.STATE
         AND  LOCALITY = L2.LOCALITY
         AND  EFFDT   <= $AsOfDate)
end-SELECT

if #YE_Locality_Box_Size > #MAXLOCAL
   let #YE_Locality_Box_Size = #MAXLOCAL
end-if
  if $LocalityNameFound = 'Y' and RTRIM(&L2.W2_Prt_Name,' ') <> ''
    let $LocalityPrintName  = SUBSTR(&L2.W2_Prt_Name,1,#YE_Locality_Box_Size)
  else
    if $LocalityNameFound = 'Y' and RTRIM(&L2.Locality_Abbrv,' ') <> ''
      let $LocalityPrintName  = SUBSTR(&L2.Locality_Abbrv,1,#YE_Locality_Box_Size)
    else
       do Get-Locality-Abbrv
    end-if
  end-if
end-procedure

begin-procedure Get-Locality-Abbrv
begin-SELECT
L.LOCALITY_NAME

  let $LocalityPrintName  = SUBSTR(&L.LOCALITY_NAME,1,#YE_Locality_Box_Size)

FROM  PS_LOCAL_TAX_TBL L
WHERE L.STATE      = $E.W2_State
  AND L.LOCALITY   = $Locality
  AND L.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL
       WHERE  STATE    = L.STATE
         AND  LOCALITY = L.LOCALITY
         AND  EFFDT   <= $AsOfDate)
end-SELECT

end-procedure

begin-procedure Get-Country-Code
begin-SELECT
CT.DESCR
FROM  PS_COUNTRY_TBL CT
WHERE CT.COUNTRY = $E.Country
end-SELECT
end-procedure

begin-procedure Prompts

  do Prompt-for-Sort

  if $SortCode1 <> '7'
    while $SelectEEs = ''
      display ''
      display 'Regular processing or Select employees?'
      input $SelectEEs 'Enter R or S'
      uppercase $SelectEEs
      if INSTR('RS',$SelectEEs,1) = 0
        display 'Enter R or S'
        move '' to $SelectEEs
      end-if
    end-while
  end-if

  if $SelectEEs = 'S'
  and $SortCode1 <> '7'
    display 'Enter EmplID or hit ENTER to stop selecting'
    move 'AND E.EMPLID in (''' to $E.SelectedEEs
    move 'AND S.EMPLID in (''' to $S.SelectedEEs
    move 'AND J.EMPLID in (''' to $J.SelectedEEs
    move ' ' to $SelectedEmplID
    while $SelectedEmplID <> ''
      input $SelectedEmplID ' '
      uppercase $SelectedEmplID
      if $SelectedEmplID <> ''
        let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
        let $S.SelectedEEs = $S.SelectedEEs || $SelectedEmplID || ''','''
        let $J.SelectedEEs = $J.SelectedEEs || $SelectedEmplID || ''','''
        move 'Y' to $EE_Selected
      end-if
    end-while

    if $EE_Selected <> 'Y'
      display ''
      display 'No employees selected. Program stopped.'
      display ''
      stop
    end-if

    let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
    let $E.SelectedEEs = $E.SelectedEEs || ')'

    let $S.SelectedEEs = SUBSTR($S.SelectedEEs,1,LENGTH($S.SelectedEEs) - 2)
    let $S.SelectedEEs = $S.SelectedEEs || ')'

    let $J.SelectedEEs = SUBSTR($J.SelectedEEs,1,LENGTH($J.SelectedEEs) - 2)
    let $J.SelectedEEs = $J.SelectedEEs || ')'
  else
    move '' to $E.SelectedEEs
    move '' to $S.SelectedEEs
    move '' to $J.SelectedEEs
  end-if
end-procedure

begin-procedure Load-Test-Data
  let $E.Control_Number =
         LPAD($x,TO_NUMBER(SUBSTR($FA,3,INSTR($FA,')',1)-2)),'X')

  let $A.Federal_EIN =
         LPAD($x,TO_NUMBER(SUBSTR($FB,3,INSTR($FB,')',1)-2)),'X')

  let $A.Descr =
         LPAD($x,TO_NUMBER(SUBSTR($FC1,3,INSTR($FC1,')',1)-2)),'X')

  let $A.Address1 =
         LPAD($x,TO_NUMBER(SUBSTR($FC2,3,INSTR($FC2,')',1)-2)),'X')

  let $A.Address2 =
         LPAD($x,TO_NUMBER(SUBSTR($FC3,3,INSTR($FC3,')',1)-2)),'X')

  let $C4 =
         LPAD($x,TO_NUMBER(SUBSTR($FC4,3,INSTR($FC4,')',1)-2)),'X')

  let $E.SSN =
         LPAD($x,TO_NUMBER(SUBSTR($FD,3,INSTR($FD,')',1)-2)),'X')

  let $E.YE_Name =
         LPAD($x,TO_NUMBER(SUBSTR($FE,3,INSTR($FE,')',1)-2)),'X')

  let $E.YE_FName =
         LPAD($x,TO_NUMBER(SUBSTR($FE1,3,INSTR($FE1,')',1)-2)),'X')

  let $E.YE_LName =
         LPAD($x,TO_NUMBER(SUBSTR($FE3,3,INSTR($FE3,')',1)-2)),'X')

  if &TX.BALANCE_YEAR > 2005
     let $E.YE_Suffix =
         LPAD($x,TO_NUMBER(SUBSTR($FE4,3,INSTR($FE4,')',1)-2)),'X')
  end-if

  let $E.Address1 =
         LPAD($x,TO_NUMBER(SUBSTR($FF1,3,INSTR($FF1,')',1)-2)),'X')

  let $E.Address2 =
         LPAD($x,TO_NUMBER(SUBSTR($FF2,3,INSTR($FF2,')',1)-2)),'X')

  let $F3 =
         LPAD($x,TO_NUMBER(SUBSTR($FF3,3,INSTR($FF3,')',1)-2)),'X')

  let $E.YE_Name_flap =
         LPAD($x,55,'X')

  let $E.Address1_flap =
         LPAD($x,55,'X')

  let $E.Address2_flap =
         LPAD($x,55,'X')

  let $F3_flap =
         LPAD($x,55,'X')

  if $Form_ID <> 'LSR02A'
    let $ReprintDescr =
         LPAD($x,TO_NUMBER(SUBSTR($FReprint,3,INSTR($FReprint,')',1)-2)),'X')
  else
    let $ReprintDescr =
         LPAD($x,15,'X')
  end-if

  let $ReprintDescr1 =
         LPAD($x,TO_NUMBER(SUBSTR($FReprint1,3,INSTR($FReprint1,')',1)-2)),'X')

  let $ReprintDescr2 =
         LPAD($x,TO_NUMBER(SUBSTR($FReprint2,3,INSTR($FReprint2,')',1)-2)),'X')

  move $F01 to $01
  let $01 = TRANSLATE($01,'Bb','99')              !Federal wages
  move $01 to #Fed_Wages

  move $F02 to $02
  let $02 = TRANSLATE($02,'Bb','99')              !Federal tax
  move $02 to #Fed_Tax

  move $F03 to $03
  let $03 = TRANSLATE($03,'Bb','99')              !SS wages
  move $03 to #SS_Wages

  move $F04 to $04
  let $04 = TRANSLATE($04,'Bb','99')              !SS Tax
  move $04 to #SS_Tax

  move $F05 to $05
  let $05 = TRANSLATE($05,'Bb','99')              !Medicare wages
  move $05 to #Med_Wages

  move $F06 to $06
  let $06 = TRANSLATE($06,'Bb','99')              !Medicare tax
  move $06 to #Med_Tax

  move $F07 to $07
  let $07 = TRANSLATE($07,'Bb','99')              !SS tips
  move $07 to #SS_Tips

  move $F08 to $08
  let $08 = TRANSLATE($08,'Bb','99')              !Allocated tips
  move $08 to #Alloc_Tips

  move $F09 to $09
  let $09 = TRANSLATE($09,'Bb','99')              !EIC
  move $09 to #Adv_EIC

  move $F10 to $10
  let $10 = TRANSLATE($10,'Bb','99')              !Dependent care
  move $10 to #Dep_Care

  move $F11 to $11
  let $11 = TRANSLATE($11,'Bb','99')              !Non-qualified plans
  move $11 to #Non_Qual_457_Amt

  move $F12 to $12
  let $12 = TRANSLATE($12,'Bb','99')              !Box 12 Amounts
  move $12 to #Uncoll_SS_Tax_On_Tips
  move $12 to #Uncoll_Med_Tax_On_Tips
  move $12 to #Group_Term_Life
  move $12 to #401K

  move $F14 to $14
  let $14 = TRANSLATE($14,'Bb','99')              !Box 14 Amounts
  move $14 to #14
  move 0 to #i
  while #i <= 3
    put #14 into Box14(#i) Amount
    add 1 to #i
  end-while

  let $E.W2_State =
         LPAD($x,TO_NUMBER(SUBSTR($F15,3,INSTR($F15,')',1)-2)),'X')

  let $E.Employer_ID_SWT =
         LPAD($x,TO_NUMBER(SUBSTR($F15A,3,INSTR($F15A,')',1)-2)),'X')

  move $F16 to $16
  let $16 = TRANSLATE($16,'Bb','99')              !State wages
  move $16 to #State_Wages

  move $F17 to $17
  let $17 = TRANSLATE($17,'Bb','99')              !State tax
  move $17 to #State_Tax

  let #LOCALSIZE = TO_NUMBER(SUBSTR($F20,3,INSTR($F20,')',1)-2))

  if #LOCALSIZE > #MAXLOCAL
     let $LocalityPrintName = LPAD($x,#MAXLOCAL,'X')
  else
     let $LocalityPrintName = LPAD($x,#LOCALSIZE,'X')
  end-if

  move $F18 to $18
  let $18 = TRANSLATE($18,'Bb','99')              !Local wages
  move $18 to #Local_Wages

  move $F19 to $19
  let $19 = TRANSLATE($19,'Bb','99')              !Local tax
  move $19 to #Local_Tax

  put #Local_Wages #Local_Tax into Locals(1) TxGrs Tax
  put #Local_Wages #Local_Tax into Locals(2) TxGrs Tax

  move #Locals_Per_Form to #LocalCount
end-procedure

begin-procedure Print-Alignment-Forms
  move &TX.Align_Count to #Align_Count
  move 'Y' to $AlignForm
  let #Align_Count = #Align_Count * #FormsPerPage
  move #EmployeesPerPage to #temp
  move #FormsPerPage to #EmployeesPerPage
  move 1 to #k
  while #k <= #Align_Count
    do Load-Test-Data

    if $Form_ID = 'LPS4V' and (#k = 1 or mod(#k - 1,4) = 0)
       do LongNameAddressEE
    end-if

    do Print-W2
    if $Form_ID = 'LW2PS' and mod(#k,4) = 0   ! For the 4th form in every page.
      do LongNameAddress
    end-if
    add 1 to #k
  end-while
  let $FirstEE = 'Y'
  move 0 to #Align_Count
  move #temp to #EmployeesPerPage
  move '' to $priorState
  move '' to $priorLocality
  move '' to $LocalityPrintName
  move '' to $priorWorkPSD
  move '' to $priorResPSD
  do Zero-Box14
end-procedure

begin-procedure Print-Value($String,#Line,#Col,$Identifier)
!  DISPLAY $String
!  DISPLAY #Line
!  DISPLAY #Col
!  DISPLAY $Identifier

     if #Line > 0
       print $String (#Line,#Col)
     else
       display ''
       display '***************************************'
       display 'Print Line not defined for ' noline
       display $Identifier
       display 'in Tax Form Print Parameters Table.'
       display 'Program Stopped.'
       display '***************************************'
       display ''
       stop
     end-if

end-procedure

begin-procedure Convert-Parameters

  move $RC_US_YE.Reg_Select_Proc   to $SelectEEs
  move $RC_US_YE.Reg_Select_Comp   to $SelectCompanies
  move $RC_US_YE.Reg_Select_State  to $SelectStates
  move $RC_US_YE.Sort_Code1        to $SortCode1
  move $RC_US_YE.Sort_Code3        to $SortCode3


  if $SelectEEs = 'S'
    do Read-EEs
  end-if

  if $SelectCompanies = 'C'
    do Read-Companies
  end-if

  if $SelectStates = 'S'
    do Read-States
  end-if

  do Create-Order-By

end-procedure

begin-procedure Create-Order-By

  move 'ORDER BY E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2

  if $SortCode1 <> '1'
    display ' '
    display 'Selected As-Of Date for retrieving the sorted data.'
    display $AsofDate

    evaluate $SortCode3
      when = '1'               !ID
        evaluate $SortCode1
          when = '2'
            move 'ORDER BY E.W2_STATE, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
          when = '3'
            move 'ORDER BY J.PAYGROUP, S.EMPLID' to $Sort1
          when = '4'
            move 'ORDER BY J.DEPTID, S.EMPLID' to $Sort1
          when = '5'
            move 'ORDER BY E.POSTAL, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
          when = '6'
            move 'ORDER BY K.MAIL_DROP, S.EMPLID' to $Sort1
          when = '7'
            move 'ORDER BY E.W2_STATE, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
        end-evaluate

      when = '2'               !SSN
        evaluate $SortCode1
          when = '2'
            move 'ORDER BY E.W2_STATE, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
          when = '3'
            move 'ORDER BY J.PAYGROUP, S1.NATIONAL_ID' to $Sort1
          when = '4'
            move 'ORDER BY J.DEPTID, S1.NATIONAL_ID' to $Sort1
          when = '5'
            move 'ORDER BY E.POSTAL, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
          when = '6'
            move 'ORDER BY K.MAIL_DROP, S1.NATIONAL_ID' to $Sort1
          when = '7'
            move 'ORDER BY E.W2_STATE, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
        end-evaluate

      when = '3'               !Name
        evaluate $SortCode1
          when = '2'
            move 'ORDER BY E.W2_STATE,P.NAME, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
          when = '3'
            move 'ORDER BY J.PAYGROUP, S.NAME, S1.NATIONAL_ID' to $Sort1
          when = '4'
            move 'ORDER BY J.DEPTID, S.NAME, S1.NATIONAL_ID' to $Sort1
          when = '5'
            move 'ORDER BY E.POSTAL, P.NAME, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
          when = '6'
            move 'ORDER BY K.MAIL_DROP, S.NAME, S1.NATIONAL_ID' to $Sort1
          when = '7'
            move 'ORDER BY E.W2_STATE, P.NAME, E.SSN, E.SEQUENCE_NUMBER' to $Sort2
        end-evaluate

      when = ''               ! None  - default Emplid
        evaluate $SortCode1
          when = '2'
            move 'ORDER BY E.W2_STATE, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
          when = '3'
            move 'ORDER BY J.PAYGROUP, S.EMPLID' to $Sort1
          when = '4'
            move 'ORDER BY J.DEPTID, S.EMPLID' to $Sort1
          when = '5'
            move 'ORDER BY E.POSTAL, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
          when = '6'
            move 'ORDER BY K.MAIL_DROP, S.EMPLID' to $Sort1
          when = '7'
            move 'ORDER BY E.W2_STATE, E.EMPLID, E.SEQUENCE_NUMBER' to $Sort2
        end-evaluate

    end-evaluate
  else
    evaluate $SortCode3
      when = '1'
        move 'ORDER BY E.EMPLID, E.SEQUENCE_NUMBER, E.COMPANY' to $Sort2
      when = '2'
        move 'ORDER BY E.SSN, E.SEQUENCE_NUMBER, E.COMPANY'    to $Sort2
      when = '3'
        move 'ORDER BY P.NAME, E.SSN, E.SEQUENCE_NUMBER, E.COMPANY' to $Sort2
      when = ''
        move 'ORDER BY E.EMPLID, E.SEQUENCE_NUMBER, E.COMPANY' to $Sort2
    end-evaluate
  end-if
end-procedure


begin-procedure Read-EEs

move 'AND E.EMPLID in (''' to $E.SelectedEEs
move 'AND S.EMPLID in (''' to $S.SelectedEEs
move 'AND J.EMPLID in (''' to $J.SelectedEEs
move ' ' to $SelectedEmplID

begin-SELECT
C.SELECTED_EE

  move &C.Selected_EE     to $SelectedEmplID



  let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
  let $S.SelectedEEs = $S.SelectedEEs || $SelectedEmplID || ''','''
  let $J.SelectedEEs = $J.SelectedEEs || $SelectedEmplID || ''','''
  move 'Y' to $EE_Selected

FROM  PS_RC_TAX960US C
WHERE C.OPRID         = $Prcs_OprID
  AND C.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT


let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
let $E.SelectedEEs = $E.SelectedEEs || ')'

let $S.SelectedEEs = SUBSTR($S.SelectedEEs,1,LENGTH($S.SelectedEEs) - 2)
let $S.SelectedEEs = $S.SelectedEEs || ')'

let $J.SelectedEEs = SUBSTR($J.SelectedEEs,1,LENGTH($J.SelectedEEs) - 2)
let $J.SelectedEEs = $J.SelectedEEs || ')'

end-procedure

begin-procedure Delete-Sel-Employees-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_RC_TAX960US
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL
end-procedure

begin-procedure Read-Companies

move 'AND A.COMPANY in (''' to $A.SelectedCompanies
move ' ' to $SelectedEmplID

begin-SELECT
D.SELECTED_COMPANY

  move &D.SELECTED_COMPANY    to $SelectedCompany

  let $A.SelectedCompanies = $A.SelectedCompanies || $SelectedCompany || ''','''
  move 'Y' to $Company_Selected

FROM  PS_RC_SEL_COMPANY D
WHERE D.OPRID         = $Prcs_OprID
  AND D.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT

  if $Company_Selected = 'Y'
      let $A.SelectedCompanies = SUBSTR($A.SelectedCompanies,1,LENGTH($A.SelectedCompanies) - 2)
  else
      let $A.SelectedCompanies = $A.SelectedCompanies || ''''
  end-if
  let $A.SelectedCompanies = $A.SelectedCompanies || ')'

end-procedure

begin-procedure Delete-Sel-Company-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_RC_SEL_COMPANY
  WHERE OPRID       = $Prcs_OprID
    AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL
end-procedure

begin-procedure Read-States

  move 'N' to $States_Selected

  let $SelectedPrint1 = 'AND EXISTS (SELECT ''X'' FROM PS_YE_AMOUNTS YA ' ||
                        'WHERE YA.COMPANY = EE.COMPANY AND YA.EMPLID = EE.EMPLID ' ||
                        'AND YA.CALENDAR_YEAR = EE.CALENDAR_YEAR AND ('
  let $SelectedPrint2 = 'AND EXISTS (SELECT ''X'' FROM PS_YE_AMOUNTS YA ' ||
                        'WHERE YA.COMPANY = J.COMPANY AND YA.EMPLID = J.EMPLID ' ||
                        'AND YA.CALENDAR_YEAR = ' || $rpt_year || ' AND ('
  let $SelectedPrint3 = 'AND ('

begin-SELECT
SS.STATE
SS.LOCALITY

  let $SelectedState    = rtrim(&SS.STATE, ' ')
  let $SelectedLocality = rtrim(&SS.LOCALITY, ' ')

  if $States_Selected = 'Y'
     let $SelectedPrint1 = $SelectedPrint1 || ' OR '
     let $SelectedPrint2 = $SelectedPrint2 || ' OR '
     let $SelectedPrint3 = $SelectedPrint3 || ' OR '
  else
     move 'Y' to $States_Selected
  end-if

  let $SelectedPrint1 = $SelectedPrint1 || '(YA.STATE = ''' || $SelectedState || ''''
  let $SelectedPrint2 = $SelectedPrint2 || '(YA.STATE = ''' || $SelectedState || ''''
  let $SelectedPrint3 = $SelectedPrint3 || '(SL.STATE = ''' || $SelectedState || ''''

  if $SelectedLocality = ''
     let $SelectedPrint1 = $SelectedPrint1 || ')'
     let $SelectedPrint2 = $SelectedPrint2 || ')'
     let $SelectedPrint3 = $SelectedPrint3 || ')'
  else
     let $SelectedPrint1 = $SelectedPrint1 || ' AND YA.LOCALITY = ''' || $SelectedLocality || ''')'
     let $SelectedPrint2 = $SelectedPrint2 || ' AND YA.LOCALITY = ''' || $SelectedLocality || ''')'
     let $SelectedPrint3 = $SelectedPrint3 || ' AND SL.LOCALITY = ''' || $SelectedLocality || ''')'
  end-if

FROM  PS_RC_SEL_STATE SS
WHERE SS.OPRID       = $Prcs_OprID
  AND SS.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-SELECT

  if $States_Selected = 'Y'
     let $SelectedPrint1 = $SelectedPrint1 || '))'
     let $SelectedPrint2 = $SelectedPrint2 || '))'
     let $SelectedPrint3 = $SelectedPrint3 || ')'
  else
     let $SelectedPrint1 = ' '
     let $SelectedPrint2 = ' '
     let $SelectedPrint3 = ' '
  end-if

end-procedure

begin-procedure Delete-Sel-State-Table
begin-SQL on-error=Ignore
DELETE FROM PS_RC_SEL_STATE
WHERE OPRID       = $Prcs_OprID
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-SQL
end-procedure

begin-procedure Ignore
! dummy procedure to avoid SQL error message on delete of empty table
end-procedure

begin-procedure LongNameAddressEE
  new-page

  if $FirstEE = 'Y'
  and #Align_Count = 0
    do Get-EE-Address-Line3
    let $firstEE = 'N'
  end-if

  if RTRIM($E.Address2, ' ') <> ''
   if $Use_Alternate_Name_flap = 'Y'
       print $Alternate_Name_flap     (6,22)
   else
       print $E.YE_Name_flap          (6,22)
   end-if
   print $E.Address1_flap    (+1,22)
   print $E.Address2_flap    (+1,22)
   print $F3_flap            (+1,22)
 else
   if $Use_Alternate_Name_flap = 'Y'
       print $Alternate_Name_flap     (7,22)
   else
       print $E.YE_Name_flap          (7,22)
   end-if
   print $E.Address1_flap    (+1,22)
   print $F3_flap            (+1,22)
 end-if
end-procedure

begin-procedure LongNameAddress

  next-column

  print $A.Descr (45,2)
  print $A.Address1 (+1,2)
  if RTRIM($A.Address2, ' ') <> ''
    print $A.Address2 (+1,2)
  end-if
  print $C4 (+1,2)

  if RTRIM($E.Address2, ' ') <> ''
    if $Use_Alternate_Name = 'Y'
        print $Alternate_Name     (60,21)
    else
        print $E.YE_Name          (60,21)
    end-if
    print $E.Address1    (+1,21)
    print $E.Address2    (+1,21)
    print $F3            (+1,21)
  else
    if $Use_Alternate_Name = 'Y'
        print $Alternate_Name     (61,21)
    else
        print $E.YE_Name          (61,21)
    end-if
    print $E.Address1    (+1,21)
    print $F3            (+1,21)
  end-if

end-procedure

begin-procedure Get-XMLP-Definitions

  do Get-XML-URLID
  do Get-Report-Definitions

  move 'N'  to $RC_US_YE.Py_Ye_Rpt_Burst
  move 'N'  to $Py_Ye_Rpt_Burst
  if $OPT_SS.PY_YE_RPT_SS = 'Y'
     move $OPT_SS.REPORT_DEFN_ID to $Report_Defn_ID

!     do Check-Burst-Value
!     move $Py_Ye_Rpt_Burst  to $RC_US_YE.Py_Ye_Rpt_Burst

!     if $Py_Ye_Rpt_Burst <> 'Y'
!        move 'N' to $OPT_SS.PY_YE_RPT_SS
!        display 'No burst fieldname given for self-service report definition ' noline
!        display $OPT_SS.REPORT_DEFN_ID
!     end-if
  end-if

  move 'N'  to $Py_Ye_Rpt_Burst

  if #OPT_BLK.PY_RPT_BATCH_SIZE <> 0
     move $OPT_BLK.REPORT_DEFN_ID to $Report_Defn_ID
     do Check-Burst-Value

     if $Py_Ye_Rpt_Burst <> 'Y'
        display 'No burst fieldname given for batched report definition ' noline
        display $OPT_BLK.REPORT_DEFN_ID
     end-if
  end-if

end-procedure

begin-procedure Get-XML-URLID

! fetch XML data files URLID

  move ' '  to $OPT_XML.PY_YE_XMLURLID

begin-SELECT
OPT_XML.PY_YE_XMLURLID

  move &OPT_XML.PY_YE_XMLURLID      to $OPT_XML.PY_YE_XMLURLID

  exit-SELECT

FROM PS_PY_YE_OPT_TAX OPT_XML
WHERE OPT_XML.PY_TAX_YEAR     = &TX.BALANCE_YEAR
  AND OPT_XML.TAXFORM_ID      = 'W'
end-SELECT

  if $OPT_XML.PY_YE_XMLURLID = ' '
     display 'XML data file URLID is missing.'
  end-if

end-procedure

begin-procedure Get-Report-Definitions

! fetch definitions for self-service

  move 'N'  to $OPT_SS.PY_YE_RPT_SS
  move ' '  to $OPT_SS.REPORT_DEFN_ID
  move ' '  to $OPT_SS.TMPLDEFN_ID

begin-SELECT
OPT_SS.PY_YE_RPT_SS
OPT_SS.REPORT_DEFN_ID
OPT_SS.TMPLDEFN_ID
OPT_SS.PY_RPT_BATCH_SIZE

  move &OPT_SS.PY_YE_RPT_SS      to $OPT_SS.PY_YE_RPT_SS
  move &OPT_SS.REPORT_DEFN_ID    to $OPT_SS.REPORT_DEFN_ID
  move &OPT_SS.TMPLDEFN_ID       to $OPT_SS.TMPLDEFN_ID
!  move &OPT_SS.PY_RPT_BATCH_SIZE to #OPT_SS.PY_RPT_BATCH_SIZE

  exit-SELECT

FROM PS_PY_YE_OPT_RPT OPT_SS
WHERE OPT_SS.PY_TAX_YEAR     = &TX.BALANCE_YEAR
  AND OPT_SS.TAXFORM_ID      = 'W'
  AND OPT_SS.PY_W2_COPY_TYPE = $RC_US_YE.Py_W2_Copy_Type
  AND OPT_SS.PY_YE_RPT_SS    = 'Y'
end-SELECT

! fetch definitions for bulk report

  move ' '  to $OPT_BLK.REPORT_DEFN_ID
  move ' '  to $OPT_BLK.TMPLDEFN_ID
  move 0    to #OPT_BLK.PY_RPT_BATCH_SIZE

begin-SELECT
OPT_BLK.REPORT_DEFN_ID
OPT_BLK.TMPLDEFN_ID
OPT_BLK.PY_RPT_BATCH_SIZE

  move &OPT_BLK.REPORT_DEFN_ID    to $OPT_BLK.REPORT_DEFN_ID
  move &OPT_BLK.TMPLDEFN_ID       to $OPT_BLK.TMPLDEFN_ID
  move &OPT_BLK.PY_RPT_BATCH_SIZE to #OPT_BLK.PY_RPT_BATCH_SIZE

  exit-SELECT

FROM PS_PY_YE_OPT_RPT OPT_BLK
WHERE OPT_BLK.PY_TAX_YEAR     = &TX.BALANCE_YEAR
  AND OPT_BLK.TAXFORM_ID      = 'W'
  AND OPT_BLK.PY_W2_COPY_TYPE = $RC_US_YE.Py_W2_Copy_Type
  AND OPT_BLK.PY_YE_RPT_SS    <> 'Y'
end-SELECT

end-procedure

begin-procedure Check-Burst-Value
  let $Py_Ye_Rpt_Burst = 'N'
begin-SELECT
burst.BURST_FIELDNAME

  if rtrim(&burst.BURST_FIELDNAME, ' ') = ''
     let $Py_Ye_Rpt_Burst = 'N'
  else
     let $Py_Ye_Rpt_Burst = 'Y'
  end-if

  exit-SELECT

from PSXPRPTDEFN burst
WHERE burst.REPORT_DEFN_ID = $Report_Defn_ID
end-SELECT
end-procedure

begin-procedure Clear-Guide-Temp
  let $err-statement = 'Clear-Guide-Temp, DELETE PS_PY_SS_USA_TMP'
begin-SQL on-error=Sql-Statement-Error
DELETE FROM PS_PY_SS_USA_TMP
WHERE PY_YE_UPD_ACTION <> 'F'
AND TAXFORM_ID = 'W'
end-SQL
end-procedure

begin-procedure Insert-Guide-Data

  let $updateAction = 'I'
  let $NotifyFlag = 'N'
  do Get-Guide-Seqnum

  let $err-statement = 'Insert-Guide-Data, INSERT PS_PY_SS_USA_TMP'
begin-SQL on-error=Sql-Statement-Error
INSERT INTO PS_PY_SS_USA_TMP
(OPRID
,RUN_CNTL_ID
,PRCSINSTANCE
,PRCSNAME
,JOBINSTANCE
,EMPLID
,PY_TAX_YEAR
,W2_REPORTING_CO
,TAXFORM_ID
,SEQUENCE_NUMBER
,W2C_BATCH_NBR
,W2C_BATCH_YR
,PY_YE_FORM_SEQNUM
,PY_W2_PROCESS_TYPE
,YE_FORM_ISSUE_DT
,YE_FORM_VIEWING_DT
,ATTACHSYSFILENAME
,ATTACHUSERFILE
,PY_YE_FILEURLID
,PY_YE_REPORT_URL
,PY_YE_BURST_ID
,PROCESS_INSTANCE
,REPORT_DEFN_ID
,BURST_FIELDNAME
,PY_YE_NOTIFY_FLG
,PY_W2_FINAL_PRINT
,PY_YE_UPD_ACTION)
Values
($Prcs_OprID
,$Prcs_Run_Cntl_ID
,#prcs_process_instance
,'TAX960US'
,#prcs_job_instance
,$E.EMPLID
,&TX.Balance_Year
,&A.W2_Reporting_Co
,'W'      ! taxform id
,#E.SEQUENCE_NUMBER
,0                ! BATCH NBR
,&TX.Balance_Year ! BATCH YR
,#gde.PY_YE_FORM_SEQNUM
,$RC_US_YE.Py_W2_Process_Type
,$IssueDate
,$ViewingDate1                 ! viewing date
,$FName                        ! attachsysfilename
,$FName                        ! attachuserfile
,$OPT_XML.PY_YE_XMLURLID       ! xml data file urlid
,' '                           ! report url
,$BurstValue
,0
,$OPT_SS.REPORT_DEFN_ID
,'BURST_VALUE'
,$NotifyFlag
,$RC_US_YE.Py_W2_Final_Print
,$updateAction)
end-SQL

end-procedure

begin-procedure Insert-YE-Runcontrol
  let $err-statement = 'Insert-YE-Runcontrol, INSERT PS_PY_YE_FORM_RCTL'
begin-SQL on-error=Sql-Statement-Error
INSERT INTO PS_PY_YE_FORM_RCTL
(OPRID
,RUN_CNTL_ID
,PRCSINSTANCE
,PRCSNAME
,JOBINSTANCE
,REPORT_DEFN_ID
,TMPLDEFN_ID
,PY_YE_SOURCEFILE
,PY_YE_SOURCELOC
,PY_YE_SRC_FILENAME
,PY_YE_OSPLATFORM
,FORM_ID
,PY_W2_FINAL_PRINT
,PY_W2_COPY_TYPE
,PY_YE_RPT_BURST
,PY_YE_RPT_SS
,PY_RPT_DEFN_ID_SS
,PY_RPT_TMPL_ID_SS
,TAXFORM_ID
,PY_YE_SOURCEFILE2
,PY_YE_SRC_FILENAM2
,PY_YE_FILE_COUNT
,PY_YE_XMLURLID
,PY_TAX_YEAR
)
Values
($Prcs_OprID
,$Prcs_Run_Cntl_ID
,#prcs_process_instance
,'TAX960US'
,#prcs_job_instance
,$OPT_BLK.REPORT_DEFN_ID
,$OPT_BLK.TMPLDEFN_ID
,$sourceFile2
,$sourceLocation2
,$sourceFileName2
,$yeOS
,$Form_ID
,$RC_US_YE.Py_W2_Final_Print
,$RC_US_YE.Py_W2_Copy_Type
,$RC_US_YE.Py_Ye_Rpt_Burst
,$OPT_SS.PY_YE_RPT_SS
,$OPT_SS.REPORT_DEFN_ID
,$OPT_SS.TMPLDEFN_ID
,'W'
,$sourceFile2      ! $sourceFile2
,$sourceFileName2  ! $sourceFileName2
,0
,$OPT_XML.PY_YE_XMLURLID
,&TX.Balance_Year
)
end-SQL
end-procedure

begin-procedure Get-Setup-Viewing-Date
  let $yeopt.YE_FORM_VIEWING_DT = ''
  let $yeopt.PY_YE_SS_NOTE_DT   = ''

  let $Year4 = '1'
  do Format-DateTime('20491231', $ViewingDate, {DEFCMP},'','native')

begin-SELECT
yeopt.YE_FORM_VIEWING_DT
yeopt.PY_YE_SS_NOTE_DT

  let $yeopt.YE_FORM_VIEWING_DT = &yeopt.YE_FORM_VIEWING_DT
  let $yeopt.PY_YE_SS_NOTE_DT   = &yeopt.PY_YE_SS_NOTE_DT

  if $yeopt.YE_FORM_VIEWING_DT <> '' and
     $yeopt.YE_FORM_VIEWING_DT >= $IssueDate

     let $ViewingDate = $yeopt.YE_FORM_VIEWING_DT

  else
     if $yeopt.YE_FORM_VIEWING_DT <> '' and
        $yeopt.YE_FORM_VIEWING_DT < $IssueDate

        let $ViewingDate = $IssueDate

     end-if
  end-if

from PS_PY_YEOPT_TX_USA yeopt
WHERE yeopt.W2_REPORTING_CO = &A.W2_Reporting_Co
  AND yeopt.PY_TAX_YEAR = &TX.Balance_Year
  AND yeopt.TAXFORM_ID = 'W'
end-SELECT
end-procedure

begin-procedure Get-Guide-Seqnum
  let #gde.PY_YE_FORM_SEQNUM =  0
  let $ViewingDate1 = $ViewingDate

begin-SELECT
gde.PY_YE_FORM_SEQNUM
gde.YE_FORM_VIEWING_DT
gde.PY_YE_NOTIFY_FLG

  let #gde.PY_YE_FORM_SEQNUM = &gde.PY_YE_FORM_SEQNUM
  let $ViewingDate1 = &gde.YE_FORM_VIEWING_DT
  let $NotifyFlag = &gde.PY_YE_NOTIFY_FLG
  let $updateAction = 'C'

  exit-SELECT

from PS_PY_SS_USA_GDE gde
WHERE gde.EMPLID = $E.EMPLID
  AND gde.PY_TAX_YEAR = &TX.Balance_Year
  AND gde.W2_REPORTING_CO = &A.W2_Reporting_Co
  AND gde.TAXFORM_ID = 'W'
  AND gde.SEQUENCE_NUMBER = #E.SEQUENCE_NUMBER
  AND gde.W2C_BATCH_NBR   = 0
  AND gde.W2C_BATCH_YR    = &TX.Balance_Year
ORDER BY gde.PY_YE_FORM_SEQNUM DESC
end-SELECT

  if $updateAction <> 'C'
     let #gde.PY_YE_FORM_SEQNUM = #gde.PY_YE_FORM_SEQNUM + 1
  end-if

! It is possible that an Original is run more than once. Therefore,
! the forms must not be viewable until released.
  if $updateAction = 'C' and $NotifyFlag = 'N'

     let $ViewingDate1 = $ViewingDate
  end-if

end-procedure

begin-procedure Capture-OS
  let $yeOS = ' '

  #ifdef NT
     let $yeOS = 'NT'
  #end-if

  #ifdef MVS
     let $yeOS = 'MVS'
  #end-if

  #ifdef UNIX
     let $yeOS = 'UNIX'
  #end-if
end-procedure

begin-procedure Get-SS-Consent
  let $Consent = 'N'
begin-SELECT
CONS.YE_CONSENT_CURRENT

  move &CONS.YE_CONSENT_CURRENT to $Consent

FROM PS_PY_YE_CONS_USA CONS
WHERE CONS.EMPLID = $E.EmplID
  AND CONS.LASTUPDDTTM =
      (SELECT MAX(CONS1.LASTUPDDTTM)
       FROM PS_PY_YE_CONS_USA CONS1
       WHERE CONS1.EMPLID = CONS.EMPLID)
end-SELECT

  if $Consent = 'C' and $RC_US_YE.Py_W2_Copy_Type = '2'
     let $UserFlag = 'N'
  else
     let $UserFlag = 'Y'
  end-if
end-procedure

!----------------------------------
begin-procedure Sql-Statement-Error
!----------------------------------
  show $err-statement
  show ' Error : ' $sql-error
end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'w2sort.sqc'    !Routines to sorting W-2s
#Include 'txrnctl2.sqc'  !US Year End Process Scheduler Run Controls
#Include 'stdapi.sqc'    !Update Process API
#Include 'w2.sqc'        !Routine for W2 Year End Box variables
#Include 'w2box.sqc'     !Evaluate-Box
#Include 'w2prt.sqc'     !Evaluate-Print-Box
#Include 'pyxmlbld.sqc'  !Creates xml tags/elements
#Include 'readxlat.sqc'  !Reads from translate table
