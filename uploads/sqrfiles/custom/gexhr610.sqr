!***********************************************************************
! GEXHR610: Employee name errors update(rotate.sqr)                    *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! PeopleSoft, Inc.; it is not to be copied, reproduced, or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of PeopleSoft.                        *
!                                                                      *
! Copyright (c) 1988-2011 PeopleSoft, Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                      MODIFICATION HISTORY                            *
!***********************************************************************
!ID	Date	       Description                                     *
!***********************************************************************
!Vendkxy 03/29/2011   Initial creation as per ITG 95983		       *
!ISDVMZA 01/02/2012   GEXPY_848_141326  Remove hard-coded date	       *
!                     Add a code to report TM Names with invalid char  *
!                     Valid characters are A-Z, hyphen, comma, space,  *
!                     apostrophe only                                  *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'
#define  max_gsuffix_size 14

!*********************************************************************
begin-report
!*********************************************************************
   do GEXXX951-Select-Oracle-Instance
   let $instance = LOWER($GEXXX951_Oracle_Instance)
   show 'Oracle Instance ' $Instance
   do Init-DateTime
   do Init-Number
   do Init-Report

   if $prcs_process_instance = ''
       do Ask-As-Of-Date		!askaod.sqc
   else
       do Get-Run-Control	     !gexrnctl.sqc
       if Rtrim (&asofdate, ' ') = ''
          Let $AsOfDate = $AsOfToday
       else
    	  let $AsOfDate = &asofdate
       end-If
   end-if

   let $Start_Year = '01-JAN-' ||Substr($AsOfDate,8,4)	   !ISDVMZA  GEXPY_848_141326

   show '  AsOfDate: ' $AsOfDate
   show 'Start_Year: ' $Start_Year			   !ISDVMZA  GEXPY_848_141326

   let $ReportID      =   'GEXHR610'
   let $ReportTitle   =   'Employee name errors update'

   Show '$ReportID    = ' $ReportID
   Show '$ReportTitle = ' $ReportTitle

   do Process-Main
   do  Openfile
   do P100-Get-Invalid-Names                               !ISDVMZA -- GEXPY_848_141326
   do mail-gexhr610
   ! Vendkxy, comment this after testing
   !do Rollback-Transaction
   do EOJ
   do Stdapi-Term

end-report

!***********************************************************************
begin-procedure Init-Report
!***********************************************************************

  do Get-Current-DateTime
  do Stdapi-Init
  do Create-gSuffix-Array
  date-time () hh:mi:ss &TimeBegan
  date-time () MM/DD/YYYY  &DateBegan
  show 'Report Began at ' &TimeBegan ' on '  &DateBegan

end-procedure

!***********************************************************************
Begin-Procedure Openfile
!***********************************************************************

   encode '<012>' into $newline
   Let $fileout = Lower($ReportID) || '.xls'

   Open $fileout As 1 For-Writing Record=1000:Vary

   Write 1 from $ReportTitle
   WRITE 1 FROM $newline
   WRITE 1 FROM $newline

End-Procedure

!ISDVMZA -- GEXPY_848_141326  --  Begin
!  This procedure will report the TMs with invalid character on names
!*********************************************************************
begin-procedure P100-Get-Invalid-Names
!*********************************************************************

begin-SELECT On-Error=SQL-Error-E
N1.EMPLID
N1.NAME

   show 'Invalid name -- ' &N1.EMPLID ' -- ' &N1.NAME
   Write 1 from &N1.EMPLID:10
                ' -- ':5
                &N1.NAME:60

  FROM PS_NAMES  N1
 WHERE ((REGEXP_LIKE(N1.FIRST_NAME, '[^[:alpha:],.'' ]')
   AND N1.FIRST_NAME NOT LIKE '%-%')
    OR (REGEXP_LIKE(N1.LAST_NAME, '[^[:alpha:],.'' ]')
   AND N1.LAST_NAME NOT LIKE '%-%')
    OR (REGEXP_LIKE(N1.MIDDLE_NAME, '[^[:alpha:],.'' ]')
   AND N1.MIDDLE_NAME NOT LIKE '%-%'))
   AND N1.NAME_TYPE = 'PRI'
   AND N1.EFFDT =
        (SELECT MAX(EFFDT)
           FROM PS_NAMES
          WHERE N1.EMPLID    = EMPLID
            AND N1.NAME_TYPE = NAME_TYPE
            AND EFFDT <= $AsOfDate)

End-SELECT

End-Procedure P100-Get-Invalid-Names

!ISDVMZA -- GEXPY_848_141326  --  End


!*********************************************************************
begin-procedure Process-Main
!*********************************************************************
  let $sql-statement = 'Main'

begin-SELECT On-Error=SQL-Error-E
p.emplid
p.name

    let $name = &p.name
    let $pd_name = &p.name

    Do Rotate-Name

    #ifdef debugx
    show ' Details after rotation : emplid ' $emplid   noline
    show ' name ' $name noline
    show ' $FirstName ' $LastName noline
    show ' $Middle_Name ' $Middle_Name  noline
    show ' $LastName ' $LastName noline
    show ' $Suffix ' $Suffix
    #end-if

    let $middle_name2 = rtrim($middle_name,' ')

    if isblank($middle_name2) = 1
        let $middle_name2 = ' '
    end-if

    !show '"' &p.emplid '","' &p.name '","' $FirstName '","' $middle_name2 '","' $LastName '","' $suffix

    Do Find-Max-Names-Row

    if isblank(&n.name_suffix) = 1 and isblank($suffix) = 0
       let $update_suffix = 'Y'
    end-if

    if isblank(&n.middle_name) = 1 and isblank($middle_name2) = 0
       let $update_middle = 'Y'
    end-if

    !show 'Emplid : '&p.emplid ' name : ' &p.name ' update_middle :'  $update_middle ' update_suffix : '  $update_suffix

    if ($update_middle = 'Y' or $update_suffix = 'Y')

       if substr($suffix,1,2)  = 'Jr'
          let $suffix = 'JR'
       end-if

       if substr($suffix,1,2)  = 'jr'
          let $suffix = 'JR'
       end-if

       if substr($suffix,1,2)  = 'Sr'
          let $suffix = 'SR'
       end-if

       if substr($suffix,1,2)  = 'sr'
          let $suffix = 'SR'
       end-if
 !      Show 'Update Names for Emplid : '&P.emplid
       Do Redo-Name
       Do Update-Names
       Do Update-Names-PD
    end-if

    let $update_suffix = 'N'
    let $update_suffix = 'N'

FROM PS_personal_data p, ps_job j,
     PS_employment e
  where  p.EMPLID = j.EMPLID
     AND j.emplid = e.emplid
     AND j.empl_rcd = e.empl_rcd
     AND j.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB
        WHERE j.EMPLID = EMPLID
          AND j.EMPL_RCD = EMPL_RCD
          AND EFFDT <= $AsOfDate)
    AND j.EFFSEQ =
        (SELECT MAX(EFFSEQ) FROM PS_JOB
        WHERE j.EMPLID = EMPLID
          AND j.EMPL_RCD = EMPL_RCD
          AND j.EFFDT = EFFDT)
    and (j.empl_status in ('A','L','P','S') or
        (j.empl_status in ('T','R','D','Q','U') and e.termination_dt >= $Start_Year))    !* ISDVMZA
!        (j.empl_status in ('T','R') and e.termination_dt > '01-JAN-2003'))  !* ISDVMZA
order by p.name

End-Select
end-procedure

begin-procedure Rotate-Name

  let $FName        = ' '
  let $LName        = ' '

  let $LastName = ''
  let $FirstName = ''

  !find last name
  let $field = rtrim($Name,' ')
  find ',' in $Name  0 #locn
  extract $LastName from $Name 0 #locn


  !find first name
   add 2 to #locn
  let $FirstName = {ps-substr}($Name,#locn,51 - #locn)
  let #FNlen = length($FirstName)

  !find middle initial

  let $Middle_Name  = ' '

  find ' ' in $FirstName 0 #locn
  if #locn <> -1

    add 1 to #locn
    find ' ' in $FirstName #locn #locn1

    if #locn1 <> -1

       add 1 to #locn1

       find ' ' in $FirstName #locn1 #locn2

       if #locn2 <> #locn1

         extract $Middle_Name from $FirstName #locn1 #FNlen
         let $FirstName = substr($FirstName,1,#locn1 - 1)

       else
         extract $Middle_Name from $FirstName #locn #FNlen
         let $FirstName = substr($FirstName,1,#locn - 1)

      end-if

    else
       extract $Middle_Name from $FirstName #locn #FNlen
       let $FirstName = substr($FirstName,1,#locn - 1)
    end-if

  end-if

  let $FirstName      = translate($FirstName, '.', '')
  let $Middle_Name = translate($Middle_Name, '.', '')

  move $LastName      to $Name

  do Get-Suffix

  let $Suffix = substr($Suffix,1,5)
  move $Name       to $LastName

  let $FName = {ps-substr}($FirstName, 1, 30)

  let $LName = {ps-substr}($LastName, 1, 46)

  if RTRIM($Middle_Name, ' ') = ''
     let $Middle_Name  = ' '
  end-if

end-procedure

begin-procedure Get-Suffix

  #debugx show 'IN Get-Suffix'

  move ' ' to $Suffix

  let #instr_var  = instr($Name, ' ', 0)
  #debugx show '#instr_var ' #instr_var

  if instr($Name, ' ', 0) > 0

    move $Name to $sfxname
    #debugx show '$sfxname 1 ' $sfxname
    let #len = length($sfxname)

    #debugx show '#len ' #len

    move 0 to #sfxcount

    while #sfxcount < {max_gsuffix_size}
      get $sfxsuf from sfxarray(#sfxcount) suffix

      #debugx show '$sfxsuf ' $sfxsuf

      let #sfxlen = length($sfxsuf)

      #debugx show '#sfxlen ' #sfxlen

      let #sfxpoint = instr($sfxname,$sfxsuf,#len - #sfxlen + 1)

      #debugx show '#sfxpoint ' #sfxpoint

      if #sfxpoint > 1
        let $sfxnamex = substr($sfxname,1,#sfxpoint - 1)
        #debugx show '$sfxnamex ' $sfxnamex
        let $sfxname = $sfxnamex
        #debugx show '$sfxname ' $sfxname
        let #len = length($sfxname)
        let $Suffix = substr($sfxsuf,2,#sfxlen)
      end-if
      let #sfxcount = #sfxcount + 1
    end-while

    move $sfxname to $Name

  end-if

end-procedure

begin-procedure Create-gSuffix-Array

  create-array name=sfxarray size = {max_gsuffix_size}
    field=suffix:char=' '

  put ' JR'    into sfxarray(0) suffix
  put ' SR'    into sfxarray(1) suffix
  put ' III'   into sfxarray(2) suffix
  put ' II'    into sfxarray(3) suffix
  put ' IV'    into sfxarray(4) suffix
  put ' ESQ'   into sfxarray(5) suffix
  put ' MD'    into sfxarray(6) suffix
  put ' M.D.'  into sfxarray(7) suffix
  put ' PHD'   into sfxarray(8) suffix
  put ' PH.D.' into sfxarray(9) suffix
  put ' Jr'    into sfxarray(10) suffix
  put ' Jr.'   into sfxarray(11) suffix
  put ''       into sfxarray(12) suffix
  put ''       into sfxarray(13) suffix

end-procedure


!*********************************************************************
begin-procedure Find-Max-Names-Row
!*********************************************************************
  let $sql-statement = 'Find-Max-Names-Row'

begin-SELECT On-Error=SQL-Error-E
n.effdt
n.name_suffix
n.middle_name
n.last_name
n.first_name

FROM PS_NAMES N
 WHERE N.EMPLID = &P.EMPLID
   AND N.NAME_TYPE = 'PRI'
   AND N.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_NAMES
        WHERE N.EMPLID    = EMPLID
          AND N.NAME_TYPE = NAME_TYPE
          AND EFFDT <= $AsOfDate)

end-select
end-procedure

!********************************************************************
begin-procedure Redo-Name
!********************************************************************
  let $sql-statement = 'Redo-name'

  if isblank($suffix) = 0 	!not null
     let $name_last  = $LastName  || ' ' || $suffix
  else
     let $name_last  = $LastName
  end-if

  if isblank($middle_name2) = 0 	!not null
     let $name_first = $FirstName || ' ' || $middle_name2
  else
     let $name_first = $FirstName
  end-if

  let $name_final = $name_last || ',' || $name_first

!  show 'name Fial :'$name_final

  do Update-Name-Field

end-procedure

!********************************************************************
begin-procedure Update-Names
!********************************************************************
  let $sql-statement = 'Update-names'
!Show 'Update Names for Emplid : '&P.emplid
begin-sql On-Error=SQL-Error-E
Update PS_NAMES
    SET name_suffix	= upper($suffix),
	middle_name 	= $middle_name2,
        last_name       = $LastName,
        first_name      = $FirstName,
        last_name_srch  = upper($LastName),
        first_name_srch = upper($FirstName)

Where  emplid = &P.emplid and
       effdt  = &n.effdt

End-SQL
         If #sql-status = 0
            Let #update_count = #update_count + #sql-count
         else
             Show 'PS_NAMES did not update - ' $EMPLID
             write 1 from 'PS_NAMES did not update - '
             write 1 from  $EMPLID
         End-if

end-procedure

!********************************************************************
begin-procedure Update-Names-PD
!********************************************************************
  let $sql-statement = 'Update-names-PD'
!Show 'Update Names on Personal Data : '&P.emplid
begin-sql On-Error=SQL-Error-E
Update PS_PERSONAL_DATA
    SET name_suffix	= upper($suffix),
	middle_name 	= $middle_name2,
        last_name       = $LastName,
        first_name      = $FirstName,
        last_name_srch  = upper($LastName),
        first_name_srch = upper($FirstName)

Where  emplid = &P.emplid

End-SQL
         If #sql-status = 0
            Let #update_count = #update_count + #sql-count
         else
             Show 'PS_PERSONAL_DATA did not update - ' $EMPLID
             write 1 from 'PS_PERSONAL_DATA did not update - '
             write 1 from $EMPLID
         End-if

end-procedure

!********************************************************************
begin-procedure Update-Name-Field
!********************************************************************
  let $sql-statement = 'Update-Name-Field'

!Show 'Update Names : '&P.emplid

begin-sql On-Error=SQL-Error-E
Update PS_NAMES
    SET name = $name_final

Where  emplid = &P.emplid and
       effdt  = &n.effdt

End-SQL

begin-sql On-Error=SQL-Error-E
Update PS_PERSONAL_DATA
    SET name = $name_final

Where  emplid = &P.emplid

End-SQL

end-procedure

!************************************************************************
begin-procedure SQL-Error-E
!************************************************************************
Let $Error_message= $sql-statement || ', EMPLOYEE=' || $EMPLID || ' Did not update.'
Let $SQL_Error_Msg1 = 'SQL Status: ' || to_char(#sql-status)
Let $SQL_Error_Msg2 = 'SQL Error: ' || $sql-error
Let $Reason = $sql-error

show $Error_message
show $SQL_Error_Msg1
show $SQL_Error_Msg2

write 1 from $Error_message

do Print-error('Sql Error',$Reason)

end-procedure


!***********************************************************************
!***********************************************************************
begin-procedure  mail-gexhr610
close 1
let $to_list = ' '

Begin-Select

GEX_EMAIL_ADDR1.EMAILID


   do create-to-list

From  SYSADM.PS_GEX_EMAIL_ADDR GEX_EMAIL_ADDR1
WHERE RTRIM(GEX_EMAIL_ADDR1.GEX_EMAILTYPE, ' ') = 'HR10'

End-Select

do send-it

end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure  create-to-list
#debug9 display 'create-to-list'

   let $to_list = $to_list || &GEX_EMAIL_ADDR1.EMAILID || ';'

end-procedure
!***********************************************************************
!***********************************************************************
begin-procedure  send-it
#debug9 display 'send-it'

let $TEXT_ID = $ReportID || '_SUBJ'
do gexhr610-verbiage
let $subject = &A.HR_SSTEXT_TEXT

let $enter = chr(10)

let $TEXT_ID = $ReportID || '_BODY'
do gexhr610-verbiage

let $body_txt = &A.HR_SSTEXT_TEXT

let $mail-cmd = 'psmail -TO"'||$to_list||'" -SUBJECT"'||$subject||'" -BODY"'||$body_txt||'" -FILE"'||$fileout

if $to_list <> ' '

CALL SYSTEM USING $mail-cmd #Status

end-if

end-procedure
!***********************************************************************
!***********************************************************************
begin-procedure  gexhr610-verbiage

Begin-Select
A.HR_SSTEXT_TEXT

 from ps_HR_SSTEXT_TEXT A
 WHERE A.OBJECTOWNERID = 'HHR'
 AND A.HR_SSTEXT_SUB_ID = 'GEX'
 AND A.TEXT_ID = $TEXT_ID
 AND A.EFFDT = (SELECT MAX(B.EFFDT) FROM PS_HR_SSTEXT_EFFDT B
 WHERE B.OBJECTOWNERID = A.OBJECTOWNERID
 AND B.HR_SSTEXT_SUB_ID = A.HR_SSTEXT_SUB_ID
 AND B.TEXT_ID = A.TEXT_ID AND B.EFFDT <= $AsOfDate)

End-Select

end-procedure



!********************************************************************
begin-procedure Print-error($Err_Field, $Err_Value)
!********************************************************************

 write 10 from $Err_Field:30 $Err_Value:15 $_emplid

end-procedure

!***********************************************************************
Begin-Procedure EOJ
!***********************************************************************

  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded

  Show 'Successful end of report'

End-Procedure

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#include 'useprntr.sqc'
#include 'gexrnctl.sqc'  !for Run-Cntrl-Parameters
#include 'askaod.sqc'
#Include 'tranctrl.sqc'  !Commit/Rollback Procedures
#include 'gexxx951.sqc'  !Routine to select Oracle Instance



