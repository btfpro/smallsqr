!************************************************************************
! GEXBNFIN:  This program process Ben Admin events that are determined  *
!            to be eligible for the finalze process.  Finalizing Prepared
!            events will move the event to an enrolled status in ben    * 
!            admin.  Prepared events that are eligible to be finalized  *
!            are those that contain plans with no elections allowed or  *
!            with a single option.  The finalize process occurs for the *
!            event as a whol, therefore, any plans within the event that*
!            have multiplle options will cause the entire event to be   *
!            ineligible for the finalize process.  This program will run*
!            following each execution of the standard ben admin COBOL   *
!            process.                                                   *
!************************************************************************
!                                                                       *
!               Confidentiality Information:                            *
!                                                                       *
! This module is the confidential and proprietary information of        *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used  *
! for any purpose other than that for which it is expressly provided    *
! without the written permission of Giant Eagle.                        *
!                                                                       *
!                                                                       *
!********************************************************************** *
!                                                                       *
!  $Date:: 01/27/98 09:00A      $                                       *
!  $Revision:: 01               $                                       *
!  $Workfile:: GEXBNFIN.SQR     $                                       *
!                                                                       *
!********************************************************************** *
!                         MODIFICATION HISTORY                          *
!********************************************************************** *
!  ID#     INITIALS    DATE       DESCRIPTION OF THE CHANGE             *        
!  GBNC017    SXK      01/27/1998 INITIAL CREATION                      *
!  GBNC017    CJH      01/28/1998 modifications due to testing          *
!                                 see date stamp in code                *
!                                                                       * 
!  ISDVSRC    SRC      01/13/2005 Modified the SQL in the main process  *
!				  (process-events)to process or finalize*
!				  or finalize events in the 'EM'        *
!				  schedule only                         *
!  GEX-MXT    MXT      11/28/2007 Changes after new indicator added in  *
!                                 BAS_PARTIC table                      *
!  GEX-AXG   AXG      01/30/2008  Changed the SQL to pick GEX_EBEN_IND  *
! 																as null or not equal to Y							*
! GEX_SEC_REENG 2015-07-19 Vahini Katta                                 *
! Changes related to gex_emplid_mapp/7 digit emplid                     *
!************************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup02.sqc'
!*********************************************************************
!Initial processing, retrieving current dates and calls the main 
!procedure to do the processing.                                     
!*********************************************************************
begin-report

  do Init-DateTime
  do Init-Number
  do stdapi-init
  
  move 'GEXBNFIN' to $ReportID
  move 'Ben Admin Finalize Process' to $ReportTitle
  display $ReportTitle

  do Get-Current-DateTime

  do Report
  do Commit-Transaction
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term
  !*do Reset
end-report

!*********************************************************************
!If this Program is being executed through process scheduler, 
!the run control parameters and calls the main processing procedure.
!Otherwise, interrogates the user for the run control parameters and 
!validates them. If the run control parameters are invalid, stops the
!execution.
!*********************************************************************
begin-procedure Report

date-time () hh:mi:ss &timeBegan
display 'Report Began: ' noline
display &timeBegan

 move 'N' to $Errorfound


 do process-events

  
Report-Exit:


  print 'Events Processed: ' (+2,1)
  print #inputtran () edit 999999
  print 'Events Finalized: ' (+2,1)
  print #Final_counter () edit 999999

  date-time () hh:mi:ss &timeProcess
  display #InputTran 99999 noline
  display ' Events Processed: ' noline
  display &timeProcess
  display #Final_counter 99999 noline
  display ' Events Finalized: ' noline
  display &timeProcess
end-procedure

!*********************************************************************
!Prints the header information in the error report.
!*********************************************************************

begin-heading 6


#include 'stdhdg01.sqc'

  print 'Tran #' (+1,1) bold
  print 'Message' (,21) BOLD

  print '-' (+1,1,176) fill

end-heading

!*********************************************************************
!Prints the footer in the report
!*********************************************************************

begin-footing 2 
page-number (1,160) 'Page '  
last-page () ' of ' '.'

end-footing

!*********************************************************************
!This is the logic to process events that are to be finalized. For 
!every event finds if any plan has multiple options. If it is so, does
!not update the final enroll flag in ps_bas_partic table. Otherwise, 
!updates the flag to 'Y'. 
!*********************************************************************

begin-procedure process-events
Show 'Entering procedure process-events'

date-time () MM/DD/YYYY &curr_date

move &curr_date to $curr_date

do format-datetime($curr_date,$curr_Date_dbf_1,{DEFMDY},'','native')

move 'N' to $event_found

let #inputtran = 0
let #final_count = 0

begin-select ON-ERROR=SQL-Error-Found('Process-events')
A.SCHED_ID
A.EMPLID
A.BENEFIT_RCD_NBR
A.EVENT_ID
A.EMPL_RCD
A.BENEFIT_PROGRAM
A.EVENT_DT
A.BAS_PROCESS_STATUS
A.GEX_PROCESS_IND
A.FINALIZE_ENROLL

  move 'Y' to $Event_Found
  display &A.emplid
  add 1 to #inputtran

  do process-plans
  !if $multiple_options = 'N' and $plan_found = 'Y'	!GEX-MXT commented on 11/28/2007	
  if $plan_found = 'Y'					!GEX-MXT added on 11/28/2007
     do finalize-enroll
  end-if
 
FROM PS_BAS_PARTIC A
WHERE A.BAS_PROCESS_STATUS in ('PR','NT')     !Prepared or Notified Status
  AND A.EVENT_STATUS = 'O'            !Open Event
  AND A.PROCESS_IND = 'N'             !Normal         
  AND A.FINALIZE_ENROLL = 'N'         !not Finalized 
  AND A.SCHED_ID ='EM'                !ISDVSRC 01/13/05 - Only want to process events that have a sched_id = 'EM'.  
  !GEX-AXG Modified for upgrade 9.0 - Begin
  !as the GEX_EBEN_IND field is Blank not 'N' 
  !AND A.GEX_EBEN_IND = 'N'	      !GEX-MXT ADDED ON 11/28/2007
  AND (A.GEX_EBEN_IND is null or A.GEX_EBEN_IND <> 'Y')
  !GEX-AXG Modified for upgrade 9.0 - End
ORDER BY A.SCHED_ID,A.EMPLID,A.BENEFIT_RCD_NBR,A.EVENT_ID
end-select

if $Event_found = 'N'
   do error-found
   print 'No Events found to finalize '(,34)
end-if

end-procedure

!*********************************************************************
!This is the logic to find any plans with elect_allowed. If any rows 
!found, tries to see if any one of the plans for the event that is 
!currently in process has multiple options. If there are multiple options
!exist for any plan in this event, does not update the final_enroll flag
!otherwise, updates the flag.  If there are no plans with elect_allowed
!to true for this event, updates the flag in ps_bas_partic table
!*********************************************************************

begin-procedure process-Plans

move 'N' to $Plan_found
let #option_max_counter = 0

begin-select ON-ERROR=SQL-Error-Found('Process-Plans')
B.PLAN_TYPE

  move 'Y' to $Plan_Found
  display 'elections for plan'
  !GEX-MXT commented on 11/28/2007-Begin
  !do process-options	

  !if $multiple_options = 'Y'
  !   exit-select
  !end-if
  !GEX-MXT commented on 11/28/2007-End
 
FROM PS_BAS_PARTIC_PLAN B
WHERE B.SCHED_ID = &A.SCHED_ID
  AND B.EMPLID = &A.EMPLID
  AND B.BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
  AND B.EVENT_ID = &A.EVENT_ID
  AND B.BENEFIT_PROGRAM = &A.BENEFIT_PROGRAM
  AND B.EVENT_DT = &A.EVENT_DT
  AND B.ELECT_ALLOWED = 'Y'

ORDER BY B.SCHED_ID,B.EMPLID,B.BENEFIT_RCD_NBR,B.EVENT_ID,B.PLAN_TYPE
end-select

if $plan_found = 'N'
   do finalize-enroll
end-if

end-procedure

!*********************************************************************
!This paragrph finds out if there are any plan types that have multiple
!options and sets the multiple_options flag appropriately
!*********************************************************************

begin-procedure process-Options

move 'N' to $multiple_options

begin-select ON-ERROR=SQL-Error-Found('Process-Options')
count(D.PLAN_TYPE) &option_counter

  move &option_counter to  #Option_max_counter
  if #option_max_counter > 1
     display 'multiple options for plan'
     move 'Y' to $multiple_options
  end-if

FROM PS_BAS_PARTIC_OPTN D
WHERE D.SCHED_ID = &A.SCHED_ID
  AND D.EMPLID = &A.EMPLID
  AND D.BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
  AND D.EVENT_ID = &A.EVENT_ID
  AND D.PLAN_TYPE = &B.PLAN_TYPE
  AND D.BENEFIT_PROGRAM = &A.BENEFIT_PROGRAM
  AND D.EVENT_DT = &A.EVENT_DT
end-select

end-procedure

!*********************************************************************
!Updates the ps_bas_partic by setting final_enroll flag to 'Y'
!*********************************************************************

begin-procedure finalize-enroll

move 'N' to $found
move 'N' to $errorfound

begin-sql on-error=sql-error-found('Finalize-Enroll')
UPDATE PS_BAS_PARTIC C
   SET C.FINALIZE_ENROLL = 'Y'
WHERE C.SCHED_ID = &A.SCHED_ID
  AND C.EMPLID = &A.EMPLID
  AND C.BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
  AND C.EVENT_ID = &A.EVENT_ID
end-sql

add 1 to #final_counter

end-procedure

!*********************************************************************
!Displays the error messages and stops execution
!*********************************************************************
 
begin-procedure SQL-Error-Found($Proc_Name) 
  do error-found
  display 'SQL Error in ' 
  display $Proc_Name 
  display $_sql-error
  display 'sql-status:' 
  display #_sql-status 

  STOP

end-procedure

!*********************************************************************
!Displays the employee id that failed 
!*********************************************************************

begin-procedure Error-Found
  move 'Y' to $ErrorFound
  do Format-Number(#InputTran, $out, '99999')
  print $out (+1,1)
  !GEX_SEC_REENG 2015-07-19 Vahini Katta Begins
  !let $EmplId_1st3 = substr($EmplId,1,3)
  !let $EmplId_mid2 = substr($EmplId,4,2)
  !let $EmplId_last4 = substr($EmplId,6,4)
 
  !String $EmplId_1st3 $EmplID_mid2 $EmplId_last4 by '-' into $EmplId11

  !print $EmplID11 (,8)
  print $EmplID (,8)
  !GEX_SEC_REENG 2015-07-19 Vahini Katta Ends
end-procedure

#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
!*#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
