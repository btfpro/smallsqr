!***********************************************************************
! This SQR reads a file in, insert row into PAY_ONE_TIME.
!***********************************************************************

#include 'setenv.sqc' !Set environment

!***********************************************************************
!***********************************************************************
begin-report
  do Init-Report
  date-time () hh:mi:ss &timeBegan
  display ' Processing Began: ' noline
  display &timeBegan
  do read-input-file             !Reads input file 
  date-time () hh:mi:ss &timeEnd
  display 'Processing Ended: ' noline
  display &timeEnd
! for testing only
! ROLLBACK
 
  do stdapi-term
  
end-report
!***********************************************************************
!***********************************************************************
begin-procedure Init-Report
!***********************************************************************
!***********************************************************************
#debug show 'init-report'

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime  
  do Stdapi-Init     
  
end-procedure
!***********************************************************************
!***********************************************************************
begin-procedure read-input-file 
#debug show 'read-input-file'

  Let $FileName = '{OUTFILE}'

open $FileName as 1 for-reading record=80
STATUS=#Open1stat
if #Open1stat = -1
  display 'Please verify the the file path and file name was entered correctly'
  STOP
end-if
let #InputTran = 1

while 1 = 1
    read 1 into $input:80
      if #end-file = 1       
	      break
      end-if
#debug show 'in while'
    unstring $input by ',' into 
    $EARNS_END_DT
    $COMPANY
    $DEPTID
    $EMPLID
    $STATE
    $TYPE
    $LOCALITY
    $LOCAL_NAME
    $ACTION
    $REG_EARNS
    
#debug show '$EARNS_END_DT: '$EARNS_END_DT
#debug show '$COMPANY: '$COMPANY
#debug show '$DEPTID: '$DEPTID
#debug show '$EMPLID: '$EMPLID
#debug show '$STATE: '$STATE
#debug show '$TYPE: '$TYPE
#debug show '$LOCALITY: '$LOCALITY
#debug show '$LOCAL_NAME: '$LOCAL_NAME
#debug show '$ACTION: '$ACTION
#debug show '$REG_EARNS: '$REG_EARNS

    if #InputTran > 0
      If $EMPLID <> ''
        do select-info
      else
        break
      end-if
    else
      If $EMPLID = ''
      break
      end-if
    end-if
    
    add 1 to #InputTran
	       
end-while

close 1

end-procedure
!***********************************************************************
begin-procedure select-info
!***********************************************************************
#debug Show 'select-info'
#debug Show 'select-info: '$EMPLID

let $Found = 'N'


begin-select DISTINCT
COMPANY
PAYGROUP
PAY_END_DT
OFF_CYCLE
PAGE_NUM
LINE_NUM

   let $Found = 'Y'
   let $company = &company
   let $Paygroup = &paygroup
   let $offcycle = &off_cycle
   let $page_num = &page_num
   let $line_num = &line_num
   let $pay_end_dt = &pay_end_dt
   do select-one-time
   if $found-one-time = 'N'
!    let $ADDL_NBR = 0
!    let $SEPCHK = 0
    do select-addl-nbr
   end-if
   do Insert-pay-tax-ovrd
   do update-pay-earning

FROM PS_PAY_LINE_WORK 
WHERE EMPLID = $EMPLID
AND PAY_END_DT = '06-Feb-2010'

end-select

if $Found = 'N'
#debug Show 'select-info not loaded: '$EMPLID
end-if

end-procedure
!***********************************************************************
begin-procedure select-one-time
!***********************************************************************
#debug Show 'select-one-time'

let $found-one-time = 'N'

begin-select 
min(pot.ADDL_NBR)  &pot.ADDL_NBR
pot.SEPCHK

   let $found-one-time = 'Y'
   let $ADDL_NBR = &pot.ADDL_NBR + 1
   let $SEPCHK = &pot.SEPCHK

FROM PS_PAY_TAX_OVRD POT
WHERE pot.COMPANY=$company 
AND pot.PAYGROUP=$paygroup 
AND pot.PAY_END_DT=$pay_end_dt
AND pot.OFF_CYCLE=$offcycle 
AND pot.PAGE_NUM=$page_num 
AND pot.LINE_NUM=$line_num 
group by pot.sepchk

end-select

end-procedure
!***********************************************************************
begin-procedure select-addl-nbr
!***********************************************************************
#debug Show 'select-addl-nbr'

begin-select 
ADDL_NBR
SEPCHK

   let $ADDL_NBR = &ADDL_NBR
   let $SEPCHK = &SEPCHK
   #debug Show 'select-addl-nbr: '$ADDL_NBR
   #debug Show 'select-addl-nbr: '$SEPCHK

FROM PS_PAY_EARNINGS 
WHERE COMPANY=$company 
AND PAYGROUP=$paygroup 
AND PAY_END_DT=$pay_end_dt 
AND OFF_CYCLE=$offcycle 
AND PAGE_NUM=$page_num 
AND LINE_NUM=$line_num

end-select

end-procedure
!***********************************************************************
!***********************************************************************
begin-procedure Insert-pay-tax-ovrd
#debug show 'Insert-pay-tax-ovrd'

#debug show $COMPANY
#debug show $PAYGROUP
#debug show $OFFCYCLE
#debug show $PAGE_NUM
#debug show $LINE_NUM
#debug show $ADDL_NBR
#debug show $SEPCHK
#debug show $STATE
#debug show $LOCALITY
#debug show $REG_EARNS              !$DED_ADDL_AMT

!let $EARNS_END_DT = datetostr(strtodate($EARNS_END_DT,'MM/DD/YYYY'),'DD-MON-YYYY')
 
begin-sql

INSERT INTO PS_PAY_TAX_OVRD
(COMPANY
,PAYGROUP
,PAY_END_DT
,OFF_CYCLE
,PAGE_NUM
,LINE_NUM
,ADDL_NBR
,SEPCHK
,STATE
,LOCALITY
,TAX_CLASS
,ONE_TIME_CD
,TAX_AMT)
VALUES($COMPANY
,$PAYGROUP
,'06-Feb-2010'  !$EARNS_END_DT
,$OFFCYCLE
,$PAGE_NUM
,$LINE_NUM
,$ADDL_NBR
,$SEPCHK
,$STATE
,$LOCALITY
,'P'                     !Tax Class
,'R'
,$REG_EARNS);
                    
end-sql
 
end-procedure
!***********************************************************************
begin-procedure update-pay-earning
!***********************************************************************
#debug Show 'update-pay-earning'


Begin-SQL 
     Update PS_PAY_EARNINGS pe
        Set pe.pay_line_status = 'U'
            Where pe.company = $COMPANY
              and pe.paygroup = $PAYGROUP
             and pe.pay_end_dt = $PAY_END_DT
              and pe.off_cycle = $OFFCYCLE
             and pe.page_num = $PAGE_NUM
             and pe.line_num = $LINE_NUM
             and pe.addl_nbr = $ADDL_NBR
             and pe.off_cycle = 'N'
             and pe.sepchk = 0
 End-SQL

end-procedure

!***********************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !update process API
