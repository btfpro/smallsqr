!****************************************
!  GEXHR036:  GetGo Turnover Analysis  *
!****************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *        
! GEXHR036 :            GetGo Turnover Analysis                        *
!                                                                      *        
! Narrative:            This program creates a monthly employee        *
!                       GetGo Turnover Analysis Report                 *  
!                                                                      *
! #Debugx Used:         #debug9 paragraph trace                        *
!                       #debug8 key variable values                    *
!                       #debug7 data returned from sql calls           * 
!                                                                      *  
! SQL Tables:           PS_JOB                                         *
!                       PS_PERSON                                      *
!                       PS_R_ACTION_COUNTS                             *
! Written by:           Namit Rawat                                    *       
!                                                                      *
! Normally Run:         Monthly                                        *
!                                                                      *                            
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  INITIALS    DATE           DESCRIPTION OF THE CHANGE                *
!***********************************************************************
!  GEX-TLL     04/16/2008     HCM 9.0 Upgrade                          *
!  VENDKXY     09/08/2008    Changed the schedule from monthly to dialy*
!***********************************************************************

#include 'setenv.sqc'    !Set environment

#define #column1    01
#define #column2    13
#define #column3    43
#define #column4    51
#define #column5    61
#define #column6    72
#define #column7    84
#define #column8    94
#define #column9   105
#define #column10  111

!-----------------------------------------------------------------------
begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
end-setup
!-----------------------------------------------------------------------

!-----------------------------------------------------------------------
begin-report
!----------------------------------------------------------------------- 
  do Init-DateTime  
  do Init-Number
  do Get-Current-DateTime
  do Init-Report 
  if $prcs_oprid=''
  goto last2
 end-if
  
  
  do Process-Main  
  do Reset  
  do Stdapi-Term
  
  
last2:
end-report
!-----------------------------------------------------------------------

!-----------------------------------------------------------------------
begin-heading 7
!-----------------------------------------------------------------------
  #Include 'stdhtr08.sqc'
 
  print 'Begin'                   (+2,{#column3})
  print 'Hires/'                    (,{#column4})
  print 'Termin-'                   (,{#column5})
  print 'Retire-'                   (,{#column6})
  print 'Transfers'                 (,{#column7})
  print 'Transfers'                 (,{#column8})
  print 'End'                       (,{#column9})
  print 'Turnover'                 (,{#column10})
  
    
  print 'DeptId'                  (+1,{#column1})
  print 'Department'                (,{#column2})
  print 'Count +'                   (,{#column3})
  print 'Rehires -'                 (,{#column4})
  print 'ations -'                  (,{#column5})
  print 'ments +'                   (,{#column6})
  print '     In +'                 (,{#column7})
  print '    Out ='                 (,{#column8})
  print 'Count'                     (,{#column9})
  print '    Rate'                 (,{#column10})

end-heading

begin-procedure Init-Report

  !move 'GEXHR036' to $ReportID        vendtkk 
 ! Let $ReportTitle   = 'GetGo Turnover Analysis'
   Let $ReportTitle   = 'Giant Eagle Turnover Analysis '   !vendtkk
  do Delete-Worktable

  do Stdapi-Init

  if $prcs_oprid=''
     display ''
     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
     display ''
    goto last1
  end-if

  if $prcs_process_instance = ''  
    do Ask-From-Thru-Date       
    do GEXXX950-Input-Parameters      
    
  else
    do Select-Parameters

    Let $FromDate=&RUN_CNTL_HR.FROMDATE 
    Let $ThruDate=&RUN_CNTL_HR.THRUDATE 

    
  end-if
  
  move $Prcs_Run_Cntl_ID to $ReportID   !vendtkk
  uppercase $ReportID 
  
  show 'Before Calling Procedure'
  show '$FromDate:  ' $FromDate
  show '$ThruDate:  ' $ThruDate  
  
  show '  $AsOfToday:' $AsOfToday
  if $FromDate='' and $ThruDate=''
  show 'Before SetDefault-Begin-End-Date' 
  !do P140-Get-Last-Confirmed-Pay   !GEX-TLL 04/16/2008 Commented
  do Process-Scheduler-Run-Controls !GEX-TLL 04/16/2008 Added
   
  end-if 
  
  show 'After Calling Procedure'
  show '$FromDate:  ' $FromDate
  show '$ThruDate:  ' $ThruDate   
  
  do Init_Printer
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('HR')
  
  
last1:
end-procedure

begin-procedure Get-Values

   let $language_cd = $PRCS_LANGUAGE_CD
   do Get-From-Thru-Date
   
end-procedure

!*************************************************
Begin-Procedure P140-Get-Last-Confirmed-Pay
!*************************************************
#debug9 Show 'P140-Get-Last-Confirmed-Pay'

   Show '** Using this date for selecting last confirmed pay: ' $AsOfToday

Begin-Select Loops=1
pay_end_dt
To_Number(To_Char(pay_end_dt,'MM'))          &balance_period
To_Number(To_Char(pay_end_dt,'YYYY'))        &balance_year
To_Char(pay_end_dt,'fmMonth YYYY')           &period
Last_Day(pay_end_dt)                         &current_month_end
Last_Day(Add_Months(pay_end_dt,-1))          &prev_month_end
Last_Day(Add_Months(pay_end_dt,1))           &next_month_end

  Let $AsOfDate         = &pay_end_dt
  Let $pay_end_dt       = &pay_end_dt
  Let #balance_year     = &balance_year
  Let #balance_period   = &balance_period
  Let $Reporting_Period = &period

  Let $current_month_begin = '01-'||Substr($pay_end_dt,4,8)
  Let $current_month_end   = &current_month_end
  Let $next_month_end      = &next_month_end   
  
  Let $FromDate = '01-'||Substr(&prev_month_end,4,8)             
  Let $ThruDate = &prev_month_end                                
  
  show '$FromDate:  ' $FromDate
  show '$ThruDate:  ' $ThruDate 

  Let $current_year_begin = '01-JAN-'||Substr($pay_end_dt,8,4)
  Let $current_year_end   = '31-DEC-'||Substr($pay_end_dt,8,4)

  let #balance_qtr = #balance_period
  let #balance_qtr = ((#balance_qtr - 1)/ 3) + 1
  do Format-Number(#balance_qtr, $balance_qtr, '9.99') 
  move $balance_qtr to $balance_qtr x    
  let #balance_qtr = $balance_qtr

  show 'Balance period = ' #balance_period
  Show 'Report will contain balances for the month of ' $Reporting_Period
  Show 'Last confirmed pay end date:  ' $pay_end_dt

  If Rtrim($pay_end_dt,' ') = ''
    Show 'No confirmed pay period found in calendar'
    Stop
  End-If

From   ps_pay_calendar

Where  pay_end_dt         =
      (Select Max(pay_end_dt)
       From   ps_pay_calendar
       Where  pay_end_dt <= $AsOfToday
       And    pay_confirm_run = 'Y')

And    pay_confirm_run = 'Y'
End-Select
End-Procedure
!VENDKXY done the changes to the sqr to run Weekly --Begin
!GEX-TLL 04/16/2008 HCM 9.0 Upgrade - Begin
!************************************************************************
Begin-Procedure Process-Scheduler-Run-Controls
!************************************************************************
#debug9 Show 'Process-Scheduler-Run-Controls'
  Show 'Process-Scheduler-Run-Controls'
Begin-Select DISTINCT
!add_months(add_months(last_Day(sysdate),-1),-1)+1 &From_Dt
!From PS_EMPLOYMENT
sysdate-8 &From_Dt
from dual
End-Select

Begin-Select DISTINCT
!add_months(last_DaY(sysdate) , -1) &Thru_Dt
!From PS_EMPLOYMENT
sysdate-2 &Thru_Dt
from dual
End-Select	   

  Let $FromDate = &From_Dt            
  Let $ThruDate = &Thru_Dt                              

  !show '$FromDate:  ' $FromDate
  !show '$ThruDate:  ' $ThruDate 

End-Procedure Process-Scheduler-Run-Controls
!************************************************************************
!GEX-TLL 04/16/2008 HCM 9.0 Upgrade - End
!VENDKXY done the changes to the sqr to run Weekly-- End
!-----------------------------------------------------------------------
begin-procedure Process-Main

  !*** HP092200 Education and Government                        PUBSEC
  do Get-EandG                                                  !PUBSEC
                                                                !PUBSEC
  if $PublicSector = 'N'                                        !PUBSEC
     Let $StatusClause = '(''A'', ''L'', ''S'', ''P'')'         !PUBSEC
  else                                                          !PUBSEC
     Let $StatusClause = '(''A'', ''L'', ''S'', ''P'', ''W'')'  !PUBSEC
  end-if                                                        !PUBSEC
  !*** End HP092200                                             !PUBSEC

  
  do Get-Begin-and-End-Counts
  do Read-Job-Records
  do Create-Report
  do Delete-Worktable
   
  
end-procedure Process-Main

!-----------------------------------------------------------------------
begin-procedure Get-Begin-and-End-Counts

  move 'Y' to $EndCounts
  move $ThruDate to $CountDate
  
  !Girraj
    show 'Count Date:  '  $CountDate
  !Girraj  
  
  do Get-Count

  move 'N' to $EndCounts
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($FromDate, $From_YMD, {DEFYMD}, '', '')
  do dtu-subtract-days($From_YMD,1,$Count_YMD)

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($Count_YMD,$CountDate,{DEFYMD},'','native')
  
  !Girraj
  show 'Count Date:  '  $CountDate
  !Girraj 
  do Get-Count

end-procedure Get-Begin-and-End-Counts

begin-procedure Delete-Worktable

let $sql-statement = 'PER010.SQR,Delete-Worktable,Delete,PS_R_Action_Counts'
begin-SQL On-Error=SQL-Error
DELETE FROM PS_R_ACTION_COUNTS;
end-SQL

end-procedure Delete-Worktable

!-----------------------------------------------------------------------
begin-procedure Get-Count    

Let $GEXXX902_Deptid_Alias   = 'A.DEPTID'  
do Select-Deptid-Parameters
show ' $GEXXX902_INCLUDE_DEPTID_CRITERIA: A is here' $GEXXX902_INCLUDE_DEPTID_CRITERIA

begin-SELECT
A.BUSINESS_UNIT,A.DEPTID,COUNT(*) &Count

  if $EndCounts = 'Y'
    move &Count to #Ends
  else
    move &Count to #Begins
  end-if
  LET $BU = RTRIM(&A.BUSINESS_UNIT,' ')
  move &A.DeptID to $DeptID
  
  
  do Department-Change

FROM  PS_JOB A,
      PS_PERSON PP,
!GEX-TLL 03/24/2008 HCM 9.0 Upgrade Begin      
      PS_PER_ORG_INST INST
!GEX-TLL 03/24/2008 HCM 9.0 Upgrade End      
WHERE A.EMPLID = PP.EMPLID
!GEX-TLL 03/24/2008 HCM 9.0 Upgrade Begin  
  !AND PP.PER_STATUS = 'E'
  AND INST.PER_ORG = 'EMP'
  AND A.EMPLID = INST.EMPLID
  AND INST.ORG_INSTANCE_ERN =  A.EMPL_RCD
!GEX-TLL 03/24/2008 HCM 9.0 Upgrade End  
  AND A.EMPL_STATUS IN [$StatusClause]                         !PUBSEC
  AND A.EFFDT =
      (SELECT MAX(H.EFFDT)
       FROM PS_JOB H
       WHERE H.EMPLID = A.EMPLID
         AND H.EMPL_RCD = A.EMPL_RCD
         AND H.EFFDT <= $CountDate)
  AND A.EFFSEQ =
      (SELECT MAX(I.EFFSEQ)
       FROM PS_JOB I
       WHERE I.EMPLID = A.EMPLID
         AND I.EMPL_RCD = A.EMPL_RCD
         AND I.EFFDT = A.EFFDT)
  AND [$GEXXX902_INCLUDE_DEPTID_CRITERIA]
GROUP BY A.DEPTID,A.BUSINESS_UNIT
end-SELECT

end-procedure Get-Count

!-----------------------------------------------------------------------
begin-procedure Read-Job-Records
!-----------------------------------------------------------------------                                                 
Let $GEXXX902_Deptid_Alias   = 'B.DEPTID'  
do Select-Deptid-Parameters
show ' $GEXXX902_INCLUDE_DEPTID_CRITERIA:B is here' $GEXXX902_INCLUDE_DEPTID_CRITERIA

!Girraj
show 'From Date  ' $FromDate 
show 'Thru Date  ' $ThruDate 
!Girraj

begin-SELECT
B.BUSINESS_UNIT

   LET $BU = RTRIM(&B.BUSINESS_UNIT,' ')

B.DEPTID () on-break print=never procedure=Department-Change
B.EMPLID () on-break print=never procedure=Clear-Duplicates
B.ACTION,B.ACTION_REASON,B.EMPL_STATUS,B.EMPL_RCD,B.EFFDT,B.EFFSEQ

  move &B.DeptID to $DeptID
  
  Let $GEXXX902_Deptid_Alias   = 'E.DEPTID'                  !NRR

  evaluate &B.Action
    when = 'HIR'              !Hire
    when = 'REH'              !Rehire
      add 1 to #Hires
    when = 'TER'              !Termination
    when = 'TWP'
    when = 'TWB'
      if (#dup_term = 0)
        if &B.EMPL_STATUS <> 'X' and &B.EMPL_STATUS <> 'V'
          add 1 to #Terminations
          let #dup_term = 1
        end-if
      end-if
    when = 'RET'              !Retirement
    when = 'RWP'
      if (#dup_retire = 0)
        add 1 to #Retires
        let #dup_retire = 1
      end-if
    when = 'XFR'              !Transfer
      add 1 to #XfersIn
      
      do Find-Transfer-Out
    when = 'POS'              !Transfer
      if (&B.action_reason = 'XFR')
        add 1 to #XfersIn
        do Find-Transfer-Out
      end-if
  end-evaluate
  
FROM  PS_JOB B,
      PS_PERSON PP2,
!GEX-TLL 03/24/2008 HCM 9.0 Upgrade Begin  
      PS_PER_ORG_INST INST
!GEX-TLL 03/24/2008 HCM 9.0 Upgrade End      
WHERE B.EMPLID = PP2.EMPLID
!GEX-TLL 03/24/2008 HCM 9.0 Upgrade Begin  
  !AND PP2.PER_STATUS = 'E'
  AND INST.PER_ORG = 'EMP'
  AND B.EMPLID = INST.EMPLID
  AND INST.ORG_INSTANCE_ERN =  B.EMPL_RCD
!GEX-TLL 03/24/2008 HCM 9.0 Upgrade End  
  AND B.EFFDT BETWEEN $FromDate AND $ThruDate     
  AND [$GEXXX902_INCLUDE_DEPTID_CRITERIA]   
ORDER BY B.DEPTID,B.EMPLID

end-SELECT

  do Department-Change

end-procedure Read-Job-Records

!-----------------------------------------------------------------------
begin-procedure Find-Transfer-Out
                                                  
Let $GEXXX902_Deptid_Alias   = 'E.DEPTID'                            !NRR
do Select-Deptid-Parameters                                          !NRR
show ' $GEXXX902_INCLUDE_DEPTID_CRITERIA:E is here' $GEXXX902_INCLUDE_DEPTID_CRITERIA

begin-SELECT Loops=1
E.BUSINESS_UNIT
E.DEPTID
E.EFFDT
E.EFFSEQ

  do Insert-XferOut

FROM  PS_JOB E,
      PS_PERSON PP3,
!GEX-TLL Modified for Upgrade 9.0 on 11/27/2007 - Begin       
      PS_PER_ORG_INST INST
!GEX-TLL Modified for Upgrade 9.0 on 11/27/2007 - Begin        
WHERE E.EMPLID    = &B.EmplID
  AND E.EMPLID    = PP3.EMPLID
!GEX-TLL Modified for Upgrade 9.0 on 11/27/2007 - Begin  
  !AND PP3.PER_STATUS = 'E'
  AND INST.PER_ORG = 'EMP'
  AND E.EMPLID = INST.EMPLID
  AND INST.ORG_INSTANCE_ERN =  E.EMPL_RCD
!GEX-TLL Modified for Upgrade 9.0 on 11/27/2007 - End
  AND E.EMPL_RCD = &B.EMPL_RCD
  AND (E.EFFDT < &B.EffDt OR E.EFFDT = &B.EffDt AND E.EFFSEQ < &B.EffSeq)
AND [$GEXXX902_INCLUDE_DEPTID_CRITERIA]   
ORDER BY E.EFFDT DESC, E.EFFSEQ DESC

end-SELECT
end-procedure Find-Transfer-Out

begin-procedure Insert-XferOut

let $sql-statement = 'PER010.SQR,Insert-XferOut,Insert,PS_R_Action_Counts'
begin-SQL On-Error=SQL-Error
INSERT INTO PS_R_ACTION_COUNTS VALUES(&E.DeptID,&E.BUSINESS_UNIT,0,0,0,0,1,0,0)
end-SQL

end-procedure  Insert-XferOut

!-----------------------------------------------------------------------
begin-procedure Department-Change

let $sql-statement = 'PER010.SQR,Department-Change,Insert,PS_R_Action_Counts'
begin-SQL On-Error=SQL-Error
INSERT INTO PS_R_ACTION_COUNTS VALUES
  ($DeptID,$BU,#Begins,#Hires,#Retires,#XfersIn,0,#Terminations,#Ends)
end-SQL

  move 0 to #Begins
  move 0 to #Hires
  move 0 to #Retires
  move 0 to #XfersIn
  move 0 to #Terminations
  move 0 to #Ends

end-procedure Department-Change

!-----------------------------------------------------------------------
begin-procedure Clear-Duplicates

  let #dup_term = 0
  let #dup_retire = 0

end-procedure Clear-Duplicates

!-----------------------------------------------------------------------
begin-procedure Create-Report

begin-SELECT
BSC.BUSINESS_UNIT
  LET $BU = RTRIM(&BSC.BUSINESS_UNIT,' ') 
BSC.DEPARTMENT                       (+1,1,10)
  move &BSC.Department to $DeptID
  do Get-Department-Name
  print $DeptName                (0,13,27)
SUM(BSC.BEGINS)       &BSCBeginCount
  do Format-Number(&BSCBeginCount, $out, '999,999')
  print $out                     (0,43,9)
SUM(BSC.HIRES)        &BSCHireCount
  do Format-Number(&BSCHireCount, $out, '999,999')
  print $out                     (0,51,9)
SUM(BSC.TERMINATIONS) &BSCTermCount
  do Format-Number(&BSCTermCount, $out, '999,999')
  print $out                     (0,61,9)
SUM(BSC.RETIRES)      &BSCRetireCount
  do Format-Number(&BSCRetireCount, $out, '999,999')
  print $out                     (0,72,9)
SUM(BSC.XFERSIN)      &BSCXfersInCount
  do Format-Number(&BSCXfersInCount, $out, '999,999')
  print $out                     (0,84,9)    
SUM(BSC.XFERSOUT)     &BSCXfersOutCount
  do Format-Number(&BSCXfersOutCount, $out, '999,999')
  print $out                     (0,94,9)

SUM(BSC.ENDS)         &BSCEndCount

  move &BSCBeginCount to #BSCBeginCount
  move &BSCHireCount to #BSCHireCount
  move &BSCTermCount to #BSCTermCount
  move &BSCRetireCount to #BSCRetireCount
  move &BSCXfersInCount to #BSCXfersInCount
  move &BSCXfersOutCount to #BSCXfersOutCount
  add #BSCBeginCount to #BSCHireCount
  subtract #BSCTermCount from #BSCHireCount
  subtract #BSCRetireCount from #BSCHireCount
  add #BSCXfersInCount to #BSCHireCount
  subtract #BSCXfersOutCount from #BSCHireCount
    do Format-Number(#BSCHireCount, $out, '999,999')
   
    print $out                     (0,104,9)   
    

!***********************************************************
!   Turnover Rate =      Terminations * 100%
!                   -----------------------------
!                   (Begin Count + End Count) / 2
!***********************************************************

  move &BSCBeginCount to #BeginPlusEnd
  add #BSCHireCount to #BeginPlusEnd
  if #BeginPlusEnd <> 0
    move &BSCTermCount to #Terminations
    multiply 200 times #Terminations
    divide #BeginPlusEnd into #Terminations
    do Format-Number(#Terminations, $out, '9999.9')
    
    
    print $out                   (0,114,4)
    print '%'                    ()
  else
    
    print 'NM'                   (0,114)
    
    
  end-if

FROM PS_R_ACTION_COUNTS BSC
GROUP BY BSC.BUSINESS_UNIT,BSC.DEPARTMENT
ORDER BY BSC.DEPARTMENT

end-SELECT 

!***********
begin-SELECT
  print 'Company Total'           (+2,13)
SUM(BSC.BEGINS)       &BSCBeginCountC
  do Format-Number(&BSCBeginCountC, $out, '999,999')
  print $out                      (0,43,9)
SUM(BSC.HIRES)        &BSCHireCountC
  do Format-Number(&BSCHireCountC, $out, '999,999')
  print $out                      (0,51,9)
SUM(BSC.TERMINATIONS) &BSCTermCountC
  do Format-Number(&BSCTermCountC, $out, '999,999')
  print $out                      (0,61,9)
SUM(BSC.RETIRES)      &BSCRetireCountC
  do Format-Number(&BSCRetireCountC, $out, '999,999')
  print $out                      (0,72,9)
SUM(BSC.XFERSIN)      &BSCXfersInCountC
  do Format-Number(&BSCXfersInCountC, $out, '999,999')
  print $out                      (0,84,9)
SUM(BSC.XFERSOUT)     &BSCXfersOutCountC
  do Format-Number(&BSCXfersOutCountC, $out, '999,999')
  print $out                      (0,94,9)
SUM(BSC.ENDS)         &BSCEndCountC

  move &BSCBeginCountC to #BSCBeginCountC
  move &BSCHireCountC to #BSCHireCountC
  move &BSCTermCountC to #BSCTermCountC
  move &BSCRetireCountC to #BSCRetireCountC
  move &BSCXfersInCountC to #BSCXfersInCountC
  move &BSCXfersOutCountC to #BSCXfersOutCountC
  add #BSCBeginCountC to #BSCHireCountC
  subtract #BSCTermCountC from #BSCHireCountC
  subtract #BSCRetireCountC from #BSCHireCountC
  add #BSCXfersInCountC to #BSCHireCountC
  subtract #BSCXfersOutCountC from #BSCHireCountC
    do Format-Number(#BSCHireCountC, $out, '999,999')
    
    print $out                     (0,104,9)   
    

  move &BSCBeginCountC to #BeginPlusEnd
  add  #BSCHireCountC to #BeginPlusEnd
  if #BeginPlusEnd <> 0
    move &BSCTermCountC to #Terminations
    multiply 200 times #Terminations
    divide #BeginPlusEnd into #Terminations
    do Format-Number(#Terminations, $out, '9999.9')
    
    print $out                   (0,114,4)
    print '%'                    ()
       
  else
     print 'NM'                   (0,114)
  end-if

FROM PS_R_ACTION_COUNTS BSC
end-SELECT
end-procedure


!****************Definition of new Procedures *********************!
Begin-Procedure SetDefault-Begin-End-Date

BEGIN-SELECT 
TO_CHAR(LAST_DAY(SYSDATE),'YYYY-MM-DD')		&LastDate
FROM DUAL
END-SELECT 
!Let $ThruDate=EDIT(&LastDate,'DD-MMM-YYYY')
do Convert-From-DTU-Date(&LastDate,$ThruDate)
Do dtu-month-begin(&LastDate,$FromDate1) 
do Convert-From-DTU-Date($FromDate1,$FromDate)

End-Procedure SetDefault-Begin-End-Date
!******************************************************************


!******************************************************************
Begin-Procedure GEXXX950-Input-Parameters
!******************************************************************

  Let $GEXXX900_INCLUDE_COMPANY_CRITERIA = '1=1'
  Let $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA = 'ALL'


  Display 'Enter Company/Paygroup or leave blank to exit.'
  While 1=1
    Input $In-Company Maxlen=3 'Company'
    Uppercase $In-Company
    If Rtrim($In-Company, ' ') = ''
      Break
    Else
      Input $In-Paygroup Maxlen=3 'Paygroup'
      Uppercase $In-Paygroup
      If Rtrim($In-Paygroup, ' ') = ''
        Let $Include_Condition = '(' || $GEXXX901_Company_Alias || ' = '''  || $In-Company || ''')'
      Else
        Let $Include_Condition = '(' || $GEXXX901_Company_Alias || ' = '''  || $In-Company || ''' And ' || $GEXXX901_Paygroup_Alias || ' = '''  || $In-Paygroup || ''')'
      End-If
      Add 1 To #GEX_RC_PAYGROUP_ROWS
      If #GEX_RC_PAYGROUP_ROWS = 1
        Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = '(' || $Include_Condition
      Else
        Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA || ' Or '  || $Include_Condition
      End-If
    End-If
  End-While

  If #GEX_RC_PAYGROUP_ROWS = 0
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = '1=1'
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA || ')'
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
  End-If


  Let $DeptIDString = ''''
  Display 'Enter DeptID or leave blank to exit.'
  While 1=1
    Input $In-DeptID Maxlen=10 'DeptID'
    Uppercase $In-DeptID
    If Rtrim($In-DeptID, ' ') = ''
      Concat '''' With $DeptIDString
      Break
    End-If
    If $DeptIDString <> ''''
      Concat ''',''' With $DeptIDString
    End-If
    Concat $In-DeptID With $DeptIDString
  End-While

  If $DeptIDString = ''''''
    Let $GEXXX902_INCLUDE_DEPTID_CRITERIA = '1=1'
    Let $GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX902_INCLUDE_DEPTID_CRITERIA = $GEXXX902_Deptid_Alias || ' In (' || $DeptIDString || ')'
    Let $GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA = $GEXXX902_INCLUDE_DEPTID_CRITERIA
  End-If


  Let $EmplStatusString = ''''
  Display 'Enter Employee Status or leave blank to exit.'
  While 1=1
    Input $In-EmplStatus Maxlen=1 'Employee Status'
    Uppercase $In-EmplStatus
    If Rtrim($In-EmplStatus, ' ') = ''
      Concat '''' With $EmplStatusString
      Break
    End-If
    If $EmplStatusString <> ''''
      Concat ''',''' With $EmplStatusString
    End-If
    Concat $In-EmplStatus With $EmplStatusString
  End-While

  If $EmplStatusString = ''''''
    Let $GEXXX903_INCLUDE_EMP_STAT_CRITERIA = '1=1'
    Let $GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX903_INCLUDE_EMP_STAT_CRITERIA = $GEXXX903_Emp_Stat_Alias || ' In (' || $EmplStatusString || ')'
    Let $GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA = $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
  End-If


  Let $DivCdString = ''''
  Display 'Enter Company Division Code or leave blank to exit.'
  While 1=1
    Input $In-DivCd Maxlen=3 'Company Division Code'
    Uppercase $In-DivCd
    If Rtrim($In-DivCd, ' ') = ''
      Concat '''' With $DivCdString
      Break
    End-If
    If $DivCdString <> ''''
      Concat ''',''' With $DivCdString
    End-If
    Concat $In-DivCd With $DivCdString
  End-While

  If $DivCdString = ''''''
    Let $GEXXX907_INCLUDE_DIV_CD_CRITERIA = '1=1'
    Let $GEXXX907_INCLUDE_DIV_CD_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX907_INCLUDE_DIV_CD_CRITERIA = $GEXXX907_Div_CD_Alias || ' In (' || $DivCdString || ')'
    Let $GEXXX907_INCLUDE_DIV_CD_DISPLAY_CRITERIA = $GEXXX907_INCLUDE_DIV_CD_CRITERIA
  End-If


  Let $AcctCdString = ''''
  Display 'Enter Account Code or leave blank to exit.'
  While 1=1
    Input $In-AcctCd Maxlen=25 'Account Code'
    Uppercase $In-AcctCd
    If Rtrim($In-AcctCd, ' ') = ''
      Concat '''' With $AcctCdString
      Break
    End-If
    If $AcctCdString <> ''''
      Concat ''',''' With $AcctCdString
    End-If
    Concat $In-AcctCd With $AcctCdString
  End-While

  If $AcctCdString = ''''''
    Let $GEXXX909_INCLUDE_ACCT_CD_CRITERIA = '1=1'
    Let $GEXXX909_INCLUDE_ACCT_CD_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX909_INCLUDE_ACCT_CD_CRITERIA = $GEXXX909_Acct_CD_Alias || ' In (' || $AcctCdString || ')'
    Let $GEXXX909_INCLUDE_ACCT_CD_DISPLAY_CRITERIA = $GEXXX909_INCLUDE_ACCT_CD_CRITERIA
  End-If
  
 			
  Let $X000_WHERE_SELECT_ASOFDATE = $AsOfDate
 
  
End-Procedure 

!******************************************************************!
Begin-Procedure Select-Deptid-Parameters
!******************************************************************!
  Let $OprID         = '''' || $Prcs_OprID       || ''''
  Let $Run_Cntl_ID   = '''' || $Prcs_Run_Cntl_ID || ''''
  Let #GEX_RC_DEPTID_ROWS = 0
  Let $GEXXX902_INCLUDE_DEPTID_CRITERIA = ''
  Let $GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA = 'ALL'
  
Begin-Select

GEX_RC_DEPTID.DEPTID

  Add 1 To #GEX_RC_DEPTID_ROWS

  If #GEX_RC_DEPTID_ROWS = 1
    Let $GEXXX902_INCLUDE_DEPTID_CRITERIA = '(' || $GEXXX902_Deptid_Alias || ' In ('''     || &GEX_RC_DEPTID.DEPTID || ''''
  Else
    Let $GEXXX902_INCLUDE_DEPTID_CRITERIA = $GEXXX902_INCLUDE_DEPTID_CRITERIA || ',''' || &GEX_RC_DEPTID.DEPTID  || ''''
  End-If

From  PS_GEX_RC_DEPTID GEX_RC_DEPTID

Where GEX_RC_DEPTID.OPRID               = [$OprID]
And   GEX_RC_DEPTID.RUN_CNTL_ID         = [$Run_Cntl_ID]
And   Rtrim(GEX_RC_DEPTID.DEPTID, ' ') != ' ' 
End-Select

  If #GEX_RC_DEPTID_ROWS = 0
    Let $GEXXX902_INCLUDE_DEPTID_CRITERIA = $GEXXX902_Deptid_Alias || ' = ' || $GEXXX902_Deptid_Alias
  Else
    Let $GEXXX902_INCLUDE_DEPTID_CRITERIA = $GEXXX902_INCLUDE_DEPTID_CRITERIA || '))'
    Let $GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA = $GEXXX902_INCLUDE_DEPTID_CRITERIA
End-If

End-Procedure
!******************************************************************!



!-----------------------------------------------------------------------
#include 'stdapi.sqc'    !Routine to update run status
#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'askftd.sqc'    !From Thru Date input
!#include 'hrsecty.sqc'   !Get SQR Security parameters           !vendnrr

#Include 'getdptnm.sqc'  !Get-Department-Name procedure
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'geteandg.sqc'  !Education Government Installed
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'







