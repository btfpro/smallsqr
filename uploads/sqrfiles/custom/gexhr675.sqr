!************************************************************************
!                                                                       *
! PROGRAM NAME      : TXWV8001                                          *
!                                                                       *
! CREATION DATE     : 2002/09/01                                        *
!                                                                       *
! P/S VERSION       : 8.X                                               *
!                                                                       *
! PROGRAM NOTES     : This program is a copy of gexhr604 TALX Interface.*
!                     This is used to resend the files for the incorrect*
!                     ssn's. Hardode the pay end date and the ssns      *
!                     belonging to that pay end date and run the program*
!                     send the files to Rebecca. This program will be   *
!                     used on quarterly basis to send the correct files *
!                     for the incorrect SSN's                           *
!-----------------------------------------------------------------------*
!                      MODIFICATION HISTORY                             *
!-----------------------------------------------------------------------*
!
!************************************************************************
!  GIANT EAGLE MODIFICATIONS:                                           *                                                                      
!  GEXHR604:  TALX INTERFACE                                            *
!************************************************************************
!                                                                       *
!                                                                       *
!               Confidentiality Information:                            *
!                                                                       *
! This module is the confidential and proprietary information of        *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used  *
! for any purpose other than that for which it is expressly provided    *
! without the written permission of Giant Eagle.                        *
!                                                                       *
!************************************************************************
! Narrative:		Creates a file for TALX/TWN/VOE verification.           *
!                       plan deductions and employer matching           *
!                       contributions.                                  *
!                                                                       *
! 02/04/2005 10804	Initial retro-fit to Giant Eagle                    *
!                       Changed all TALX fields & records to GEX        *
!                       versions.                                       *
!                       Fields:                                         *
!                       TALX_CALC_SERVICE	GEX_TALX_CALC_SVC             *
!                       TALX_CD_PED		GEX_TALX_CD_PED                   *
!                       TALX_CLIENT_ID		GEX_TALX_CLIENT_ID            *
!                       TALX_DATA_SRC_ID 	GEX_TALX_DATA_SRC             *
!                       TALX_DATA_SRC_TYPE	GEX_TALX_SRC_TYP            *
!			TALX_DEF_EARN_TYPE	GEX_TALX_DEF_EARN                             *
!			TALX_DEF_TERM_CD	GEX_TALX_DEF_TERM                               *
!                       TALX_EARN_TYPE		GEX_TALX_EARN_TYPE            *
!                       TALX_EMPL_STATUS	GEX_TALX_EMPL_STS	            *
!                       TALX_PAY_OR_BOTH	GEX_TALX_PY_OR_BTH            *
!                       TALX_PGM_RUN_TYPE	GEX_TALX_PGM_TYP              *
!                       TALX_SEP_COMB		GEX_TALX_SEP_COMB               *
!                       TALX_TERM_CD            GEX_TALX_TERM_CD        *
!                                                                       *
!                       Records:                                        *
!                       PS_TALX_COMPANY		PS_GEX_TALX_CMPY              *
!                       PS_TALX_EARN_TYPE	PS_GEX_TALX_ERNTYP            *
!                       PS_TALX_EE_DATA		PS_GEX_TALX_EE_DTA            *
!                       PS_TALX_TERM_CD         PS_GEX_TALX_TRM_CD      *
!                       PS_TALX_INST		PS_GEX_TALX_INST                *
!                       PS_TALX_TWN_RUNCT3	PS_GEX_TALX_RUNCTL          *
!                                                                       *
!         Naming convention for main file:                              *
!		TEST:		11796ptscorrections.new                                                *
!               PRODUCTION:	11796plvcorrections.new                                *
!                                                                       *
!         Naming convention for UID File:                               *
!		TEST:		11796tstincorrections.msf                                              *
!               PRODUCTION:	11796prodincorrections.msf                             *
!                                                                       *
!************************************************************************
!                    GE MODIFICATION HISTORY                            *
!************************************************************************
!  INITIALS	DATE		DESCRIPTION OF THE CHANGE                           *
!                                                                       *
! ISDVNPK 01/05/2011   Clone of GEXH604
!************************************************************************

#include 'setenv.sqc'    ! SET ENVIRONMENT
#include 'setup02.sqc'   ! PRINTER AND PAGE-INIT (LANDSCAPE)

!***********************************************************************
!
! PROCEDURE : BEGIN-HEADING
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO DEFINE THE REPORT
!             HEADING
!
!***********************************************************************
    
BEGIN-HEADING 15

                     
#include 'stdhdg01.sqc' ! STANDARD HEADING FOR THE REPORT
                        ! $REPORTID
                        ! $REPORTTITLE
                        ! PAGE-NUMBER
                        ! $REPORTDATE
                        ! $REPORTTIME

PRINT '*************************************************************' (+1,10)
PRINT '*  TXWV8001 HAS GENERATED THE FOLLOWING PROBLEM REPORT      *' (+1,10)
PRINT '*                                                           *' (+1,10)
PRINT '*  PLEASE REVIEW AND MAKE APPROPRIATE MODIFICATIONS         *' (+1,10)
PRINT '*************************************************************' (+1,10)

PRINT ' '                               (+1,1)    
    
PRINT '-'                               (+1,1,100) FILL

PRINT ' '                               (+1,1)    

END-HEADING

!************************************************************************
!
! PROCEDURE : REPORT
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO ACT AS THE HIGH-LEVEL
!             PROGRAM DRIVER
!
!************************************************************************

BEGIN-REPORT

DO INIT-DATETIME  ! FOUND IN DATETIME.SQC - MUST BE CALLED PRIOR TO USING ANY DATETIME FUNCTIONS

DO INIT-NUMBER    ! FOUND IN NUMBER.SQC - MUST BE CALLED PRIOR TO USING ANY NUMERIC FUNCTIONS

DO STDAPI-INIT    ! FOUND IN STDAPI.SQC

DO GET-CURRENT-DATETIME

SHOW '*********************************************************************************************************************************'
SHOW 'TXWV8001: EXECUTION BEGINS ON ' $REPORTDATE ' AT ' $REPORTTIME
SHOW '*********************************************************************************************************************************'

DO CONVERT-TO-DTU-DATE ($ASOFTODAY, $TALX_BENEFITS_YYYY_MM_DD)                           

LET $TALX_BENEFITS_AS_OF_DATE  = SUBSTR($TALX_BENEFITS_YYYY_MM_DD, 1,4) ||               
                                 SUBSTR($TALX_BENEFITS_YYYY_MM_DD, 6,2) ||               
                                 SUBSTR($TALX_BENEFITS_YYYY_MM_DD, 9,2)                  
    
do Trunc-work-table					

DO GET-INSTALLATION-RECORD

  Let $ReportID      = 'GEXHR675'
  Let $ReportTitle   = 'TALX VERIFICATION OF EMPLOYMENT EXTRACT PROBLEM REPORT'

  Show '$ReportID    = ' $ReportID
  Show '$ReportTitle = ' $ReportTitle

  let $1st_UID = 'Y'

  let $TALXSUBMISSION = 'I'
  
DO OPEN-FILES

DO WRITE-TALX-TWN-UID-HDR-RECORD			
                                
DO INIT-REPORT
 
!DO PROCESS-PAY-CALENDAR                                                        ! GET EMPLOYEES WHO WERE PAID

!DO PROCESS-EMPLOYEE-CHANGES	                                                ! SEE IF THERE WERE ANY EMPLOYEE CHANGES
Do READ-FROM-TEMP					

DO WRITE-TALX-TWN-CONTROL-RECORD

DO WRITE-TALX-TWN-UID-TRAILER-RECORD			

LET $EMPLOYEES = EDIT(#TOTALEMPLOYEES,'9,999,999')

SHOW '*********************************************************************************************************************************'
SHOW 'TXWV8001 : TOTAL NUMBER OF RECORDS WRITTEN                                          = ' $EMPLOYEES
SHOW '*********************************************************************************************************************************'
SHOW 'TXWV8001 : TOTAL NUMBER OF RECORDS INSERTED INTO PS_TALX_EE_DATA                    = ' #INSERT_COUNT EDIT 9,999,999
SHOW 'TXWV8001 : TOTAL NUMBER OF RECORDS UPDATED INTO PS_TALX_EE_DATA                     = ' #UPDATE_COUNT EDIT 9,999,999
SHOW '*********************************************************************************************************************************'

Do Close-Files					
Do Z010-set-system-commands-for-ftp

SHOW ' '

DO STDAPI-TERM

DO GET-CURRENT-DATETIME

SHOW '*********************************************************************************************************************************'
SHOW 'TXWV8001 : EXECUTION ENDS ON ' $REPORTDATE ' AT ' $REPORTTIME
SHOW '*********************************************************************************************************************************'

END-REPORT

!************************************************************************
!
! PROCEDURE : INIT-REPORT
!
! FUNCTION  : INIT VARIABLES PRIOR TO USE
!
!************************************************************************

BEGIN-PROCEDURE INIT-REPORT

  ! Begin
  Let $ReportID      = 'GEXHR675'
  Let $ReportTitle   = 'TALX VERIFICATION OF EMPLOYMENT EXTRACT PROBLEM REPORT'

  Show '$ReportID    = ' $ReportID
  Show '$ReportTitle = ' $ReportTitle

  let $1st_UID = 'Y'

  let $TALXSUBMISSION = 'I'
  !End

!DO GET-INSTALLATION-RECORD

!DO OPEN-FILES


CREATE-ARRAY NAME=EMPLID_ARRAY SIZE=80000
    FIELD=EMPLID:CHAR
    
CREATE-ARRAY NAME=EARN_TYPE_ARRAY SIZE=1000          ! TALX EARNINGS TYPES
    FIELD=EARN_TYPE_ARRAY_ERNCD:CHAR
    FIELD=EARN_TYPE_ARRAY_EARN_TYPE:CHAR

CREATE-ARRAY NAME=COMPANY_ARRAY SIZE=1000
    FIELD=COMPANY_ARRAY_COMPANY:CHAR
    FIELD=COMPANY_ARRAY_FEDERAL_EIN:NUMBER
    FIELD=COMPANY_ARRAY_SETID_LOCATION:CHAR
    FIELD=COMPANY_ARRAY_DEFAULT_SETID:CHAR

CREATE-ARRAY NAME=TERM_CD_ARRAY SIZE=1000
    FIELD=TERM_CD_ARRAY_ACTION:CHAR
    FIELD=TERM_CD_ARRAY_ACTION_REASON:CHAR
    FIELD=TERM_CD_ARRAY_TALX_TERM_CD:CHAR
    
CREATE-ARRAY NAME=FREQUENCY_ARRAY SIZE=1000                                   
    FIELD=FREQUENCY_ARRAY_COMPANY:CHAR                                         
    FIELD=FREQUENCY_ARRAY_PAYGROUP:CHAR                                       
    FIELD=FREQUENCY_ARRAY_PAY_FREQUENCY:CHAR                                   

LET #EMPLID_ARRAY_COUNT = 0


IF $PRCS_PROCESS_INSTANCE = ''
     STOP
!    DO GET-RUN-PARAMETERS-FROM-OPERATOR
ELSE
    SHOW 'TXWV8001 : RUNNING FROM PROCESS SCHEDULER'
    DO GET-RUN-PARAMETERS-FROM-PROCESS-SCHEDULER
END-IF

!DO EDIT-CALENDAR

!DO OPEN-FILES

!DO LOAD-EARN-TYPE-ARRAY

!DO LOAD-COMPANY-ARRAY

!DO LOAD-TERM-CD-ARRAY

!DO LOAD-PAYFREQUENCY-ARRAY                                                    

END-PROCEDURE INIT-REPORT

!************************************************************************
!
! PROCEDURE : GET-INSTALLATION-RECORD
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE OPTIONS AND
!             OTHER DATA FROM THE TALX INSTALLATION TABLE
!
!************************************************************************

BEGIN-PROCEDURE GET-INSTALLATION-RECORD

LET $INSTALLATION_REC_FOUND = 'N'

BEGIN-SELECT LOOPS=1
TI.GEX_TALX_CD_PED		!TI.TALX_CD_PED
TI.GEX_TALX_PY_OR_BTH		!TI.TALX_PAY_OR_BOTH
TI.GEX_TALX_SEP_COMB		!TI.TALX_SEP_COMB
TI.GEX_TALX_DEF_TERM		!TI.TALX_DEF_TERM_CD
TI.GEX_TALX_DEF_EARN		!TI.TALX_DEF_EARN_TYPE
TI.GEX_TALX_CALC_SVC		!TI.TALX_CALC_SERVICE
TI.GEX_TALX_SRC_TYP		!TI.TALX_DATA_SRC_TYPE
TI.GEX_TALX_PGM_TYP
    LET $INSTALLATION_REC_FOUND = 'Y'
FROM PS_GEX_TALX_INST TI	!PS_TALX_INST TI
END-SELECT

IF $INSTALLATION_REC_FOUND = 'N'
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : NO INSTALLATION RECORD FOUND - PLEASE ADD'
    SHOW 'TXWV8001 : PROCESSING CANNOT CONTINUE UNTIL ONE IS DEFINED'
    SHOW 'TXWV8001 : ON THE TALX INSTALLATION TABLE'
    SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
    SHOW 'TXWV8001 : A ROLLBACK IS ISSUED'
    SHOW '*********************************************************************************************************************************'
    STOP
END-IF

IF &TI.GEX_TALX_CD_PED <> 'C' AND	
   &TI.GEX_TALX_CD_PED <> 'P'		
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : (C)HECK DATE / (P)AY END DATE OPTION FLAG INVALID'
    SHOW 'TXWV8001 : MUST BE SET TO C OR P'
    SHOW 'TXWV8001 : ON THE TALX INSTALLATION TABLE'
    SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
    SHOW 'TXWV8001 : A ROLLBACK IS ISSUED'
    SHOW '*********************************************************************************************************************************'
    STOP
END-IF

IF &TI.GEX_TALX_PY_OR_BTH <> 'P' AND	
   &TI.GEX_TALX_PY_OR_BTH <> 'B'	
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : PRODUCE (P)AYROLL ONLY FILE OR '
    SHOW 'TXWV8001 : (B)OTH A PAYROLL AND BENEFITS FILE FLAG'
    SHOW 'TXWV8001 : MUST BE SET TO P OR B'
    SHOW 'TXWV8001 : ON THE TALX INSTALLATION TABLE'
    SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
    SHOW 'TXWV8001 : A ROLLBACK IS ISSUED'
    SHOW '*********************************************************************************************************************************'
    STOP
END-IF

IF &TI.GEX_TALX_SEP_COMB <> 'S' AND		
   &TI.GEX_TALX_SEP_COMB <> 'C'			
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : CREATE (S)EPERATE OR (C)COMBINED FILES'
    SHOW 'TXWV8001 : FLAG MUST BE SET TO S OR B'
    SHOW 'TXWV8001 : ON THE TALX INSTALLATION TABLE'
    SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
    SHOW 'TXWV8001 : A ROLLBACK IS ISSUED'
    SHOW '*********************************************************************************************************************************'
    STOP
END-IF

IF &TI.GEX_TALX_DEF_TERM = '01' AND		
   &TI.GEX_TALX_DEF_TERM = '02' AND		
   &TI.GEX_TALX_DEF_TERM = '03' AND		
   &TI.GEX_TALX_DEF_TERM = '04' AND		
   &TI.GEX_TALX_DEF_TERM = '05' AND		
   &TI.GEX_TALX_DEF_TERM = '06'			
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : INVALID DEFAULT TERM CODE - VALUE = ' &TI.GEX_TALX_DEF_TERM
    SHOW 'TXWV8001 : VALUE MUST BE (01,02,03,04,05,06)'
    SHOW 'TXWV8001 : ON THE TALX INSTALLATION TABLE'
    SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
    SHOW 'TXWV8001 : A ROLLBACK IS ISSUED'
    SHOW '*********************************************************************************************************************************'
    STOP
END-IF

IF &TI.GEX_TALX_DEF_EARN <> '1' AND		
   &TI.GEX_TALX_DEF_EARN <> '2' AND		
   &TI.GEX_TALX_DEF_EARN <> '3' AND		
   &TI.GEX_TALX_DEF_EARN <> '4' AND			
   &TI.GEX_TALX_DEF_EARN <> '5'			
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : INVALID DEFAULT EARN TYPE - VALUE = ' &TI.GEX_TALX_DEF_EARN
    SHOW 'TXWV8001 : VALUE MUST BE 1,2,3,4,5'
    SHOW 'TXWV8001 : ON THE TALX INSTALLATION TABLE'
    SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
    SHOW 'TXWV8001 : A ROLLBACK IS ISSUED'
    SHOW '*********************************************************************************************************************************'
    STOP
END-IF

IF &TI.GEX_TALX_CALC_SVC <> 'Y' AND		
   &TI.GEX_TALX_CALC_SVC <> 'N'			
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : INVALID CALC SERVICE OPTION'
    SHOW 'TXWV8001 : FLAG MUST BE SET TO Y OR N'
    SHOW 'TXWV8001 : ON THE TALX INSTALLATION TABLE'
    SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
    SHOW 'TXWV8001 : A ROLLBACK IS ISSUED'
    SHOW '*********************************************************************************************************************************'
    STOP
END-IF

IF RTRIM(&TI.GEX_TALX_SRC_TYP,' ') = ''		
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : INVALID DATA SOURCE TYPE - CANNOT BE NULL OR SPACE'
    SHOW 'TXWV8001 : ON THE TALX INSTALLATION TABLE'
    SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
    SHOW 'TXWV8001 : A ROLLBACK IS ISSUED'
    SHOW '*********************************************************************************************************************************'
    STOP
ELSE
    LET $TALX_DATA_SOURCE_TYPE = RTRIM(&TI.GEX_TALX_SRC_TYP,' ')	
END-IF

IF &TI.GEX_TALX_PGM_TYP <> 'R' AND		
   &TI.GEX_TALX_PGM_TYP <> 'D'			
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : INVALID PROGRAM RUN TYPE OPTION = ' &TI.GEX_TALX_PGM_TYP
    SHOW 'TXWV8001 : FLAG MUST BE SET TO (R)UNID OR (D)AATE RANGE'
    SHOW 'TXWV8001 : ON THE TALX INSTALLATION TABLE'
    SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
    SHOW 'TXWV8001 : A ROLLBACK IS ISSUED'
    SHOW '*********************************************************************************************************************************'
    STOP
END-IF
    
SHOW 'TXWV8001 : OPTIONS IN EFFECT FOR THIS RUN :'
SHOW ' '
SHOW 'TXWV8001 : USE (C)HECK DATE OR (P)AY END DATE FOR "AS OF DATE"                                      : ' &TI.GEX_TALX_CD_PED
SHOW 'TXWV8001 : PRODUCE A (P)AYROLL DATA ONLY OR (B)OTH PAYROLL AND BENEFITS                             : ' &TI.GEX_TALX_PY_OR_BTH
SHOW 'TXWV8001 : IF PRODUCING BOTH PAY ROLL AND BEN, PRODUCE (S)ERERATE FILES OR (C)OMBINE BEN WITH PAY   : ' &TI.GEX_TALX_SEP_COMB
SHOW 'TXWV8001 : SHOULD THE PROGRAM CALCULATE SERVICE ? (Y/N)                                             : ' &TI.GEX_TALX_CALC_SVC
SHOW 'TXWV8001 : DEFAULT TERMINATION CODE (USED IF NO TALX TERM CODE FOUND FOR PEOPLESOFT ACTION REASON)  : ' &TI.GEX_TALX_DEF_TERM
SHOW 'TXWV8001 : DEFAULT EARNINGS TYPE (USED IF NO TALX EARNINGS TYPE FOUND FOR PEOPLESOFT EARNINGS CODE) : ' &TI.GEX_TALX_DEF_EARN
SHOW 'TXWV8001 : DATA SOURCE TYPE                                                                         : ' $TALX_DATA_SOURCE_TYPE
SHOW 'TXWV8001 : PROGRAM RUN TYPE                                                                         : ' &TI.GEX_TALX_PGM_TYP
SHOW '**********************************************************************************************************************************'

END-PROCEDURE GET-INSTALLATION-RECORD

!***********************************************************************
!
! PROCEDURE : GET-RUN-PARAMETERS-FROM-OPERATOR
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO ASK THE OPERATOR FOR
!             THE RUN TIME PARAMETERS IF NOT RUNNING FROM PROCESS
!             SCHEDULER
!
!***********************************************************************

BEGIN-PROCEDURE GET-RUN-PARAMETERS-FROM-OPERATOR

SHOW ' '

IF &TI.GEX_TALX_PGM_TYP = 'R'
    INPUT $RUNID     MAXLEN=3 TYPE=CHAR 'PLEASE ENTER THE RUNID TO BE EXTRACTED'
    UPPERCASE $RUNID
    LET $RUNID    = RTRIM($RUNID,' ')
    LET $WHERE_01 = 'WHERE PAY_CAL_01.RUN_ID = ''' || $RUNID  || ''''
    LET $WHERE_02 = 'WHERE PAY_CAL_02.RUN_ID = ''' || $RUNID  || ''''
    LET $WHERE_03 = 'WHERE PAY_CAL_03.RUN_ID = ''' || $RUNID  || ''''
ELSE

    IF &TI.GEX_TALX_CD_PED = 'C'

	INPUT $PAY_CALENDAR_FROM_DATE MAXLEN=10 TYPE=DATE FORMAT='YYYY-MM-DD' 'Please enter the Check Date FROM Date in YYYY-MM-DD format'

        let $PAY_CALENDAR_FROM_DATE_NATIVE = strtodate($PAY_CALENDAR_FROM_DATE,'YYYY-MM-DD')


        INPUT $PAY_CALENDAR_THRU_DATE MAXLEN=10 TYPE=DATE FORMAT='YYYY-MM-DD' 'Please enter the Check Date THRU Date in YYYY-MM-DD format'   

        let $PAY_CALENDAR_THRU_DATE_NATIVE = strtodate($PAY_CALENDAR_THRU_DATE,'YYYY-MM-DD')

	LET $WHERE_01 = 'WHERE PAY_CAL_01.CHECK_DT BETWEEN  '   || '''' || $PAY_CALENDAR_FROM_DATE_NATIVE || '''' || ' AND ' || '''' || $PAY_CALENDAR_THRU_DATE_NATIVE || ''''
        LET $WHERE_02 = 'WHERE PAY_CAL_02.CHECK_DT BETWEEN  '   || '''' || $PAY_CALENDAR_FROM_DATE_NATIVE || '''' || ' AND ' || '''' || $PAY_CALENDAR_THRU_DATE_NATIVE || ''''
        LET $WHERE_03 = 'WHERE PAY_CAL_03.CHECK_DT BETWEEN  '   || '''' || $PAY_CALENDAR_FROM_DATE_NATIVE || '''' || ' AND ' || '''' || $PAY_CALENDAR_THRU_DATE_NATIVE || ''''
	LET $WHERE_04 = 'WHERE PAY_CHK_CHK.CHECK_DT BETWEEN '   || '''' || $PAY_CALENDAR_FROM_DATE_NATIVE || '''' || ' AND ' || '''' || $PAY_CALENDAR_THRU_DATE_NATIVE || ''''
    ELSE
        INPUT $PAY_CALENDAR_FROM_DATE MAXLEN=10 TYPE=DATE FORMAT='YYYY-MM-DD' 'Please enter the Pay End Date FROM Date'
        INPUT $PAY_CALENDAR_THRU_DATE MAXLEN=10 TYPE=DATE FORMAT='YYYY-MM-DD' 'Please enter the Pay ENd Date THRU Date'
        DO CONVERT-FROM-DTU-DATE ($PAY_CALENDAR_FROM_DATE, $PAY_CALENDAR_FROM_DATE_NATIVE)       ! CONVERT DATE FROM YYYY-MM-DD FORMAT TO NATIVE FORMAT - USED TO FIND PAY CALENDAR ENTRIES
        DO CONVERT-FROM-DTU-DATE ($PAY_CALENDAR_THRU_DATE, $PAY_CALENDAR_THRU_DATE_NATIVE)       ! CONVERT DATE FROM YYYY-MM-DD FORMAT TO NATIVE FORMAT - USED TO FIND PAY CALENDAR ENTRIES
        LET $WHERE_01 = 'WHERE PAY_CAL_01.PAY_END_DT BETWEEN  ' || '''' || $PAY_CALENDAR_FROM_DATE_NATIVE || '''' || ' AND ' || ''''  || $PAY_CALENDAR_THRU_DATE_NATIVE || ''''
        LET $WHERE_02 = 'WHERE PAY_CAL_02.PAY_END_DT BETWEEN  ' || '''' || $PAY_CALENDAR_FROM_DATE_NATIVE || '''' || ' AND ' || ''''  || $PAY_CALENDAR_THRU_DATE_NATIVE || ''''
        LET $WHERE_03 = 'WHERE PAY_CAL_03.PAY_END_DT BETWEEN  ' || '''' || $PAY_CALENDAR_FROM_DATE_NATIVE || '''' || ' AND ' || ''''  || $PAY_CALENDAR_THRU_DATE_NATIVE || ''''
	LET $WHERE_04 = 'WHERE PAY_CHK_CHK.PAY_END_DT BETWEEN ' || '''' || $PAY_CALENDAR_FROM_DATE_NATIVE || '''' || ' AND ' || ''''  || $PAY_CALENDAR_THRU_DATE_NATIVE || ''''

    END-IF
END-IF

SHOW 'TXWV8001 : $WHERE = ' $WHERE_01

END-PROCEDURE GET-RUN-PARAMETERS-FROM-OPERATOR

!***********************************************************************
!
! PROCEDURE : GET-RUN-PARAMETERS-FROM-PROCESS-SCHEDULER
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE RUN CONTROL
!             PARAMETERS FROM PROCESS SCHEDULER
!
!***********************************************************************

BEGIN-PROCEDURE GET-RUN-PARAMETERS-FROM-PROCESS-SCHEDULER
 show 'GET-RUN-PARAMETERS-FROM-PROCESS-SCHEDULER'
LET $RUNID = ''

BEGIN-SELECT
TTR.EMPLID
TTR.RUN_ID

    LET $PRCS_EMPLID = &TTR.EMPLID
    LET $RUNID = RTRIM(&TTR.RUN_ID,' ')
    ! show '$PRCS_EMPLID '   $PRCS_EMPLID
    ! show '$RUNID        '  $RUNID
       do Get-Current-Pay-Cal
       let $TTR.FROM_DT = $curr_pay_begin_dt
       let $TTR.THRU_DT = $curr_pay_end_dt
   !    show '$TTR.FROM_DT  2 ' $TTR.FROM_DT 
	 !    show '$TTR.THRU_DT 2 ' $TTR.THRU_DT 

    
    DO CONVERT-TO-DTU-DATE ($TTR.FROM_DT, $PAY_CALENDAR_FROM_DATE)             ! CONVERT DATE FROM NATIVE FORMAT TO YYYY-MM-DD FORMAT
    DO CONVERT-TO-DTU-DATE ($TTR.THRU_DT, $PAY_CALENDAR_THRU_DATE)             ! CONVERT DATE FROM NATIVE FORMAT TO YYYY-MM-DD FORMAT
    !show '$TTR.FROM_DT  3 ' $TTR.FROM_DT 
	  !show '$TTR.THRU_DT 3 ' $TTR.THRU_DT 
   
    LET $RUNID = RTRIM(&TTR.RUN_ID,' ')
    IF &TI.GEX_TALX_PGM_TYP = 'R'	! IF PROGRAM RUN TYPE SAYS RUN BASED ON RUN ID
        UPPERCASE $RUNID
        LET $WHERE_01 = 'WHERE PAY_CAL_01.RUN_ID = ''' || $RUNID  || ''''
        LET $WHERE_02 = 'WHERE PAY_CAL_02.RUN_ID = ''' || $RUNID  || ''''
        LET $WHERE_03 = 'WHERE PAY_CAL_03.RUN_ID = ''' || $RUNID  || ''''
    ELSE
      !  IF &TI.GEX_TALX_CD_PED = 'C'	
      !      LET $WHERE_01 = 'WHERE PAY_CAL_01.CHECK_DT BETWEEN '''   || $TTR.FROM_DT || ''' AND ''' || $TTR.THRU_DT || ''''
      !      LET $WHERE_02 = 'WHERE PAY_CAL_02.CHECK_DT BETWEEN '''   || $TTR.FROM_DT || ''' AND ''' || $TTR.THRU_DT || ''''
      !      LET $WHERE_03 = 'WHERE PAY_CAL_03.CHECK_DT BETWEEN '''   || $TTR.FROM_DT || ''' AND ''' || $TTR.THRU_DT || ''''
      !      LET $WHERE_04 = 'WHERE PAY_CHK_CHK.CHECK_DT BETWEEN '''   || $TTR.FROM_DT || ''' AND ''' || $TTR.THRU_DT || ''''
      !  ELSE
            LET $WHERE_01 = 'WHERE PAY_CAL_01.PAY_END_DT BETWEEN ''' || $TTR.FROM_DT || ''' AND ''' || $TTR.THRU_DT || ''''
            LET $WHERE_02 = 'WHERE PAY_CAL_02.PAY_END_DT BETWEEN ''' || $TTR.FROM_DT || ''' AND ''' || $TTR.THRU_DT || ''''
            LET $WHERE_03 = 'WHERE PAY_CAL_03.PAY_END_DT BETWEEN ''' || $TTR.FROM_DT || ''' AND ''' || $TTR.THRU_DT || ''''
            LET $WHERE_04 = 'WHERE PAY_CHK_CHK.PAY_END_DT BETWEEN '''   || $TTR.FROM_DT || ''' AND ''' || $TTR.THRU_DT || ''''
      !  END-IF
    END-IF
    
	DO EDIT-CALENDAR
    
	DO LOAD-EARN-TYPE-ARRAY

	DO LOAD-COMPANY-ARRAY

	DO LOAD-TERM-CD-ARRAY

	DO LOAD-PAYFREQUENCY-ARRAY 

	DO PROCESS-PAY-CALENDAR

	DO PROCESS-EMPLOYEE-CHANGES
        
FROM PS_GEX_HR675_RNCTL TTR		
WHERE TTR.OPRID       = $PRCS_OPRID
AND   TTR.RUN_CNTL_ID = $PRCS_RUN_CNTL_ID
END-SELECT

SHOW '*********************************************************************************************************************************'
SHOW 'TXWV8001 : PARAMETERS FROM RUN CONTROL'
SHOW 'TXWV8001 : $PRCS_OPRID       = ' $PRCS_OPRID
SHOW 'TXWV8001 : $PRCS_RUN_CNTL_ID = ' $PRCS_RUN_CNTL_ID
SHOW 'TXWV8001 : $RUNID            = ' $RUNID
SHOW 'TXWV8001 : FROM DATE         = ' $PAY_CALENDAR_FROM_DATE
SHOW 'TXWV8001 : THRU DATE         = ' $PAY_CALENDAR_THRU_DATE
SHOW 'TXWV8001 : $WHERE            = ' $WHERE_01
SHOW '*********************************************************************************************************************************'

END-PROCEDURE GET-RUN-PARAMETERS-FROM-PROCESS-SCHEDULER

!***********************************************************************
Begin-Procedure Get-Current-Pay-Cal
!***********************************************************************
#debug9 Show 'Get-Current-Pay-Cal'
 
Begin-Select

Max(pay_begin_dt) &curr_pay_begin_dt
Max(pay_end_dt)   &curr_pay_end_dt


  let $curr_pay_begin_dt = &curr_pay_begin_dt
  let $curr_pay_end_dt   = &curr_pay_end_dt

  If Rtrim($curr_pay_end_dt,' ') = ''
    Show 'No confirmed pay period found in calendar'
    Stop
  End-If

From   ps_pay_calendar
Where  RUN_ID = $RUNID
!pay_end_dt         =
!      (Select Max(pay_end_dt)
!       From   ps_pay_calendar
!       Where  pay_end_dt <= $AsOfToday
!       And    pay_confirm_run = 'Y')
And    pay_confirm_run = 'Y'
End-Select
End-Procedure

!************************************************************************
!
! PROCEDURE : EDIT-CALENDAR
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO DETERMINE IF THERE
!             ARE ANY VALID CALENDAR ENTRIES TO PROCESS PRIOR TO
!             OPENING THE OUTPUT FILE
!
!************************************************************************

BEGIN-PROCEDURE EDIT-CALENDAR

LET $RUNID_FOUND = 'N'

BEGIN-SELECT
'Y'
    LET $RUNID_FOUND = 'Y'
FROM PS_PAY_CALENDAR PAY_CAL_01
[$WHERE_01]
AND   PAY_CAL_01.PAY_CONFIRM_RUN = 'Y'
END-SELECT

IF $RUNID_FOUND = 'N'
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : NO VALID CALENDAR ENTRIES FOUND FOR SUPPLIED RUN PARAMETERS'
    SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
    SHOW '*********************************************************************************************************************************'
    STOP
END-IF

BEGIN-SELECT
MAX(PAY_CAL_02.PAY_END_DT) &PAY_CAL_02.PAY_END_DT
MAX(PAY_CAL_02.CHECK_DT)   &PAY_CAL_02.CHECK_DT
    IF &TI.GEX_TALX_CD_PED = 'C'			   ! - IF OPTION SET TO USE CHECK DATE AS "AS OF DATE"
        LET $TALX_AS_OF_DATE_NATIVE = &PAY_CAL_02.CHECK_DT                     ! USE CHECK DATE FOR "AS OF DATE"
    ELSE
        LET $TALX_AS_OF_DATE_NATIVE = &PAY_CAL_02.PAY_END_DT                   ! USE PAY END DATE FOR "AS OF DATE"
    END-IF
FROM PS_PAY_CALENDAR PAY_CAL_02
[$WHERE_02]
END-SELECT

!LET $TALX_AS_OF_DATE_NATIVE = '10-may-2008'  !hardcode the payenddt
 
DO CONVERT-TO-DTU-DATE ($TALX_AS_OF_DATE_NATIVE, $TALX_AS_OF_DATE_YYYY_MM_DD)  ! CONVERT DATE FROM NATIVE FORMAT TO YYYY-MM-DD FORMAT

LET $TALX_AS_OF_DATE  = SUBSTR($TALX_AS_OF_DATE_YYYY_MM_DD, 1,4) ||            ! THIS DATE USED AS "AS OF" DATE IN OUTPUT FILE
                        SUBSTR($TALX_AS_OF_DATE_YYYY_MM_DD, 6,2) ||
                        SUBSTR($TALX_AS_OF_DATE_YYYY_MM_DD, 9,2)


DO CONVERT-TO-DTU-DATE ($TALX_AS_OF_DATE_NATIVE, $FROMDATE)                    ! CONVERT DATE FROM NATIVE FORMAT TO YYYY-MM-DD FORMAT

DO DTU-PARSE-DATE ($FROMDATE, #DTU_YR, #DTU_MO, #DTU_DA)                       ! BREAK UP DATE INTO DAY,MONTH AND YEAR

LET #CURR_CAL_YEAR  = #DTU_YR
LET #CURR_CAL_MONTH = #DTU_MO
LET $CURR_CAL_YEAR  = EDIT(#CURR_CAL_YEAR,'9999')

LET #LAST_CAL_YEAR  = #DTU_YR - 1
LET $LAST_CAL_YEAR  = EDIT(#LAST_CAL_YEAR,'9999')

LET #PREV_CAL_YEAR  = #DTU_YR - 2
LET $PREV_CAL_YEAR  = EDIT(#PREV_CAL_YEAR,'9999')

LET #DTU_DA         = '01'                                                     ! SET DAY TO THE 1ST
LET #DTU_MO         = '01'                                                     ! SET MONTH TO JANUARY
!LET #DTU_YR         = #PREV_CAL_YEAR             ! THREE YEARS AGO
LET #DTU_YR         = #CURR_CAL_YEAR                                           ! current year

DO DTU-FORMAT-DATE (#DTU_YR, #DTU_MO, #DTU_DA, $FROMDATE)                      ! FORMAT DATE INTO YYYY-MM-DD FORMAT

Let $FROMDATE_YMD = edit(#DTU_YR,'9999') || edit(#DTU_MO,'09') || edit(#DTU_DA,'09')

DO CONVERT-FROM-DTU-DATE ($FROMDATE, $FROMDATE)                                ! CONVERT DATE FROM YYYY-MM-DD FORMAT TO NATIVE FORMAT - $FROMDATE USED TO FIND TERMS THIS YEAR

!show '$FROMDATE ' $FROMDATE
END-PROCEDURE EDIT-CALENDAR

!************************************************************************
!
! PROCEDURE : OPEN-FILES
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO OPEN THE OUTPUT FILE

!************************************************************************

BEGIN-PROCEDURE OPEN-FILES

!IF &TI.GEX_TALX_PGM_TYP = 'D'		! IF BY DATE RANGE, PUT THAT IN FILE NAME
!    LET $FILE_PARM = $PAY_CALENDAR_FROM_DATE || '_' || $PAY_CALENDAR_THRU_DATE
!ELSE
!    LET $FILE_PARM = RTRIM($RUNID,' ')                                         ! IF BY RUN ID, PUT THAT IN FILE NAME
!END-IF
 !let $PAY_CALENDAR_FROM_DATE='2008-05-10' !hardcode the date
 !let $PAY_CALENDAR_THRU_DATE='2008-05-04' !hardcode the date
 LET $FILE_PARM = $PAY_CALENDAR_FROM_DATE || '_' || $PAY_CALENDAR_THRU_DATE 
 Let $FILE_1_FILENAME  = '{outfile}' || Lower($ReportID) || '.dat'
 Let $FILE_10_FILENAME = '{outfile}' || Lower($ReportID) || '.da2'
 
 !Let $FILE_1_FILENAME  = 'c:\temp\' || Lower($ReportID) || '.dat'
 !Let $FILE_10_FILENAME = 'c:\temp\' || Lower($ReportID) || '.da2'

OPEN $FILE_1_FILENAME AS 1 FOR-WRITING RECORD=2254:FIXED STATUS=#FILE_1_STATUS
OPEN $FILE_10_FILENAME AS 10 FOR-WRITING RECORD=581:FIXED STATUS=#FILE_10_STATUS


IF #FILE_1_STATUS <> 0
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : UNABLE TO OPEN TWN PAYROLL FILE #1'
    SHOW 'TXWV8001 : FILE NAME = ' $FILE_1_FILENAME
    SHOW 'TXWV8001 : PROCESSING TERMINATED'
    SHOW '*********************************************************************************************************************************'
    STOP
ELSE
    SHOW 'TXWV8001 : FILE # 1 NAME = ' $FILE_1_FILENAME ' OPENED'
END-IF


IF #FILE_10_STATUS <> 0
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : UNABLE TO OPEN TWN USERID FILE #10'
    SHOW 'TXWV8001 : FILE NAME = ' $FILE_10_FILENAME
    SHOW 'TXWV8001 : PROCESSING TERMINATED'
    SHOW '*********************************************************************************************************************************'
    STOP
ELSE
    SHOW 'TXWV8001 : FILE # 10 NAME = ' $FILE_10_FILENAME ' OPENED'
END-IF


IF &TI.GEX_TALX_PY_OR_BTH = 'B'			 
    IF &TI.GEX_TALX_SEP_COMB = 'S'		
        LET $FILE_2_FILENAME = '{FILEPREFIX}'     ||                           ! DEFINED IN SETENV.SQC 
                               'TALX_TWN'         ||
                               '_'                || 
                               $FILE_PARM         || 
                               '_BENEFITS'        ||  
                               '{FILESUFFIX}'                                  ! DEFINED IN SETENV.SQC 
        OPEN $FILE_2_FILENAME AS 2 FOR-WRITING RECORD=1999:FIXED STATUS=#FILE_2_STATUS
        IF #FILE_2_STATUS <> 0
            SHOW '*********************************************************************************************************************************'
            SHOW 'TXWV8001 : UNABLE TO TWN BENEFITS FILE #2'
            SHOW 'TXWV8001 : FILE NAME = ' $FILE_2_FILENAME
            SHOW 'TXWV8001 : PROCESSING TERMINATED'
            SHOW '*********************************************************************************************************************************'
            STOP
        ELSE
            SHOW 'TXWV8001 : FILE # 2 NAME = ' $FILE_2_FILENAME ' OPENED'
        END-IF
        LET #BENEFITS_FILE_NUMBER = 2
    ELSE
        LET #BENEFITS_FILE_NUMBER = 1
    END-IF
END-IF

SHOW '*********************************************************************************************************************************'

END-PROCEDURE OPEN-FILES

!***********************************************************************
!
! PROCEDURE : LOAD-EARN-TYPE-ARRAY
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO LOAD THE EARNINGS
!             CODES ANS TALX EARNINGS TYPE FROM THE TABLE INTO AN 
!             ARRAY TO SAVE ALL THE IO'S
!
!***********************************************************************

BEGIN-PROCEDURE LOAD-EARN-TYPE-ARRAY

LET #EARN_CODE_COUNT_MAX = 0

BEGIN-SELECT
TET.ERNCD
TET.GEX_TALX_EARN_TYPE			
    LET #EARN_CODE_COUNT_MAX = #EARN_CODE_COUNT_MAX + 1
    IF #EARN_CODE_COUNT_MAX > 1000
        SHOW '*********************************************************************************************************************************'
        SHOW 'TXWV8001 : EARN_TYPE_ARRAY IS TOO SMALL - PLEASE INCREASE SIZE'
        SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
        SHOW '*********************************************************************************************************************************'
        DO PERFORM-ROLLBACK
        STOP
    END-IF
    PUT &TET.ERNCD          INTO EARN_TYPE_ARRAY(#EARN_CODE_COUNT_MAX) EARN_TYPE_ARRAY_ERNCD
    PUT &TET.GEX_TALX_EARN_TYPE INTO EARN_TYPE_ARRAY(#EARN_CODE_COUNT_MAX) EARN_TYPE_ARRAY_EARN_TYPE
FROM PS_GEX_TALX_ERNTYP TET		
END-SELECT

END-PROCEDURE LOAD-EARN-TYPE-ARRAY

!***********************************************************************
!
! PROCEDURE : LOAD-COMPANY-ARRAY
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO LOAD THE P/S COMPANIES
!             AND THE TALX CLIENT ID'S THEY MAP TO INTO AN ARRAY
!             TO SAVE IO's
!
!***********************************************************************

BEGIN-PROCEDURE LOAD-COMPANY-ARRAY

LET #COMPANY_COUNT_MAX = 0

BEGIN-SELECT
CT.COMPANY
CT.FEDERAL_EIN
CT.SETID_LOCATION
CT.DEFAULT_SETID
    LET #COMPANY_COUNT_MAX = #COMPANY_COUNT_MAX + 1
    IF #COMPANY_COUNT_MAX > 1000
        SHOW '*********************************************************************************************************************************'
        SHOW 'TXWV8001 : COMPANY_ARRAY IS TOO SMALL (1000) - PLEASE INCREASE SIZE'
        SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
        SHOW '*********************************************************************************************************************************'
        STOP
    END-IF
    LET $COMPANY_ARRAY_COMPANY = RTRIM(&CT.COMPANY,' ')
    PUT $COMPANY_ARRAY_COMPANY INTO COMPANY_ARRAY (#COMPANY_COUNT_MAX) COMPANY_ARRAY_COMPANY
    PUT &CT.FEDERAL_EIN        INTO COMPANY_ARRAY (#COMPANY_COUNT_MAX) COMPANY_ARRAY_FEDERAL_EIN
    PUT &CT.SETID_LOCATION     INTO COMPANY_ARRAY (#COMPANY_COUNT_MAX) COMPANY_ARRAY_SETID_LOCATION
    PUT &CT.DEFAULT_SETID      INTO COMPANY_ARRAY (#COMPANY_COUNT_MAX) COMPANY_ARRAY_DEFAULT_SETID
FROM PS_COMPANY_TBL CT
WHERE CT.EFFDT = (SELECT MAX(CT1.EFFDT)   
                  FROM PS_COMPANY_TBL CT1
                  WHERE CT1.COMPANY  = CT.COMPANY
                  AND   CT1.EFFDT   <= $TALX_AS_OF_DATE_NATIVE)
ORDER BY 1
END-SELECT

END-PROCEDURE LOAD-COMPANY-ARRAY

!***********************************************************************
!
! PROCEDURE : LOAD-TERM-CD-ARRAY
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO LOAD THE P/S COMPANIES
!             AND THE TALX CLIENT ID'S THEY MAP TO INTO AN ARRAY
!             TO SAVE IO's
!
!***********************************************************************

BEGIN-PROCEDURE LOAD-TERM-CD-ARRAY

LET #TERM_CD_COUNT_MAX = 0

BEGIN-SELECT
TTC.ACTION
TTC.ACTION_REASON
TTC.GEX_TALX_TERM_CD		
    LET #TERM_CD_COUNT_MAX = #TERM_CD_COUNT_MAX + 1
    IF #TERM_CD_COUNT_MAX > 1000
        SHOW '*********************************************************************************************************************************'
        SHOW 'TXWV8001 : TERM_CD_ARRAY IS TOO SMALL - PLEASE INCREASE SIZE'
        SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
        SHOW '*********************************************************************************************************************************'
        DO PERFORM-ROLLBACK
        STOP
    END-IF
    PUT &TTC.ACTION        INTO TERM_CD_ARRAY(#TERM_CD_COUNT_MAX) TERM_CD_ARRAY_ACTION
    PUT &TTC.ACTION_REASON INTO TERM_CD_ARRAY(#TERM_CD_COUNT_MAX) TERM_CD_ARRAY_ACTION_REASON
    PUT &TTC.GEX_TALX_TERM_CD  INTO TERM_CD_ARRAY(#TERM_CD_COUNT_MAX) TERM_CD_ARRAY_TALX_TERM_CD
FROM PS_GEX_TALX_TRM_CD TTC		
END-SELECT

END-PROCEDURE LOAD-TERM-CD-ARRAY

!***********************************************************************       
!                                                                              
! PROCEDURE : LOAD-PAYFREQUENCY-ARRAY                                         
!                                                                             
! FUNCTION  : LOAD THE P/S PAY FREQUENCY CODES INTO AN ARRAY TO SAVE IO's     
!                                                                              
!***********************************************************************       

BEGIN-PROCEDURE LOAD-PAYFREQUENCY-ARRAY

LET #FREQUENCY_COUNT_MAX = 0

BEGIN-SELECT
PF.COMPANY
PF.PAYGROUP
PF.PAY_FREQUENCY
    LET #FREQUENCY_COUNT_MAX = #FREQUENCY_COUNT_MAX + 1
    IF  #FREQUENCY_COUNT_MAX > 1000
        SHOW '*********************************************************************************************************************************'
        SHOW 'TXWV7501 : FREQUENCY_ARRAY IS TOO SMALL (1000) - PLEASE INCREASE SIZE'
        SHOW 'TXWV7501 : PROCESSING WILL NOW TERMINATE'
        SHOW '*********************************************************************************************************************************'
        STOP
    END-IF
    LET $FREQUENCY_ARRAY_COMPANY   = RTRIM(&PF.COMPANY,' ')
    LET $FREQUENCY_ARRAY_PAYGROUP  = RTRIM(&PF.PAYGROUP,' ')
    LET $FREQUENCY_ARRAY_FREQUENCY = RTRIM(&PF.PAY_FREQUENCY,' ')
    PUT $FREQUENCY_ARRAY_COMPANY   INTO FREQUENCY_ARRAY (#FREQUENCY_COUNT_MAX) FREQUENCY_ARRAY_COMPANY
    PUT $FREQUENCY_ARRAY_PAYGROUP  INTO FREQUENCY_ARRAY (#FREQUENCY_COUNT_MAX) FREQUENCY_ARRAY_PAYGROUP
    PUT $FREQUENCY_ARRAY_FREQUENCY INTO FREQUENCY_ARRAY (#FREQUENCY_COUNT_MAX) FREQUENCY_ARRAY_PAY_FREQUENCY
FROM PS_PAYGROUP_TBL PF
WHERE PF.EFF_STATUS = 'A'
  AND PF.EFFDT = (SELECT MAX(PF1.EFFDT)   
                  FROM PS_PAYGROUP_TBL PF1
                  WHERE PF1.COMPANY    = PF.COMPANY
                  AND   PF1.PAYGROUP   = PF.PAYGROUP
                  AND   PF1.EFFDT     <= $TALX_AS_OF_DATE_NATIVE)
ORDER BY PF.COMPANY,PF.PAYGROUP
END-SELECT

END-PROCEDURE LOAD-PAYFREQUENCY-ARRAY                                          

!************************************************************************
!
! PROCEDURE : PROCESS-PAY-CALENDAR
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET PROCESS ALL OF THE
!             PAY CHECK RECORDS FOR A PAY CALENDAR ENTRY.
!
! NOTE      : TWN SYSTEM DOES NOT RECOGNIZE "CHECK #".  THEREFORE THE
!             PROGRAM "CONSOLIDATES" MULTIPLE CHECKS FOR AN
!             EMPLOYEE INTO 1 TWN RECORD BASED UPON :
!
!             1) TALX CLIENT ID
!             2) COMPANY
!             3) EMPLID
!             4) CHECK DATE
!             5) PAY_END_DT
!
!************************************************************************

BEGIN-PROCEDURE PROCESS-PAY-CALENDAR

LET $SAVE_EMPLID = ''

BEGIN-SELECT
TALX_CO_03.GEX_TALX_CLIENT_ID          () ON-BREAK PRINT=NEVER 
                                          LEVEL=1 
					  BEFORE=BEFORE-CLIENT-BREAK
					  AFTER=AFTER-CLIENT-BREAK

PAY_CAL_03.COMPANY                     () ON-BREAK PRINT=NEVER
                                          LEVEL=2
					  BEFORE=BEFORE-COMPANY-BREAK
					  AFTER=AFTER-COMPANY-BREAK

PAY_CHK_03.EMPLID||PAY_CHK_03.EMPL_RCD () ON-BREAK PRINT=NEVER
                                          LEVEL=3
					  BEFORE=BEFORE-EMPLID-BREAK
					  AFTER=AFTER-EMPLID-BREAK

PAY_CAL_03.CHECK_DT                    () ON-BREAK PRINT=NEVER
                                          LEVEL=4 
					  BEFORE=BEFORE-CHECK-DATE-BREAK
					  AFTER=AFTER-CHECK-DATE-BREAK

PAY_CAL_03.PAY_END_DT                  () ON-BREAK PRINT=NEVER 
                                          LEVEL=5
					  BEFORE=BEFORE-PAY-END-DT-BREAK
					  AFTER=AFTER-PAY-END-DT-BREAK

PAY_CAL_03.PAYGROUP
PAY_CAL_03.PAY_BEGIN_DT
PAY_CHK_03.OFF_CYCLE
PAY_CHK_03.PAGE_NUM
PAY_CHK_03.LINE_NUM
PAY_CHK_03.SEPCHK
PAY_CHK_03.TOTAL_GROSS
PAY_CHK_03.NET_PAY
PAY_CHK_03.EMPLID			
PAY_CHK_03.EMPL_RCD			
PAY_CAL_BAL_ID_03.BALANCE_YEAR
PAY_CAL_BAL_ID_03.BALANCE_PERIOD
TALX_CO_03.GEX_TALX_DATA_SRC		
   ! SHOW 'TXWV8001 : PROCESSING CHECK FOR CLIENT ' &TALX_CO_03.GEX_TALX_CLIENT_ID ' COMPANY ' &PAY_CAL_03.COMPANY ' EMPLID ' &PAY_CHK_03.EMPLID ' empl_rcd ' &pay_chk_03.empl_rcd ' CHECK DATE ' $TALX_CHECK_DT ' PAY END DT ' &PAY_CAL_03.PAY_END_DT ' GROSS = ' &PAY_CHK_03.TOTAL_GROSS EDIT 999,999.99
    DO PROCESS-PAYCHECK
FROM PS_PAY_CALENDAR   PAY_CAL_03,   
     PS_PAY_CHECK      PAY_CHK_03,
     PS_PAY_CAL_BAL_ID PAY_CAL_BAL_ID_03,
     PS_GEX_TALX_CMPY   TALX_CO_03		
[$WHERE_03]
AND   PAY_CHK_03.COMPANY           = PAY_CAL_03.COMPANY
AND   PAY_CHK_03.PAYGROUP          = PAY_CAL_03.PAYGROUP
AND   PAY_CHK_03.PAY_END_DT        = PAY_CAL_03.PAY_END_DT
AND   PAY_CHK_03.PAYCHECK_NBR      <>  0 
AND   PAY_CHK_03.PAYCHECK_STATUS   =  'F'
AND   PAY_CHK_03.PAYCHECK_OPTION   <> 'R'
AND   PAY_CAL_BAL_ID_03.COMPANY    = PAY_CAL_03.COMPANY
AND   PAY_CAL_BAL_ID_03.PAYGROUP   = PAY_CAL_03.PAYGROUP
AND   PAY_CAL_BAL_ID_03.PAY_END_DT = PAY_CAL_03.PAY_END_DT
AND   PAY_CAL_BAL_ID_03.BALANCE_ID = 'CY'
AND   TALX_CO_03.COMPANY           = PAY_CAL_03.COMPANY
AND   PAY_CHK_03.EMPLID            = $PRCS_EMPLID
ORDER BY TALX_CO_03.GEX_TALX_CLIENT_ID,			
         PAY_CAL_03.COMPANY,
         PAY_CHK_03.EMPLID,
         PAY_CAL_03.CHECK_DT,
         PAY_CAL_03.PAY_END_DT
END-SELECT

!SHOW '*********************************************************************************************************************************'
!SHOW 'TXWV8001 : TOTAL NUMBER OF EMPLOYEE PAYCHECK RECORDS PROCESSED                      = ' #PAYCHECK_COUNT EDIT 9,999,999
!SHOW 'TXWV8001 : NUMBER OF NEW EMPLOYEES INSERTED INTO THE TALX TABLE ON THIS PAYROLL RUN = ' #INSERT_COUNT EDIT 9,999,999
!SHOW 'TXWV8001 : NUMBER OF EMPLOYEES UPDATED ON THE TALX TABLE FOR THIS PAYROLL RUN       = ' #UPDATE_COUNT EDIT 9,999,999

END-PROCEDURE PROCESS-PAY-CALENDAR

!************************************************************************
!
! PROCEDURE : BEFORE-CLIENT-BREAK
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO 
!
!***********************************************************************

BEGIN-PROCEDURE BEFORE-CLIENT-BREAK

!SHOW 'BEFORE-CLIENT-BREAK ' &TALX_CO_03.GEX_TALX_CLIENT_ID


LET $GEX_TALX_CLIENT_ID      = RTRIM(&TALX_CO_03.GEX_TALX_CLIENT_ID,' ')
LET $TALX_TWN_DATA_SOURCE_ID = RTRIM(&TALX_CO_03.GEX_TALX_DATA_SRC,' ')


END-PROCEDURE BEFORE-CLIENT-BREAK

!************************************************************************
!
! PROCEDURE : AFTER-CLIENT-BREAK
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO 
!
!***********************************************************************

BEGIN-PROCEDURE AFTER-CLIENT-BREAK

!SHOW 'AFTER CLIENT BREAK ' &TALX_CO_03.GEX_TALX_CLIENT_ID

END-PROCEDURE AFTER-CLIENT-BREAK

!************************************************************************
!
! PROCEDURE : BEFORE-COMPANY-BREAK
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO 
!
!***********************************************************************

BEGIN-PROCEDURE BEFORE-COMPANY-BREAK

!SHOW 'BEFORE COMPANY BREAK ' &PAY_CAL_03.COMPANY

LET $SAVE_COMPANY = RTRIM(&PAY_CAL_03.COMPANY,' ')

END-PROCEDURE BEFORE-COMPANY-BREAK

!************************************************************************
!
! PROCEDURE : AFTER-COMPANY-BREAK
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO 
!
!***********************************************************************

BEGIN-PROCEDURE AFTER-COMPANY-BREAK

!SHOW 'AFTER COMPANY BREAK ' &PAY_CAL_03.COMPANY

END-PROCEDURE AFTER-COMPANY-BREAK

!************************************************************************
!
! PROCEDURE : BEFORE-EMPLID-BREAK
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO 
!
!***********************************************************************

BEGIN-PROCEDURE BEFORE-EMPLID-BREAK

!SHOW 'BEFORE EMPLID BREAK ' &PAY_CHK_03.EMPLID

LET $SAVE_EMPLID   = RTRIM(&PAY_CHK_03.EMPLID,' ')
LET $EMPL_PAYGROUP = RTRIM(&PAY_CAL_03.PAYGROUP,' ')		
LET #SAVE_EMPL_RCD = &PAY_CHK_03.EMPL_RCD			

END-PROCEDURE BEFORE-EMPLID-BREAK

!************************************************************************
!
! PROCEDURE : AFTER-EMPLID-BREAK
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO 
!
!***********************************************************************

BEGIN-PROCEDURE AFTER-EMPLID-BREAK

!SHOW 'AFTER EMPLID BREAK ' &PAY_CHK_03.EMPLID

END-PROCEDURE AFTER-EMPLID-BREAK

!************************************************************************
!
! PROCEDURE : BEFORE-CHECK-DATE-BREAK
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO 
!
! NOTE      : PAY PAY BEGIN DATE IS MANAGED AT THE CHECK DATE LEVEL
!
!***********************************************************************

BEGIN-PROCEDURE BEFORE-CHECK-DATE-BREAK

!SHOW 'BEFORE CHECK DATE BREAK ' &PAY_CAL_03.CHECK_DT

LET $TALX_PAY_BEGIN_DT = EDIT(&PAY_CAL_03.PAY_BEGIN_DT,'YYYYMMDD')
LET $TALX_CHECK_DT     = EDIT(&PAY_CAL_03.CHECK_DT,'YYYYMMDD')

END-PROCEDURE BEFORE-CHECK-DATE-BREAK

!************************************************************************
!
! PROCEDURE : AFTER-CHECK-DATE-BREAK
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO 
!
!***********************************************************************

BEGIN-PROCEDURE AFTER-CHECK-DATE-BREAK

!SHOW 'AFTER CHECK DATE BREAK ' &PAY_CAL_03.CHECK_DT

END-PROCEDURE AFTER-CHECK-DATE-BREAK

!************************************************************************
!
! PROCEDURE : BEFORE-PAY-END-DT-BREAK
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO 
!
!***********************************************************************

BEGIN-PROCEDURE BEFORE-PAY-END-DT-BREAK

!SHOW 'BEFORE PAY END DT BREAK ' &PAY_CAL_03.PAY_END_DT

LET $TALX_PAY_END_DT = EDIT(&PAY_CAL_03.PAY_END_DT,'YYYYMMDD')

END-PROCEDURE BEFORE-PAY-END-DT-BREAK

!************************************************************************
!
! PROCEDURE : AFTER-PAY-END-DT-BREAK
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO 
!
!***********************************************************************

BEGIN-PROCEDURE AFTER-PAY-END-DT-BREAK

!SHOW 'AFTER PAY END DT BREAK ' &PAY_CAL_03.PAY_END_DT

DO PROCESS-EMPLOYEE

DO RESET-EMPLOYEE                                                              ! RESET ALL OF THE "CHECK DATE" SPECIFIC DATA

END-PROCEDURE AFTER-PAY-END-DT-BREAK

!************************************************************************
!
! PROCEDURE : PROCESS-PAYCHECK
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET ALL OF THE DATA
!             FOR THE SPECIFIC CHEC
!
!***********************************************************************

BEGIN-PROCEDURE PROCESS-PAYCHECK

LET #SAVE_TOTAL_GROSS = #SAVE_TOTAL_GROSS + &PAY_CHK_03.TOTAL_GROSS
LET #SAVE_NET_PAY     = #SAVE_NET_PAY     + &PAY_CHK_03.NET_PAY

DO GET-TAXES                                                                   ! GET GET THE CHECK TAX DATA

DO GET-DEDUCTIONS                                                              ! GET BEFORE & AFTER TAX DEDUCTIONS TOTALS FOR EACH CHECK

DO GET-REG-AND-OT-HOURS                                                        ! GET THE CHECK REGULAR AND OVERTIME HOURS

DO GET-OTHER-PAY-AND-HOURS                                                     ! GET THE CHECK OTHER PAY AND HOURS

DO GET-GARNISHMENTS                                                            ! GET CHECK GARNISHMENT DATA

LET #PAYCHECK_COUNT = #PAYCHECK_COUNT + 1

END-PROCEDURE PROCESS-PAYCHECK

!************************************************************************
!
! PROCEDURE : RESET-EMPLOYEE
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO RESET THE SPECIFIC
!             CLIENT ID/COMPANY/EMPLID/CHECK DATE/PAY END DATE FIELDS
!
!***********************************************************************

BEGIN-PROCEDURE RESET-EMPLOYEE

LET #SAVE_TOTAL_GROSS      = 0
LET #SAVE_NET_PAY          = 0

LET #TALX_TAX_FEDERAL      = 0
LET #TALX_TAX_STATE        = 0
LET #TALX_TAX_LOCAL        = 0
LET #TALX_TAX_FICA         = 0
LET #TALX_TAX_MEDICARE     = 0

LET #TALX_YTD_TAX_FEDERAL  = 0
LET #TALX_YTD_TAX_STATE    = 0
LET #TALX_YTD_TAX_LOCAL    = 0
LET #TALX_YTD_TAX_FICA     = 0
LET #TALX_YTD_TAX_MEDICARE = 0

LET #TALX_REG_HOURS        = 0
LET #TALX_OVERTIME_HOURS   = 0

LET #TALX_OTHER_PAY        = 0
LET #TALX_PENSION_INCOME   = 0
LET #TALX_OTHER_HOURS      = 0

LET #TALX_DED_AFTER        = 0
LET #TALX_DED_BEFORE       = 0
LET #TALX_MED_DED          = 0
LET #TALX_DED_OTHER        = 0
LET #TALX_DED_CAFETERIA    = 0
LET #TALX_DED_RETIREMENT   = 0

LET #TALX_GARNISHMENTS     = 0

END-PROCEDURE RESET-EMPLOYEE

!***********************************************************************
!
! PROCEDURE : PROCESS-EMPLOYEE
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET ALL OF THE
!             EMPLOYEE ONLY BASED DATA
!
!************************************************************************

BEGIN-PROCEDURE PROCESS-EMPLOYEE

!LET #TOTALEMPLOYEES           = #TOTALEMPLOYEES + 1                           

LET #TALX_CURR_YTD_REGULAR    = 0
LET #TALX_CURR_YTD_OT         = 0
LET #TALX_CURR_YTD_BONUS      = 0
LET #TALX_CURR_YTD_COMMISSION = 0
LET #TALX_CURR_YTD_OTHER      = 0
LET #TALX_CURR_YTD_TOTAL_COMP = 0

LET #TALX_PREV_YTD_REGULAR    = 0
LET #TALX_PREV_YTD_OT         = 0
LET #TALX_PREV_YTD_BONUS      = 0
LET #TALX_PREV_YTD_COMMISSION = 0
LET #TALX_PREV_YTD_OTHER      = 0
LET #TALX_PREV_YTD_TOTAL_COMP = 0

LET #TALX_LAST_YTD_REGULAR    = 0
LET #TALX_LAST_YTD_OT         = 0
LET #TALX_LAST_YTD_BONUS      = 0
LET #TALX_LAST_YTD_COMMISSION = 0
LET #TALX_LAST_YTD_OTHER      = 0
LET #TALX_LAST_YTD_TOTAL_COMP = 0

LET $EMPL_REC_FOUND           = 'N'

BEGIN-SELECT
E01.HIRE_DT
E01.SERVICE_DT
E01.TERMINATION_DT
E01.LAST_INCREASE_DT
J01.EFFDT
J01.EMPL_STATUS
J01.SETID_JOBCODE
J01.JOBCODE
J01.COMPRATE
J01.STD_HOURS
J01.COMP_FREQUENCY
J01.ACTION
J01.ACTION_REASON
J01.LOCATION
J01.CHANGE_AMT
J01.SETID_LOCATION
J01.Position_nbr			
PD01.NAME
PD01.LAST_NAME
PD01.FIRST_NAME
PD01.MIDDLE_NAME
PD01.ADDRESS1
PD01.ADDRESS2
PD01.CITY
PD01.STATE
PD01.POSTAL
PD01.BIRTHDATE
PD01.PHONE
PD01.COUNTRY
PN01.NATIONAL_ID
J01.EMPLID	
J01.EMPL_RCD
SYSDATE        			&GEXJOB_REH_ASOFDATE 	

  !Show '8888888888888888' $SAVE_EMPLID

  Let $Position_Nbr = &J01.Position_nbr			
   
   let $GEXJOB_REH_EMPLID  = &J01.EMPLID
   let #GEXJOB_REH_EMPLRCD = &J01.EMPL_RCD
   Let $GEXJOB_REH_ASOFDATE = $TALX_AS_OF_DATE_NATIVE					
   do Get-Job-Rehire-Dt
   LET $SAVE_REHIRE_DT             = EDIT($GEXJOB_REH_REHIRE_DT,'YYYYMMDD')

    LET $EMPL_REC_FOUND             = 'Y'
    LET $SAVE_HIRE_DT               = EDIT(&E01.HIRE_DT,'YYYYMMDD')

    LET $SAVE_SERVICE_DT            = EDIT(&E01.SERVICE_DT,'YYYYMMDD')
    LET $SAVE_TERMINATION_DT        = EDIT(&E01.TERMINATION_DT,'YYYYMMDD')
    LET $SAVE_TERMINATION_DT_NATIVE = &E01.TERMINATION_DT

    LET $SAVE_EFFDT                 = &J01.EFFDT
    LET $SAVE_EMPL_STATUS           = &J01.EMPL_STATUS
    LET $SAVE_SETID_JOBCODE         = &J01.SETID_JOBCODE
    LET $SAVE_JOBCODE               = &J01.JOBCODE
    LET #SAVE_COMPRATE              = &J01.COMPRATE
    LET #SAVE_STD_HOURS             = &J01.STD_HOURS
    LET $SAVE_COMP_FREQUENCY        = RTRIM(&J01.COMP_FREQUENCY,' ')
    LET $SAVE_ACTION                = &J01.ACTION
    LET $SAVE_ACTION_REASON         = &J01.ACTION_REASON
    LET $SAVE_LOCATION              = &J01.LOCATION

    LET $SAVE_SETID_LOCATION        = &J01.SETID_LOCATION
    LET $SAVE_NAME                  = &PD01.NAME
    LET $SAVE_FIRST_NAME            = &PD01.FIRST_NAME
    LET $SAVE_LAST_NAME             = &PD01.LAST_NAME
    LET $SAVE_MIDDLE_NAME           = &PD01.MIDDLE_NAME
    LET $SAVE_ADDRESS1              = &PD01.ADDRESS1
    LET $SAVE_ADDRESS2              = &PD01.ADDRESS2
    LET $SAVE_CITY                  = &PD01.CITY
    LET $SAVE_STATE                 = &PD01.STATE
    LET $SAVE_ZIP                   = &PD01.POSTAL

    LET $SAVE_ORIG_HIRE_DT          = EDIT(&E01.HIRE_DT,'YYYYMMDD')

    LET $SAVE_BIRTHDATE             = EDIT(&PD01.BIRTHDATE,'YYYYMMDD')
    LET $SAVE_PHONE                 = &PD01.PHONE
    LET $SAVE_COUNTRY               = &PD01.COUNTRY
    LET $SAVE_NATIONAL_ID           = &PN01.NATIONAL_ID
    LET $TALX_TWN_EE_PIN            = substr($SAVE_EMPLID,6,4)		

    DO IDENTIFY-MULTI-JOB-EES

    let $disclaimer_one   = ' '
    
    if $multi_job_flag = 'Y'  
       DO FIND-OTHER-INFO
    end-if

    DO GET-USERID

    DO DETERMINE-TALX-EMPL-STATUS

    Evaluate $GEX_TALX_EMPL_STS
         WHEN = 'I'
	 WHEN = 'G'
	 WHEN = 'R'
	    LET $TWN_USERID = $save_emplid
        BREAK
    End-Evaluate

    Do Get-Last-Increase-Amt		

    DO FORMAT-TALX-EE-DATA

    IF $SAVE_LAST_INCREASE_DT < $TALX_HIRE_DATE
       let $TALX_TWN_AMOUNT_OF_LAST_INCREASE = ' ' 
       let $SAVE_LAST_INCREASE_DT = ' '
    END-if

FROM PS_JOB J01,
     PS_EMPLOYMENT E01,
     PS_PERSONAL_DATA PD01,
     PS_PERS_NID PN01
WHERE J01.EMPLID            = $SAVE_EMPLID
AND   J01.EMPL_RCD          = #SAVE_EMPL_RCD	
AND   J01.EFFDT             = (SELECT MAX(J01A.EFFDT)
                               FROM PS_JOB J01A
                               WHERE J01A.EMPLID    = J01.EMPLID
                               AND   J01A.EMPL_RCD  = J01.EMPL_RCD
                               !AND   J01A.COMPANY   = $SAVE_COMPANY 
                               AND   J01A.EFFDT    <= $TALX_AS_OF_DATE_NATIVE)
AND   J01.EFFSEQ            = (SELECT MAX(J01B.EFFSEQ)
                               FROM PS_JOB J01B
                               WHERE J01B.EMPLID   = J01.EMPLID
                               AND   J01B.EMPL_RCD = J01.EMPL_RCD
                               AND   J01B.EFFDT    = J01.EFFDT)
AND   PD01.EMPLID           = J01.EMPLID
AND   E01.EMPLID            = J01.EMPLID
AND   E01.EMPL_RCD          = J01.EMPL_RCD
AND   PN01.EMPLID           = J01.EMPLID
AND   PN01.COUNTRY          = 'USA'
AND   PN01.NATIONAL_ID_TYPE = 'PR'
END-SELECT

IF $EMPL_REC_FOUND = 'N'
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : NO JOB RECORD FOUND FOR EMPLID = ' $SAVE_EMPLID
    SHOW 'TXWV8001 :                         EFFDT  = ' $TALX_AS_OF_DATE_NATIVE
    SHOW 'TXWV8001 :                       COMPANY  = ' $SAVE_COMPANY
    !SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
    SHOW '*********************************************************************************************************************************'
    !DO PERFORM-ROLLBACK
    !STOP
END-IF

DO GET-MEDICAL-COVERAGE                                                        !

DO GET-MEDICAL-DEPENDENT-COUNT                                                 !

DO GET-DENTAL-COVERAGE                                                         !

DO GET-VISION-COVERAGE                                                         !

DO GET-DEPENDENTS                                                              ! GET THE DEPENDENT DATA

DO GET-DEP-COVG-AVAIL                                                          ! SEE IF DEPENDENT COVERAGE IS AVAILABLE

LET #TALX_CHECK_HOURS = #TALX_REG_HOURS + #TALX_OVERTIME_HOURS + #TALX_OTHER_HOURS

IF #TALX_CHECK_HOURS > 9999
    LET #TALX_CHECK_HOURS = 9999
    SHOW 'TXWV8001 : HOURS ARE GREATER THAN 9999 FOR EMPLID = ' $SAVE_EMPLID ' 9999 USED (TALX MAX)'
END-IF

IF #TALX_CHECK_HOURS = 0                                                       
   LET $TALX_TWN_CHECK_HOURS      = ' '                                       
ELSE                                                                           
   LET $TALX_TWN_CHECK_HOURS      = EDIT(#TALX_CHECK_HOURS,'9999.9')
END-IF                                                                        
IF RTRIM($TALX_PAY_END_DT,' ') = '' AND RTRIM($TALX_CHECK_DT,' ') = ''        
   LET $TALX_TWN_GROSS_AMT        = ' '                                       
   LET $TALX_TWN_NET_PAY          = ' '                                       
ELSE                                                                           
   LET $TALX_TWN_GROSS_AMT        = EDIT(#SAVE_TOTAL_GROSS,'99999999.99')
   LET $TALX_TWN_NET_PAY          = EDIT(#SAVE_NET_PAY,'99999999.99')
END-IF                                                                         

LET $TALX_TWN_TAX_FEDERAL      = EDIT(#TALX_TAX_FEDERAL,'99999999.99')
LET $TALX_TWN_TAX_STATE        = EDIT(#TALX_TAX_STATE,'99999999.99')
LET $TALX_TWN_TAX_LOCAL        = EDIT(#TALX_TAX_LOCAL,'99999999.99')
LET $TALX_TWN_TAX_FICA         = EDIT(#TALX_TAX_FICA,'99999999.99')
LET $TALX_TWN_TAX_MEDICARE     = EDIT(#TALX_TAX_MEDICARE,'99999999.99')
LET $TALX_TWN_YTD_TAX_FEDERAL  = EDIT(#TALX_YTD_TAX_FEDERAL,'99999999.99')
LET $TALX_TWN_YTD_TAX_STATE    = EDIT(#TALX_YTD_TAX_STATE,'99999999.99')
LET $TALX_TWN_YTD_TAX_LOCAL    = EDIT(#TALX_YTD_TAX_LOCAL,'99999999.99')
LET $TALX_TWN_YTD_TAX_FICA     = EDIT(#TALX_YTD_TAX_FICA,'99999999.99')
LET $TALX_TWN_YTD_TAX_MEDICARE = EDIT(#TALX_YTD_TAX_MEDICARE,'99999999.99')

LET $TALX_TWN_PENSION_INCOME   = EDIT(#TALX_PENSION_INCOME,'99999999.99')
LET $TALX_TWN_OTHER_PAY        = EDIT(#TALX_OTHER_PAY,'99999999.99')
LET $TALX_TWN_GARNISHMENTS     = EDIT(#TALX_GARNISHMENTS,'99999999.99')

DO WRITE-TALX-TWN-RECORDS
DO insert-into-temp				 

DO UPDATE-TALX-TABLE                                                           ! INSERT/UPDATE EMPLOYEE IN TALX TABLE

LET #EMPLID_ARRAY_COUNT = #EMPLID_ARRAY_COUNT + 1                              ! ADD 1 TO EMPLOYEE ARRAY COUNTER

PUT $SAVE_EMPLID INTO EMPLID_ARRAY(#EMPLID_ARRAY_COUNT) EMPLID                 ! ADD EMPLID TO EMPLID'S PROCESED ARRAY

END-PROCEDURE PROCESS-EMPLOYEE

!************************************************************************
BEGIN-PROCEDURE GET-LAST-INCREASE-AMT
!************************************************************************
   let $increase_row_found='N'
   let #SAVE_CHANGE_AMT = 0
   let $SAVE_LAST_INCREASE_DT = ' '

BEGIN-Select
I.effdt
I.change_amt
  
  let $increase_row_found='Y'

  LET $SAVE_LAST_INCREASE_DT      = EDIT(&I.EFFDT,'YYYYMMDD')
  LET #SAVE_CHANGE_AMT            = &I.CHANGE_AMT

From PS_JOB I
WHERE I.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB
        WHERE I.EMPLID = EMPLID
          AND I.EMPL_RCD = EMPL_RCD
	  AND change_amt > 0
          AND EFFDT <= $TALX_AS_OF_DATE_NATIVE)
    AND I.EFFSEQ =
        (SELECT MAX(EFFSEQ) FROM PS_JOB
        WHERE I.EMPLID = EMPLID
          AND I.EMPL_RCD = EMPL_RCD
          AND I.EFFDT = EFFDT)
    AND I.EMPLID   = $SAVE_EMPLID
    AND I.EMPL_RCD = #SAVE_EMPL_RCD

END-SELECT

END-PROCEDURE GET-LAST-INCREASE-AMT

!************************************************************************
BEGIN-PROCEDURE IDENTIFY-MULTI-JOB-EES
!************************************************************************
   let $multi_job_flag='N'

BEGIN-Select

'X'
  
  let $multi_job_flag='Y'

from PS_JOB M
  WHERE M.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB
        WHERE M.EMPLID = EMPLID
          AND M.EMPL_RCD = EMPL_RCD
          AND EFFDT <= $TALX_AS_OF_DATE_NATIVE)
    AND M.EFFSEQ =
        (SELECT MAX(EFFSEQ) FROM PS_JOB
        WHERE M.EMPLID = EMPLID
          AND M.EMPL_RCD = EMPL_RCD
          AND M.EFFDT = EFFDT)
    AND M.empl_status in ('A','L','P','S')
    AND M.EMPLID   = $SAVE_EMPLID
    AND M.EMPL_RCD = #SAVE_EMPL_RCD
    AND M.EMPLID in (select MM.emplid FROM PS_JOB MM
		      WHERE MM.EFFDT =
                         (SELECT MAX(EFFDT) FROM PS_JOB
                               WHERE MM.EMPLID = EMPLID
                                 AND MM.EMPL_RCD = EMPL_RCD
                                 AND EFFDT <= $TALX_AS_OF_DATE_NATIVE)
                       AND MM.EFFSEQ =
                         (SELECT MAX(EFFSEQ) FROM PS_JOB
                               WHERE MM.EMPLID = EMPLID
                                 AND MM.EMPL_RCD = EMPL_RCD
                                 AND MM.EFFDT = EFFDT)
                       AND MM.empl_status in ('A','L','P','S')
                       group by MM.emplid
                       having count(MM.emplid) > 1)
END-SELECT

END-PROCEDURE IDENTIFY-MULTI-JOB-EES

!************************************************************************
BEGIN-PROCEDURE GET-USERID
!************************************************************************
   let $TWN_USERID = '99999999999'

BEGIN-Select
MAP.SSN
MAP.EMPLID
MAP.EMPL_RCD

   let $TWN_USERID = &MAP.EMPLID

FROM PS_GEX_EMPLID_MAPP MAP
Where MAP.ssn   = $SAVE_EMPLID
END-SELECT

END-PROCEDURE GET-USERID

!************************************************************************
BEGIN-PROCEDURE FIND-OTHER-INFO
!************************************************************************
BEGIN-Select Loops=1

OTH.EMPLID
OTH.EMPL_RCD
OTH.COMPANY
OTH2.DESCR
  
  let $disclaimer_one = '0001'

from PS_JOB OTH, 
     PS_JOBCODE_TBL OTH2
  WHERE OTH.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB
        WHERE OTH.EMPLID = EMPLID
          AND OTH.EMPL_RCD = EMPL_RCD
          AND EFFDT <= $TALX_AS_OF_DATE_NATIVE)
    AND OTH.EFFSEQ =
        (SELECT MAX(EFFSEQ) FROM PS_JOB
        WHERE OTH.EMPLID = EMPLID
          AND OTH.EMPL_RCD = EMPL_RCD
          AND OTH.EFFDT = EFFDT)
    AND OTH2.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOBCODE_TBL
        WHERE OTH2.SETID =   SETID
          AND OTH2.JOBCODE = JOBCODE
          AND EFFDT <= OTH.EFFDT)
    AND OTH.jobcode = OTH2.jobcode
    AND OTH.EMPLID   = $SAVE_EMPLID
    AND OTH.EMPL_RCD <> #SAVE_EMPL_RCD

END-SELECT

END-PROCEDURE FIND-OTHER-INFO


!************************************************************************
!
! PROCEDURE : FORMAT-TALX-EE-DATA
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO FORMAT THE TALX DATA
!             PRIOR TO WRITING IT OUT. THIS SECTION IS USED FOR BOTH
!             SELECTION CRITERIA (EMPLOYEE WHO HAVE BEEN PAID AS WELL
!             AS THOSE WHO HAVE NOT BEEN PAID)
!
!************************************************************************

BEGIN-PROCEDURE FORMAT-TALX-EE-DATA
!show 'in FORMAT-TALX-EE-DATA step'
DO GET-COMPANY-DATA                                                            ! GET DATA FROM COMPANY TABLE

DO GET-WORK-LOCATION                                                           ! GET WORK LOCATION INFORMATION

LET #LOOKUP_YEAR              = #CURR_CAL_YEAR
LET #BALANCE_PERIOD           = #CURR_CAL_MONTH

DO GET-YTD-AMTS                                                                ! USES ONLY EMPLID

LET #TALX_CURR_YTD_REGULAR    = #GROSSBASE
LET #TALXCONTROLBASE          = #TALXCONTROLBASE + #GROSSBASE
LET #TALX_CURR_YTD_OT         = #GROSSOT
LET #TALX_CURR_YTD_BONUS      = #BONUSCOMP
LET #TALX_CURR_YTD_COMMISSION = #COMMISSION
LET #TALX_CURR_YTD_OTHER      = #OTHINCOME
LET #TALX_CURR_YTD_TOTAL_COMP = #TOTALGROSS

LET #LOOKUP_YEAR              = #LAST_CAL_YEAR
LET #BALANCE_PERIOD           = '12'

DO GET-YTD-AMTS                                                                ! USES ONLY EMPLID

LET #TALX_LAST_YTD_REGULAR    = #GROSSBASE
LET #TALX_LAST_YTD_OT         = #GROSSOT
LET #TALX_LAST_YTD_BONUS      = #BONUSCOMP
LET #TALX_LAST_YTD_COMMISSION = #COMMISSION
LET #TALX_LAST_YTD_OTHER      = #OTHINCOME
LET #TALX_LAST_YTD_TOTAL_COMP = #TOTALGROSS

LET #LOOKUP_YEAR              = #PREV_CAL_YEAR
LET #BALANCE_PERIOD           = '12'

DO GET-YTD-AMTS                                                                ! USES ONLY EMPLID

LET #TALX_PREV_YTD_REGULAR    = #GROSSBASE
LET #TALX_PREV_YTD_OT         = #GROSSOT
LET #TALX_PREV_YTD_BONUS      = #BONUSCOMP
LET #TALX_PREV_YTD_COMMISSION = #COMMISSION
LET #TALX_PREV_YTD_OTHER      = #OTHINCOME
LET #TALX_PREV_YTD_TOTAL_COMP = #TOTALGROSS

LET $TWN_SSN                  = $SAVE_NATIONAL_ID

IF LENGTH($TWN_SSN) < 9
    LET $TWN_SSN = RPAD($TWN_SSN,11,' ')
END-IF

LET $TALX_BIRTHDATE           = $SAVE_BIRTHDATE

!***************************************************************
!
! NOTE : PIN IS A REQUIRED FIELD AND CANNOT BE BLANK OR NULL
!        CLIENT SPECIFIC PIN SCHEMES ARE PLACED HERE
!        
!        MAX LENGTH = 11
!        MIN LENGTH = 4
!        MUST BE NUMERIC
!        CANNOT BE 0000
!        
!        DEFAULT IS '12345'
!
!**************************************************************

LET $TALX_TWN_JOB_POSITION  = ' '

LET $SETID                  = $SAVE_SETID_JOBCODE
LET $JOBCODE                = $SAVE_JOBCODE

DO GET-JOB-TITLE                                                               ! FOUND IN GETJOBTL.SQC

  Do Get-Position-Title			 !getposnm.sqc
  	 IF $PosName = '' 
  		Let $jobtitle = $jobtitle
	 Else
 		Let $jobtitle = $PosName
	 End-if
 
IF $JOBTITLE <> ''
    LET $TALX_TWN_JOB_POSITION  = $JOBTITLE
END-IF

LET $GEX_TALX_TERM_CD    = ''	

IF $SAVE_EMPL_STATUS = 'T' OR                                                  ! TERMINATED
   $SAVE_EMPL_STATUS = 'U' OR                                                  ! TERMINATED WITH PAY
   $SAVE_EMPL_STATUS = 'V'                                                     ! TERMINATED W PENSION PAYOUT
    IF $SAVE_ACTION = 'TER' OR 
       $SAVE_ACTION = 'TWB' OR 
       $SAVE_ACTION = 'TWP'
       DO EVALUATE-TERMINATION-REASON ! Giant Eagle is sending over nulls
    END-IF 
END-IF
    
LET $TALX_TWN_LAST_NAME               = RTRIM($SAVE_LAST_NAME,' ')
LET $TALX_TWN_FIRST_NAME              = RTRIM($SAVE_FIRST_NAME,' ')
LET $TALX_TWN_MID_INITIAL             = RTRIM($SAVE_MIDDLE_NAME,' ')
LET $TALX_TWN_ADDRESS1                = RTRIM($SAVE_ADDRESS1,' ')
LET $TALX_TWN_ADDRESS2                = RTRIM($SAVE_ADDRESS2,' ')
LET $TALX_TWN_CITY                    = RTRIM($SAVE_CITY,' ')
LET $TALX_TWN_STATE                   = RTRIM($SAVE_STATE,' ')
LET $TALX_TWN_ZIP                     = RTRIM($SAVE_ZIP,' ')
LET $TALX_ORIG_HIRE_DT                = $SAVE_ORIG_HIRE_DT
LET $TALX_TWN_EMPLOYEE_HOME_COUNTRY   = $SAVE_COUNTRY
IF #SAVE_CHANGE_AMT = 0                                                        
   LET $TALX_TWN_AMOUNT_OF_LAST_INCREASE = ' '                                 
ELSE                                                                           
   LET $TALX_TWN_AMOUNT_OF_LAST_INCREASE = EDIT(#SAVE_CHANGE_AMT,'99999999.99')
END-IF                                                                         

IF $SAVE_REHIRE_DT = ''
    LET $TALX_ADJ_HIRE_DATE = $SAVE_HIRE_DT
    LET $TALX_SERVICE_DATE  = $SAVE_HIRE_DT
ELSE
    LET $TALX_ADJ_HIRE_DATE = $SAVE_REHIRE_DT
    LET $TALX_SERVICE_DATE  = $SAVE_REHIRE_DT
END-IF
!Replace SERVICE DATE with HIRE/REHIRE Info - End

IF $SAVE_REHIRE_DT = ''
    LET $TALX_HIRE_DATE     = $SAVE_ORIG_HIRE_DT
ELSE
    LET $TALX_HIRE_DATE     = $SAVE_REHIRE_DT
END-IF

!****************************************************************************
!
! NOTE : CALCULATE OF SERVICE YEARS AND MONTHS IS CONTROLLED BY AN OPTION
!        ON THE TALX INSTALLATION TABLE. IF TALX_CALC_SERVICE = 'Y', THIS 
!        PROGRAM CALCULATES YEARS AND MONTHS OF SERVICE BASES ON THE SERVICE 
!        DATE THRU THE AS OF DATE.
!
!        IF THIS OPTION = 'N', THESE FIELDS ARE BLANKED OUT AND THE SERVICE
!        DATE IS POPULATED ON THE RECORD SO THAT TALX CAN CALCULATE IT
!
!****************************************************************************

IF &TI.GEX_TALX_CALC_SVC = 'Y'		

    LET $WORK_DATE         = EDIT($TALX_SERVICE_DATE,'YYYY-MM-DD')  

    If $TALX_SERVICE_DATE > $TALX_AS_OF_DATE
       !USE HIRE/REHIRE
       If $TALX_HIRE_DATE < $TALX_AS_OF_DATE
	  LET $WORK_DATE = EDIT($TALX_HIRE_DATE,'YYYY-MM-DD')  
       ELSE
	  !find hire dt from JOB HISTORY USING 
	  do find-orig-hire-date
	  if $ohd_found='Y'
             LET $WORK_DATE = EDIT($ORIGINAL_HIRE_DT,'YYYY-MM-DD')
	  Else
             show 'defaulting to FROMDATE...BAD HIRE/SERVICE DATA DATA'
             LET $WORK_DATE = EDIT($FROMDATE_YMD,'YYYY-MM-DD') 
	  End-if
       End-if
    End-if

    ! Guarantee good service calculations - End

    IF $SAVE_EMPL_STATUS = 'T' OR ! TERMINATED
       $SAVE_EMPL_STATUS = 'U' OR ! TERMINATED WITH PAY
       $SAVE_EMPL_STATUS = 'V' OR ! TERMINATED W PENSION PAYOUT
       $SAVE_EMPL_STATUS = 'R' OR ! RETIRED
       $SAVE_EMPL_STATUS = 'Q' OR ! RETIRED WITH PAY
       $SAVE_EMPL_STATUS = 'D'    ! DECEASED

        IF $SAVE_TERMINATION_DT = ''                                           ! TERM DATE COULD BE NULL FOR A VARIETY OF REASONS - IF SO, TREAT AS IF ACTIVE
            DO DTU-DIFF-MONTHS($WORK_DATE,$TALX_AS_OF_DATE_YYYY_MM_DD, #MONTHS) ! DETERMINE NUMBER OF MONTHS DIFFERENCE BETWEEN TWO DATES IN YYYY-MM-DD FORMAT
        ELSE
            LET $TALX_TERMINATION_DT_YYYYY_MM_DD = EDIT($SAVE_TERMINATION_DT,'YYYY-MM-DD')
            DO DTU-DIFF-MONTHS($WORK_DATE,$TALX_TERMINATION_DT_YYYYY_MM_DD, #MONTHS) ! DETERMINE NUMBER OF MONTHS DIFFERENCE BETWEEN TWO DATES IN YYYY-MM-DD FORMAT
        END-IF
    ELSE
        DO DTU-DIFF-MONTHS($WORK_DATE,$TALX_AS_OF_DATE_YYYY_MM_DD, #MONTHS)    ! DETERMINE NUMBER OF MONTHS DIFFERENCE BETWEEN TWO DATES IN YYYY-MM-DD FORMAT
    END-IF
     
    let #service_in_mths = #MONTHS	
    let $TALX_SERVICE_DATE_X = strtodate($TALX_SERVICE_DATE,'YYYYMMDD')

    let $TALX_AS_OF_DATE_NATIVE_X = strtodate($TALX_AS_OF_DATE_NATIVE,'DD-MON-YYYY')

    LET #YEARS             = TRUNC((#MONTHS / 12),0)
    LET #TALXYRSSERVICE    = #YEARS
    LET #MONTHS            = #MONTHS - (#YEARS * 12)
    LET #TALXMTHSSERVICE   = #MONTHS
    LET $TALX_SERVICE_DATE = ''
 ELSE
    LET #TALXYRSSERVICE    = 0
    LET #TALXMTHSSERVICE   = 0
END-IF

LET $TALX_TWN_YRS_SERVICE  = EDIT(#TALXYRSSERVICE,'999')
LET $TALX_TWN_MTHS_SERVICE = EDIT(#TALXMTHSSERVICE,'99')

!**************************************************************************
!
! NOTE : HARD-CODED MAPPING OF PEOPLESOFT COMP FREQ CODES TO TALX PAY
!        FREQUENCIES OCCURS HERE. IF THIS WERE TO BECOME VOLATILE ON EITHER
!        SIDE, THIS MAY HAVE TO BE A TABLE LOOKUP
!
!        CURRENTLY, PEOPLESOFT HAS 'Q' (QUARTERLY) WHICH IS NOT MAPPED BY 
!        TALX IT DEFAULTS TO ANNUAL
!
! CLIENT NOTE : AS OF VERSION 8.X, THESE CODES ARE MAINTAINABLE BY
!               CUSTOMERS. THIS TABLE MUST BE MAINTAINED OR A MODIFICATION
!               MADE TO USE A TRANSLATE TABLE TO MAP CUSTOMER COMPENSATION
!               FREQUENCIES TO THE TALX PAY FREQUENCY
!
!**************************************************************************

LET $TALX_COMP_FREQUENCY = ' '                                                 

EVALUATE $SAVE_COMP_FREQUENCY
    WHEN = 'A'                          ! PS ANNUAL
    WHEN = 'C'                          ! PS CONTRACT
        LET $TALX_COMP_FREQUENCY = '01' ! TALX ANNUALLY                        
        BREAK
    WHEN = 'B'                          ! PS BI-WEEKLY
    WHEN = 'B262'                       ! PS BIWEEKLY FACTOR OF 26.2
    WHEN = 'BMX30'                      ! PS BIWEEKLY MEXICO FACTOR 30.0
    WHEN = 'BMX34'                      ! PS BIWEEKLY MEXICO FACTOR 30.4
        LET $TALX_COMP_FREQUENCY = '06' ! TALX BI-WEEKLY                       
        BREAK
    WHEN = 'H'                          ! PS HOURLY
        LET $TALX_COMP_FREQUENCY = '09' ! TALX HOURLY                          
        BREAK
    WHEN = 'M'                          ! PS MONTHLY
    WHEN = 'JM'                         ! PS JAPAN MONTHLY
    WHEN = 'M12'                        ! PS 12 MONTHS
    WHEN = 'M13'                        ! PS 13 MONTHS
    WHEN = 'M15'                        ! PS 15 MONTHLY
    WHEN = 'M16'                        ! PS 16 MOINTHS
    WHEN = 'M13.2'                      ! PS 13.2 MONTHS
    WHEN = 'M1327'                      ! PS 13.27 MONTHS
    WHEN = 'M121'                       ! PS MONTHLY FACTOR OF 12.1
    WHEN = 'M14'                        ! PS MONTHLY 14 PAYMENTS
    WHEN = 'M16'                        ! PS MONTHLY 16 PAYMENTS
    WHEN = 'M1MTH'                      ! PS CONTRACT - 1 MONTH PERIOD
    WHEN = 'M9MTH'                      ! PS CONTRACT - 9 MONTH PERIOD
    WHEN = 'M1/2M'                      ! PS CONTRACT - 1/2 MONTH PERIOD
        LET $TALX_COMP_FREQUENCY = '04' ! TALX MONTHLY                         
        BREAK
    WHEN = 'S'                          ! PS SEMIMONTHLY
    WHEN = 'SMX34'                      ! PS SEMIMONTHLY  MEXICO FACTOR 30.4
        LET $TALX_COMP_FREQUENCY = '05' ! TALX SEMI-MONTHLY                    
        BREAK
    WHEN = 'W'                          ! PS WEEKLY
    WHEN = 'W521'                       ! PS WEEKLY FACTOR OF 52.1
    WHEN = 'W1/2M'                      ! PS CONTRACT - NUMBER OF WEEKS - 1/2 MONTH PERIOD
    WHEN = 'W1MTH'                      ! PS CONTRACT - NUMBER OF WEEKS - 1 MTH PERIOD
    WHEN = 'W9MTH'                      ! PS CONTRACT- NUMBER OF WEEKS - 9 MONTH PERIOD
    WHEN = 'WMX30'                      ! PS WEEKLY MEXICO FACTOR 30
    WHEN = 'WMX34'                      ! PS WEEKLY MEXICO FACTOR 30.4
        LET $TALX_COMP_FREQUENCY = '07' ! TALX WEEKLY                          
        BREAK
    WHEN = 'F'                          ! PS EVERY FOUR WEEKS
    WHEN = 'M13'                        ! PS MONTHLY 13 PAYMENTS
        LET $TALX_COMP_FREQUENCY = '10' ! TALX 13 TIMES A YEAR                 
        BREAK
    WHEN = 'D'                          ! PS DAILY
    WHEN = 'D365'                       ! PS DIARIO 365 DIAS
    WHEN = 'D426'                       ! PS DAILY 14 PAYMENTS
    WHEN = 'DMX30'                      ! PS DAILY MEX FACTOR 30.0
    WHEN = 'DMX34'                      ! PA DAILY MEXICO FACTOR 30.4
        LET $TALX_COMP_FREQUENCY = '08' ! TALX DAILY                           
        BREAK
    WHEN-OTHER                          ! DEFAULT
        LET $TALX_COMP_FREQUENCY = '01' ! TALX ANNUALLY                        
END-EVALUATE

DO GET-PAY-FREQUENCY                                                           

EVALUATE $PAY_FREQUENCY                                                        
    WHEN = 'A'                                                                 
        LET $TALX_PAY_FREQUENCY = '01'                                         
        BREAK                                                                  
    WHEN = 'M'                                                                 
        LET $TALX_PAY_FREQUENCY = '04'                                         
        BREAK                                                                  
    WHEN = 'S'                                                                 
        LET $TALX_PAY_FREQUENCY = '05'                                         
        BREAK                                                                  
    WHEN = 'B'                                                                 
        LET $TALX_PAY_FREQUENCY = '06'                                         
        BREAK                                                                  
    WHEN = 'W'                                                                 
        LET $TALX_PAY_FREQUENCY = '07'                                         
        BREAK                                                                  
    WHEN = 'D'                                                                 
        LET $TALX_PAY_FREQUENCY = '08'                                         
        BREAK                                                                  
    WHEN-OTHER                          ! DEFAULT TO                           
        LET $TALX_PAY_FREQUENCY = '01'  ! ANNUALLY                             
END-EVALUATE                                                                   

IF #SAVE_COMPRATE = 0                                                          
   LET $TALX_TWN_COMPRATE             = ' '                                    
ELSE                                                                           
   LET $TALX_TWN_COMPRATE             = EDIT(#SAVE_COMPRATE,'99999999.99')
END-IF                                                                         
IF #SAVE_STD_HOURS = 0                                                         
   LET $TALX_TWN_HOURS_PER_WK         = ' '                                    
ELSE                                                                           
   LET $TALX_TWN_HOURS_PER_WK         = EDIT(#SAVE_STD_HOURS,'999')
END-IF                                                                         
!BASE
IF #TALX_CURR_YTD_REGULAR = 0                                                  
   LET $TALX_TWN_CURR_YTD_REGULAR     = EDIT(#TALX_CURR_YTD_REGULAR,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_CURR_YTD_REGULAR     = EDIT(#TALX_CURR_YTD_REGULAR,'99999999.99')
END-IF									       

!Overtime
IF #TALX_CURR_YTD_OT = 0                                                       
   LET $TALX_TWN_CURR_YTD_OVT         = EDIT(#TALX_CURR_YTD_OT,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_CURR_YTD_OVT         = EDIT(#TALX_CURR_YTD_OT,'99999999.99')
END-IF                                                                         

!Bonus
IF #TALX_CURR_YTD_BONUS = 0                                                    
   LET $TALX_TWN_CURR_YTD_BONUS       = EDIT(#TALX_CURR_YTD_BONUS,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_CURR_YTD_BONUS       = EDIT(#TALX_CURR_YTD_BONUS,'99999999.99')
END-IF                                                                         

!Commission
IF #TALX_CURR_YTD_COMMISSION = 0                                               
   LET $TALX_TWN_CURR_YTD_COMMISSION  = EDIT(#TALX_CURR_YTD_COMMISSION,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_CURR_YTD_COMMISSION  = EDIT(#TALX_CURR_YTD_COMMISSION,'99999999.99')
END-IF                                                                         

!Other
IF #TALX_CURR_YTD_OTHER = 0                                                    
   LET $TALX_TWN_CURR_YTD_OTHER       = EDIT(#TALX_CURR_YTD_OTHER,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_CURR_YTD_OTHER       = EDIT(#TALX_CURR_YTD_OTHER,'99999999.99')
END-IF                                                                         

!Total Comp
IF #TALX_CURR_YTD_TOTAL_COMP = 0                                               
   LET $TALX_TWN_CURR_YTD_TOTAL_COMP  = EDIT(#TALX_CURR_YTD_TOTAL_COMP,'9999999999.99')
ELSE                                                                           
   LET $TALX_TWN_CURR_YTD_TOTAL_COMP  = EDIT(#TALX_CURR_YTD_TOTAL_COMP,'9999999999.99')
END-IF                                                                         

!Base Last yr
IF #TALX_LAST_YTD_REGULAR = 0                                                  
   LET $TALX_TWN_LAST_YTD_REGULAR     = EDIT(#TALX_LAST_YTD_REGULAR,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_LAST_YTD_REGULAR     = EDIT(#TALX_LAST_YTD_REGULAR,'99999999.99')
END-IF                                                                         

!OT Last yr
IF #TALX_LAST_YTD_OT = 0                                                       
   LET $TALX_TWN_LAST_YTD_OVT         = EDIT(#TALX_LAST_YTD_OT,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_LAST_YTD_OVT         = EDIT(#TALX_LAST_YTD_OT,'99999999.99')
END-IF                                                                         

!Bonus Last yr
IF #TALX_LAST_YTD_BONUS = 0                                                    
   LET $TALX_TWN_LAST_YTD_BONUS       = EDIT(#TALX_LAST_YTD_BONUS,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_LAST_YTD_BONUS       = EDIT(#TALX_LAST_YTD_BONUS,'99999999.99')
END-IF                                                                         

!Commision Last yr
IF #TALX_LAST_YTD_COMMISSION = 0                                               
   LET $TALX_TWN_LAST_YTD_COMMISSION  = EDIT(#TALX_LAST_YTD_COMMISSION,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_LAST_YTD_COMMISSION  = EDIT(#TALX_LAST_YTD_COMMISSION,'99999999.99')
END-IF                                                                         

!Otrher Last yr
IF #TALX_LAST_YTD_OTHER = 0                                                    
   LET $TALX_TWN_LAST_YTD_OTHER       = EDIT(#TALX_LAST_YTD_OTHER,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_LAST_YTD_OTHER       = EDIT(#TALX_LAST_YTD_OTHER,'99999999.99')
END-IF                                                                         

!Total Last yr
IF #TALX_LAST_YTD_TOTAL_COMP = 0                                               
   LET $TALX_TWN_LAST_YTD_TOTAL_COMP  = EDIT(#TALX_LAST_YTD_TOTAL_COMP,'9999999999.99')
ELSE                                                                           
   LET $TALX_TWN_LAST_YTD_TOTAL_COMP  = EDIT(#TALX_LAST_YTD_TOTAL_COMP,'9999999999.99')
END-IF                                                                         

!Base Prev yr
IF #TALX_PREV_YTD_REGULAR = 0                                                  
   LET $TALX_TWN_PREV_YTD_REGULAR     = EDIT(#TALX_PREV_YTD_REGULAR,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_PREV_YTD_REGULAR     = EDIT(#TALX_PREV_YTD_REGULAR,'99999999.99')
END-IF                                                                         

!OT Prev yr
IF #TALX_PREV_YTD_OT = 0                                                       
   LET $TALX_TWN_PREV_YTD_OVT         = EDIT(#TALX_PREV_YTD_OT,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_PREV_YTD_OVT         = EDIT(#TALX_PREV_YTD_OT,'99999999.99')
END-IF                                                                         

!Bonus Prev yr
IF #TALX_PREV_YTD_BONUS = 0                                                    
   LET $TALX_TWN_PREV_YTD_BONUS       = EDIT(#TALX_PREV_YTD_BONUS,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_PREV_YTD_BONUS       = EDIT(#TALX_PREV_YTD_BONUS,'99999999.99')
END-IF                                                                         

!Commission Prev yr
IF #TALX_PREV_YTD_COMMISSION = 0                                               
   LET $TALX_TWN_PREV_YTD_COMMISSION  = EDIT(#TALX_PREV_YTD_COMMISSION,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_PREV_YTD_COMMISSION  = EDIT(#TALX_PREV_YTD_COMMISSION,'99999999.99')
END-IF                                                                         

!Other Prev yr
IF #TALX_PREV_YTD_OTHER = 0                                                    
   LET $TALX_TWN_PREV_YTD_OTHER       = EDIT(#TALX_PREV_YTD_OTHER,'99999999.99')
ELSE                                                                           
   LET $TALX_TWN_PREV_YTD_OTHER       = EDIT(#TALX_PREV_YTD_OTHER,'99999999.99')
END-IF                                                                         

!Total Prev yr
IF #TALX_PREV_YTD_TOTAL_COMP = 0                                               
   LET $TALX_TWN_PREV_YTD_TOTAL_COMP  = EDIT(#TALX_PREV_YTD_TOTAL_COMP,'9999999999.99')
ELSE                                                                           
   LET $TALX_TWN_PREV_YTD_TOTAL_COMP  = EDIT(#TALX_PREV_YTD_TOTAL_COMP,'9999999999.99')
END-IF                                                                         

!************************************************************************
!
! NOTE : A ANOMALY EXISTS IN P/S BECAUSE AN EMPLOYEE CAN HAVE A HOME
!        PHONE NUMBER EITHER ON PS_PERSONAL_DATA OR IN PS_PERSONAL_PHONE.
!
!        WE ARE GOING TO USE THE PHONE ON PERSONAL DATA IF IT IS NOT
!        NULL OR BLANK. IF IT IS, WE ARE GOING TO SEE IF THERE IS A
!        PHONE TYPE OF 'HOME' ON PS_PERSONAL_PHONE, IF SO WE USE THAT.
!
!        P/S PHONE NUMBER IS STORED AS ENTERED
!        WE NEED TO STRIP OUT THE NON-NUMERIC CHARACTERS
!
!************************************************************************

IF $SAVE_PHONE = '' OR
   $SAVE_PHONE = ' '
BEGIN-SELECT
PP.PHONE
    LET $SAVE_PHONE = &PP.PHONE
FROM PS_PERSONAL_PHONE PP
WHERE PP.EMPLID     = $SAVE_EMPLID
AND   PP.PHONE_TYPE = 'HOME'
END-SELECT
END-IF

LET $HOLD_PHONE = $SAVE_PHONE

DO STRIP-PHONE-NUMBER

LET $TALX_TWN_EMPLOYEE_HOME_PHONE = $HOLD_PHONE

END-PROCEDURE FORMAT-TALX-EE-DATA

!************************************************************************
BEGIN-PROCEDURE Find-Orig-Hire-Date
!************************************************************************
  let $ohd_found ='N'
Begin-Select
HIRE.EFFDT
     LET $ORIGINAL_HIRE_DT  = EDIT(&HIRE.EFFDT,'YYYYMMDD')
     let $ohd_found = 'Y'
From Ps_job HIRE
  WHERE HIRE.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB
        WHERE HIRE.EMPLID = EMPLID
          AND HIRE.EMPL_RCD = EMPL_RCD
	  and action = 'HIR'
          AND EFFDT < $TALX_AS_OF_DATE_NATIVE)
    AND HIRE.EFFSEQ =
        (SELECT MAX(EFFSEQ) FROM PS_JOB
        WHERE HIRE.EMPLID = EMPLID
          AND HIRE.EMPL_RCD = EMPL_RCD
          AND HIRE.EFFDT = EFFDT)
    AND HIRE.EMPLID   = $SAVE_EMPLID
    AND HIRE.EMPL_RCD = #SAVE_EMPL_RCD

End-Select
END-PROCEDURE Find-Orig-Hire-Date


!************************************************************************
!
! PROCEDURE : GET-COMPANY-DATA
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE PEOPLESOFT
!             COMPANY REQUIRED DATA
!
! NOTE      : RATHER THAN DOING WHAT COULD BE MANY I/O's TO THIS TABLE
!             WE LOAD THEM INTO AN ARRAY AND THEN PROCESS FROM THERE
!
!************************************************************************

BEGIN-PROCEDURE GET-COMPANY-DATA

LET $COMPANY_REC_FOUND = 'N'
LET #COMPANY_COUNT     = 1

WHILE #COMPANY_COUNT <= #COMPANY_COUNT_MAX
    GET $COMPANY_ARRAY_COMPANY FROM COMPANY_ARRAY (#COMPANY_COUNT) COMPANY_ARRAY_COMPANY
    IF $COMPANY_ARRAY_COMPANY = $SAVE_COMPANY
        GET #COMPANY_ARRAY_FEDERAL_EIN      FROM COMPANY_ARRAY (#COMPANY_COUNT) COMPANY_ARRAY_FEDERAL_EIN
        GET $COMPANY_ARRAY_SETID_LOCATION   FROM COMPANY_ARRAY (#COMPANY_COUNT) COMPANY_ARRAY_SETID_LOCATION
        GET $COMPANY_ARRAY_DEFAULT_SETID    FROM COMPANY_ARRAY (#COMPANY_COUNT) COMPANY_ARRAY_DEFAULT_SETID
        LET $COMPANY_REC_FOUND = 'Y'
        LET $TALX_FEDERAL_EIN  = EDIT(#COMPANY_ARRAY_FEDERAL_EIN,'9999999999999')
        BREAK
    END-IF
    LET #COMPANY_COUNT = #COMPANY_COUNT + 1
END-WHILE

IF $COMPANY_REC_FOUND = 'N'
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV8001 : NO COMPANY RECORD FOUND FOR COMPANY ' $SAVE_COMPANY
    SHOW 'TXWV8001 : PROCESSING WILL NOW TERMINATE'
    SHOW '*********************************************************************************************************************************'
    DO PERFORM-ROLLBACK
    STOP
END-IF

END-PROCEDURE GET-COMPANY-DATA

!************************************************************************
!
! PROCEDURE : GET-WORK-LOCATION
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE WORK LOCATION
!             ADDRESS FROM THE LOCATION TABLE BASED UPON THE LOCATION
!             ON THE EMPLOYEES JOB RECORD
!
!************************************************************************

BEGIN-PROCEDURE GET-WORK-LOCATION

LET $TALX_TWN_WORK_LOC_ADDR1   = 'NOT FOUND'
LET $TALX_TWN_WORK_LOC_ADDR2   = ''
LET $TALX_TWN_WORK_LOC_CITY    = ''
LET $TALX_TWN_WORK_LOC_STATE   = ''
LET $TALX_TWN_WORK_LOC_POSTAL  = ''
LET $TALX_TWN_WORK_LOC_COUNTRY = ''

LET $SETID = $SAVE_SETID_LOCATION

IF $SETID = ''
    IF $COMPANY_ARRAY_SETID_LOCATION = ''
        LET $SETID = RTRIM($COMPANY_ARRAY_DEFAULT_SETID,' ')
    ELSE
        LET $SETID = RTRIM($COMPANY_ARRAY_SETID_LOCATION,' ')
    END-IF
END-IF

IF $SETID = ''
BEGIN-SELECT LOOPS=1
LT1.ADDRESS1
LT1.ADDRESS2
LT1.CITY
LT1.STATE
LT1.POSTAL
LT1.COUNTRY
    LET $TALX_TWN_WORK_LOC_ADDR1   = RTRIM(&LT1.ADDRESS1,' ')
    LET $TALX_TWN_WORK_LOC_ADDR2   = RTRIM(&LT1.ADDRESS2,' ')
    LET $TALX_TWN_WORK_LOC_CITY    = RTRIM(&LT1.CITY,' ')
    LET $TALX_TWN_WORK_LOC_STATE   = RTRIM(&LT1.STATE,' ')
    LET $TALX_TWN_WORK_LOC_POSTAL  = RTRIM(&LT1.POSTAL,' ')
    LET $TALX_TWN_WORK_LOC_COUNTRY = RTRIM(&LT1.COUNTRY,' ')
FROM PS_LOCATION_TBL LT1
WHERE LT1.LOCATION = $SAVE_LOCATION
AND   LT1.EFFDT    = (SELECT MAX(LT1A.EFFDT)   
                      FROM PS_LOCATION_TBL LT1A
                      WHERE LT1A.LOCATION  = LT1.LOCATION
                      AND   LT1A.EFFDT    <= $TALX_AS_OF_DATE_NATIVE)
END-SELECT
ELSE
BEGIN-SELECT
LT2.ADDRESS1
LT2.ADDRESS2
LT2.CITY
LT2.STATE
LT2.POSTAL
LT2.COUNTRY
    LET $TALX_TWN_WORK_LOC_ADDR1   = RTRIM(&LT2.ADDRESS1,' ')
    LET $TALX_TWN_WORK_LOC_ADDR2   = RTRIM(&LT2.ADDRESS2,' ')
    LET $TALX_TWN_WORK_LOC_CITY    = RTRIM(&LT2.CITY,' ')
    LET $TALX_TWN_WORK_LOC_STATE   = RTRIM(&LT2.STATE,' ')
    LET $TALX_TWN_WORK_LOC_POSTAL  = RTRIM(&LT2.POSTAL,' ')
    LET $TALX_TWN_WORK_LOC_COUNTRY = RTRIM(&LT2.COUNTRY,' ')
FROM PS_LOCATION_TBL LT2
WHERE LT2.SETID    = $SETID
AND   LT2.LOCATION = $SAVE_LOCATION
AND   LT2.EFFDT    = (SELECT MAX(LT2A.EFFDT)   
                      FROM PS_LOCATION_TBL LT2A
                      WHERE LT2A.SETID     = LT2.SETID
                      AND   LT2A.LOCATION  = LT2.LOCATION
                      AND   LT2A.EFFDT    <= $TALX_AS_OF_DATE_NATIVE)
END-SELECT
END-IF

END-PROCEDURE GET-WORK-LOCATION

!************************************************************************      
!                                                                              
! PROCEDURE : GET-PAY-FREQUENCY                                                
!                                                                              
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE PEOPLESOFT           
!             PAY FREQUENCY CODE                                               
!                                                                              
!************************************************************************      

BEGIN-PROCEDURE GET-PAY-FREQUENCY

LET $FREQUENCY_REC_FOUND = 'N'
LET #FREQUENCY_COUNT     = 1

WHILE #FREQUENCY_COUNT <= #FREQUENCY_COUNT_MAX
    GET $FREQUENCY_ARRAY_COMPANY  FROM FREQUENCY_ARRAY (#FREQUENCY_COUNT) FREQUENCY_ARRAY_COMPANY
    GET $FREQUENCY_ARRAY_PAYGROUP FROM FREQUENCY_ARRAY (#FREQUENCY_COUNT) FREQUENCY_ARRAY_PAYGROUP
    IF  $FREQUENCY_ARRAY_COMPANY  = $SAVE_COMPANY
    AND $FREQUENCY_ARRAY_PAYGROUP = $EMPL_PAYGROUP
        GET $PAY_FREQUENCY FROM FREQUENCY_ARRAY (#FREQUENCY_COUNT) FREQUENCY_ARRAY_PAY_FREQUENCY
        LET $FREQUENCY_REC_FOUND = 'Y'
        BREAK
    END-IF
    LET #FREQUENCY_COUNT = #FREQUENCY_COUNT + 1
END-WHILE

IF $COMPANY_REC_FOUND = 'N'
    SHOW '*********************************************************************************************************************************'
    SHOW 'TXWV7501 : NO PAY FREQUENCY RECORD FOUND FOR COMPANY ' $SAVE_COMPANY ' AND PAYGROUP ' $EMPL_PAYGROUP
    SHOW 'TXWV7501 : PROCESSING WILL NOW TERMINATE'
    SHOW '*********************************************************************************************************************************'
    DO PERFORM-ROLLBACK
    STOP
END-IF

END-PROCEDURE GET-PAY-FREQUENCY                                                

!************************************************************************
!
! PROCEDURE : GET-YTD-AMTS
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE YTD EARNING 
!             BALANCES FOR THE EARNINGS CODES
!
!************************************************************************

BEGIN-PROCEDURE GET-YTD-AMTS

LET #GROSSBASE  = 0
LET #GROSSOT    = 0
LET #BONUSCOMP  = 0
LET #COMMISSION = 0
LET #OTHINCOME  = 0
LET #TOTALGROSS = 0

BEGIN-SELECT
YTD.BALANCE_PERIOD
YTD.ERNCD
YTD.GRS_YTD
    DO GET-TALX-EARNINGS-TYPE
    EVALUATE $TALX_EARNINGS_TYPE
        WHEN = '1'                     ! GROSS BASE
            ADD &YTD.GRS_YTD TO #GROSSBASE
            ADD &YTD.GRS_YTD TO #TOTALGROSS
            BREAK
        WHEN = '2'                     !OVERTIME
            ADD &YTD.GRS_YTD TO #GROSSOT
            ADD &YTD.GRS_YTD TO #TOTALGROSS
            BREAK
        WHEN =  '3'                     ! BONUS
            ADD &YTD.GRS_YTD TO #BONUSCOMP
            ADD &YTD.GRS_YTD TO #TOTALGROSS
            BREAK
        WHEN =  '4'                     !COMMISSION
            ADD &YTD.GRS_YTD TO #COMMISSION
            ADD &YTD.GRS_YTD TO #TOTALGROSS
            BREAK
        WHEN = '5'                      !OTHER
            ADD &YTD.GRS_YTD TO #OTHINCOME
            ADD &YTD.GRS_YTD TO #TOTALGROSS
            BREAK
    END-EVALUATE
FROM PS_EARNINGS_BAL YTD,
     PS_EARNINGS_TBL ET
WHERE YTD.EMPLID         = $SAVE_EMPLID
AND   YTD.BALANCE_ID     = 'CY'
AND   YTD.BALANCE_YEAR   = #LOOKUP_YEAR
AND   YTD.BALANCE_PERIOD = (SELECT MAX(YTD1.BALANCE_PERIOD)
                            FROM PS_EARNINGS_BAL YTD1
                            WHERE YTD1.EMPLID          = YTD.EMPLID
                            AND   YTD1.COMPANY         = YTD.COMPANY
                            AND   YTD1.BALANCE_ID      = YTD.BALANCE_ID
                            AND   YTD1.BALANCE_YEAR    = YTD.BALANCE_YEAR
                            AND   YTD1.EMPL_RCD        = YTD.EMPL_RCD
                            AND   YTD1.SPCL_BALANCE    = YTD.SPCL_BALANCE
                            AND   YTD1.ERNCD           = YTD.ERNCD
                            AND   YTD1.BALANCE_PERIOD <= #BALANCE_PERIOD)
AND   YTD.SPCL_BALANCE   = 'N'
AND   ET.ERNCD           = YTD.ERNCD
AND   ET.EFFDT           = (SELECT MAX(ET1.EFFDT)
                            FROM PS_EARNINGS_TBL ET1
                            WHERE ET1.ERNCD  = YTD.ERNCD
                            AND   ET1.EFFDT <= $TALX_AS_OF_DATE_NATIVE)
END-SELECT

END-PROCEDURE GET-YTD-AMTS

!************************************************************************
!
! PROCEDURE : GET-TALX-EARNINGS-TYPE
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO DETERMINE WHAT GROUPING
!             A GIVEN PEOPLESOFT EARNINGS CODE MAPS TO ON THE TALX
!             SYSTEM
!
!             TALX GROUPINGS ARE :
!
!             1 = GROSS BASE
!             2 = OVERTIME
!             3 = BONUS
!             4 = COMISSION
!             5 = OTHER
!
!************************************************************************

BEGIN-PROCEDURE GET-TALX-EARNINGS-TYPE

LET $TALX_EARNINGS_TYPE_FOUND = 'N'
LET #EARN_CODE_COUNT          = 1

WHILE #EARN_CODE_COUNT <= #EARN_CODE_COUNT_MAX
    GET $EARN_CODE_ARRAY_ERNCD     FROM EARN_TYPE_ARRAY(#EARN_CODE_COUNT) EARN_TYPE_ARRAY_ERNCD
    GET $EARN_CODE_ARRAY_EARN_TYPE FROM EARN_TYPE_ARRAY(#EARN_CODE_COUNT) EARN_TYPE_ARRAY_EARN_TYPE
    IF &YTD.ERNCD = $EARN_CODE_ARRAY_ERNCD
        LET $TALX_EARNINGS_TYPE_FOUND = 'Y'
        LET $TALX_EARNINGS_TYPE       = $EARN_CODE_ARRAY_EARN_TYPE
        BREAK
    END-IF
    LET #EARN_CODE_COUNT = #EARN_CODE_COUNT + 1
END-WHILE

IF $TALX_EARNINGS_TYPE_FOUND = 'N'
    LET $MSG = 'TXWV8001 : EMPLID '                            ||
               $SAVE_EMPLID                                    ||
               ' HAS A EARNINGS CODE OF '                      ||
               &YTD.ERNCD                                      ||
               ' THAT IS NOT IN THE TALX EARNINGS TYPE TABLE ' ||
               'DEFAULT EARNINGS CODE OF '                         ||
               &TI.GEX_TALX_DEF_EARN                          ||	
               ' WILL BE USED'
    SHOW $MSG
    PRINT $MSG (+1,1)
    LET $TALX_EARNINGS_TYPE = &TI.GEX_TALX_DEF_EARN			
END-IF

END-PROCEDURE GET-TALX-EARNINGS-TYPE

!**************************************************************************
!
! PROCEDURE : DETERMINE-TALX-EMPL-STATUS
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO DETERMINE THE TALX
!             EMPL STATUS BASED UPON THE PEOPLESOFT EMPL STATUS
!
!**************************************************************************
!
! NOTE      : HARD-CODED MAPPING OF PEOPLESOFT EMPLOYEE STATUS TO TALX
!             EMPLOYEE STATUS OCCURS HERE. IF THIS WERE TO BECOME VOLATILE
!             ON EITHER SIDE (PEOPLESOFT OR THE USER), THIS MAY HAVE TO 
!             BE A TABLE LOOKUP
!
!**************************************************************************
!
! NOTE      : IF YOU HAVE ADDED AN EMPL STATUS OR CHANGED THE DEFINITION
!             OF THE DELIVERED STATUS, THE CHANGE MUST BE MAPPED HERE
!
!**************************************************************************
!
! NOTE      : WITH THE RELEASE OF TALX V3.0, THE CONCEPT OF A PAYROLL 
!             "MASTER" FLAG AND A BENEFITS "MASTER" FLAG HAVE BEEN
!             INTRODUCED.
!
!             THE IDEA BEING THAT THE MAINTENANCE OF "ACTIVE" EMPLOYEES
!             WILL BE DONE THRU PEOPLESOFT, HENCE WHEN MULTIPLE SOURCES
!             ARE SUPPLYING UPDATES, PEOPLESOFT WILL RULE.
!             "INACTIVE" EMPLOYEES MAY BE MAINTAINED BY SOME OTHER MEANS
!             HENCE, SAY A THIRD PARTY CARRIER MAY BE THE "MASTER" AND
!             THE PEOPLESOFT FLAG WOULD BE SET TO "N".
!             THIS IS THE DEFUALT AND MAY BE CHANGED FOR SPECIFIC
!             CLIENT REQUIREMENTS.
!
!**************************************************************************

BEGIN-PROCEDURE DETERMINE-TALX-EMPL-STATUS

LET $GEX_TALX_EMPL_STS    = ''
LET $TALX_TWN_TERM_DATE  = ''
                             
EVALUATE $SAVE_EMPL_STATUS
    WHEN = 'A'                          ! PEOPLESOFT : ACTIVE
        LET $GEX_TALX_EMPL_STS     = 'A' ! TALX : ACTIVE
        LET $TALX_PAYROLL_MASTER  = 'Y'
        LET $TALX_BENEFITS_MASTER = 'Y'
        BREAK
    WHEN = 'D'                          ! PEOPLESOFT : DECEASED
        LET $GEX_TALX_EMPL_STS     = 'Q' ! TALX DECEASED
        LET $TALX_TWN_TERM_DATE   = $SAVE_TERMINATION_DT
        LET $TALX_PAYROLL_MASTER  = 'Y'
        LET $TALX_BENEFITS_MASTER = 'Y'
        BREAK
    WHEN = 'T'                          ! PEOPLESOFT : TERMINATED
    WHEN = 'U'                          ! PEOPLESOFT : TERMINATED WITH PAY
    WHEN = 'V'                          ! PEOPLESOFT : TERMINATED W PENSION PAYOUT
        LET $TALX_TWN_TERM_DATE   = $SAVE_TERMINATION_DT
        LET $GEX_TALX_EMPL_STS     = 'G' ! TALX : NO LONGER EMPLOYED
        LET $TALX_PAYROLL_MASTER  = 'Y'
        LET $TALX_BENEFITS_MASTER = 'Y'
        BREAK
    WHEN = 'L'                          ! PEOPLESOFT : LEAVE
    WHEN = 'P'                          ! PEOPLESOFT : LEAVE WITH PAY
        LET $GEX_TALX_EMPL_STS     = 'L' ! TALX : ON LEAVE
        LET $TALX_PAYROLL_MASTER  = 'Y'
        LET $TALX_BENEFITS_MASTER = 'Y'
        BREAK
    WHEN = 'R'                          ! PEOPLESOFT : RETIRED
    WHEN = 'Q'                          ! PEOPLESOFT : RETIRED WITH PAY
    WHEN = 'X'                          ! PEOPLESOFT : RETIRED - PENSION ADMINISTRATION
        LET $TALX_TWN_TERM_DATE   = $SAVE_TERMINATION_DT
        LET $GEX_TALX_EMPL_STS     = 'R' ! TALX : RETIRED
        LET $TALX_PAYROLL_MASTER  = 'Y'
        LET $TALX_BENEFITS_MASTER = 'Y'
        BREAK
    WHEN = 'S'                          ! PEOPLESOFT LAYOFF/SUSPENDED
        LET $GEX_TALX_EMPL_STS     = 'O' ! LAYOFF
        LET $TALX_PAYROLL_MASTER  = 'Y'
        LET $TALX_BENEFITS_MASTER = 'Y'
        BREAK
    WHEN = 'W'                          ! PEOPLESOFT SHORT TERM BREAK
        LET $GEX_TALX_EMPL_STS     = 'C' ! CASUAL
        LET $TALX_TWN_TERM_DATE   = $SAVE_TERMINATION_DT
        LET $TALX_PAYROLL_MASTER  = 'Y'
        LET $TALX_BENEFITS_MASTER = 'Y'
        BREAK
    WHEN = 'I'                          ! PEOPLESOFT CUSTOMIZATION
        LET $GEX_TALX_EMPL_STS     = 'I' ! INACTIVE
        LET $TALX_PAYROLL_MASTER  = 'Y'
        LET $TALX_BENEFITS_MASTER = 'Y'
        BREAK
    WHEN-OTHER
        LET $GEX_TALX_EMPL_STS     = 'I' ! INACTIVE
        LET $TALX_PAYROLL_MASTER  = 'Y'
        LET $TALX_BENEFITS_MASTER = 'Y'
        SHOW '*********************************************************************************************************************************'
        SHOW 'TXWV8001 : UNKNOWN EMPL STATUS FOUND FOR EMPLID = ' $SAVE_EMPLID
        SHOW 'TXWV8001 :                               EFFDT  = ' $SAVE_EFFDT
        SHOW 'TXWV8001 : UNABLE TO MAP PEOPLESOFT EMPLOYEE STATUS'
        SHOW 'TXWV8001 : PLEASE INCLUDE THIS STATUS MAPPING IN THE SQR'
        SHOW 'TXWV8001 : STATUS WILL BE MAPPED TO INACTIVE'
        SHOW '*********************************************************************************************************************************'
        BREAK
END-EVALUATE

END-PROCEDURE DETERMINE-TALX-EMPL-STATUS

!************************************************************************
!
! PROCEDURE : EVALUATE-TERMINATION-REASON
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE MAPPING OF
!             PEOPLESOFT ACTION REASON FOR THE TERM ACTIONS TO THE TALX
!             REASON CODE. THIS IS DONE IN AN EXTERNAL TABLE
!
!************************************************************************

BEGIN-PROCEDURE EVALUATE-TERMINATION-REASON

LET $TALX_CODE_FOUND = 'N'
LET #TERM_CD_COUNT   = 1

WHILE #TERM_CD_COUNT <= #TERM_CD_COUNT_MAX
    GET $TERM_CD_ARRAY_ACTION        FROM TERM_CD_ARRAY(#TERM_CD_COUNT) TERM_CD_ARRAY_ACTION
    GET $TERM_CD_ARRAY_ACTION_REASON FROM TERM_CD_ARRAY(#TERM_CD_COUNT) TERM_CD_ARRAY_ACTION_REASON
    GET $TERM_CD_ARRAY_TALX_TERM_CD  FROM TERM_CD_ARRAY(#TERM_CD_COUNT) TERM_CD_ARRAY_TALX_TERM_CD
    IF $SAVE_ACTION        = $TERM_CD_ARRAY_ACTION AND
       $SAVE_ACTION_REASON = $TERM_CD_ARRAY_ACTION_REASON
        LET $TALX_CODE_FOUND = 'Y'
        LET $GEX_TALX_TERM_CD    = $TERM_CD_ARRAY_TALX_TERM_CD
        BREAK
    END-IF
    LET #TERM_CD_COUNT = #TERM_CD_COUNT + 1
END-WHILE

IF $TALX_CODE_FOUND = 'N'
    LET $MSG = 'TXWV8001 : EMPLID '                        ||
               $SAVE_EMPLID                                ||
               ' HAS A TERM ACTION OF '                    ||
               $SAVE_ACTION                                ||
               ' AND ACTION REASON CODE OF '               ||
               $SAVE_ACTION_REASON                         ||
               ' THAT IS NOT IN THE TALX TERM CODE TABLE ' ||
               'DEFAULT TERM CODE OF '                     ||
               &TI.GEX_TALX_DEF_TERM                        ||
               ' WILL BE USED'
    LET $GEX_TALX_TERM_CD = '  '
END-IF

END-PROCEDURE EVALUATE-TERMINATION-REASON

!************************************************************************
!
! PROCEDURE : GET-TAXES
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET ALL OF THE 
!             PAYCHECK TAX INFORMATION
!
!************************************************************************

BEGIN-PROCEDURE GET-TAXES

BEGIN-SELECT
PT.STATE
PT.LOCALITY
PT.TAX_CLASS
PT.TAX_CUR
    EVALUATE &PT.TAX_CLASS
        WHEN = 'A'                                                             ! NON-RESIDENT ALIEN (1042)
        WHEN = 'C'                                                             ! EARNED INCOME CREDIT
        WHEN = 'H'                                                             ! WITHHOLDING
        WHEN = 'V'                                                             ! UNEMPLOYMENT EE
        WHEN = 'W'                                                             ! VOLUNTARY DISABILITY PLAN  EE
        WHEN = 'M'                                                             ! NEW JERSEY WFDP
        WHEN = 'N'                                                             ! NEW JERSEY HCSF
        WHEN = 'L'                                                             ! NEW JERSEY SUPL WORKFORCE ADMIN FUND
            IF RTRIM(&PT.STATE,' ') = '$U'
                LET #TALX_TAX_FEDERAL        = #TALX_TAX_FEDERAL + &PT.TAX_CUR
                DO GET-YTD-TAXES
                LET #TALX_YTD_TAX_FEDERAL    = #YTD_TAX
            ELSE
                IF RTRIM(&PT.LOCALITY,' ') = ''
                    LET #TALX_TAX_STATE      = #TALX_TAX_STATE + &PT.TAX_CUR
                    DO GET-YTD-TAXES
                    LET #TALX_YTD_TAX_STATE  = #YTD_TAX
                ELSE
                    LET #TALX_TAX_LOCAL      = #TALX_TAX_LOCAL + &PT.TAX_CUR
                    DO GET-YTD-TAXES
                    LET #TALX_YTD_TAX_LOCAL  = #YTD_TAX
                END-IF
            END-IF
            BREAK
        WHEN = 'B'                               ! LOCAL - EMPLOYER AND EMPLOYEE
            LET #TALX_TAX_LOCAL              = #TALX_TAX_LOCAL + &PT.TAX_CUR
            DO GET-YTD-TAXES
            LET #TALX_YTD_TAX_LOCAL          = #YTD_TAX
            BREAK
        WHEN = 'F'                               ! FICA MED HOSPITAL INS / EE
        WHEN = 'T'                               ! FICA MED HOSPITAL INS /EE-TIPS
            LET #TALX_TAX_FICA               = #TALX_TAX_FICA + &PT.TAX_CUR
            DO GET-YTD-TAXES
            LET #TALX_YTD_TAX_FICA           = #YTD_TAX
            BREAK
        WHEN = 'D'                               ! OASDI/DISABILITY - EE
        WHEN = 'G'                               ! OASDI/EE - TIPS
            LET #TALX_TAX_MEDICARE           = #TALX_TAX_MEDICARE + &PT.TAX_CUR
            DO GET-YTD-TAXES
            LET #TALX_YTD_TAX_MEDICARE       = #YTD_TAX
            BREAK
        WHEN = 'E'                               ! OASDI/DISABILITY - ER
        WHEN = 'J'                               ! OASDI/ER - TIPS
        WHEN = 'K'                               ! EXCISE
        WHEN = 'P'                               ! OCCUPATIONAL PRIVILEGE TAX
        WHEN = 'Q'                               ! FICA MED HOSPITAL INS / ER
        WHEN = 'R'                               ! LOCAL ER
        WHEN = 'S'                               ! UNEMPLOYMENT - SPECIAL
        WHEN = 'U'                               ! UNEMPLOYMENT ER
        WHEN = 'X'                               ! VOLUNTARY DISABILITY PLAN  ER
        WHEN = 'Z'                               ! FICA MED HOSPITAL INS /ER-TIPS
            BREAK
    END-EVALUATE
FROM PS_PAY_TAX PT
WHERE PT.COMPANY    = &PAY_CAL_03.COMPANY
AND   PT.PAYGROUP   = &PAY_CAL_03.PAYGROUP
AND   PT.PAY_END_DT = &PAY_CAL_03.PAY_END_DT
AND   PT.OFF_CYCLE  = &PAY_CHK_03.OFF_CYCLE
AND   PT.PAGE_NUM   = &PAY_CHK_03.PAGE_NUM
AND   PT.LINE_NUM   = &PAY_CHK_03.LINE_NUM
AND   PT.SEPCHK     = &PAY_CHK_03.SEPCHK
END-SELECT

END-PROCEDURE GET-TAXES

!************************************************************************
!
! PROCEDURE : GET-YTD-TAXES
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET ALL OF THE 
!             YTD TAX DATA
!
!************************************************************************

BEGIN-PROCEDURE GET-YTD-TAXES

LET #YTD_TAX        = 0
LET #BALANCE_PERIOD = #CURR_CAL_MONTH

BEGIN-SELECT
TB.TAX_YTD
    LET #YTD_TAX = &TB.TAX_YTD
FROM PS_TAX_BALANCE TB
WHERE TB.EMPLID          = $SAVE_EMPLID
AND   TB.BALANCE_ID      = 'CY'
AND   TB.BALANCE_YEAR    = #CURR_CAL_YEAR
AND   TB.STATE           = &PT.STATE
AND   TB.LOCALITY        = &PT.LOCALITY
AND   TB.TAX_CLASS       = &PT.TAX_CLASS
AND   TB.BALANCE_PERIOD  = (SELECT MAX(TB1.BALANCE_PERIOD)
                            FROM PS_TAX_BALANCE TB1
                            WHERE TB1.EMPLID          = TB.EMPLID
                            AND   TB1.COMPANY         = TB.COMPANY
                            AND   TB1.BALANCE_ID      = TB.BALANCE_ID
                            AND   TB1.BALANCE_YEAR    = TB.BALANCE_YEAR
                            AND   TB1.STATE           = TB.STATE
                            AND   TB1.LOCALITY        = TB.LOCALITY
                            AND   TB1.TAX_CLASS       = TB.TAX_CLASS
                            AND   TB1.BALANCE_PERIOD <= #BALANCE_PERIOD)
END-SELECT

END-PROCEDURE GET-YTD-TAXES

!************************************************************************
!
! PROCEDURE : GET-DEDUCTIONS
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE EMPLOYEE
!             PRE AND POST TAX DEDUCTIONS FOR THE PAYSTUB
!
! NOTE      : THE PROGRAM IS WRITTEN TO CAPTURE ALL DEDUCTION TYPES
!             WHERE THE FILE REQUESTS SPECIFIC DEDUCTION FIELDS,
!             THIS FIELDS ARE CALCULATED SEPERATLEY BUT ALSO INCLUDED
!             IN THE TOTALS
!
!             FOR CLIENTS WITH SPECIFIC EARNINGS CODES TO BE MAPPED
!             TO SPECIFIC EARNINGS TYPES, MODIFICATIONS WILL HAVE TO BE
!             MADE HERE
!
!************************************************************************

BEGIN-PROCEDURE GET-DEDUCTIONS

BEGIN-SELECT
PD.PLAN_TYPE
PD.BENEFIT_PLAN
PD.DEDCD
PD.DED_CLASS
PD.DED_CUR
    IF &PD.PLAN_TYPE = '00'     ! GENERAL DEDUCTION
        EVALUATE &PD.DEDCD
            WHEN = 'RET'        ! RETIREMENT - THIS FIELD IS USER DEFINED
            WHEN = '401'        ! RETIREMENT - THIS FIELD IS USER DEFINED
                LET #TALX_DED_RETIREMENT = #TALX_DED_RETIREMENT + &PD.DED_CUR
                BREAK
            WHEN = 'CAF'        ! CAFETERIA PLAN - THIS FIELD IS USER DEFINED
                LET #TALX_DED_CAFETERIA = #TALX_DED_CAFETERIA + &PD.DED_CUR
                BREAK
            WHEN-OTHER          ! ALL ELSE
                LET #TALX_DED_OTHER      = #TALX_DED_OTHER + &PD.DED_CUR
                BREAK
        END-EVALUATE
    END-IF
    IF &PD.PLAN_TYPE = '10' OR  ! MEDICAL
       &PD.PLAN_TYPE = '11' OR  ! DENTAL
       &PD.PLAN_TYPE = '14'     ! VISION
        LET #TALX_MED_DED   = #TALX_MED_DED + &PD.DED_CUR
    ELSE
        LET #TALX_DED_OTHER = #TALX_DED_OTHER + &PD.DED_CUR
    END-IF
FROM PS_PAY_DEDUCTION PD
WHERE PD.COMPANY    = &PAY_CAL_03.COMPANY
AND   PD.PAYGROUP   = &PAY_CAL_03.PAYGROUP
AND   PD.PAY_END_DT = &PAY_CAL_03.PAY_END_DT
AND   PD.OFF_CYCLE  = &PAY_CHK_03.OFF_CYCLE
AND   PD.PAGE_NUM   = &PAY_CHK_03.PAGE_NUM
AND   PD.LINE_NUM   = &PAY_CHK_03.LINE_NUM
AND   PD.SEPCHK     = &PAY_CHK_03.SEPCHK
END-SELECT

IF #TALX_MED_DED  =  0                                                   
   LET $TALX_TWN_MED_DED        = ' '                                    
ELSE                                                                     
   LET $TALX_TWN_MED_DED        = EDIT(#TALX_MED_DED,'99999.99')
END-IF                                                                   
LET $TALX_TWN_DED_OTHER      = EDIT(#TALX_DED_OTHER,'99999999.99')
LET $TALX_TWN_DED_RETIREMENT = EDIT(#TALX_DED_RETIREMENT,'99999999.99')
LET $TALX_TWN_DED_CAFETERIA  = EDIT(#TALX_DED_CAFETERIA,'99999999.99')

END-PROCEDURE GET-DEDUCTIONS

!************************************************************************
!
! PROCEDURE : GET-REG-AND-OT-HOURS
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE REGULAR
!             AND OVERTIME HOURS DATA
!
!************************************************************************

BEGIN-PROCEDURE GET-REG-AND-OT-HOURS

BEGIN-SELECT
ERN.REG_EARN_HRS
ERN.REG_EARNS
ERN.REG_HRS
ERN.REG_HRLY_EARNS
ERN.OT_HRLY_EARNS
ERN.OT_HRS
    IF &ERN.REG_EARNS <> 0                                                     ! SALARIED
        LET #TALX_REG_HOURS   = #TALX_REG_HOURS + &ERN.REG_EARN_HRS
    ELSE
        IF &ERN.REG_HRLY_EARNS <> 0                                            ! HOURLY
            LET #TALX_REG_HOURS   = #TALX_REG_HOURS + &ERN.REG_HRS
        END-IF
    END-IF
    IF &ERN.OT_HRLY_EARNS <> 0                                                 ! OVERTIME
        LET #TALX_OVERTIME_HOURS = #TALX_OVERTIME_HOURS + &ERN.OT_HRS
    END-IF
FROM PS_PAY_EARNINGS ERN
WHERE ERN.COMPANY    = &PAY_CAL_03.COMPANY
AND   ERN.PAYGROUP   = &PAY_CAL_03.PAYGROUP
AND   ERN.PAY_END_DT = &PAY_CAL_03.PAY_END_DT
AND   ERN.OFF_CYCLE  = &PAY_CHK_03.OFF_CYCLE
AND   ERN.PAGE_NUM   = &PAY_CHK_03.PAGE_NUM
AND   ERN.LINE_NUM   = &PAY_CHK_03.LINE_NUM
AND   ERN.SEPCHK     = &PAY_CHK_03.SEPCHK
END-SELECT

END-PROCEDURE GET-REG-AND-OT-HOURS

!************************************************************************
!
! PROCEDURE : GET-OTHER-PAY-AND-HOURS
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE OTHER
!             HOURS DATA FROM THE CURRENT PAYCHECK
!
! NOTE      : SINCE THE EARNINGS CODE FOR PENSION INCOME IS CLIENT
!             SPECIFIC, THE BELOW CODE MUST BE MODIFIED TO CAPTURE
!             PENSION INCOME
!
!************************************************************************

BEGIN-PROCEDURE GET-OTHER-PAY-AND-HOURS

BEGIN-SELECT
OTH.ERNCD
OTH.OTH_HRS
OTH.OTH_EARNS
    EVALUATE &OTH.ERNCD
        WHEN = 'PEN'           ! OR WHATEVER YOUR PENSION EARNING CODE(S) IS/ARE
            LET #TALX_PENSION_INCOME = #TALX_PENSION_INCOME + &OTH.OTH_EARNS
            BREAK
        WHEN-OTHER
            LET #TALX_OTHER_PAY      = #TALX_OTHER_PAY + &OTH.OTH_EARNS
            BREAK
    END-EVALUATE
    LET #TALX_OTHER_HOURS = #TALX_OTHER_HOURS + &OTH.OTH_HRS
FROM PS_PAY_OTH_EARNS OTH
WHERE OTH.COMPANY    = &PAY_CAL_03.COMPANY
AND   OTH.PAYGROUP   = &PAY_CAL_03.PAYGROUP
AND   OTH.PAY_END_DT = &PAY_CAL_03.PAY_END_DT
AND   OTH.OFF_CYCLE  = &PAY_CHK_03.OFF_CYCLE
AND   OTH.PAGE_NUM   = &PAY_CHK_03.PAGE_NUM
AND   OTH.LINE_NUM   = &PAY_CHK_03.LINE_NUM
AND   OTH.SEPCHK     = &PAY_CHK_03.SEPCHK
END-SELECT

END-PROCEDURE GET-OTHER-PAY-AND-HOURS

!************************************************************************
!
! PROCEDURE : GET-GARNISHMENTS
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE EMPLOYEE
!             GARNISHMENT DATA (IF PRESENT)
!
!************************************************************************

BEGIN-PROCEDURE GET-GARNISHMENTS

BEGIN-SELECT
PG.DEDUCT_AMT
    LET #TALX_GARNISHMENTS = #TALX_GARNISHMENTS + &PG.DEDUCT_AMT
FROM PS_PAY_GARNISH PG
WHERE PG.COMPANY    = &PAY_CAL_03.COMPANY
AND   PG.PAYGROUP   = &PAY_CAL_03.PAYGROUP
AND   PG.PAY_END_DT = &PAY_CAL_03.PAY_END_DT
AND   PG.OFF_CYCLE  = &PAY_CHK_03.OFF_CYCLE
AND   PG.PAGE_NUM   = &PAY_CHK_03.PAGE_NUM
AND   PG.LINE_NUM   = &PAY_CHK_03.LINE_NUM
AND   PG.SEPCHK     = &PAY_CHK_03.SEPCHK
END-SELECT

END-PROCEDURE GET-GARNISHMENTS

!************************************************************************
!
! PROCEDURE : STRIP-PHONE-NUMBER
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO STRIP THE PHONE NUMBER
!             FIELD OF ANY NON-NUMERICS
!
!************************************************************************

BEGIN-PROCEDURE STRIP-PHONE-NUMBER

LET #POS = 1

WHILE #POS <= LENGTH($HOLD_PHONE)
    IF SUBSTR($HOLD_PHONE,#POS,1) <> '0' AND
       SUBSTR($HOLD_PHONE,#POS,1) <> '1' AND
       SUBSTR($HOLD_PHONE,#POS,1) <> '2' AND
       SUBSTR($HOLD_PHONE,#POS,1) <> '3' AND
       SUBSTR($HOLD_PHONE,#POS,1) <> '4' AND
       SUBSTR($HOLD_PHONE,#POS,1) <> '5' AND
       SUBSTR($HOLD_PHONE,#POS,1) <> '6' AND
       SUBSTR($HOLD_PHONE,#POS,1) <> '7' AND
       SUBSTR($HOLD_PHONE,#POS,1) <> '8' AND
       SUBSTR($HOLD_PHONE,#POS,1) <> '9'
        LET #HOLD_PHONE_LENGTH = LENGTH($HOLD_PHONE)
        LET $HOLD_PHONE        = SUBSTR($HOLD_PHONE,1,#POS  - 1) ||
                                 SUBSTR($HOLD_PHONE,#POS + 1,#HOLD_PHONE_LENGTH - #POS)
    ELSE
        LET #POS = #POS + 1
    END-IF
END-WHILE

IF LENGTH($HOLD_PHONE) > 10
    LET $HOLD_PHONE = SUBSTR($HOLD_PHONE,1,10)
END-IF

END-PROCEDURE STRIP-PHONE-NUMBER

!************************************************************************
!
! PROCEDURE : GET-MEDICAL-COVERAGE
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO DETERMINE IF THE
!             EMPLOYEE IS ENROLLED IN MEDICAL COVERAGE
!
! NOTE      : TALX SUPPORTS MANY MORE COVERAGE CODES THAN WHAT
!             IS SHOWN HERE, BUT, CURRENTLY, PEOPLESOFT HAS ONLY
!             THESE 4.
!
!************************************************************************

BEGIN-PROCEDURE GET-MEDICAL-COVERAGE

LET $TALX_TWN_MED_COV_AVAIL       = 'N'
LET $TALX_TWN_MED_COV_ENR         = 'N'
LET $TALX_TWN_MED_COV_ELIG        = 'N'
LET $TALX_TWN_MED_CARRIER         = ' '
LET $TALX_TWN_MED_COV_START_DT    = ' '
LET $TALX_TWN_MED_COV_TERM_DT     = ' '
LET $TALX_TWN_MED_COV_CD          = ' '
LET $TALX_TWN_MED_GROUP           = ' '
LET $TALX_TWN_MED_POLICY          = ' '

LET $TALX_TWN_MED_CARRIER_ADDR1   = ''
LET $TALX_TWN_MED_CARRIER_ADDR2   = ''
LET $TALX_TWN_MED_CARRIER_CITY    = ''
LET $TALX_TWN_MED_CARRIER_STATE   = ''
LET $TALX_TWN_MED_CARRIER_POSTAL  = ''
LET $TALX_MED_CARRIER_PHONE       = ''
LET $TALX_TWN_MED_CARRIER_COUNTRY = ''

BEGIN-SELECT
HB.EFFDT                                                                  
HB.COVERAGE_ELECT
HB.COVERAGE_BEGIN_DT
HB.COVERAGE_END_DT
HB.COVRG_CD
HB.BENEFIT_PLAN
BP.SETID
BP.VENDOR_ID
BP.GROUP_NBR
V.NAME1
    LET $TALX_TWN_MED_COV_AVAIL     = 'Y'           ! OK, IT IS AT MEDICAL COVERAGE IS AT LEAST OFFERED TO THE EMPLOYEE
    LET $TALX_TWN_MED_GROUP         = RTRIM(&BP.GROUP_NBR,' ')
    LET $SETID                      = &BP.SETID
   
    LET $VENDOR_ID                  = &BP.VENDOR_ID
    LET $GROUP                      = &BP.GROUP_NBR
    DO GET-POLICY-NUMBER
    LET $TALX_TWN_MED_POLICY        = $TWN_POLICY
    LET $OPTION                     = 'M'
    DO GET-VENDOR-ADDRESS-PHONE
    IF &HB.COVERAGE_ELECT = 'E' 
        LET $TALX_TWN_MED_COV_ELIG      = 'Y'           ! IF EMPLOYEE HAS ELECTED, EMPLOYEE IS ELIGIBLE & ENROLLED
        LET $TALX_TWN_MED_COV_ENR       = 'Y'
        !LET $TALX_TWN_MED_CARRIER       = RTRIM(&BP.VENDOR_ID,' ')
	LET $TALX_TWN_MED_CARRIER       = RTRIM(&V.NAME1,' ')
        LET $TALX_TWN_MED_COV_START_DT  = EDIT(&HB.COVERAGE_BEGIN_DT,'YYYYMMDD')
        LET $TALX_TWN_MED_COV_TERM_DT   = EDIT(&HB.COVERAGE_END_DT,'YYYYMMDD')
    END-IF
    IF &HB.COVERAGE_ELECT = 'W'
        LET $TALX_TWN_MED_COV_ELIG  = 'Y'           ! IF EMPLOYEE HAS WAIVED, EMPLOYEE IS ELIGIBLE & BUT NOT ENROLLED
        LET $TALX_TWN_MED_COV_ENR   = 'N'
    END-IF
    IF &HB.COVERAGE_ELECT = 'T'                     ! IF EMPLOYEE HAS TERMED ELECTION, EMPLOYEE IS NOT ELIGIBLE & NOT ENROLLED
        LET $TALX_TWN_MED_COV_ELIG  = 'N'
        LET $TALX_TWN_MED_COV_ENR   = 'N'
    END-IF
    EVALUATE &HB.COVRG_CD
        WHEN = '1'                                   ! EMPLOYEE ONLY
            LET $TALX_TWN_MED_COV_CD        = '01'   ! EMPLOYEE ONLY
            BREAK
        WHEN = '2'                                   ! EMPLOYEE + SPOUSE
            LET $TALX_TWN_MED_COV_CD        = '03'   ! EMPLOYEE + SPOUSE
            BREAK
        WHEN = '3'                                   ! EMPLOYEE + DEPENDENTS
            LET $TALX_TWN_MED_COV_CD        = '04'   ! EMPLOYEE + CHILDREN
            BREAK
        WHEN = '4'                                   ! FAMILY
            LET $TALX_TWN_MED_COV_CD        = '05'   ! FAMILY
            BREAK
    END-EVALUATE
FROM PS_HEALTH_BENEFIT HB,
     PS_BENEF_PLAN_TBL BP,
     PS_VENDOR V
WHERE HB.EMPLID       = $SAVE_EMPLID
AND   HB.EMPL_RCD     = 0
AND   HB.PLAN_TYPE    = '10'
AND   HB.EFFDT        = (SELECT MAX(HB1.EFFDT)   
                         FROM PS_HEALTH_BENEFIT HB1
                         WHERE HB1.EMPLID          = HB.EMPLID
                         AND   HB1.EMPL_RCD        = HB.EMPL_RCD
                         AND   HB1.COBRA_EVENT_ID  = HB.COBRA_EVENT_ID
                         AND   HB1.PLAN_TYPE       = HB.PLAN_TYPE
                         AND   HB1.BENEFIT_NBR     = HB.BENEFIT_NBR
                         AND   HB1.EFFDT          <= $TALX_AS_OF_DATE_NATIVE)
AND   BP.PLAN_TYPE     = HB.PLAN_TYPE
AND   BP.BENEFIT_PLAN  = HB.BENEFIT_PLAN 
AND   BP.EFFDT         = (SELECT MAX(BP1.EFFDT)   
                          FROM PS_BENEF_PLAN_TBL BP1
                          WHERE BP1.PLAN_TYPE     = BP.PLAN_TYPE
                          AND   BP1.BENEFIT_PLAN  = BP.BENEFIT_PLAN
                          AND   BP1.EFFDT        <= $TALX_AS_OF_DATE_NATIVE)
AND  BP.SETID = V.SETID
AND  BP.VENDOR_ID = V.VENDOR_ID 

END-SELECT

END-PROCEDURE GET-MEDICAL-COVERAGE

!************************************************************************
!
! PROCEDURE : GET-MEDICAL-DEPENDENT-COUNT
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO DETERMINE THE NUMBER
!             OF DEPENDENTS WHO ARE ENROLLED IN MEDICAL COVERAGE          
!
!************************************************************************

BEGIN-PROCEDURE GET-MEDICAL-DEPENDENT-COUNT

LET #TALX_DEPENDENT_COUNT = 0

IF &HB.COVERAGE_ELECT = 'E'                                               
BEGIN-SELECT 
!COUNT(DISTINCT HD.DEPENDENT_BENEF) &HD.DEPENDENT_COUNT                   
COUNT(HD.DEPENDENT_BENEF) &HD.DEPENDENT_COUNT                             
    LET #TALX_DEPENDENT_COUNT = &HD.DEPENDENT_COUNT
FROM PS_HEALTH_DEPENDNT HD
WHERE HD.EMPLID           = $SAVE_EMPLID
AND   HD.EMPL_RCD         = 0
!AND   HD.PLAN_TYPE LIKE '1%'                                             
AND   HD.PLAN_TYPE        = '10'                                          
AND   HD.EFFDT            = &HB.EFFDT                                     
AND   HD.DEPENDENT_BENEF <> ' '
!GROUP BY HD.DEPENDENT_BENEF                                              
END-SELECT
END-IF                                                                    

LET $TALX_TWN_DEPENDENT_COUNT  = EDIT(#TALX_DEPENDENT_COUNT,'99')

END-PROCEDURE GET-MEDICAL-DEPENDENT-COUNT

!************************************************************************
!
! PROCEDURE : GET-DENTAL-COVERAGE
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO DETERMINE OF THE
!             EMPLOYEE IN ENROLLED IN DENTAL COVERAGE
!
!************************************************************************

BEGIN-PROCEDURE GET-DENTAL-COVERAGE

LET $TALX_TWN_DENT_COV_AVAIL       = 'N'
LET $TALX_TWN_DENT_COV_ENR         = 'N'
LET $TALX_TWN_DENT_COV_ELIG        = 'N'
LET $TALX_TWN_DENT_CARRIER         = ' '
LET $TALX_TWN_DENT_COV_START_DT    = ' '
LET $TALX_TWN_DENT_COV_TERM_DT     = ' '
LET $TALX_TWN_DENT_COV_CD          = ' '
LET $TALX_TWN_DENT_GROUP           = ' '
LET $TALX_TWN_DENT_POLICY          = ' '

LET $TALX_TWN_DENT_CARRIER_ADDR1   = ''
LET $TALX_TWN_DENT_CARRIER_ADDR2   = ''
LET $TALX_TWN_DENT_CARRIER_CITY    = ''
LET $TALX_TWN_DENT_CARRIER_STATE   = ''
LET $TALX_TWN_DENT_CARRIER_POSTAL  = ''
LET $TALX_DENT_CARRIER_PHONE       = ''
LET $TALX_TWN_DENT_CARRIER_COUNTRY = ''

BEGIN-SELECT
DB.COVERAGE_BEGIN_DT
DB.COVERAGE_END_DT
DB.COVRG_CD
DB.BENEFIT_PLAN
DB.COVERAGE_ELECT
DP.SETID
DP.VENDOR_ID
DP.GROUP_NBR
V2.NAME1
    LET $TALX_TWN_DENT_COV_AVAIL         = 'Y'           ! OK, AT LEAST DENTAL COVERAGE IS OFFERED TO THE EMPLOYEE
    LET $TALX_TWN_DENT_GROUP             = RTRIM(&DP.GROUP_NBR,' ')
    LET $SETID                           = &DP.SETID
    LET $VENDOR_ID                       = &DP.VENDOR_ID
    LET $GROUP                           = &DP.GROUP_NBR
    DO GET-POLICY-NUMBER
    LET $TALX_TWN_DENT_POLICY            = $TWN_POLICY
    LET $OPTION                          = 'D' 
    DO GET-VENDOR-ADDRESS-PHONE
    IF &DB.COVERAGE_ELECT = 'E' 
        LET $TALX_TWN_DENT_COV_ELIG      = 'Y'           ! IF EMPLOYEE HAS ELECTED, EMPLOYEE IS ELIGIBLE & ENROLLED
        LET $TALX_TWN_DENT_COV_ENR       = 'Y'
        !LET $TALX_TWN_DENT_CARRIER       = RTRIM(&DP.VENDOR_ID,' ')
	LET $TALX_TWN_DENT_CARRIER       = RTRIM(&V2.NAME1,' ')
        LET $TALX_TWN_DENT_COV_START_DT  = EDIT(&DB.COVERAGE_BEGIN_DT,'YYYYMMDD')
        LET $TALX_TWN_DENT_COV_TERM_DT   = EDIT(&DB.COVERAGE_END_DT,'YYYYMMDD')
    END-IF
    IF &DB.COVERAGE_ELECT = 'W'
        LET $TALX_TWN_DENT_COV_ELIG  = 'Y'           ! IF EMPLOYEE HAS WAIVED, EMPLOYEE IS ELIGIBLE & BUT NOT ENROLLED
        LET $TALX_TWN_DENT_COV_ENR   = 'N'
    END-IF
    IF &DB.COVERAGE_ELECT = 'T'                     ! IF EMPLOYEE HAS TERMED ELECTION, EMPLOYEE IS NOT ELIGIBLE & NOT ENROLLED
        LET $TALX_TWN_DENT_COV_ELIG  = 'N'
        LET $TALX_TWN_DENT_COV_ENR   = 'N'
    END-IF
FROM PS_HEALTH_BENEFIT DB,
     PS_BENEF_PLAN_TBL DP,
     PS_VENDOR V2
WHERE DB.EMPLID       = $SAVE_EMPLID
AND   DB.EMPL_RCD     = 0
AND   DB.PLAN_TYPE    = '11'
AND   DB.EFFDT        = (SELECT MAX(DB1.EFFDT)   
                         FROM PS_HEALTH_BENEFIT DB1
                         WHERE DB1.EMPLID           = DB.EMPLID
                         AND   DB1.EMPL_RCD         = DB.EMPL_RCD
                         AND   DB1.COBRA_EVENT_ID   = DB.COBRA_EVENT_ID
                         AND   DB1.PLAN_TYPE        = DB.PLAN_TYPE
                         AND   DB1.BENEFIT_NBR      = DB.BENEFIT_NBR
                         AND   DB1.EFFDT           <= $TALX_AS_OF_DATE_NATIVE)
AND   DP.PLAN_TYPE    = DB.PLAN_TYPE
AND   DP.BENEFIT_PLAN = DB.BENEFIT_PLAN
AND   DP.EFFDT        = (SELECT MAX(DP1.EFFDT)
                         FROM PS_BENEF_PLAN_TBL DP1
                         WHERE DP1.PLAN_TYPE     = DP.PLAN_TYPE
                         AND   DP1.BENEFIT_PLAN  = DP.BENEFIT_PLAN
                         AND   DP1.EFFDT        <= $TALX_AS_OF_DATE_NATIVE)
AND  DP.SETID = V2.SETID
AND  DP.VENDOR_ID = V2.VENDOR_ID 
END-SELECT

END-PROCEDURE GET-DENTAL-COVERAGE

!************************************************************************
!
! PROCEDURE : GET-POLICY-NUMBER
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE POLICY 
!             NUMBER (IF DEFINED) FROM THE POLICY MASTER 
!
!************************************************************************

BEGIN-PROCEDURE GET-POLICY-NUMBER

LET $TWN_POLICY  = ' '

BEGIN-SELECT
PPT.POLICY_NBR
    LET $TWN_POLICY  = RTRIM(&PPT.POLICY_NBR,' ')
FROM PS_VENDOR_POLICY PPT
WHERE PPT.SETID     = $SETID
AND   PPT.VENDOR_ID = $VENDOR_ID
AND   PPT.GROUP_NBR = $GROUP
END-SELECT

END-PROCEDURE GET-POLICY-NUMBER

!************************************************************************
!
! PROCEDURE : GET-VENDOR-ADDRESS-PHONE
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE MEDICAL
!             VENDOR MAILING ADDRESS
!
!************************************************************************

BEGIN-PROCEDURE GET-VENDOR-ADDRESS-PHONE

BEGIN-SELECT LOOPS=1
VA.ADDRESS1
VA.ADDRESS2
VA.CITY
VA.STATE
VA.POSTAL
VA.COUNTRY
    IF $OPTION = 'M'
        LET $TALX_TWN_MED_CARRIER_ADDR1      = RTRIM(&VA.ADDRESS1,' ')
        LET $TALX_TWN_MED_CARRIER_ADDR2      = RTRIM(&VA.ADDRESS2,' ')
        LET $TALX_TWN_MED_CARRIER_CITY       = RTRIM(&VA.CITY,' ')
        LET $TALX_TWN_MED_CARRIER_STATE      = RTRIM(&VA.STATE,' ')
        LET $TALX_TWN_MED_CARRIER_POSTAL     = RTRIM(&VA.POSTAL,' ')
        LET $TALX_TWN_MED_CARRIER_COUNTRY    = RTRIM(&VA.COUNTRY,' ')
     END-IF
    IF $OPTION = 'D'
        LET $TALX_TWN_DENT_CARRIER_ADDR1     = RTRIM(&VA.ADDRESS1,' ')
        LET $TALX_TWN_DENT_CARRIER_ADDR2     = RTRIM(&VA.ADDRESS2,' ')
        LET $TALX_TWN_DENT_CARRIER_CITY      = RTRIM(&VA.CITY,' ')
        LET $TALX_TWN_DENT_CARRIER_STATE     = RTRIM(&VA.STATE,' ')
        LET $TALX_TWN_DENT_CARRIER_POSTAL    = RTRIM(&VA.POSTAL,' ')
        LET $TALX_TWN_DENT_CARRIER_COUNTRY   = RTRIM(&VA.COUNTRY,' ')
    END-IF
    IF $OPTION = 'V'
        LET $TALX_TWN_VISION_CARRIER_ADDR1   = RTRIM(&VA.ADDRESS1,' ')
        LET $TALX_TWN_VISION_CARRIER_ADDR2   = RTRIM(&VA.ADDRESS2,' ')
        LET $TALX_TWN_VISION_CARRIER_CITY    = RTRIM(&VA.CITY,' ')
        LET $TALX_TWN_VISION_CARRIER_STATE   = RTRIM(&VA.STATE,' ')
        LET $TALX_TWN_VISION_CARRIER_POSTAL  = RTRIM(&VA.POSTAL,' ')
        LET $TALX_TWN_VISION_CARRIER_COUNTRY = RTRIM(&VA.COUNTRY,' ')
    END-IF
FROM PS_VENDOR_ADDR VA
WHERE VA.SETID           = $SETID
AND   VA.VENDOR_ID       = $VENDOR_ID
AND   VA.ADDRESS_SEQ_NUM = (SELECT MIN(VA1.ADDRESS_SEQ_NUM)   
                            FROM PS_VENDOR_ADDR VA1
                            WHERE VA1.SETID     = VA.SETID
                            AND   VA1.VENDOR_ID = VA.VENDOR_ID)
AND    VA.EFFDT          = (SELECT MAX(VA2.EFFDT)   
                            FROM PS_VENDOR_ADDR VA2
                            WHERE VA2.SETID            = VA.SETID
                            AND   VA2.VENDOR_ID        = VA.VENDOR_ID
                            AND   VA2.ADDRESS_SEQ_NUM  = VA.ADDRESS_SEQ_NUM
                            AND   VA2.EFFDT           <= $TALX_AS_OF_DATE_NATIVE)
END-SELECT

BEGIN-SELECT LOOPS=1
VP.PHONE
    LET $HOLD_PHONE = &VP.PHONE
    DO STRIP-PHONE-NUMBER
    IF $OPTION = 'M'
        LET $TALX_MED_CARRIER_PHONE     = $HOLD_PHONE
    END-IF
    IF $OPTION = 'D'
        LET $TALX_DENT_CARRIER_PHONE    = $HOLD_PHONE
    END-IF
    IF $OPTION = 'V'
        LET $TALX_VISION_CARRIER_PHONE  = $HOLD_PHONE
    END-IF
FROM PS_VNDR_CNTCT_PHN VP
WHERE VP.SETID           = $SETID
AND   VP.VENDOR_ID       = $VENDOR_ID
AND   VP.CNTCT_SEQ_NUM   = (SELECT MIN(VP1.CNTCT_SEQ_NUM)   
                            FROM PS_VNDR_CNTCT_PHN VP1
                            WHERE VP1.SETID     = VP.SETID
                            AND   VP1.VENDOR_ID = VP.VENDOR_ID)
AND   VP.EFFDT           = (SELECT MAX(VP2.EFFDT)   
                            FROM PS_VNDR_CNTCT_PHN VP2
                            WHERE VP2.SETID          = VP.SETID
                            AND   VP2.VENDOR_ID      = VP.VENDOR_ID
                            AND   VP2.CNTCT_SEQ_NUM  = VP.CNTCT_SEQ_NUM
                            AND   VP2.EFFDT          <= $TALX_AS_OF_DATE_NATIVE)
END-SELECT

END-PROCEDURE GET-VENDOR-ADDRESS-PHONE

!************************************************************************
!
! PROCEDURE : GET-VISION-COVERAGE
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO DETERMINE IF THE
!             EMPLOYEE HAS VISION COVERAGE
!
!************************************************************************

BEGIN-PROCEDURE GET-VISION-COVERAGE

LET $TALX_TWN_VISION_COV_AVAIL       = 'N'
LET $TALX_TWN_VISION_COV_ENR         = 'N'
LET $TALX_TWN_VISION_COV_ELIG        = 'N'
LET $TALX_TWN_VISION_CARRIER         = ' '
LET $TALX_TWN_VISION_COV_START_DT    = ' '
LET $TALX_TWN_VISION_COV_TERM_DT     = ' '
LET $TALX_TWN_VISION_COV_CD          = ' '
LET $TALX_TWN_VISION_POLICY          = ''
LET $TALX_TWN_VISION_GROUP           = ''

LET $TALX_TWN_VISION_CARRIER_ADDR1   = ''
LET $TALX_TWN_VISION_CARRIER_ADDR2   = ''
LET $TALX_TWN_VISION_CARRIER_CITY    = ''
LET $TALX_TWN_VISION_CARRIER_STATE   = ''
LET $TALX_TWN_VISION_CARRIER_POSTAL  = ''
LET $TALX_VISION_CARRIER_PHONE       = ''
LET $TALX_TWN_VISION_CARRIER_COUNTRY = ''

BEGIN-SELECT
VB.COVERAGE_BEGIN_DT
VB.COVERAGE_END_DT
VB.COVRG_CD
VB.BENEFIT_PLAN
VB.COVERAGE_ELECT
VP.SETID
VP.VENDOR_ID
VP.GROUP_NBR
    LET $TALX_TWN_VISION_COV_AVAIL        = 'Y'           ! OK, IS VISION COVERAGE AT LEAST OFFERED TO THE EMPLOYEE
    LET $TALX_TWN_VISION_GROUP            = RTRIM(&VP.GROUP_NBR,' ')
    LET $SETID                            = &VP.SETID
    LET $VENDOR_ID                        = &VP.VENDOR_ID
    LET $GROUP                            = &VP.GROUP_NBR
    DO GET-POLICY-NUMBER
    LET $TALX_TWN_VISION_POLICY           = $TWN_POLICY
    LET $OPTION                           = 'V'
    DO GET-VENDOR-ADDRESS-PHONE
    IF &VB.COVERAGE_ELECT = 'E' 
        LET $TALX_TWN_VISION_COV_ELIG     = 'Y'           ! IF EMPLOYEE HAS ELECTED, EMPLOYEE IS ELIGIBLE & ENROLLED
        LET $TALX_TWN_VISION_COV_ENR      = 'Y'
        LET $TALX_TWN_VISION_CARRIER      = RTRIM(&VP.VENDOR_ID,' ')
        LET $TALX_TWN_VISION_COV_START_DT = EDIT(&VB.COVERAGE_BEGIN_DT,'YYYYMMDD')
        LET $TALX_TWN_VISION_COV_TERM_DT  = EDIT(&VB.COVERAGE_END_DT,'YYYYMMDD')
    END-IF
    IF &VB.COVERAGE_ELECT = 'W'
        LET $TALX_TWN_VISION_COV_ELIG     = 'Y'           ! IF EMPLOYEE HAS WAIVED, EMPLOYEE IS ELIGIBLE & BUT NOT ENROLLED
        LET $TALX_TWN_VISION_COV_ENR      = 'N'
    END-IF
    IF &VB.COVERAGE_ELECT = 'T'                     ! IF EMPLOYEE HAS TERMED ELECTION, EMPLOYEE IS NOT ELIGIBLE & NOT ENROLLED
        LET $TALX_TWN_VISION_COV_ELIG     = 'N'
        LET $TALX_TWN_VISION_COV_ENR      = 'N'
    END-IF
FROM PS_HEALTH_BENEFIT VB,
     PS_BENEF_PLAN_TBL VP
WHERE VB.EMPLID      = $SAVE_EMPLID
AND   VB.EMPL_RCD    = 0
AND   VB.PLAN_TYPE   = '14'
AND   VB.EFFDT       = (SELECT MAX(VB1.EFFDT)   
                        FROM PS_HEALTH_BENEFIT VB1
                        WHERE VB1.EMPLID          = VB.EMPLID
                        AND   VB1.EMPL_RCD        = VB.EMPL_RCD
                        AND   VB1.COBRA_EVENT_ID  = VB.COBRA_EVENT_ID
                        AND   VB1.PLAN_TYPE       = VB.PLAN_TYPE
                        AND   VB1.BENEFIT_NBR     = VB.BENEFIT_NBR
                        AND   VB1.EFFDT          <= $TALX_AS_OF_DATE_NATIVE)
AND   VP.PLAN_TYPE    = VB.PLAN_TYPE
AND   VP.BENEFIT_PLAN = VB.BENEFIT_PLAN
AND   VP.EFFDT        = (SELECT MAX(VP1.EFFDT)
                         FROM PS_BENEF_PLAN_TBL VP1
                         WHERE VP1.PLAN_TYPE     = VP.PLAN_TYPE
                         AND   VP1.BENEFIT_PLAN  = VP.BENEFIT_PLAN
                         AND   VP1.EFFDT        <= $TALX_AS_OF_DATE_NATIVE)
END-SELECT

END-PROCEDURE GET-VISION-COVERAGE

!************************************************************************
!
! PROCEDURE : GET-DEP-COVG-AVAIL
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO DETERMINE IF DEPENDENT
!             MEDICAL COVERAGE IS AVAILABLE
!
!************************************************************************

BEGIN-PROCEDURE GET-DEP-COVG-AVAIL

LET $TALX_TWN_DEP_COV_AVAIL  = 'N'

BEGIN-SELECT
BPP.BENEFIT_PROGRAM
    LET $TALX_TWN_DEP_COV_AVAIL  = 'Y'
FROM PS_BEN_PROG_PARTIC BPP,
     PS_BEN_PROG_BENCVC BPB
WHERE BPP.EMPLID          = $SAVE_EMPLID
AND   BPP.EMPL_RCD        = 0
AND   BPP.EFFDT           = (SELECT MAX(BPP1.EFFDT)
                             FROM PS_BEN_PROG_PARTIC BPP1
                             WHERE BPP1.EMPLID    = BPP.EMPLID
                             AND   BPP1.EMPL_RCD  = BPP.EMPL_RCD
                             AND   BPP1.EFFDT    <= $TALX_AS_OF_DATE_NATIVE)
AND   BPB.BENEFIT_PROGRAM = BPP.BENEFIT_PROGRAM
AND   BPB.PLAN_TYPE       = '10'
AND   BPB.BENEFIT_PLAN    = &HB.BENEFIT_PLAN
AND   BPB.COVRG_CD IN ('3','4')
AND   BPB.EFFDT           = (SELECT MAX(BPB1.EFFDT)
                             FROM PS_BEN_PROG_BENCVC BPB1
                             WHERE BPB1.BENEFIT_PROGRAM  = BPB.BENEFIT_PROGRAM
                             AND   BPB1.EFFDT           <= $TALX_AS_OF_DATE_NATIVE
                             AND   BPB1.PLAN_TYPE        = BPB.PLAN_TYPE
                             AND   BPB1.BENEFIT_PLAN     = BPB.BENEFIT_PLAN
                             AND   BPB1.COVRG_CD         = BPB.COVRG_CD)
END-SELECT
                       
END-PROCEDURE GET-DEP-COVG-AVAIL

!************************************************************************
!
! PROCEDURE : GET-DEPENDENTS
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET UP TO SEVEN
!             DEPENDENTS TO PASS
!
!************************************************************************

BEGIN-PROCEDURE GET-DEPENDENTS

LET #I                 = 0
LET $TALX_DEP_LAST_01  = ''
LET $TALX_DEP_LAST_02  = ''
LET $TALX_DEP_LAST_03  = ''
LET $TALX_DEP_LAST_04  = ''
LET $TALX_DEP_LAST_05  = ''
LET $TALX_DEP_LAST_06  = ''
LET $TALX_DEP_LAST_07  = ''
LET $TALX_DEP_FIRST_01 = ''
LET $TALX_DEP_FIRST_02 = ''
LET $TALX_DEP_FIRST_03 = ''
LET $TALX_DEP_FIRST_04 = ''
LET $TALX_DEP_FIRST_05 = ''
LET $TALX_DEP_FIRST_06 = ''
LET $TALX_DEP_FIRST_07 = ''
LET $TALX_DEP_MI_01    = ''
LET $TALX_DEP_MI_02    = ''
LET $TALX_DEP_MI_03    = '' 
LET $TALX_DEP_MI_04    = ''
LET $TALX_DEP_MI_05    = ''
LET $TALX_DEP_MI_06    = ''
LET $TALX_DEP_MI_07    = ''
LET $TALX_DEP_BIRTH_01 = ''
LET $TALX_DEP_BIRTH_02 = ''
LET $TALX_DEP_BIRTH_03 = ''
LET $TALX_DEP_BIRTH_04 = ''
LET $TALX_DEP_BIRTH_05 = ''
LET $TALX_DEP_BIRTH_06 = ''
LET $TALX_DEP_BIRTH_07 = ''
LET $TALX_DEP_NID_01   = ''
LET $TALX_DEP_NID_02   = ''
LET $TALX_DEP_NID_03   = ''
LET $TALX_DEP_NID_04   = ''
LET $TALX_DEP_NID_05   = ''
LET $TALX_DEP_NID_06   = ''
LET $TALX_DEP_NID_07   = ''

IF &HB.COVERAGE_ELECT = 'E'
BEGIN-SELECT
DE.DEPENDENT_BENEF
DE.BIRTHDATE
DE.NAME
DE.FIRST_NAME
DE.LAST_NAME
DE.MIDDLE_NAME
    LET $TWN_FIRST_NAME  = EDIT(&DE.FIRST_NAME,'XXXXXXXXXXXXXXX')
    LET $TWN_LAST_NAME   = EDIT(&DE.LAST_NAME,'XXXXXXXXXXXXXXXXXXXX')
    LET $TWN_MID_INIT    = EDIT(&DE.MIDDLE_NAME,'X')
    IF $TWN_MID_INIT = ''
        LET $TWN_MID_INIT = ' '
    END-IF
    DO GET-DEPENDENT-NID
    LET $TWN_BIRTHDATE   = EDIT(&DE.BIRTHDATE,'YYYYMMDD')
    LET #I = #I + 1
    EVALUATE #I 
        WHEN = 1
            LET $TALX_DEP_LAST_01  = $TWN_LAST_NAME
            LET $TALX_DEP_FIRST_01 = $TWN_FIRST_NAME
            LET $TALX_DEP_MI_01    = $TWN_MID_INIT
            LET $TALX_DEP_BIRTH_01 = $TWN_BIRTHDATE
            LET $TALX_DEP_NID_01   = $DEP_NID
            BREAK
        WHEN = 2
            LET $TALX_DEP_LAST_02  = $TWN_LAST_NAME
            LET $TALX_DEP_FIRST_02 = $TWN_FIRST_NAME
            LET $TALX_DEP_MI_02    = $TWN_MID_INIT
            LET $TALX_DEP_BIRTH_02 = $TWN_BIRTHDATE
            LET $TALX_DEP_NID_02   = $DEP_NID
            BREAK
        WHEN = 3
            LET $TALX_DEP_LAST_03  = $TWN_LAST_NAME
            LET $TALX_DEP_FIRST_03 = $TWN_FIRST_NAME
            LET $TALX_DEP_MI_03    = $TWN_MID_INIT
            LET $TALX_DEP_BIRTH_03 = $TWN_BIRTHDATE
            LET $TALX_DEP_NID_03   = $DEP_NID
            BREAK
        WHEN = 4
            LET $TALX_DEP_LAST_04  = $TWN_LAST_NAME
            LET $TALX_DEP_FIRST_04 = $TWN_FIRST_NAME
            LET $TALX_DEP_MI_04    = $TWN_MID_INIT
            LET $TALX_DEP_BIRTH_04 = $TWN_BIRTHDATE
            LET $TALX_DEP_NID_04   = $DEP_NID
            BREAK
        WHEN = 5
            LET $TALX_DEP_LAST_05  = $TWN_LAST_NAME
            LET $TALX_DEP_FIRST_05 = $TWN_FIRST_NAME
            LET $TALX_DEP_MI_05    = $TWN_MID_INIT
            LET $TALX_DEP_BIRTH_05 = $TWN_BIRTHDATE
            LET $TALX_DEP_NID_05   = $DEP_NID
            BREAK
        WHEN = 6
            LET $TALX_DEP_LAST_06  = $TWN_LAST_NAME
            LET $TALX_DEP_FIRST_06 = $TWN_FIRST_NAME
            LET $TALX_DEP_MI_06    = $TWN_MID_INIT
            LET $TALX_DEP_BIRTH_06 = $TWN_BIRTHDATE
            LET $TALX_DEP_NID_06   = $DEP_NID
            BREAK
        WHEN = 7
            LET $TALX_DEP_LAST_07  = $TWN_LAST_NAME
            LET $TALX_DEP_FIRST_07 = $TWN_FIRST_NAME
            LET $TALX_DEP_MI_07    = $TWN_MID_INIT
            LET $TALX_DEP_BIRTH_07 = $TWN_BIRTHDATE
            LET $TALX_DEP_NID_07   = $DEP_NID
    END-EVALUATE
FROM PS_DEPENDENT_BENEF DE
WHERE DE.EMPLID = $SAVE_EMPLID
  AND EXISTS (SELECT 'X' FROM PS_HEALTH_DEPENDNT MD                  
              WHERE MD.EMPLID          = $SAVE_EMPLID                
                AND MD.PLAN_TYPE       = '10'                        
                AND MD.EFFDT           = &HB.EFFDT                   
                AND MD.DEPENDENT_BENEF = DE.DEPENDENT_BENEF)         
ORDER BY DE.DEPENDENT_BENEF
END-SELECT
END-IF

END-PROCEDURE GET-DEPENDENTS

!************************************************************************
!
! PROCEDURE : GET-DEPENDENT-NID
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO GET THE DEPENDENTS
!             NATIONAL ID 
!
! NOTE      : WE ARE ONLY INTERESTED IN SSN'S, WHICH, BY NATURE ARE
!             FOR COUNTRY = 'USA' AND NATIONAL_ID_TYPE OF 'PR', HENCE,
!             THEY ARE HARD-CODED
!
!************************************************************************

BEGIN-PROCEDURE GET-DEPENDENT-NID

LET $DEP_NID = ''

BEGIN-SELECT
DN.NATIONAL_ID
    LET $DEP_NID = RTRIM(&DN.NATIONAL_ID,' ')
FROM PS_DEP_BENEF_NID  DN
WHERE DN.EMPLID           = $SAVE_EMPLID
AND   DN.DEPENDENT_BENEF  = &DE.DEPENDENT_BENEF
AND   DN.COUNTRY          = 'USA'
AND   DN.NATIONAL_ID_TYPE = 'PR'
END-SELECT

END-PROCEDURE GET-DEPENDENT-NID

!************************************************************************
!
! PROCEDURE : WRITE-TALX-TWN-RECORDS
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO DETERMINE WHICH
!             RECORD TYPES ARE TO BE WRITTEN TO THE OUTPUT FILES
!
!************************************************************************

BEGIN-PROCEDURE WRITE-TALX-TWN-RECORDS

   !show 'in WRITE-TALX-TWN-RECORDS for ee ' $save_emplid ' ' #save_empl_rcd

IF &TI.GEX_TALX_PY_OR_BTH = 'P'               ! IF CREATING PAYROLL DATA ONLY
    DO WRITE-TWN-PAYROLL-RECORD
    DO WRITE-TWN-UID-RECORD 
ELSE
    LET $HOLD_TWN_MED_COV_ENR  = $TALX_TWN_MED_COV_ENR     
    LET $HOLD_TWN_MED_CARRIER  = $TALX_TWN_MED_CARRIER     
    LET $HOLD_TWN_DENT_COV_ENR = $TALX_TWN_DENT_COV_ENR    
    LET $HOLD_TWN_DENT_CARRIER = $TALX_TWN_DENT_CARRIER    
    LET $TALX_TWN_MED_COV_ENR  = ' '                       
    LET $TALX_TWN_MED_CARRIER  = ' '                       
    LET $TALX_TWN_DENT_COV_ENR = ' '                       
    LET $TALX_TWN_DENT_CARRIER = ' '                       
    DO WRITE-TWN-PAYROLL-RECORD                            
    DO WRITE-TWN-UID-RECORD 
    LET $TALX_TWN_MED_COV_ENR  = $HOLD_TWN_MED_COV_ENR     
    LET $TALX_TWN_MED_CARRIER  = $HOLD_TWN_MED_CARRIER     
    LET $TALX_TWN_DENT_COV_ENR = $HOLD_TWN_DENT_COV_ENR    
    LET $TALX_TWN_DENT_CARRIER = $HOLD_TWN_DENT_CARRIER    
    DO WRITE-TWN-BENEFITS-RECORD                           
END-IF

    

END-PROCEDURE WRITE-TALX-TWN-RECORDS

!************************************************************************
!
! PROCEDURE : WRITE-TWN-PAYROLL-RECORD
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO WRITE THE PAYROLL DATA
!             TO THE OUTPUT FILE
!
!************************************************************************

BEGIN-PROCEDURE WRITE-TWN-PAYROLL-RECORD

	if $TALX_TWN_MED_COV_ENR = 'N'
	   let $TALX_TWN_MED_COV_ENR = 'Y'	
           let  $TALX_TWN_MED_CARRIER = 'No medical coverage'
	end-if 

	if $TALX_TWN_DENT_COV_ENR = 'N'
	    let $TALX_TWN_DENT_COV_ENR ='Y'
	    let $TALX_TWN_DENT_CARRIER = 'No dental coverage'
	end-if 
 
 let $gex_talx_fld1 =
         rpad($GEX_TALX_CLIENT_ID,5,' ') || rpad($TWN_SSN,11,' ' ) || rpad($TALX_TWN_EE_PIN,8,' ') ||
	 rpad($TALX_SERVICE_DATE,8,' ') || rpad(substr($TALX_TWN_LAST_NAME,1,20),20,' ') || rpad(substr($TALX_TWN_FIRST_NAME,1,15),15,' ') || rpad(substr($TALX_TWN_MID_INITIAL,1,1),1,' ') ||
         rpad($SAVE_COMPANY,12,' ') || rpad(substr($TALX_TWN_ADDRESS1,1,30),30,' ') || rpad(substr($TALX_TWN_ADDRESS2,1,30),30,' ') ||
         rpad(substr($TALX_TWN_CITY,1,20),20,' ') || rpad($TALX_TWN_STATE,2,' ') || rpad($TALX_TWN_ZIP,10,' ') ||
         rpad($TALX_AS_OF_DATE,8,' ') || rpad($TALX_TWN_JOB_POSITION,31,' ') || rpad($GEX_TALX_EMPL_STS,1,' ') ||
         rpad($TALX_HIRE_DATE,8,' ') || rpad($TALX_TWN_YRS_SERVICE,3,' ') || rpad($TALX_TWN_MTHS_SERVICE,2,' ') ||
         rpad($TALX_TWN_TERM_DATE,8,' ') || rpad($TALX_TWN_COMPRATE,11,' ') || rpad($TALX_COMP_FREQUENCY,2,' ') ||
         rpad($TALX_TWN_HOURS_PER_WK,3,' ') || rpad($TALX_TWN_CURR_YTD_REGULAR,11,' ') || rpad($TALX_TWN_CURR_YTD_OVT,11,' ') ||
         rpad($TALX_TWN_CURR_YTD_BONUS,11,' ') || rpad($TALX_TWN_CURR_YTD_COMMISSION,11,' ') || rpad($TALX_TWN_CURR_YTD_OTHER,11,' ') ||
         rpad($TALX_TWN_CURR_YTD_TOTAL_COMP,13,' ') || rpad($TALX_TWN_LAST_YTD_REGULAR,11,' ') || rpad($TALX_TWN_LAST_YTD_OVT,11,' ') ||
         rpad($TALX_TWN_LAST_YTD_BONUS,11,' ') || rpad($TALX_TWN_LAST_YTD_COMMISSION,11,' ') || rpad($TALX_TWN_LAST_YTD_OTHER,11,' ') ||
         rpad($TALX_TWN_LAST_YTD_TOTAL_COMP,13,' ') || rpad($TALX_TWN_PREV_YTD_REGULAR,11,' ') || rpad($TALX_TWN_PREV_YTD_OVT,11,' ') ||
         rpad($TALX_TWN_PREV_YTD_BONUS,11,' ') || rpad($TALX_TWN_PREV_YTD_COMMISSION,11,' ') || rpad($TALX_TWN_PREV_YTD_OTHER,11,' ') ||
         rpad($TALX_TWN_PREV_YTD_TOTAL_COMP,13,' ') || rpad($FILLER,8,' ') || rpad($FILLER,11,' ') ||
         rpad($SAVE_LAST_INCREASE_DT,8,' ') || rpad($TALX_TWN_AMOUNT_OF_LAST_INCREASE,11,' ') || rpad($FILLER,1,' ') ||
         rpad($FILLER,1,' ') || rpad($FILLER,1,' ') || rpad($FILLER,4,' ') || rpad($FILLER,8,' ') ||
         rpad($FILLER,8,' ') || rpad($TALX_PAY_END_DT,8,' ') || rpad($TALX_CHECK_DT,8,' ') || 
	 rpad($TALX_TWN_CHECK_HOURS,6,' ') || rpad($TALX_TWN_GROSS_AMT,11,' ') || rpad($TALX_TWN_NET_PAY,11,' ') ||
	 rpad($TALX_TWN_PENSION_INCOME,11,' ') || rpad($TALX_TWN_OTHER_PAY,11,' ') || rpad($TALX_TWN_DED_CAFETERIA,11,' ') ||
         rpad($TALX_TWN_DED_RETIREMENT,11,' ') || rpad($TALX_TWN_TAX_FEDERAL,11,' ') || rpad($TALX_TWN_TAX_STATE,11,' ') || 
         rpad($TALX_TWN_TAX_LOCAL,11,' ') || rpad($TALX_TWN_TAX_FICA,11,' ') || rpad($TALX_TWN_TAX_MEDICARE,11,' ') ||          
         rpad($TALX_TWN_GARNISHMENTS,11,' ') || rpad($TALX_TWN_DED_OTHER,11,' ') || rpad($TALX_TWN_MED_DED,8,' ') ||                
         rpad($FILLER,2,' ') || rpad($FILLER,1,' ') || rpad($FILLER,30,' ') || rpad($FILLER,8,' ') ||
         rpad($FILLER,8,' ') || rpad($FILLER,1,' ') || rpad($FILLER,12,' ') || rpad($TALX_FEDERAL_EIN,15,' ') ||
         rpad($FILLER,10,' ') || rpad($FILLER,6,' ') || rpad(substr($TALX_TWN_WORK_LOC_ADDR1,1,30),30,' ') || 
         rpad(substr($TALX_TWN_WORK_LOC_ADDR2,1,30),30,' ') || rpad(substr($TALX_TWN_WORK_LOC_CITY,1,20),20,' ') || rpad($TALX_TWN_WORK_LOC_STATE,2,' ') ||
         rpad($TALX_TWN_WORK_LOC_POSTAL,10,' ') || rpad($TALX_BIRTHDATE,8,' ') || rpad($TALX_ORIG_HIRE_DT,8,' ') ||
         rpad($GEX_TALX_TERM_CD,2,' ') || rpad($TALX_PAY_FREQUENCY,2,' ') || rpad($FILLER,1,' ') ||
         rpad($FILLER,15,' ') || rpad($TALX_TWN_MED_COV_ENR,1,' ') || rpad(substr($TALX_TWN_MED_CARRIER,1,24),24,' ') ||
         rpad($TALX_TWN_DENT_COV_ENR,1,' ') || rpad(substr($TALX_TWN_DENT_CARRIER,1,24),24,' ') || rpad($TALX_TWN_EMPLOYEE_HOME_PHONE,10,' ') || rpad($TALX_TWN_EMPLOYEE_HOME_COUNTRY,30,' ')

 !show  '$gex_talx_fld1 '$gex_talx_fld1

 let $gex_talx_fld2 =   
         rpad($TALX_TWN_WORK_LOC_COUNTRY,30,' ') || rpad($TALX_PAYROLL_MASTER,1,' ') || rpad($TALX_TWN_DATA_SOURCE_ID,5,' ') ||
         rpad($TALX_DATA_SOURCE_TYPE,20,' ')
	 	 
 let $gex_talx_fld3 = rpad($disclaimer_one,60,' ')  ||
		      rpad($FILLER,540,' ')     
 let $gex_talx_fld4 = rpad($FILLER,600,' ')  

 
END-PROCEDURE WRITE-TWN-PAYROLL-RECORD

!************************************************************************
Begin-Procedure Insert-Into-Temp
!************************************************************************
#debug9 Show 'Insert-Into-Temp'

  #ifdef debug8
   show 'COMPANY '	 $SAVE_COMPANY
   show 'EMPLID	' $TWN_SSN
   show 'empl_rcd ' #SAVE_EMPL_RCD
   show 'GEX_AVG_ROW_LEN ' #service_in_mths
   show 'gex_talx_fld1 ' $gex_talx_fld1
   show 'gex_talx_fld2 ' $gex_talx_fld2
   show 'gex_talx_fld3 ' $gex_talx_fld3
   show 'gex_talx_fld4 ' $gex_talx_fld4
  #endif

  begin-sql 
    INSERT INTO ps_gex_r_gexhr675
               (COMPANY,
	              EMPLID,
		            EMPL_RCD,
                GEX_AVG_ROW_LEN,
                gex_talx_fld1,
                gex_talx_fld2,
                gex_talx_fld3,
                gex_talx_fld4)
        VALUES ($SAVE_COMPANY,
	              $TWN_SSN,
		            #SAVE_EMPL_RCD,
                #service_in_mths,
		            $gex_talx_fld1,
                $gex_talx_fld2,
                $gex_talx_fld3,
                $gex_talx_fld4)

  end-sql
end-procedure

!************************************************************************
BEGIN-PROCEDURE READ-FROM-TEMP
!************************************************************************

BEGIN-SELECT
R.COMPANY
R.EMPLID
R.EMPL_RCD
R.GEX_AVG_ROW_LEN
R.gex_talx_fld1
R.gex_talx_fld2
R.gex_talx_fld3
R.gex_talx_fld4
E03.TERMINATION_DT
J03.EMPL_STATUS

    let $talx_fld1 = &R.gex_talx_fld1
    let $talx_fld2 = &R.gex_talx_fld2
    let $talx_fld3 = &R.gex_talx_fld3
    let $talx_fld4 = &R.gex_talx_fld4

    let $save_emplid = &R.EMPLID
    LET $SAVE_TERMINATION_DT = &E03.TERMINATION_DT
    LET $SAVE_EMPL_STATUS= &J03.EMPL_STATUS
    !show 'emplid and $SAVE_TERMINATION_DT ' $save_emplid ' ' $SAVE_TERMINATION_DT
    do DETERMINE-TALX-EMPL-STATUS
    !show '$SAVE_EMPL_STATUS $GEX_TALX_EMPL_STS '  $SAVE_EMPL_STATUS ' ' $GEX_TALX_EMPL_STS 
    LET #TOTALEMPLOYEES           = #TOTALEMPLOYEES + 1                           
    EVALUATE $GEX_TALX_EMPL_STS                                                    
      WHEN = 'A'                                                                
        LET #TALXACTIVEEMPLOYEES   = #TALXACTIVEEMPLOYEES + 1                 
        BREAK                                                                 
      WHEN = 'I'                                                                
        LET #TALXINACTIVEEMPLOYEES = #TALXINACTIVEEMPLOYEES + 1               
        BREAK                                                                 
      WHEN = 'L'                                                                
        LET #TALXLEAVEEMPLOYEES    = #TALXLEAVEEMPLOYEES + 1                  
        BREAK                                                                 
      WHEN-OTHER                                                                
        LET #TALXOTHEREMPLOYEES    = #TALXOTHEREMPLOYEES + 1                  
    END-EVALUATE       

     WRITE 1 FROM $talx_fld1:998
                  $talx_fld2:56 
                  $talx_fld3:600
		              $talx_fld4:600

FROM ps_gex_r_gexhr675 R, PS_EMPLOYMENT E03, PS_JOB J03
where E03.EMPLID            = R.EMPLID
  AND E03.EMPL_RCD          = R.EMPL_RCD
  AND R.EMPLID              = J03.EMPLID
  AND R.EMPL_RCD            = J03.EMPL_RCD
  AND J03.EFFDT             = (SELECT MAX(J03A.EFFDT)FROM PS_JOB J03A
                               WHERE J03A.EMPLID    = J03.EMPLID
                               AND   J03A.EMPL_RCD  = J03.EMPL_RCD
                               AND   J03A.EFFDT    <= $TALX_AS_OF_DATE_NATIVE)
  AND   J03.EFFSEQ            = (SELECT MAX(J03B.EFFSEQ) FROM PS_JOB J03B
                               WHERE J03B.EMPLID   = J03.EMPLID
                               AND   J03B.EMPL_RCD = J03.EMPL_RCD
                               AND   J03B.EFFDT    = J03.EFFDT)
ORDER BY R.EMPLID, R.GEX_AVG_ROW_LEN

end-select
end-procedure

!************************************************************************
!
! PROCEDURE : WRITE-TWN-BENEFITS-RECORD
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO WRITE THE BENEFITS 
!             RECORD TO THE APPROPRIATE OUTPUT FILE
!
!************************************************************************

BEGIN-PROCEDURE WRITE-TWN-BENEFITS-RECORD

LET #TOTALEMPLOYEES           = #TOTALEMPLOYEES + 1                           
EVALUATE $GEX_TALX_EMPL_STS                                                    
    WHEN = 'A'                                                                
        LET #TALXACTIVEEMPLOYEES   = #TALXACTIVEEMPLOYEES + 1                 
        BREAK                                                                 
    WHEN = 'I'                                                                
        LET #TALXINACTIVEEMPLOYEES = #TALXINACTIVEEMPLOYEES + 1               
        BREAK                                                                 
    WHEN = 'L'                                                                
        LET #TALXLEAVEEMPLOYEES    = #TALXLEAVEEMPLOYEES + 1                  
        BREAK                                                                 
    WHEN-OTHER                                                                
        LET #TALXOTHEREMPLOYEES    = #TALXOTHEREMPLOYEES + 1                  
END-EVALUATE                                                                  

WRITE #BENEFITS_FILE_NUMBER FROM 'B':1                                    ! 0001-0001 RECORD TYPE 'B' ==============================> BENEFIT RECORD INDICATOR
                                 $GEX_TALX_CLIENT_ID:5                        ! 0002-0006 EMPLOYER COMPANY CODE - ASSIGNED BY TALX =====> EMPLOYEE LOGIN INFORMATION
                                 $TWN_SSN:11                              ! 0007-0017 EMPLOYEE SSN
                                 $TALX_BENEFITS_AS_OF_DATE:8              ! 0018-0025 BENFITS AS OF DATE
                                 $TALX_TWN_MED_COV_AVAIL:1                ! 0026-0026 MEDICAL INSURANCE AVAILABLE (Y/N) ============> INSUANCE COVERAGE INFORMATION
                                 $TALX_TWN_MED_COV_ELIG:1                 ! 0027-0027 EMPLOYEE ELIGIBLE FOR MEDICAL COVERAGE (Y/N)
                                 $TALX_TWN_MED_COV_ENR:1                  ! 0028-0028 EMPLOYEE ENROLLED FOR MEDICAL COVERAGE (Y/N)
                                 $FILLER:2                                ! 0029-0030 MEDICAL INELIGIBILITY REASON                              *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:8                                ! 0031-0038 MEDICAL INSURANCE ELIGIBILITY DATE                        *** THIS FIELD IS USER DEFINED ***
                                 $TALX_TWN_MED_COV_START_DT:8             ! 0039-0046 MEDICAL COVERAGE START DATE
                                 $TALX_TWN_MED_COV_TERM_DT:8              ! 0047-0054 MEDICAL COVERAGE TERMINATION DATE
                                 $TALX_TWN_MED_COV_CD:2                   ! 0055-0056 COVERAGE LEVEL
                                 $TALX_TWN_DEP_COV_AVAIL:1                ! 0057-0057 DEPENDENT CVG AVAILABLE (Y/N)
                                 $FILLER:8                                ! 0058-0065 PER PAYPERIOD COST TO ADD DEPENDENT                       *** THIS FIELD IS USER DEFINED ***
                                 $TALX_TWN_DEPENDENT_COUNT:2              ! 0066-0067 NUMBER OF DEPENDENT CURRENTLY COVERED
                                 $TALX_TWN_MED_CARRIER:30                 ! 0068-0097 MEDICAL CARRIER NAME
                                 $TALX_TWN_MED_POLICY:20                  ! 0098-0117 MEDICAL POLICY NUMBER
                                 $TALX_TWN_MED_GROUP:10                   ! 0118-0127 MEDICAL GROUP NUMBER
                                 $TALX_TWN_MED_CARRIER_ADDR1:30           ! 0128-0157 MEDICAL CARRIER ADDRESS 1
                                 $TALX_TWN_MED_CARRIER_ADDR2:30           ! 0158-0187 MEDICAL CARRIER ADDRESS 2
                                 $TALX_TWN_MED_CARRIER_CITY:20            ! 0188-0207 MEDICAL CARRIER CITY
                                 $TALX_TWN_MED_CARRIER_STATE:2            ! 0208-0209 MEDICAL CARRIER STATE
                                 $TALX_TWN_MED_CARRIER_POSTAL:10          ! 0210-0219 MEDICAL CARRIER ZIP CODE
                                 $TALX_MED_CARRIER_PHONE:10               ! 0220-0229 MEDICAL CARRIER PHONE NUMBER
                                 $TALX_TWN_DENT_COV_AVAIL:1               ! 0230-0230 DENTAL INSURANCE AVAILABLE (Y/N)
                                 $TALX_TWN_DENT_COV_ELIG:1                ! 0231-0231 EMPLOYEE ELIGIBLE FOR DENTAL COVERAGE (Y/N)
                                 $TALX_TWN_DENT_COV_ENR:1                 ! 0232-0232 EMPLOYEE ENROLLED FOR DENTAL COVERAGE (Y/N)
                                 $TALX_TWN_DENT_CARRIER:30                ! 0233-0262 DENTAL CARRIER NAME
                                 $TALX_TWN_DENT_POLICY:20                 ! 0263-0282 DENTAL POLICY NUMBER
                                 $TALX_DENT_CARRIER_PHONE:10              ! 0283-0292 DENTAL CARRIER PHONE
                                 $TALX_TWN_VISION_COV_AVAIL:1             ! 0293-0293 VISION INSURANCE AVAILABLE (Y/N)
                                 $TALX_TWN_VISION_COV_ELIG:1              ! 0294-0294 EMPLOYEE ELIGIBLE FOR VISION COVERAGE (Y/N)
                                 $TALX_TWN_VISION_COV_ENR:1               ! 0295-0295 EMPLOYEE ENROLLED IN VISION COVERAGE (Y/N)
                                 $TALX_TWN_VISION_CARRIER:30              ! 0296-0325 VISION CARRIER NAME
                                 $TALX_TWN_VISION_POLICY:20               ! 0326-0345 VISION POLICY NUMBER
                                 $TALX_VISION_CARRIER_PHONE:10            ! 0346-0355 VISION CARRIER PHONE
                                 $FILLER:1                                ! 0356-0356 PARTICIPATING IN MEDICAL COBRA (Y/N)                      *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:8                                ! 0357-0364 NEXT OPEN ENROLLMENT DATE                                 *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:8                                ! 0365-0372 ANNUAL MEDICAL INSURANCE COST FOR THE EMPLOYEE (99999.99) *** THIS FIELD IS USER DEFINED ***
                                 $TALX_TWN_MED_CARRIER_COUNTRY:30         ! 0373-0402 MEDICAL CARRIER COUNTRY
                                 $TALX_BENEFITS_MASTER:1                  ! 0403-0403 BENEFITS MASTER RECORD (Y/N)
                                 $TALX_TWN_DATA_SOURCE_ID:5               ! 0404-0408 DATA SOURCE ID - ASSIGNED BY TALX - CLIENT SPECIFIC
                                 $TALX_DATA_SOURCE_TYPE:20                ! 0409-0428 DATA SOURCE TYPE - ASSIGNED BY TALX - CLIENT SPECIFIC 
                                 $TALX_DEP_LAST_01:20                     ! 0429-0448 MEDICAL COVERED DEPENDENT LAST NAME 01 =======> DEPENDENT COVERAGE IDENTIFICATION INFORMATION
                                 $TALX_DEP_MI_01:1                        ! 0449-0449 MEDICAL COVERED DEPENDENT MIDDLE INITIAL 01
                                 $TALX_DEP_FIRST_01:15                    ! 0450-0464 MEDICAL COVERED DEPENDENT FIRST NAME 01
                                 $TALX_DEP_NID_01:9                       ! 0465-0473 MEDICAL COVERED DEPENDENT SSN 01
                                 $TALX_DEP_BIRTH_01:8                     ! 0474-0481 MEDICAL COVERED DEPENDENT DOB 01
                                 $TALX_DEP_LAST_02:20                     ! 0482-0501 MEDICAL COVERED DEPENDENT LAST NAME 02
                                 $TALX_DEP_MI_02:1                        ! 0502-0502 MEDICAL COVERED DEPENDENT MIDDLE INITIAL 02
                                 $TALX_DEP_FIRST_02:15                    ! 0503-0517 MEDICAL COVERED DEPENDENT FIRST NAME 02
                                 $TALX_DEP_NID_02:9                       ! 0518-0526 MEDICAL COVERED DEPENDENT SSN 02
                                 $TALX_DEP_BIRTH_02:8                     ! 0527-0534 MEDICAL COVERED DEPENDENT DOB 02
                                 $TALX_DEP_LAST_03:20                     ! 0535-0554 MEDICAL COVERED DEPENDENT LAST NAME 03
                                 $TALX_DEP_MI_03:1                        ! 0555-0555 MEDICAL COVERED DEPENDENT MIDDLE INITIAL 03
                                 $TALX_DEP_FIRST_03:15                    ! 0556-0570 MEDICAL COVERED DEPENDENT FIRST NAME 03
                                 $TALX_DEP_NID_03:9                       ! 0571-0579 MEDICAL COVERED DEPENDENT SSN 03
                                 $TALX_DEP_BIRTH_03:8                     ! 0580-0587 MEDICAL COVERED DEPENDENT DOB 03
                                 $TALX_DEP_LAST_04:20                     ! 0588-0607 MEDICAL COVERED DEPENDENT LAST NAME 04
                                 $TALX_DEP_MI_04:1                        ! 0608-0608 MEDICAL COVERED DEPENDENT MIDDLE INITIAL 04
                                 $TALX_DEP_FIRST_04:15                    ! 0609-0623 MEDICAL COVERED DEPENDENT FIRST NAME 04
                                 $TALX_DEP_NID_04:9                       ! 0624-0632 MEDICAL COVERED DEPENDENT SSN 04
                                 $TALX_DEP_BIRTH_04:8                     ! 0633-0640 MEDICAL COVERED DEPENDENT DOB 04
                                 $TALX_DEP_LAST_05:20                     ! 0641-0660 MEDICAL COVERED DEPENDENT LAST NAME 05
                                 $TALX_DEP_MI_05:1                        ! 0661-0661 MEDICAL COVERED DEPENDENT MIDDLE INITIAL 05
                                 $TALX_DEP_FIRST_05:15                    ! 0662-0676 MEDICAL COVERED DEPENDENT FIRST NAME 05
                                 $TALX_DEP_NID_05:9                       ! 0677-0685 MEDICAL COVERED DEPENDENT SSN 05
                                 $TALX_DEP_BIRTH_05:8                     ! 0686-0693 MEDICAL COVERED DEPENDENT DOB 05
                                 $TALX_DEP_LAST_06:20                     ! 0694-0713 MEDICAL COVERED DEPENDENT LAST NAME 06
                                 $TALX_DEP_MI_06:1                        ! 0714-0714 MEDICAL COVERED DEPENDENT MIDDLE INITIAL 06
                                 $TALX_DEP_FIRST_06:15                    ! 0715-0729 MEDICAL COVERED DEPENDENT FIRST NAME 06
                                 $TALX_DEP_NID_06:9                       ! 0730-0738 MEDICAL COVERED DEPENDENT SSN 06
                                 $TALX_DEP_BIRTH_06:8                     ! 0739-0746 MEDICAL COVERED DEPENDENT DOB 06
                                 $TALX_DEP_LAST_07:20                     ! 0747-0766 MEDICAL COVERED DEPENDENT LAST NAME 07
                                 $TALX_DEP_MI_07:1                        ! 0767-0767 MEDICAL COVERED DEPENDENT MIDDLE INITIAL 07
                                 $TALX_DEP_FIRST_07:15                    ! 0768-0782 MEDICAL COVERED DEPENDENT FIRST NAME 07
                                 $TALX_DEP_NID_07:9                       ! 0783-0791 MEDICAL COVERED DEPENDENT SSN 07
                                 $TALX_DEP_BIRTH_07:8                     ! 0792-0799 MEDICAL COVERED DEPENDENT DOB 07
                                 $FILLER:60                               ! 0800-0859 EMPLOYEE BENEFITS DISCLAIMER 01                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 0860-0919 EMPLOYEE BENEFITS DISCLAIMER 02                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 0920-0979 EMPLOYEE BENEFITS DISCLAIMER 03                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 0980-1039 EMPLOYEE BENEFITS DISCLAIMER 04                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1040-1099 EMPLOYEE BENEFITS DISCLAIMER 05                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1100-1159 EMPLOYEE BENEFITS DISCLAIMER 06                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1160-1219 EMPLOYEE BENEFITS DISCLAIMER 07                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1220-1279 EMPLOYEE BENEFITS DISCLAIMER 08                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1280-1339 EMPLOYEE BENEFITS DISCLAIMER 09                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1340-1399 EMPLOYEE BENEFITS DISCLAIMER 10                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1400-1459 EMPLOYEE BENEFITS DISCLAIMER 11                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1460-1519 EMPLOYEE BENEFITS DISCLAIMER 12                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1520-1579 EMPLOYEE BENEFITS DISCLAIMER 13                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1580-1639 EMPLOYEE BENEFITS DISCLAIMER 14                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1640-1699 EMPLOYEE BENEFITS DISCLAIMER 15                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1700-1759 EMPLOYEE BENEFITS DISCLAIMER 16                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1760-1819 EMPLOYEE BENEFITS DISCLAIMER 17                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1820-1879 EMPLOYEE BENEFITS DISCLAIMER 18                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1880-1939 EMPLOYEE BENEFITS DISCLAIMER 19                           *** THIS FIELD IS USER DEFINED ***
                                 $FILLER:60                               ! 1940-1999 EMPLOYEE BENEFITS DISCLAIMER 20                           *** THIS FIELD IS USER DEFINED ***

END-PROCEDURE WRITE-TWN-BENEFITS-RECORD

!************************************************************************
BEGIN-PROCEDURE WRITE-TALX-TWN-UID-HDR-RECORD
!************************************************************************

  WRITE 10 FROM '000HEADER':15		! 001-015 HEADER IDENTIFIER
		$FILLER:91		! 016-106 filler
		'01.00':5		! 107-111 Version Number
		'11796':5               ! 112-116 Source ID
		'EMPLOYER':20		! 117-136 Source Type
		$TALXSUBMISSION:1       ! 137     I = initial , R = Re-submission
		

END-PROCEDURE 

!************************************************************************
BEGIN-PROCEDURE WRITE-TWN-UID-RECORD
!************************************************************************

        if $1st_UID = 'Y'
	   let $1st_UID = 'N'
	   do write-10 
	   let $prev_twn_ssn = $TWN_SSN
	else
	   if $prev_twn_ssn <> $TWN_SSN
	      do write-10
	   end-if
        end-if
	let $prev_twn_ssn = $TWN_SSN
       
END-PROCEDURE 

!************************************************************************
BEGIN-PROCEDURE WRITE-10
!************************************************************************

        LET #TOTALEMPLOYEESUID  = #TOTALEMPLOYEESUID + 1         
        LET $TWN_EMPLID = $TWN_USERID
	WRITE 10 FROM	'201EMPLOYEEUID':15	! 001-015 Record Type
			'11796':16		! 016-031 Employer Code 
			$TWN_SSN:11             ! 032-042 EMPLOYEE SOCIAL SECURITY NUMBER
			$TWN_EMPLID:64          ! 043-106 EMPLOYEE ID
			$TWN_USERID:64          ! 107-170 EMPLOYEE USER ID
			$TALX_TWN_EE_PIN:64     ! 171-234 EMPLOYEE PIN
			$TALX_TWN_EE_PIN:64     ! 235-298 EMPLOYEE DEFAULT PIN
			$TALX_TWN_LAST_NAME:20  ! 299-318 EMPLOYEE LAST NAME
			$TALX_TWN_FIRST_NAME:15 ! 319-333 EMPLOYEE FIRST NAME
			$TALX_TWN_MID_INITIAL:1 ! 334-334 EMPLOYEE MIDDLE INITIAL
			$TALX_BIRTHDATE:8       ! 335-342 EMPLOYEE BIRTHDATE
			$Filler:64		! 343-406 Email??
			'Y':1			! 407-407 Allow Login Y/N
			'N':1			! 408-408 Addr Info Supplied Y/N
			$TALX_TWN_ADDRESS1:40   ! 409-448 EMPLOYEE HOME ADDRESS 1
			$TALX_TWN_ADDRESS2:40	! 449-488 EMPLOYEE HOME ADDRESS 2
			$TALX_TWN_CITY:40	! 489-528 EMPLOYEE HOME CITY
			$Filler:1		! 529-529 EE Country ADDR Indicator
			$TALX_TWN_STATE:2	! 530-531 EMPLOYEE HOME STATE
			$TALX_TWN_ZIP:10	! 532-541 EMPLOYEE HOME ZIP
			$Filler:23		! 542-564 EE Foreign Province
			$Filler:15		! 565-579 EE Foreign Postal Code
			'us'			! 580-581 EE ISO Country Code
			
END-PROCEDURE 

!************************************************************************
BEGIN-PROCEDURE WRITE-TALX-TWN-UID-TRAILER-RECORD
!************************************************************************
 
  LET $TOTALEMPLOYEESUID    = EDIT(#TOTALEMPLOYEESUID,'099999999')

  WRITE 10 FROM '999FOOTER':15		! 001-015 FOOTER IDENTIFIER
		$FILLER:325		! 016-340 filler
		$TOTALEMPLOYEESUID:9 	! 341-349 TTL USER ID RECORDS
				

END-PROCEDURE 

!************************************************************************
!
! PROCEDURE : WRITE-TALX-TWN-CONTROL-RECORD
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO WRITE THE TALX CONTROL
!             TRAILER RECORD TO THE PAYROLL FILE
!
!************************************************************************

BEGIN-PROCEDURE WRITE-TALX-TWN-CONTROL-RECORD

LET $TOTALEMPLOYEES        = EDIT(#TOTALEMPLOYEES,'099999999')
LET $TALXACTIVEEMPLOYEES   = EDIT(#TALXACTIVEEMPLOYEES,'099999999')
LET $TALXINACTIVEEMPLOYEES = EDIT(#TALXINACTIVEEMPLOYEES,'099999999')
LET $TALXLEAVEEMPLOYEES    = EDIT(#TALXLEAVEEMPLOYEES,'099999999')
LET $TALXOTHEREMPLOYEES    = EDIT(#TALXOTHEREMPLOYEES,'099999999')
LET #TALXCONTROLBS         = #TALXCONTROLBASE * 100
LET $TALXCONTROLBS         = EDIT(#TALXCONTROLBS,'999999999999')
LET $CONTROLBASE           = SUBSTR($TALXCONTROLBS,10,3)

WRITE 1 FROM '********':8              ! 001-008 TRAILER IDENTIFIER
             $TOTALEMPLOYEES:9         ! 009-017 TOTAL NUMBER OF EMPLYOYEE RECORDS INCLUDED
             $TALXACTIVEEMPLOYEES:9    ! 018-026 TOTAL NUMBER OF ACTIVE EMPLOYEES INCLUDED
             $TALXINACTIVEEMPLOYEES:9  ! 027-035 TOTAL NUMBER OF INACTIVE EMPLOYEES INCLUDED
             $TALXLEAVEEMPLOYEES:9     ! 036-044 TOTAL NUMBER OF ON LEAVE EMPLOYEES INCLUDED
             $TALXOTHEREMPLOYEES:9     ! 045-053 TOTAL NUMBER OF OTHER EMPLOYEES INCLUDED
             $CONTROLBASE:3            ! 054-056 LAST THREE DIGITS (0.00) OF SUM OF CURRENT YTD GROSS BASE PAY AMOUNT

IF #BENEFITS_FILE_NUMBER = 2
    WRITE #BENEFITS_FILE_NUMBER FROM '********':8              ! 001-008 TRAILER IDENTIFIER
                                     $TOTALEMPLOYEES:9         ! 009-017 TOTAL NUMBER OF EMPLYOYEE RECORDS INCLUDED
END-IF

END-PROCEDURE WRITE-TALX-TWN-CONTROL-RECORD

!************************************************************************
! 
! PROCEDURE : UPDATE-TALX-TABLE
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO DETERMINE IF THE 
!             EMPLOYEE IS ON THE TALX TABLE.
!
!             IF SO, UPDATE ROW.
!             IF NOT, INSERT ROW
!
!************************************************************************

BEGIN-PROCEDURE UPDATE-TALX-TABLE

LET $TALX_EE_DATA_FOUND = 'N'

BEGIN-SELECT
ED.GEX_TALX_EMPL_STS
ED.TERMINATION_DT
    LET $TALX_EE_DATA_FOUND = 'Y'
FROM PS_GEX_TALX_EE_DTA ED
WHERE ED.EMPLID = $SAVE_EMPLID
END-SELECT

IF $TALX_EE_DATA_FOUND = 'N'
    DO INSERT-TALX-EE-DATA
ELSE
    IF (&ED.GEX_TALX_EMPL_STS <> $GEX_TALX_EMPL_STS) OR
       (&ED.TERMINATION_DT   <> $SAVE_TERMINATION_DT_NATIVE) 
        DO UPDATE-TALX-EE-DATA
    END-IF
END-IF

END-PROCEDURE UPDATE-TALX-TABLE

!************************************************************************
!
! PROCEDURE : INSERT-TALX-EE-DATA
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO TO THE TABLE INSERT 
!             INTO THE TALX EE TABLE
!
!************************************************************************

BEGIN-PROCEDURE INSERT-TALX-EE-DATA

LET $PROCEDURE_NAME= 'INSERT-TALX-EE-DATA'

BEGIN-SQL ON-ERROR=SQL-ERROR
    INSERT INTO PS_GEX_TALX_EE_DTA 
        (EMPLID,
         GEX_TALX_EMPL_STS,
         TERMINATION_DT)
    VALUES
        ($SAVE_EMPLID,
         $GEX_TALX_EMPL_STS,
         $SAVE_TERMINATION_DT_NATIVE)
END-SQL

LET #INSERT_COUNT = #INSERT_COUNT + 1

END-PROCEDURE INSERT-TALX-EE-DATA

!************************************************************************
!
! PROCEDURE : UPDATE-TALX-EE-DATA
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO UPDATE THE TALX
!             EMPLOYEE TABLE
!
!************************************************************************

BEGIN-PROCEDURE UPDATE-TALX-EE-DATA

LET $PROCEDURE_NAME= 'UPDATE-TALX-EE-DATA'

BEGIN-SQL ON-ERROR=SQL-ERROR
    UPDATE PS_GEX_TALX_EE_DTA
        SET GEX_TALX_EMPL_STS = $GEX_TALX_EMPL_STS,
            TERMINATION_DT   = $SAVE_TERMINATION_DT_NATIVE
        WHERE EMPLID = $SAVE_EMPLID
END-SQL

LET #UPDATE_COUNT = #UPDATE_COUNT + 1

END-PROCEDURE UPDATE-TALX-EE-DATA

!************************************************************************
!
! PROCEDURE : DISPLAY-SQL-ERROR
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO HANDLE ANY SQL ERRORS
!             BY REPORTING THEM, ROLLING BACK AND STOPPING THE PROGRAM
!
!************************************************************************

BEGIN-PROCEDURE DISPLAY-SQL-ERROR

SHOW '*********************************************************************************************************************************'
SHOW 'TXWV8001 : A SQL ERROR HAS OCCURRED IN PROCEDURE ' 
     $PROCEDURE_NAME
SHOW 'TXWV8001 : THE SQL STATUS CODE   = ' #SQL-STATUS
SHOW 'TXWV8001 : THE SQL ERROR MESSAGE = ' $SQL-ERROR
SHOW ' '

PRINT '***************************************************' (+1,1)
PRINT 'TXWV8001 : A SQL ERROR HAS OCCURRED IN PROCEDURE ' (+1,1)
PRINT $PROCEDURE_NAME (0,+3)
PRINT #SQL-STATUS     (0,+5)  EDIT 9999
PRINT $SQL-ERROR      (0,+5)
SHOW 'TXWV8001 : EMPLID                        =' $SAVE_EMPLID           '*'
SHOW 'TXWV8001 : TERMINATION_DT                =' $SAVE_TERMINATION_DT   '*'
SHOW 'TXWV8001 : GEX_TALX_EMPL_STS              =' $GEX_TALX_EMPL_STS      '*'
SHOW '*********************************************************************************************************************************'
PRINT $SAVE_EMPLID (+1,8)
PRINT '**************************************************' (+1,1)

DO PERFORM-ROLLBACK
  
STOP

END-PROCEDURE DISPLAY-SQL-ERROR

!************************************************************************
!
! PROCEDURE : PERFORM-ROLLBACK
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS ISSUE A ROLLBACK
!
!************************************************************************

BEGIN-PROCEDURE PERFORM-ROLLBACK

BEGIN-SQL
    ROLLBACK
END-SQL

END-PROCEDURE PERFORM-ROLLBACK

!************************************************************************
!
! PROCEDURE : PROCESS-EMPLOYEE-CHANGES
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS SEE IF ANY EMPLOYEES WHO
!             HAVE NOT BEEN PAID HAVE HAD CHANGES SINCE THE LAST EXTRACT
!             IF SO, SEND THEM
!
! NOTE      : THE EMPL STATUS SELECTION CRITERIA MAY HAVE TO BE MODIFIED
!             FOR CLIENTS CUSTOMIZATIONS
!
!************************************************************************

BEGIN-PROCEDURE PROCESS-EMPLOYEE-CHANGES

DO GET-CURRENT-DATETIME

!SHOW '*********************************************************************************************************************************'
!SHOW 'TXWV8001 : PROCESSING EMPLOYEE CHANGES ON ' $REPORTDATE ' AT ' $REPORTTIME
!show '$TALX_AS_OF_DATE_NATIVE ' $TALX_AS_OF_DATE_NATIVE
!SHOW '*********************************************************************************************************************************'

BEGIN-SELECT
E02.HIRE_DT
E02.SERVICE_DT
E02.TERMINATION_DT
E02.LAST_INCREASE_DT
J02.EFFDT
J02.EMPL_STATUS
J02.SETID_JOBCODE
J02.JOBCODE
J02.COMPRATE
J02.STD_HOURS
J02.SETID_DEPT
J02.COMP_FREQUENCY
J02.ACTION
J02.ACTION_REASON
J02.SETID_LOCATION
J02.LOCATION
J02.CHANGE_AMT
J02.SHIFT
J02.COMPANY
J02.PAYGROUP
J02.EMPLID
j02.empl_rcd
J02.Position_nbr			
PD02.NAME
PD02.FIRST_NAME
PD02.LAST_NAME
PD02.MIDDLE_NAME
PD02.ADDRESS1
PD02.ADDRESS2
PD02.CITY
PD02.STATE
PD02.POSTAL
PD02.BIRTHDATE
PD02.PHONE
PD02.COUNTRY
PD02.NAME_SUFFIX
PN02.NATIONAL_ID
TC02.GEX_TALX_CLIENT_ID
TC02.GEX_TALX_DATA_SRC
SYSDATE        &GEXJOB_REH_ASOFDATE1 	!ADDED FOR REHIRE DATE LOGIC IN 9.0


   Let $Position_Nbr = &J02.Position_nbr			

   let $GEXJOB_REH_EMPLID = &J02.emplid
   let #GEXJOB_REH_EMPLRCD = &J02.EMPL_RCD
   let $GEXJOB_REH_ASOFDATE = &GEXJOB_REH_ASOFDATE1
   do Get-Job-Rehire-Dt
   LET $SAVE_REHIRE_DT             = EDIT($GEXJOB_REH_REHIRE_DT,'YYYYMMDD')	


    LET $GEX_TALX_CLIENT_ID             = RTRIM(&TC02.GEX_TALX_CLIENT_ID,' ')
    LET $TALX_TWN_DATA_SOURCE_ID    = RTRIM(&TC02.GEX_TALX_DATA_SRC,' ')
    LET $SAVE_HIRE_DT               = EDIT(&E02.HIRE_DT,'YYYYMMDD')

    LET $SAVE_SERVICE_DT            = EDIT(&E02.SERVICE_DT,'YYYYMMDD')
    LET $SAVE_TERMINATION_DT        = EDIT(&E02.TERMINATION_DT,'YYYYMMDD')
    LET $SAVE_TERMINATION_DT_NATIVE = &E02.TERMINATION_DT

    LET $SAVE_EFFDT                 = &J02.EFFDT
    LET $SAVE_EMPL_STATUS           = &J02.EMPL_STATUS
    LET $SAVE_SETID_JOBCODE         = &J02.SETID_JOBCODE
    LET $SAVE_JOBCODE               = &J02.JOBCODE
    LET #SAVE_COMPRATE              = &J02.COMPRATE
    LET #SAVE_STD_HOURS             = &J02.STD_HOURS
    LET $SAVE_SETID_DEPT            = &J02.SETID_DEPT
    LET $SAVE_COMP_FREQUENCY        = RTRIM(&J02.COMP_FREQUENCY,' ')
    LET $SAVE_ACTION                = &J02.ACTION
    LET $SAVE_ACTION_REASON         = &J02.ACTION_REASON
    LET $SAVE_SETID_LOCATION        = &J02.SETID_LOCATION
    LET $SAVE_LOCATION              = &J02.LOCATION

    LET $SAVE_EMPLID                = &J02.EMPLID
    let #save_empl_rcd              = &j02.empl_rcd
    LET $SAVE_COMPANY               = RTRIM(&J02.COMPANY,' ')
    LET $SAVE_PAYGROUP              = &J02.PAYGROUP
    LET $SAVE_SHIFT                 = &J02.SHIFT
    LET $SAVE_NAME                  = &PD02.NAME
    LET $SAVE_FIRST_NAME            = &PD02.FIRST_NAME
    LET $SAVE_LAST_NAME             = &PD02.LAST_NAME
    LET $SAVE_MIDDLE_NAME           = &PD02.MIDDLE_NAME
    LET $SAVE_ADDRESS1              = &PD02.ADDRESS1
    LET $SAVE_ADDRESS2              = &PD02.ADDRESS2
    LET $SAVE_CITY                  = &PD02.CITY
    LET $SAVE_STATE                 = &PD02.STATE
    LET $SAVE_ZIP                   = &PD02.POSTAL

    LET $SAVE_ORIG_HIRE_DT          = EDIT(&E02.HIRE_DT,'YYYYMMDD')

    LET $SAVE_BIRTHDATE             = EDIT(&PD02.BIRTHDATE,'YYYYMMDD')
    LET $SAVE_PHONE                 = &PD02.PHONE
    LET $SAVE_COUNTRY               = &PD02.COUNTRY
    LET $SAVE_NAME_SUFFIX           = RTRIM(&PD02.NAME_SUFFIX,' ')
    LET $SAVE_NATIONAL_ID           = &PN02.NATIONAL_ID
    LET $TALX_TWN_EE_PIN            = substr(&J02.EMPLID,6,4)
    DO IDENTIFY-MULTI-JOB-EES
    !show '$multi_job_flag ' $multi_job_flag
    !*********************************************************************************************************************************'
    !SHOW 'TXWV8001 : PROCESSING EMPLOYEE CHANGES FOR EMPLID ' &J02.emplid  ' AT  CMPY ' &J02.COMPANY ' Hire Dt ' &E02.HIRE_DT ' REH DT ' &E02.REHIRE_DT ' SVC DT ' &E02.SERVICE_DT ' TERM DT ' &E02.TERMINATION_DT		! commented for rehire date logic
    !SHOW 'TXWV8001 : PROCESSING EMPLOYEE CHANGES FOR EMPLID ' &J02.emplid  ' AT  CMPY ' &J02.COMPANY ' Hire Dt ' &E02.HIRE_DT ' REH DT ' $GEXJOB_REH_REHIRE_DT ' SVC DT ' &E02.SERVICE_DT ' TERM DT ' &E02.TERMINATION_DT	! added for rehire date logic
    !*********************************************************************************************************************************'
    
    let $disclaimer_one   = ' '
    
    if $multi_job_flag = 'Y'  
       DO FIND-OTHER-INFO
       !show $disclaimer_one
    end-if

    do GET-USERID
    
    DO DETERMINE-TALX-EMPL-STATUS
    !AXL Send SSN instead of emplid for inactive employees
    Evaluate $GEX_TALX_EMPL_STS
         WHEN = 'I'
	 WHEN = 'G'
	 WHEN = 'R'
	    LET $TWN_USERID = $save_emplid
        BREAK
    End-Evaluate
    
    do GET-LAST-INCREASE-AMT2

    DO SEE-IF-EMPLOYEE-EXISTS              ! SEE IF EMPLOYEE IS IN TALX TABLE
    IF $TALX_EE_DATA_FOUND = 'Y'
           !show 'ee exists in TAXL tbl ssn ' $save_emplid
           DO LOOKUP-EMPLOYEE                 ! SEE IF EMPLID IN ARRAY BUILT FROM PAYROLL RUN 
           IF $LOOKUP_FOUND = 'N'             ! IF NOT IN PAYROLL RUN
               !show 'ee in talx tbl but not in array from payroll run  ' &J02.EMPLID ' ' $save_emplid
               DO CHECK-FOR-EMPLOYEE-CHANGES  ! SEE IF EMPLOYEE HAD A CHANGE
	       !show '$EMPLOYEE_HAS_CHANGES flag ' $EMPLOYEE_HAS_CHANGES
               IF $EMPLOYEE_HAS_CHANGES = 'Y' ! IF SO, SEND EM
                   !show '$EMPLOYEE_HAS_CHANGES for ee ' &J02.EMPLID
                   DO FORMAT-TALX-EE-DATA
                   DO FORMAT-EMPL-CHANGES
                   LET #UPDATE_EMPLID_COUNT = #UPDATE_EMPLID_COUNT + 1
               END-IF
           else   !yes in payroll run from before
               !dbl check pay info in case a mult-job person
	       !show '$EMPLOYEE IN PAYROLL FROM BEFORE ' &J02.EMPLID
               do check-current-pay
               if $curr_pay_flag='N'
                  DO FORMAT-TALX-EE-DATA
                  DO FORMAT-EMPL-CHANGES
                  LET #NEW_EMPLID_COUNT = #NEW_EMPLID_COUNT + 1
               end-if

           END-IF
        
    ELSE
        !show 'ee not in talx tbl ' &J02.EMPLID
        DO FORMAT-TALX-EE-DATA
        DO FORMAT-EMPL-CHANGES
        LET #NEW_EMPLID_COUNT = #NEW_EMPLID_COUNT + 1
    END-IF
FROM PS_JOB           J02,
     PS_EMPLOYMENT    E02,
     PS_PERSONAL_DATA PD02,
     PS_PERS_NID      PN02,
     PS_GEX_TALX_CMPY  TC02
WHERE    J02.EMPLID             = $PRCS_EMPLID
and      J02.EFFDT             = (SELECT MAX(J02A.EFFDT)
                               FROM PS_JOB J02A
                               WHERE J02A.EMPLID    = J02.EMPLID
                               AND   J02A.EMPL_RCD  = J02.EMPL_RCD
                               AND   J02A.EFFDT    <= $TALX_AS_OF_DATE_NATIVE)
AND   J02.EFFSEQ            = (SELECT MAX(J02B.EFFSEQ)
                               FROM PS_JOB J02B
                               WHERE J02B.EMPLID   = J02.EMPLID
                               AND   J02B.EMPL_RCD = J02.EMPL_RCD
                               AND   J02B.EFFDT    = J02.EFFDT)
AND   E02.EMPLID            = J02.EMPLID 
AND   E02.EMPL_RCD          = J02.EMPL_RCD
AND   PD02.EMPLID           = J02.EMPLID
AND   (J02.EMPL_STATUS IN ('A','L','P','S','Q','U') OR
!AND      E02.TERMINATION_DT BETWEEN $FROMDATE AND $TALX_AS_OF_DATE_NATIVE!)       ! FOR current yEAR used to be 3
      (J02.TERMINATION_DT BETWEEN $FROMDATE AND $TALX_AS_OF_DATE_NATIVE) OR
      (J02.ACTION_DT BETWEEN $FROMDATE AND $TALX_AS_OF_DATE_NATIVE
      			AND J02.EMPL_STATUS NOT IN ('A','L','P','S','Q','U')
      			AND J02.TERMINATION_DT < $FROMDATE))
!        E02.TERMINATION_DT BETWEEN '25-JUL-2004' AND $TALX_AS_OF_DATE_NATIVE)       !for 36 weeks
AND   PN02.EMPLID           = J02.EMPLID
AND   PN02.COUNTRY          = 'USA'
AND   PN02.NATIONAL_ID_TYPE = 'PR'
AND   TC02.COMPANY          = J02.COMPANY
ORDER BY J02.EMPLID
END-SELECT

!SHOW 'TXWV8001 : NUMBER OF NEW EMPLOYEES ADDED WHILE PROCESSING CHANGES                   = ' #NEW_EMPLID_COUNT    EDIT 9,999,999
!SHOW 'TXWV8001 : NUMBER OF UPDATED EMPLOYEES WHILE PROCESSING CHANGES                     = ' #UPDATE_EMPLID_COUNT EDIT 9,999,999

END-PROCEDURE PROCESS-EMPLOYEE-CHANGES
!************************************************************************
BEGIN-PROCEDURE check-current-pay
!************************************************************************
  let $curr_pay_flag ='N'
  
begin-select
'FF'
  let $curr_pay_flag ='Y'

FROM PS_PAY_CALENDAR   PAYCAL_CHK,   
     PS_PAY_CHECK      PAY_CHK_CHK,
     PS_PAY_CAL_BAL_ID PAY_CAL_BAL_ID_CHK
     
[$WHERE_04]
!where pay_chk_chk.pay_end_dt  BETWEEN '4-may-2008' AND '10-may-2008'
AND   PAY_CHK_CHK.emplid   = $save_emplid
AND   PAY_CHK_CHK.empl_rcd = #save_empl_rcd
AND   PAY_CHK_CHK.COMPANY           = PAYCAL_CHK.COMPANY
AND   PAY_CHK_CHK.PAYGROUP          = PAYCAL_CHK.PAYGROUP
AND   PAY_CHK_CHK.PAY_END_DT        = PAYCAL_CHK.PAY_END_DT
AND   PAY_CHK_CHK.PAYCHECK_NBR      <>  0 
AND   PAY_CHK_CHK.PAYCHECK_STATUS   =  'F'
AND   PAY_CHK_CHK.PAYCHECK_OPTION   <> 'R'
AND   PAY_CAL_BAL_ID_CHK.COMPANY    = PAYCAL_CHK.COMPANY
AND   PAY_CAL_BAL_ID_CHK.PAYGROUP   = PAYCAL_CHK.PAYGROUP
AND   PAY_CAL_BAL_ID_CHK.PAY_END_DT = PAYCAL_CHK.PAY_END_DT
AND   PAY_CAL_BAL_ID_CHK.BALANCE_ID = 'CY'

END-SELECT
END-PROCEDURE

!************************************************************************
BEGIN-PROCEDURE GET-LAST-INCREASE-AMT2
!************************************************************************
   let $increase_row_found='N'
   let #SAVE_CHANGE_AMT = 0
   let $SAVE_LAST_INCREASE_DT = ' '
BEGIN-Select
I2.effdt
I2.change_amt
  
  let $increase_row_found='Y'

  LET $SAVE_LAST_INCREASE_DT      = EDIT(&I2.EFFDT,'YYYYMMDD')
  LET #SAVE_CHANGE_AMT            = &I2.CHANGE_AMT

From PS_JOB I2
WHERE I2.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB
        WHERE I2.EMPLID = EMPLID
          AND I2.EMPL_RCD = EMPL_RCD
	  AND change_amt > 0
          AND EFFDT <= $TALX_AS_OF_DATE_NATIVE)
    AND I2.EFFSEQ =
        (SELECT MAX(EFFSEQ) FROM PS_JOB
        WHERE I2.EMPLID = EMPLID
          AND I2.EMPL_RCD = EMPL_RCD
          AND I2.EFFDT = EFFDT)
    AND I2.EMPLID   = $SAVE_EMPLID
    AND I2.EMPL_RCD = #SAVE_EMPL_RCD

END-SELECT

END-PROCEDURE GET-LAST-INCREASE-AMT

!************************************************************************
!
! PROCEDURE : SEE-IF-EMPLOYEE-EXISTS
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS SEE IF ANY EMPLOYEES WHO
!             HAVE NOT BEEN PAID HAVE HAD CHANGES SINCE THE LAST EXTRACT
!             IF SO, SEND THEM
!
!************************************************************************

BEGIN-PROCEDURE SEE-IF-EMPLOYEE-EXISTS

LET $TALX_EE_DATA_FOUND = 'N'

BEGIN-SELECT
TED.GEX_TALX_EMPL_STS
TED.TERMINATION_DT
    LET $TALX_EE_DATA_FOUND = 'Y'
FROM PS_GEX_TALX_EE_DTA TED
WHERE TED.EMPLID = $SAVE_EMPLID
END-SELECT

END-PROCEDURE SEE-IF-EMPLOYEE-EXISTS

!************************************************************************
!
! PROCEDURE : LOOKUP-EMPLOYEE
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS TO SEE IF THE EMPLOYEE
!             THAT WE ARE PROCESSING (NOT FROM PAYROLL) HAS ALLREADY
!             BEEN PROCESSED (BY PAYROLL). IF SO, SKIP.
!
!************************************************************************

BEGIN-PROCEDURE LOOKUP-EMPLOYEE

LET #LOOKUP       = 1
LET $LOOKUP_FOUND = 'N'

WHILE #LOOKUP < #EMPLID_ARRAY_COUNT + 1
    GET $LOOKUP_EMPLID FROM EMPLID_ARRAY(#LOOKUP) EMPLID
    IF $SAVE_EMPLID = $LOOKUP_EMPLID
        LET $LOOKUP_FOUND = 'Y'
        BREAK
    END-IF
    LET #LOOKUP = #LOOKUP + 1
END-WHILE

END-PROCEDURE LOOKUP-EMPLOYEE

!************************************************************************
!
! PROCEDURE : CHECK-FOR-EMPLOYEE-CHANGES
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS COMPARE OLD EMPLOYEE DATA
!             WITH CURRENT EMPLOYEE DATA. IF THERE IS A DIFFERENCE,
!             SEND EM
!
!************************************************************************

BEGIN-PROCEDURE CHECK-FOR-EMPLOYEE-CHANGES

LET $EMPLOYEE_HAS_CHANGES = 'N'
!show '&TED.GEX_TALX_EMPL_STS vs $GEX_TALX_EMPL_STS ' &TED.GEX_TALX_EMPL_STS ' ' $GEX_TALX_EMPL_STS
!show '&TED.TERMINATION_DT  vs &E02.TERMINATION_DT ' &TED.TERMINATION_DT   ' ' &E02.TERMINATION_DT
IF &TED.GEX_TALX_EMPL_STS <> $GEX_TALX_EMPL_STS OR
   &TED.TERMINATION_DT   <> &E02.TERMINATION_DT
    LET $EMPLOYEE_HAS_CHANGES = 'Y'
END-IF

END-PROCEDURE CHECK-FOR-EMPLOYEE-CHANGES

!************************************************************************
!
! PROCEDURE : FORMAT-EMPL-CHANGES
!
! FUNCTION  : THE PURPOSE OF THIS PROCEDURE IS BASICALLY FORMAT AND
!             WRITE OUT THE TWN AND EPAYROLL RECORDS FOR AN EMPLOYEE
!             WITH NO PAYROLL BUT NEW OR HAS HAD CHANGES
!
!************************************************************************

BEGIN-PROCEDURE FORMAT-EMPL-CHANGES

LET $TALX_PAY_END_DT         = ''
LET $TALX_CHECK_DT           = ''
LET $TALX_TWN_CHECK_HOURS    = ''
LET $TALX_TWN_GROSS_AMT      = ''
LET $TALX_TWN_NET_PAY        = ''
LET $TALX_TWN_PENSION_INCOME = ''
LET $TALX_TWN_OTHER_PAY      = ''
LET $TALX_TWN_DED_CAFETERIA  = ''
LET $TALX_TWN_DED_RETIREMENT = ''
LET $TALX_TWN_TAX_FEDERAL    = ''
LET $TALX_TWN_TAX_STATE      = ''
LET $TALX_TWN_TAX_LOCAL      = ''
LET $TALX_TWN_TAX_FICA       = ''
LET $TALX_TWN_TAX_MEDICARE   = ''
LET $TALX_TWN_GARNISHMENTS   = ''
LET $TALX_TWN_DED_OTHER      = ''
LET $TALX_TWN_MED_DED        = ''

DO GET-MEDICAL-COVERAGE

DO GET-MEDICAL-DEPENDENT-COUNT

DO GET-DENTAL-COVERAGE

DO GET-VISION-COVERAGE

DO GET-DEPENDENTS                                                              ! BUILD THE DEPENDENT DATA

DO GET-DEP-COVG-AVAIL                                                          ! SEE IF DEPENDENT COVERAGE IS AVAILABLE

DO WRITE-TALX-TWN-RECORDS
DO insert-into-temp

IF $TALX_EE_DATA_FOUND = 'Y'
    DO UPDATE-TALX-EE-DATA
ELSE
    DO INSERT-TALX-EE-DATA
END-IF

LET #CHANGE_RECS               = #CHANGE_RECS    + 1

!LET #TOTALEMPLOYEES            = #TOTALEMPLOYEES + 1                          

END-PROCEDURE FORMAT-EMPL-CHANGES

!************************************
begin-procedure Trunc-work-table
!************************************
#debug9 show 'Trunc-work-table' 

begin-sql 
truncate TABLE ps_gex_r_gexhr675
end-sql
end-procedure

!***********************************************************************
Begin-Procedure Close-Files
!***********************************************************************
#debug9 Show 'Close-Files'
  Close 1

  If #FILE_1_STATUS != 0
     Show 'Error closing output file.  Program terminating.'
     Stop
  End-If

  Close 10

  If #FILE_10_STATUS != 0
     Show 'Error closing output file.  Program terminating.'
     Stop
  End-If
End-Procedure


!***********************************************************************
begin-procedure Z010-set-system-commands-for-ftp
!***********************************************************************

  do GEXXX951-Select-Oracle-Instance
  let $db_name = lower($GEXXX951_Oracle_Instance)
  let $pshome = getenv('PS_HOME')
  let $cd_command_bindir = 'cd '||'$BINDDIR'
  show '$db_name :' $db_name
  show '$pshome  :' $pshome
  show '$cd_command_bindir :' $cd_command_bindir
  let $ftp_command = '/bin/ksh  ' || $pshome || '/scripts/gex_shell/' || 'gexhr675a.sh '||$db_name
  do Z020-exec-script-to-ftp-file
  let $ftp_command = '/bin/ksh  ' || $pshome || '/scripts/gex_shell/' || 'gexhr675b.sh '||$db_name
  do Z020-exec-script-to-ftp-file
  let $ftp_command = '/bin/ksh  ' || $pshome || '/scripts/gex_shell/' || 'gexhr675c.sh '||$db_name
  do Z020-exec-script-to-ftp-file
  
end-procedure

!***********************************************************************
begin-procedure Z020-exec-script-to-ftp-file
!***********************************************************************
     date-time () HH:MI:SS &ProcessTime
     show 'Executing FTP process started at: ' &ProcessTime

     show 'Z020-exec-script-to-ftp-file'
      CALL SYSTEM USING $ftp_command #sys_status
      show '#sys_status:' #sys_status
      if #sys_status <> 0
	     show 'Command ' $ftp_command ' Failed'
	     show 'FTP exec script within gexhr675 failed'
	    end-if

end-procedure


!************************************************************************
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rotname3.sqc'  !Routine  to format name
#Include 'getjobtl.sqc'  !Procedure to get job title
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'stdapi.sqc'    !Updates Process API
#Include 'payrnctl.sqc'  !Get-Run-Control Procedure
#Include 'getbalid.sqc'  !Get Balance Id
#include 'gexrehdt.sqc'	 !Fixed for REHIRE DT
#Include 'getposnm.sqc'  !Get-Position-Title    