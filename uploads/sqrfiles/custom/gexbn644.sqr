!*******************************************************************************
! Report ID:     GEXBN644.SQR
!
! Purpose:       This program will process all CBP benefit transactions, that
!                have been loaded into custom tables and update the appropriate
!                Benefits Administration tables.
!
! Description:   This program loads the custom temp tables and then reads each
!                row of the custom temp table for then updates the PeopleSoft
!                Benefits Administration tables.
!
! Created:       22-SEP-2004
!
! PS VERSION:    8.8SP1
!
! Additional Info:  Review the sched_id in this sqr to make sure it is
!                   appropriate to the enrollment year.  See hardcodded values
!                   section.
!
! HardCoded Values:  #Max_Annual_Pledge   = 5000
!                    COUNTRY              = 'USA'
!                    EVENT_STATUS         = 'O'
!        !
! Questions:     Are there multiple jobs with multiple benefit records or
!                all - BENEFIT_RCD_NBR = 0? possible Mods needed if multiple
!                benefit records.
!
! Input:  1) Tables                       !*Not Found = not used in ben100a
                                          !*on 9.0 means still in use
!            -> PS_BAS_PARTIC        BAP  *Not Found on 9.0
!            -> PS_BAS_PARTIC        EVR  *Not Found on 9.0
!            -> PS_BAS_PARTIC_PLAN   BPP  *Not Found on 9.0
!            -> PS_BAS_PARTIC_DPND   BPD  *Not Found on 9.0
!            -> PS_CBP_DEPENDENTS    DBT  *Custom Table
!            -> PS_CBP_EVENT_CODES   EVC  *Custom Table
!            -> PS_CBP_PLN_OPTN      TRB  *Custom Table
!            -> PS_CBP_VOL_DED       VOL  *Custom Table
!
! Output:
!   -  Report - Audit/Control Report (CBPHMRBA_Det.Lis)
!   -  Report - Error Report         (CBPHMRBA_Err.Lis)
!
!*******************************************************************************
!   Date     Programmer      Description
! --------  ----------     ---------------------------------------------------
! 09/22/04  glw crestone   original development
!
! 09/15/2009 CCI DGM        Update to Version 9.0 - Removed Select-Parameters call
!                           Run Control not used at Client running from SQRW
!
! 11/12/2009 Chris Ladd     Update to Verison 9.0 and modify for additional plans
!            (CCI)
!
! 08/12/2010 Sandy Setree   Change to allow the SQR to run thru PIA. 
!            (CCI)
! 10/18/2010 Sandy Setree   Change Covg_cd to read and write 2 characters instead 
!            (CCI)          of 1.
! 11/04/2010 Sandy Setree   Add RX plan to dependents file and table.
!            (CCI)
!*******************************************************************************

!-----------------------------------------------------------------------
!   Set Environment                                                    -
!-----------------------------------------------------------------------
#Include 'setenv.sqc' !Set environment
!#Include 'setup32.sqc'

#define SQRName                 'GEXBN644'   ! The name of this SQR
#define True                    1            ! Boolean condition True
#define False                   0            ! Boolean condition False
#define empl_rcd                0            ! Employee Record number default

!**********The following are not used and exist for testing only*********

#define Col01 001    ! Column 01 - Employee Id
#define Col02 014    ! Column 02 - Sched Id / Error Type
#define Col03 021    ! Column 03 - Event Date / Error Message
#define Col04 034    ! Column 04 - Event Class
#define Col05 041    ! Column 05 - Event Id
#define Col06 049    ! Column 06 - Confirm Date
#define Col07 062    ! Column 07 - Plan Type
#define Col08 068    ! Column 08 - Benefit Plan
#define Col09 076    ! Column 09 - Coverage Code
#define Col10 088    ! Column 10 - Option Code
#define Col11 096    ! Column 11 - Message
#define Col12 120

#define ECol01  001     !Sched_ID       
#define ECol02  010     !Benefit Program
#define ECol03  019     !Error Type
#define ECol04  024     !Employee ID    
#define ECol05  035     !Empl Rcd       
#define ECol06  040     !Name           
#define ECol07  070     !Event Date     
#define ECol08  082     !Event Class    
#define ECol09  089     !Event ID       
#define ECol10  096     !Confirm Date   
#define ECol11  105     !Plan Type      
#define ECol12  111     !Benefit Plan   
#define ECol13  119     !Coverage Code  
#define ECol14  124     !Option Code 
#define ECol15  131     !Bas Process Status
#define ECol16  139     !Message    

!-----------------------------------------------------------------------
! Function:    begin-setup                                             -
! Description: setup to define printer and report                      -
!-----------------------------------------------------------------------
begin-setup

#include 'ptpsl177.sqc'                 ! Printer declaration - landscape

  declare-report Detail_Report
    Printer-Type=HPLASERJET
    LayOut=default
  end-declare

  declare-report Error_Report
    Printer-Type=HPLASERJET
    LayOut=default
  end-declare

end-setup

#include 'usarpt.sqc'                  ! Load USA-specific variable(s)

!-----------------------------------------------------------------------
!  Report Calls                                                        -
!-----------------------------------------------------------------------
begin-report

  do Init-DateTime                     ! Initialize Date/Time    'datetime.sqc'
  do Init-Number                       ! Initialize Number       'number.sqc'
  do Get-Current-DateTime              ! Get Current Date/Time   'curdttim.sqc'

  do StdAPI-Init                       ! Standard Initialize      'stdapi.sqc'
  display 'Start Run Time: ' noline
  do display-time
  do Init-Report                       ! Start the SQR

  do delete-cbp-tables
  do read-cbp-pln-optn
  do read-cbp-dependents
  
  let #file_num = 1
  do open-file($cbp_pln_optn, #file_num)
  
  let #file_num = 2
  do open-file($cbp_dependents, #file_num)
  
  do Pre-Main-Process                  ! Main-Process from which all procedures originate
  show 'Print-Process-Totals'
  do Print-Process-Totals              ! Prints the processing totals

  do close-file(1)
  do close-file(2)

  do Reset                             ! Send Printer init string 'reset.sqc'

  if $Run_Mode = 'R'
     rollback
     show 'Updates Rolled Back'
  end-if

  display 'End Run Time: ' noline
  do display-time
  do StdAPI-Term                       ! End the SQR              'stdapi.sqc'

end-report                             ! SQR END Statement

!-----------------------------------------------------------------------
! Function:    display-time                                            -
! Description: gets current date time and displays it                  -
! Called By:   Report                                                  -
! Calls:       get-current-datetime                                    -
!-----------------------------------------------------------------------
begin-procedure display-time

        do get-current-datetime
        show ' '
        display $asofnow

end-procedure

!-----------------------------------------------------------------------
! Function:    Init-Report                                             -
! Description: this section initializes all the variables              -
! Called By:   Report                                                  -
! Calls:       Select-Parameters                                       -
!-----------------------------------------------------------------------
begin-procedure Init-Report
  #ifdef debugt                 ! Debug-FLOW            !012
    show 'FLOW : Init-Report'
  #end-if

  move 'GEXBN644'                 to $ReportID
  move 'CBP OE Event Processing'  to $ReportTitle
  show $ReportID
  show $ReportTitle

 
  let $SQRName = {SQRName} || '.SQR'
  uppercase $Oprid                ! Uppercase the user name.
  move 0 to #Total_CBP            ! Total CBP records in cbp_pln_optn
  move 0 to #Total_CBP_NOPS       ! Total CBP records with no Event in bas_partic
  move 0 to #Emp_Events           ! Initialize number of employee events
  move 0 to #Dep_Events           ! Initialize number of dependent events
  move 0 to #Errors               ! Initialize number of errors
  move 0 to #Warnings_dep         ! Initialize number of warnings - dependents
  move 0 to #Warnings_pln         ! Initialize number of warnings - plan type
  move 0 to #SQL_Errors           ! Initialize number of SQL errors

  let $Detail_Report = '{INFILE}' || {SQRName} || '_Det.lis'
  let $Error_Report  = '{INFILE}' || {SQRName} || '_Err.lis'
  LET $cbp_pln_optn  = '{OUTFILE}'||'cbp_pln_optn.csv'!    - OUTPUT
  LET $cbp_dependents= '{OUTFILE}'||'cbp_dependents.csv'          !cbp_dependents file  - OUTPUT
  LET $cbp_pln_optn_in='{INFILE}'||'_PS_CBP_PLN_OPTN.txt'
  Let $cbp_dependents_in='{INFILE}'||'_PS_CBP_DEPENDENTS.txt'
 
  if $Prcs_process_instance = ''
    input $SchedId maxlen=6 'Enter Sched ID' type=char
    show 'Process SchedId [' $SchedId ']'
    let $Dep-Ben-Effdt ='26-dec-2010'
    !let $SchedId = 'OE'
    input $Run_Mode maxlen=1  'Enter Run Mode, R for Rollback or C for Commit' type=char
    show 'Run Mode [' $Run_Mode ']'
  else
    do Get-My-Run-Control
  end-if
 
end-procedure Init-Report

!START - UNIVERS - 446670 - 08/12/2010 - Allow use of PIA
!***********************************************************
!  Get-My-Run-Control - run control to run from a menu item
!***********************************************************
begin-procedure  Get-My-Run-Control

 Let $Run_Mode = ' '

begin-select
RC.CBP_RUN_MODE
RC.SCHED_ID
RC.DEP_CALC_DT

  LET $Run_Mode          = &rc.cbp_run_mode        !R = Rollback, C = Commit
  Let $SchedId           = &RC.SCHED_ID
  let $Dep-Ben-Effdt     = &RC.DEP_CALC_DT
  
  show '$Dep-Ben-Effdt :' $Dep-Ben-Effdt
   
from PS_CBP_RUN_CBPHMRB RC
where rc.oprid       = $prcs_oprid
and   rc.run_cntl_id = $prcs_run_cntl_id
end-select

  show ' '
  show 'Run Control Parameters'
  show '------------------------'
  show '$Run_Mode:          ' $Run_Mode
  show '$Dep-Ben-Effdt:     ' $Dep-Ben-Effdt
  show '$cbp_pln_optn_in:   ' $cbp_pln_optn_in
  show '$cbp_dependents_in: ' $cbp_dependents_in 
  show '$cbp_pln_optn:      ' $cbp_pln_optn      
  show '$cbp_dependents:    ' $cbp_dependents    
  show ' '

end-procedure Get-My-Run-Control
!END   - UNIVERS - 446670 - 08/12/2010 - Allow use of PIA

!-----------------------------------------------------------------------
! Function:    begin-heading 8 for-reports=(Detail_Report)             -
! Description: this section defines the report header for Detail_Report-
!-----------------------------------------------------------------------
begin-heading 8 for-reports=(Detail_Report)

  move 'CBP OE Event Processing - Details' to $ReportTitle

  !#Include 'stdhdg01.sqc'
  print 'PeopleSoft'      ()          center
  print 'Report ID:  '    (+1,1)
  print $ReportID         ()
  uppercase $ReportTitle
  print $ReportTitle      ()          center
  let #RptCol = {ColR} - 2
  page-number             (0,#RptCol)  'Page No.  '
  print 'Run Date '       (+1,#RptCol)
  print $ReportDate       ()
  print 'Run Time '       (+1,#RptCol)
  print $ReportTime       ()

  print 'Sched'          (+2,{Col02})
  print 'Event'          (  ,{Col04})
  print ' Event'         (  ,{Col05})
  print 'Plan'           (  ,{Col07})
  print 'Ben'            (  ,{Col08})

  print 'Employee Id'    (+1,{Col01})
  print 'Id'             (  ,{Col02})
  print 'Event Date'     (  ,{Col03})
  print 'Class'          (  ,{Col04})
  print '    Id'         (  ,{Col05})
  print 'Confirm Dt'     (  ,{Col06})
  print 'Type'           (  ,{Col07})
  print 'Plan'           (  ,{Col08})
  print 'Cov'            (  ,{Col09})
  print 'Opt Cd'         (  ,{Col10})
  Print 'Annual Pledge'      (  ,{Col11})
  print 'Message'        (  ,{Col12})
  print '_'              (+1,{Col01},{ColR}) fill

end-heading

!-----------------------------------------------------------------------
! Function:    begin-heading 8 for-reports=(Error_Report)              -
! Description: this section defines the report header for Error_Report -
!-----------------------------------------------------------------------
begin-heading 8 for-reports=(Error_Report)

  move 'CBP OE Event Processing - Errors' to $ReportTitle

  #Include 'stdhdg01.sqc'                ! Standard Headings #01

  Print 'Benefit'     (+2,{ECol02})
  print 'Err/'        (,{ECol03})
  Print 'Empl'        (,{ECol05})
  print 'Event'       (,{ECol08})
  print 'Event'       (,{ECol09})
  Print 'Confirm'     (,{ECol10})
  print 'Plan'        (,{ECol11})
  Print 'Benefit'     (,{ECol12})
  Print 'Process'     (,{ECol15})    
  
  print 'Sched_ID'    (+1,{ECol01})
  Print 'Program '    (,{ECol02})
  print 'Warn'        (,{ECol03})
  print 'Emplid'      (,{ECol04})
  Print 'Rcd'         (,{ECol05})
  Print 'Name'        (,{ECol06})
  Print 'Event Dt'    (,{ECol07})
  Print 'Class'       (,{ECol08})
  Print 'ID'          (,{ECol09})
  Print 'Date'        (,{ECol10})
  Print 'Type'        (,{ECol11})
  Print 'Plan'        (,{ECol12})
  Print 'Cov'         (,{ECol13})
  Print 'Opt Cd'      (,{ECol14})
  Print 'Status'      (,{ECol15})    
  Print 'Message'     (,{ECol16})


  print '_'                  (+1,{Col01},{ColR}) fill

end-heading

!-----------------------------------------------------------------------
! Function:    delete-cbp-tables                                       -
! Description: truncate tables                                         -
! Called By:   Report                                                  -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure delete-cbp-tables

  #ifdef debugT                 ! Debug-FLOW
    show 'FLOW : DELETE-CBP-TABLES '
  #end-if

  move 'delete-cbp-tables' to $error_message
  move 'Delete contents from CBP_PLN_OPTN record' to $error_message

BEGIN-SQL  ON-ERROR=SQL-ERROR-ROUTINE
DELETE FROM PS_CBP_PLN_OPTN
END-SQL

  #debugd show
  #debugd show 'Records deleted from PS_CBP_PLN_OPTN '

  move 'Delete contents from CBP_DEPENDENTS record' to $error_message

BEGIN-SQL  ON-ERROR=SQL-ERROR-ROUTINE
DELETE FROM PS_CBP_DEPENDENTS
END-SQL

  #debugd show
  #debugd show 'Records deleted from PS_CBP_DEPENDENTS '

end-procedure delete-cbp-tables


!-----------------------------------------------------------------------
! Function:    read-cbp-pln-optn                                       -
! Description: calls to read in cbp_pln_optn                           -
! Called By:   Report                                                  -
! Calls:       see below                                               -
!-----------------------------------------------------------------------
begin-procedure read-cbp-pln-optn

  do Open-File-pln
  do Read-Record-pln
  while #end-file = 0
    do cbp-pln-chk
    #ifdef debugd 
     show '$chk_pln :' $chk_pln
    #end-if
    if $chk_pln = 'N'
       do Insert-Table-pln
       let #count = #count + 1
    end-if
    do Read-Record-pln
       if #End-file = 1
         ! Reached end of file - end processing
         #debugD show 'End of file reached'
         #debugd show 'Rows loaded for Plan Optns: ' #count
         #debugd show 'End of file reached'
         Break
      end-if
  end-while
  do close-file(3)

end-procedure read-cbp-pln-optn

!-----------------------------------------------------------------------
! Function:    Open-File-pln                                           -
! Description: calls to open file cbp_dependents                       -
! Called By:   read-cbp-dependents                                     -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
BEGIN-PROCEDURE Open-File-pln

  #ifdef debugF                 ! Debug-FLOW
    show 'FLOW : Open-Files               '
  #end-if

  ! Open input file for  table

  open $cbp_pln_optn_in as 3 for-reading record=119:vary status=#File_Status

  if #File_Status <> 0
    let #Prcs_Message_Nbr = #Prcs_Msg_Nbr_Unsuccessful
    let #Prcs_Run_Status = #Prcs_Run_Status_Error
    let $Prcs_Message_Parm1 = 'Error Opening Input File - ' || $FileName_In
    do Update-Prcs-Run-Status
    #debugd show $Prcs_Message_Parm1 '.  File status is ' #File_Status
    stop
  end-if

END-PROCEDURE     ! Open-Files-pln

!-----------------------------------------------------------------------
! Function:    Read-Record-pln                                         -
! Description: calls to read in cbp_dependents                         -
! Called By:   read-cbp-dependents                                     -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Read-Record-pln

  #ifdef debugF                 ! Debug-FLOW
    show 'FLOW :    Read-Record       '
  #end-if


     read 3 into $EMPLID:11
	         $PLAN_TYPE:2
	         $BENEFIT_PLAN:6
	         $COVRG_CD:2                   
	         $ANNUAL_PLEDGE:11
	         $OPTION_CD:3
	         $HLTH_PROVIDER_ID:30
	         $PREVIOUSLY_SEEN:1
           $FLAT_AMOUNT:9                
           $EVENT_ID:38
           $BENEFIT_PROGRAM:3
           $EMPL_RCD:1
           $BEN_RCD_NBR:1

    #debugD show '#End-file ' #End-file


  #ifdef debugD
  show '$EMPLID             : ' $EMPLID
	show '$PLAN_TYPE          : ' $PLAN_TYPE
	show '$BENEFIT_PLAN       : ' $BENEFIT_PLAN
	show '$COVRG_CD           : ' $COVRG_CD
	show '$ANNUAL_PLEDGE      : ' $ANNUAL_PLEDGE
	show '$OPTION_CD          : ' $OPTION_CD
	show '$HLTH_PROVIDER_ID   : ' $HLTH_PROVIDER_ID
	show '$PREVIOUSLY_SEEN    : ' $PREVIOUSLY_SEEN
  show '$FLAT_AMOUNT        : ' $FLAT_AMOUNT
  show '$EVENT_ID           : ' $EVENT_ID
  show '$BENEFIT_PROGRAM    :'  $BENEFIT_PROGRAM
  show '$EMPL_RCD           :'  $EMPL_RCD
  show '$BEN_RCD_NBR        :'  $BEN_RCD_NBR
  #end-if

	let $EMPLID           = ltrim(rtrim($EMPLID,' '),' ')
	let $PLAN_TYPE        = ltrim(rtrim($PLAN_TYPE,' '),' ')

	let $BENEFIT_PLAN     = ltrim(rtrim($BENEFIT_PLAN,' '),' ')
	If $BENEFIT_PLAN     = ''
	   let $BENEFIT_PLAN     = ' '
	end-if

	let $COVRG_CD         = ltrim(rtrim($COVRG_CD,' '),' ')
	If $COVRG_CD     = ''
	   let $COVRG_CD     = ' '
	end-if

	let $ANNUAL_PLEDGE    = ltrim(rtrim($ANNUAL_PLEDGE,' '),' ')
	If $ANNUAL_PLEDGE     = ''
	   let $ANNUAL_PLEDGE     = '0'
	end-if
	let #ANNUAL_PLEDGE    = to_number($ANNUAL_PLEDGE)

        let $FLAT_AMOUNT    = ltrim(rtrim($FLAT_AMOUNT,' '),' ')                    
	If $FLAT_AMOUNT     = ''                                                    
	   let $FLAT_AMOUNT     = '0'                                               
	end-if                                                                      
	let #FLAT_AMOUNT    = to_number($FLAT_AMOUNT)                               

	let $OPTION_CD        = ltrim(rtrim($OPTION_CD,' '),' ')
	If $OPTION_CD     = ''
	   let $OPTION_CD     = ' '
	end-if

  If $OPTION_CD     = '0'
	   let $OPTION_CD = ' '
	end-if

	let $HLTH_PROVIDER_ID = ltrim(rtrim($HLTH_PROVIDER_ID,' '),' ')
	If $HLTH_PROVIDER_ID     = ''
	   let $HLTH_PROVIDER_ID     = ' '
	end-if

	let $PREVIOUSLY_SEEN  = ltrim(rtrim($PREVIOUSLY_SEEN,' '),' ')
	If $PREVIOUSLY_SEEN     = ''
	   let $PREVIOUSLY_SEEN     = 'N'
	end-if

  let $EVENT_ID    = ltrim(rtrim($EVENT_ID,' '),' ')
	If $EVENT_ID     = ''
	   let $EVENT_ID = '0'
	end-if
	let #EVENT_ID    = to_number($EVENT_ID)
	
	
	let $BENEFIT_PROGRAM  = ltrim(rtrim($BENEFIT_PROGRAM,' '),' ')
	If $BENEFIT_PROGRAM     = ''
	   let $BENEFIT_PROGRAM     = ' '
	end-if
	
	let $EMPL_RCD    = ltrim(rtrim($EMPL_RCD,' '),' ')
	If $EMPL_RCD     = ''
	   let $EMPL_RCD = '0'
	end-if
	let #EMPL_RCD    = to_number($EMPL_RCD)
	
	let $BEN_RCD_NBR    = ltrim(rtrim($BEN_RCD_NBR,' '),' ')
	If $BEN_RCD_NBR     = ''
	   let $BEN_RCD_NBR = '0'
	end-if
	let #BEN_RCD_NBR    = to_number($BEN_RCD_NBR)


end-procedure Read-Record-pln

!-----------------------------------------------------------------------
! Function:    cbp-pln-chk                                             -
! Description: calls to check for existing row                         -
! Called By:   read-cbp-dependents                                     -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure cbp-pln-chk

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : cbp-pln-chk'
  #end-if

  let $Sql-Statement = $SQRName || ', cbp-pln-chk, SELECT, ' || 'PS_CBP_PLN_OPTN'
  let $chk_pln = 'N'

BEGIN-SELECT ON-ERROR=SQL-ERROR-ROUTINE
'X'

   LET $CHK_PLN = 'Y'

FROM PS_CBP_PLN_OPTN CPORC

WHERE CPORC.EMPLID    = $EMPLID
  AND CPORC.PLAN_TYPE = $PLAN_TYPE
  AND CPORC.EVENT_ID  = #EVENT_ID

END-SELECT

end-procedure cbp-pln-chk

!-----------------------------------------------------------------------
! Function:    Insert-Table-pln                                        -
! Description: calls to insert in cbp_dependents                       -
! Called By:   read-cbp-dependents                                     -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Insert-Table-pln

  #ifdef debugF                 ! Debug-FLOW
    show 'FLOW :    Insert-Table-pln       '
  #end-if

BEGIN-SQL

INSERT INTO PS_CBP_PLN_OPTN
(EMPLID
,PLAN_TYPE
,BENEFIT_PLAN
,COVRG_CD
,ANNUAL_PLEDGE
,OPTION_CD
,HLTH_PROVIDER_ID
,PREVIOUSLY_SEEN
,FLAT_AMOUNT                  
,EVENT_ID
,BENEFIT_PROGRAM
,EMPL_RCD
,BENEFIT_RCD_NBR
 )
VALUES
($EMPLID
,$PLAN_TYPE
,$BENEFIT_PLAN
,$COVRG_CD
,#ANNUAL_PLEDGE
,$OPTION_CD
,$HLTH_PROVIDER_ID
,$PREVIOUSLY_SEEN
,#FLAT_AMOUNT                 
,#EVENT_ID
,$BENEFIT_PROGRAM
,#EMPL_RCD
,#BEN_RCD_NBR
 )

END-SQL

end-procedure

!-----------------------------------------------------------------------
! Function:    read-cbp-dependents                                     -
! Description: calls to read in cbp_dependents                         -
! Called By:   Report                                                  -
! Calls:       see below                                               -
!-----------------------------------------------------------------------
begin-procedure read-cbp-dependents

  do Open-File-dep
  do Read-Record-dep
  while #end-file = 0
    do cbp-dep-chk
   ! SHOW '$chk_dep :' $chk_dep
    if $chk_dep = 'N'
       do Insert-Table-dep
       let #count = #count + 1
       !show 'Dep Records read :' #count    
     else
    !   do update-Table-dep    !No update needed data would be the same, later create array so only one row written to file to begin with
    end-if
    do Read-Record-dep
      if #End-file = 1
         ! Reached end of file - end processing
         #debugD show 'End of file reached'
         #debugd show 'Rows loaded for Dependents: ' #count
         #debugd show 'End of file reached'
         Break
      end-if
  end-while
  do close-file(4)

end-procedure read-cbp-dependents

!-----------------------------------------------------------------------
! Function:    Open-File-dep                                           -
! Description: calls to open cbp_dependents                            -
! Called By:   read-cbp-dependents                                     -
! Calls:       see below                                               -
!-----------------------------------------------------------------------
BEGIN-PROCEDURE Open-File-dep

  #ifdef debugF                 ! Debug-FLOW
    show 'FLOW : Open-Files-dep               '
  #end-if

  ! Open input file for  table
    open $cbp_dependents_in as 4 for-reading record=386:vary status=#File_Status

  if #File_Status <> 0
    let #Prcs_Message_Nbr = #Prcs_Msg_Nbr_Unsuccessful
    let #Prcs_Run_Status = #Prcs_Run_Status_Error
    let $Prcs_Message_Parm1 = 'Error Opening Input File - ' || $FileName_In
    do Update-Prcs-Run-Status
    #debugd show $Prcs_Message_Parm1 '.  File status is ' #File_Status
    stop
  end-if

END-PROCEDURE     ! Open-Files-dep

!-----------------------------------------------------------------------
! Function:    Read-Record-dep                                         -
! Description: calls to read cbp_dependents                            -
! Called By:   read-cbp-dependents                                     -
! Calls:       see below                                               -
!-----------------------------------------------------------------------
begin-procedure Read-Record-dep

  #ifdef debugF                 ! Debug-FLOW
    show 'FLOW :    Read-Record-dep       '
  #end-if


     read 4 into    $national_id:20
                    $cbp_depid:2
                    $cbp_last_name:25
                    $cbp_first_name:25
                    $relationship:2
                    $cbp_depnational_id:20
                    $sex:1
                    $birthdate:11
                    $cbp_medcoverage:1
                    $cbp_med_hlth_prov:30
                    $cbp_med_pcp_name:50
                    $cbp_med_prev_seen:1
                    $cbp_dencoverage:1
                    $cbp_den_hlth_prov:30
		                $CBP_VISN_COV:1
		                $CBP_NQ_MED_COV:1
		                $CBP_NQ_DENTAL:1
		                $CBP_NQ_VISION:1
		                $cbp_den_pcp_name:50
                    $cbp_den_prev_seen:1
                    $dependent_benef:2
                    $student:1
                    $smoker:1
                    $emplid:11
                    $name:50
                    $dep_benef_type:1
                    $mar_status:1
                    $disabled:1
                    $student_status_dt:11
                    $cbp_viscoverage:1
                    $cbp_life_benef:1
                    $cbp_savings_benef:1
                    $cbp_pension_benef:1
                    $cbp_new_dependent:3
                    $cbp_slif_benef:1
                    $contingent_blif:1
                    $benef_pct_blif:3
                    $contingent_slif:1
                    $benef_pct_slif:3
                    $contingent_sav:1
                    $benef_pct_sav:3
                    $contingent_pen:1
                    $benef_pct_pen:3
                    $cbp_rx_coverage:1                    !Sandy Setree, CCI, 11/04/2010
                    $cbp_nq_rx_cov:1                      !Sandy Setree, CCI, 11/04/2010
                    $gex_dep_cert:1
                    $ben_program:3
                    $cbp_ben_nbr:1
                    $cbp_empl_rcd:1
                    

    #debugD show '#End-file ' #End-file



    #ifdef debugD
     show '$NATIONAL_ID          : ' $NATIONAL_ID
     show '$cbp_depid            : ' $cbp_depid
     show '$cbp_last_name        : ' $cbp_last_name
     show '$cbp_first_name       : ' $cbp_first_name
     show '$relationship         : ' $relationship
     show '$cbp_depnational_id   : ' $cbp_depnational_id
     show '$sex                  : ' $sex
     show '$birthdate            : ' $birthdate
     show '$cbp_medcoverage      : ' $cbp_medcoverage
     show '$cbp_med_hlth_prov    : ' $cbp_med_hlth_prov
     show '$cbp_med_pcp_name     : ' $cbp_med_pcp_name
     show '$cbp_med_prev_seen    : ' $cbp_med_prev_seen
     show '$cbp_dencoverage      : ' $cbp_dencoverage
     show '$cbp_den_hlth_prov    : ' $cbp_den_hlth_prov
     show '$CBP_VISN_COV         : ' $CBP_VISN_COV
     show '$CBP_NQ_MED_COV       : ' $CBP_NQ_MED_COV
     show '$CBP_NQ_DENTAL        : ' $CBP_NQ_DENTAL
     show '$CBP_NQ_VISION        : ' $CBP_NQ_VISION
     show '$cbp_den_pcp_name     : ' $cbp_den_pcp_name
     show '$cbp_den_prev_seen    : ' $cbp_den_prev_seen
     show '$dependent_benef      : ' $dependent_benef
     show '$student              : ' $student
     show '$smoker               : ' $smoker
     show '$emplid               : ' $emplid
     show '$name                 : ' $name
     show '$dep_benef_type       : ' $dep_benef_type
     show '$mar_status           : ' $mar_status
     show '$disabled             : ' $disabled
     show '$student_status_dt    : ' $student_status_dt
     show '$cbp_viscoverage      : ' $cbp_viscoverage
     show '$cbp_life_benef       : ' $cbp_life_benef
     show '$cbp_savings_benef    : ' $cbp_savings_benef
     show '$cbp_pension_benef    : ' $cbp_pension_benef
     show '$cbp_new_dependent    : ' $cbp_new_dependent
     show '$cbp_slif_benef       : ' $cbp_slif_benef
     show '$contingent_blif      : ' $contingent_blif
     show '$benef_pct_blif       : ' $benef_pct_blif
     show '$contingent_slif      : ' $contingent_slif
     show '$benef_pct_slif       : ' $benef_pct_slif
     show '$contingent_sav       : ' $contingent_sav
     show '$benef_pct_sav        : ' $benef_pct_sav
     show '$contingent_pen       : ' $contingent_pen
     show '$benef_pct_pen        : ' $benef_pct_pen
     show '$cbp_rx_coverage      : ' $cbp_rx_coverage                   !Sandy Setree, CCI, 11/04/2010
     show '$cbp_nq_rx_cov        : ' $cbp_nq_rx_cov                     !Sandy Setree, CCI, 11/04/2010
     show '$gex_dep_cert         : ' $gex_dep_cert
     show '$ben_program          : ' $ben_program
     show '$cbp_ben_nbr          : ' $cbp_ben_nbr
     show '$cbp_empl_rcd         : ' $cbp_empl_rcd
     
   #end-if



    let $NATIONAL_ID          = ltrim(rtrim($NATIONAL_ID,' '),' ')
    let $cbp_depid            = ltrim(rtrim($cbp_depid,' '),' ')
    let $cbp_last_name        = ltrim(rtrim($cbp_last_name,' '),' ')
    let $cbp_first_name       = ltrim(rtrim($cbp_first_name,' '),' ')
    let $relationship         = ltrim(rtrim($relationship,' '),' ')
    let $cbp_depnational_id   = ltrim(rtrim($cbp_depnational_id,' '),' ')
    let $sex                  = ltrim(rtrim($sex,' '),' ')
    let $birthdate            = ltrim(rtrim($birthdate,' '),' ')
    let $cbp_medcoverage      = ltrim(rtrim($cbp_medcoverage,' '),' ')
    let $cbp_med_hlth_prov    = ltrim(rtrim($cbp_med_hlth_prov,' '),' ')
    let $cbp_med_pcp_name     = ltrim(rtrim($cbp_med_pcp_name,' '),' ')
    let $cbp_med_prev_seen    = ltrim(rtrim($cbp_med_prev_seen,' '),' ')
    let $cbp_dencoverage      = ltrim(rtrim($cbp_dencoverage,' '),' ')
    let $cbp_den_hlth_prov    = ltrim(rtrim($cbp_den_hlth_prov,' '),' ')
    let $CBP_VISN_COV         = ltrim(rtrim($CBP_VISN_COV,' '),' ')
    let $CBP_NQ_MED_COV       = ltrim(rtrim($CBP_NQ_MED_COV,' '),' ')
    let $CBP_NQ_DENTAL        = ltrim(rtrim($CBP_NQ_DENTAL,' '),' ')
    let $CBP_NQ_VISION        = ltrim(rtrim($CBP_NQ_VISION,' '),' ')
    let $cbp_den_pcp_name     = ltrim(rtrim($cbp_den_pcp_name,' '),' ')
    let $cbp_den_prev_seen    = ltrim(rtrim($cbp_den_prev_seen,' '),' ')
    let $dependent_benef      = ltrim(rtrim($dependent_benef,' '),' ')
    let $student              = ltrim(rtrim($student,' '),' ')
    let $smoker               = ltrim(rtrim($smoker,' '),' ')
    let $emplid               = ltrim(rtrim($emplid,' '),' ')
    let $name                 = ltrim(rtrim($name,' '),' ')
    let $dep_benef_type       = ltrim(rtrim($dep_benef_type,' '),' ')
    let $mar_status           = ltrim(rtrim($mar_status,' '),' ')
    let $disabled             = ltrim(rtrim($disabled,' '),' ')
    let $student_status_dt    = ltrim(rtrim($student_status_dt,' '),' ')
    let $cbp_viscoverage      = ltrim(rtrim($cbp_viscoverage,' '),' ')
    let $cbp_life_benef       = ltrim(rtrim($cbp_life_benef,' '),' ')
    let $cbp_savings_benef    = ltrim(rtrim($cbp_savings_benef,' '),' ')
    let $cbp_pension_benef    = ltrim(rtrim($cbp_pension_benef,' '),' ')
    let $cbp_new_dependent    = ltrim(rtrim($cbp_new_dependent,' '),' ')
    let $cbp_slif_benef       = ltrim(rtrim($cbp_slif_benef,' '),' ')
    let $contingent_blif      = ltrim(rtrim($contingent_blif,' '),' ')
    let $benef_pct_blif       = ltrim(rtrim($benef_pct_blif,' '),' ')
    let $contingent_slif      = ltrim(rtrim($contingent_slif,' '),' ')
    let $benef_pct_slif       = ltrim(rtrim($benef_pct_slif,' '),' ')
    let $contingent_sav       = ltrim(rtrim($contingent_sav,' '),' ')
    let $benef_pct_sav        = ltrim(rtrim($benef_pct_sav,' '),' ')
    let $contingent_pen       = ltrim(rtrim($contingent_pen,' '),' ')
    let $benef_pct_pen        = ltrim(rtrim($benef_pct_pen,' '),' ')
    let $cbp_rx_coverage      = ltrim(rtrim($cbp_rx_coverage,' '),' ')                   !Sandy Setree, CCI, 11/04/2010
    let $cbp_nq_rx_cov        = ltrim(rtrim($cbp_nq_rx_cov,' '),' ')                     !Sandy Setree, CCI, 11/04/2010
    let $gex_dep_cert         = ltrim(rtrim($gex_dep_cert,' '),' ')
    let $ben_program          = ltrim(rtrim($ben_program,' '),' ') 
    let $cbp_ben_nbr          = ltrim(rtrim($cbp_ben_nbr,' '),' ')   
    let $cbp_empl_rcd         = ltrim(rtrim($cbp_empl_rcd,' '),' ')
    


    if $NATIONAL_ID = ''
       let $NATIONAL_ID = ' '
    end-if

    if $cbp_depid            = ''
       let $cbp_depid = ' '
    end-if

    if $cbp_last_name        = ''
       let $cbp_last_name = ' '
    end-if

    if $cbp_first_name       = ''
       let $cbp_first_name = ' '
    end-if

    if $relationship         = ''
       let $relationship = ' '
    end-if

    if $cbp_depnational_id   = ''
       let $cbp_depnational_id = ' '
    end-if

    if $sex                  = ''
       let $sex = ' '
    end-if

    if $cbp_medcoverage      = ''
       let $cbp_medcoverage = ' '
    end-if

    if $cbp_med_hlth_prov    = ''
       let $cbp_med_hlth_prov = ' '
    end-if

    if $cbp_med_pcp_name     = ''
       let $cbp_med_pcp_name = ' '
    end-if

    if $cbp_med_prev_seen    = ''
       let $cbp_med_prev_seen = ' '
    end-if

    if $cbp_dencoverage      = ''
       let $cbp_dencoverage = ' '
    end-if

    if $cbp_den_hlth_prov    = ''
       let $cbp_den_hlth_prov = ' '
    end-if

    if $cbp_den_pcp_name     = ''
       let $cbp_den_pcp_name = ' '
    end-if

    if $cbp_den_prev_seen    = ''
       let $cbp_den_prev_seen = ' '
    end-if

    if $dependent_benef      = ''
       let $dependent_benef = ' '
    end-if

    if $student              = ''
       let $student = ' '
    end-if

    if $smoker               = ''
       let $smoker = ' '
    end-if

    if $emplid               = ''
       let $emplid = ' '
    end-if

    if $name                 = ''
       let $name = ' '
    end-if

    if $dep_benef_type       = ''
       let $dep_benef_type = ' '
    end-if

    if $mar_status           = ''
       let $mar_status = ' '
    end-if

    if $disabled             = ''
       let $disabled = ' '
    end-if

    if $cbp_viscoverage      = ''
       let $cbp_viscoverage = ' '
    end-if

    if $cbp_life_benef       = ''
       let $cbp_life_benef = ' '
    end-if

    if $cbp_savings_benef    = ''
       let $cbp_savings_benef = ' '
    end-if

    if $cbp_pension_benef    = ''
       let $cbp_pension_benef = ' '
    end-if

    if $cbp_new_dependent    = ''
       let $cbp_new_dependent = ' '
    end-if

    if $cbp_slif_benef       = ''
       let $cbp_slif_benef = ' '
    end-if

    if $contingent_blif      = ''
       let $contingent_blif = ' '
    end-if

    if $benef_pct_blif       = ''
       let $benef_pct_blif = ' '
    end-if

    if $contingent_slif      = ''
       let $contingent_slif = ' '
    end-if

    if $benef_pct_slif       = ''
       let $benef_pct_slif = ' '
    end-if

    if $contingent_sav       = ''
       let $contingent_sav = ' '
    end-if

    if $benef_pct_sav        = ''
       let $benef_pct_sav = ' '
    end-if

    if $contingent_pen       = ''
       let $contingent_pen = ' '
    end-if

    if $benef_pct_pen        = ''
       let $benef_pct_pen = ' '
    end-if

    if $cbp_rx_coverage          = ''                      !Sandy Setree, CCI, 11/04/2010
       let $cbp_rx_coverage = ' '                          !Sandy Setree, CCI, 11/04/2010
    end-if                                                 !Sandy Setree, CCI, 11/04/2010

    if $cbp_nq_rx_cov            = ''                      !Sandy Setree, CCI, 11/04/2010
       let $cbp_nq_rx_cov = ' '                            !Sandy Setree, CCI, 11/04/2010
    end-if                                                 !Sandy Setree, CCI, 11/04/2010
    
    let $gex_dep_cert  = ltrim(rtrim($gex_dep_cert,' '),' ')
	  If $gex_dep_cert     = ''
	   let $gex_dep_cert     = 'N'
	  end-if
    
    let $ben_program  = ltrim(rtrim($ben_program,' '),' ')
	  If $ben_program     = ''
	   let $ben_program     = ' '
	  end-if
	
	  let $cbp_ben_nbr    = ltrim(rtrim($cbp_ben_nbr,' '),' ')
	  If $cbp_ben_nbr     = ''
	   let $cbp_ben_nbr = '0'
	  end-if
	  let #cbp_ben_nbr    = to_number($cbp_ben_nbr)
	  
	  let $cbp_empl_rcd    = ltrim(rtrim($cbp_empl_rcd,' '),' ')
	  If $cbp_empl_rcd     = ''
	   let $cbp_empl_rcd = '0'
	  end-if
	  let #cbp_empl_rcd    = to_number($cbp_empl_rcd)
	
	  


end-procedure Read-Record-dep

!-----------------------------------------------------------------------
! Function:    cbp-dep-chk                                             -
! Description: calls to check for existing row                         -
! Called By:   read-cbp-dependents                                     -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure cbp-dep-chk

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : cbp-dep-chk'
  #end-if

  let $Sql-Statement = $SQRName || ', cbp-dep-chk, SELECT, ' || 'PS_CBP_PLN_OPTN'
  let $chk_dep = 'N'

BEGIN-SELECT ON-ERROR=SQL-ERROR-ROUTINE
'XX'

   LET $CHK_DEP = 'Y'

FROM PS_CBP_DEPENDENTS CDRC

WHERE CDRC.EMPLID          = $EMPLID
  AND CDRC.NATIONAL_ID     = $CBP_DEPNATIONAL_ID
  AND CDRC.DEPENDENT_BENEF = $DEPENDENT_BENEF

END-SELECT

end-procedure cbp-dep-chk

!-----------------------------------------------------------------------
! Function:    Insert-Table-dep                                        -
! Description: calls to insert cbp_dependents                          -
! Called By:   read-cbp-dependents                                     -
! Calls:       see below                                               -
!-----------------------------------------------------------------------
begin-procedure Insert-Table-dep

  #ifdef debugF                 ! Debug-FLOW
    show 'FLOW :    Insert-Table-dep       '
  #end-if

BEGIN-SQL

INSERT INTO PS_CBP_DEPENDENTS
(NATIONAL_ID
, CBP_DEPID
, CBP_LAST_NAME
, CBP_FIRST_NAME
, RELATIONSHIP
, CBP_DEPNATIONAL_ID
, SEX
, BIRTHDATE
, CBP_MEDCOVERAGE
, CBP_MED_HLTH_PROV
, CBP_MED_PCP_NAME
, CBP_MED_PREV_SEEN
, CBP_DENCOVERAGE
, CBP_DEN_HLTH_PROV
, CBP_VISN_COV
, CBP_NQ_MED_COV
, CBP_NQ_DENTAL
, CBP_NQ_VISION
, CBP_DEN_PCP_NAME
, CBP_DEN_PREV_SEEN
, DEPENDENT_BENEF
, STUDENT
, SMOKER
, EMPLID
, NAME
, DEP_BENEF_TYPE
, MAR_STATUS
, DISABLED
, STUDENT_STATUS_DT
, CBP_VISCOVERAGE
, CBP_LIFE_BENEF
, CBP_SAVINGS_BENEF
, CBP_PENSION_BENEF
, CBP_NEW_DEPENDENT
, CBP_SLIF_BENEF
, CONTINGENT_BLIF
, BENEF_PCT_BLIF
, CONTINGENT_SLIF
, BENEF_PCT_SLIF
, CONTINGENT_SAV
, BENEF_PCT_SAV
, CONTINGENT_PEN
, BENEF_PCT_PEN
, CBP_RX_COVERAGE                    !Sandy Setree, CCI, 11/04/2010
, CBP_NQ_RX_COV                      !Sandy Setree, CCI, 11/04/2010
, GEX_DEP_CERT
, BENEFIT_PROGRAM
, EMPL_RCD
, BENEFIT_RCD_NBR
 )
VALUES
($NATIONAL_ID
, $CBP_DEPID
, $CBP_LAST_NAME
, $CBP_FIRST_NAME
, $RELATIONSHIP
, $CBP_DEPNATIONAL_ID
, $SEX
, $BIRTHDATE
, $CBP_MEDCOVERAGE
, $CBP_MED_HLTH_PROV
, $CBP_MED_PCP_NAME
, $CBP_MED_PREV_SEEN
, $CBP_DENCOVERAGE
, $CBP_DEN_HLTH_PROV
, $CBP_VISN_COV
, $CBP_NQ_MED_COV
, $CBP_NQ_DENTAL
, $CBP_NQ_VISION
, $CBP_DEN_PCP_NAME
, $CBP_DEN_PREV_SEEN
, $DEPENDENT_BENEF
, $STUDENT
, $SMOKER
, $EMPLID
, $NAME
, $DEP_BENEF_TYPE
, $MAR_STATUS
, $DISABLED
, $STUDENT_STATUS_DT
, $CBP_VISCOVERAGE
, $CBP_LIFE_BENEF
, $CBP_SAVINGS_BENEF
, $CBP_PENSION_BENEF
, $CBP_NEW_DEPENDENT
, $CBP_SLIF_BENEF
, $CONTINGENT_BLIF
, $BENEF_PCT_BLIF
, $CONTINGENT_SLIF
, $BENEF_PCT_SLIF
, $CONTINGENT_SAV
, $BENEF_PCT_SAV
, $CONTINGENT_PEN
, $BENEF_PCT_PEN
, $CBP_RX_COVERAGE                    !Sandy Setree, CCI, 11/04/2010
, $CBP_NQ_RX_COV                      !Sandy Setree, CCI, 11/04/2010
, $GEX_DEP_CERT
, $BEN_PROGRAM
, $CBP_EMPL_RCD
, $CBP_BEN_NBR
)

END-SQL
IF ISNULL($SQL-ERROR)
 !SHOW 'Dependent Inserted'
 let #dep_cnt=#dep_cnt+1
 !show '#dep_cnt :' #dep_cnt
 !SHOW '$EMPLID :' $EMPLID
 !SHOW '$NATIONAL_ID :' $NATIONAL_ID
END-IF
end-procedure

!-----------------------------------------------------------------------
! Function:    Pre-Main-Process                                        -
! Description: Select from CBP_PLN_OPTN for control totals             -
! Called By:   Report                                                  -
! Calls:       Main-Process                                            -
!-----------------------------------------------------------------------
begin-procedure Pre-Main-Process

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Pre-Main-Process'
  #end-if

  let $Sql-Statement = $SQRName || ', pre-main-process, SELECT, ' || 'PS_CBP_PLN_OPTN'
  let #Total_CBP     = 0
  let $empchk        = ' '
  let $prevemp       = ' '
  let $pschk         = 'N'
  Let $OptnChk       = 'N'
  
BEGIN-SELECT ON-ERROR=SQL-ERROR-ROUTINE
TRB.EMPLID
TRB.PLAN_TYPE
TRB.BENEFIT_PLAN
TRB.COVRG_CD
TRB.ANNUAL_PLEDGE
TRB.OPTION_CD
TRB.HLTH_PROVIDER_ID
TRB.PREVIOUSLY_SEEN
TRB.FLAT_AMOUNT                       
TRB.EVENT_ID
TRB.BENEFIT_PROGRAM
TRB.EMPL_RCD
TRB.BENEFIT_RCD_NBR

   let #Total_CBP     = #Total_CBP + 1
   let $empchk        = &TRB.EMPLID
   let $pschk         = 'N'
   let $Event_Id_disp = &TRB.EVENT_ID
   let $plan_type     = &TRB.PLAN_TYPE
   let $Pers_Emplid   = &TRB.EMPLID
   if $empchk <> $prevemp
     let $Dep_Error     = 'N'
   end-if
   do Get-Name
   let $Emp_Name       = &P.NAME
   
   if (&TRB.PLAN_TYPE='1P' or &TRB.PLAN_TYPE='1N') AND &TRB.OPTION_CD= ' '
      Let $OptnChk='Y'
      let $WHERE_CLAUSE   = 'ERCPO.EMPLID = ' || chr(39) || $EMPLID || chr(39) || ' AND ERCPO.PLAN_TYPE = ' || chr(39) || $PLAN_TYPE || chr(39)
      let $Error_Type     = 'ERR'
      let $Error_Message  = 'Missing Option Code for Plan Type = ' || &TRB.PLAN_TYPE
      let $Dply-Statement = $empchk || ' Missing Option Code for Plan Type = ' || &TRB.PLAN_TYPE
      display $Dply-Statement
      do write-Error-Files
      do Print-Error-Line-Nops
   END-IF
   
   if $OptnChk='N'
      do Main-Process
   end-if   
   
   if $pschk = 'N' and $OptnChk='N'
      let #Total_CBP_NOPS = #Total_CBP_NOPS + 1
      let $EMPLID         = &TRB.EMPLID
      SHOW '#BEN_RCD_NBR:' #BEN_RCD_NBR
      SHOW '&TRB.EVENT_ID:' &TRB.EVENT_ID
      let $WHERE_CLAUSE   = 'ERCPO.EMPLID = ' || chr(39) || $EMPLID || chr(39) || ' AND ERCPO.PLAN_TYPE = ' || chr(39) || $PLAN_TYPE || chr(39) || ' AND ERCPO.EVENT_ID = ' || chr(39) || $Event_Id_disp || chr(39)
      let $Error_Type     = 'ERR'
      let $Error_Message  = 'No Matching Record in BAS_PARTIC-Event Id=' || SUBSTR($Event_Id_disp,1,1)
      let $Dply-Statement = $empchk || 'No Matching Record in BAS_PARTIC-Event Id=' || SUBSTR($Event_Id_disp,1,1)
      display $Dply-Statement
      do write-Error-Files
      do Print-Error-Line-Nops
   end-if

   let $prevemp   = $empchk

FROM PS_CBP_PLN_OPTN TRB
ORDER BY TRB.EMPLID, TRB.PLAN_TYPE

END-SELECT

end-procedure Pre-Main-Process

!-----------------------------------------------------------------------
! Function:    Get-Name                                                -
! Description: Get Name                                                -
! Called By:   Main-Process                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
Begin-Procedure Get-Name
Begin-Select
P.NAME,
P.NAME_DISPLAY,
P.NAME_FORMAL

FROM PS_PERSONAL_DATA P
WHERE P.EMPLID=$Pers_Emplid
End-Select
End-Procedure Get-Name

!-----------------------------------------------------------------------
! Function:    Main-Process                                            -
! Description: Main procedure from which all other procedures originate-
! Called By:   Pre-Main-Process                                        -
! Calls:       Find-Matching-Open-Event,Process-Employee-Elections,    -
!              Update-Partic-Status, Print-Error-Line                  -
!-----------------------------------------------------------------------
begin-procedure Main-Process                      ! Main Procedure

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Main-Process'
    show 'Select Sched ID'
  #end-if

  let $Sql-Statement = $SQRName || ', Report, SELECT, PS_CBP_EVENTREQ/' || 'PS_CBP_EVENT_CODES'
  show 'Emplid/Event Dt/Event Cls: ' &TRB.EMPLID '/' &TRB.EVENT_ID '/' &EVR.EVENT_CLASS

BEGIN-SELECT ON-ERROR=SQL-ERROR-ROUTINE
EVR.EMPLID
EVR.EMPL_RCD
EVR.BENEFIT_PROGRAM
EVR.EVENT_DT
EVR.CONFIRM_NOTIFY_DT
EVR.EVENT_CLASS
EVR.EVENT_ID
EVR.BAS_PROCESS_STATUS
EVR.EVENT_STATUS
EVR.BENEFIT_RCD_NBR

  #debugd show '============================================================'
  #debugd show 'Emplid/Event Dt/Event Cls: ' &EVR.EMPLID '/' &EVR.EVENT_DT '/' &EVR.EVENT_CLASS
  show 'Emplid/Event Dt/Event Cls: ' &TRB.EMPLID '/' &TRB.EVENT_ID '/' &EVR.EVENT_CLASS
  SHOW '$DEP_ERROR :' $DEP_ERROR

  add 1 to #Emp_Events     ! Increment the counter for events processed
  move &EVR.EMPLID   to $Emplid
  move &EVR.EVENT_ID to $EVR_EVENT_ID
  move &EVR.EMPL_RCD to $Empl_Rcd
  move &EVR.BENEFIT_PROGRAM to $Ben_Prog
  
  let $pschk = 'Y'
  #ifdef debugt
  SHOW '&EVR.EMPLID :' &EVR.EMPLID
  SHOW '&EVR.EVENT_ID :' &EVR.EVENT_ID
  SHOW '&EVR.BENEFIT_PROGRAM:' &EVR.BENEFIT_PROGRAM
  SHOW '&EVR.BAS_PROCESS_STATUS:' &EVR.BAS_PROCESS_STATUS
  SHOW '&EVR.EVENT_STATUS :' &EVR.EVENT_STATUS
  SHOW '&TRB.BENEFIT_PROGRAM:' &TRB.BENEFIT_PROGRAM
  show '$SCHEDID             :' $SCHEDID
  show '&TRB.EMPLID          :' &TRB.EMPLID
  show '&TRB.BENEFIT_RCD_NBR :' &TRB.BENEFIT_RCD_NBR
  show '&TRB.EVENT_ID        :' &TRB.EVENT_ID
  show '&EVR.BAS_PROCESS_STATUS :' &EVR.BAS_PROCESS_STATUS
  #end-if
  
  
  
  if &EVR.BENEFIT_PROGRAM<>&TRB.BENEFIT_PROGRAM
       let $Dply-Statement = &EVR.EMPLID || ', Invalid Benefit Program = ' || &TRB.BENEFIT_PROGRAM
       Display $Dply-Statement
       let $Error_Type    = 'ERR'
       let $Error_Message = 'Benefit Program from Univers does not match '
       add 1 to #Errors             ! Increment the counter for Errors
       do Print-Error-Line
       let $WHERE_CLAUSE   = 'ERCPO.EMPLID = ' || chr(39) || $EMPLID || chr(39) || ' AND ERCPO.PLAN_TYPE = ' || chr(39) || $PLAN_TYPE || chr(39) || ' AND ERCPO.EVENT_ID = ' || chr(39) || $EVR_EVENT_ID || chr(39)
       do write-Error-Files
       goto End_Process
  end-if
  
  if &EVR.BAS_PROCESS_STATUS= 'ET' or &EVR.BAS_PROCESS_STATUS= 'RE' ! &EVR.BAS_PROCESS_STATUS='PR' OR &EVR.BAS_PROCESS_STATUS='NT' or &EVR.BAS_PROCESS_STATUS='ET' GEX ISDVNPK 12/2/2010 Added as per Molly for ITG
  ELSE
       let $Dply-Statement = &EVR.EMPLID || ', Invalid Process Status = ' || &EVR.BAS_PROCESS_STATUS
       Display $Dply-Statement
       let $Error_Type    = 'ERR'
       let $Error_Message = 'Invalid Process Status = ' || &EVR.BAS_PROCESS_STATUS
       add 1 to #Errors             ! Increment the counter for Errors
       do Print-Error-Line
       let $WHERE_CLAUSE   = 'ERCPO.EMPLID = ' || chr(39) || $EMPLID || chr(39) || ' AND ERCPO.PLAN_TYPE = ' || chr(39) || $PLAN_TYPE || chr(39) || ' AND ERCPO.EVENT_ID = ' || chr(39) || $EVR_EVENT_ID || chr(39)
       do write-Error-Files
       goto End_Process
  end-if    
  
  if &EVR.EVENT_STATUS <> 'O'
       let $Dply-Statement = &EVR.EMPLID || ', Invalid Event Status = ' || &EVR.EVENT_STATUS
       Display $Dply-Statement
       let $Error_Type    = 'ERR'
       let $Error_Message = 'Invalid Event Status = ' || &EVR.EVENT_STATUS
       add 1 to #Errors             ! Increment the counter for Errors
       do Print-Error-Line
       let $WHERE_CLAUSE   = 'ERCPO.EMPLID = ' || chr(39) || $EMPLID || chr(39) || ' AND ERCPO.PLAN_TYPE = ' || chr(39) || $PLAN_TYPE || chr(39) || ' AND ERCPO.EVENT_ID = ' || chr(39) || $EVR_EVENT_ID || chr(39)
       do write-Error-Files
       goto End_Process
  end-if

  do Check-Option-Cd !vahini
  if $Optn-Cd-Found='N'
  !SHOW '&BPO.OPTION_CD :' &BPO.OPTION_CD
  !SHOW '&TRB.OPTION_CD :' &TRB.OPTION_CD
       let $Dply-Statement = &EVR.EMPLID || ', Invalid Option Cd for Plan Type = ' || &TRB.PLAN_TYPE
       Display $Dply-Statement
       let $Error_Type    = 'ERR'
       let $Error_Message = 'Invalid Option Cd for Plan Type = ' || &TRB.PLAN_TYPE
       add 1 to #Errors             ! Increment the counter for Errors
       do Print-Error-Line
       let $WHERE_CLAUSE   = 'ERCPO.EMPLID = ' || chr(39) || $EMPLID || chr(39) || ' AND ERCPO.PLAN_TYPE = ' || chr(39) || $PLAN_TYPE || chr(39) || ' AND ERCPO.EVENT_ID = ' || chr(39) || $EVR_EVENT_ID || chr(39)
       do write-Error-Files
       GOTO End_Process
  end-if
  
  let $pschk = 'Y'
  do Find-Matching-Open-Event
   !
   !**If an open event is found, continue processing
   !
  if #Open_Event_Found 
     #debugd show 'Open Event Found ' &EVR.EMPLID
     do Process-Employee-Elections   
     SHOW '$DEP_ERROR :' $DEP_ERROR 
    if $ElectionsFound = 'Y'   AND $DEP_ERROR='N'
      do Update-Partic-Status
    end-if
   else
    !
    !**If an open event is not found, print an error line
    !
       let $Dply-Statement = &EVR.EMPLID || ', No Matching Open Event - Sched Id = ' || $SchedID
       Display $Dply-Statement
       let $Error_Type    = 'ERR'
       let $Error_Message = 'No Matching Open Event - Sched Id = ' || $SchedID
       add 1 to #Errors             ! Increment the counter for Errors
       do Print-Error-Line
       let $WHERE_CLAUSE   = 'ERCPO.EMPLID = ' || chr(39) || $EMPLID || chr(39) || ' AND ERCPO.PLAN_TYPE = ' || chr(39) || $PLAN_TYPE || chr(39) || ' AND ERCPO.EVENT_ID = ' || chr(39) || $EVR_EVENT_ID || chr(39)
       do write-Error-Files
   end-if
  End_Process: 

FROM PS_BAS_PARTIC EVR
WHERE EVR.SCHED_ID        = $SCHEDID
  AND EVR.EMPLID          = &TRB.EMPLID
  AND EVR.BENEFIT_RCD_NBR = &TRB.BENEFIT_RCD_NBR
  AND EVR.EVENT_ID        = &TRB.EVENT_ID
END-SELECT

end-procedure Main-Process

!-----------------------------------------------------------------------
! Function:    Find-Matching-Open-Event                                -
! Description: Verify Sched ID is open                                 -
! Called By:   Main-Process                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Find-Matching-Open-Event

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Find-Matching-Open-Event'
    SHOW '$EMPLID              :' $EMPLID
  SHOW '&EVR.BENEFIT_RCD_NBR :' &EVR.BENEFIT_RCD_NBR
  SHOW '&EVR.EVENT_CLASS     :' &EVR.EVENT_CLASS
  SHOW '&EVR.EVENT_DT        :' &EVR.EVENT_DT
  #end-if
  
  move {False} to #Open_Event_Found

BEGIN-SELECT
BAP.SCHED_ID
BAP.EVENT_ID
BAP.BENEFIT_PROGRAM
BPP.DISPLAY_PLN_SEQ
BAP.BENEFIT_RCD_NBR

  MOVE {TRUE}  TO #OPEN_EVENT_FOUND
  
FROM PS_BAS_PARTIC      BAP,
     PS_BAS_PARTIC_PLAN BPP

WHERE BAP.SCHED_ID        = $SCHEDID
  AND BAP.EMPLID          = $EMPLID
  AND BAP.BENEFIT_RCD_NBR = &EVR.BENEFIT_RCD_NBR
  AND BAP.EVENT_CLASS     = &EVR.EVENT_CLASS
  AND BAP.EVENT_STATUS    = 'O'
  AND BAP.EVENT_DT        = &EVR.EVENT_DT
  AND BPP.SCHED_ID        = BAP.SCHED_ID
  AND BPP.EMPLID          = BAP.EMPLID
  AND BPP.BENEFIT_RCD_NBR = BAP.BENEFIT_RCD_NBR
  AND BPP.EVENT_ID        = BAP.EVENT_ID
END-SELECT

end-procedure Find-Matching-Open-Event

!-----------------------------------------------------------------------
! Function:    Check-Option-Cd                                         -
! Description: Verify Option Code in BAS_PARTIC_OPTN                   -
! Called By:   Main-Process                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
Begin-Procedure Check-Option-Cd

 Move 'N' to $Optn-Cd-Found
 !SHOW '$SchedID             :' $SchedID
 !SHOW '&EVR.EMPLID          :' &EVR.EMPLID
 !SHOW '&EVR.BENEFIT_RCD_NBR :' &EVR.BENEFIT_RCD_NBR
 !SHOW '&EVR.EVENT_ID        :' &EVR.EVENT_ID
 !SHOW '&TRB.PLAN_TYPE       :' &TRB.PLAN_TYPE
Begin-Select
BPO.OPTION_CD

  Move 'Y' to $Optn-Cd-Found
  
FROM PS_BAS_PARTIC_OPTN BPO
WHERE BPO.SCHED_ID=$SchedID
AND BPO.EMPLID=&EVR.EMPLID
AND BPO.BENEFIT_RCD_NBR=&EVR.BENEFIT_RCD_NBR
AND BPO.EVENT_ID=&EVR.EVENT_ID
AND BPO.PLAN_TYPE=&TRB.PLAN_TYPE
AND BPO.OPTION_CD=&TRB.OPTION_CD
End-Select
End-Procedure Check-Option-Cd

!-----------------------------------------------------------------------
! Function:    Process-Employee-Elections                              -
! Description: Query the CBP_PLN_OPTN table to select rows to process  -
! Called By:   Main-Process                                            -
! Calls:       Update-Bas-Partic-Plan-Amount,                          -
!              Update-Bas-Partic-Plan-CTO-FTO,Update-Bas-Partic-Plan   -
!              READ-CBP-VOL-DED,UPDATE-BAS-PARTIC-PLAN-FLAT-AMT,       -
!              Print-Detail-Line,Process-Dependent-Coverage            -
!-----------------------------------------------------------------------
begin-procedure Process-Employee-Elections

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Process-Employee-Elections'
  #end-if

  let $Sql-Statement = $SQRName || ', Process-Employee-Elections, SELECT, ' || 'PS_CBP_PLN_OPTN'

  move ' ' to $Option_Cd
  move 'N' to $ElectionsFound

  let $ElectionsFound = 'Y'
  let $ElectionsProc  = 'N'
  let $Option_Cd      = &TRB.OPTION_CD
  let $PLAN_TYPE      = &TRB.PLAN_TYPE
  let $Ben_plan       = &TRB.BENEFIT_PLAN
  let $Cov_cd         = &TRB.COVRG_CD
  let $WHERE_CLAUSE   = 'ERCPO.EMPLID = ' || chr(39) || $EMPLID || chr(39) || ' AND ERCPO.PLAN_TYPE = ' || chr(39) || $PLAN_TYPE || chr(39) || ' AND ERCPO.EVENT_ID = ' || chr(39) || $EVR_EVENT_ID || chr(39)
  
  show '$PLAN_TYPE    :' $PLAN_TYPE
  show '&TRB.COVRG_CD :' &TRB.COVRG_CD
  SHOW '$ElectionsProc :' $ElectionsProc
  if ((substr($PLAN_TYPE, 1, 1) = '1' and
      (&TRB.COVRG_CD = '2'      !employee + another person (spouse or a child)
    or &TRB.COVRG_CD = '3'      !Employee + Dependent
    or &TRB.COVRG_CD = '4'      !employee + more than 1 other family member
    or &TRB.COVRG_CD = '5'      !employee + domestic partner
    or &TRB.COVRG_CD = '6'      !employee + domestic partner + domestic partners child
    or &TRB.COVRG_CD = '7'      !employee + domestic partner + domestic partners children
    or &TRB.COVRG_CD = '8'      !employee + employees child + domestic partner
    or &TRB.COVRG_CD = '9'      !employee + employees child + domestic partner + domestic partners child
    or &TRB.COVRG_CD = '10'     !EE + 1 Child
    or &TRB.COVRG_CD = '11'     !EE + 2 Chldrn
    or &TRB.COVRG_CD = '13'     !EE + 3 Chldrn
    or &TRB.COVRG_CD = '15'     !EE + 4 or more Chldrn
    or &TRB.COVRG_CD = '16'     !EE/Sp+/1c
    or &TRB.COVRG_CD = '17'     !EE/Sp+/2c
    or &TRB.COVRG_CD = '18'     !EE/Sp+/3c
    or &TRB.COVRG_CD = '19'     !EE/Sp+/4c+
    or &TRB.COVRG_CD = '20'     !EE/Sp/1c
    or &TRB.COVRG_CD = '21'     !EE/Sp/2c
    or &TRB.COVRG_CD = '22'     !EE/Sp/3c
    or &TRB.COVRG_CD = '23'     !EE/Sp/4c+
    or &TRB.COVRG_CD = '24'     !DP Ad+
    or &TRB.COVRG_CD = '25'     !DP Ad
    or &TRB.COVRG_CD = '26'     !DP 1c
    or &TRB.COVRG_CD = '27'     !DP 2c
    or &TRB.COVRG_CD = '28'     !DP 3c
    or &TRB.COVRG_CD = '29'     !DP 4c+
    or &TRB.COVRG_CD = '30'     !DP Ad+/1c
    or &TRB.COVRG_CD = '31'     !DP Ad+/2c
    or &TRB.COVRG_CD = '32'     !DP Ad+/3c
    or &TRB.COVRG_CD = '33'     !DP Ad+/4c
    or &TRB.COVRG_CD = '34'     !DP Ad/1c
    or &TRB.COVRG_CD = '35'     !DP Ad/2c
    or &TRB.COVRG_CD = '36'     !DP Ad/3c
    or &TRB.COVRG_CD = '37'))   !DP Ad/4c+
    or substr($PLAN_TYPE, 1, 1) = '2'
    or substr($PLAN_TYPE, 1, 1) = '4'
    or substr($PLAN_TYPE, 1, 1) = '8' )
       if $PLAN_TYPE<>'1M' and $PLAN_TYPE<>'1N' and $PLAN_TYPE<>'1P'
        show 'Process-Dependent-Coverage'
        do Process-Dependent-Coverage
        if $dep_error='N'
           let $ElectionsProc  = 'Y'
        end-if
       end-if
  end-if
  
 SHOW '$ElectionsProc :' $ElectionsProc  
 SHOW 'Elections $DEP_ERROR :' $DEP_ERROR 
 IF $DEP_ERROR        <> 'Y'
  evaluate $PLAN_TYPE
     when = '60'
     when = '61'
     when = '67'        
     when = '6Z'                             !Sandy Setree, CCI, 11/04/2010 - Added for Giant Eagle.
        if $PLAN_TYPE='67'
           do Get-HSA-Max-Contrib
        End-if   
        do Update-Bas-Partic-Plan-Amount
        let $ElectionsProc  = 'Y'
        break
     when = '1V'
     when = '1X'
        do Update-Bas-Partic-Plan-CTO-FTO
        let $ElectionsProc  = 'Y'
        break
     when = '30'
     when = '31'
        do Update-Bas-Partic-Plan-30-31
        let $ElectionsProc  = 'Y'
        break
     when-other
        do Update-Bas-Partic-Plan
        show 'other $ElectionsProc:' $ElectionsProc
        break
  end-evaluate    
 END-IF 
!Chris Ladd, CCI, 11/12/2009 - end

  
  SHOW '$ElectionsProc :' $ElectionsProc
  if $ElectionsProc  = 'Y' and $DEP_ERROR='N'
     let $Message = 'Processed PLAN TYPE = ' || $PLAN_TYPE
     let $Dply-Statement = $EMPLID || ', PLAN TYPE processed, ' || $PLAN_TYPE
     display $Dply-Statement
     do Print-Detail-Line
   else 
    if   $ElectionsProc  = 'Y'
     let $Dply-Statement = $EMPLID || ', PLAN TYPE not processed, ' || $PLAN_TYPE
     display $Dply-Statement
     add 1 to #Warnings_pln           ! Increment the counter for Warnings
     let $Error_Type    = 'WARN'
     let $Error_Message = 'Plan type criteria not met, no dependents processed.'
    else
     let $Dply-Statement = $EMPLID || ', PLAN TYPE not processed, ' || $PLAN_TYPE
     display $Dply-Statement
     add 1 to #Warnings_pln           ! Increment the counter for Warnings
     let $Error_Type    = 'WARN'
     let $Error_Message = 'Plan type not processed. Errors on dependents.'
    end-if 
    do Print-Error-Line
    do write-Error-Files
  end-if

 
end-procedure Process-Employee-Elections

!-----------------------------------------------------------------------
! Function:    Process-Dependent-Coverage                              -
! Description: Query the CBP_DEPENDENTS table to select rows to process-
! Called By:   Process-Employee-Elections                              -
! Calls:       Find-Dep-Records,Find-Dep-National-ID,                  -
!              Insert-Dependent-Benef,Update-Dependent-Benef,          -
!              Insert-Dependent-NID,Find-Matching-Bas-Dependent,       -
!              Find-Matching-Dependent-Benef,Insert-Bas-Partic-Dpnd,   -
!              Update-Bas-Partic-Dpnd,Delete-Bas-Dependent,            -
!              Update-Bas-Partic-Dpnd-2x                               -
!-----------------------------------------------------------------------
begin-procedure Process-Dependent-Coverage

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Process-Dependent-Coverage'
  #end-if
  show 'DEP $EMPLID :' $EMPLID
  let $Sql-Statement = $SQRName || ', Process-Dependent-Coverage, SELECT, ' || 'PS_CBP_DEPBNFT'

  let $PREVIOUSLY_SEEN  = ' '
  let $HLTH_PROVIDER_ID = ' '
  let #BENEF_PCT        = 0
  let $CONTINGENT       = 'N'
  
BEGIN-SELECT ON-ERROR=SQL-ERROR-ROUTINE
DBT.EMPLID
DBT.DEPENDENT_BENEF
DBT.NAME
DBT.CBP_FIRST_NAME
DBT.CBP_LAST_NAME
DBT.RELATIONSHIP
DBT.DEP_BENEF_TYPE
DBT.MAR_STATUS
DBT.SEX
DBT.BIRTHDATE
DBT.STUDENT
DBT.DISABLED
DBT.SMOKER
DBT.STUDENT_STATUS_DT
DBT.NATIONAL_ID
DBT.CBP_DEPNATIONAL_ID
DBT.CBP_MEDCOVERAGE
DBT.CBP_DENCOVERAGE
DBT.CBP_MED_HLTH_PROV
DBT.CBP_DEN_HLTH_PROV
DBT.CBP_VISN_COV
DBT.CBP_NQ_MED_COV
DBT.CBP_NQ_DENTAL
DBT.CBP_NQ_VISION
DBT.CBP_NEW_DEPENDENT
DBT.CBP_LIFE_BENEF
DBT.CBP_SLIF_BENEF
DBT.CBP_SAVINGS_BENEF
DBT.CBP_PENSION_BENEF
DBT.CBP_MED_PREV_SEEN
DBT.CBP_DEN_PREV_SEEN
DBT.CONTINGENT_BLIF
DBT.BENEF_PCT_BLIF
DBT.CONTINGENT_SLIF
DBT.BENEF_PCT_SLIF
DBT.CBP_RX_COVERAGE                    !Sandy Setree, CCI, 11/04/2010
DBT.CBP_NQ_RX_COV                      !Sandy Setree, CCI, 11/04/2010
DBT.GEX_DEP_CERT
DBT.BENEFIT_PROGRAM
DBT.EMPL_RCD
DBT.BENEFIT_RCD_NBR

  ADD 1                 TO #DEP_EVENTS
  LET $DEP-ID            = &DBT.DEPENDENT_BENEF
  LET $ELECTIONSPROCDEP  = 'Y'
  LET $DBTName           = NVL(RTRIM(&DBT.NAME, ' '), ' ')
  
  show '&DBT.CBP_NEW_DEPENDENT :' &DBT.CBP_NEW_DEPENDENT
  show '$FOUND_DEP_REC         :' $FOUND_DEP_REC
  show '$Found_Rel             :' $Found_Rel
  show '$Found_Dep_Cert        :' $Found_Dep_Cert
  show '$PLAN_TYPE             :' $PLAN_TYPE
  show '&DBT.CBP_MEDCOVERAGE   :' &DBT.CBP_MEDCOVERAGE
  show '&DBT.CBP_NQ_MED_COV    :' &DBT.CBP_NQ_MED_COV
  show '&DBT.CBP_DENCOVERAGE   :' &DBT.CBP_DENCOVERAGE
  show '&DBT.CBP_NQ_DENTAL     :' &DBT.CBP_NQ_DENTAL
  show '&DBT.CBP_VISN_COV      :' &DBT.CBP_VISN_COV
  show '&DBT.CBP_NQ_VISION     :' &DBT.CBP_NQ_VISION
  show '&DBT.CBP_RX_COVERAGE   :' &DBT.CBP_RX_COVERAGE
  show '&DBT.CBP_SLIF_BENEF    :' &DBT.CBP_SLIF_BENEF
  show '&DBT.CBP_SAVINGS_BENEF :' &DBT.CBP_SAVINGS_BENEF
  show '&DBT.CBP_PENSION_BENEF :' &DBT.CBP_PENSION_BENEF
  show '$DEP-ID                :' $DEP-ID

 !-------------------------------------------------------------------------------
 !***Evaluate Dependent status and Update or Insert values******
 !-------------------------------------------------------------------------------
  do Find-Dep-Records
  do Find-Dep-National-ID
   
  If substr(&DBT.CBP_NEW_DEPENDENT, 1, 3) = 'Y'
    show 'New Dependent'
    IF $FOUND_DEP_REC = 'N'
       do Check-Dep-Ben
       if $Dep_Ben_Found='N'
        do Insert-Dep-Ben
       End-if 
       do Check-Dep-Ben-Addr
       if $Addr_found='N'
        do Insert-Dep-Ben-Addr
       end-if
       do Check-Dep-Ben-Name
       if $Name_found='N' 
       do Insert-Dep-Ben-Name
       end-if
       do Check-Dep-Ben-Effdt
       if $Effdt_found='N'
       Show 'TESTRUN Test 1'
       do Insert-Dep-Ben-Eff
       end-if
    else
       !do Update-Dependent-Benef
    END-IF

    IF $FOUND_NID = 'N'
       do Insert-Dependent-NID
    END-IF
  ELSE
    if $FOUND_DEP_REC = 'Y'
       show 'else $FOUND_DEP_REC :' $FOUND_DEP_REC
       SHOW '&DBT.GEX_DEP_CERT   :' &DBT.GEX_DEP_CERT
      
        IF $Found_Dep_Cert ='N' 
           add 1 to #Errors           ! Increment the counter for Warnings
           let $Error_Type    = 'ERR'
           let $Error_Message = 'Dependent Certification Changed ' ||$DEP-ID||','||&DBT.GEX_DEP_CERT
           let $DEP_ERROR        = 'Y'
           show '$Error_Message :' $Error_Message
           do Print-Error-Line
           do write-Error-Files
           goto dep_skip
        end-if  
     
    
        if $Found_Rel='N'
           add 1 to #Errors           ! Increment the counter for Warnings
           let $Error_Type    = 'ERR'
           let $Error_Message = 'Dependent Relationship Mismatch = ' || &DBT.DEPENDENT_BENEF ||','|| &DBT.RELATIONSHIP
           let $DEP_ERROR        = 'Y'
           do Print-Error-Line
           do write-Error-Files
           goto dep_skip
        end-if
        
        if $Found_Dep_Benef_Typ='N'
           add 1 to #Errors           ! Increment the counter for Warnings
           let $Error_Type    = 'ERR'
           let $Error_Message = 'Dependent Benefit Type Mismatch = ' || &DBT.DEPENDENT_BENEF ||','|| &DBT.DEP_BENEF_TYPE
           let $DEP_ERROR        = 'Y'
           do Print-Error-Line
           do write-Error-Files
           goto dep_skip
        end-if
        if &DB.BIRTHDATE<>&DBT.BIRTHDATE
          do Update-Dep-Ben
        end-if
        if &DB.NAME<>&DBT.NAME
          do Check-Dep-Ben-Name
          if $Name_found='N' 
            Show 'TESTRUN Test NAME'
             do Insert-Dep-Ben-Name
          end-if   
        END-IF  
        ! Commented this as MAR_STATUS & STUDENT_STATUS_DT is sent as balnk in the UNIVERS File if (&DB.MAR_STATUS<>&DBT.MAR_STATUS) OR (&DB.SEX<>&DBT.SEX) OR (&DB.STUDENT<>&DBT.STUDENT) OR (&DB.DISABLED<>&DBT.DISABLED) OR (&DB.STUDENT_STATUS_DT<>&DBT.STUDENT_STATUS_DT)
         if (&DB.SEX<>&DBT.SEX) OR (&DB.STUDENT<>&DBT.STUDENT) OR (&DB.DISABLED<>&DBT.DISABLED)
          Show 'TESTRUN Test A'
          do Check-Dep-Ben-Effdt
          if $Effdt_Found='N'
          Show 'TESTRUN Test 2'
          do Insert-Dep-Ben-Eff
          end-if
        end-if
    end-if
  END-IF

 !-------------------------------------------------------------------------------
 !***Evaluate Plan Type and peform necessary validations / inserts / updates
 !-------------------------------------------------------------------------------
  !-------------------------------------------------------------------------------
  !***Evaluate plan type 10, 1S, 1ZD ***
  !-------------------------------------------------------------------------------
  IF &DBT.CBP_MEDCOVERAGE = 'Y' AND $PLAN_TYPE = '10'
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     else
        let $PREVIOUSLY_SEEN  = nvl(rtrim(&DBT.CBP_MED_PREV_SEEN, ' '), ' ')
        let $HLTH_PROVIDER_ID = nvl(rtrim(&DBT.CBP_MED_HLTH_PROV, ' '), ' ')
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd
        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
              Do Update-Bas-Partic-Dpnd
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
   Else
     IF &DBT.CBP_MEDCOVERAGE = 'N' AND $PLAN_TYPE = '10'
        do Find-Matching-Bas-Dependent
        if $Found-Bas-Dep = 'Y'
           Do Delete-Bas-Dependent
        End-if
     End-if

     IF &DBT.CBP_NQ_MED_COV = 'Y' AND $PLAN_TYPE = '1S'
        do Find-Matching-Bas-Dependent
        do Find-Matching-Dependent-Benef
        if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
           let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
               &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
               #debugd display $Dply-Statement
               let $ElectionsProcdep  = 'N'
        else
           let $PREVIOUSLY_SEEN  = nvl(rtrim(&DBT.CBP_MED_PREV_SEEN, ' '), ' ')
           let $HLTH_PROVIDER_ID = nvl(rtrim(&DBT.CBP_MED_HLTH_PROV, ' '), ' ')
           If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
              do Insert-Bas-Partic-Dpnd
           Else
              If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
                 Do Update-Bas-Partic-Dpnd
              Else
                 let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                     &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
                 #debugd display $Dply-Statement
                 let $ElectionsProcdep  = 'N'
              End-if
           End-if
        End-if
     End-if

     IF &DBT.CBP_NQ_MED_COV = 'Y' AND $PLAN_TYPE = '1Z'
        do Find-Matching-Bas-Dependent
        do Find-Matching-Dependent-Benef
        if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
           let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
               &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
               #debugd display $Dply-Statement
               let $ElectionsProcdep  = 'N'
        else
           let $PREVIOUSLY_SEEN  = nvl(rtrim(&DBT.CBP_MED_PREV_SEEN, ' '), ' ')
           let $HLTH_PROVIDER_ID = nvl(rtrim(&DBT.CBP_MED_HLTH_PROV, ' '), ' ')
           If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
              do Insert-Bas-Partic-Dpnd
           Else
              If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
                 Do Update-Bas-Partic-Dpnd
              Else
                 let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                     &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
                 #debugd display $Dply-Statement
                 let $ElectionsProcdep  = 'N'
              End-if
           End-if
        End-if
     Else
        IF &DBT.CBP_NQ_MED_COV = 'N' AND $PLAN_TYPE = '1Z'
           do Find-Matching-Bas-Dependent
           if $Found-Bas-Dep = 'Y'
              Do Delete-Bas-Dependent
           End-if
        End-if
     End-if
  End-if

  !-------------------------------------------------------------------------------
  !***Evaluate plan type 11, 1T, 1Y - Dental Coverage ***
  !-------------------------------------------------------------------------------
  IF &DBT.CBP_DENCOVERAGE = 'Y' AND $PLAN_TYPE = '11'
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     Else
        let $PREVIOUSLY_SEEN  = nvl(rtrim(&DBT.CBP_DEN_PREV_SEEN, ' '), ' ')
        let $HLTH_PROVIDER_ID = nvl(rtrim(&DBT.CBP_DEN_HLTH_PROV, ' '), ' ')
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd
        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
              Do Update-Bas-Partic-Dpnd
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
  Else
      IF &DBT.CBP_DENCOVERAGE = 'N' AND $PLAN_TYPE = '11'
        do Find-Matching-Bas-Dependent
        if $Found-Bas-Dep = 'Y'
           Do Delete-Bas-Dependent
        End-if
     End-if

     IF &DBT.CBP_NQ_DENTAL = 'Y' AND $PLAN_TYPE = '1T'
        do Find-Matching-Bas-Dependent
        do Find-Matching-Dependent-Benef
        if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
           let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
               &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
               #debugd display $Dply-Statement
               let $ElectionsProcdep  = 'N'
        else
           let $PREVIOUSLY_SEEN  = nvl(rtrim(&DBT.CBP_MED_PREV_SEEN, ' '), ' ')
           let $HLTH_PROVIDER_ID = nvl(rtrim(&DBT.CBP_MED_HLTH_PROV, ' '), ' ')
           If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
              do Insert-Bas-Partic-Dpnd
           Else
              If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
                 Do Update-Bas-Partic-Dpnd
              Else
                 let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                     &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
                 #debugd display $Dply-Statement
                 let $ElectionsProcdep  = 'N'
              End-if
           End-if
        End-if
     End-if

     IF &DBT.CBP_NQ_DENTAL = 'Y' AND $PLAN_TYPE = '1Y'
        do Find-Matching-Bas-Dependent
        do Find-Matching-Dependent-Benef
        if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
           let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
               &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
               #debugd display $Dply-Statement
               let $ElectionsProcdep  = 'N'
        else
           let $PREVIOUSLY_SEEN  = nvl(rtrim(&DBT.CBP_MED_PREV_SEEN, ' '), ' ')
           let $HLTH_PROVIDER_ID = nvl(rtrim(&DBT.CBP_MED_HLTH_PROV, ' '), ' ')
           If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
              do Insert-Bas-Partic-Dpnd
           Else
              If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
!                 Do Insert-Dependent-Update
                 Do Update-Bas-Partic-Dpnd
              Else
                 let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                     &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
                 #debugd display $Dply-Statement
                 let $ElectionsProcdep  = 'N'
              End-if
           End-if
        End-if
     End-if
  END-IF

  !-------------------------------------------------------------------------------
  !***Evaluate plan type 12 ***
  !-------------------------------------------------------------------------------
  IF &DBT.CBP_MEDCOVERAGE = 'Y' AND $PLAN_TYPE = '12'
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     else
        let $PREVIOUSLY_SEEN  = nvl(rtrim(&DBT.CBP_MED_PREV_SEEN, ' '), ' ')
        let $HLTH_PROVIDER_ID = nvl(rtrim(&DBT.CBP_MED_HLTH_PROV, ' '), ' ')
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd
        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
              Do Update-Bas-Partic-Dpnd
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
  End-if

  !-------------------------------------------------------------------------------
  !***Evaluate plan type 14, 17, 1U - Vision Coverage ***
  !-------------------------------------------------------------------------------
  IF &DBT.CBP_VISN_COV = 'Y' AND $PLAN_TYPE = '14'
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     Else
        let $PREVIOUSLY_SEEN  = 'N'
        let $HLTH_PROVIDER_ID = ' '
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd
        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
              Do Update-Bas-Partic-Dpnd
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
  Else
      IF &DBT.CBP_VISN_COV = 'N' AND $PLAN_TYPE = '14'
        do Find-Matching-Bas-Dependent
        if $Found-Bas-Dep = 'Y'
           Do Delete-Bas-Dependent
        End-if
     End-if

     IF &DBT.CBP_NQ_VISION = 'Y' AND $PLAN_TYPE = '17'
        do Find-Matching-Bas-Dependent
        do Find-Matching-Dependent-Benef
        if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
           let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
               &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
               #debugd display $Dply-Statement
               let $ElectionsProcdep  = 'N'
        Else
           let $PREVIOUSLY_SEEN  = 'N'
           let $HLTH_PROVIDER_ID = ' '
           If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
              do Insert-Bas-Partic-Dpnd
           Else
              If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
                 Do Update-Bas-Partic-Dpnd
              Else
                 let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                     &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
                 #debugd display $Dply-Statement
                 let $ElectionsProcdep  = 'N'
              End-if
           End-if
        End-if
     END-IF

     IF &DBT.CBP_NQ_VISION = 'Y' AND $PLAN_TYPE = '1U'
        do Find-Matching-Bas-Dependent
        do Find-Matching-Dependent-Benef
        if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
           let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
               &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
               #debugd display $Dply-Statement
               let $ElectionsProcdep  = 'N'
        else
           let $PREVIOUSLY_SEEN  = nvl(rtrim(&DBT.CBP_MED_PREV_SEEN, ' '), ' ')
           let $HLTH_PROVIDER_ID = nvl(rtrim(&DBT.CBP_MED_HLTH_PROV, ' '), ' ')
           If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
              do Insert-Bas-Partic-Dpnd
           Else
              If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
                 Do Update-Bas-Partic-Dpnd
              Else
                 let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                     &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
                 #debugd display $Dply-Statement
                 let $ElectionsProcdep  = 'N'
              End-if
           End-if
        End-if
     End-if
  END-IF

  !-------------------------------------------------------------------------------
  !***Evaluate plan type 15 ***
  !-------------------------------------------------------------------------------
  IF &DBT.CBP_NQ_MED_COV = 'Y' AND $PLAN_TYPE = '15'
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     Else
        let $PREVIOUSLY_SEEN  = 'N'
        let $HLTH_PROVIDER_ID = ' '
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd
        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
              Do Update-Bas-Partic-Dpnd
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
  END-IF

  !-------------------------------------------------------------------------------
  !***Evaluate plan type 16 ***
  !-------------------------------------------------------------------------------
  IF &DBT.CBP_NQ_DENTAL = 'Y' AND $PLAN_TYPE = '16'
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     Else
        let $PREVIOUSLY_SEEN  = 'N'
        let $HLTH_PROVIDER_ID = ' '
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd
        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
              Do Update-Bas-Partic-Dpnd
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
  END-IF

  !-------------------------------------------------------------------------------
  !***Evaluate plan type 18 ***
  !-------------------------------------------------------------------------------
  IF &DBT.CBP_MEDCOVERAGE = 'Y' AND $PLAN_TYPE = '18'
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     else
        let $PREVIOUSLY_SEEN  = nvl(rtrim(&DBT.CBP_MED_PREV_SEEN, ' '), ' ')
        let $HLTH_PROVIDER_ID = nvl(rtrim(&DBT.CBP_MED_HLTH_PROV, ' '), ' ')
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd

        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
              Do Update-Bas-Partic-Dpnd
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
  End-if

  
!Chris Ladd, CCI, 11/12/2009 - begin
  !-------------------------------------------------------------------------------
  !***Evaluate plan type 1P ***
  !-------------------------------------------------------------------------------
  IF &DBT.CBP_MEDCOVERAGE = 'Y' AND $PLAN_TYPE = '1P'
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     else
        let $PREVIOUSLY_SEEN  = nvl(rtrim(&DBT.CBP_MED_PREV_SEEN, ' '), ' ')
        let $HLTH_PROVIDER_ID = nvl(rtrim(&DBT.CBP_MED_HLTH_PROV, ' '), ' ')
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd
        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
              Do Update-Bas-Partic-Dpnd
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
  End-if
!Chris Ladd, CCI, 11/12/2009 - end


!sandy Setree, CCI, 11/04/2010 - begin
  !-------------------------------------------------------------------------------
  !***Evaluate plan type 1Z and 18 ***  RX Plans
  !-------------------------------------------------------------------------------
  IF &DBT.CBP_RX_COVERAGE = 'Y' AND $PLAN_TYPE = '1Z'
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     else
        let $PREVIOUSLY_SEEN  = nvl(rtrim(&DBT.CBP_MED_PREV_SEEN, ' '), ' ')
        let $HLTH_PROVIDER_ID = nvl(rtrim(&DBT.CBP_MED_HLTH_PROV, ' '), ' ')
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd
        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
              Do Update-Bas-Partic-Dpnd
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
  Else
     IF &DBT.CBP_RX_COVERAGE = 'N' AND $PLAN_TYPE = '1Z'
        do Find-Matching-Bas-Dependent
        if $Found-Bas-Dep = 'Y'
           Do Delete-Bas-Dependent
        End-if
     End-if
  End-if

  IF &DBT.CBP_RX_COVERAGE = 'Y' AND $PLAN_TYPE = '18'
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     else
        let $PREVIOUSLY_SEEN  = nvl(rtrim(&DBT.CBP_MED_PREV_SEEN, ' '), ' ')
        let $HLTH_PROVIDER_ID = nvl(rtrim(&DBT.CBP_MED_HLTH_PROV, ' '), ' ')
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd
        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
              Do Update-Bas-Partic-Dpnd
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
  End-if

!Sandy Setree, CCI, 11/04/2010 - end


  !-------------------------------------------------------------------------------
  !***Evaluate Life Beneficiaries for plan type 2x but not 20 ***
  !-------------------------------------------------------------------------------
  IF &DBT.CBP_SLIF_BENEF = 'Y' AND SUBSTR($PLAN_TYPE,1,1) = '2' and $PLAN_TYPE <> '20'
    and $PLAN_TYPE <> '2E' and $PLAN_TYPE <> '2W'                                           !Chris Ladd, CCI, 11/12/2009
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     Else
        let $PREVIOUSLY_SEEN  = 'N'
        let $HLTH_PROVIDER_ID = ' '
        let #BENEF_PCT        = &DBT.BENEF_PCT_SLIF
        let $CONTINGENT       = &DBT.CONTINGENT_SLIF
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd
      
        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
              do Update-Bas-Partic-Dpnd-2x
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
  END-IF

  !-------------------------------------------------------------------------------
  !***Evaluate Life Beneficiaries of plan type 20 only ***
  !-------------------------------------------------------------------------------
  IF &DBT.CBP_LIFE_BENEF = 'Y' AND $PLAN_TYPE = '20'
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     Else
        let $PREVIOUSLY_SEEN  = 'N'
        let $HLTH_PROVIDER_ID = ' '
        let #BENEF_PCT        = &DBT.BENEF_PCT_BLIF
        let $CONTINGENT       = &DBT.CONTINGENT_BLIF
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd

        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
               do Update-Bas-Partic-Dpnd-2x
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
  END-IF

  !-------------------------------------------------------------------------------
  !***Evaluate Savings Beneficiaries ***
  !-------------------------------------------------------------------------------
  IF &DBT.CBP_SAVINGS_BENEF = 'Y' AND SUBSTR($PLAN_TYPE,1,1) = '4'
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     Else
        let $PREVIOUSLY_SEEN  = 'N'
        let $HLTH_PROVIDER_ID = ' '
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd

        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
  END-IF

  !-------------------------------------------------------------------------------
  !***Evaluate Pension Beneficiaries ***
  !-------------------------------------------------------------------------------
  IF &DBT.CBP_PENSION_BENEF = 'Y' AND SUBSTR($PLAN_TYPE,1,1) = '8'
     do Find-Matching-Bas-Dependent
     do Find-Matching-Dependent-Benef
     if $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben <> 'Y'
        let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
            &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
            #debugd display $Dply-Statement
            let $ElectionsProcdep  = 'N'
     Else
        let $PREVIOUSLY_SEEN  = 'N'
        let $HLTH_PROVIDER_ID = ' '
        If $Found-Bas-Dep <> 'Y' and $Found-Dep-Ben = 'Y'
           do Insert-Bas-Partic-Dpnd
        Else
           If $Found-Bas-Dep = 'Y' and $Found-Dep-Ben = 'Y'
           Else
              let $Dply-Statement = &DBT.NATIONAL_ID || ', UN-Processed DEPENDENT, ' ||
                  &DBT.DEPENDENT_BENEF || ' , '  || $PLAN_TYPE
              #debugd display $Dply-Statement
              let $ElectionsProcdep  = 'N'
           End-if
        End-if
     End-if
  END-IF
  SHOW '$ElectionsProcdep :' $ElectionsProcdep
  if $ElectionsProcdep  = 'Y'
     let $Message = 'Processed DEPENDENT = ' || &DBT.DEPENDENT_BENEF
     do Print-Detail-Line
   else
     add 1 to #Warnings_dep           ! Increment the counter for Warnings
     let $Error_Type    = 'WARN'
     let $Error_Message = 'UN-Processed DEPENDENT = ' || &DBT.DEPENDENT_BENEF
     do Print-Error-Line
     do write-Error-Files
  end-if
  
  dep_skip:
  
FROM PS_CBP_DEPENDENTS DBT
WHERE DBT.NATIONAL_ID = $EMPLID
END-SELECT

end-procedure Process-Dependent-Coverage

!-----------------------------------------------------------------------
! Function:    Find-Matching-Bas-Dependent                             -
! Description: Set Flag for matching row in BAS_PARTIC_DPND            -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Find-Matching-Bas-Dependent

#ifdef debugt                 ! Debug-FLOW
  show 'FLOW : Find-Matching-Bas-Dependent'
#end-if

  move 'N' to $Found-Bas-Dep

BEGIN-SELECT
PBPD.SCHED_ID
PBPD.EMPLID
PBPD.EVENT_ID
PBPD.PLAN_TYPE
PBPD.DEPENDENT_BENEF

  MOVE 'Y'  TO $FOUND-BAS-DEP

FROM PS_BAS_PARTIC_DPND PBPD

WHERE PBPD.SCHED_ID        = $SCHEDID
  AND PBPD.EMPLID          = $EMPLID
  AND PBPD.BENEFIT_RCD_NBR = &BAP.BENEFIT_RCD_NBR
  AND PBPD.EVENT_ID        = &BAP.EVENT_ID
  AND PBPD.PLAN_TYPE       = $PLAN_TYPE
  AND PBPD.DEPENDENT_BENEF = $DEP-ID
END-SELECT

end-procedure Find-Matching-Bas-Dependent

!-----------------------------------------------------------------------
! Function:    Find-Matching-Dependent-Benef                           -
! Description: Set Flag for matching row in DEPENDENT_BENEF            -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Find-Matching-Dependent-Benef

#ifdef debugt                 ! Debug-FLOW
  show 'FLOW : Find-Matching-Dependent-Benef'
#end-if

  move 'N' to $Found-Dep-Ben

BEGIN-SELECT
PDB1.EMPLID
PDB1.DEPENDENT_BENEF

  MOVE 'Y' TO $FOUND-DEP-BEN

FROM PS_DEPENDENT_BENEF PDB1  !TEST RUN FROM PS_DEP_BEN_EFF PDB1
WHERE PDB1.EMPLID          = $EMPLID
  AND PDB1.DEPENDENT_BENEF = $DEP-ID
END-SELECT
end-procedure Find-Matching-Dependent-Benef

!-----------------------------------------------------------------------
! Function:    Assign-Dep-ID                                           -
! Description: Set Flag for matching row in DEPENDENT_BENEF            -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Assign-Dep-ID

#ifdef debugt                 ! Debug-FLOW
  show 'FLOW : Assign-Dep-ID'
#end-if

  move '01'  to $Dep-ID

BEGIN-SELECT
FID.EMPLID
FID.DEPENDENT_BENEF
FID.NAME

  LET #DEPID  = &FID.DEPENDENT_BENEF
  LET #DEPID  = #DEPID + 1
  LET $DEP-ID = TO_CHAR(#DEPID)
  #DEBUGD SHOW '    HIGHEST/NEXT DEPENDENT BENEF ID:' &FID.DEPENDENT_BENEF '/' $DEP-ID

FROM PS_DEPENDENT_BENEF FID
WHERE FID.EMPLID = $EMPLID
  AND FID.NAME   = $DBTNAME
ORDER BY FID.EMPLID, FID.DEPENDENT_BENEF
END-SELECT

end-procedure Assign-Dep-ID

!-----------------------------------------------------------------------
! Function:    select-bas-partic-plan                                  -
! Description: Select BAS_PARTIC_PLAN for plan type                    -
! Called By:   Update-Bas-Partic-Plan                                  -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure select-bas-partic-plan

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : select-bas-partic-plan'
  #end-if

  let $Sql-Statement = $SQRName || ', select-bas-partic-plan, UPDATE, ' ||  'PS_BAS_PARTIC_PLAN'

BEGIN-SELECT ON-ERROR=SQL-ERROR-ROUTINE
BPPC.EMPLID

    LET $ELECTIONSPROC = 'Y'

FROM PS_BAS_PARTIC_PLAN BPPC

WHERE BPPC.SCHED_ID        = $SCHEDID
  AND BPPC.EMPLID          = $EMPLID
  AND BPPC.BENEFIT_RCD_NBR = &BAP.BENEFIT_RCD_NBR
  AND BPPC.EVENT_ID        = &BAP.EVENT_ID
  AND BPPC.PLAN_TYPE       = $PLAN_TYPE
END-SELECT

end-procedure select-bas-partic-plan

!-----------------------------------------------------------------------
! Function:    select-bas-partic-cd-20                                 -
! Description: Select BAS_PARTIC_PLAN for plan type                    -
! Called By:   select-bas-partic-plan-20                               -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure select-bas-partic-cd-20

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : select-bas-partic-cd-20'
  #end-if

  let $Sql-Statement = $SQRName || ', select-bas-partic-cd-20, UPDATE, ' ||  'PS_BAS_PARTIC_PLAN'

BEGIN-SELECT ON-ERROR=SQL-ERROR-ROUTINE
BDO.OPTION_CD

        LET $OPTION_CD_20  = &BDO.OPTION_CD

FROM PS_BEN_DEFN_OPTN BDO
WHERE BDO.BENEFIT_PROGRAM = $BEN_PROG_20
  AND BDO.EFFDT           = (SELECT MAX(BDO1.EFFDT)
                             FROM PS_BEN_DEFN_OPTN BDO1
                             WHERE BDO1.BENEFIT_PROGRAM = BDO.BENEFIT_PROGRAM)
  AND BDO.PLAN_TYPE       = $PLAN_TYPE
END-SELECT

end-procedure select-bas-partic-cd-20

!-----------------------------------------------------------------------
! Function:    select-bas-partic-plan-20                               -
! Description: Select BAS_PARTIC_PLAN for plan type                    -
! Called By:   Process-Employee-Elections                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure select-bas-partic-plan-20

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : select-bas-partic-plan-20'
  #end-if

  let $Sql-Statement = $SQRName || ', select-bas-partic-plan-20, UPDATE, ' ||  'PS_BAS_PARTIC_PLAN'
  let $option_cd_20  = ' '
  let $ElectionsProc = 'N'

BEGIN-SELECT ON-ERROR=SQL-ERROR-ROUTINE
BPPZ.BENEFIT_PROGRAM

    LET $ELECTIONSPROC = 'Y'
    LET $BEN_PROG_20   = &BPPZ.BENEFIT_PROGRAM
    DO SELECT-BAS-PARTIC-CD-20


FROM PS_BAS_PARTIC_PLAN BPPZ

WHERE BPPZ.SCHED_ID        = $SCHEDID
  AND BPPZ.EMPLID          = $EMPLID
  AND BPPZ.BENEFIT_RCD_NBR = &BAP.BENEFIT_RCD_NBR
  AND BPPZ.EVENT_ID        = &BAP.EVENT_ID
  AND BPPZ.PLAN_TYPE       = $PLAN_TYPE

END-SELECT

end-procedure select-bas-partic-plan-20

!-----------------------------------------------------------------------
! Function:    Get-HSA-Max-Contrib                                     -
! Description: Get Max Contribution for plan type 67                   -
! Called By:   Process-Employee-Elections                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Get-HSA-Max-Contrib
begin-select
H.MAX_ANNUAL_CONTRIB

 Move &H.MAX_ANNUAL_CONTRIB to #Max_HSA_Pledge

FROM PS_HSA_CONTRIB_LMT H
WHERE H.PLAN_TYPE     = '67'
  AND H.CNTRL_PLAN_TYPE = '10'
  AND H.BENEFIT_PLAN    = $Ben_plan
  AND H.COVRG_CD        = $Cov_cd
  AND H.EFFDT=(SELECT MAX(H1.EFFDT) FROM PS_FSA_BENEF_TBL H1
                WHERE H1.PLAN_TYPE=H.PLAN_TYPE
                  AND H1.BENEFIT_PLAN=H.BENEFIT_PLAN
                  AND H1.EFFDT<=$Asoftoday)
end-select
end-procedure Get-HSA-Max-Contrib

!*******************************************************************************
! ** Section Begin:  Table Update Routines
!*******************************************************************************
!-----------------------------------------------------------------------
! Function:    Update-Bas-Partic-Plan                                  -
! Description: Update BAS_PARTIC_PLAN for plan type 1V/1X              -
! Called By:   Process-Employee-Elections                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Update-Bas-Partic-Plan

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Update-Bas-Partic-Plan'
  #end-if

  do select-bas-partic-plan

  let $Sql-Statement = $SQRName || ', Update-Bas-Partic-Plan, UPDATE, ' ||  'PS_BAS_PARTIC_PLAN'

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
UPDATE PS_BAS_PARTIC_PLAN
SET OPTION_CD         = &TRB.OPTION_CD,
    PREVIOUSLY_SEEN   = &TRB.PREVIOUSLY_SEEN,
    HLTH_PROVIDER_ID  = &TRB.HLTH_PROVIDER_ID,
    ELECTION_MADE     = 'Y'
WHERE SCHED_ID        = $SCHEDID
  AND EMPLID          = $EMPLID
  AND BENEFIT_RCD_NBR = &BAP.BENEFIT_RCD_NBR
  AND EVENT_ID        = &BAP.EVENT_ID
  AND PLAN_TYPE       = $PLAN_TYPE
END-SQL

end-procedure Update-Bas-Partic-Plan


!-----------------------------------------------------------------------
! Function:    Update-Bas-Partic-Plan                                  -
! Description: Update BAS_PARTIC_PLAN for plan type 20                 -
! Called By:   Process-Employee-Elections                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Update-Bas-Partic-Plan-20

  #ifdef debugt                 !! Debug-FLOW
    show 'FLOW : Update-Bas-Partic-Plan'
  #end-if

  do select-bas-partic-plan

  let $Sql-Statement = $SQRName || ', Update-Bas-Partic-Plan-20, UPDATE, ' ||  'PS_BAS_PARTIC_PLAN'

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
UPDATE PS_BAS_PARTIC_PLAN
SET OPTION_CD         = $OPTION_CD_20,
    ELECTION_MADE     = 'Y'
WHERE SCHED_ID        = $SCHEDID
  AND EMPLID          = $EMPLID
  AND BENEFIT_RCD_NBR = &BAP.BENEFIT_RCD_NBR
  AND EVENT_ID        = &BAP.EVENT_ID
  AND PLAN_TYPE       = $PLAN_TYPE
END-SQL

end-procedure Update-Bas-Partic-Plan-20


!Chris Ladd, CCI, 11/12/2009 - start
!-----------------------------------------------------------------------
! Function:    Update-Bas-Partic-Plan-30-31                            -
! Description: Update BAS_PARTIC_PLAN for plan types 30, 31            -
! Called By:   Process-Employee-Elections                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Update-Bas-Partic-Plan-30-31

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Update-Bas-Partic-Plan-30-31'
  #end-if

  do select-bas-partic-plan

  let $Sql-Statement = $SQRName || ', Update-Bas-Partic-Plan-30-31, UPDATE, ' ||  'PS_BAS_PARTIC_PLAN'

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
UPDATE PS_BAS_PARTIC_PLAN
SET OPTION_CD         = &TRB.OPTION_CD,
    ELECTION_MADE     = 'Y'
WHERE SCHED_ID        = $SCHEDID
  AND EMPLID          = $EMPLID
  AND BENEFIT_RCD_NBR = &BAP.BENEFIT_RCD_NBR
  AND EVENT_ID        = &BAP.EVENT_ID
  AND PLAN_TYPE       = $PLAN_TYPE
END-SQL

end-procedure Update-Bas-Partic-Plan-30-31

!Chris Ladd, CCI, 11/12/2009 - end


!-----------------------------------------------------------------------
! Function:    Update-Bas-Partic-Plan-Amount                           -
! Description: Update BAS_PARTIC_PLAN for plan type 60/61/67           -
! Called By:   Process-Employee-Elections                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Update-Bas-Partic-Plan-Amount

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Update-Bas-Partic-Plan'
  #end-if

  let $Sql-Statement = $SQRName || ', Update-Bas-Partic-Plan, UPDATE, ' || 'PS_BAS_PARTIC_PLAN'

!******************** Client should update max annual pledge *******************
  
     if $PLAN_TYPE='67'
        let #Max_Annual_Pledge = #Max_HSA_Pledge
     else
        let #Max_Annual_Pledge = 5000
     end-if   
     
     if &TRB.ANNUAL_PLEDGE > #Max_Annual_Pledge
         let #ANNUAL_PLEDGE = #Max_Annual_Pledge
     else
         let #ANNUAL_PLEDGE = &TRB.ANNUAL_PLEDGE
     end-if
  

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
UPDATE PS_BAS_PARTIC_PLAN
SET OPTION_CD          = &TRB.OPTION_CD,
    ANNUAL_PLEDGE      = #ANNUAL_PLEDGE,
    FLAT_AMOUNT        = &TRB.FLAT_AMOUNT,
    ELECTION_MADE     = 'Y'                  
WHERE SCHED_ID         = $SCHEDID
  AND EMPLID           = $EMPLID
  AND BENEFIT_RCD_NBR  = &BAP.BENEFIT_RCD_NBR
  AND EVENT_ID         = &BAP.EVENT_ID
  AND PLAN_TYPE        = $PLAN_TYPE
END-SQL

end-procedure Update-Bas-Partic-Plan-Amount

!-----------------------------------------------------------------------
! Function:    Update-Partic-Status                                    -
! Description: Update Status of event for the emplid                   -
! Called By:   Main-Process                                            -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Update-Partic-Status

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Update-Partic-Status'
  #end-if

  let $Sql-Statement = $SQRName || ', Update-Partic-Status, UPDATE, ' ||  'PS_BAS_PARTIC'

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
UPDATE PS_BAS_PARTIC
SET BAS_PROCESS_STATUS = 'ET',
    ELECT_SOURCE      = 'W',
    ELECT_RCVD_DT     = $ASOFTODAY
WHERE SCHED_ID         = $SCHEDID
  AND EMPLID           = $EMPLID
  AND BENEFIT_RCD_NBR  = &BAP.BENEFIT_RCD_NBR
  AND EVENT_ID         = &BAP.EVENT_ID
END-SQL
end-procedure Update-Partic-Status

!-----------------------------------------------------------------------
! Function:    Update-Bas-Partic-Dpnd                                  -
! Description: update BAS_PARTIC_DPND                                  -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Update-Bas-Partic-Dpnd

#ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Update-Bas-Partic-Dpnd'
  #end-if

  let $Sql-Statement = $SQRName || ', Update-Bas-Partic-Dpnd, UPDATE, ' || 'PS_BAS_PARTIC_DPND'

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
UPDATE PS_BAS_PARTIC_DPND
SET PREVIOUSLY_SEEN   = $PREVIOUSLY_SEEN,
    HLTH_PROVIDER_ID  = $HLTH_PROVIDER_ID
WHERE SCHED_ID        = $SCHEDID
  AND EMPLID          = $EMPLID
  AND BENEFIT_RCD_NBR = &BAP.BENEFIT_RCD_NBR
  AND EVENT_ID        = &BAP.EVENT_ID
  AND PLAN_TYPE       = $PLAN_TYPE
  AND DEPENDENT_BENEF = $DEP-ID
END-SQL

End-procedure Update-Bas-Partic-Dpnd

!-----------------------------------------------------------------------
! Function:    Update-Bas-Partic-Dpnd-2x                               -
! Description: update BAS_PARTIC_DPND                                  -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Update-Bas-Partic-Dpnd-2x

#ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Update-Bas-Partic-Dpnd-2x'
#end-if

  let $Sql-Statement = $SQRName || ', Update-Bas-Partic-Dpnd-2x, UPDATE, ' || 'PS_BAS_PARTIC_DPND'

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
UPDATE PS_BAS_PARTIC_DPND
SET PREVIOUSLY_SEEN   = $PREVIOUSLY_SEEN,
    HLTH_PROVIDER_ID  = $HLTH_PROVIDER_ID,
    BENEF_PCT         = #BENEF_PCT,
    CONTINGENT        = $CONTINGENT
WHERE SCHED_ID        = $SCHEDID
  AND EMPLID          = $EMPLID
  AND BENEFIT_RCD_NBR = &BAP.BENEFIT_RCD_NBR
  AND EVENT_ID        = &BAP.EVENT_ID
  AND PLAN_TYPE       = $PLAN_TYPE
  AND DEPENDENT_BENEF = $DEP-ID
END-SQL

End-procedure Update-Bas-Partic-Dpnd-2x

!-----------------------------------------------------------------------
! Function:    Insert-Bas-Partic-Dpnd                                  -
! Description: insert into BAS_PARTIC_DPND                             -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Insert-Bas-Partic-Dpnd

 show 'TESTRUN INSERT'
  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Insert-Bas-Partic-Dpnd'
  #end-if

  let $Sql-Statement = 'Insert-Bas-Partic-Dpnd, INSERT,' ||  'PS_BAS_PARTIC_DPND'
  
BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
INSERT INTO PS_BAS_PARTIC_DPND
(SCHED_ID
,EMPLID
,BENEFIT_RCD_NBR
,EVENT_ID
,PLAN_TYPE
,DEPENDENT_BENEF
,BENEFIT_PROGRAM
,EVENT_DT
,DISPLAY_PLN_SEQ
,ENROLL_ACTION
,BAS_ERROR
,BENEF_PCT
,FLAT_AMOUNT
,EXCESS
,CONTINGENT
,HLTH_PROVIDER_ID
,PREVIOUSLY_SEEN
,OTH_INSURANCE_IND
,OTH_INSURANCE_NAME)
VALUES
(&BAP.SCHED_ID
,$EMPLID
,&BAP.BENEFIT_RCD_NBR
,&BAP.EVENT_ID
,$PLAN_TYPE
,$DEP-ID
,&BAP.BENEFIT_PROGRAM
,&EVR.EVENT_DT
,&BPP.DISPLAY_PLN_SEQ
,'N'
,'N'
,#BENEF_PCT
,0
,'N'
,$CONTINGENT
,$HLTH_PROVIDER_ID
,$PREVIOUSLY_SEEN
,'N'                                                    ! CHECK DEFAULT VALUE
,' ')
END-SQL

end-procedure Insert-Bas-Partic-Dpnd

!-----------------------------------------------------------------------
! Function:    Delete-Bas-Dependent                                    -
! Description: delete from BAS_PARTIC_DPND                             -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Delete-Bas-Dependent

#ifdef debugt                 ! Debug-FLOW
  show 'FLOW : Delete-Bas-Dependent'
#end-if

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
DELETE FROM PS_BAS_PARTIC_DPND
WHERE SCHED_ID        = $SCHEDID
  AND EMPLID          = $EMPLID
  AND BENEFIT_RCD_NBR = &BAP.BENEFIT_RCD_NBR
  AND EVENT_ID        = &BAP.EVENT_ID
  AND PLAN_TYPE       = $PLAN_TYPE
  AND DEPENDENT_BENEF = $DEP-ID
END-SQL

End-procedure Delete-Bas-Dependent

!-----------------------------------------------------------------------
! Function:    Update-Dependent-Benef                                  -
! Description: update dependent benef table                            -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Update-Dependent-Benef

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Update-Dependent-Benef'
  #end-if

  let $Sql-Statement = $SQRName || ', Update-Dependent-Benef, UPDATE, ' || 'PS_DEPENDENT_BENEF'

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
UPDATE PS_DEPENDENT_BENEF
SET NAME                   = &DBT.NAME
,RELATIONSHIP              = &DBT.RELATIONSHIP
,DEP_BENEF_TYPE            = &DBT.DEP_BENEF_TYPE
,MAR_STATUS                = &DBT.MAR_STATUS
,SEX                       = &DBT.SEX
,BIRTHDATE                 = &DBT.BIRTHDATE
,STUDENT                   = &DBT.STUDENT
,DISABLED                  = &DBT.DISABLED
,STUDENT_STATUS_DT         = &DBT.STUDENT_STATUS_DT
WHERE EMPLID               = &DBT.NATIONAL_ID
  AND DEPENDENT_BENEF      = $DEP-ID

END-SQL
end-procedure Update-Dependent-Benef

!-----------------------------------------------------------------------
! Function:    Update-Dep-Ben                                          -
! Description: update dependent benef table                            -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Update-Dep-Ben

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Update-Dep-Ben'
  #end-if

  let $Sql-Statement = $SQRName || ', Update-Dep-Ben, UPDATE, ' || 'PS_DEP_BEN'

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
UPDATE PS_DEP_BEN
SET BIRTHDATE         = &DBT.BIRTHDATE
WHERE EMPLID          = &DBT.NATIONAL_ID
  AND DEPENDENT_BENEF = $DEP-ID
END-SQL
end-procedure Update-Dep-Ben  

!-----------------------------------------------------------------------
! Function:    Check-Dep-Ben                                           -
! Description: insert row for dependent                                -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
Begin-Procedure Check-Dep-Ben
 Move 'N' to $Dep_Ben_Found
Begin-Select
CDB.EMPLID
  Move 'Y' to $Dep_Ben_Found
FROM PS_DEP_BEN CDB
WHERE CDB.EMPLID=&DBT.NATIONAL_ID
AND CDB.DEPENDENT_BENEF=$DEP-ID
End-Select
End-Procedure Check-Dep-Ben

!-----------------------------------------------------------------------
! Function:    Insert-Dep-Ben                                          -
! Description: insert row for dependent                                -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Insert-Dep-Ben

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Insert-Dep-Ben'
  #end-if
  show 'FLOW : Insert-Dep-Ben'
 show '&DBT.NATIONAL_ID:' &DBT.NATIONAL_ID
 show '$DEP-ID         :' $DEP-ID
  let $Sql-Statement = 'Insert-Dep-Ben, INSERT, ' || 'PS_DEP_BEN'

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
INSERT INTO PS_DEP_BEN
(
EMPLID	
,DEPENDENT_BENEF	
,BIRTHDATE	
,BIRTHPLACE	
,BIRTHSTATE	
,BIRTHCOUNTRY	
,DT_OF_DEATH	
,DEPBEN_RIDER_FLG	
,COUNTRY_CODE	
,PHONE	
,SAME_PHONE_EMPL
,PHONE_TYPE
,CSB_ELIG	
,COBRA_EVENT_DT	
,COBRA_ACTION	
,COBRA_EMPLID	
,MEDICARE_ENTLD_DT	
,FP_DEPEND_EMPLID	
,FP_STAT_FONC	
,FP_EMPLOYER_NAME	
,FP_SAME_PUBL_SCE	
,LAST_UPDATE_DATE	
,DEP_ELIGIBLE_UK	
,DEP_ADOPTED_UK	
,DEP_ADOPTION_DT_UK	
,DEP_CERTIFICATE_UK	
,GVT_FEHB_IND	
,GVT_DEP_BENEF_PLAN
)
VALUES
(
&DBT.NATIONAL_ID  !EMPLID	
,$DEP-ID          !DEPENDENT_BENEF	
,&DBT.BIRTHDATE   !BIRTHDATE	
,' '              !BIRTHPLACE	
,' '              !BIRTHSTATE	
,' '              !BIRTHCOUNTRY	
,''               !DT_OF_DEATH	
,'N'              !DEPBEN_RIDER_FLG	
,' '              !COUNTRY_CODE	
,' '              !PHONE	
,'Y'              !SAME_PHONE_EMPL
,' '              !PHONE_TYPE
,' '              !CSB_ELIG	
,''               !COBRA_EVENT_DT	
,' '              !COBRA_ACTION	
,' '              !COBRA_EMPLID	
,''               !MEDICARE_ENTLD_DT	
,' '              !FP_DEPEND_EMPLID	
,'N'              !FP_STAT_FONC	
,' '              !FP_EMPLOYER_NAME	
,'N'              !FP_SAME_PUBL_SCE	
,$ASOFTODAY       !LAST_UPDATE_DATE	
,'N'              !DEP_ELIGIBLE_UK	
,'N'              !DEP_ADOPTED_UK	
,''               !DEP_ADOPTION_DT_UK	
,'N'              !DEP_CERTIFICATE_UK	
,'N'              !GVT_FEHB_IND	
,' '              !GVT_DEP_BENEF_PLAN
)
END-SQL

end-procedure Insert-Dep-Ben

!-----------------------------------------------------------------------
! Function:    Check-Dep-Ben-Addr                                     -
! Description: insert row for dependent Address                        -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Check-Dep-Ben-Addr
 Move 'N' to $Addr_Found
begin-select
DBA.EMPLID

 Move 'Y' to $Addr_Found
 
from ps_dep_ben_addr DBA
where DBA.emplid=&DBT.NATIONAL_ID
and DBA.DEPENDENT_BENEF=$DEP-ID
and DBA.effdt=$Dep-Ben-Effdt
end-select
end-procedure check-dep-ben-addr

!-----------------------------------------------------------------------
! Function:    Insert-Dep-Ben-Addr                                     -
! Description: insert row for dependent Address                        -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Insert-Dep-Ben-Addr

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Insert-Dep-Ben-Addr'
  #end-if

  let $Sql-Statement = 'Insert-Dep-Ben-Addr, INSERT, ' || 'PS_DEP_BEN_ADDR'
  show '&DBT.NATIONAL_ID :' &DBT.NATIONAL_ID
  show '$DEP-ID          :' $DEP-ID 
  show '$Dep-Ben-Effdt   :' $Dep-Ben-Effdt
BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
INSERT INTO PS_DEP_BEN_ADDR
(
EMPLID
,DEPENDENT_BENEF
,EFFDT
,SAME_ADDRESS_EMPL
,COUNTRY
,ADDRESS1
,ADDRESS2
,ADDRESS3
,ADDRESS4
,CITY
,NUM1
,NUM2
,HOUSE_TYPE
,ADDR_FIELD1
,ADDR_FIELD2
,ADDR_FIELD3
,COUNTY
,STATE
,POSTAL
,GEO_CODE
,IN_CITY_LIMIT
,ADDRESS_TYPE
)
VALUES
(
&DBT.NATIONAL_ID    !EMPLID
,$DEP-ID            !DEPENDENT_BENEF
,$Dep-Ben-Effdt     !EFFDT
,'Y'                !SAME_ADDRESS_EMPL
,'USA'              !COUNTRY
,' '                !ADDRESS1
,' '                !ADDRESS2
,' '                !ADDRESS3
,' '                !ADDRESS4
,' '                !CITY
,' '                !NUM1
,' '                !NUM2
,' '                !HOUSE_TYPE
,' '                !ADDR_FIELD1
,' '                !ADDR_FIELD2
,' '                !ADDR_FIELD3
,' '                !COUNTY
,' '                !STATE
,' '                !POSTAL
,' '                !GEO_CODE
,' '                !IN_CITY_LIMIT
,' '                !ADDRESS_TYPE
)
end-sql
end-procedure Insert-Dep-Ben-Addr

!-----------------------------------------------------------------------
! Function:    Check-Dep-Ben-Name                                     -
! Description: insert row for dependent Address                        -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Check-Dep-Ben-Name
  Move 'N' to $Name_Found
begin-select
DBN.EMPLID

  Move 'Y' to $Name_found
  
from ps_dep_ben_name DBN
where DBN.emplid=&DBT.NATIONAL_ID
and DBN.DEPENDENT_BENEF=$DEP-ID
and DBN.effdt=$Dep-Ben-Effdt
end-select
end-procedure Check-Dep-Ben-Name

!-----------------------------------------------------------------------
! Function:    Insert-Dep-Ben-Name                                     -
! Description: insert row for dependent Name                           -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Insert-Dep-Ben-Name

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Insert-Dep-Ben-Name'
  #end-if

  let $Sql-Statement = 'Insert-Dep-Ben-Addr, INSERT, ' || 'PS_DEP_BEN_NAME'
BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
INSERT INTO PS_DEP_BEN_NAME
(
EMPLID
,DEPENDENT_BENEF
,EFFDT
,COUNTRY_NM_FORMAT
,NAME
,NAME_INITIALS
,NAME_PREFIX
,NAME_SUFFIX
,NAME_ROYAL_PREFIX
,NAME_ROYAL_SUFFIX
,NAME_TITLE
,LAST_NAME_SRCH
,FIRST_NAME_SRCH
,LAST_NAME
,FIRST_NAME
,MIDDLE_NAME
,SECOND_LAST_NAME
,SECOND_LAST_SRCH
,NAME_AC
,PREF_FIRST_NAME
,PARTNER_LAST_NAME
,PARTNER_ROY_PREFIX
,LAST_NAME_PREF_NLD
,NAME_DISPLAY
,NAME_FORMAL
)
VALUES
(
&DBT.NATIONAL_ID     !EMPLID
,$DEP-ID             !DEPENDENT_BENEF
,$Dep-Ben-Effdt      !EFFDT
,'001'               !COUNTRY_NM_FORMAT
,&DBT.NAME           !NAME
,' '                 !NAME_INITIALS
,' '                 !NAME_PREFIX
,' '                 !NAME_SUFFIX
,' '                 !NAME_ROYAL_PREFIX
,' '                 !NAME_ROYAL_SUFFIX
,' '                 !NAME_TITLE
,' '                 !LAST_NAME_SRCH
,' '                 !FIRST_NAME_SRCH
,&DBT.CBP_LAST_NAME  !LAST_NAME
,&DBT.CBP_FIRST_NAME !FIRST_NAME
,' '                 !MIDDLE_NAME
,' '                 !SECOND_LAST_NAME
,' '                 !SECOND_LAST_SRCH
,' '                 !NAME_AC
,' '                 !PREF_FIRST_NAME
,' '                 !PARTNER_LAST_NAME
,' '                 !PARTNER_ROY_PREFIX
,'1'                 !LAST_NAME_PREF_NLD
,' '                 !NAME_DISPLAY
,' '                 !NAME_FORMAL
)
END-SQL
END-PROCEDURE INSERT-DEP-BEN-NAME

!-----------------------------------------------------------------------
! Function:    Check-Dep-Ben-effdt                                     -
! Description: insert row for dependent Effdt                          -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Check-Dep-Ben-effdt
  Move 'N' to $Effdt_Found
begin-select
DBE.EMPLID

  Move 'Y' to $Effdt_found
  
from PS_DEP_BEN_EFF DBE
where DBE.emplid=&DBT.NATIONAL_ID
and DBE.DEPENDENT_BENEF=$DEP-ID
and DBE.effdt=$Dep-Ben-Effdt
end-select
end-procedure Check-Dep-Ben-effdt

!-----------------------------------------------------------------------
! Function:    Insert-Dep-Ben-Eff                                      -
! Description: insert row for dependent Effdt                          -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Insert-Dep-Ben-Eff

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Insert-Dep-Ben-Eff'
  #end-if
  
  Show 'TESTRUN Test 3'

  let $Sql-Statement = 'Insert-Dep-Ben-Eff, INSERT, ' || 'PS_DEP_BEN_EFF'
BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
INSERT INTO PS_DEP_BEN_EFF
(
EMPLID
,DEPENDENT_BENEF
,EFFDT
,RELATIONSHIP
,DEP_BENEF_TYPE
,MAR_STATUS
,MAR_STATUS_DT
,SEX
,OCCUPATION
,STUDENT
,DISABLED
,STUDENT_STATUS_DT
,DISABLED_STATUS_DT
,SMOKER
,SMOKER_DT
,GEX_DEP_CERT
,GEX_DEPCERT_DT
)
VALUES
(
&DBT.NATIONAL_ID        !EMPLID
,$DEP-ID                !DEPENDENT_BENEF
,$Dep-Ben-Effdt         !EFFDT
,&DBT.RELATIONSHIP      !RELATIONSHIP
,&DBT.DEP_BENEF_TYPE    !DEP_BENEF_TYPE
,&DBT.MAR_STATUS        !MAR_STATUS
,''                     !MAR_STATUS_DT
,&DBT.SEX               !SEX
,' '                    !OCCUPATION
,&DBT.STUDENT           !STUDENT
,&DBT.DISABLED          !DISABLED
,&DBT.STUDENT_STATUS_DT !STUDENT_STATUS_DT
,''                     !DISABLED_STATUS_DT
,'N'                    !SMOKER
,''                     !SMOKER_DT
,'N'                    !GEX_DEP_CERT
,$ASOFTODAY             !GEX_DEPCERT_DT
)
END-SQL
end-procedure Insert-Dep-Ben-Eff

!-----------------------------------------------------------------------
! Function:    Insert-Dependent-NID                                    -
! Description: insert row for dependent national id                    -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Insert-Dependent-NID

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Insert-Dependent-NID'
  #end-if

  let $Sql-Statement ='Insert-Dependent-NID, INSERT, ' ||  'ps_dep_benef_nid '

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
INSERT INTO PS_DEP_BENEF_NID
(EMPLID
,DEPENDENT_BENEF
,COUNTRY
,NATIONAL_ID_TYPE
,NATIONAL_ID
,SSN_KEY_FRA
,PRIMARY_NID
,TAX_REF_ID_SGP)
VALUES
(&DBT.NATIONAL_ID
,$DEP-ID
,'USA'
,' '
,&DBT.CBP_DEPNATIONAL_ID
,' '
,' '
,'N')                                                   ! CHECK DEFAULT VALUE
END-SQL

end-procedure Insert-Dependent-NID

!-----------------------------------------------------------------------
! Function:    UPDATE-BAS-PARTIC-PLAN-FLAT-AMT                         -
! Description: update BAS_PARTIC_PLAN                                  -
! Called By:   Process-Employee-Elections                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure UPDATE-BAS-PARTIC-PLAN-FLAT-AMT

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : UPDATE-BAS-PARTIC-PLAN-FLAT-AMT'
  #end-if

  let $Sql-Statement = $SQRName || ', UPDATE-BAS-PARTIC-PLAN-FLAT-AMT, UPDATE, ' || 'PS_BAS_PARTIC_PLAN'

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
UPDATE PS_BAS_PARTIC_PLAN
SET OPTION_CD         = &TRB.OPTION_CD,
    FLAT_DED_AMT      = #CBP_DEDAMT,
    ELECTION_MADE     = 'Y'
WHERE SCHED_ID        = $SCHEDID
  AND EMPLID          = $EMPLID
  AND BENEFIT_RCD_NBR = &BAP.BENEFIT_RCD_NBR
  AND EVENT_ID        = &BAP.EVENT_ID
  AND PLAN_TYPE       = $PLAN_TYPE
END-SQL

end-procedure UPDATE-BAS-PARTIC-PLAN-FLAT-AMT

!-----------------------------------------------------------------------
! Function:    Update-Bas-Partic-Plan-CTO-FTO                          -
! Description: update BAS_PARTIC_PLAN                                  -
! Called By:   Process-Employee-Elections                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Update-Bas-Partic-Plan-CTO-FTO

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Update-Bas-Partic-Plan-CTO-FTO'
  #end-if

  let $Sql-Statement = $SQRName || ', Update-Bas-Partic-Plan-CTO-FTO, UPDATE, ' ||  'PS_BAS_PARTIC_PLAN'

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
UPDATE PS_BAS_PARTIC_PLAN
SET OPTION_CD         = &TRB.OPTION_CD,
    APAY_EFFDT        = &EVR.EVENT_DT,
    PREVIOUSLY_SEEN   = &TRB.PREVIOUSLY_SEEN,
    HLTH_PROVIDER_ID  = &TRB.HLTH_PROVIDER_ID,
    ELECTION_MADE     = 'Y'
WHERE SCHED_ID        = $SCHEDID
  AND EMPLID          = $EMPLID
  AND BENEFIT_RCD_NBR = &BAP.BENEFIT_RCD_NBR
  AND EVENT_ID        = &BAP.EVENT_ID
  AND PLAN_TYPE       = $PLAN_TYPE
END-SQL

  do Update-Bas-Partic-Optn-CTO-FTO

end-procedure Update-Bas-Partic-Plan-CTO-FTO

!-----------------------------------------------------------------------
! Function:    Update-Bas-Partic-Optn-CTO-FTO                          -
! Description: update BAS_PARTIC_OPTN                                  -
! Called By:   Process-Employee-Elections                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Update-Bas-Partic-Optn-CTO-FTO

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Update-Bas-Partic-Optn-CTO-FTO'
  #end-if

  let $Sql-Statement = $SQRName || ', Update-Bas-Partic-Optn-CTO-FTO, UPDATE, ' || 'PS_BAS_PARTIC_OPTN'

BEGIN-SQL ON-ERROR=SQL-ERROR-ROUTINE
UPDATE PS_BAS_PARTIC_OPTN
SET COVRG_CD          = &TRB.COVRG_CD,
    OPTION_CD         = &TRB.OPTION_CD,
    BENEFIT_PLAN      = &TRB.BENEFIT_PLAN
WHERE SCHED_ID        = $SCHEDID
  AND EMPLID          = $EMPLID
  AND BENEFIT_RCD_NBR = &BAP.BENEFIT_RCD_NBR
  AND EVENT_ID        = &BAP.EVENT_ID
  AND PLAN_TYPE       = $PLAN_TYPE
!  AND OPTION_ID      = XXXXXXX
END-SQL

end-procedure Update-Bas-Partic-Optn-CTO-FTO

!-----------------------------------------------------------------------
! Function:    Find-Dep-National-ID                                    -
! Description: Set flag for existing row on DEP_BENEF_NID              -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Find-Dep-National-ID

 let $FOUND_NID = 'N'

BEGIN-SELECT
DN.NATIONAL_ID

   LET $FOUND_NID = 'Y'

FROM  PS_DEP_BENEF_NID DN
WHERE DN.EMPLID           = &DBT.NATIONAL_ID
AND   DN.DEPENDENT_BENEF  = $DEP-ID
AND   DN.COUNTRY          = 'USA'
AND   DN.NATIONAL_ID_TYPE = ' '
END-SELECT

end-procedure Find-Dep-National-ID

!-----------------------------------------------------------------------
! Function:    Find-Dep-Records                                        -
! Description: Set flag for existing row on DEPENDENT_BENEF            -
! Called By:   Process-Dependent-Coverage                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Find-Dep-Records

 LET $Found_Dep_Rec        = 'N'
 Let $Found_Rel            = 'N'
 Let $Found_Dep_Benef_Type = 'N'
 LET $Found_Dep_Cert       = 'N'
 show '&DBT.NATIONAL_ID :' &DBT.NATIONAL_ID
 show '$DEP-ID     :' $DEP-ID
 
BEGIN-SELECT
DB.DEPENDENT_BENEF
DB.NAME
DB.RELATIONSHIP
DB.DEP_BENEF_TYPE
DB.MAR_STATUS
DB.SEX
DB.BIRTHDATE
DB.STUDENT
DB.DISABLED
DB.STUDENT_STATUS_DT
DB.GEX_DEP_CERT

   LET $Found_Dep_Rec        = 'Y'
   
   IF &DB.RELATIONSHIP=&DBT.RELATIONSHIP
      Let $Found_Rel = 'Y'
   END-IF
   
   IF &DB.DEP_BENEF_TYPE=&DBT.DEP_BENEF_TYPE
      Let $Found_Dep_Benef_Type = 'Y'
   END-IF
   show '&DB.GEX_DEP_CERT :' &DB.GEX_DEP_CERT
   show '&DBT.GEX_DEP_CERT:' &DBT.GEX_DEP_CERT
   IF (&DB.GEX_DEP_CERT=&DBT.GEX_DEP_CERT) or (&DB.GEX_DEP_CERT=' ')
      LET $Found_Dep_Cert = 'Y'
   END-IF

FROM  PS_DEPENDENT_BENEF DB
WHERE DB.EMPLID          = &DBT.NATIONAL_ID
AND   DB.DEPENDENT_BENEF = $DEP-ID
END-SELECT

end-procedure Find-Dep-Records

!-----------------------------------------------------------------------
! Function:    SQL-Error-Routine                                       -
! Description: process sql error, output error message                 -
! Called By:   All insert / update routine                             -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure SQL-Error-Routine

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : SQL-Error-Routine'
  #end-if

  add 1 to #SQL_Errors          ! Increment the counter for SQL Errors

  move 'SQL' to $Error_Type
  let $Error_Message = 'Statement = ' || $Sql-Statement || ' Error = ' ||  $Sql-Error

  do Print-Error-Line
  do write-Error-Files
  !
  !  Display the error to the log file.
  !
  display $Sqr-Program        noline
  display ': '                noline
  display $ReportID           noline
  display ' - SQL Statement = '
  display $Sql-Statement
  display 'SQL Status = '     noline
  display #Sql-Status 99999   noline
  display ', SQL Error  = '   noline
  display $Sql-Error
  display &BAP.SCHED_ID
  display $Emplid
  display &BAP.EVENT_ID
  display $PLAN_TYPE
  display $Dep-ID
!  display &DBT.BIRTHDATE
!  DISPLAY '*'                 NOLINE
!  display &DBT.STUDENT_STATUS_DT  NOLINE
!  DISPLAY '*'
!  display $AsOfToday

end-procedure SQL-Error-Routine

!*******************************************************************************
! ** Section Begin:  Write Routines
!*******************************************************************************
!-----------------------------------------------------------------------
! Function:    write-Error-Files                                       -
! Description: Write out rows to files to be re-processed              -
! Called By:   Various lines                                           -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure write-Error-Files

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : write-Error-Files'
  #end-if

        Let $Quote = '"'
        Let $Comma = ','

        do select-write-cbpplnoptn

        if $empchk <> $prevemp
           do select-write-cbpdependents
        end-if

end-procedure write-Error-Files

!-----------------------------------------------------------------------
! Function:    Open-File                                               -
! Description: Opens Files for Writing                                 -
! Called By:   Report                                                  -
! Calls:       None                                                    -
! Parameters:  $file_name and #file_num                                -
!-----------------------------------------------------------------------

begin-procedure open-file($file_name, #file_num)

Let #numTest = delete($File_Name)

open $file_name as #file_num
     for-writing
     record=1100:fixed
     status=#filestatus

     if #filestatus = -1
       #debugd show ' '
       #debugd show ' '
       #debugd show ' ***** WARNING ***** Open for ' $file_name ' in program ' $report_name ' failed.'
       #debugd show ' '
       #debugd show ' '
       stop quiet
     else
       let $error_flag = 'N'
       #debugd show ' '
       #debugd show 'File Opened for Writing: ' $file_name
     end-if

end-procedure open-file

!-----------------------------------------------------------------------
! Function:    Close-File                                              -
! Description: Closes Files                                            -
! Called By:   Report                                                  -
! Calls:       None                                                    -
! Parameters:  #file_num                                               -
!-----------------------------------------------------------------------
begin-procedure close-file(#file_num)

    close #file_num

end-procedure close-file

!-----------------------------------------------------------------------
! Function:    write-cbp-pln-optn                                      -
! Description: Write Data to output file, cbp-pln-optn                 -
! Called By:   write-Error-Files                                       -
! Calls:       None                                                    -
!-----------------------------------------------------------------------

begin-procedure write-cbp-pln-optn

        write 1 from    &ERCPO.EMPLID:11
                        &ERCPO.PLAN_TYPE:2
                        &ERCPO.BENEFIT_PROGRAM:3
                        &ERCPO.BENEFIT_PLAN:6
                        &ERCPO.COVRG_CD:2                      
                        &ERCPO.ANNUAL_PLEDGE:11
                        &ERCPO.OPTION_CD:3
                        &ERCPO.HLTH_PROVIDER_ID:30
                        &ERCPO.PREVIOUSLY_SEEN:1
                        &ERCPO.FLAT_AMOUNT:9                   
                        &ERCPO.EVENT_ID:38


end-procedure !write-cbp-pln-optn

!-----------------------------------------------------------------------
! Function:    select-write-cbpplnoptn                                 -
! Description: select values to write to error file                    -
! Called By:   write-error-files                                       -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure select-write-cbpplnoptn

BEGIN-SELECT
ERCPO.EMPLID
ERCPO.PLAN_TYPE
ERCPO.BENEFIT_PLAN
ERCPO.COVRG_CD
ERCPO.ANNUAL_PLEDGE
ERCPO.OPTION_CD
ERCPO.HLTH_PROVIDER_ID
ERCPO.PREVIOUSLY_SEEN
ERCPO.FLAT_AMOUNT                      
ERCPO.EVENT_ID
ERCPO.BENEFIT_PROGRAM

        DO WRITE-CBP-PLN-OPTN

FROM PS_CBP_PLN_OPTN ERCPO

WHERE [$WHERE_CLAUSE]

END-SELECT
end-procedure select-write-cbpplnoptn

!-----------------------------------------------------------------------
! Function:    write-cbp-dependents                                    -
! Description: Write Data to output file, cbp-dependents               -
! Called By:   write-Error-Files                                       -
! Calls:       None                                                    -
!-----------------------------------------------------------------------

begin-procedure write-cbp-dependents

        write 2 from    &ERCD.national_id:20
                        &ERCD.cbp_depid:2
                        &ERCD.cbp_last_name:25
                        &ERCD.cbp_first_name:25
                        &ERCD.relationship:2
                        &ERCD.cbp_depnational_id:20
                        &ERCD.sex:1
                        &ERCD.birthdate:11
                        &ERCD.cbp_medcoverage:1
                        &ERCD.cbp_med_hlth_prov:30
                        &ERCD.cbp_med_pcp_name:50
                        &ERCD.cbp_med_prev_seen:1
                        &ERCD.cbp_dencoverage:1
                        &ERCD.cbp_den_hlth_prov:30
                        &ERCD.CBP_VISN_COV:1
                        &ERCD.CBP_NQ_MED_COV:1
                        &ERCD.CBP_NQ_DENTAL:1
                        &ERCD.CBP_NQ_VISION:1
                        &ERCD.cbp_den_pcp_name:50
                        &ERCD.cbp_den_prev_seen:1
                        &ERCD.dependent_benef:2
                        &ERCD.student:1
                        &ERCD.smoker:1
                        &ERCD.emplid:11
                        &ERCD.name:50
                        &ERCD.dep_benef_type:1
                        &ERCD.mar_status:1
                        &ERCD.disabled:1
                        &ERCD.student_status_dt:11
                        &ERCD.cbp_viscoverage:1
                        &ERCD.cbp_life_benef:1
                        &ERCD.cbp_savings_benef:1
                        &ERCD.cbp_pension_benef:1
                        &ERCD.cbp_new_dependent:3
                        &ERCD.cbp_slif_benef:1
                        &ERCD.contingent_blif:1
                        &ERCD.benef_pct_blif:3
                        &ERCD.contingent_slif:1
                        &ERCD.benef_pct_slif:3
                        &ERCD.contingent_sav:1
                        &ERCD.benef_pct_sav:3
                        &ERCD.contingent_pen:1
                        &ERCD.benef_pct_pen:3
                        &ERCD.CBP_RX_COVERAGE:1
                        &ERCD.CBP_NQ_RX_COV:1
                        &ERCD.GEX_DEP_CERT:1
                        &ERCD.BENEFIT_PROGRAM:3
                        &ERCD.EMPL_RCD:1
                        &ERCD.BENEFIT_RCD_NBR:1
                        

end-procedure !write-cbp-dependents

!-----------------------------------------------------------------------
! Function:    select-write-cbpdependents                              -
! Description: select values to write to error file                    -
! Called By:   write-error-files                                       -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure select-write-cbpdependents

BEGIN-SELECT DISTINCT
ERCD.NATIONAL_ID
ERCD.CBP_DEPID
ERCD.CBP_LAST_NAME
ERCD.CBP_FIRST_NAME
ERCD.RELATIONSHIP
ERCD.CBP_DEPNATIONAL_ID
ERCD.SEX
ERCD.BIRTHDATE
ERCD.CBP_MEDCOVERAGE
ERCD.CBP_MED_HLTH_PROV
ERCD.CBP_MED_PCP_NAME
ERCD.CBP_MED_PREV_SEEN
ERCD.CBP_DENCOVERAGE
ERCD.CBP_DEN_HLTH_PROV
ERCD.CBP_VISN_COV
ERCD.CBP_NQ_MED_COV
ERCD.CBP_NQ_DENTAL
ERCD.CBP_NQ_VISION
ERCD.CBP_DEN_PCP_NAME
ERCD.CBP_DEN_PREV_SEEN
ERCD.DEPENDENT_BENEF
ERCD.STUDENT
ERCD.SMOKER
ERCD.EMPLID
ERCD.NAME
ERCD.DEP_BENEF_TYPE
ERCD.MAR_STATUS
ERCD.DISABLED
ERCD.STUDENT_STATUS_DT
ERCD.CBP_VISCOVERAGE
ERCD.CBP_LIFE_BENEF
ERCD.CBP_SAVINGS_BENEF
ERCD.CBP_PENSION_BENEF
ERCD.CBP_NEW_DEPENDENT
ERCD.CBP_SLIF_BENEF
ERCD.CONTINGENT_BLIF
ERCD.BENEF_PCT_BLIF
ERCD.CONTINGENT_SLIF
ERCD.BENEF_PCT_SLIF
ERCD.CONTINGENT_SAV
ERCD.BENEF_PCT_SAV
ERCD.CONTINGENT_PEN
ERCD.BENEF_PCT_PEN
ERCD.CBP_RX_COVERAGE
ERCD.CBP_NQ_RX_COV
ERCD.GEX_DEP_CERT
ERCD.BENEFIT_PROGRAM
ERCD.EMPL_RCD
ERCD.BENEFIT_RCD_NBR

        DO WRITE-CBP-DEPENDENTS

FROM PS_CBP_DEPENDENTS ERCD
!WHERE ERCD.EMPLID = $EMPLID
WHERE ERCD.NATIONAL_ID = $EMPLID

END-SELECT

end-procedure select-write-cbpdependents

!*******************************************************************************
! ** Section Begin:  Print Routines
!*******************************************************************************
!-----------------------------------------------------------------------
! Function:    Print-Detail-Line                                       -
! Description: Print row for every employee processed                  -
! Called By:   Process-Employee-Elections                              -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Print-Detail-Line

!    This procedure is used to print a detail line for the output report.

  !#ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Print-Detail-Line'
  !#end-if

  !Values for print
  if $plan_type <> '20'
     let $xben_plan = &TRB.BENEFIT_PLAN
     let $xcov_cd   = &TRB.COVRG_CD
   else
     let $Option_Cd = ' '
     let $xben_plan = ' '
     let $xcov_cd   = ' '
  end-if
  
  use-report Detail_Report

  print $Emplid                  (+1,{Col01})
  print $SchedId                 (  ,{Col02})
  print &EVR.EVENT_DT            (  ,{Col03})
  print &EVR.EVENT_CLASS         (  ,{Col04})
  print &EVR.EVENT_ID            (  ,{Col05}) edit 999990
  print &EVR.CONFIRM_NOTIFY_DT   (  ,{Col06})
  print $PLAN_TYPE               (  ,{Col07})
  print $xben_plan               (  ,{Col08})
  print $xcov_cd                 (  ,{Col09})
  print $Option_Cd               (  ,{Col10})
  print &TRB.ANNUAL_PLEDGE       (  ,{Col11})
  print $Message                 (  ,{Col12})

end-procedure Print-Detail-Line

!-----------------------------------------------------------------------
! Function:    Print-Error-Line                                        -
! Description: Print row for employee in file with no open event       -
! Called By:   Main-Process,SQL-Error-Routine                          -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Print-Error-Line

!    This procedure prints a line on the error report.

  #ifdef debugt                 ! Debug-FLOW            !012
    show 'FLOW : Print-Error-Line'
  #end-if

  use-report Error_Report

  print $SchedID                (+1,{ECol01})
  Print $Ben_Prog               (,{ECol02})
  print $Error_Type             (,{ECol03})
  print $Emplid                 (,{ECol04})
  Print $Empl_Rcd               (,{ECol05})
  Print $Emp_Name               (,{ECol06})
  Print &EVR.EVENT_DT           (,{ECol07})
  Print &EVR.EVENT_CLASS        (,{ECol08})
  Print &EVR.EVENT_ID           (,{ECol09}) edit 999990
  Print &EVR.CONFIRM_NOTIFY_DT  (,{ECol10})
  Print &TRB.PLAN_TYPE          (,{ECol11})
  Print &TRB.BENEFIT_PLAN       (,{ECol12})
  Print &TRB.COVRG_CD           (,{ECol13})
  Print &TRB.OPTION_CD          (,{ECol14})  
  Print &EVR.BAS_PROCESS_STATUS (,{ECol15})     
  Print $Error_Message          (,{ECol16})

end-procedure Print-Error-Line

!-----------------------------------------------------------------------
! Function:    Print-Error-Line-Nops                                   -
! Description: Print row for to error file for no ps row               -
! Called By:   Pre-Main-Process                                        -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Print-Error-Line-Nops

!    This procedure prints a line on the error report.

  #ifdef debugt                 ! Debug-FLOW
    show 'FLOW : Print-Error-Line'
  #end-if

  let $empty = ' '

  use-report Error_Report

  print $SchedID                (+1,{ECol01})
  Print $Ben_Prog               (,{ECol02})
  print $Error_Type             (,{ECol03})
  print $Emplid                 (,{ECol04})
  Print $Empl_Rcd               (,{ECol05})
  Print $Emp_Name               (,{ECol06})
  Print &EVR.EVENT_DT           (,{ECol07})
  Print &EVR.EVENT_CLASS        (,{ECol08})
  Print &EVR.EVENT_ID           (,{ECol09})
  Print &EVR.CONFIRM_NOTIFY_DT  (,{ECol10})
  Print &TRB.PLAN_TYPE          (,{ECol11})
  Print &TRB.BENEFIT_PLAN       (,{ECol12})
  Print &TRB.COVRG_CD           (,{ECol13})
  Print &TRB.OPTION_CD          (,{ECol14}) 
  Print &EVR.BAS_PROCESS_STATUS (,{ECol15})   
  Print $Error_Message          (,{ECol16}) wrap 45 3

end-procedure Print-Error-Line-Nops

!-----------------------------------------------------------------------
! Function:    Print-Process-Totals                                    -
! Description: Print totals for process                                -
! Called By:   Report                                                  -
! Calls:       None                                                    -
!-----------------------------------------------------------------------
begin-procedure Print-Process-Totals

  #ifdef debugt                 ! Debug-FLOW            !012
    show 'FLOW : Print-Process-Totals'
  #end-if

  use-report Detail_Report

  new-page

  print 'NUMBER OF TOTAL CBP RECORDS        : '  (+1,{Col01})
  #debugd display 'NUMBER OF TOTAL CBP RECORDS        : ' noline
  print #Total_CBP                               ()          edit 9999990
  #debugd display #Total_CBP                                              9999990

  print 'NUMBER OF CBP RECORDS NO EVENTS    : '  (+1,{Col01})
  #debugd display 'NUMBER OF CBP RECORDS NO EVENTS    : ' noline
  print #Total_CBP_NOPS                          ()          edit 9999990
  #debugd display #Total_CBP_NOPS                                         9999990

  print 'NUMBER OF EMPLOYEE EVENTS          : '  (+1,{Col01})
  #debugd display 'NUMBER OF EMPLOYEE EVENTS          : ' noline
  print #Emp_Events                              ()          edit 9999990
  #debugd display #Emp_Events                                             9999990

  print 'NUMBER OF DEPENDENT EVENTS         : '  (+1,{Col01})
  #debugd display 'NUMBER OF DEPENDENT EVENTS         : ' noline
  print #Dep_Events                              ()          edit 9999990
  #debugd display #Dep_Events                                             9999990

  print 'NUMBER OF RECORDS IN ERROR         : '  (+1,{Col01})
  #debugd display 'NUMBER OF RECORDS IN ERROR         : ' noline
  print #Errors                                  ()          edit 9999990
  #debugd display #Errors                                                 9999990

  print 'NUMBER OF WARNINGS - Dependents    : '  (+1,{Col01})
  #debugd display 'NUMBER OF WARNINGS - Dependents    : ' noline
  print #Warnings_dep                            ()          edit 9999990
  #debugd display #Warnings_dep                                               9999990

  print 'NUMBER OF WARNINGS - Plan Type     : '  (+1,{Col01})
  #debugd display 'NUMBER OF WARNINGS - Plan Type     : ' noline
  print #Warnings_pln                            ()          edit 9999990
  #debugd display #Warnings_pln                                           9999990

  print 'NUMBER OF SQL ERRORS               : '  (+1,{Col01})
  #debugd display 'NUMBER OF SQL ERRORS               : ' noline
  print #SQL_Errors                              ()          edit 9999990
  #debugd display #SQL_Errors                                             9999990

end-procedure Print-Process-Totals

!*******************************************************************************
! ** Section Begin:  Includes
!*******************************************************************************
#include 'reset.sqc'     !Printer Reset
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'number.sqc'    !Routines to format numbers
#include 'stdapi.sqc'    !Update Process API
#include 'timemath.sqc'
! *******************************************************************
!                   <<<   END OF FILE   >>>
! *******************************************************************



