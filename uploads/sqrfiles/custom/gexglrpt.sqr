!------------------------------------------------------>>> FDRoss <-!
!  PROGRAM NAME: GEXGLRPT                                           !
!  DESCRIPTION: PROGRAM TO PRINT THE ERROR CODE DATABASE            !
!               AND OTHER MISCELLANEOUS REPORTS                     !
!  DB NAME:      GEX_INTFC_ERRS                                     !
!------------------------------------------------------>>> FDRoss <-!
! PROGRAM DESCRIPTION:                                              !
!                                                                   !
! THIS PROGRAM WILL PRINT THE ERROR CODE DATA BASE                  !
!------------------------------------------------------>>> FDRoss <-!
! DATE         29-JAN-1999                                          !
! AUTHOR: FDROSS             ALL RIGHTS RESERVED                    !
!------------------------------------------------------>>> FDRoss <-!
!------------------------------------------------------>>> FDRoss <-!
!            MODIFICATION HISTORY              -------->>> FDRoss <-!
!------------------------------------------------------>>> FDRoss <-!
!CHANGE# INIT DATE      DESCRIPTION                                 !
!------------------------------------------------------>>> FDRoss <-!
!XXXXXX  FDR 01/29/1999 Initial creation.                           !
!                                                                   !
!        JDH 02/26/1999 Added run control logic.                    !
!                                                                   !
!        JDH 03/18/1999 Added logic to default the pay end date     !
!                        to the accounting date in hr_acctg_line    !
!                        when the pay end date parameter is left    !
!                        blank.                                     !
!                                                                   !
!        FDR 04/14/1999 Added net pay to gexgl015 report            !
!                                                                   !
!        FDR 04/20/1999 Added net pay to gexgl015 report title      !
!                                                                   !
!	 SXK 05/18/1999 Commented out Z7 select to not to exclude   !
!			 reversals                                  !
!                                                                   !
!        SXK 05/19/1999 Modified to get pay end date only if        !
!			 report type is not 14                      !
!                                                                   !
!        JDH 09/30/1999 Added paygroup page break to GEXGL010       !
!                                                                   !
!        JDH 11/04/1999 Perform new-page AFTER bu-break not before. !
!                        Fixes gexgl011,gexgl012,gexgl013,gexgl016  !
!                                                                   !
!        CWB            Change check charge from .90 to 1.25.       !
!                        Effective pay end 08/05/2000.              !
!                                                                   !
!        AXL 04/12/2002 Added G, T tax class values to  accommodate !
!                       tips.                                       !
!                                                                   !
!HR-10292 SCM 07/17/2002 The report prints multiple rows for the    !
!                       same department id when there are multiple  ! 
!                       effective dated rows in the GEX_DEPT_TBL    ! 
!	                and the GEX_DEPT_TBL.BUSINESS_UNIT field    !
!                       value is different.  Fixed sql select in    !
!                       para select-group-z7. Commented out business!
!                       unit code.                                  !                       
!                                                                   *
!       CWB 03/27/2003  Made changes in procedure select-group-z7.  *
!                       Added join to PAY_OTH_EARNS as to not select*
!                       checks where ERNCD = 'DDP' (returned direct *
!                       deposit).                                   * 
!   GEX-MXT 10/01/2007  Code modified to generate only 4 reports    *
!                       (GEXGL001; GEXGL004; GEXGL011 & GEXGL015).  *
!   GEX-MXT 10/23/2007  Commented code(Code for other reports)      *
!                       removed                                     *
!   ISDVDXS 06/18/2008  Added hint in procedure select-group-z7 to  *
!                       improve performance	                    *
!   VENDMXT 07/01/2008  Brought code forward for GEXGL013 from 83   *
!                       for ITG 51226                               *
! GEXHR_848_E122337 ISDVNPK   03/22/2012	 Modified to change the   *
!                            GEXGL015 to print based on             *
!                          Live checks, DD & Suppressed DD voucher  *
!***********************************************************************
!*******************************************************************!
!------------------------------------------------------>>> FDRoss <-!
#include 'setenv.sqc'
begin-setup
#include 'setup02a.sqc'
!#include 'setup02.sqc'
!------------------------------------------------------>>> FDRoss <-!
end-setup
!------------------------------------------------------>>> FDRoss <-!
! BEGIN-REPORT                                                      !
!------------------------------------------------------>>> FDRoss <-!
!INITIAL PROCESSING, RETRIEVING CURRENT DATES                       !
!AND CALL THE PROCEDURE TO DO THE PROCESSING                        !
!------------------------------------------------------>>> FDRoss <-!
BEGIN-REPORT

	DO INIT-DATETIME
	DO INIT-NUMBER
	DO STDAPI-INIT 

	DO PROCESS-CONTROL-DATA
	!ENCODE '<13><10>' INTO $CRLF
	!ENCODE '<123>'    INTO $LEFT
	!ENCODE '<125>'    INTO $RIGHT
	LET  $REPORTID  = 'GEXGLRPT' 	!GEX-MXT uncommented
	LET  $REPORTTITLE  = 'Statistics for GL Interface'	!GEX-MXT uncommented
	!let $path = '2'
	SHOW 'BEGIN JOB: ' $ASOFTODAY ' ' $ASOFNOW
	!DISPLAY ' '
	!DISPLAY '$$PROGRAM NAME: ' NOLINE
	!DISPLAY $REPORTID
	SHOW $REPORTTITLE
	!DISPLAY $REPORTTITLE
	!DISPLAY ' '

	DO GET-CURRENT-DATETIME
	LET $REPORTDATE_MM = SUBSTR($REPORTDATE,1,2)
	LET $REPORTDATE_DD = SUBSTR($REPORTDATE,4,2)
	LET $REPORTDATE_YY = SUBSTR($REPORTDATE,7,2)
	DO MAKEYEAR4DIGITS ($REPORTDATE_YY)
	LET $REPORTDATE_CCYYYY = $REPORTDATE_MM||'/'||$REPORTDATE_DD||'/'||$REPORTDATE_YY
	DO FORMAT-DATETIME($REPORTDATE_CCYYYY,$REPORTDATE_CCYY,{DEFMDY},'','NATIVE')
	DO REPORT
	DO COMMIT-TRANSACTION
	DATE-TIME () HH:MI:SS &TIMEENDED
	DISPLAY 'REPORT ENDED: ' NOLINE
	DISPLAY &TIMEENDED
	DO STDAPI-TERM
	DO RESET
END-REPORT


!------------------------------------------------------>>> FDRoss <-!
! BEGIN-REPORT                                                      !
!------------------------------------------------------>>> FDRoss <-!
!IF THIS PROGRAM IS BEING EXECUTED THROUGH PROCESS SCHEDULER,       !
!THE RUN CONTROL PARAMETERS AND CALLS THE MAIN PROCESSING PROCEDURE.!
!OTHERWISE, INTERROGATES THE USER FOR THE RUN CONTROL PARAMETERS AND!
!VALIDATES THEM. IF THE RUN CONTROL PARAMETERS ARE INVALID, STOPS   !
!THE EXECUTION.                                                     !
!------------------------------------------------------>>> FDRoss <-!
BEGIN-PROCEDURE REPORT
	DATE-TIME () HH:MI:SS &TIMEBEGAN
	DISPLAY 'REPORT BEGAN: ' NOLINE
	DISPLAY &TIMEBEGAN
	MOVE 'N' TO $ERRORFOUND
	LET $RNCTL_DATE = $REPORTDATE_CCYY
	IF $PRCS_PROCESS_INSTANCE = ''

		do Ask-As-Of-Date
		
		display '___________________________________________________________________'
		display '                                                                   '
		display '*** OUTPUT ***>>> Date Selection: '   noline
		display $AsOfDate
		display '___________________________________________________________________'
		display '                                                                   '

reenter-errors:
		display '___________________________________________________________________'
		display '                                                                   '
		input $errors '*** INPUT ***>>> Enter "Y" to print only errors or "N" to print all' type = char
		display '                                                                   '
		uppercase $errors
		display '___________________________________________________________________'
		
		if $errors = 'Y'
		or $errors = 'N'
		
		else
			display '*** ERROR ***>>> Re-enter choice'
			goto    reenter-errors
		end-if

		display '___________________________________________________________________'
		display '                                                                   '
		display '*** OUTPUT ***>>> Print choice:   '   noline
		display $errors
		display '                                                                   '
		display '___________________________________________________________________'
		
reenter-choice:
		display '___________________________________________________________________'
		display '                                                                   '
		display '                 *** Report Choices ***                            '
		display '___________________________________________________________________'
		display 'Enter "01" - Rpt:#01 - GEXGL001.Acct summary'
		Display '      "09" - Rpt:#11 - GEXGL011.BU/Dptid/Co/Paygrp/Acct summary'
		Display '      "11" - Rpt:#13 - GEXGL013.BU/Dptid/Acct summary'			!GEX-MXT added for ITG#51226
		display '      "13" - Rpt:#04 - GEXGL004.Summary of Errors'
		display '      "14" - Rpt:#15 - GEXGL015.Summary of Check Charges & Net for Independents'
		display '                                                                   '
		display '___________________________________________________________________'
		display '                                                                   '
		display ' To get the payroll comparison, you must enter "ALL" '
		display '                                                                   '
		display '___________________________________________________________________'
		display '                                                                   '
		
		input $my-path '*** INPUT ***>>> Enter number from above or "ALL" for all reports'
		uppercase $my-path
		
		if $my-path = 'ALL'
		else
			if $my-path > '00'
			and $my-path < '17'
			else 
				display '*** ERROR ***>>> Re-enter request    '
				goto reenter-choice
			end-if
		end-if

		display '___________________________________________________________________'
		display '                                                                   '
		display '*** OUTPUT ***>>> Report choice:  '   noline
		display $my-path
		display '___________________________________________________________________'

	ELSE   
		DO GET-RUN-CONTROL-VALUES
	END-IF
        !SXK 05/19/1999 Begin
        if ($my-path <> '14' or ($my-path = '14' and (rtrim($AsOfdate,' ') = '')))
          do Get-Pay-End-Date
        else
          let $pay_end_Dt = $Asofdate
        end-if
	!SXK 05/19/1999 End
	DO PROCESS-MAIN

!------------------------------------------------------>>> FDRoss <-!

!  DO SUCCESSFUL-EOJ
REPORT-EXIT:
	DATE-TIME () HH:MI:SS &TIMEPROCESS
	DISPLAY &TIMEPROCESS
END-PROCEDURE         ! END PROCEDURE - REPORT



!------------------------------------------------------>>> FDRoss <-!
!PRINTS THE HEADER INFORMATION                                      !
!------------------------------------------------------>>> FDRoss <-!
BEGIN-HEADING 4
!------------------------------------------------------>>> FDRoss <-!
!   STANDARD HEADING #1 FOR PRINTED REPORTS                         !
!------------------------------------------------------>>> FDRoss <-!
	if $Path = '1'
		LET  $REPORTID  = 'GEXGL004' 
		LET  $REPORTTITLE  = 'Error Code summary report  '||' : Pay End Date: '||$Pay_end_dt
	end-if

	if $Path = '2'
		LET  $REPORTID  = 'GEXGL001' 
		LET  $REPORTTITLE  = 'Summary of All Account Codes '||' : Pay End Date: '||$Pay_end_dt
	end-if

	if $path = 'Z3'
		let $REPORTID   = 'GEXGL011'
		LET $REPORTTITLE = 'Business-Unit/Deptid/Company/Paygroup/Account summary '||' : Pay End Date: '||$Pay_end_dt
	end-if

	if $path = 'Z7'
		let $REPORTID   = 'GEXGL015'
		LET $REPORTTITLE = 'Summary of Check Charges & Net for Independents '||' : Pay End Date: '||$Pay_end_dt
	end-if

!GEX-MXT added for ITG#51226-Begin	
	if $path = 'Z5'
		let $REPORTID   = 'GEXGL013'
		LET $REPORTTITLE = 'Business-Unit/Deptid/Account summary '||' : Pay End Date: '||$Pay_end_dt
	end-if
!GEX-MXT added for ITG#51226-End

	PRINT '            '    (1,1)
	PRINT $OUT_GEX_N_COMPANY_NAME   ()        CENTER
	PRINT 'REPORT ID:  '    (+1,1)
	PRINT $REPORTID         ()
	UPPERCASE $REPORTTITLE
	PRINT $REPORTTITLE      ()          CENTER
	LET #RPTCOL = {COLR} - 2
	PAGE-NUMBER             (0,#RPTCOL)  'PAGE NO.  '
	PRINT 'RUN DATE '       (+1,#RPTCOL)
	PRINT $REPORTDATE       ()
	PRINT 'RUN TIME '       (+1,#RPTCOL)
	PRINT $REPORTTIME       ()

	if $Path = '1'
		!PRINT 'ERR CODES'                        (+1,1,9)    underline
		!PRINT 'TOT ERRS'                         (+0,10,10)  underline
		!PRINT 'FIELD #1'                         (+0,21,15)  underline
		!PRINT 'FIELD #2'                         (+0,37,15)  underline
		!PRINT 'FIELD #3'                         (+0,53,10)  underline
		!PRINT 'FIELD #4'                         (+0,64,10)  underline
		!PRINT 'FIELD #5'                         (+0,75,10)  underline
		!PRINT 'FIELD #6'                         (+0,86,10)  underline
		!PRINT 'FIELD #7'                         (+0,97,10)  underline
		!PRINT 'FIELD #8'                         (+0,108,10) underline
		!PRINT 'FIELD #9'                         (+0,119,10) underline
		!PRINT 'FIELD #10'                        (+0,130,10) underline
		!PRINT 'FIELD #11'                        (+0,141,10) underline
		!PRINT 'FIELD #12'                        (+0,152,10) underline
	end-if

	if $path = '2'
		print 'Account #'             (+1,1,10)    underline
		print 'Account Description'   (+0,12,30)   underline
		print ' Account Amt'          (+0,43,12)   underline
		print ' Total Recs'           (+0,56,11)   underline
	end-if

	if $path = 'Z3'
		print 'B/U'                     (+1,1,6)   underline
		print 'DptId'                   (+0,8,6)   underline
		print 'Co.'                     (+0,15,4)  underline
		print 'PyG'                     (+0,20,4)  underline
		print 'Account'                 (+0,25,10) underline
		print 'Line Description'        (+0,35,30) underline
		print 'Dollar Amt.'             (+0,66,14) underline
	end-if

!GEX-MXT added for ITG#51226-Begin
	if $path = 'Z5'
		print 'B/U'                     (+1,10,6)   underline
		print 'DptId'                   (+0,18,6)   underline
		print 'Account'                 (+0,25,10) underline
		print 'Line Description'        (+0,35,30) underline
		print 'Dollar Amt.'             (+0,66,14) underline
	end-if
!GEX-MXT added for ITG#51226-End	

	if $path = 'Z7'
! GEXHR_848_E122337 ISDVNPK    03/22/2012
		print 'Store #'           (+1,6,8) underline
		print 'BU'           (+0,16,3) underline
		print '#Paper Payments'        (+0,21,18) underline
		print 'Total Paper Charges'  (+0,41,20) underline
		print '#Electronic Payments'        (+0,62,20) underline
		print 'Electronic Charges'  (+0,83,20) underline
		print '#of Payments'              (+0,105,15) underline
		print 'Total Charges'            (+0,120,15) underline
		print 'Total Net Pay'          (+0,136,20) underline
	end-if
! GEXHR_848_E122337 ISDVNPK    03/22/2012

END-HEADING


!------------------------------------------------------>>> FDRoss <-!
!  PROCEDURE:   GET-RUN-CONTROL-VALUES                              !
!  DESCRIPTION: GETS ALL THE RUN CONTROL VALUES.03/12/1998 FDRoss <-!
!------------------------------------------------------>>> FDRoss <-!
BEGIN-PROCEDURE GET-RUN-CONTROL-VALUES
	#DEBUG DISPLAY 'ENTERING GET-RUN-CONTROL-VALUES'
	DO GEXXX922-Select-Parameters
	LET $AsOfDate = $GEX_RC_PAY.ASOFDATE
	LET $errors = $GEX_RC_PAY.YES_NO_FLAG
	LET $my-path = $GEX_RC_PAY.GEXGLRPT_RPT_TYPE
	IF RTRIM($errors,' ') = '' OR
	   RTRIM($my-path,' ') = ''
	  DISPLAY 'REQUIRED PARAMETER MISSING'
	  STOP
	END-IF
	IF RTRIM($AsOfDate,' ') = ''
	  Let $AsOfDate = $AsOfToday
	END-IF
	#DEBUG DISPLAY 'LEAVING GET-RUN-CONTROL-VALUES'
END-PROCEDURE          ! END PROCEDURE - GET-RUN-CONTROL-VALUES
!------------------------------------------------------>>> FDRoss <-!
! END PROCEDURE: GET-RUN-CONTROL-VALUES                             !
!------------------------------------------------------>>> FDRoss <-!

!------------------------------------------------------>>> 
BEGIN-PROCEDURE GET-PAY-END-DATE
display $asofdate
begin-select
Max(accounting_dt) &pay_end_dt
  Let $pay_end_dt = &pay_end_dt
  If Rtrim($pay_end_dt,' ') = ''
    Show 'No accounting date found in PS_HR_ACCTG_LINE'
    Stop
  Else
    Display 'Pay End Date: ' noline
    Display $pay_end_dt
  End-If
from   PS_HR_ACCTG_LINE
where  accounting_dt <= $AsOfDate
end-select
END-PROCEDURE
!------------------------------------------------------>>> 

!------------------------------------------------------>>> FDRoss <-!
! PROCEDURE: PROCESS-CONTROL-DATA                                   !
!------------------------------------------------------>>> FDRoss <-!
BEGIN-PROCEDURE PROCESS-CONTROL-DATA
	LET $OUT_GEX_N_SYSTEM_CD = 'GEM'
	LET $OUT_GEX_N_MIGRATE_DIR = '/'
	LET $OUT_GEX_N_COMPANY_NAME = 'GIANT EAGLE, INC.'
END-PROCEDURE          ! END PROCEDURE - PROCESS-CONTROL-DATA
!------------------------------------------------------>>> FDRoss <-!
! END PROCEDURE: PROCESS-CONTROL-DATA                               !
!------------------------------------------------------>>> FDRoss <-!



!------------------------------------------------------>>> FDRoss <-!
! MAIN PROCESS LOOP OF READING INPUT AND                            !
! WRITING OUTPUT                                                    !
!------------------------------------------------------>>> FDRoss <-!
BEGIN-PROCEDURE PROCESS-MAIN
	DISPLAY 'RUN DATE:       ' NOLINE
	DISPLAY $RUNDATE
	DO FORMAT-DATETIME('19000101',$CENTURY,{DEFCMP},'','NATIVE')
	DISPLAY 'CENTURY:        ' NOLINE
	DISPLAY $CENTURY
	LET $NONE-INPUT = '0'

	if $errors = 'Y'
		new-page
		let $path = '1'
		display 'Report: #4 - summary of Errors'
		DO PRINT-HEADER-ERROR-RPT
		DO PROCESS-UNLOAD
		DO PRINT-HEADER-OUT-OF-BALANCE
		DO GET-OUT-OF-BALANCE
		DO PRINT-HEADER-ACCOUNT-INFO
		DO GET-BLANK-ACCOUNT
	else

!------------------------------------------------------>>> FDRoss <-!
		IF $MY-PATH = 'ALL'
		OR $MY-PATH = '01'
			  if $my-path = 'ALL'
    				new-page
			  end-if
			let $path = '2'
			display 'Report: #1 - account summary'
			do get-account-summary
		END-IF
!------------------------------------------------------>>> FDRoss <-!

!GEX-MXT added for ITG#51226-Begin
		IF $MY-PATH = 'ALL'
		OR $MY-PATH = '11'
			new-page
			LET $path = 'Z5'
			Display 'Report #13 - GEXGL013 - Business-Unit/Deptid/Account summary'
			do  select-group-z5
		END-IF
!GEX-MXT added for ITG#51226-End
		
!----------------------------------------------------------->> FDRoss <<--*
		IF $MY-PATH = 'ALL'
		OR $MY-PATH = '09'
			  if $my-path = 'ALL'
    				new-page
			  end-if
			LET $path = 'Z3'
			Display 'Report #11 - GEXGL011 - Business-Unit/Deptid/Company/Paygroup/Account summary'
			do  select-group-z3
		END-IF
!----------------------------------------------------------->> FDRoss <<--*

!----------------------------------------------------------->> FDRoss <<--*
		IF $MY-PATH = 'ALL'
		OR $MY-PATH = '14'
           if $my-path = 'ALL'
    				new-page
					 end-if
			LET $path = 'Z7'
			Display 'Report #15 - GEXGL015 - Summary of Check Charges & Net for Independents'
			do  select-group-z7
		END-IF

!------------------------------------------------------>>> FDRoss <-!
		IF $MY-PATH = 'ALL'
		OR $MY-PATH = '13'
			  if $my-path = 'ALL'
    				new-page
			  end-if
			let $path = '1'
			display 'Report: #4 - summary of Errors'
			DO PRINT-HEADER-ERROR-RPT
			DO PROCESS-UNLOAD
			DO PRINT-HEADER-OUT-OF-BALANCE
			DO GET-OUT-OF-BALANCE
			DO PRINT-HEADER-ACCOUNT-INFO
			DO GET-BLANK-ACCOUNT
		END-IF
	end-if
!------------------------------------------------------>>> FDRoss <-!
END-PROCEDURE ! PROCESS-MAIN
!------------------------------------------------------>>> FDRoss <-!
! END PROCEDURE: PROCESS-MAIN                                       !


!------------------------------------------------------>>> FDRoss <-!
! DISPLAY-END-TOTALS                                                !
!    THIS DISPLAYS ALL THE END TOTALS                               !
!------------------------------------------------------>>> FDRoss <-!
BEGIN-PROCEDURE DISPLAY-END-TOTALS
	DISPLAY ' '
	DISPLAY 'SQL ERRORS = ' NOLINE
	DISPLAY #SQL-ERROR-CNT  99999999
END-PROCEDURE  !DISPLAY-END-TOTALS
!------------------------------------------------------>>> FDRoss <-!
! END PROCEDURE: DISPLAY-END-TOTALS                                 !





!------------------------------------------------------>>> FDRoss <-!
! PROCEDURE: PROCESS-UNLOAD                                         !
!------------------------------------------------------>>> FDRoss <-!
BEGIN-PROCEDURE PROCESS-UNLOAD

BEGIN-SELECT ON-ERROR=SQL-ERROR
GEX_INTFC_ERRS1.GEX_ERR_CD
GEX_INTFC_ERRS1.GEX_ERR_FLD1
GEX_INTFC_ERRS1.GEX_ERR_FLD2
GEX_INTFC_ERRS1.GEX_ERR_FLD3
GEX_INTFC_ERRS1.GEX_ERR_FLD4
GEX_INTFC_ERRS1.GEX_ERR_FLD5
GEX_INTFC_ERRS1.GEX_ERR_FLD6
GEX_INTFC_ERRS1.GEX_ERR_FLD7
GEX_INTFC_ERRS1.GEX_ERR_FLD8
GEX_INTFC_ERRS1.GEX_ERR_FLD9
GEX_INTFC_ERRS1.GEX_ERR_FLD10
GEX_INTFC_ERRS1.GEX_ERR_FLD11
GEX_INTFC_ERRS1.GEX_ERR_FLD12
GEX_INTFC_ERRS1.GEX_ERR_COUNTER

	!PRINT &GEX_INTFC_ERRS1.GEX_ERR_CD        (+1,1,9)
	!PRINT &GEX_INTFC_ERRS1.GEX_ERR_COUNTER   (+0,10,10) EDIT '9999999999'
	PRINT &GEX_INTFC_ERRS1.GEX_ERR_FLD1      (+1,1,25)   ! (+0,21,15)
	
	if rtrim(&gex_intfc_errs1.gex_err_fld2,' ') <> '0'
		PRINT &GEX_INTFC_ERRS1.GEX_ERR_FLD2      (+0,27,5)
	end-if
	
	if rtrim(&gex_intfc_errs1.gex_err_fld3,' ') <> '0'
		PRINT &GEX_INTFC_ERRS1.GEX_ERR_FLD3      (+0,33,10)
	end-if
	
	if rtrim(&gex_intfc_errs1.gex_err_fld4,' ') <> '0'
		PRINT &GEX_INTFC_ERRS1.GEX_ERR_FLD4      (+0,44,12)
	end-if
	
	if rtrim(&gex_intfc_errs1.gex_err_fld5,' ') <> '0'
		PRINT &GEX_INTFC_ERRS1.GEX_ERR_FLD5      (+0,58,12)
	end-if
	
	if rtrim(&gex_intfc_errs1.gex_err_fld6,' ') <> '0'
		PRINT &GEX_INTFC_ERRS1.GEX_ERR_FLD6      (+0,71,12)
	end-if
	
FROM PS_GEX_INTFC_ERRS GEX_INTFC_ERRS1
ORDER BY GEX_ERR_FLD2
	  ,GEX_ERR_FLD1
END-SELECT
	if $errors = 'Y'
		goto nomore
	end-if

	if $my-path <> 'ALL'
		goto nomore
	end-if

nomore:

END-PROCEDURE          ! END PROCEDURE - PROCESS-UNLOAD
!------------------------------------------------------>>> FDRoss <-!
! END PROCEDURE: PROCESS-UNLOAD                                     !
!------------------------------------------------------>>> 


!------------------------------------------------------>>> 
BEGIN-PROCEDURE PRINT-HEADER-ERROR-RPT

  print 'Errors in SETUP for GL Accounts'        (+1,1,40)       center underline  
  print ' '        															 (+1,1)        
!	print 'GL BUS UNIT'                 (+2,1,11)       underline
!	print 'SUM(MONETARY AMT)'           (+0,13,30)      underline
!	print 'DEPTID'                      (+0,32,10)      underline
	                                                        
END-PROCEDURE 
!------------------------------------------------------>>> 


!------------------------------------------------------>>> 
BEGIN-PROCEDURE GET-OUT-OF-BALANCE
BEGIN-SELECT ON-ERROR=SQL-ERROR
A.BUSINESS_UNIT
SUM(A.MONETARY_AMOUNT)   &A.MONETARY_AMOUNT
A.DEPTID

 Let $print_business_unit_1 =  &A.BUSINESS_UNIT
 Let #print_monetary_amt_1  =  &A.MONETARY_AMOUNT
 Let $print_DEPTID_1        =  &A.DEPTID
 
  If #print_monetary_amt_1 <> 0
	 PRINT $print_business_unit_1        (+1,1,11)
	 PRINT #print_monetary_amt_1         (+0,13,30) edit '999,999,999.99'
	 PRINT $print_DEPTID_1               (+0,32,10)
	 do PRINT-HEADER-EMPL-INFO
	 do GET-EMPL-INFO
  End-If	
	
       
FROM PS_HR_ACCTG_LINE A
      GROUP BY  A.BUSINESS_UNIT,  A.DEPTID
      ORDER BY 1
END-SELECT
END-PROCEDURE 
!------------------------------------------------------>>> 

!------------------------------------------------------>>> 
BEGIN-PROCEDURE GET-EMPL-INFO
BEGIN-SELECT ON-ERROR=SQL-ERROR
A1.EMPLID
SUM( A1.MONETARY_AMOUNT)   &A1.MONETARY_AMOUNT


 Let $print_emplid_2  =  &A1.EMPLID
 Let #print_monetary_amt_2 =  &A1.MONETARY_AMOUNT
 
  If #print_monetary_amt_2 <> 0
	 PRINT $print_emplid_2         (+1,5,10)
	 PRINT #print_monetary_amt_2   (+0,13,25) edit '999,999,999.99'
  End-If	
      
FROM PS_HR_ACCTG_LINE A1
             WHERE A1.BUSINESS_UNIT_GL = &A.BUSINESS_UNIT
             AND A1.DEPTID = &A.DEPTID
             GROUP BY  A1.EMPLID
             ORDER BY 1, 2
END-SELECT             
END-PROCEDURE 
!------------------------------------------------------>>> 

!------------------------------------------------------>>> 
BEGIN-PROCEDURE PRINT-HEADER-OUT-OF-BALANCE

        new-page
  print 'Out of Balance Lines'        (+1,1,40)       center underline        
	print 'GL BUS UNIT'                 (+2,1,11)       underline
	print 'SUM(MONETARY AMT)'           (+0,13,30)      underline
	print 'DEPTID'                      (+0,32,10)      underline
	                                                        
END-PROCEDURE 
!------------------------------------------------------>>> 

!------------------------------------------------------>>> 
BEGIN-PROCEDURE PRINT-HEADER-EMPL-INFO

	print 'EMPLID'                 (+1,5,10)         underline
	print 'SUM(MONETARY AMT)'      (+0,13,25)        underline
	                                                        
END-PROCEDURE 
!------------------------------------------------------>>> 



!------------------------------------------------------>>> 
BEGIN-PROCEDURE GET-BLANK-ACCOUNT
Let $blank_accnt = 'N'

 do Get-Default-GroupName

BEGIN-SELECT ON-ERROR=SQL-ERROR
B.BUSINESS_UNIT_GL
B.MONETARY_AMOUNT
B.EMPLID
TO_CHAR(B.RUN_DT,'YYYY-MM-DD')  &B.RUN_DT
B.SEQNUM
B.LINE_NBR
B.ACCOUNT

   Let $blank_accnt = 'Y'

	print &B.BUSINESS_UNIT_GL          (+1,1,14)
	print &B.MONETARY_AMOUNT           (+0,16,14)  edit '999,999,999.99'
	print &B.EMPLID                    (+0,32,9)
	print &B.RUN_DT		           (+0,43,10)
	print &B.SEQNUM       		   (+0,55,7)
	print &B.LINE_NBR      		   (+0,64,8)
	print &B.ACCOUNT       		   (+0,74,10)  
            
FROM PS_HR_ACCTG_LINE B
             WHERE B.ACCOUNT in (' ',$DEF_GL_Account_ERN,$DEF_GL_Account_DED,$DEF_GL_Account_TAX)
END-SELECT               
  
  if $blank_accnt = 'N'
		print ' There are no Accounts with Blank and Default in HR Accounting Line'          (+3,10,75)
	end-if   
           
END-PROCEDURE 
!------------------------------------------------------>>> 


!------------------------------------------------------>>> 
BEGIN-PROCEDURE PRINT-HEADER-ACCOUNT-INFO

        new-page
  print 'Accounts with Blank and Default'          (+1,1,40)           center underline        
	print 'GL BUS UNIT'          (+2,1,14)           underline
	print 'MONETARY AMT'           (+0,16,14)        underline
	print 'EMPLID'                    (+0,32,9)      underline
	print 'RUN_DT'		           (+0,43,10)    underline
	print 'SEQNUM'       		   (+0,55,7)     underline
	print 'LINE_NBR'      		   (+0,64,8)     underline
	print 'ACCOUNT'       		   (+0,74,10)    underline
                                                         
END-PROCEDURE 
!------------------------------------------------------>>> 




!------------------------------------------------------>>> FDRoss <-!
! PROCEDURE: Get-account-summary                                    !
!------------------------------------------------------>>> FDRoss <-!
BEGIN-PROCEDURE GET-account-summary
	let #total-minus = 0
	let #total-plus  = 0
	let #total-records = 0
begin-select
acctg.account
acctg.line_descr
sum(monetary_amount)  &total-amount
count(*)              &total-records

	print &acctg.account          (+1,1,10)
	print &acctg.line_descr       (+0,12,30)

	if &total-amount < 0
		add &total-amount to #total-minus
	else
		add &total-amount to #total-plus
	end-if

	print &total-amount           (+0,43,12)  edit '999999999.99'
	add &total-records  to #total-records
	print &total-records          (+0,56,9)   edit '999999999'

from PS_HR_ACCTG_LINE acctg
group by acctg.account,
	 acctg.line_descr
order by acctg.account,
	 acctg.line_descr
end-select
	print 'Total Liabilities = '  (+1,23,20)
	print #total-minus            (+0,43,12)  edit '999999999.99'

	print 'Total Expenses =    '  (+1,23,20)
	print #total-plus             (+0,43,12)  edit '999999999.99'

	print 'Total Records =     '  (+1,23,20)
	print #total-records          (+0,43,9)   edit '999999999'


END-PROCEDURE          ! END PROCEDURE - Get-account-summary
!------------------------------------------------------>>> FDRoss <-!
! END PROCEDURE: Get-account-summary                                !
!------------------------------------------------------>>> FDRoss <-!




Begin-procedure select-group-z3
!----------------------------------------------------------->> FDRoss <<--*
!       Select group z3
!----------------------------------------------------------->> FDRoss <<--*

	let $first = '0'

begin-select              ! select group z3
z3.business_unit
z3.deptid
z3.company
z3.paygroup
z3.account
z3.line_descr
sum(z3.monetary_amount)  &z3.monetary_amount

	if $first = '0'
		let $first = '1'
		let $hold-business-unit = &z3.business_unit
		let $hold-deptid        = &z3.deptid
		let $hold-company       = &z3.company
		let $hold-paygroup      = &z3.paygroup
		let #paygroup-accounts = 0
		let #company-accounts  = 0
		let #deptid-accounts   = 0
		let #deptid-total      = 0
		let #company-total     = 0
		let #paygroup-total    = 0
		let #bu-accounts       = 0
		let #bu-total          = 0
	end-if

	if $hold-business-unit  <> &z3.business_unit
		do  paygroup-break
		do  company-break
		do  deptid-break
		do  bu-break
		new-page
		let $hold-business-unit = &z3.business_unit
		let $hold-deptid        = &z3.deptid
		let $hold-company       = &z3.company
		let $hold-paygroup      = &z3.paygroup
	end-if

	if $hold-deptid  <> &z3.deptid
		do  paygroup-break
		do  company-break
		do  deptid-break
		new-page
		let $hold-deptid   = &z3.deptid
		let $hold-company  = &z3.company
		let $hold-paygroup = &z3.paygroup
	end-if

	if $hold-company <> &z3.company
		do  paygroup-break
		do  company-break
		let $hold-company  = &z3.company
		let $hold-paygroup = &z3.paygroup
	end-if

	if $hold-paygroup <> &z3.paygroup
		do  paygroup-break
		let $hold-paygroup = &z3.paygroup
	end-if

	let #bu-accounts       = #bu-accounts       + 1
	let #paygroup-accounts = #paygroup-accounts + 1
	let #company-accounts  = #company-accounts  + 1
	let #deptid-accounts   = #deptid-accounts   + 1

	print &z3.business_unit         (+1,1,6)
	print &z3.deptid                (+0,8,6)
	print &z3.company               (+0,15,4)
	print &z3.paygroup              (+0,20,4)
	print &z3.account               (+0,25,10)
	print &z3.line_descr            (+0,35,30)
	print &z3.monetary_amount       (+0,66,14)    edit '999,999,999.99'

	let #bu-total             = #bu-total       + &z3.monetary_amount
	let #paygroup-total       = #paygroup-total + &z3.monetary_amount
	let #company-total        = #company-total  + &z3.monetary_amount
	let #deptid-total         = #deptid-total   + &z3.monetary_amount

from PS_HR_ACCTG_LINE z3
group by z3.business_unit, z3.deptid, z3.company, z3.paygroup, z3.account,
z3.line_descr
order by z3.business_unit, z3.deptid, z3.company, z3.paygroup, z3.account,
z3.line_descr
end-select

	do  paygroup-break
	do  company-break
	do  deptid-break
	do  bu-break
	new-page

end-procedure            ! select group z3
!----------------------------------------------------------->> FDRoss <<--*
!  End Procedure:      Select group z3
!----------------------------------------------------------->> FDRoss <<--*


!----------------------------------------------------------->> FDRoss <<--*
!      Business Unit Break
!----------------------------------------------------------->> FDRoss <<--*
Begin-procedure Bu-break
	print 'Total B/U accounts =     '          (+1,1,40)
	print #bu-accounts                         (+0,41,9)  edit '999999999'
	print 'Total Dollar Balance: '             (+0,52,24)
	print #bu-total                            (+0,76,14) edit '999,999,999.99'
	let   #bu-total    = 0
	let   #bu-accounts = 0
end-procedure

!----------------------------------------------------------->> FDRoss <<--*
!      Paygroup Break
!----------------------------------------------------------->> FDRoss <<--*
Begin-procedure Paygroup-break
	print 'Total Paygroup accounts ='          (+1,1,40)
	print #paygroup-accounts                   (+0,41,9)  edit '999999999'
	print 'Total Dollar Balance: '             (+0,52,24)
	print #paygroup-total                      (+0,76,14) edit '999,999,999.99'
	let   #paygroup-total    = 0
	let   #paygroup-accounts = 0
end-procedure
!----------------------------------------------------------->> FDRoss <<--*
!       Company Break
!----------------------------------------------------------->> FDRoss <<--*
Begin-procedure company-break
	print 'Total Company accounts = '          (+1,1,40)
	print #company-accounts                    (+0,41,9)  edit '999999999'
	print 'Total Dollar Balance: '             (+0,52,24)
	print #company-total                       (+0,76,14) edit '999,999,999.99'
	let   #company-total    = 0
	let   #company-accounts = 0
end-procedure

!----------------------------------------------------------->> FDRoss <<--*
!       Deptid Break
!----------------------------------------------------------->> FDRoss <<--*
Begin-procedure deptid-break
	print 'Total Deptid accounts = '          (+1,1,40)
	print #deptid-accounts                    (+0,41,9)  edit '999999999'
	print 'Total Dollar Balance: '            (+0,52,24)
	print #deptid-total                       (+0,76,14) edit '999,999,999.99'
	let   #deptid-total    = 0
	let   #deptid-accounts = 0
end-procedure

!GEX-MXT added for ITG#51226-Begin

Begin-procedure select-group-z5

	let $first = '0'

begin-select              ! select group z5
z5.business_unit
z5.deptid
z5.account
z5.line_descr
sum(z5.monetary_amount)  &z5.monetary_amount

	if $first = '0'
		let $first = '1'
		let $hold-business-unit = &z5.business_unit
		let $hold-deptid        = &z5.deptid
		let #deptid-accounts   = 0
		let #deptid-total      = 0
		let #bu-accounts       = 0
		let #bu-total          = 0
	end-if

	if $hold-business-unit  <> &z5.business_unit
		do  deptid-break
		do  bu-break
		new-page
		let $hold-business-unit = &z5.business_unit
		let $hold-deptid        = &z5.deptid
	end-if

	if $hold-deptid  <> &z5.deptid
		do  deptid-break
		new-page
		let $hold-deptid   = &z5.deptid
	end-if

	let #bu-accounts       = #bu-accounts       + 1
	let #deptid-accounts   = #deptid-accounts   + 1

	print &z5.business_unit         (+1,10,6)
	print &z5.deptid                (+0,18,6)
	print &z5.account               (+0,25,10)
	print &z5.line_descr            (+0,35,30)
	print &z5.monetary_amount       (+0,66,14)    edit '999,999,999.99'

	let #bu-total             = #bu-total       + &z5.monetary_amount
	let #deptid-total         = #deptid-total   + &z5.monetary_amount

from ps_hr_acctg_line z5
group by z5.business_unit, z5.deptid, z5.account, z5.line_descr
ORDER by z5.business_unit, z5.deptid, z5.account, z5.line_descr		!GEX-MXT ADDED
end-select

	do  deptid-break
	do  bu-break
	new-page

end-procedure            ! select group z5

!GEX_MXT added for ITG#51226-End

Begin-procedure select-group-z7
!----------------------------------------------------------->> FDRoss <<--*
!       Select group z7
!----------------------------------------------------------->> FDRoss <<--*

	let $first = '0'
! GEXHR_848_E122337 ISDVNPK    03/22/2012

	let #total-live-check-count = 0
  let #total-live-dollars-Amt = 0
  let #total-paper-check-count = 0
  let #total-paper-dollars-Amt = 0
  let #total-DD-check-count = 0
  let #total-DD-dollars-Amt = 0
  let #total-SDD-check-count = 0
  let #total-SDD-dollars-Amt = 0
! GEXHR_848_E122337 ISDVNPK    03/22/2012

	let #total-check = 0
	let #total-pay   = 0

begin-select 		                ! Deepak, 06/18/08. Added hint. 
/*+ ordered */           	        ! SQL runtime dropped from 15 mins to 1 sec
ax.department
ax.business_unit
bx.company
count(*)        &xx.count
sum(cx.net_pay) &xx.net_pay
! GEXHR_848_E122337 ISDVNPK    03/22/2012

 let $check-type ='C'
 do get-check-rate
 do Get-live-checks
 let $check-type ='A'
 do get-check-rate
 
  do convert-to-dtu-date($pay_end_dt,$pay_end_dt_dtu)
   do dtu-add-days($pay_end_dt_dtu,3,$range_end_dt_dtu)
   do convert-from-dtu-date($range_end_dt_dtu,$range_end_dt)
 do Get-DD-checks
  let $check-type ='M'
 do get-check-rate
 do Get-SDD-checks
 let  #total-paper-check = #total-live-check + #total-DD-check
 let  #total-paper-dollars = #total-live-dollars + #total-DD-dollars
	print &ax.department            (+1,6,8)
	print &ax.business_unit         (+0,15,5)
	print #total-paper-check                 (+0,21,6)  edit '999999'
	print #total-paper-dollars                (+0,41,8)  edit '99999.99'
	print #total-SDD-check                 (+0,62,6)  edit '999999'
	print #total-SDD-dollars                (+0,83,8)  edit '99999.99'
	print &xx.count                 (+0,105,6)  edit '999999'

	let #total-dollars = #total-live-dollars + #total-DD-dollars + #total-SDD-dollars


	print #total-dollars            (+0,120,8)  edit '99999.99'
	print &xx.net_pay               (+0,133,14) edit '999,999,999.99'

  let #total-live-check-count = #total-live-check-count + #total-live-check 
  let #total-live-dollars-Amt = #total-live-dollars-Amt + #total-live-dollars
  let #total-DD-check-count = #total-DD-check-count + #total-DD-check 
  let #total-DD-dollars-Amt = #total-DD-dollars-Amt + #total-DD-dollars
  let #total-paper-check-count = #total-paper-check-count + #total-paper-check 
  let #total-paper-dollars-Amt = #total-paper-dollars-Amt + #total-paper-dollars
  let #total-SDD-check-count = #total-SDD-check-count + #total-SDD-check 
  let #total-SDD-dollars-Amt = #total-SDD-dollars-Amt + #total-SDD-dollars
! GEXHR_848_E122337 ISDVNPK    03/22/2012

	let #total-count = #total-count + &xx.count
	let #total-pay   = #total-pay   + &xx.net_pay
	let #total-check = #total-check + #total-dollars

	print ' '                       (+1,1,1)

from ps_gex_dept_tbl ax, 
     ps_dept_tbl bx, 
     ps_pay_check cx
where 
cx.paycheck_nbr > 0
and cx.pay_end_dt = $pay_end_dt
and cx.deptid = bx.deptid
and cx.deptid = ax.deptid 
and bx.company between '001' and '999'
and bx.eff_status = 'A'
and bx.effdt = (select max(effdt)
		from ps_dept_tbl
		where bx.deptid = deptid
		and effdt <= $pay_end_Dt)
and ax.effdt = (Select max(effdt)
		from ps_gex_dept_tbl
                where deptid = ax.deptid                     !SCM  07/17/2002 added
		and effdt <= $pay_end_dt)
and not exists
	(select 'X'
	from ps_pay_oth_earns oex
	where oex.company = cx.company       
	and oex.paygroup = cx.paygroup
	and oex.off_cycle = cx.off_cycle
	and oex.page_num = cx.page_num       
	and oex.line_num = cx.line_num  
	and oex.sepchk = cx.sepchk     
	and oex.pay_end_dt = cx.pay_end_dt
	and oex.erncd = 'DDP')
group by ax.department, 
	 ax.business_unit, 
	 bx.company
order by ax.department, 
	 ax.business_unit, 
	 bx.company
end-select
! GEXHR_848_E122337 ISDVNPK    03/22/2012
	
	print 'Total'                   (+1,14,6)
	print #total-paper-check-count   (+0,19,8)  edit '99999999'
	print #total-paper-dollars-Amt   (+0,35,14) edit '999,999,999.99'
	print #total-SDD-check-count    (+0,60,8)  edit '99999999'
	print #total-SDD-dollars-Amt    (+0,77,14) edit '999,999,999.99'	
	print #total-count              (+0,103,8)  edit '99999999'
	print #total-check              (+0,114,14) edit '999,999,999.99'
	print #total-pay                (+0,133,14) edit '999,999,999.99'
! GEXHR_848_E122337 ISDVNPK    03/22/2012

end-procedure            ! select group z7
!----------------------------------------------------------->> FDRoss <<--*
!  End Procedure:      Select group z7
!----------------------------------------------------------->> FDRoss <<--*
! GEXHR_848_E122337 ISDVNPK    03/22/2012

!*******************************
begin-procedure Get-live-checks
!*******************************
  let #total-live-check = 0
	let #total-live-dollars    = 0
	let #total-paper-check = 0
	let #total-paper-dollars = 0

begin-select on-error=SQL-error
/*+ ordered */           	        ! SQL runtime dropped from 15 mins to 1 sec
lax.department
lax.business_unit 
lbx.company
count(*)        &LAx.count

  let #total-live-check = &LAx.count
	let #total-live-dollars = &LAx.count * #check-RATE

from ps_gex_dept_tbl lax, 
     ps_dept_tbl lbx, 
     ps_pay_check lcx
where 
lcx.paycheck_nbr > 0
AND lCX.PAYCHECK_OPTION in ('C','R')
and lcx.pay_end_dt = $pay_end_dt
and lax.department = &ax.department
and lax.business_unit = &ax.business_unit
and lbx.company = &bx.company
and lbx.company = lcx.company
and lcx.deptid = lbx.deptid
and lcx.deptid = lax.deptid 
!and lbx.company between '001' and '999'
and lbx.eff_status = 'A'
and lbx.effdt = (select max(effdt)
		from ps_dept_tbl
		where lbx.deptid = deptid
		and effdt <= $pay_end_Dt)
and lax.effdt = (Select max(effdt)
		from ps_gex_dept_tbl
                where deptid = lax.deptid                    
		and effdt <= $pay_end_dt)
and not exists
	(select 'X'
	from ps_pay_oth_earns loex
	where loex.company = lcx.company       
	and loex.paygroup = lcx.paygroup
	and loex.off_cycle = lcx.off_cycle
	and loex.page_num = lcx.page_num       
	and loex.line_num = lcx.line_num  
	and loex.sepchk = lcx.sepchk     
	and loex.pay_end_dt = lcx.pay_end_dt
	and loex.erncd = 'DDP')
group by lax.department, 
	 lax.business_unit, 
	 lbx.company

end-select

end-procedure

!*******************************
begin-procedure Get-DD-checks
!*******************************
  let #total-DD-check = 0
  let #total-DD-dollars  = 0

begin-select on-error=SQL-error
/*+ ordered */           	        
DAX.department
DAX.business_unit 
DBX.company
count(*)        &DAX.count

  let #total-DD-check = &DAX.count
	let #total-DD-dollars = &DAX.count * #check-RATE

from ps_gex_dept_tbl DAX, 
     ps_dept_tbl DBX, 
     ps_pay_check DCX,
     	 PS_DIRECT_DEPOSIT DDB 
where DCX.paycheck_nbr > 0
AND DCX.PAYCHECK_OPTION <> 'C'
AND DCX.PAYCHECK_OPTION <> 'R'
and DCX.pay_end_dt = $pay_end_dt
and DAX.department = &ax.department
and DAX.business_unit = &ax.business_unit
and DBX.company = &bx.company
and DBX.company = DCX.company
and DCX.deptid = DBX.deptid
and DCX.deptid = DAX.deptid 
AND DDB.EMPLID = DCX.EMPLID 
AND DDB.EFFDT = 
(SELECT MAX(DDB_ED.EFFDT) FROM PS_DIRECT_DEPOSIT DDB_ED 
WHERE DDB.EMPLID = DDB_ED.EMPLID 
AND DDB_ED.EFFDT <= $range_end_dt) 
AND DDB.SUPPR_DDP_ADVICE  ='N'
!and DBX.company between '001' and '999'
and DBX.eff_status = 'A'
and DBX.effdt = (select max(effdt)
		from ps_dept_tbl
		where DBX.deptid = deptid
		and effdt <= $pay_end_Dt)
and DAX.effdt = (Select max(effdt)
		from ps_gex_dept_tbl
                where deptid = DAX.deptid                    
		and effdt <= $pay_end_dt)
and not exists
	(select 'X'
	from ps_pay_oth_earns DOEX
	where DOEX.company = DCX.company       
	and DOEX.paygroup = DCX.paygroup
	and DOEX.off_cycle = DCX.off_cycle
	and DOEX.page_num = DCX.page_num       
	and DOEX.line_num = DCX.line_num  
	and DOEX.sepchk = DCX.sepchk     
	and DOEX.pay_end_dt = DCX.pay_end_dt
	and DOEX.erncd = 'DDP')
group by DAX.department, 
	 DAX.business_unit, 
	 DBX.company

end-select

end-procedure

!*******************************
begin-procedure Get-SDD-checks
!*******************************
  let #total-SDD-check = 0
  let #total-SDD-dollars  = 0

begin-select on-error=SQL-error
/*+ ordered */           	        
SAX.department
SAX.business_unit 
SBX.company
count(*)        &SAX.count

  let #total-SDD-check = &SAX.count
	let #total-SDD-dollars = &SAX.count * #check-RATE

from ps_gex_dept_tbl SAX, 
     ps_dept_tbl SBX, 
     ps_pay_check SCX,
     	 PS_DIRECT_DEPOSIT DDS 
where SCX.paycheck_nbr > 0
AND SCX.PAYCHECK_OPTION <> 'C'
AND SCX.PAYCHECK_OPTION <> 'R'
and SCX.pay_end_dt = $pay_end_dt
and SAX.department = &ax.department
and SAX.business_unit = &ax.business_unit
and SBX.company = &bx.company
and SBX.company = SCX.company
and SCX.deptid = SBX.deptid
and SCX.deptid = SAX.deptid 
AND DDS.EMPLID = SCX.EMPLID 
AND DDS.EFFDT = 
(SELECT MAX(DDS_ED.EFFDT) FROM PS_DIRECT_DEPOSIT DDS_ED 
WHERE DDS.EMPLID = DDS_ED.EMPLID 
AND DDS_ED.EFFDT <= $range_end_dt) 
AND DDS.SUPPR_DDP_ADVICE  <>'N'
!and SBX.company between '001' and '999'
and SBX.eff_status = 'A'
and SBX.effdt = (select max(effdt)
		from ps_dept_tbl
		where SBX.deptid = deptid
		and effdt <= $pay_end_Dt)
and SAX.effdt = (Select max(effdt)
		from ps_gex_dept_tbl
                where deptid = SAX.deptid                    
		and effdt <= $pay_end_dt)
and not exists
	(select 'X'
	from ps_pay_oth_earns SOEX
	where SOEX.company = SCX.company       
	and SOEX.paygroup = SCX.paygroup
	and SOEX.off_cycle = SCX.off_cycle
	and SOEX.page_num = SCX.page_num       
	and SOEX.line_num = SCX.line_num  
	and SOEX.sepchk = SCX.sepchk     
	and SOEX.pay_end_dt = SCX.pay_end_dt
	and SOEX.erncd = 'DDP')
group by SAX.department, 
	 SAX.business_unit, 
	 SBX.company

end-select

end-procedure

!***********************************************************************
Begin-Procedure Get-CHECK-RATE
!***********************************************************************
  let #check-RATE = 0
  	 		
Begin-Select ON-ERROR=SQL-Error
GLRT.RATE_AMOUNT
  let #check-RATE = &GLRT.RATE_AMOUNT
	 	
FROM PS_GEX_GL_CHK_RATE GLRT
WHERE GLRT.GEX_PAY_CHK_OPTION = $check-type
End-Select								 
!***********************************************************************
End-Procedure Get-CHECK-RATE
!***********************************************************************
! GEXHR_848_E122337 ISDVNPK    03/22/2012


!************************************
begin-procedure Get-Default-GroupName
!************************************

  let $DefErnGroupName = ' '
  let $DefDedGroupName = ' '
  let $DefTaxGroupName = ' '

begin-select on-error=SQL-error
ERNGRP.PYGL_GROUPNAME

  let $DefErnGroupName = &ERNGRP.PYGL_GROUPNAME

FROM PS_PYGL_ACTIVITYGP ERNGRP
   , PS_PYGL_ACTIVERNDT ERNDT
WHERE ERNGRP.COMPANY        = 'GEI' 
AND   ERNGRP.PYGL_EARN_GRP  = 'Y'
AND   ERNGRP.COMPANY        = ERNDT.COMPANY
AND   ERNGRP.PYGL_GROUPNAME = ERNDT.PYGL_GROUPNAME
AND   ERNDT.PYGL_ALLCODES   = 'Y'
AND   ERNDT.EFFDT = (SELECT MAX(ERNDT1.EFFDT) FROM PS_PYGL_ACTIVERNDT ERNDT1
                     WHERE ERNDT1.COMPANY        = ERNDT.COMPANY
                     AND   ERNDT1.PYGL_GROUPNAME = ERNDT.PYGL_GROUPNAME
                     AND   ERNDT1.EFFDT         <= $pay_end_dt)
end-select

begin-select on-error=SQL-error
DEDGRP.PYGL_GROUPNAME

  let $DefDedGroupName = &DEDGRP.PYGL_GROUPNAME

FROM PS_PYGL_ACTIVITYGP DEDGRP
   , PS_PYGL_ACTIVDEDDT DEDDT
WHERE DEDGRP.COMPANY         = 'GEI' 
AND   DEDGRP.PYGL_DEDUCT_GRP = 'Y'
AND   DEDGRP.COMPANY         = DEDDT.COMPANY
AND   DEDGRP.PYGL_GROUPNAME  = DEDDT.PYGL_GROUPNAME
AND   DEDDT.PYGL_ALLCODES    = 'Y'
AND   DEDDT.EFFDT = (SELECT MAX(DEDDT1.EFFDT) FROM PS_PYGL_ACTIVDEDDT DEDDT1
                     WHERE DEDDT1.COMPANY        = DEDDT.COMPANY
                     AND   DEDDT1.PYGL_GROUPNAME = DEDDT.PYGL_GROUPNAME
                     AND   DEDDT1.EFFDT         <= $pay_end_dt)
end-select


begin-select on-error=SQL-error
TAXGRP.PYGL_GROUPNAME

  let $DefTaxGroupName = &TAXGRP.PYGL_GROUPNAME

FROM PS_PYGL_ACTIVITYGP TAXGRP
   , PS_PYGL_ACTIVTAXDT TAXDT
WHERE TAXGRP.COMPANY        = 'GEI'
AND   TAXGRP.PYGL_TAX_GRP   = 'Y'
AND   TAXGRP.COMPANY        = TAXDT.COMPANY
AND   TAXGRP.PYGL_GROUPNAME = TAXDT.PYGL_GROUPNAME
AND   TAXDT.PYGL_ALLCODES   = 'Y'
AND   TAXDT.EFFDT = (SELECT MAX(TAXDT1.EFFDT) FROM PS_PYGL_ACTIVTAXDT TAXDT1
                     WHERE TAXDT1.COMPANY        = TAXDT.COMPANY
                     AND   TAXDT1.PYGL_GROUPNAME = TAXDT.PYGL_GROUPNAME
                     AND   TAXDT1.EFFDT         <= $pay_end_dt)
end-select

    #debug show '$DefErnGroupName ' $DefErnGroupName 
    #debug show '$DefDedGroupName ' $DefDedGroupName 
    #debug show '$DefTaxGroupName ' $DefTaxGroupName 

 do Find-ErnDefLevel-AcctCd
 let $DEF_GL_Account_ERN = $GL_Account
 do Find-DedDefLevel-AcctCd
 let $DEF_GL_Account_DED = $GL_Account
 do Find-TaxDefLevel-AcctCd 
 let $DEF_GL_Account_TAX = $GL_Account

    #debug show '$DEF_GL_Account_ERN ' $DEF_GL_Account_ERN
    #debug show '$DEF_GL_Account_DED ' $DEF_GL_Account_DED 
    #debug show '$DEF_GL_Account_TAX ' $DEF_GL_Account_TAX

end-procedure


!************************************************************************************************************
begin-procedure Find-ErnDefLevel-AcctCd 
!************************************************************************************************************

 let $AcctCd = ' '

begin-select on-error=SQL-error
ERNDEFLVL.ACCT_CD

  let $AcctCd = &ERNDEFLVL.ACCT_CD

FROM PS_PYGL_CF_CPNYLEV ERNCPLEV
   , PS_PYGL_CF_CPNYERN ERNDEFLVL
WHERE ERNCPLEV.COMPANY            = 'GEI'        
AND   ERNCPLEV.BUSINESS_UNIT      = 'STDBU'      
AND   ERNCPLEV.COMPANY_LEVEL_INDC = 'C'
AND   ERNCPLEV.EFFDT = (SELECT MAX(ERNCPLEV1.EFFDT) FROM PS_PYGL_CF_CPNYLEV ERNCPLEV1
                        WHERE ERNCPLEV1.COMPANY            = ERNCPLEV.COMPANY
                        AND   ERNCPLEV1.BUSINESS_UNIT      = ERNCPLEV.BUSINESS_UNIT
                        AND   ERNCPLEV1.DEPTID             = ERNCPLEV.DEPTID
                        AND   ERNCPLEV1.JOBCODE            = ERNCPLEV.JOBCODE
                        AND   ERNCPLEV1.POSITION_NBR       = ERNCPLEV.POSITION_NBR
                        AND   ERNCPLEV1.EMPLID             = ERNCPLEV.EMPLID
                        AND   ERNCPLEV1.EMPL_RCD           = ERNCPLEV.EMPL_RCD
                        AND   ERNCPLEV1.EFFDT             <= $pay_end_dt)
AND   ERNCPLEV.EFF_STATUS = 'A'
AND   ERNDEFLVL.COMPANY           = ERNCPLEV.COMPANY
AND   ERNDEFLVL.BUSINESS_UNIT     = ERNCPLEV.BUSINESS_UNIT
AND   ERNDEFLVL.DEPTID            = ERNCPLEV.DEPTID
AND   ERNDEFLVL.JOBCODE           = ERNCPLEV.JOBCODE
AND   ERNDEFLVL.POSITION_NBR      = ERNCPLEV.POSITION_NBR
AND   ERNDEFLVL.EMPLID            = ERNCPLEV.EMPLID
AND   ERNDEFLVL.EMPL_RCD          = ERNCPLEV.EMPL_RCD
AND   ERNDEFLVL.EFFDT             = ERNCPLEV.EFFDT
AND   ERNDEFLVL.PYGL_GROUPNAME    = $DefErnGroupName
end-select

 do Get-Acct-Cd-Data

end-procedure

!************************************************************************************************************
begin-procedure Find-DedDefLevel-AcctCd 
!************************************************************************************************************

 let $AcctCd = ' '

begin-select on-error=SQL-error
DEDDEFLVL.ACCT_CD

  let $AcctCd = &DEDDEFLVL.ACCT_CD

FROM PS_PYGL_CF_CPNYLEV DEDCPLEV
   , PS_PYGL_CF_CPNYDED DEDDEFLVL
WHERE DEDCPLEV.COMPANY            = 'GEI' 
AND   DEDCPLEV.BUSINESS_UNIT      = 'STDBU'        
AND   DEDCPLEV.COMPANY_LEVEL_INDC = 'C'
AND   DEDCPLEV.EFFDT = (SELECT MAX(DEDCPLEV1.EFFDT) FROM PS_PYGL_CF_CPNYLEV DEDCPLEV1
                        WHERE DEDCPLEV1.COMPANY            = DEDCPLEV.COMPANY
                        AND   DEDCPLEV1.BUSINESS_UNIT      = DEDCPLEV.BUSINESS_UNIT
                        AND   DEDCPLEV1.DEPTID             = DEDCPLEV.DEPTID
                        AND   DEDCPLEV1.JOBCODE            = DEDCPLEV.JOBCODE
                        AND   DEDCPLEV1.POSITION_NBR       = DEDCPLEV.POSITION_NBR
                        AND   DEDCPLEV1.EMPLID             = DEDCPLEV.EMPLID
                        AND   DEDCPLEV1.EMPL_RCD           = DEDCPLEV.EMPL_RCD
                        AND   DEDCPLEV1.EFFDT             <= $pay_end_dt)
AND   DEDCPLEV.EFF_STATUS = 'A'
AND   DEDDEFLVL.COMPANY           = DEDCPLEV.COMPANY
AND   DEDDEFLVL.BUSINESS_UNIT     = DEDCPLEV.BUSINESS_UNIT
AND   DEDDEFLVL.DEPTID            = DEDCPLEV.DEPTID
AND   DEDDEFLVL.JOBCODE           = DEDCPLEV.JOBCODE
AND   DEDDEFLVL.POSITION_NBR      = DEDCPLEV.POSITION_NBR
AND   DEDDEFLVL.EMPLID            = DEDCPLEV.EMPLID
AND   DEDDEFLVL.EMPL_RCD          = DEDCPLEV.EMPL_RCD
AND   DEDDEFLVL.EFFDT             = DEDCPLEV.EFFDT
AND   DEDDEFLVL.PYGL_GROUPNAME    = $DefDedGroupName
end-select

 do Get-Acct-Cd-Data

end-procedure


!************************************************************************************************************
begin-procedure Find-TaxDefLevel-AcctCd 
!************************************************************************************************************

  let $AcctCd = ' '

begin-select on-error=SQL-error
TAXDEFLVL.ACCT_CD

  let $AcctCd = &TAXDEFLVL.ACCT_CD

FROM PS_PYGL_CF_CPNYLEV TAXCPLEV
   , PS_PYGL_CF_CPNYTAX TAXDEFLVL
WHERE TAXCPLEV.COMPANY            = 'GEI'  
AND   TAXCPLEV.BUSINESS_UNIT      = 'STDBU'     
AND   TAXCPLEV.COMPANY_LEVEL_INDC = 'C'
AND   TAXCPLEV.EFFDT = (SELECT MAX(TAXCPLEV1.EFFDT) FROM PS_PYGL_CF_CPNYLEV TAXCPLEV1
                        WHERE TAXCPLEV1.COMPANY            = TAXCPLEV.COMPANY
                        AND   TAXCPLEV1.BUSINESS_UNIT      = TAXCPLEV.BUSINESS_UNIT
                        AND   TAXCPLEV1.DEPTID             = TAXCPLEV.DEPTID
                        AND   TAXCPLEV1.JOBCODE            = TAXCPLEV.JOBCODE
                        AND   TAXCPLEV1.POSITION_NBR       = TAXCPLEV.POSITION_NBR
                        AND   TAXCPLEV1.EMPLID             = TAXCPLEV.EMPLID
                        AND   TAXCPLEV1.EMPL_RCD           = TAXCPLEV.EMPL_RCD
                        AND   TAXCPLEV1.EFFDT             <= $pay_end_dt)
AND   TAXCPLEV.EFF_STATUS = 'A'
AND   TAXDEFLVL.COMPANY           = TAXCPLEV.COMPANY
AND   TAXDEFLVL.BUSINESS_UNIT     = TAXCPLEV.BUSINESS_UNIT
AND   TAXDEFLVL.DEPTID            = TAXCPLEV.DEPTID
AND   TAXDEFLVL.JOBCODE           = TAXCPLEV.JOBCODE
AND   TAXDEFLVL.POSITION_NBR      = TAXCPLEV.POSITION_NBR
AND   TAXDEFLVL.EMPLID            = TAXCPLEV.EMPLID
AND   TAXDEFLVL.EMPL_RCD          = TAXCPLEV.EMPL_RCD
AND   TAXDEFLVL.EFFDT             = TAXCPLEV.EFFDT
AND   TAXDEFLVL.PYGL_GROUPNAME    = $DefTaxGroupName
end-select

 do Get-Acct-Cd-Data

end-procedure

!*******************************
begin-procedure Get-Acct-Cd-Data
!*******************************
  let $GL_Account = ' '

   #debug show '$AcctCd ' $AcctCd

begin-select on-error=SQL-error
ACCT_CD2.ACCOUNT

   let $GL_Account        = &ACCT_CD2.ACCOUNT

FROM PS_ACCT_CD_TBL ACCT_CD2
WHERE ACCT_CD2.ACCT_CD = $AcctCd
end-select

end-procedure




!----------------------------------------------------------->> FDRoss <<--*
! DO CALLED SQC PROCEDURES                                          !
!------------------------------------------------------>>> FDRoss <-!
#include 'reset.sqc'     ! END OF PROGRAM
#include 'curdttim.sqc'  ! GET-CURRENT-DATETIME PROCEDURE
#include 'datetime.sqc'  ! ROUTINES FOR DATE AND TIME FORMATTING
#include 'number.sqc'    ! ROUTINES TO FORMAT NUMBERS
#include 'prcsapi.sqc'   ! UPDATE PROCESS REQUEST API
#include 'prcsdef.sqc'   ! UPDATE PROCESS REQUEST VARIABLE DECLARE
#include 'tranctrl.sqc'  ! ROUTINES FOR PLATFORM DATABASE PROCESSING
#include 'datemath.sqc'  ! DOES THE DATE-MATH FUNCTIONS
#include 'stdapi.sqc'    ! GET RUN CONTROL
#include 'askaod.sqc'    ! ASK-AS-OF-DATE PROCEDURE
#include 'gexxx922.sqc'  ! GET GEX_RC_PAY RUN CONTROLS
