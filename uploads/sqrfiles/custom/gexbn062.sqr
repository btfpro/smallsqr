!***********************************************************************
! GEXBN062:  Cobra Administration Report                               *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *        
! GEXBN062 :		Cobra Administration Report                            *
!                                                                      *        
! Narrative:		This report shows employee information of              *
!			terminated employees.                                            *
!                                                                      *
! #Debugx Used:		#debug9 paragraph trace                              *
!			#debug8 key variable values                                      *
!			#debug7 data returned from sql calls                             * 
!                                                                      *  
! SQL Tables:		ben_prog_partic                                        *
!                       health_benefit                                 *
!                       personal_data                                  *
!                       job                                            *
!                                                                      *
! Written by:		Abhishek Gupta                                         *       
!                                                                      *
! Normally Run:		Monthly                                              *
!                                                                      *
! Control Parms:	FOR WHERE CLAUSE:                                    *
!			Multiple Benefit Programs                                        *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
! INITIALS	DATE		DESCRIPTION OF THE CHANGE                          *
!***********************************************************************
! AXG		09/21/10	Initial Creation(Cloned from GEXBN014)               *
! RKK		03/17/11	Corrected spacing on report                          *
!***********************************************************************

#Include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and Page-Size Initialization (Portrait)

#Define #column1  001
#Define #column2  030
#Define #column3  059
#Define #column14  75
#Define #column15  71
#Define #column6  85 
#Define #column9  97 
#Define #column10 109 
#Define #column11 119
#Define #column7  129
#Define #column13 139
#Define #column8  144
#Define #column16 152
#Define #column4  157
#Define #column5  167
#Define #column17  1                                   
#Define #column18  25                                   
#Define #column19  65                                   
#Define #column20  90
#Define #column21  110
#Define #column22  125

Begin-Setup

Declare-layout p9
	paper-size= (14, 8.5)
	max-columns = 220
	max-lines  = 50
	ORIENTATION     =   LANDSCAPE
	left-margin=0
	top-margin = 0.1
	line-height= 9              
  char-width= 3.2 
  	
End-Declare

Declare-Report p9
	layout=p9
End-Declare

create-array name=DependentID  size=500000	
Field=DependentID:Char

create-array name=Distinct_Dependent  size=500000	
Field=DependentID:Char

 
End-Setup

Begin-Report
use-report p9

#debug9 Show 'Begin-Report'

  Do P100-Initialization
  Do P200-Main-Process
  Do P300-Finalization
End-Report


Begin-Heading 7
#Debug9 Show 'Begin-Heading'
  
Do GEXXX951-Select-Oracle-Instance
 
Print 'Oracle DB:'                (0,1)   
Print $GEXXX951_Oracle_Instance   (0,13)  
Print '            '    (0,1)
Print 'PeopleSoft HCM 9.0'      (,80)   !       center
Print 'Report ID:  '    (+1,1)
Print $ReportID         ()
uppercase $ReportTitle
Print $ReportTitle      (,68)         ! center
Let #RptCol = {ColR} - 2
page-number             (1,140)  'Page No.  '
Print 'Run Date: '       (+1,140)
Print $ReportDate       (,+1)
Print 'Run Time: '       (+1,140)
Print $ReportTime       (,+1)

Print 'Benefit Program: '     (3,1)
Print $Save_Benefit_Program   (,19)

Let $X000_temp_out = 'Pay End Dt: ' || $last_pay_end_dt

Print $X000_temp_out         (3,80)  !Center

Print 'RECENT'           (+3,{#column4})
Print 'HOME ADDRESS'     (+0,{#column2})
Print 'COVERAGE'         (+0,{#column5})
Print 'EMPL'             (+0,{#column6})
Print 'COVERAGE'         (+0,{#column7})
Print 'BENEF'            (+0,{#column8})
Print 'BEN TERM'         (+0,{#column9})
Print 'LAST DAY'         (+0,{#column10})
Print 'TERM  '           (+0,{#column11})
Print 'COVG'             (+0,{#column13})
Print 'EMPL'             (+0,{#column14})
Print 'EMP'              (+0,{#column15})
Print 'DEP'              (+0,{#column16})

Print 'EMPL NAME'        (+1,{#column1})
Print 'AND PHONE'        (+0,{#column2})
Print 'SSN'              (+0,{#column3})
Print 'HIRE DT'          (+0,{#column4})
Print 'ELECT DT'         (+0,{#column5})
Print 'STATUS'           (+0,{#column6})
Print 'BEGIN DT'         (+0,{#column7})
Print 'PLAN '            (+0,{#column8})
Print 'REASON '          (+0,{#column9})
Print 'WORKED '          (+0,{#column10})
Print 'DATE '            (+0,{#column11})
Print 'CODE'             (+0,{#column13})
Print 'BIRTHDATE'        (+0,{#column14})
Print 'SEX '             (+0,{#column15})
Print 'ID '              (+0,{#column16})

End-Heading

!*****************************************************************
Begin-Procedure P100-Initialization
!*****************************************************************
#debug9 Show 'P100-Initialization'

Do Init-DateTime           !datetime.sqc
Do Init-Number             !number.sqc
Do Get-Current-DateTime    !curdttim.sqc
Do Stdapi-Init             !stdapi.sqc

Let $ReportID      = 'GEXBN062'
Let $ReportTitle   = 'Termination List for Cobra Administration'

Show '$ReportID    = ' $ReportID
Show '$ReportTitle = ' $ReportTitle
Show '$ReportDate  = ' $ReportDate
Show '$ReportTime  = ' $ReportTime

Let $GEXXX911_Benefit_Program_Alias = 'bpp.benefit_program'
Let $GEXXX911_Plan_Type_Alias       = '1'
Let $GEXXX911_Benefit_Plan_Alias    = '1'
Let $GEXXX912_Plan_Type_Alias       = 'B.PLAN_TYPE'

If $prcs_process_instance = ''
  Do P110-SQRW-Run-Controls
Else
  Do P120-Process-Scheduler-Run-Controls
  Let $GEXXX912_Plan_Type_Alias       = 'HB.PLAN_TYPE'
  Do GEXXX912-Select-Benefit-Plan-Parameters
  Let $Health_Benefit_Plan = $GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA 
  Let $GEXXX912_Plan_Type_Alias       = 'HB1.PLAN_TYPE'
  Do GEXXX912-Select-Benefit-Plan-Parameters
   Let $Health_1_Benefit_Plan = $GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA 
  #debug9 Show  $Health_Benefit_Plan
  Let $GEXXX912_Plan_Type_Alias       = 'FB.PLAN_TYPE'
  Do GEXXX912-Select-Benefit-Plan-Parameters
  Let $FSA_Benefit_Plan = $GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA 
  Let $GEXXX912_Plan_Type_Alias       = 'FB1.PLAN_TYPE'
  Do GEXXX912-Select-Benefit-Plan-Parameters
  Let $FSA_1_Benefit_Plan = $GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA 
  #debug9 Show  $FSA_Benefit_Plan 
  Let $GEXXX912_Plan_Type_Alias       = 'LIFB.PLAN_TYPE'
  Do GEXXX912-Select-Benefit-Plan-Parameters
  Let $Life_ADD_Benefit_Plan = $GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA 
  Let $GEXXX912_Plan_Type_Alias       = 'LIFB1.PLAN_TYPE'
  Do GEXXX912-Select-Benefit-Plan-Parameters
  Let $Life_ADD_1_Benefit_Plan = $GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA 
  
End-If

Let $X000_Order_By = 'Benefit Program, Name'

Do Format-DateTime($FromDate, $FromDate_MDY, {DEFMDY}, '', '')
Do Format-DateTime($ThruDate, $ThruDate_MDY, {DEFMDY}, '', '')

Do P130-Print-Cover-Page
Do P140-Get-Xlat-Lookup

End-Procedure
!*****************************************************************
Begin-Procedure P110-SQRW-Run-Controls
!*****************************************************************
#debug9 Show 'P110-SQRW-Run-Controls'

  Let $BenefitProgramString = ''''
  Display 'Enter Benefit Program or leave blank to exit.'
  While 1=1
    Input $In-Benefit-Program Maxlen=3 'Benefit Program'
    Uppercase $In-Benefit-Program
    If Rtrim($In-Benefit-Program, ' ') = ''
      Concat '''' With $BenefitProgramString
      Break
    End-If
    If $BenefitProgramString <> ''''
      Concat ''',''' With $BenefitProgramString
    End-If
    Concat $In-Benefit-Program With $BenefitProgramString
  End-While

  Let $X000_WHERE_SELECT_ASOFDATE = $asoftoday

  Do P150-Get-Last-Pay-End-Dt
  
  If $BenefitProgramString = ''''''
    Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA = '1=1'
    Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA = $GEXXX911_Benefit_Program_Alias || ' In (' || $BenefitProgramString || ')'
    Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_DISPLAY_CRITERIA = $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA
  End-If

End-Procedure
!*****************************************************************
Begin-Procedure P120-Process-Scheduler-Run-Controls
!*****************************************************************
#debug9 Show 'P120-Process-Scheduler-Run-Controls'

Do GEXRCBN1-SELECT-PARAMETERS

Let $X000_WHERE_SELECT_ASOFDATE = $GEX_RC_BEN.ASOFDATE

If Rtrim($X000_WHERE_SELECT_ASOFDATE, ' ') = '' 
   Let $X000_WHERE_SELECT_ASOFDATE = $ASOFtoday
End-If

Do P150-Get-Last-Pay-End-Dt

Do GEXXX911-Select-Benefit-Program-Parameters

End-Procedure
!*****************************************************************
Begin-Procedure P130-Print-Cover-Page
!*****************************************************************
#debug9 Show 'P130-Print-Cover-Page'

Print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'            (+5,1)
Print '$Prcs_OprID          ='                                  (+2,5)
Print $Prcs_OprID                                               (0,+2)
Print '$Prcs_Run_Cntl_ID    ='                                  (+1,5)
Print $Prcs_Run_Cntl_ID                                         (0,+2)

Print 'SELECTION CRITERIA FOR THIS REPORT RUN:'                 (+5,2)
Print 'Pay End Dt :'                                            (+2,5)
Print $last_pay_end_dt                                          (+0,+2)
Print '$GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA:'             (+2,5)
Print $GEXXX911_INCLUDE_BENEFIT_PROGRAM_DISPLAY_CRITERIA        (+0,+2)

Print 'SORT ORDER FOR THIS REPORT RUN:'                         (+5,2)
Print $X000_Order_By                                            (+2,5)

Let #PAGE-COUNT = 0
New-Page 

End-Procedure
!*****************************************************************
Begin-Procedure P140-Get-Xlat-Lookup
!*****************************************************************
#debug9 Show 'P140-Get-Xlat-Lookup'

Let $Where='     X.FIELDNAME   = ''EMPL_STATUS'''        ||
           ' AND X.EFF_STATUS  = ''A'''                  ||
           ' AND X.EFFDT       = '                       ||
               '(SELECT MAX(EFFDT)'                      ||
               ' FROM   PSXLATITEM X1'                    ||	
               ' WHERE  X1.FIELDNAME   = X.FIELDNAME'    ||

               ' AND    X1.FIELDVALUE  = X.FIELDVALUE'   ||
               ' AND    X1.EFFDT      <= ''' || $last_pay_end_dt || '''' ||
               ' AND    X1.EFF_STATUS  = ''A'')'

Load-Lookup
  Name=XlatLookup
  Rows=10
  Table='PSXLATITEM X'	
  Key='X.FIELDVALUE'
  Return_Value='X.XLATSHORTNAME'
  Where=$Where
  Quiet

End-Procedure
!*****************************************************************
Begin-Procedure P150-Get-Last-Pay-End-Dt
!*****************************************************************
sHOW 'x000_where_select_asofdate :'$x000_where_select_asofdate
#debug9 Show 'P150-Get-Last-Pay-End-Dt'
Begin-Select
PCAL.PAY_END_DT &last_pay_end_dt
PCAL.PAY_BEGIN_dT &pay_begin_Dt
 
  Let $last_pay_end_dt = &last_pay_end_dt
  Let $pay_begin_dt = &pay_begin_dt
  

  do convert-to-dtu-date($pay_begin_dt,$pay_begin_dt_dtu)
  do dtu-add-days($pay_begin_dt_dtu,30,$range_end_dt_dtu)
  do convert-from-dtu-date($range_end_dt_dtu,$range_end_Dt)
  #debug9 Show  'Pay Begin Dt: ' $pay_begin_dt_dtu
  #debug9 Show  'Range End Dt:'  $range_end_dt

FROM   PS_PAY_CALENDAR@hrprd90  PCAL

WHERE  PCAL.COMPANY           = 'GEI'
AND    PCAL.PAYGROUP          = 'RET'
AND    PCAL.PAY_END_DT        =
      (SELECT MAX(PAY_END_DT)
       FROM   PS_PAY_CALENDAR@hrprd90 
       WHERE  COMPANY         = 'GEI'
       AND    PAYGROUP        = 'RET'
       AND    PAY_CONFIRM_RUN   = 'Y'
       AND    PAY_END_DT      <= $x000_where_select_asofdate)
End-Select

End-Procedure
!*****************************************************************
Begin-Procedure P160-Get-First-Pay-End-Dt
!*****************************************************************
#debug9 Show 'P160-Get-First-Pay-End-Dt'

Begin-Select Distinct
PAY_BEGIN_DT &first_pay_begin_dt
PAY_END_DT   &first_pay_end_dt

  Let $first_pay_begin_dt = &first_pay_begin_dt
  Let $first_pay_end_dt   = &first_pay_end_dt
  Let $FromDate           = &first_pay_begin_dt 

FROM   PS_PAY_CALENDAR@hrprd90 

WHERE  PAY_END_DT              =
      (SELECT MAX(PAY_END_DT)
       FROM   PS_PAY_CALENDAR@hrprd90 
       WHERE  COMPANY          = 'GEI'
       AND    PAYGROUP         = 'RET'
       AND    PAY_END_DT      <= $last_pay_end_dt
       AND    PAY_PERIOD       = '1'
       AND    PAY_CONFIRM_RUN  = 'Y')
AND    PAY_CONFIRM_RUN         = 'Y'
End-Select

End-Procedure
!*****************************************************************
Begin-Procedure P200-Main-Process
!*****************************************************************
#debug9 Show 'P200-Main-Process'

display $last_pay_end_dt
display $pay_begin_dt
  Let #address_line = 2
  Let #bplan_line = 0
  
Begin-Select Distinct
BPP.BENEFIT_PROGRAM  ()  On-Break
                         Level=1
                         Print=Never
                         Save=$Save_Benefit_Program
                         After=P210-After-Benefit-Program-Break

J.FULL_PART_TIME
J.EFFDT
J.COMPANY
J.DEPTID
J.EMPLID
J.EMPL_RCD
J.EMPL_STATUS
PD.NAME
PD.ADDRESS1
PD.ADDRESS2
PD.CITY
PD.STATE
PD.POSTAL
J.ACTION
J.ACTION_REASON
INST.ORIG_HIRE_DT
J.LAST_DATE_WORKED
J.TERMINATION_DT
PD.BIRTHDATE
PD.SEX
J.LAST_HIRE_DT

  Let $Data-Found-Flag = 'Y'
  Let $Action = &j.action
  Let $Action_Reason = &j.action_reason
  Let $Employee_Sex = &pd.sex
  Do Get-Person-Phone
  Do Get-Action-Reason
  Do select-health-record
  Do Write-Dependent


FROM  PS_PERSONAL_DATA@hrprd90    PD,
      PS_JOB@hrprd90             J,
      PS_PER_ORG_INST@hrprd90  	INST,	
      PS_BEN_PROG_PARTIC@hrprd90  BPP

WHERE PD.EMPLID              = J.EMPLID
AND   J.EMPLID		     =	INST.EMPLID	
AND INST.EMPLID 	     = PD.EMPLID	
AND   INST.PER_ORG           = 'EMP'		
AND   INST.ORG_INSTANCE_ERN  = J.EMPL_RCD	
AND   BPP.EMPLID             = J.EMPLID
AND   BPP.EMPL_RCD          = J.EMPL_RCD
AND  ( EXISTS
     (SELECT NULL
      FROM   PS_HEALTH_BENEFIT@hrprd90  HB
      WHERE  HB.EMPLID            = BPP.EMPLID
      AND    HB.EMPL_RCD         = BPP.EMPL_RCD
      AND    HB.COBRA_EVENT_ID    = BPP.COBRA_EVENT_ID
      AND [$Health_Benefit_plan] 
      AND    HB.COVERAGE_ELECT    = 'T'
      AND    ((HB.COVERAGE_ELECT_DT BETWEEN $pay_begin_dt AND $last_pay_end_Dt
              and hb.coverage_begin_Dt < $pay_begin_dt)
              or (hb.coverage_begin_dt between $pay_begin_dt and $range_end_dt)))

OR  EXISTS                                                   
     (SELECT NULL
      FROM   PS_FSA_BENEFIT@hrprd90  FB
      WHERE  FB.EMPLID            = BPP.EMPLID
      AND    FB.EMPL_RCD         = BPP.EMPL_RCD
      AND    FB.COBRA_EVENT_ID    = BPP.COBRA_EVENT_ID
      AND [$FSA_Benefit_plan]
      AND    FB.COVERAGE_ELECT    = 'T'
      AND    ((FB.COVERAGE_ELECT_DT BETWEEN $pay_begin_dt and $last_pay_end_Dt
              and fb.coverage_begin_Dt < $pay_begin_dt)
              or (fb.coverage_begin_dt between $pay_begin_dt and $range_end_dt)))


OR  EXISTS                                                   
     (SELECT NULL
      FROM   PS_LIFE_ADD_BEN@hrprd90  LIFB
      WHERE  LIFB.EMPLID            = BPP.EMPLID
      AND    LIFB.EMPL_RCD         = BPP.EMPL_RCD
      AND [$Life_ADD_Benefit_Plan]
      AND    LIFB.COVERAGE_ELECT    = 'T'
      AND    ((LIFB.COVERAGE_ELECT_DT BETWEEN $pay_begin_dt and $last_pay_end_Dt
              and LIFB.coverage_begin_Dt < $pay_begin_dt)
              or (LIFB.coverage_begin_dt between $pay_begin_dt and $range_end_dt))))   
              
And  [$GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA]
AND  BPP.EFFDT = (SELECT MAX(EFFDT)
                    FROM PS_BEN_PROG_PARTIC@hrprd90 
                   WHERE EMPLID = BPP.EMPLID
                     AND EMPL_RCD = BPP.EMPL_RCD
                     AND EFFDT <= $LAST_PAY_END_DT)
AND  J.EFFDT = (SELECT MAX(EFFDT)
                  FROM PS_JOB@hrprd90 
                 WHERE EMPLID = J.EMPLID
                   AND EMPL_RCD = J.EMPL_RCD
                   AND EFFDT <= $LAST_PAY_END_DT)
AND  J.EFFSEQ = (SELECT MAX(EFFSEQ)
                   FROM PS_JOB@hrprd90 
                  WHERE EMPLID = J.EMPLID
                    AND EMPL_RCD = J.EMPL_RCD
                    AND EFFDT = J.EFFDT)
 
ORDER BY BPP.BENEFIT_PROGRAM, PD.NAME
End-Select

#Debug8 Show 'Pay Begin Date : ' $pay_begin_dt ' Last Pay End date : ' $last_pay_end_Dt ' Pay Begin date : '$pay_begin_dt ' Range End dt :' $range_end_dt
              
End-Procedure
!*****************************************************************
Begin-Procedure select-health-record
!*****************************************************************
#debug9 Show 'Entering Procedure select-health-record.'
!Do Get-FSA-Elect
Let #Dep_Count = 0
Let $employee_Print = 'Y'
Begin-Select
HB1.PLAN_TYPE 
HB1.COVERAGE_BEGIN_DT
HB1.COVERAGE_ELECT_DT
 
 	If (&hb1.plan_type ='60' or &hb1.plan_type='6Z')        
   		Do  select-prev-benefitfsa-plan    
                      
 	Else                                                    
 		If Substr(&hb1.plan_type,1,1) = '2'
 			do select-prev-Life-benefit-plan
 		Else
 	
	   		do select-prev-benefit-plan                           
		End-if
 	End-If
   
   	Do P220-Print-Record
	If Substr(&hb1.plan_type,1,1) = '2'
 		!Do Get-Life-Dependents
 	Else
 	
	    	Do Get-Health-Dependents                          
	End-if     
  
   
FROM PS_HEALTH_BENEFIT@hrprd90  HB1
WHERE HB1.EMPLID = &J.EMPLID
AND HB1.EMPL_RCD = &J.EMPL_RCD
AND [$Health_1_Benefit_plan]
AND HB1.COVERAGE_ELECT = 'T'
AND ((HB1.COVERAGE_ELECT_DT BETWEEN $pay_begin_dt AND $last_pay_end_dt
     AND HB1.COVERAGE_BEGIN_DT < $pay_begin_dt)
     OR (HB1.COVERAGE_BEGIN_DT BETWEEN $pay_begin_dt AND $range_end_dt))
UNION SELECT                                            
FB1.PLAN_TYPE ,                                              
FB1.COVERAGE_BEGIN_DT,                                       
FB1.COVERAGE_ELECT_DT                                        
FROM PS_FSA_BENEFIT@hrprd90  FB1                                      
WHERE FB1.EMPLID = &J.EMPLID                                 
AND FB1.EMPL_RCD = &J.EMPL_RCD
AND [$FSA_1_Benefit_Plan]
AND FB1.COVERAGE_ELECT = 'T'
  AND   ((FB1.COVERAGE_ELECT_DT BETWEEN $pay_begin_dt AND $last_pay_end_dt
              AND FB1.COVERAGE_BEGIN_DT < $pay_begin_dt)
              OR (FB1.COVERAGE_BEGIN_DT BETWEEN $pay_begin_dt and $range_end_dt)) 
UNION SELECT                                            
LIFB1.PLAN_TYPE ,                                              
LIFB1.COVERAGE_BEGIN_DT,                                       
LIFB1.COVERAGE_ELECT_DT                                        
FROM PS_LIFE_ADD_BEN@hrprd90  LIFB1                                      
WHERE LIFB1.EMPLID = &J.EMPLID                                 
AND LIFB1.EMPL_RCD = &J.EMPL_RCD
AND [$Life_ADD_1_Benefit_Plan]
AND LIFB1.COVERAGE_ELECT = 'T'
  AND   ((LIFB1.COVERAGE_ELECT_DT BETWEEN $pay_begin_dt AND $last_pay_end_dt
              AND LIFB1.COVERAGE_BEGIN_DT < $pay_begin_dt)
              OR (LIFB1.COVERAGE_BEGIN_DT BETWEEN $pay_begin_dt and $range_end_dt))     
     
ORDER BY PLAN_TYPE 
End-Select

#debug9 Show 'Exiting Procedure select-health-record.'

End-Procedure
!*****************************************************************
Begin-Procedure select-prev-benefit-plan
!*****************************************************************
#debug9 Show 'select-prev-benefit-plan'

Let $prev_benefit_plan = ' '
Let $Coverage_Code = ''
Let #Fsa_Annual_Pledge = 0
Begin-Select
HB2.BENEFIT_PLAN
HB2.COVRG_CD
HB2.EFFDT


   Let $Coverage_Code = &hb2.covrg_cd
   Let $Hlth_Benefit_Effdt = &hb2.effdt
  move &hb2.benefit_plan to $prev_benefit_plan

FROM PS_HEALTH_BENEFIT@hrprd90  HB2
WHERE HB2.EMPLID = &J.EMPLID
AND HB2.EMPL_RCD = &J.EMPL_RCD
AND HB2.PLAN_TYPE = &HB1.PLAN_TYPE
AND HB2.COVERAGE_ELECT <> 'T'
AND HB2.COVERAGE_BEGIN_DT = (SELECT MAX(COVERAGE_BEGIN_DT)
                               FROM PS_HEALTH_BENEFIT@hrprd90 
                              WHERE EMPLID = HB2.EMPLID
                                AND EMPL_RCD = HB2.EMPL_RCD
                                AND PLAN_TYPE = &HB1.PLAN_TYPE
                                AND COVERAGE_ELECT <> 'T'
                                AND COVERAGE_BEGIN_DT <= &HB1.COVERAGE_BEGIN_DT)
End-Select

End-Procedure
!*****************************************************************
Begin-Procedure select-prev-Life-benefit-plan
!*****************************************************************
#debug9 Show 'select-prev-Life-benefit-plan'

Let $Coverage_Code = ''
Let $prev_benefit_plan = ' '
Let #Fsa_Annual_Pledge = 0
Begin-Select
LIFB2.BENEFIT_PLAN
LIFB2.EFFDT


   Let $Hlth_Benefit_Effdt = &LIFB2.effdt
  move &LIFB2.benefit_plan to $prev_benefit_plan
  #debug9 Show '$Life ADD prev_benefit_plan :'$prev_benefit_plan ' &HB1.PLAN_TYPE :'&HB1.PLAN_TYPE ' HB1.COVERAGE_BEGIN_DT :  '&HB1.COVERAGE_BEGIN_DT

FROM PS_LIFE_ADD_BEN@hrprd90  LIFB2
WHERE LIFB2.EMPLID = &J.EMPLID
AND LIFB2.EMPL_RCD = &J.EMPL_RCD
AND LIFB2.PLAN_TYPE = &HB1.PLAN_TYPE
AND LIFB2.COVERAGE_ELECT <> 'T'
AND LIFB2.COVERAGE_BEGIN_DT = (SELECT MAX(COVERAGE_BEGIN_DT)
                               FROM PS_LIFE_ADD_BEN@hrprd90 
                              WHERE EMPLID = LIFB2.EMPLID
                                AND EMPL_RCD = LIFB2.EMPL_RCD
                                AND PLAN_TYPE = &HB1.PLAN_TYPE
                                AND COVERAGE_ELECT <> 'T'
                                AND COVERAGE_BEGIN_DT <= &HB1.COVERAGE_BEGIN_DT)
End-Select

End-Procedure Select-prev-Life-benefit-plan
!*****************************************************************
Begin-Procedure select-prev-benefitfsa-plan          
!*****************************************************************
#debug9 Show 'select-prev-benefitfsa-plan'

Let $Coverage_Code = ''
Let $prev_benefit_plan = ' '
Let #Fsa_Annual_Pledge  = 0
Begin-Select
FB2.BENEFIT_PLAN
FB2.COVERAGE_ELECT
FB2.ANNUAL_PLEDGE

  
  move &fb2.benefit_plan to $prev_benefit_plan
  Let #Fsa_Annual_Pledge  = &FB2.ANNUAL_PLEDGE

FROM PS_FSA_BENEFIT@hrprd90  FB2
WHERE FB2.EMPLID = &J.EMPLID
AND FB2.EMPL_RCD = &J.EMPL_RCD
AND FB2.PLAN_TYPE = &HB1.PLAN_TYPE
AND FB2.COVERAGE_ELECT <> 'T'
AND FB2.COVERAGE_BEGIN_DT = (SELECT MAX(COVERAGE_BEGIN_DT)
                               FROM PS_FSA_BENEFIT@hrprd90 
                              WHERE EMPLID = FB2.EMPLID
                                AND EMPL_RCD = FB2.EMPL_RCD
                                AND PLAN_TYPE = &HB1.PLAN_TYPE
                                AND COVERAGE_ELECT <> 'T'
                                AND COVERAGE_BEGIN_DT <= &HB1.COVERAGE_BEGIN_DT)
End-Select

End-Procedure                                        
!*****************************************************************
Begin-Procedure P210-After-Benefit-Program-Break
!*****************************************************************

#debug9 Show 'P210-After-Benefit-Program-Break'
  New-Page
  Let #address_line = 2 
  Let #bplan_line = 0

End-Procedure
!*****************************************************************
Begin-Procedure P220-Print-Record
!*****************************************************************
#debug9 Show 'P220-Print-Record'
!Show '$employee_Print :'$employee_Print
 Let $elect_dt = edit(&hb1.coverage_elect_dt,'mm/dd/yy') 
 Let $begin_dt = edit(&hb1.coverage_begin_dt,'mm/dd/yy') 
 Let $Last_day_Worked = edit(&j.last_date_worked,'mm/dd/yy') 
 Let $Termination_Dt = edit(&j.termination_dt,'mm/dd/yy') 
 Let $Employee_Birthdate =edit(&pd.birthdate,'mm/dd/yy')  
  
 If $employee_Print = 'Y'
 	Let $orig_hire_dt = edit(&j.last_hire_dt,'mm/dd/yy') 
 	Let $Address3 = Rtrim(&pd.city, ' ') || ', ' || Rtrim(&pd.state, ' ') || '  ' || &pd.postal
  	Lookup XlatLookup &j.empl_status $Empl_Status_XlatValue
  
  	If #address_line >= #bplan_line 
     		Let #address_line = #address_line + 2  
  	Else
     		Let #address_line = #bplan_line + 2
  	End-If

  	If #address_line > 35                           
  		Let #address_line =  2  
    		Let #bplan_line = 0
    		new-page
   	End-If

  
  	#debug9 Show 'Emplid :' &j.emplid
  	
  	Print '-'(#address_line,1,160) Fill
  	Let #address_line = #address_line + 1
  	Print &pd.name               (#address_line,{#column1},030)   
  	Print &pd.address1           (#address_line,{#column2})
  	
  	Print &j.emplid              (#address_line,{#column3}) Edit xxx-xx-xxxx
  	Print $orig_hire_dt          (#address_line,{#column4})
  	Print $elect_Dt              (#address_line,{#column5})
  	Print $Empl_Status_XlatValue (#address_line,{#column6})
  	Print $begin_Dt              (#address_line,{#column7})
  	Print $Prev_benefit_plan     (#address_line,{#column8})
  	If #Fsa_Annual_Pledge <> 0
  		Let $Fsa_Annual_Pledge_Print = ' '
  		Let $Fsa_Annual_Pledge_Print = '(' || Edit(#Fsa_Annual_Pledge,'9999.99') || ')'
  		Print $Fsa_Annual_Pledge_Print     (#address_line,+1) 
  	End-if
  	Print $Action_Reason_DescrShort   (#address_line,{#column9})
  	Print $Last_day_Worked 	     (#address_line,{#column10})
  	Print $Termination_Dt	     (#address_line,{#column11})
  	Print $Coverage_Code         (#address_line,{#column13})
  	Print $Employee_Birthdate    (#address_line,{#column14})
  	Print $Employee_Sex          (#address_line,{#column15})
  	
  	
  	Let #bplan_line = #address_line 
  	If Rtrim(&pd.address2, ' ') <> ''
  		Print &pd.address2         (+1,{#column2})
  	 	Let #address_line = #address_line + 1 
  	End-If

  	Print $Address3              (+1,{#column2}) 
  	If $Phone_Number<> ''
  		Print  $Phone_Number  (+1,{#column2}) 
  	End-If
  	Let #address_line = #address_line + 1 
  	Let $employee_Print = 'N'
 Else
  	Let #bplan_line = #bplan_line + 1 
	Let #address_line= #address_line + 1
  	If #bplan_line > 35 
  		Let #bplan_line = 2
     		Let #address_line = 2
     		new-page                                   
 	End-If
  

  	
  	Print $elect_dt (#bplan_line,{#column5})
  	Print $begin_dt (,{#column7})
  	Print $prev_benefit_plan (,{#column8})
  	If #Fsa_Annual_Pledge <> 0
  		Let $Fsa_Annual_Pledge_Print = ' '
  		Let $Fsa_Annual_Pledge_Print = '(' || Edit(#Fsa_Annual_Pledge,'9999.99') || ')'
  		Print $Fsa_Annual_Pledge_Print     (,+1) 
  	End-if
  	Print $Coverage_Code         (,{#column13})
 End-If

End-Procedure
!*****************************************************************
Begin-Procedure P300-Finalization
!*****************************************************************
#debug9 Show 'P300-Finalization'

  If $Data-Found-Flag <> 'Y'
    Print 'NO DATA SELECTED FOR THIS REPORT RUN'	(25,) Center
  End-If

  Do Reset                   !reset.sqc
  Do Stdapi-Term             !stdapi.sqc
  #debug9 Show  'Successful end of report'

End-Procedure
!*****************************************************************
Begin-Procedure Ask-From-Thru-Date
!****************************************************************
#debug9 Show 'Ask-From-Thru-Date'

display ''
display 'You may restrict this report to a specified range of dates, choose'
display 'the value from the options below or press enter to accept the default:'
display ''
display '   A = All Dates (default)'
display '   S = Specify a date range'
display ''

input $Answer maxlen=1 'Enter your From/Thru date range selection'
uppercase $Answer

do Get-Date-Values

End-Procedure
!*****************************************************************
Begin-Procedure Get-Date-Values
!*****************************************************************
#debug9 Show 'Get-Date-Values'

  If $Answer = 'A' or $Answer = ''
     do P150-Get-Last-Pay-End-Dt
     goto Finish
  End-If

  do Get-Dates

  while $DateOK <> 'Y'
     do Get-Dates
  end-while

  Finish:

  do Format-DateTime($FromDate, $out1, {DEFDATE}, '', '')
  do Format-DateTime($ThruDate, $out2, {DEFDATE}, '', '')

  display 'Report Value:  ' noline
  display $out1 noline
  display ' thru ' noline
  display $out2

End-Procedure
!*****************************************************************
Begin-Procedure Get-Dates
!*****************************************************************
#debug9 Show 'Get-Dates'

  move 'Y' to $DateOK

  If $FromDateOK <> 'Y'
     display ''
     display 'Enter the ''From'' Date ({Prompt-Date}) for this report or press'

     input $FromDate 'enter to default the ''From'' date to 01/01/00'

     If $FromDate = ''
        move $Century_Begin_Dt to $FromDate
     Else
        move {PDelimiter} to $DDelimiter
        do Format-DateTime($FromDate,$FromDate,{Prompt-Mask},'','native')
     End-If

     do Validate-Native-Date($FromDate,$DateOK)

     If $DateOK = 'N'
         display '**** This is an invalid date, please reenter ****'
     End-If
  End-If

  If $DateOK = 'Y'
     move 'Y' to $FromDateOK
     display ''
     display 'Enter the ''Thru'' Date ({Prompt-Date}) for this report or press'

     input $ThruDate 'enter to default the ''Thru'' Date to today''s date'

     If $ThruDate = ''
        move $AsOfToday to $ThruDate
     Else
        move {PDelimiter} to $DDelimiter
        do Format-DateTime($ThruDate,$ThruDate,{Prompt-Mask},'','native')
     End-If

     do Validate-Native-Date($ThruDate,$DateOK)

     If $DateOK = 'N'
         display '**** This is an invalid date, please reenter ****'
     End-If

     If $DateOK = 'Y'
        do Check-Dates
     End-If
  End-If

End-Procedure
!*****************************************************************
Begin-Procedure Check-Dates
!*****************************************************************
#debug9 Show 'Check-Dates'

  do Format-DateTime($FromDate,$out1,{DEFCMP},'','')
  do Format-DateTime($ThruDate,$out2,{DEFCMP},'','')
  If $out1 > $out2
    display ''
    display 'From Date can not be greater than Thru Date'
    move 'N' to $DateOK
    move 'N' to $FromDateOK
  End-If

End-Procedure
!*****************************************************************
Begin-Procedure Get-Health-Dependents
!*****************************************************************
#debug9 Show 'Get-Health-Dependents'

Begin-Select
DEP.DEPENDENT_BENEF  
	
	Let $Dependent_ID = &DEP.DEPENDENT_BENEF
	
	Let #Dep_Count = #Dep_Count + 1
	Put $Dependent_ID into DependentID(#Dep_Count)
	
	Do Print-Dependent-ID
FROM PS_HEALTH_DEPENDNT@hrprd90  DEP
WHERE DEP.EMPLID = &j.emplid
AND DEP.EMPL_RCD = &j.empl_rcd
AND DEP.EFFDT = $Hlth_Benefit_Effdt
AND DEP.PLAN_TYPE = &hb1.plan_type

End-Select

End-Procedure Get-Health-Dependents
!*****************************************************************
Begin-Procedure Get-Life-Dependents
!*****************************************************************
#debug9 Show 'Get-Life-Dependents'

Begin-Select
LDEP.DEPENDENT_BENEF  
	
	Let $Dependent_ID = &LDEP.DEPENDENT_BENEF
	
	Let #Dep_Count = #Dep_Count + 1
	Put $Dependent_ID into DependentID(#Dep_Count)
	
	Do Print-Dependent-ID
FROM PS_LIFE_ADD_BENEFC@hrprd90  LDEP
WHERE LDEP.EMPLID = &j.emplid
AND LDEP.EMPL_RCD = &j.empl_rcd
AND LDEP.EFFDT = $Hlth_Benefit_Effdt
AND LDEP.PLAN_TYPE = &hb1.plan_type

End-Select

End-Procedure Get-Life-Dependents
!*****************************************************************
Begin-Procedure Print-Dependent-ID
!*****************************************************************
#debug9 Show 'Print-Dependent-ID'

Print $Dependent_ID 		(#bplan_line,{#column16})
Let #bplan_line = #bplan_line + 1
Let #address_line= #address_line + 1

End-Procedure Print-Dependent-ID
!*****************************************************************
Begin-Procedure Write-Dependent
!*****************************************************************
#debug9 Show 'Entering Procedure Write-DEpendent.'
Do Get-Distinct-Dependent
Let #Count_Final = 0
If $Dependent_Found_EE = 'Y'
	Do Write-Dependent-Heading
	While #Count_Final < #Final_Count
		Let #Count_Final = #Count_Final + 1
		Get $Final_Dependent_ID from Distinct_Dependent(#Count_Final)
		Do Get-Dependent-Details
		
	End-While
	
End-If
#debug9 Show 'Exiting Procedure Write-DEpendent.'

End-Procedure Write-Dependent
!*****************************************************************
Begin-Procedure Get-Distinct-Dependent
!*****************************************************************
#debug9 Show 'Get-Distinct-Dependent'

Let #Distinct_Dep_Coount = 0 
Let #Final_Count =0 
Let #Count = 0
Let #Count_Temp = 0
#debug9 Show '#Dep_Count :' #Dep_Count
While #Count < #Dep_Count
	Let #Count = #Count + 1
	Get $Dependent_ID_Array from DependentID(#Count)
	#debug9 Show '$Dependent_ID_Array : '$Dependent_ID_Array
	Let $Dependent_found_Array = 'N'
	Let #Distinct_Count = 0 
	While #Distinct_Count < #Final_Count
		Let #Distinct_Count = #Distinct_Count + 1
		Get $Final_Dep_ID from Distinct_Dependent(#Distinct_Count)
		#debug9 Show 'Final_Dep_ID :' $Final_Dep_ID
		If $Dependent_ID_Array = $Final_Dep_ID
			Let $Dependent_found_Array = 'Y'
		End-if
	End-While
	
	If $Dependent_found_Array = 'N'
		Let #Final_Count = #Final_Count + 1
		Put $Dependent_ID_Array into Distinct_Dependent(#Final_Count)
		#debug9 Show 'Put $Dependent_ID_Array : '$Dependent_ID_Array
	End-if

End-While

#debug9 Show '********************************************************'
Let $Dependent_Found_EE = 'N'
While #Count_Temp < #Final_Count
	Let #Count_Temp = #Count_Temp + 1
	Get $Final_Dep_ID from Distinct_Dependent(#Count_Temp)
	Let $Dependent_Found_EE = 'Y'
	#debug9 Show 'Final Dep ID : '$Final_Dep_ID
End-While
#debug9 Show '********************************************************'

End-Procedure Get-Distinct-Dependent
!*****************************************************************
Begin-Procedure Write-Dependent-Heading
!*****************************************************************
#debug9 Show 'Write-Dependent-Heading'

Let #address_line = #address_line + 1


Print 'DEPENDENT ID '               (#address_line,{#column17})
Print 'DEPENDENT NAME '               (+0,{#column18})
Print 'DEPENDENT RELATIONSHIP '               (+0,{#column19})
Print 'DEPENDENT BIRTHDATE'               (+0,{#column20})
Print 'DEPENDENT SEX'               (+0,{#column21})
Print 'DEPENDENT SSN'               (+0,{#column22})

End-Procedure Write-Dependent-Heading
!*****************************************************************
Begin-Procedure Get-Dependent-Details
!*****************************************************************
#debug9 Show 'Entering Procedure Get-Dependent-Details : '$Final_Dependent_ID
Begin-Select
DEPINFO.NAME
DEPINFO.RELATIONSHIP
DEPINFO.BIRTHDATE
DEPINFO.SEX
DEPINFO.DEPENDENT_BENEF

	Let $Dep_Name = &DEPINFO.NAME
	Let $Dep_Relation = &DEPINFO.RELATIONSHIP
	Let $Dep_ID = &DEPINFO.DEPENDENT_BENEF
	Let $Dep_BirthDate = Edit(&DEPINFO.BIRTHDATE,'mm/dd/yy')
	Let $Dep_Sex = &DEPINFO.SEX
	Let $FieldName = 'RELATIONSHIP'
	Let $FieldValue = $Dep_Relation
	Do Read-Translate-Table
	Let $Dependent_Relationship  = $XlatLongName
	
	Do Get-Dependent-NID
	Do Print-Dependent-Info
	
FROM PS_DEPENDENT_BENEF@hrprd90  DEPINFO
WHERE DEPINFO.EMPLID = &j.emplid
AND DEPINFO.DEPENDENT_BENEF = $Final_Dependent_ID
End-Select
#debug9 Show 'Exiting Procedure Get-Dependent-Details '

End-Procedure Get-Dependent-Details
!*****************************************************************
Begin-Procedure Print-Dependent-Info
!*****************************************************************
#debug9 Show 'Enerting Procedure Print-Dependent-Info'
Let #address_line = #address_line + 1
    If #address_line > 43                           
  		Let #address_line =  2  
    		Let #bplan_line = 0
    		new-page
   	End-If
#debug9 Show '#address_line :'#address_line
Print $Dep_ID 		(#address_line,{#column17})
Print $Dep_Name 		(,{#column18})
Print $Dependent_Relationship 		(,{#column19})
Print $Dep_BirthDate 	(,{#column20})
Print $Dep_Sex  	(,{#column21})
Print $Dependemt_NID    (,{#column22})


#debug9 Show 'Exiting Procedure Print-Dependent-Info'

End-Procedure Print-Dependent-Info
!*****************************************************************
Begin-Procedure Get-Person-Phone
!*****************************************************************
#debug9 Show 'Get-Person-Phone'

Let $Phone_Number = ''
Begin-Select
PHN.PHONE
 	
 	Let $Phone_Number = &PHN.PHONE
 	
FROM PS_PERSON_PHONE@hrprd90  PHN
WHERE PHN.EMPLID = &J.EMPLID
End-Select

End-Procedure Get-Person-Phone
!*****************************************************************
Begin-Procedure Get-Dependent-NID
!*****************************************************************
#debug9 Show 'Get-Dependent-NID'

Let $Dependemt_NID = ''
Begin-Select 
DNID.NATIONAL_ID
	
	Let $Dependemt_NID = Edit(&DNID.NATIONAL_ID,'xxx-xx-xxxx')

FROM PS_DEP_BENEF_NID@hrprd90  DNID
WHERE DNID.EMPLID = &J.EMPLID
AND DNID.DEPENDENT_BENEF = $Dep_ID 

End-Select

End-Procedure Get-Dependent-NID
!*****************************************************************
#Include 'validdt.sqc'   ! Validate date routine
#Include 'gexxx911.sqc'  !Get Benefit Program Multiples Run Controls
#Include 'gexxx920.sqc'  !Get ben single row run control
#Include 'getcodta.sqc'  !Get Get-Company-Data Procedure
#Include 'stdapi.sqc'    !Process Scheduler Interface
#Include 'reset.sqc'     !Reset Printer Procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime Procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'datemath.sqc'  !Routines for date math
#Include 'getactrs.sqc'  !Get Action Reason Description
#Include 'readxlat.sqc'  !Read Xlat Item 
#Include 'gexxx912.sqc'