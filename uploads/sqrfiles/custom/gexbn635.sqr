!***********************************************************************************
#include 'setenv.sqc'	!Set environment
#Include 'setup02.sqc'  !Printer and Page-Size Initialization (Landscape)  

#define #col_EMPLID		  2	!A.EMPLID
#define #col_Plan_ID             12	!Plan ID    
#define #col_INFRDATE		 17	!EFFDT from date  
#define #col_INTODATE		 27	!EFFDT to date
#define #col_NAME   		 37	!NAME                                                           
#define #col_ADDRESS1      	 67	!ADDRESS1                                                              
#define #col_ADDRESS2		 82	!ADDRESS2                                                              
#define #col_CITY          	 97	!CITY                                                                  
#define #col_STATE         	112	!STATE                                                                 
#define #col_POSTAL	   	115     !POSTAL								
#define #col_INPYDATE		122     !CHECK DT                          
#define #col_INPLGAMT	   	132	!Employee Pledge Amount             
#define #col_INFILL1		144	!Pay Period       
#define #col_INCONTR		152     !Employee Contrib Amount    
#define #col_INHDATE		162	!HIRE_DT

                                   
!********************************************
Begin-Heading 7
!********************************************
#debug9 Show 'Begin-Heading'
  
  #Include 'stdhdg01.sqc'
  Print $ReportTitle2      (3,) Center

  Print 'PLN'		(+3,{#col_Plan_ID})
  Print 'FROM'		(0,{#col_INFRDATE})
  Print 'TO'		(0,{#col_INTODATE})
  Print 'PLG'		(0,{#col_INPLGAMT})	   	          
  Print 'PAY'		(0,{#col_INFILL1})
  Print 'CNTR'		(0,{#col_INCONTR}) 
  Print 'HIRE'          (0,{#col_INHDATE})

  Print 'EMPLID'        (+1,{#col_EMPLID})
  Print 'ID'		(0,{#col_Plan_ID})
  Print 'EFFDT'		(0,{#col_INFRDATE})
  Print 'EFFDT'		(0,{#col_INTODATE})
  Print 'NAME'		(0,{#col_NAME})
  Print 'ADDRESS'	(0,{#col_ADDRESS1})
  Print 'CITY'		(0,{#col_CITY})
  Print 'ST'		(0,{#col_STATE})
  Print 'ZIP'		(0,{#col_POSTAL})
  Print 'CHECK DT'	(0,{#col_INPYDATE})
  Print 'AMT'		(0,{#col_INPLGAMT})	   	          
  Print 'Period'	(0,{#col_INFILL1})
  Print 'AMT'		(0,{#col_INCONTR}) 
  Print 'DATE'          (0,{#col_INHDATE})

End-Heading

!***********************************************************************************
Begin-Report
!***********************************************************************************
#debug9 Show 'Begin-Report'
  Do Initialization
  Do Main-Process
  Do Finalization
End-Report

!***********************************************************************************
Begin-Procedure Initialization
!***********************************************************************************
#debug9 Show 'Initialization'

  Let $year4 = '1'
  Do Init-DateTime           !datetime.sqc
  Do Init-Number             !number.sqc
  Do Get-Current-DateTime    !curdttim.sqc
  Do Stdapi-Init             !stdapi.sqc

  Let $ReportID      =   'GEXBN635'
  Let $ReportTitle   =   'Cobra Interface'
  
  #debug8 Show '$ReportID    = ' $ReportID
  #debug8 Show '$ReportTitle = ' $ReportTitle
  #debug8 Show '$ReportDate  = ' $ReportDate
  #debug8 Show '$ReportTime  = ' $ReportTime
    
 
  Let $GEXXX912_Plan_Type_Alias       = 'E.PLAN_TYPE'
  Let $GEXXX911_Benefit_Program_Alias = 'D2.BENEFIT_PROGRAM'
  Let $GEXXX911_Benefit_Program_Alias_in = 'D.BENEFIT_PROGRAM'
 
  If $prcs_process_instance = ''
     Do SQRW-Run-Controls
  Else
     Do Process-Scheduler-Run-Controls
  End-if

  If Rtrim (&GEX_RC_BEN.FromDate, ' ') = ''
   And Rtrim (&GEX_RC_BEN.ThruDate, ' ') = ''
    Do get-pay-end-dt
  else
    let $pay_begin_Dt = &GEX_RC_BEN.FromDate
    let $pay_end_Dt = &GEX_RC_BEN.ThruDate
  end-if

  #debug8 Show '$pay_begin_dt and $pay_end_dt ' $pay_begin_dt ' ' $pay_end_dt

  #debug8 Show '$GEXXX903_Include_Emp_Stat_Display_Criteria         = ' $GEXXX903_Include_Emp_Stat_Display_Criteria
  #debug8 Show '$GEXXX911_INCLUDE_BENEFIT_PROGRAM_DISPLAY_CRITERIA  = ' $GEXXX911_INCLUDE_BENEFIT_PROGRAM_DISPLAY_CRITERIA
  #debug8 Show '$GEXXX912_INCLUDE_BENEFIT_PLAN_DISPLAY_CRITERIA     = ' $GEXXX912_INCLUDE_BENEFIT_PLAN_DISPLAY_CRITERIA
  #debug8 Show '$GEXXX940_INCLUDE_COVERAGE_ELECT_DISPLAY_CRITERIA   = ' $GEXXX940_COVERAGE_ELECT_DISPLAY_CRITERIA
  #debug8 Show '$AsOfDate                                           = ' $AsOfDate

  Let $ORDER_BY = 'ORDER BY A.EMPLID'  

  Do Print-Cover-Page
  Do Open-Files

End-Procedure

!*********************************************************************
Begin-Procedure get-pay-end-dt
!*********************************************************************
!Gets the pay end date of the previous pay cycle.
!*********************************************************************

move 'N' to $found

 #debug8 Show '$AsOfDate ' $AsOfDate

begin-select loops = 1

PAY.PAY_BEGIN_DT
PAY.PAY_END_DT

  move 'Y' to $found
  move &PAY.PAY_BEGIN_DT to $pay_begin_Dt
  move &PAY.PAY_END_DT   to $pay_end_Dt
  
FROM PS_PAY_CALENDAR@HRPRD90 PAY

WHERE PAY.PAY_END_DT = (SELECT DISTINCT(MAX(PAY_END_DT))
   		      FROM PS_PAY_CALENDAR@HRPRD90
		     WHERE PAY_END_DT <= $AsOfDate
                     AND PAY_SHEETS_RUN = 'Y')
end-select

if $found = 'N'
   display 'No Previous Pay Cycle as of:' noline
   display $AsOfToday
   stop
end-if

end-procedure

!***********************************************************************
Begin-Procedure SQRW-Run-Controls 
!***********************************************************************
#debug9 show 'SQRW-Run-Controls'
  
  Do Ask-As-Of-Date
   
  Let $BenefitProgramString = ''''
  Let $PlanTypeString       = ''''
  !~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
  !Benefit Program
  !~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
  Let $BenefitProgramString = ''''
  Display 'Enter Benefit Program or leave blank to exit.'
  While 1=1
    Input $In-Benefit-Program Maxlen=3 'Benefit Program'
    Uppercase $In-Benefit-Program
    If Rtrim($In-Benefit-Program, ' ') = ''
       Concat '''' With $BenefitProgramString
       Break
    End-If
    If $BenefitProgramString <> ''''
       Concat ''',''' With $BenefitProgramString
    End-If
       Concat $In-Benefit-Program With $BenefitProgramString
  End-While

  If $BenefitProgramString = ''''''
     Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA = '1=1'
     Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_DISPLAY_CRITERIA = 'ALL'
  Else
     Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA = $GEXXX911_Benefit_Program_Alias || ' In (' || $BenefitProgramString || ')'
     Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_DISPLAY_CRITERIA = $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA
  End-If
  !~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
  !Plan Type  
  !~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Move '''' to $PlanTypeString
  Display 'Enter Plan Type or leave blank to exit.'
  While 1=1
    Input $PlanType Maxlen=2 'Plan Type'
    Uppercase $PlanType
    if RTRIM($PlanType, ' ') = ''
       concat '''' with $PlanTypeString
       break
    end-if
    if $PlanTypeString <> ''''
       concat ''',''' with $PlanTypeString
    end-if
    concat $PlanType with $PlanTypeString
  End-While

  if $PlanTypeString = ''''''
     let $GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA = '1=1'
     let $GEXXX912_INCLUDE_BENEFIT_PLAN_DISPLAY_CRITERIA = 'ALL'
  else
     let $GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA = $GEXXX912_Plan_Type_Alias || ' In (' || $PlanTypeString || ')'
     let $GEXXX912_INCLUDE_BENEFIT_PLAN_DISPLAY_CRITERIA = $GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA
  end-if

End-Procedure SQRW-Run-Controls 

!***********************************************************************
Begin-Procedure Process-Scheduler-Run-Controls
!***********************************************************************
#debug9 Show 'Process-Scheduler-Run-Controls'
  #debug8 Show 'Process-Scheduler-Run-Controls'
  
  Do GEXRCBN1-SELECT-PARAMETERS
  Let $AsOfDate = &GEX_RC_BEN.AsOfDate
  #debug8 Show '&GEX_RC_BEN.AsOfDate::' &GEX_RC_BEN.AsOfDate
  If Rtrim (&GEX_RC_BEN.AsOfDate, ' ') = ''
     Let $AsOfDate = $AsOfToday
     #debug8 Show '$AsOfDate>' $AsOfToday  
  End-If  
   
  Do GEXXX911-Select-Benefit-Program-Parameters
  Do GEXXX912-Select-Benefit-Plan-Parameters
  do GEXXX911-Select-Benefit-Program-Parameters-In
 
End-Procedure

!***********************************************************************
Begin-Procedure Print-Cover-Page
!***********************************************************************
#debug9 Show 'Print-Cover-Page'
  Print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'            (+2,1)
  Print '$Prcs_OprID          ='                                  (+2,5)
  Print $Prcs_OprID                                               (0,+2)
  Print '$Prcs_Run_Cntl_ID    ='                                  (+1,5)
  Print $Prcs_Run_Cntl_ID                                         (0,+2)

  Print 'Report As Of Date : '                                    (+2,5)
  Print $Rpt_AsOfDate                                             (0,+2)

  Print '$GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA          = '  (+1,5)
  print $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA                (0,+2)

  Print '$GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA_IN          = '  (+1,5)
  print $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA_IN                (0,+2)
 
  print '$GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA             = '  (+1,5)
  print  $GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA 		  (0,+2)

  Print 'SORT ORDER FOR THIS REPORT RUN: '                        (+2,2)
  Print $ORDER_BY                                                 (0,+2)
  Let #PAGE-COUNT = 0
  NEW-PAGE
End-Procedure

!***********************************************************************************
begin-procedure Open-Files
!***********************************************************************************
#debug9 Show 'Open-Files'

   Let $file1 = '{OUTFILE}' || Lower($ReportID) || '.dat'
   !Let $file1 = 'f:\temp\cobra.dat'
   
  Open $file1
       As 1
       For-Writing
       Record=660:fixed
       Status=#filestat

  If #filestat != 0
     #debug8 Show 'Error opening output file.  Program terminating.'
     Stop
  End-If

  Let $file2 = '{OUTFILE}' || Lower($ReportID) || '.da2'
  ! Let $file2 = 'f:\temp\cobra.da2'
   
  Open $file2
       As 2
       For-Writing
       Record=141:fixed
       Status=#filestat2

  If #filestat2 != 0
     #debug8 Show 'Error opening da2 file.  Program terminating.'
     Stop
  End-If

  Let $file3 = '{OUTFILE}' || Lower($ReportID) || '.da3'
 !  Let $file3 = 'f:\temp\cobra.da3'
   Open $file3
       As 3
       For-Writing
       Record=45:fixed
       Status=#filestat3

  If #filestat3 != 0
     #debug8 Show 'Error opening da3 file.  Program terminating.'
     Stop
  End-If

End-Procedure
 
!***********************************************************************************
Begin-Procedure Main-Process
!***********************************************************************************
#debug9 Show 'Main-Process'
                         
Begin-Select 
B.EFFDT			!mmddyyy from JOB
B.EMPLID
B.EMPL_RCD
B.action
B.empl_status
B.action_reason
B.COMPANY
B.PAYGROUP
A.NAME
A.FIRST_NAME
A.MIDDLE_NAME
A.LAST_NAME
A.ADDRESS1
A.ADDRESS2
A.CITY
A.STATE
A.POSTAL
A.SEX
A.BIRTHDATE
B.HIRE_DT
B.TERMINATION_DT
B.last_HIRE_DT 
D.EFFDT
D.BENEFIT_PROGRAM
d.cobra_event_id

  Add 1 to #main-process
  let $Data-Found-Flag = 'Y'
  let $EMPLID   = &B.EMPLID 
  let #EMPL_RCD = &B.EMPL_RCD
  let $cobra_qual_dt = edit(&b.effdt,'mmddyyyy')
  do Check-For-Event-Class
  If $event-class-flag = 'Y'
    do Check-Cobra-Event-Code
    if $cobra_event_found = 'Y'
       let $cobra_qual_evnt_code = &b1.gex_cobra_event_cd
    else
       let $cobra_qual_evnt_code = ' '
    end-if
  else
    let $cobra_qual_evnt_code = ' '
  End-if
  do Map-Account-Number
  if $cobra_acct_found = 'Y'
     let $cobra_acct = &a1.gex_hm_acct_cd
  else
     let $cobra_acct = '0000000'
  end-if
 
  let $birth_dt = edit(&A.BIRTHDATE,'mmddyyyy')
  Let $LAST                = upper(&A.LAST_NAME)
  Let $FIRST		   = upper(&A.FIRST_NAME)
  Let $MIDDLE		   = upper(&A.MIDDLE_NAME)
  Let $gender              = &A.SEX                                                               
  Let $ded_yr       = edit(&b.effdt,'yyyy')

  let $insured_emplid = $emplid
  let $insured_name   = &a.name
  Let $insured_LAST   = upper(&A.LAST_NAME)
  Let $insured_FIRST  = upper(&A.FIRST_NAME)
  Let $insured_MIDDLE = upper(&A.MIDDLE_NAME)
  let $insured_addr1  = &a.ADDRESS1
  let $insured_addr2  = &a.ADDRESS2
  let $insured_city   = &a.CITY
  let $insured_state  = &a.STATE
  let $insured_postal = &a.POSTAL

  Let $process_ee = 'N'

  if &b.empl_status ='T' or &b.empl_status ='D' or &b.empl_status ='R'
     Do Check-For-TERDEA
  end-if

  let $prior_bnft_plan_diff = 'N'
  Do Evaluate-Health-Benefits
  Let $cobra_effdt    = edit(&e.COVERAGE_BEGIN_DT,'mmddyyyy')
  
!-------------------------------------------------------------------------------
       !Determine the TERMINATION DT
       !And here Term date is not empl termintion, this is empl fsa termination dt
!--------------------------------------------------------------------------------

  Let $Prior-Covrg-Elect-Flag = 'N'
  Evaluate &E.COVERAGE_ELECT 
     When = 'T'
       if &b.empl_status ='T' or &b.empl_status ='R'
	       if $terdea_flag ='Y'
	         Let $process_ee = 'Y'
	       else
           Let $process_ee = 'N'
	       end-if
	     else 
         Let $process_ee = 'Y'
	     end-if

       if $process_ee = 'Y'
         Do Get-Prior-Covrg-Elect
	     end-if
       break
     When = 'E'
	     Do Check-Dpnts-Changes

	     if $dpnt_count_changed ='N'
	       Let $process_ee = 'N'
	     else 
         Let $process_ee = 'Y'
	     end-if
	
     	if $prior_bnft_plan_diff = 'Y' 
	      let $process_ee = 'Y'
	    end-if
      break
    When-Other     
      break
  End-Evaluate 

   let $prior_fsa_pldg  = '0000000'
   let $flex_spnd_acct_flag = 'N'
   let #flex_spnd_ytd_amt = 0
	
   if $process_ee = 'N'  !All BNFT INFO selection failed...try FSA
      do Check-FSA
      Let $Prior-FSA-Elect-Flag = 'N'
      Evaluate &FSA.COVERAGE_ELECT 
        When = 'T'
           if $found_prior_fsa ='Y'
     	      let $process_ee = 'Y'
	          do Find-Flex-Spending-YTD
   	       end-if
           break
        When-Other     
         !do nothing    
      End-Evaluate 
   end-if
  
  if $process_ee = 'Y'
     Add 1 to #main-process
     !Do Evaluate-Plan-Type
     !Do Get-Deduct-Amt
     if $terdea_flag='Y'
       Do Write-Detail-Record
       do find-spouse
       if $spouse_found ='Y'
         do get-spouse-info
       end-if
       do find-dependent
       if $dependent_found ='Y'
         do get-dependent-info
       end-if
     else
       If $Prior-Covrg-Elect-Flag = 'Y'
       Do Write-Detail-Record
         do find-spouse
         if $spouse_found ='Y'
           do get-spouse-info
         end-if
         do find-dependent
         if $dependent_found ='Y'
           do get-dependent-info
         end-if
       End-if
       if $dpnt_count_changed ='Y'
        and $prior_bnft_plan_diff = 'N' 
         do find-spouse
         if $spouse_found ='Y'
           do get-spouse-info
         end-if
         do find-dependent
         if $dependent_found ='Y'
           do get-dependent-info
         end-if
       End-if
       if $found_prior_fsa ='Y'
         Do Write-Detail-Record
       end-if
     end-if

     Do Evaluate-Dependent-Records	    !Do Write-Detail-Record2
     If $Prior-Covrg-Elect-Flag ='Y' 
       Do Evaluate-Carriers		          !Do Write-Detail-Record3
     Else
       Do Evaluate-Carriers-Less-Than		!Do Write-Detail-Record3
     end-if
  end-if
     
  FROM PS_PERSONAL_DATA@HRPRD90 A, 
  PS_JOB@HRPRD90 B,
  PS_BEN_PROG_PARTIC@HRPRD90 D
  WHERE  A.EMPLID = B.EMPLID 
     AND B.EFFDT =
        (SELECT MAX(B_ED.EFFDT) FROM PS_JOB@HRPRD90 B_ED
        WHERE B.EMPLID = B_ED.EMPLID
          AND B.EMPL_RCD = B_ED.EMPL_RCD
          AND B_ED.EFFDT <= $pay_end_dt)
    AND B.EFFSEQ =
        (SELECT MAX(B_ES.EFFSEQ) FROM PS_JOB@HRPRD90 B_ES
        WHERE B.EMPLID = B_ES.EMPLID
          AND B.EMPL_RCD = B_ES.EMPL_RCD
          AND B.EFFDT = B_ES.EFFDT)
     AND B.EMPLID = D.EMPLID
     AND B.EMPL_RCD = D.EMPL_RCD
     AND D.EFFDT =
        (SELECT MAX(D_ED.EFFDT) FROM PS_BEN_PROG_PARTIC@HRPRD90 D_ED
        WHERE D.EMPLID = D_ED.EMPLID
          AND D.EMPL_RCD = D_ED.EMPL_RCD
          AND D.COBRA_EVENT_ID = D_ED.COBRA_EVENT_ID
          AND D_ED.EFFDT <= $pay_end_dt)
     AND [$GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA_IN]
 [$ORDER_BY]

End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Evaluate-Health-Benefits
!***********************************************************************************
#debug9 Show 'Evaluate-Health-Benefits'

  let $hb_found = 'N'

Begin-SELECT

E.PLAN_TYPE
E.BENEFIT_PLAN
E.COVERAGE_BEGIN_DT
E.EFFDT
E.COVERAGE_ELECT
E.COVERAGE_ELECT_DT
E.COVERAGE_END_DT
E.COVRG_CD

  let $hb_found = 'Y'
  if RTRIM(&E.COVRG_CD, ' ') <> ''
    let $covrg_cd = &e.covrg_cd
    do Map-Covrg-Level
  end-if
  Do Check-Prior-Bnft-Plan 
  if $found_prev_bnf_pln = 'Y'
     if &E2.BENEFIT_PLAN <> &E.BENEFIT_PLAN
        let $prior_bnft_plan_diff = 'Y'
     end-if
  end-if
    
FROM PS_HEALTH_BENEFIT@HRPRD90 E
  WHERE  E.EMPLID = $EMPLID
     AND E.EMPL_RCD = #EMPL_RCD
     AND E.COVERAGE_ELECT_DT = (SELECT MAX(A1.COVERAGE_ELECT_DT) FROM PS_HEALTH_BENEFIT@HRPRD90 A1
                                       WHERE A1.EMPLID = E.EMPLID
                                         AND A1.EMPL_RCD = E.EMPL_RCD
                                         AND A1.PLAN_TYPE = E.PLAN_TYPE)
     AND (E.COVERAGE_ELECT_DT BETWEEN $pay_begin_dt and $pay_end_dt)
     AND [$GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA]   

End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Get-Prior-Covrg-Elect
!***********************************************************************************
#debug9 Show 'Get-Prior-Covrg-Elect'

  let $prior_elect = ' '

Begin-SELECT

P.EFFDT
P.PLAN_TYPE
P.COVERAGE_ELECT 
P.COVERAGE_BEGIN_DT
P.COVRG_CD

  let $prior_elect = &P.COVERAGE_ELECT
  if RTRIM(&p.COVRG_CD, ' ') <> ''
    let $covrg_cd = &p.covrg_cd
    do Map-Covrg-Level
  end-if

  if &P.COVERAGE_ELECT = 'E'
     Let $Prior-Covrg-Elect-Flag = 'Y'
  end-if

FROM PS_HEALTH_BENEFIT@HRPRD90 P
  WHERE P.EMPLID = &B.EMPLID
    AND P.EMPL_RCD = &B.EMPL_RCD
    AND P.PLAN_TYPE = &E.PLAN_TYPE 
    AND P.COVERAGE_ELECT ='E'
    AND P.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_HEALTH_BENEFIT@HRPRD90 A_ED
        WHERE P.EMPLID = A_ED.EMPLID
          AND P.EMPL_RCD = A_ED.EMPL_RCD
          AND P.COBRA_EVENT_ID = A_ED.COBRA_EVENT_ID
          AND P.PLAN_TYPE = A_ED.PLAN_TYPE
          AND P.BENEFIT_NBR = A_ED.BENEFIT_NBR
          AND A_ED.EFFDT < &E.EFFDT)
    
End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Check-For-Event-Class
!***********************************************************************************
#debug9 Show 'Check-For-Event-Class'

  let $event-class-flag = 'N'

Begin-SELECT

BP.EVENT_CLASS

  let $event-class-flag = 'Y'

From PS_BAS_PARTIC@HRPRD90 BP
WHERE BP.EMPLID = $EMPLID
  AND BP.EMPL_RCD = #EMPL_RCD
  AND BP.JOB_EFFDT = &B.EFFDT
    
End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Check-For-TERDEA
!***********************************************************************************
#debug9 Show 'Check-For-TERDEA'

  let $terdea_flag = 'N'

Begin-SELECT

'ter'

  let $terdea_flag = 'Y'

From PS_JOB@HRPRD90 TER
WHERE TER.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB@HRPRD90
        WHERE TER.EMPLID   =  EMPLID
          AND TER.EMPL_RCD =  EMPL_RCD
          AND EFFDT <= $pay_end_dt
	  AND ACTION='TER'
	  AND ACTION_REASON='DEA')
    AND TER.EFFSEQ =
        (SELECT MAX(EFFSEQ) FROM PS_JOB@HRPRD90
        WHERE TER.EMPLID = EMPLID
          AND TER.EMPL_RCD = EMPL_RCD
          AND TER.EFFDT = EFFDT)
     AND TER.EMPLID   = $EMPLID
     AND TER.EMPL_RCD = #EMPL_RCD
     AND TER.ACTION_DT BETWEEN $pay_begin_dt and $pay_end_dt
    
End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Find-Spouse
!***********************************************************************************
#debug9 Show 'Find-Spouse'

  let $spouse_found = 'N'

Begin-SELECT

'sp'
!sp.name
!sp.same_address_empl
!sp.ADDRESS1
!sp.ADDRESS2
!sp.CITY
!sp.STATE
!sp.POSTAL
!sp1.national_id

  let $spouse_found = 'Y'

From PS_DEPENDENT_BENEF@HRPRD90 SP,
     PS_DEP_BENEF_NID@HRPRD90 SP1

WHERE SP.EMPLID = $EMPLID
  AND SP.relationship ='SP'
  AND sp.emplid=sp1.emplid 
  AND sp.DEPENDENT_BENEF = sp1.DEPENDENT_BENEF 
    
End-Select
End-Procedure
!***********************************************************************************
Begin-Procedure Get-Spouse-Info
!***********************************************************************************
#debug9 Show 'Get-Spouse-Info'


Begin-SELECT

spi.name
spi.same_address_empl
spi.ADDRESS1
spi.ADDRESS2
spi.CITY
spi.STATE
spi.POSTAL
sp1i.national_id

   let $insured_emplid = &sp1i.national_id    
   let $insured_name   = &spi.name 
   if &spi.same_address_empl = 'N'
      let $insured_addr1  = &spi.ADDRESS1
      let $insured_addr2  = &spi.ADDRESS2
      let $insured_city   = &spi.CITY
      let $insured_state  = &spi.STATE
      let $insured_postal = &spi.POSTAL
   end-if 

   Do Write-Detail-Record

From PS_DEPENDENT_BENEF@HRPRD90 SPi,
     PS_DEP_BENEF_NID@HRPRD90 SP1i

WHERE SPi.EMPLID = $EMPLID
  AND SPi.relationship ='SP'
  AND spi.emplid=sp1i.emplid 
  AND spi.DEPENDENT_BENEF = sp1i.DEPENDENT_BENEF 
    
End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Find-Dependent
!***********************************************************************************
#debug9 Show 'Find-Dependent'

  let $dependent_found = 'N'

Begin-SELECT

'dp'
!dp.name
!dp.same_address_empl
!dp.ADDRESS1
!dp.ADDRESS2
!dp.CITY
!dp.STATE
!dp.POSTAL
!dp1.national_id

  let $dependent_found = 'Y'

From PS_DEPENDENT_BENEF@HRPRD90 dP,
     PS_DEP_BENEF_NID@HRPRD90 dP1

WHERE dP.EMPLID = $EMPLID
  AND dP.relationship <> 'SP'
  AND dp.emplid=dp1.emplid 
  AND dp.DEPENDENT_BENEF = dp1.DEPENDENT_BENEF 
    
End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Get-Dependent-Info
!***********************************************************************************
#debug9 Show 'Get-Dependent-Info'

Begin-SELECT

dpi.name
dpi.same_address_empl
dpi.ADDRESS1
dpi.ADDRESS2
dpi.CITY
dpi.STATE
dpi.POSTAL
dp1i.national_id

  let $dependent_found = 'Y'

From PS_DEPENDENT_BENEF@HRPRD90 dPi,
     PS_DEP_BENEF_NID@HRPRD90 dP1i

WHERE dPi.EMPLID = $EMPLID
  AND dPi.relationship <> 'SP'
  AND dpi.emplid=dp1i.emplid 
  AND dpi.DEPENDENT_BENEF = dp1i.DEPENDENT_BENEF 
    
End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Evaluate-Dependent-Records
!***********************************************************************************
#debug9 Show 'Evaluate-Dependent-Records'

  let $depend_found='N'
  let $plan_typ = '  '
  let $pln_typ_10_found='N'
  let $pln_typ_11_found='N'
  let $pln_typ_14_found='N'
   
Begin-SELECT distinct

  
DB.DEPENDENT_BENEF
DB.NAME
DB.BIRTHDATE
DB.RELATIONSHIP
DB.STUDENT
DB.SEX
   
   let $depend_found='Y'
   let $depnt_birth_dt = edit(&DB.BIRTHDATE,'mmddyyyy')
   let $depnt_name     = &DB.NAME

   let $plan_typ = '10'
   Do Confirm-Type
 
   let $plan_typ = '11'
   Do Confirm-Type

   let $plan_typ = '14'
   Do Confirm-Type

   do Get-Cobra-Relat
!   let $dpnt_relat_cd = &c1.gex_relat_cd

   Do Write-Detail-Record2

FROM PS_DEPENDENT_BENEF@HRPRD90 DB
  WHERE DB.EMPLID = $EMPLID
        
End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Confirm-Type
!***********************************************************************************
#debug9 Show 'Confirm-Type'

Begin-SELECT 

'z'

  evaluate $plan_typ
     when = '10'
         let $pln_typ_10_found='Y'
         break 
     when = '11'
         let $pln_typ_11_found='Y'
         break 
     when = '14'
         let $pln_typ_14_found='Y'
         break 
     when-other
	 !sit
  end-evaluate


FROM  PS_HEALTH_DEPENDNT@HRPRD90 BB,
      PS_HEALTH_BENEFIT@HRPRD90  BP
WHERE bb.EMPLID = $EMPLID
      AND bb.EMPL_RCD = #EMPL_RCD
      and BB.DEPENDENT_BENEF  = &db.DEPENDENT_BENEF
      and BP.EFFDT =
      (SELECT MAX(BPP.EFFDT)
       FROM  PS_HEALTH_BENEFIT@HRPRD90   BPP
       WHERE BPP.EMPLID          = BP.EMPLID
       and   BPP.EMPL_RCD        = BP.EMPL_RCD
       and   BPP.COBRA_EVENT_ID  = BP.COBRA_EVENT_ID
       and   BPP.PLAN_TYPE       = BP.PLAN_TYPE
       and   BPP.BENEFIT_NBR     = BP.BENEFIT_NBR
       and   BPP.EFFDT          <= $pay_end_dt)
  and BB.EMPLID           = BP.EMPLID
  and BB.EMPL_RCD         = BP.EMPL_RCD
  and BP.PLAN_TYPE        = $plan_typ
  AND BP.PLAN_TYPE        = BB.PLAN_TYPE
  
End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Check-Cobra-Event-Code
!***********************************************************************************
#debug9 Show 'Check-Cobra-Event-Code'
#debug8 Show 'Action:  '&b.action

  let $cobra_event_found = 'N'

Begin-SELECT

b1.gex_cobra_event_cd

  let $cobra_event_found = 'Y'
  #debug8 Show 'b1.gex_cobra_event_cd: '&b1.gex_cobra_event_cd

FROM  sysadm.ps_gex_cobra_event b1
WHERE b1.event_class = &bp.event_class
    
End-Select
End-Procedure

!***********************************************************************************
!Begin-Procedure Check-Cobra-Event-Code
!***********************************************************************************
!#debug9 Show 'Check-Cobra-Event-Code'
!#debug8 Show 'Action:  '&b.action
!#debug8 Show 'Action Reason: '&b.action_reason

!  let $cobra_event_found = 'N'

!Begin-SELECT

!b1.gex_cobra_event_cd

!  let $cobra_event_found = 'Y'
!  #debug8 Show 'b1.gex_cobra_event_cd: '&b1.gex_cobra_event_cd

!FROM  sysadm.ps_gex_cobra_event a1,
!      sysadm.ps_gex_cobra_actns b1

!WHERE a1.gex_cobra_event_cd = b1.gex_cobra_event_cd
!  AND b1.action = &b.action
!  AND b1.action_reason = &b.action_reason
    
!End-Select
!End-Procedure

!***********************************************************************************
Begin-Procedure Get-Cobra-Relat
!***********************************************************************************
#debug9 Show 'Get-Cobra-Relat'

  let $cobra_event_found = 'N'

!Begin-SELECT

!c1.gex_relat_cd

!  let $cobra_event_found = 'Y'

!FROM sysadm.ps_gex_cobra_relat@hrdev c1
!FROM sysadm.ps_gex_cobra_relat c1

!WHERE c1.RELATIONSHIP =  &DB.RELATIONSHIP
!  and c1.STUDENT      =  &DB.STUDENT
!  and c1.SEX	     
! =  &DB.SEX  

!End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Check-Dependents
!***********************************************************************************
#debug9 Show 'Check-Dependents'

Begin-Select Loops=1
 
CD1.EMPLID
CD1.EFFDT


    do Get-Prior-Dependents

FROM PS_HEALTH_DEPENDNT@HRPRD90 CD1
WHERE CD1.EFFDT = (SELECT MAX(A1_ED.EFFDT) FROM PS_HEALTH_DEPENDNT@HRPRD90 A1_ED
        WHERE CD1.EMPLID = A1_ED.EMPLID
          AND CD1.EMPL_RCD = A1_ED.EMPL_RCD
          AND CD1.COBRA_EVENT_ID = A1_ED.COBRA_EVENT_ID
          AND CD1.PLAN_TYPE = A1_ED.PLAN_TYPE
          AND CD1.BENEFIT_NBR = A1_ED.BENEFIT_NBR
          AND A1_ED.EFFDT <= $pay_end_dt)
	and CD1.EFFDT BETWEEN $pay_begin_dt and $pay_end_dt
	AND CD1.EMPLID = $EMPLID
  AND CD1.EMPL_RCD = #EMPL_RCD
  AND CD1.PLAN_TYPE = $PLAN_TYPE

End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Get-Prior-Dependents
!***********************************************************************************
#debug9 Show 'Get-Prior-Dependents' 

Begin-Select
 
CD2.EMPLID

FROM PS_HEALTH_DEPENDNT@HRPRD90 CD2
WHERE CD2.EFFDT = (SELECT MAX(EFFDT) FROM PS_HEALTH_DEPENDNT@HRPRD90
        WHERE CD2.EMPLID	 = EMPLID
          AND CD2.EMPL_RCD	 = EMPL_RCD
          AND CD2.COBRA_EVENT_ID = COBRA_EVENT_ID
          AND CD2.PLAN_TYPE      = PLAN_TYPE
          AND CD2.BENEFIT_NBR    = BENEFIT_NBR
          AND EFFDT < &cd.effdt)
	  AND CD2.EMPLID = $EMPLID
    AND CD2.EMPL_RCD = #EMPL_RCD

GROUP BY CD2.EMPLID, CD2.EFFDT

End-Select

End-Procedure

!***********************************************************************************
Begin-Procedure Check-Dpnts-Changes
!***********************************************************************************
   let $dpnt_count_changed ='N'

Begin-Select Loops=1
 
CD.EMPLID
CD.EFFDT
COUNT(CD.DEPENDENT_BENEF) &dep_count

    let #dep_count  = &dep_count

    do Get-Prior-Dpnts-Counts

    if #dep_count < #prior_dep_count
       let $dpnt_count_changed ='Y'
    end-if

FROM PS_HEALTH_DEPENDNT@HRPRD90 CD
WHERE CD.EFFDT = (SELECT MAX(A_ED.EFFDT) FROM PS_HEALTH_DEPENDNT@HRPRD90 A_ED
        WHERE CD.EMPLID = A_ED.EMPLID
          AND CD.EMPL_RCD = A_ED.EMPL_RCD
          AND CD.COBRA_EVENT_ID = A_ED.COBRA_EVENT_ID
          AND CD.PLAN_TYPE = A_ED.PLAN_TYPE
          AND CD.BENEFIT_NBR = A_ED.BENEFIT_NBR
          AND A_ED.EFFDT <= $pay_end_dt)
	and CD.EFFDT BETWEEN $pay_begin_dt and $pay_end_dt
	AND CD.EMPLID = $EMPLID
        AND CD.EMPL_RCD = #EMPL_RCD
GROUP BY CD.EMPLID, CD.EFFDT
ORDER BY CD.EFFDT DESC

End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Get-Prior-Dpnts-Counts
!***********************************************************************************
#debug98 Show 'Get-Prior-Dpnts-Counts ' 

let #prior_dep_count = 0

Begin-Select
 
CDX.EMPLID
COUNT(CDX.DEPENDENT_BENEF) &prior_dep_count

   let #prior_dep_count  = &prior_dep_count  

FROM PS_HEALTH_DEPENDNT@HRPRD90 CDX
WHERE CDX.EFFDT = (SELECT MAX(EFFDT) FROM PS_HEALTH_DEPENDNT@HRPRD90
        WHERE CDX.EMPLID	 = EMPLID
          AND CDX.EMPL_RCD	 = EMPL_RCD
          AND CDX.COBRA_EVENT_ID = COBRA_EVENT_ID
          AND CDX.PLAN_TYPE      = PLAN_TYPE
          AND CDX.BENEFIT_NBR    = BENEFIT_NBR
          AND EFFDT < &cd.effdt)
	  AND CDX.EMPLID = $EMPLID
          AND CDX.EMPL_RCD = #EMPL_RCD

GROUP BY CDX.EMPLID, CDX.EFFDT

End-Select

End-Procedure

!***********************************************************************************
Begin-Procedure Check-Prior-Bnft-Plan 
!***********************************************************************************
  let $found_prev_bnf_pln = 'N'

Begin-SELECT

e2.plan_type
e2.effdt
e2.benefit_plan
D2.BENEFIT_PROGRAM

 let $found_prev_bnf_pln = 'Y'

FROM PS_HEALTH_BENEFIT@HRPRD90 E2,
     PS_BEN_PROG_PARTIC@HRPRD90 D2
WHERE E2.EMPLID   = $EMPLID
  AND E2.EMPL_RCD = #EMPL_RCD
  AND E2.EFFDT = 
        (SELECT MAX(B_ED.EFFDT) FROM PS_HEALTH_BENEFIT@HRPRD90 B_ED 
        WHERE E2.EMPLID = B_ED.EMPLID 
          AND E2.EMPL_RCD = B_ED.EMPL_RCD 
          AND E2.PLAN_TYPE = B_ED.PLAN_TYPE 
          AND E2.BENEFIT_NBR = B_ED.BENEFIT_NBR 
	  AND B_ED.EFFDT < &e.effdt) 
  AND e2.plan_type = &e.plan_type
  AND   [$GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA]
   AND D2.EMPLID	= E2.EMPLID
   AND D2.EMPL_RCD       = E2.EMPL_RCD
   AND D2.COBRA_EVENT_ID = E2.COBRA_EVENT_ID
   AND D2.EFFDT =
       (SELECT MAX(EFFDT) FROM PS_BEN_PROG_PARTIC@HRPRD90
        WHERE D2.EMPLID = EMPLID
          AND D2.EMPL_RCD = EMPL_RCD
          AND D2.COBRA_EVENT_ID = COBRA_EVENT_ID
          AND EFFDT < &d.effdt) 

End-Select

End-Procedure

!***********************************************************************************
Begin-Procedure Evaluate-Carriers
!***********************************************************************************
#debug9 Show 'Evaluate-Carriers'
#debug8 Show '$Prior-Covrg-Elect-Flag: '$Prior-Covrg-Elect-Flag
#debug8 Show '$EMPLID: '$EMPLID
#debug8 Show '#EMPL_RCD: '#EMPL_RCD
#debug8 Show '&E.EFFDT: '&E.EFFDT
#debug8 Show '$pay_begin_dt: '$pay_begin_dt
#debug8 Show '$pay_end_dt: '$pay_end_dt

Begin-SELECT

E3.PLAN_TYPE
E3.BENEFIT_PLAN
E3.COVERAGE_BEGIN_DT
E3.EFFDT
E3.COVERAGE_ELECT
E3.COVERAGE_ELECT_DT
E3.COVERAGE_END_DT
E3.COVRG_CD

  let $c_plan_type    = &E3.PLAN_TYPE
  let $c_BENEFIT_PLAN = &E3.BENEFIT_PLAN
  let $c_effdt        = &E3.EFFDT
  
  if RTRIM(&E3.COVRG_CD, ' ') <> ''
    let $covrg_cd = &E3.covrg_cd
    do Map-Covrg-Level
  end-if
  
  evaluate &E3.PLAN_TYPE
     when = '10'
         let $basic_sup_cd = 'B'
         break 
     when-other
         let $basic_sup_cd = 'S'
  end-evaluate

  Do Get-Ben-Plan-Info

  Do Write-Detail-Record3
    
FROM PS_HEALTH_BENEFIT@HRPRD90 E3
  WHERE  E3.EMPLID = $EMPLID
     AND E3.EMPL_RCD = #EMPL_RCD
     AND E3.COVERAGE_ELECT_DT = (SELECT MAX(COVERAGE_ELECT_DT) FROM PS_HEALTH_BENEFIT@HRPRD90
                                       WHERE EMPLID = E3.EMPLID
                                         AND EMPL_RCD = E3.EMPL_RCD
                                         AND PLAN_TYPE = E3.PLAN_TYPE)
     AND E3.COVERAGE_ELECT_DT <  &E.EFFDT
     AND E3.PLAN_TYPE in (select distinct E.PLAN_TYPE from PS_GEX_RC_BEN_PLAN E
                        where [$GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA])

End-Select

End-Procedure

!***********************************************************************************
Begin-Procedure Evaluate-Carriers-Less-Than
!***********************************************************************************
#debug9 Show 'Evaluate-Carriers-Less-Than'
#debug8 Show '$Prior-Covrg-Elect-Flag: '$Prior-Covrg-Elect-Flag
#debug8 Show '$EMPLID: '$EMPLID
#debug8 Show '#EMPL_RCD: '#EMPL_RCD
#debug8 Show '&E.EFFDT: '&E.EFFDT
#debug8 Show '$pay_begin_dt: '$pay_begin_dt
#debug8 Show '$pay_end_dt: '$pay_end_dt

Begin-SELECT

E4.PLAN_TYPE
E4.BENEFIT_PLAN
E4.COVERAGE_BEGIN_DT
E4.EFFDT
E4.COVERAGE_ELECT
E4.COVERAGE_ELECT_DT
E4.COVERAGE_END_DT
E4.COVRG_CD

  let $c_plan_type    = &E4.PLAN_TYPE
  let $c_BENEFIT_PLAN = &E4.BENEFIT_PLAN
  let $c_effdt        = &E4.EFFDT
  
  if RTRIM(&E4.COVRG_CD, ' ') <> ''
    let $covrg_cd = &E4.covrg_cd
    do Map-Covrg-Level
  end-if
  
  evaluate &E4.PLAN_TYPE
     when = '10'
         let $basic_sup_cd = 'B'
         break 
     when-other
         let $basic_sup_cd = 'S'
  end-evaluate

  Do Get-Ben-Plan-Info

  Do Write-Detail-Record3
    
FROM PS_HEALTH_BENEFIT@HRPRD90 E4
  WHERE  E4.EMPLID = $EMPLID
     AND E4.EMPL_RCD = #EMPL_RCD
     AND E4.COVERAGE_ELECT_DT = (SELECT MAX(COVERAGE_ELECT_DT) FROM PS_HEALTH_BENEFIT@HRPRD90
                                       WHERE EMPLID = E4.EMPLID
                                         AND EMPL_RCD = E4.EMPL_RCD
                                         AND PLAN_TYPE = E4.PLAN_TYPE)
     AND (E4.COVERAGE_ELECT_DT BETWEEN $pay_begin_dt and $pay_end_dt)
     AND E4.PLAN_TYPE in (select distinct E.PLAN_TYPE from PS_GEX_RC_BEN_PLAN E
                        where [$GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA])

End-Select

End-Procedure

!***********************************************************************************
Begin-Procedure Map-Covrg-Level
!***********************************************************************************
#debug9 Show 'Map-Covrg-Level'
#debug8 Show '$covrg_cd: ' $covrg_cd

  let $cobra_covg_found = 'N'

Begin-SELECT

cl.gex_cobra_covg_lvl

  let $cobra_covg_found = 'Y'
  let $covrg_lvl_cd = edit(&cl.gex_cobra_covg_lvl,'09')

FROM sysadm.ps_gex_cobra_cvrg cl
WHERE cl.gex_cobra_covg_lvl = $covrg_cd

End-Select

End-Procedure

!***********************************************************************************
Begin-Procedure Map-Account-Number
!***********************************************************************************
#debug9 Show 'Map-Account-Number'
#debug8 Show 'd.benefit_program: ' &d.benefit_program

  let $cobra_acct_found = 'N'

Begin-SELECT

a1.gex_hm_acct_cd

  let $cobra_acct_found = 'Y'
  let $cobra_acct = &a1.gex_hm_acct_cd
  #debug8 Show '$cobra_acct: ' $cobra_acct

FROM sysadm.ps_gex_cobra_acct a1
WHERE a1.benefit_program = &d.benefit_program

End-Select

End-Procedure
!***********************************************************************************
Begin-Procedure Get-Ben-Plan-Info
!***********************************************************************************
#debug9 Show 'Get-Ben-Plan-Info'

  let $bp_info_found = 'N'

Begin-SELECT

BPT.VENDOR_ID
BPT.BENEFIT_PLAN
BPT.GROUP_NBR
 
  let $bp_info_found = 'Y'
  let $carrier_id	= &BPT.VENDOR_ID
  let $carrier_grp_num	= &BPT.GROUP_NBR

  if $carrier_id <> '0001'
     let $carrier_grp_num = '0000000'
  else 
     let $carrier_grp_num = substr($carrier_grp_num,1,5) || substr($carrier_grp_num,7,2)
  end-if
 
FROM PS_BENEF_PLAN_TBL@HRPRD90 BPT
  WHERE  BPT.PLAN_TYPE    = $c_plan_type
     AND BPT.BENEFIT_PLAN = $c_BENEFIT_PLAN
     AND BPT.EFFDT = (SELECT MAX(EFFDT) FROM PS_BENEF_PLAN_TBL@HRPRD90
                              WHERE BPT.PLAN_TYPE	= PLAN_TYPE
                               AND BPT.BENEFIT_PLAN	= BENEFIT_PLAN
                               AND EFFDT <= $c_effdt)   
  
End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Check-FSA
!***********************************************************************************
#debug9 Show 'Check-FSA'
  
  let $found_fsa = 'N'
  
Begin-Select 

FSA.EMPLID
FSA.EMPL_RCD
FSA.PLAN_TYPE
FSA.EFFDT
FSA.DEDUCTION_END_DT
FSA.BENEFIT_PLAN
FSA.COVERAGE_ELECT
FSA.COVERAGE_ELECT_DT

   let $found_fsa = 'Y'

   Do Get-Prior-FSA-Elect
   
   if $found_prior_fsa ='N'
     let $found_fsa = 'N'
   End-if


!   Evaluate $prior_fsa_elect
!      when = 'E'
!          let $found_prior_fsa ='Y'
!          if &FSA1.PLAN_TYPE = '60'
!             let $flex_spnd_acct_flag = 'Y'
!          end-if
!	  break
!      when-other
        !do nothing
!   End-Evaluate

FROM PS_FSA_BENEFIT@HRPRD90 FSA 
  WHERE FSA.COVERAGE_ELECT_DT =
        (SELECT MAX(COVERAGE_ELECT_DT) FROM PS_FSA_BENEFIT@HRPRD90
           WHERE EMPLID   = FSA.EMPLID
             AND EMPL_RCD = FSA.EMPL_RCD
             AND PLAN_TYPE = FSA.PLAN_TYPE)
  AND (FSA.COVERAGE_ELECT_DT BETWEEN $pay_begin_dt and $pay_end_dt)
  AND FSA.EMPLID	= $emplid
  AND FSA.EMPL_RCD	= #EMPL_RCD
  AND FSA.COVERAGE_ELECT = 'T'
  AND FSA.PLAN_TYPE  in (select distinct E.PLAN_TYPE from PS_GEX_RC_BEN_PLAN E
                        where [$GEXXX912_INCLUDE_BENEFIT_PLAN_CRITERIA])

End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Get-Prior-FSA-Elect
!***********************************************************************************
#debug9 Show 'Get-Prior-FSA-Elect'
  
  let $found_prior_fsa ='N'
  let $prior_fsa_elect = ' '
  
Begin-Select 

FSA1.COVERAGE_ELECT
FSA1.COVERAGE_ELECT_DT
FSA1.ANNUAL_PLEDGE
FSA1.PLAN_TYPE 

   let $found_prior_fsa ='Y'
          
   Let $prior_fsa_elect = &FSA1.COVERAGE_ELECT
   let #prior_fsa_pldg  = &FSA1.ANNUAL_PLEDGE * 100
!   Evaluate $prior_fsa_elect
!      when = 'E'
!          let $found_prior_fsa ='Y'
!          if &FSA1.PLAN_TYPE = '60'
!             let $flex_spnd_acct_flag = 'Y'
!          end-if
!	  break
!      when-other
!         !do nothing
!   End-Evaluate

   if &FSA1.PLAN_TYPE = '60'
      let $prior_fsa_pldg  = edit(#prior_fsa_pldg,'0000000')
      let $flex_spnd_acct_flag = 'Y'
   end-if

FROM PS_FSA_BENEFIT@HRPRD90 FSA1 
  WHERE FSA1.EFFDT =
      (SELECT MAX(EFFDT) FROM PS_FSA_BENEFIT@HRPRD90
        WHERE FSA1.EMPLID   = EMPLID
          AND FSA1.EMPL_RCD = EMPL_RCD
          AND FSA1.COBRA_EVENT_ID = COBRA_EVENT_ID
          AND FSA1.PLAN_TYPE = PLAN_TYPE
          AND FSA1.BENEFIT_NBR = BENEFIT_NBR
          AND EFFDT < &FSA.EFFDT)
  AND FSA1.EMPLID	= $emplid
  AND FSA1.EMPL_RCD	= #EMPL_RCD
  AND FSA1.PLAN_TYPE     = &FSA.PLAN_TYPE
  AND FSA1.COVERAGE_ELECT = 'E'

End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Find-Flex-Spending-YTD
!***********************************************************************************
#debug9 Show 'Find-Flex-Spending-YTD'

 Begin-SELECT  

dedbal.DED_YTD

   let #flex_spnd_ytd_amt = &dedbal.DED_YTD
 
 FROM PS_DEDUCTION_BAL@HRPRD90 DEDBAL
 
 WHERE dedbal.emplid = $emplid
  AND DEDBAL.BALANCE_ID     = 'CY'
  AND DEDBAL.BALANCE_YEAR   = $ded_yr
  AND DEDBAL.ded_class    = 'B'   	
  AND DEDBAL.DEDCD      = 'HCARE'
  AND DEDBAL.BALANCE_PERIOD =   (SELECT MAX(DEDBAL1.BALANCE_PERIOD)
       FROM PS_DEDUCTION_BAL@HRPRD90 DEDBAL1
     WHERE DEDBAL1.EMPLID        = DEDBAL.EMPLID
       AND DEDBAL1.COMPANY       = DEDBAL.COMPANY
       AND DEDBAL1.BALANCE_ID    = DEDBAL.BALANCE_ID
     AND DEDBAL1.BALANCE_YEAR  = DEDBAL.BALANCE_YEAR
        AND DEDBAL1.PLAN_TYPE     = '60'   			
       AND DEDBAL1.DEDCD         =   DEDBAL.DEDCD
       AND DEDBAL1.DED_CLASS     = DEDBAL.DED_CLASS)
	
End-Select
End-Procedure

!***********************************************************************************
Begin-Procedure Write-Detail-Record
!***********************************************************************************
#debug9 Show 'Write-Detail-Record'
 ! Extract Layout
  
  let $SPACE    = rpad($FILLER,1,' ') 
  let $SPACE2   = rpad($FILLER,2,' ') 
  let $SPACE7   = rpad($FILLER,7,' ')
  let $SPACE30  = rpad($FILLER,30,' ') 
  let $FILL2    = rpad($FILLER,2,'0') 
  let $FILL3    = rpad($FILLER,3,'0') 
  let $FILL4    = rpad($FILLER,4,'0')  
  let $FILL5    = rpad($FILLER,5,'0')  
  let $FILL6    = rpad($FILLER,6,'0') 
  let $FILL7    = rpad($FILLER,7,'0')  
  let $FILL8    = rpad($FILLER,8,'0')  
  let $FILL9    = rpad($FILLER,9,'0')  
  let $FILL10    = rpad($FILLER,10,'0')  

  let $flex_spnd_ytd_amt = edit(#flex_spnd_ytd_amt,'099999999')
  let $emplid_30  = lpad($emplid,30,'0') 
  
  write 1 from $insured_emplid:9  
    $SPACE2:2
		$insured_name:25
		$LAST:35
		$FIRST:25
    $MIDDLE:25
		$gender:1
    $birth_dt:8
		$emplid:9
		&A.last_name:35
		&A.first_name:25
		&A.middle_name:25
		$insured_addr1:55 
		$insured_addr2:55 
		$insured_city:30
	  $insured_state:2
		$insured_postal:5
		$FILL4:4
		$COUNTRY:3
		$INTERNATIONAL:15
		$cobra_acct:7
		$cobra_qual_dt:8
		$cobra_qual_evnt_code:2
    $cobra_effdt:8
		$FILL5:5
		$FILL7:7
		$FILL2:2
		$FILL4:4
    $covrg_lvl_cd:2
		$SPACE2:1
		$prior_fsa_pldg:7
		$SPACE7:7
		$FILL8:8
		$SPACE:1
		$FILL8:8
		$FILL8:8
		$FILL8:8
		$FILL6:6
		$FILL8:8
		$FILL8:8
		$FILL8:8
		$flex_spnd_acct_flag:1
		$flex_spnd_ytd_amt:9
		$SPACE:1
		$FILL10:10
		$FILL3:3
		$emplid_30:30
		$SPACE30:30
		$SPACE30:30
		$SPACE30:30
		                                                                   	      
	Add 1 to #recs-written   

  If #filestat <> 0
     #debug8 Show 'Error writing output file1.  Program terminating.'
     Stop
  End-If
  	       

End-Procedure
!***********************************************************************************
Begin-Procedure Write-Detail-Record2
!***********************************************************************************
#debug9 Show 'Write-Detail-Record2'
 ! Extract Layout
  
  write 2 from  $insured_emplid:9  
    $FILL2:2
		$depnt_name:25
    $FILL2:2
		$depnt_birth_dt
    $FILL2:2
    $dpnt_relat_cd
    $FILL2:2
    $pln_typ_10_found
    $FILL2:2
    $pln_typ_11_found
    $FILL2:2
    $pln_typ_14_found
                                                         	      
	Add 1 to #recs-written2  

  If #filestat2 <> 0
     #debug8 Show 'Error writing output file2.  Program terminating.'
     Stop
  End-If
  	       
End-Procedure

!***********************************************************************************
Begin-Procedure Write-Detail-Record3
!***********************************************************************************
#debug9 Show 'Write-Detail-Record3'
 ! Extract Layout
  
    let $FILL4    = rpad($FILLER,4,'0')
    let $FILL7    = rpad($FILLER,7,'0')

  write 3 from  $insured_emplid:9  
    $FILL2:2
		$FILL4:4
    $FILL7:7
		$covrg_lvl_cd:2
		$FILL2:2
		$basic_sup_cd:2
                		                                                                   	      
	Add 1 to #recs-written3

  If #filestat3 <> 0
     #debug8 Show 'Error writing output file3.  Program terminating.'
     Stop
  End-If
  	       

End-Procedure
!***********************************************************************************
!***********************************************************************************
Begin-Procedure GEXXX911-Select-Benefit-Program-Parameters-In

  Let $OprID                = '''' || $Prcs_OprID       || ''''
  Let $Run_Cntl_ID          = '''' || $Prcs_Run_Cntl_ID || ''''
  Let #GEX_RC_BEN_PRGM_ROWS = 0
  Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA_IN = ''
  Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_DISPLAY_CRITERIA_IN = 'ALL'

Begin-Select

GEX_RC_BEN_PRGM_IN.BENEFIT_PROGRAM 

  Add 1 To #GEX_RC_EMP_STAT_ROWS

  If #GEX_RC_EMP_STAT_ROWS = 1
    Let $GEXXX903_INCLUDE_EMP_STAT_CRITERIA = '(' || $GEXXX911_Benefit_Program_Alias_in || ' In ('''     || &GEX_RC_BEN_PRGM_IN.BENEFIT_PROGRAM || ''''
  Else
    Let $GEXXX903_INCLUDE_EMP_STAT_CRITERIA = $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA_IN || ',''' || &GEX_RC_BEN_PRGM_IN.BENEFIT_PROGRAM || ''''
  End-If


From  PS_GEX_RC_BEN_PRGM GEX_RC_BEN_PRGM_IN

Where GEX_RC_BEN_PRGM_IN.OPRID                         = [$OprID]
And   GEX_RC_BEN_PRGM_IN.RUN_CNTL_ID                   = [$Run_Cntl_ID]
And   Rtrim(GEX_RC_BEN_PRGM_IN.BENEFIT_PROGRAM,  ' ') != ' '

End-Select


  If #GEX_RC_BEN_PRGM_ROWS = 0
    Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA_IN = $GEXXX911_Benefit_Program_Alias_in || ' = ' || $GEXXX911_Benefit_Program_Alias_in
  Else
    Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA_IN = $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA_IN || '))'
    Let $GEXXX911_INCLUDE_BENEFIT_PROGRAM_DISPLAY_CRITERIA_IN = $GEXXX911_INCLUDE_BENEFIT_PROGRAM_CRITERIA_IN
  End-If

End-Procedure

!***********************************************************************************
Begin-Procedure Finalization
!***********************************************************************************
 #debug9 Show 'Finalization'

  If $Data-Found-Flag <> 'Y'
    Print 'NO DATA SELECTED FOR THIS REPORT RUN'        (5) center
  End-If

  Do Format-Number(#recs-written,$recs-written,'888,888,888')
  Do Format-Number(#recs-written2,$recs-written2,'888,888,888')
  Do Format-Number(#recs-written3,$recs-written3,'888,888,888')
  Do Format-Number(#main-process,$main-process,'888,888,888')
  
   	Show ''
	  Show $recs-written  ' records written to ' $file1
    Show $recs-written2 ' records written to ' $file2
	  Show $recs-written3 ' records written to ' $file3
	  Show $main-process  ' records read from main process'
	  Show ''
  Do Close-File
  
  Do Reset                   !reset.sqc
  Do Stdapi-Term             !stdapi.sqc
         
  Show 'Successful end of report'
End-Procedure

!***********************************************************************************
Begin-Procedure Close-File
!***********************************************************************************
#debug9 Show 'Close-File'
  Close 1
  If #filestat != 0
     Show 'Error closing output file.  Program terminating.'
     Stop
  End-If
End-Procedure

#include 'gexxx903.sqc'  !Get employee status multiple row table
#include 'gexxx911.sqc'  !
#include 'gexxx912.sqc'  !
#include 'gexxx920.sqc'  !Get ben single row run control
#include 'gexxx940.sqc'  !Get Coverage Elect multiple row table
#include 'gexxx951.sqc'
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'askaod.sqc'    !Ask-As-Of-Date procedure
