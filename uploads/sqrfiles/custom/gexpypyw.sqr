!****************************************************************************************
! GEXPYPYC:  This yearly vacation process for part-time employees will                  * 
!            calculate the correct amount of vacation dollars that the                  *
!            employee 'earned' in the last calendar year of employment.                 *
!            The vacation dollars are awarded at the beginning of the                   *
!            calendar year, prior to the first pay run of the year                      *
!                                                                                       *
!            This yearly process will execute for those employees that                  *
!            have at least one year of service as of the first of the                   *
!            year. Employees with less than one year service will                       *
!            receive their vacation on their service anniversary. Also,                 *
!            any employees that meet a milestone anniversary date                       *
!            receive their additional vacation(based on the vacation                    *
!            schedule) as of their service date.                                        *
!                                                                                       *
!            Additional vacation for EEs that meet milestone service                    *
!            anniversaries will be calculated in the weekly part-time                   *
!            vacation process.  This process is intended to compute                     *
!            earned vacation based on service as of the first of the                    *
!            calendar year.                                                             *
!                                                                                       *
!            Clone of GEXPYPTY ,Created this for the UNION CODE G07 and G08             *
!****************************************************************************************
!                                                                                       *
!               Confidentiality Information:                                            *
!                                                                                       *
! This module is the confidential and proprietary information of                        *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted                 *
! in any form, by any means, in whole or in part, nor is it to be used                  *
! for any purpose other than that for which it is expressly provided                    *
! without the written permission of Giant Eagle.                                        *
!                                                                                       *
!****************************************************************************************
!                         MODIFICATION HISTORY                                          *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *        
!***********************************************************************
!GEXHR_848_E2422_01  11/09/2015       Vahini Katta
!************************************************************************
                                                                                        
#include 'setenv.sqc' !Set environment                                                  
#include 'setup32.sqc'

!***********************************************************************
begin-setup
!***********************************************************************
  declare-report Vacation-Carry-Over-Report
Printer-Type=HPLASERJET
    layout=DEFAULT
  end-declare

  declare-report Report-log
Printer-Type=HPLASERJET
    layout=DEFAULT
  end-declare
!***********************************************************************
end-setup
!***********************************************************************
!***********************************************************************
begin-heading 7 for-reports=(report-log)
!***********************************************************************
  let $REPORTID = 'PYPYWLOG'
  move 'Part Time Vacation Calculation - Report Log' to $ReportTitle

 #Include 'stdhdg01.sqc'

  position          (+2)
  print 'Trans#'    (,1)
  print 'Emplid'    (,18)
  print 'Message'   (,50)
  print '-'         (+1,1,174) fill
!***********************************************************************
end-heading
!***********************************************************************

!***********************************************************************
begin-heading 7 for-reports=(Vacation-Carry-Over-Report)
!***********************************************************************
  move 'Vacation Carry Over Report' to $ReportTitle
  LET $REPORTID = 'PYPYWVAC'

 #Include 'stdhdg01.sqc'

  position (+2)

  print 'EmplID'            (,1)
  print 'Name'              (,20)
  print 'Effective Date'    (,55)
  print 'Earnings Code'     (,75)
  print 'Hourly Rate'       (,95)
  print 'Vacation Taken'    (,115)
  print 'Vacation Allowed'  (,135)

  print '-'                 (+1,1,9)  fill
  print '-'                 (,20,30)  fill
  print '-'                 (,55,14)  fill
  print '-'                 (,75,13)  fill
  print '-'                 (,95,11)  fill
  print '-'                 (,115,14) fill
  print '-'                 (,135,16) fill
!***********************************************************************
end-heading
!***********************************************************************

!***********************************************************************
begin-report
!***********************************************************************
  use-report Report-log

  Do Init-DateTime           !datetime.sqc
  Do Init-Number             !number.sqc
  Do Get-Current-DateTime    !curdttim.sqc
  Do Stdapi-Init             !stdapi.sqc

  move 'GEXPYPYW' to $ReportID
  move 'Part-Time Employee Vacation Calculation - Yearly' to $ReportTitle

  show '$ReportID='$ReportID
  show '$ReportTitle='$ReportTitle

  show 'Selecting runtime params'     

  Let $GEXXX970_Deptid_Alias  = 'A.Deptid'
  Let $GEXXX970_Jobcode_Alias = 'A.Jobcode'
  
  Let $GEXXX913_UNION_CD_Alias = 'A.UNION_CD'
  Do GEXXX913-Select-UNION-CD-Parameters
    
  Do GEXXX922-Select-Parameters 
   
   Let $As_Of_Date = $GEX_RC_PAY.ASOFDATE
    If Rtrim($As_Of_Date,' ') = ''
      Let $As_Of_Date = $AsOfToday
    End-If

   show '$As_Of_Date : ' $As_Of_Date 
  
  If $prcs_process_instance = ''
  
    Display 'Enter Deptid/Jobcode to exclude or leave blank to exit.'
    While 1=1
      Input $In-Deptid Maxlen=6 'Deptid'
      Uppercase $In-Deptid
      If Rtrim($In-Deptid, ' ') = ''
        Break
      Else
        Input $In-Jobcode Maxlen=6 'Jobcode'
        Uppercase $In-Jobcode
        If Rtrim($In-Jobcode, ' ') = ''
          Let $Exclude_Condition = '(' || $GEXXX970_Deptid_Alias || ' != '''  || $In-Deptid || ''')'
        Else
          Let $Exclude_Condition = '(' || $GEXXX970_Deptid_Alias ||                                      
                                         '||'                    ||
                                         $GEXXX970_Jobcode_Alias ||
                                         ' != '''  || $In-Deptid ||
                                                      $In-Jobcode || ''')'
        End-If
        Add 1 To #GEX_RC_DPTJC_ROWS
        If #GEX_RC_DPTJC_ROWS = 1
          Let $GEXXX970_EXCLUDE_DEPTID_JOBCODE_CRITERIA = '(' || $Exclude_Condition
        Else
          Let $GEXXX970_EXCLUDE_DEPTID_JOBCODE_CRITERIA = $GEXXX970_EXCLUDE_DEPTID_JOBCODE_CRITERIA || ' And '  || $Exclude_Condition
        End-If
      End-If
    End-While

    If #GEX_RC_DPTJC_ROWS = 0
      Let $GEXXX970_EXCLUDE_DEPTID_JOBCODE_CRITERIA = '1=1'
      Let $GEXXX970_EXCLUDE_DEPTID_JOBCODE_DISPLAY_CRITERIA = 'NONE'
    Else
      Let $GEXXX970_EXCLUDE_DEPTID_JOBCODE_CRITERIA = $GEXXX970_EXCLUDE_DEPTID_JOBCODE_CRITERIA || ')'
      Let $GEXXX970_EXCLUDE_DEPTID_JOBCODE_DISPLAY_CRITERIA = $GEXXX970_EXCLUDE_DEPTID_JOBCODE_CRITERIA
    End-If

  Else
   
    Do GEXXX970-Select-Deptid-Jobcode-Parameters
  End-If
  
  date-time () HH:MI:SS &timeBegan
  date-time () MM/DD/YYYY &dateBegan
  show ' '
  show 'Report Began at ' &timeBegan ' on ' &dateBegan
  show ' '
  show '$As_Of_Date :' $As_Of_Date
  do Convert-To-DTU-Date($As_Of_Date, $AsOfDate_dtu)
  show '$AsOfDate_dtu :' $AsOfDate_dtu
  do dtu-parse-date($AsOfDate_dtu, #Yr, #Month, #Day)
  Let $Year = edit(#Yr,'0000')
    
  Let #Next_year=#yr + 1
  Move #Next_Year to $Next_Year
  Let $Next_Year = edit(#Next_Year,'0000')

  let #AsOfYYYY = to_number($year)
  Let $AsOfDate   = '31-DEC-' || $year   
  do Convert-To-DTU-Date($AsOfDate, $AsOfDate_dtu)  
  Let $effdt      = '01-JAN-' || $next_year
  show '              ' 
  Show 'Current Year = ' $year
  Show 'Next Year    = ' $next_year
  Show '$AsOfDate    = ' $asofdate
  Show '$effdt       = ' $effdt
  Show '$AsOfDate_dtu= ' $asofdate_dtu
  show '              '
  
  do GEXREGTP_init_strings

  move 'N' to $Errorfound
  
  SHOW '$GEXREGTP_part_time_code_string  ' $GEXREGTP_part_time_code_string
    
  let $var = 'AND ( (A.REG_TEMP '||$GEXREGTP_part_time_code_string || '))'
  show '$var     ' $var
  show 'Union_cd ' $GEXXX913_INCLUDE_UNION_CD_CRITERIA   

  if $errorfound = 'N'
    move 'N' to $found
    let #inputtran = 0
    do Select-Employees 
   
  end-if
  
Report-Exit:

  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded
  show ' '
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded

  display ' '
  display #InputTran 999,999 noline
  display ' Transactions Processed'

  do Commit-Transaction
  !rollback
  !Do Rollback-Transaction
  do stdapi-term
!***********************************************************************
end-report
!***********************************************************************

!***********************************************************************
Begin-Procedure Select-Employees
!***********************************************************************
  show 'Union_cd ' $GEXXX913_INCLUDE_UNION_CD_CRITERIA
  show 'Exclude Deptid, Jobcode ' $GEXXX970_EXCLUDE_DEPTID_JOBCODE_CRITERIA
begin-select ON-ERROR=SQL-Error-Found
A.DEPTID
A.EMPLID
A.EMPL_RCD
A.EFFDT
A.REG_TEMP
A.COMPANY
A.UNION_CD
A.JOBCODE	 
A.FULL_PART_TIME
B.GEX_VCN_SENIOR_DT
B.SERVICE_DT

  move 'N' to $found
  move 'Y' to $Empl_found
  move 'N' to $skip_record

  move &A.EMPLID to $emplid
  move &A.DEPTID to $deptid
  move &A.UNION_CD to $union_cd
  SHOW        $emplid '/' $deptid '/' &A.jobcode '/'  $union_cd  '/' &A.COMPANY
  
  if RTRIM(&B.GEX_VCN_SENIOR_DT,' ') <> ''
    move &B.GEX_VCN_SENIOR_DT to $service_dt
  else
   let $GEXJOB_REH_EMPLID = &A.emplid
   let #GEXJOB_REH_EMPLRCD = &A.EMPL_RCD
   let $GEXJOB_REH_ASOFDATE = $AsOfDate
   do Get-Job-Rehire-Dt
    if rtrim($GEXJOB_REH_REHIRE_DT,' ') <> ''	
      do check-rei
      if $rei = 'Y'
        move &B.SERVICE_DT to $service_dt
      else
        move $GEXJOB_REH_REHIRE_DT to $service_dt	
      end-if
    else
      move &B.SERVICE_DT to $service_dt
    end-if
  end-if

  Let $Service_Cmp_Dt = strtodate($service_dt,'DD-MON-YYYY')	
  
  let $svc_date_yyyymmdd = datetostr(strtodate($service_dt,'DD-MON-YYYY'),'YYYYMMDD')
    Do format-datetime ($service_dt,$service_dt_cmp,{DEFCMP},'','')    			
                          
    let $scv_met = 'N'
    do Convert-To-DTU-Date($service_dt, $service_dt_dtu)
    do dtu-diff-years($service_dt_dtu, $AsOfDate_dtu, #dtu_years)
    show '#dtu_years: ' #dtu_years
  
  if $skip_record = 'N'
     if #dtu_years >= 1
        add 1 to #inputtran

        do calc-vacation-amount
        show '#eligible_weeks:' #eligible_weeks
        show '#week_vac_amt  :' #week_vac_amt
        
        let #year_vac_amt = #week_vac_amt * #eligible_weeks
        
        show '#year_vac_amt  :' #year_vac_amt
        multiply 1 times #year_vac_amt round=2
 
        if #year_vac_amt < 0
           let #year_vac_amt = 0
        end-if

        do average-hours-worked

        If #avg_weekly_hrs_worked = 0
           let #vac_hourly_rt = 0
        Else
           let #vac_hourly_rt = #week_vac_amt/#avg_weekly_hrs_worked
        End-If
        show '#avg_weekly_hrs_worked :' #avg_weekly_hrs_worked
        show '#vac_hourly_rt         :' #vac_hourly_rt
        do print-vacation-carry-over-data
        do check-existing-PTvac-erncd
        do insert-addl-pay-data
       
        do closeout-prior-yr
        if $prior_found ='Y'
           do updt-addl-pay-data
        end-if
       
     end-if
  end-if

FROM   PS_EMPLOYMENT B,
       PS_JOB        A
WHERE  A.EMPLID           = B.EMPLID 
AND    A.EMPL_RCD        = B.EMPL_RCD
AND [$GEXXX913_INCLUDE_UNION_CD_CRITERIA]		
AND    A.EMPL_STATUS NOT IN ('T','R','U','Q','D')
AND    A.EFFDT            =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID      = A.EMPLID
       AND    EMPL_RCD   = A.EMPL_RCD
       AND    EFFDT      <= $AsOfDate)
AND    A.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID      = A.EMPLID
       AND    EMPL_RCD   = A.EMPL_RCD
       AND    EFFDT       = A.EFFDT)
       ![$var]
    AND [$GEXXX970_EXCLUDE_DEPTID_JOBCODE_CRITERIA] 
ORDER  BY A.EMPLID
End-Select

  if $Empl_found <> 'Y'
    show 'No employees found to calculate part time vacation amounts'
  end-if
  
!***********************************************************************  
End-Procedure
!***********************************************************************

!***********************************************************************
begin-procedure check-rei
!***********************************************************************
  let $rei = 'N'
begin-select
C.ACTION_REASON

  If &C.ACTION_REASON  = 'REI'
    let $rei = 'Y'
  End-If
FROM   PS_JOB C
WHERE  C.EMPLID          = &A.EMPLID
AND    C.EMPL_RCD       = &A.EMPL_RCD
AND    C.EFFDT           =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID     = C.EMPLID
       AND    EMPL_RCD  = C.EMPL_RCD
       AND    EFFDT     <= &A.EFFDT
       AND    ACTION     = 'REH')
AND    C.EFFSEQ          =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID     = C.EMPLID
       AND    EMPL_RCD  = C.EMPL_RCD
       AND    EFFDT      = C.EFFDT
       AND    ACTION     = C.ACTION)
AND    C.ACTION          = 'REH'
end-select

!***********************************************************************
end-procedure
!***********************************************************************

!****************************************************************************************
begin-procedure get-prior-store
!****************************************************************************************
  let $prior_deptid = ' '
begin-select
prev.deptid

	let $prior_deptid = &prev.deptid

FROM   PS_JOB prev
WHERE  prev.EMPLID       = &A.EMPLID
AND    prev.EMPL_RCD     = &A.EMPL_RCD
AND    prev.EFFDT  =
      (SELECT MAX(EFFDT) FROM  PS_JOB
       WHERE  EMPLID     = prev.EMPLID
       AND    EMPL_RCD   = prev.EMPL_RCD
       AND    DEPTID      <> &a.deptid
       AND    EFFDT      <= &A.EFFDT)
AND    prev.EFFSEQ    =
      (SELECT MAX(EFFSEQ) FROM   PS_JOB
       WHERE  EMPLID     = prev.EMPLID
       AND    EMPL_RCD   = prev.EMPL_RCD
       AND    EFFDT      = prev.EFFDT)
AND    prev.deptid       <> &a.deptid
and    prev.empl_status in ('A','L','P','S')
end-select

 
!***********************************************************************
end-procedure
!***********************************************************************
!******************************************************************************
! This procedure finds out the total wages during the calendar year
! or during the service year depending on the service years.
! Also, calculates weekly vacation amount as two percent of total wages
! earned.  Determines the number of weeks the employee is eligible to
! take vacation for the next year depending on the service.
! Calculates the earned yearly vacation amount as the product of
! weekly vacation amount times the number of weeks the employee is eligible.
!*******************************************************************************
!***********************************************************************
begin-procedure calc-vacation-amount
!***********************************************************************

  do get-cal-year-wages
  move #cal_year_wages to #total_wages

  let #week_vac_amt = #total_wages * 0.02
  multiply 1 times #week_vac_amt round=2

  Show '#week_vac_amt: ' #week_vac_amt
  Show '$union_cd: ' $union_cd
  show '$Service_Cmp_Dt:' $Service_Cmp_Dt
   
  if strtodate($Service_Cmp_Dt) < '29-MAY-2010' 
           evaluate #dtu_years 
            when >= 12
              move 4 to #eligible_weeks 
              break
            when >= 7
              move 3 to #eligible_weeks 
              break
            when >= 3
              move 2 to #eligible_weeks
              break
            when >= 1
              move 1 to #eligible_weeks
              break
            when-other
              move 0 to #eligible_weeks 
              break 
            end-evaluate
   Else   
       if strtodate($Service_Cmp_Dt) >= '29-MAY-2010'
          evaluate #dtu_years 
            when >= 7
              move 3 to #eligible_weeks 
              move 3 to #max_eligible_weeks
              break
            when >= 3
              move 2 to #eligible_weeks
              move 2 to #max_eligible_weeks
              break
            when >= 1
              move 1 to #eligible_weeks
              move 1 to #max_eligible_weeks
              break
            when-other
            move 0 to #eligible_weeks 
            break 
            end-evaluate
       End-If      
   End-If  	

   Show '#eligible_weeks from calc-vacation-amount proc: ' #eligible_weeks
   show '#max_eligible_weeks from calc-vacation-amount proc:' #max_eligible_weeks    
 
end-procedure   
 
!********************************************************************
!This procedure calculates the total wages employee paid during the 
!calendar year.
!********************************************************************

begin-procedure get-cal-year-wages
   let #cal_year_wages = 0
   Let $GEXXX900_Company_Alias = 'F.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA
   show  &A.EMPLID  '/'  &A.EMPL_RCD '/'  &A.COMPANY '/'  #AsOfYYYY
begin-select on-error=sql-error-found
SUM(F.GRS_YTD) &F.GRS_YTD

  move &F.GRS_YTD to #cal_year_wages

  Show 'get-cal-year-wages: ' #cal_year_wages
 
FROM   PS_EARNINGS_BAL F

WHERE  F.EMPLID            = &A.EMPLID
AND    F.EMPL_RCD          = &A.EMPL_RCD
AND   ( F.COMPANY 	   > '999' or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] )  
AND    F.BALANCE_ID        = 'CY'
AND    F.BALANCE_YEAR      = #AsOfYYYY
AND    F.BALANCE_PERIOD    =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID       = F.EMPLID
       AND    EMPL_RCD     = F.EMPL_RCD
       AND    COMPANY      = F.COMPANY
       AND    BALANCE_ID   = F.BALANCE_ID
       AND    BALANCE_YEAR = F.BALANCE_YEAR
       AND    SPCL_BALANCE = F.SPCL_BALANCE
       AND    ERNCD        = F.ERNCD)
AND    F.SPCL_BALANCE      = 'N'
AND    F.ERNCD        NOT IN ('ADJ','525','602','650','651','DDP')  
end-select
!***********************************************************************
end-procedure
!***********************************************************************

!**************************************************************
!This procedure calculates the average hours worked during the 
!calendar year.
!**************************************************************
!***********************************************************************
begin-procedure average-hours-worked
!***********************************************************************
   let #avg_weekly_hrs_worked = 0
   Let $GEXXX900_Company_Alias = 'J.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA
begin-select on-error=sql-error-found
SUM(J.HRS_YTD) &J.HRS_YTD

  let #avg_weekly_hrs_worked = &J.HRS_YTD / 52
  multiply 1 times #avg_weekly_hrs_worked round=2
  Show 'J.HRS_YTD: ' &J.HRS_YTD
  Show '#avg_weekly_hrs_worked: ' #avg_weekly_hrs_worked
   
FROM   PS_EARNINGS_BAL J
WHERE  J.EMPLID            = &A.EMPLID
AND    J.EMPL_RCD          = &A.EMPL_RCD
AND   ( J.COMPANY 	   > '999'	or [$GEXXX900_INCLUDE_COMPANY_CRITERIA])  
AND    J.BALANCE_ID        = 'CY'
AND    J.BALANCE_YEAR      = #AsOfYYYY
AND    J.BALANCE_PERIOD    =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID       = J.EMPLID
       AND    EMPL_RCD     = J.EMPL_RCD
       AND    COMPANY      = J.COMPANY
       AND    BALANCE_ID   = J.BALANCE_ID
       AND    BALANCE_YEAR = J.BALANCE_YEAR
       AND    SPCL_BALANCE = J.SPCL_BALANCE
       AND    ERNCD        = J.ERNCD)
AND    J.SPCL_BALANCE      = 'Y'
AND    J.ERNCD             = 'WK1'

end-select
!***********************************************************************
end-procedure
!***********************************************************************

!***********************************************************************
!This procedure calculates the total absentee days of the employee 
!during the service year or calendar year as determined by the service
!years.
!***********************************************************************
!***********************************************************************
begin-procedure calc-total-absence-period
!***********************************************************************
  move '31-DEC-' to $RFL_date
  concat $year with $RFL_date
  move '01-JAN-' to $start_date
  concat $year with $start_date

  move 'N' to $No_More_Absence
  let #total_absence = 0

!**********************************************************************
!Need to find out the absence period by ignoring the actions PLA/FML,
!or PLA/WC2 or LOA/DIS (if the employee belongs to G01), otherwise, 
!if the employee does not belong to G01, just ignore PLA/FML and 
!calculate the absence period
!**********************************************************************

  while $No_More_Absence = 'N'
        let $ignore_string = 'AND G.ACTION||G.ACTION_REASON NOT IN (''PLAFML'')'
        do select-LOA-periods
  end-while
!***********************************************************************  
end-procedure
!***********************************************************************

!*********************************************************************
!This procedure adjusts the already calculated earned yearly vacation
!amount depending on the total absence period during the last service 
!year or during the last calendar year.(Determined by the Number of 
!service years). 
!*********************************************************************
!***********************************************************************
begin-procedure adjust-year-vac-amt
!***********************************************************************
  if #total_absence <= 90
    goto skip-adjust
  end-if

  if #total_absence > 90 and #total_absence <= 180
     multiply 0.25 times #eligible_weeks
  else    !> 180 days
    move '31-DEC-' to $RFL_date
    concat $year with $RFL_date
    move '01-JAN-' to $start_date
    concat $year with $start_date

!******************************************************************
!If the total absence period calculated is greater than 180 days, 
!and the employee belongs to union code G01, need to find out the 
!total absence period agian by ignoring only PLA/FML(FMLA Leave)
!and PLA/WC2(Workers Compensation).
!******************************************************************

    move 'N' to $No_More_Absence
    
    if #total_absence > 180 and #total_absence <= 270 
       multiply 0.5 times #eligible_weeks
    else   ! > 270 days
       let #eligible_weeks = 0
    end-if
  end-if

skip-adjust:

!***********************************************************************  
end-procedure
!***********************************************************************


!*********************************************************************
!This procedure calculates the total absence period. It finds each
!Leave of absence start date and end date during the year
!and adds them together. It enables to sum all the days, the employee
!was in Leave of Absence during the year even though he/she
!uses it multiple times.
!*********************************************************************
!***********************************************************************
begin-procedure select-LOA-Periods
!***********************************************************************
   do select-starting-absence-date

   if $No_More_Absence = 'N'
      do convert-to-dtu-date(&G.EFFDT,$Start_dt_dtu)
   else
      goto skip-process
   end-if
   
   let $ignore_string = 'AND H.ACTION||H.ACTION_REASON NOT IN (''PLAFML'')'
   
   do select-RFL-date

   if $RFL_date_found = 'Y'
      do Convert-To-Dtu-date(&H.EFFDT,$RFL_dt_dtu)
   else
      do convert-to-dtu-date($RFL_date,$RFL_dt_dtu)
      move 'Y' to $No_More_Absence
   end-if

   do dtu-diff-days($Start_dt_dtu,$RFL_dt_dtu,#diff_days)
   add #diff_days to #total_absence

   do convert-from-dtu-date($RFL_dt_dtu,$start_date)

skip-process:
!***********************************************************************
end-procedure
!***********************************************************************


!**********************************************************************
!This procedure selects the each Leave of Absence period's start date
!**********************************************************************
!***********************************************************************
begin-procedure select-starting-absence-date
!***********************************************************************
  move 'N' to $found

Begin-Select on-error=sql-error-found
G.EFFDT

  move 'Y' to $found
  
FROM   PS_JOB G
WHERE  G.EMPLID           = &A.EMPLID
AND    G.EMPL_RCD        = &A.EMPL_RCD
AND    G.EFFDT            =
      (SELECT MIN(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID      = G.EMPLID
       AND    EMPL_RCD   = G.EMPL_RCD
       AND    EMPL_STATUS = G.EMPL_STATUS
       AND    EFFDT       > $Start_date
       AND    EFFDT      <= $RFL_date)
AND    G.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID      = G.EMPLID
       AND    EMPL_RCD   = G.EMPL_RCD
       AND    EMPL_STATUS = G.EMPL_STATUS
       AND    EFFDT       = G.EFFDT)
AND G.EMPL_STATUS      = 'P'  
  [$ignore_string]
end-select

  if $found = 'N'
    move 'Y' to $No_More_Absence
  end-if

!***********************************************************************  
end-procedure  
!*********************************************************************** 

!*****************************************************************
!This procedure selects each Leave of Absence period's end date
!*****************************************************************
!***********************************************************************
begin-procedure select-RFL-date
!***********************************************************************
  move 'N' to $RFL_date_found
Begin-Select on-error=sql-error-found
H.EFFDT
  move 'Y' to $RFL_date_found
FROM   PS_JOB H

WHERE  H.EMPLID           = &A.EMPLID
AND    H.EMPL_RCD        = &A.EMPL_RCD
AND    H.EFFDT            =
      (SELECT MIN(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID      = H.EMPLID
       AND    EMPL_RCD   = H.EMPL_RCD
       AND    EMPL_STATUS = H.EMPL_STATUS
       AND    EFFDT       > &G.EFFDT
       AND    EFFDT      <= $RFL_date)
AND    H.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID      = H.EMPLID
       AND    EMPL_RCD   = H.EMPL_RCD
       AND    EMPL_STATUS = H.EMPL_STATUS
       AND    EFFDT       = H.EFFDT)
AND    H.EMPL_STATUS    <> 'P'  
  [$ignore_string]
end-select
!***********************************************************************
end-procedure 
!***********************************************************************  

!*********************************************************************
!This procedure finds if there are any hours worked by the employee
!during the year other than workers compensation (509 - ERNCD)
!*********************************************************************
!***********************************************************************
begin-procedure check-earnings-balance
!***********************************************************************

   Let $GEXXX900_Company_Alias = 'E1.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA

Begin-Select on-error=sql-error-found
Sum(E1.HRS_YTD) &hrs_ytd
  
  if &hrs_ytd > 0
    move 'Y' to $Worked
  end-if

      
FROM   PS_EARNINGS_BAL E1
WHERE  E1.EMPLID              = &A.EMPLID
AND    E1.EMPL_RCD            = &A.EMPL_RCD
AND   ( E1.COMPANY             > '999'       or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] ) 
AND    E1.BALANCE_ID          = 'CY'
AND    E1.BALANCE_YEAR        = #AsOfYYYY
AND    E1.BALANCE_PERIOD      =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID          = E1.EMPLID
       AND    EMPL_RCD        = E1.EMPL_RCD
       AND    COMPANY         = E1.COMPANY
       AND    BALANCE_ID      = E1.BALANCE_ID
       AND    BALANCE_YEAR    = E1.BALANCE_YEAR
       AND    SPCL_BALANCE    = E1.SPCL_BALANCE
       AND    ERNCD           = E1.ERNCD)
AND    E1.SPCL_BALANCE        = 'N'
AND    E1.ERNCD          NOT IN ('ADJ','509','525','602','650','651','DDP')    
AND    E1.HRS_YTD             > 0
end-select
!***********************************************************************
end-procedure   
!***********************************************************************


!*********************************************************************
!This procedure prints any vacation balances that are being carried
!over for the employee.
!*********************************************************************
!***********************************************************************
Begin-Procedure print-vacation-carry-over-data
!***********************************************************************
  move '31-DEC-' to $RFL_date
  concat $year with $RFL_date
  move '01-JAN-' to $start_date
  concat $year with $start_date

use-report Vacation-Carry-Over-report

Begin-Select on-error=sql-error-found
I.EMPLID     (+1,1)
P.NAME       (,20)
I.EFFDT      (,55)
I.ERNCD      (,75)
I.HOURLY_RT  (,95)    Edit 999,990.00
I.GOAL_BAL   (,115)   Edit 999,990.00
I.GOAL_AMT   (,135)   Edit 999,990.00

FROM   PS_ADDL_PAY_DATA I,
       PS_PERSONAL_DATA P
WHERE  I.EMPLID          = &A.EMPLID
AND    I.EMPL_RCD       = &A.EMPL_RCD
AND    I.EMPLID          = P.EMPLID
AND    I.EFFDT           =
      (SELECT MAX(EFFDT)
       FROM   PS_ADDL_PAY_DATA
       WHERE  EMPLID     = I.EMPLID
       AND    EMPL_RCD  = I.EMPL_RCD
       AND    EFFDT     >= $Start_date
       AND    EFFDT     <= $RFL_date)
AND    I.ERNCD           = '515'
AND   (I.GOAL_AMT - I.GOAL_BAL) > 0
end-select
use-report report-log
!***********************************************************************
end-procedure
!***********************************************************************

!***************************************************************************
!This procedure tries to find if the PT Vacation Earnings Code (515) is
!defined in ADDL_PAY_ERNCD table. If there is, inserts a row in 
!ADDL_PAY_EFFDT with next pay begin date as the effective date. Otherwise,
!inserts the earning code 515 in the ADDL_PAY_ERNCD and also a row with
!effective date equal to next pay begin date in ADDL_PAY_EFFDT.
!***************************************************************************
!***********************************************************************
begin-procedure check-existing-PTVac-erncd
!***********************************************************************
  move 'N' to $found

begin-select on-error=sql-error-found
'K'
  move 'Y' to $found
  do insert-new-effdt
FROM   PS_ADDL_PAY_ERNCD K
WHERE  K.EMPLID    = &A.EMPLID
AND    K.EMPL_RCD = &A.EMPL_RCD
AND    K.ERNCD     = '515'
end-select

  if $found = 'N'
    do insert-PTVac-erncd
    do insert-new-effdt
  end-if
end-procedure


Begin-Procedure Insert-PTVac-Erncd
  begin-sql on-error=sql-error-found
    INSERT INTO PS_ADDL_PAY_ERNCD
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                RECORD_SOURCE)
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '515',
                'O')
  end-sql
!***********************************************************************  
end-procedure
!***********************************************************************

!***********************************************************************
Begin-Procedure Insert-new-effdt
!***********************************************************************
  begin-sql on-error=sql-error-found
    INSERT INTO PS_ADDL_PAY_EFFDT
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                EFFDT,
                RECORD_SOURCE)
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '515',
                $effdt,
                'O')
  end-sql
!***********************************************************************  
end-procedure
!***********************************************************************

!***********************************************************************
Begin-Procedure Insert-Addl-Pay-Data
!***********************************************************************
  show 'Insert-Addl-Pay-Data'
  show '&A.EMPLID                      :' &A.EMPLID
  show '&A.EMPL_RCD                    :' &A.EMPL_RCD
  show '$effdt                         :' $effdt
  show 'oth_hrs #avg_weekly_hrs_worked :' #avg_weekly_hrs_worked
  show 'HOURLY_RT #vac_hourly_rt       :' #vac_hourly_rt
  show 'OTH_PAY #week_vac_amt          :' #week_vac_amt
  show 'Goal Amt #year_vac_amt         :' #year_vac_amt
  begin-sql on-error=sql-error-found
    INSERT INTO PS_ADDL_PAY_DATA
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                EFFDT,
                ADDL_SEQ,
                DEPTID,
                JOBCODE,
                POSITION_NBR,
                ACCT_CD,
                GL_PAY_TYPE,
                ADDL_PAY_SHIFT,
                OTH_HRS,
                HOURLY_RT,
                OTH_PAY,
                ADDLPAY_REASON,
                SEPCHK,
                EARNINGS_END_DT,
                GOAL_AMT,
                GOAL_BAL,
                OK_TO_PAY,
                DISABLE_DIR_DEP,
                PRORATE_ADDL_PAY,
                PRORATE_CUI_WEEKS,
                PAY_PERIOD1,
                PAY_PERIOD2,
                PAY_PERIOD3,
                PAY_PERIOD4,
                PAY_PERIOD5,
                STATE,
                LOCALITY,
                TAX_PERIODS,
                TAX_METHOD,
                ADDL_PAY_FREQUENCY,
                DED_TAKEN,
                DED_SUBSET_ID,
                DED_TAKEN_GENL,
                DED_SUBSET_GENL,
                PLAN_TYPE,
            		BUSINESS_UNIT,
		            COMP_RATECD,
                RECORD_SOURCE)
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '515',
                $effdt,
                1,
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                #avg_weekly_hrs_worked, !oth_hrs
                #vac_hourly_rt,
                #week_vac_amt,
                ' ',
                0,
                '',
                #year_vac_amt,
                0,
                'N',
                ' ',
                ' ',
                ' ',
                'N',
                'N',
                'N',
                'N',
                'N',
                ' ',
                ' ',
                0,
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
              	' ',
		            'STDBU',                        
		            ' ',
                'O')
  end-sql
!***********************************************************************  
end-procedure
!***********************************************************************

!********************************************************************
begin-procedure closeout-prior-yr
!********************************************************************

  move 'N' to $prior_found

begin-select on-error=sql-error-found

L.EFFDT
 
  move 'Y' to $prior_found
 
FROM   PS_ADDL_PAY_DATA L
WHERE  L.EMPLID    = &A.EMPLID
AND    L.EMPL_RCD = &A.EMPL_RCD
AND    L.ERNCD     = '515'
AND    L.EARNINGS_END_DT IS NULL 
AND    L.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_ADDL_PAY_DATA
        WHERE L.EMPLID 	  = EMPLID
          AND L.EMPL_RCD = EMPL_RCD
          AND L.ERNCD 	  = ERNCD
          AND EFFDT       < $effdt)
     
end-select
!***********************************************************************
end-procedure
!***********************************************************************

!********************************************************************
Begin-Procedure Updt-Addl-Pay-Data
!********************************************************************
#debug9 Show 'Updt-Addl-Pay-Data'
  Begin-SQL on-error=sql-error-found
    Update ps_addl_pay_data
    Set    EARNINGS_END_DT     = $AsOfDate
    Where  EMPLID    = &A.EMPLID
    AND    EMPL_RCD = &A.EMPL_RCD
    AND    ERNCD     = '515'
    AND    EFFDT     = &L.EFFDT
  End-SQL
!***********************************************************************
End-Procedure
!***********************************************************************

!***********************************************************************
begin-procedure SQL-Error-Found
!***********************************************************************
  move 'Y' to $ErrorFound
  print $EmplID      (,18)
  print $_sql-error  (,35) 
!***********************************************************************  
end-procedure
!***********************************************************************


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getdatcd.sqc'  !Retrieves the asofyear, asofmonth etc.,
#Include 'datetime.sqc'  !Routines for date and time formatting
#include 'getasodt.sqc'  !Retrieves the as of date
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#include 'gexregtp.sqc'  !Translates the REG_TEMP to Full_Part_time
#Include 'gexxx922.sqc'  !Get GEX_RC_PAY run control parameters
#include 'gexxx970.sqc'  !Get multiple deptid/jobcode row table
#include 'gexxx900.sqc'  !Company
#include 'gexxx913.sqc'  !Union_cd 
#include 'gexrehdt.sqc'	 !GEX-MXT 03/24/2008 Fixed for REHIRE DT