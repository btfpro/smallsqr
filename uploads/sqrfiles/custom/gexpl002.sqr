!***********************************************************************
! GEXPL002:  ZERO REGULAR HOURS                                        *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
! GEXPL002 :            ZERO REGULAR HOURS                             *
!                                                                      *
! Narrative:            This program reports employees that have       *
!                       zero YTD regular earnings.                     *
!                                                                      *
! #Debugx Used:         #debug9 paragraph trace                        *
!                       #debug8 key variable values                    *
!                       #debug7 data returned from sql calls           *
!                                                                      *
! SQL Tables:           ps_pay_calendar                                *
!                       employment                                     *
!                       personal_data                                  *
!                       job                                            *
!                       ps_earnings_bal                                *
!                                                                      *
! Written by:           Jim Hutchison                                  *
!                                                                      *
! Normally Run:         Monthly                                        *
!                                                                      *
! Control Parms:        FOR WHERE CLAUSE:                              *
!                         Multiple Companies                           *
!                         Multiple Union Codes                         *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
! INITIALS  DATE        DESCRIPTION OF THE CHANGE                      *
!***********************************************************************
! JDH       02/17/99    Initial Creation                               *
! JDH       02/26/99    Add descending sort on effseq.                 *
! SXK       10/21/99    Modified to have union from job_labor          *
! AXL       12/13/99	Force into rule mode.	
! AXC	    08/02/2002	Add empl_rcd to join for EArnings Balance
!			remove job_labor from join. Union code now on Job
! GBD       07/15/02    Added Fieldvalue to effective dated selection  *
!                       of the Load-Lookup procedure.                  *
!***********************************************************************
! AMS       09/04/07    8.3 TO 9.0 UPGRADE RETROFIT
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and Page-Size Initialization


#define #column1     1
#define #column2    13
#define #column3    50
#define #column4    66
#define #column5    81
#define #column6    96
#define #column7   109
#define #column8   122
#define #column9   135
#define #column10  152
#define #column11  167


Begin-Report
#debug9 Show 'Begin-Report'
!  Do Alter-Session		!AXL - 12/13/99 - Set session to rule optimizer			!AMS 09/05/2007
  Do P100-Initialization
  Do P200-Main-Process
  Do P300-Finalization
End-Report


Begin-Heading 8
#debug9 Show 'Begin-Heading'
  #Include 'stdhdg02.sqc'

  Print $Reporting_Period      (3,) Center 

  if $PayGroup <> $priorPayGroup
    do Get-PayGroup-Data
    move $PayGroup to $priorPayGroup
  end-if

  print 'Pay Group'            (4,1)
  print $PayGroup              (0,13)
  print $PayGroupName          (0,17)

  Print 'EMPLOYEE'             (+2,{#column3})
  Print 'SERVICE'              (+0,{#column4})
  Print 'JOB'                  (+0,{#column5})
  Print 'EMPL'                 (+0,{#column6})
  Print 'ACTION'               (+0,{#column8})
  Print 'LAST DT'              (+0,{#column10})
  Print 'TERM'                 (+0,{#column11})

  Print 'STORE'                (+1,{#column1})
  Print 'NAME'                 (+0,{#column2})
  Print 'NUMBER'               (+0,{#column3})
  Print 'DATE'                 (+0,{#column4})
  Print 'CLASS'                (+0,{#column5})
  Print 'STATUS'               (+0,{#column6})
  Print 'ACTION'               (+0,{#column7})
  Print 'REASON'               (+0,{#column8})
  Print 'REG/TEMP'             (+0,{#column9})
  Print 'WORKED'               (+0,{#column10})
  Print 'DATE'                 (+0,{#column11})

  Print '-'                    (+1,{#column1},5)   Fill
  Print '-'                    (+0,{#column2},30)  Fill
  Print '-'                    (+0,{#column3},9)   Fill
  Print '-'                    (+0,{#column4},8)   Fill
  Print '-'                    (+0,{#column5},8)   Fill
  Print '-'                    (+0,{#column6},6)   Fill
  Print '-'                    (+0,{#column7},6)   Fill
  Print '-'                    (+0,{#column8},6)   Fill
  Print '-'                    (+0,{#column9},10)  Fill
  Print '-'                    (+0,{#column10},8)  Fill
  Print '-'                    (+0,{#column11},8)  Fill
End-Heading


Begin-Procedure P100-Initialization
#debug9 Show 'P100-Initialization'
  Do Init-DateTime           !datetime.sqc
  Do Init-Number             !number.sqc
  Do Get-Current-DateTime    !curdttim.sqc
  Do Stdapi-Init             !stdapi.sqc

  Let $ReportID      = 'GEXPL002'
  Let $ReportTitle   = 'ZERO REGULAR HOURS'

  Show '$ReportID    = ' $ReportID
  Show '$ReportTitle = ' $ReportTitle

  Let $GEXXX900_Company_Alias  = 'j.company'
!AXC jl.union_cd = j.union_cd . 8.3 Upgrade
  Let $GEXXX913_Union_Cd_Alias = 'j.union_cd' !SXK 10/21/99

  If $prcs_process_instance = ''
    Do P110-SQRW-Run-Controls
  Else
    Do P120-Process-Scheduler-Run-Controls
  End-If

  date-time () HH:MI:SS &timeBegan
  date-time () MM/DD/YYYY &dateBegan
  show 'Report Began at ' &timeBegan ' on ' &dateBegan

  Let $X000_Order_By = 'Company, Paygroup, DeptID, Employee Status, Name'

  Show '$GEXXX900_Include_Company_Display_Criteria  = ' $GEXXX900_Include_Company_Display_Criteria
  Show '$GEXXX913_Include_Union_Cd_Display_Criteria = ' $GEXXX913_Include_Union_Cd_Display_Criteria

  Do P130-Print-Cover-Page
  Do P140-Get-Last-Confirmed-Pay
  Do P170-Get-Xlat-Lookup
End-Procedure


Begin-Procedure P110-SQRW-Run-Controls
#debug9 Show 'P110-SQRW-Run-Controls'
  Let $CompanyString = ''''
  Display 'Enter Company or leave blank to exit.'
  While 1=1
    Input $In-Company Maxlen=3 'Company'
    Uppercase $In-Company
    If Rtrim($In-Company, ' ') = ''
      Concat '''' With $CompanyString
      Break
    End-If
    If $CompanyString <> ''''
      Concat ''',''' With $CompanyString
    End-If
    Concat $In-Company With $CompanyString
  End-While

  If $CompanyString = ''''''
    Let $GEXXX900_INCLUDE_COMPANY_CRITERIA = '1=1'
    Let $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX900_INCLUDE_COMPANY_CRITERIA = $GEXXX900_Company_Alias || ' In (' || $CompanyString || ')'
    Let $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA = $GEXXX900_INCLUDE_COMPANY_CRITERIA
  End-If


  Let $UnionCdString = ''''
  Display 'Enter Union Code or leave blank to exit.'
  While 1=1
    Input $In-UnionCd Maxlen=3 'Union Code'
    Uppercase $In-UnionCd
    If Rtrim($In-UnionCd, ' ') = ''
      Concat '''' With $UnionCdString
      Break
    End-If
    If $UnionCdString <> ''''
      Concat ''',''' With $UnionCdString
    End-If
    Concat $In-UnionCd With $UnionCdString
  End-While

  If $UnionCdString = ''''''
    Let $GEXXX913_INCLUDE_UNION_CD_CRITERIA = '1=1'
    Let $GEXXX913_INCLUDE_UNION_CD_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX913_INCLUDE_UNION_CD_CRITERIA = $GEXXX913_Union_CD_Alias || ' In (' || $UnionCdString || ')'
    Let $GEXXX913_INCLUDE_UNION_CD_DISPLAY_CRITERIA = $GEXXX913_INCLUDE_UNION_CD_CRITERIA
  End-If
End-Procedure


Begin-Procedure P120-Process-Scheduler-Run-Controls
#debug9 Show 'P120-Process-Scheduler-Run-Controls'
  Do GEXXX900-Select-Company-Parameters
  Do GEXXX913-Select-UNION-CD-Parameters
End-Procedure


begin-procedure P130-Print-Cover-Page
#debug9 Show 'P130-Print-Cover-Page'
  Print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'            (+5,1)
  Print '$Prcs_OprID          ='                                  (+2,5)
  Print $Prcs_OprID                                               (0,+2)
  Print '$Prcs_Run_Cntl_ID    ='                                  (+1,5)
  Print $Prcs_Run_Cntl_ID                                         (0,+2)

  Print 'SELECTION CRITERIA FOR THIS REPORT RUN:'                 (+5,2)
  Print '$GEXXX900_Include_Company_Display_Criteria          ='   (+1,5)
  Print $GEXXX900_Include_Company_Display_Criteria                (0,+2)
  Print '$GEXXX913_Include_Union_Cd_Display_Criteria         ='   (+1,5)
  Print $GEXXX913_Include_Union_Cd_Display_Criteria               (0,+2)

  Print 'SORT ORDER FOR THIS REPORT RUN:'   (+5,2)
  Print $X000_Order_By                      (+2,5)
End-Procedure


Begin-Procedure P140-Get-Last-Confirmed-Pay
#debug9 Show 'P140-Get-Last-Confirmed-Pay'
Begin-Select Loops=1
pay_end_dt
To_Number(To_Char(pay_end_dt,'MM'))          &balance_period
To_Number(To_Char(pay_end_dt,'YYYY'))        &balance_year
To_Char(pay_end_dt,'fmMonth YYYY')           &period

  Let $pay_end_dt       = &pay_end_dt
  Let #balance_year     = &balance_year
  Let #balance_period   = &balance_period
  Let $Reporting_Period = &period

  let #balance_qtr = #balance_period
  let #balance_qtr = ((#balance_qtr - 1)/ 3) + 1
  do Format-Number(#balance_qtr, $balance_qtr, '9.99') !avoid rounding the integer portion
  move $balance_qtr to $balance_qtr x     !save the integer portion
  let #balance_qtr = $balance_qtr

  Show 'Report will contain data for the month of ' $Reporting_Period
  Show 'Last confirmed pay end date:  ' $pay_end_dt

  If Rtrim($pay_end_dt,' ') = ''
    Show 'No confirmed pay period found in calendar'
    Stop
  End-If

From   ps_pay_calendar

Where  pay_end_dt         =
      (Select Max(pay_end_dt)
       From   ps_pay_calendar
       Where  pay_end_dt <= $AsOfToday
       And    pay_confirm_run = 'Y')

And    pay_confirm_run = 'Y'
End-Select
End-Procedure


begin-procedure P170-Get-Xlat-Lookup
#debug9 Show 'P170-Get-Xlat-Lookup'
  Let $Where = '     x.fieldname   = ''REG_TEMP''' ||
	       ' And x.eff_status  = ''A''' ||
!	       ' And x.language_cd = ''ENG''' ||                                      !    AMS 09/04/2007
	       ' And x.effdt       = (Select Max(effdt)' ||
!	       '                      From   xlattable x1' ||													!    AMS 09/04/2007		
	       '                      From   psxlatitem x1' ||                        !    AMS 09/04/2007
	       '                      Where  x1.fieldname    = x.fieldname' ||
!GBD 07/15/2002 Begin
!	       '                      And    x1.language_cd  = ''ENG''' ||
!	       '                      And    x1.language_cd  = x.language_cd' ||				!    AMS 09/04/2007
	       '                      And    x1.fieldvalue  = x.fieldvalue' ||
!GBD 07/15/2002 End
	       '                      And    x1.effdt       <= ''' || $pay_end_dt || '''' ||
	       '                      And    x1.eff_status   = ''A'')'


  Load-Lookup
    Name=XlatLookup
    Rows=10
!    Table='XLATTABLE X'					!    AMS 09/04/2007
    Table='PSXLATITEM X'					!    AMS 09/04/2007
    Key='X.FIELDVALUE'
    Return_Value='X.XLATSHORTNAME'
    Where=$Where
    Quiet
End-Procedure


Begin-Procedure P200-Main-Process
#debug9 Show 'P200-Main-Process'
Begin-Select
J.COMPANY  ()  On-Break
               Level=1
               Print=Never
               Save=$Save_Company
               After=P240-After-Company-Break

J.PAYGROUP ()  On-Break
               Level=2
               Print=Never
               Save=$Save_Paygroup
               Before=P250-Before-Paygroup-Break

J.DEPTID
J.EMPLID
J.EMPL_RCD
J.EFFDT
J.POSITION_NBR
J.EMPL_STATUS
J.REG_TEMP

E.SERVICE_DT
E.TERMINATION_DT

PD.NAME

  Do P210-Earnings-Bal

  If #gross_ytd = 0
    Let $Data-Found-Flag = 'Y'

    Let $Company  = &J.COMPANY
    Let $Paygroup = &J.PAYGROUP

    Add 1 To #company-count

    Do P220-Get-First-Status-Row
    Do P230-Print-Record
  End-If

FROM   PS_PERSONAL_DATA PD,
       PS_EMPLOYMENT    E,
       PS_JOB           J
!AXC Remove join, PS_JOB_LABOR JL  !SXK 10/21/99

WHERE  PD.EMPLID              = J.EMPLID

AND    E.EMPLID               = J.EMPLID
AND    E.EMPL_RCD            = J.EMPL_RCD

!AXC Job Labour is now a view. Fields are on Job. 8.3 UPgrade
!SXK 10/21/1999 begin
!AND    JL.EMPLID    = J.EMPLID
!AND    JL.EMPL_RCD = J.EMPL_RCD

!AND    JL.EFFDT                =
!      (SELECT MAX(EFFDT)
!       FROM   PS_JOB_LABOR
!       WHERE  EMPLID          = JL.EMPLID
!       AND    EMPL_RCD       = JL.EMPL_RCD
!       AND    EFFDT          <= $pay_end_dt)

!AND    Jl.EFFSEQ               =
!      (SELECT MAX(EFFSEQ)
!       FROM   PS_JOB_LABOR
!       WHERE  EMPLID          = JL.EMPLID
!       AND    EMPL_RCD       = JL.EMPL_RCD
!       AND    EFFDT           = JL.EFFDT)
!SXK 10/21/1999 end

AND    J.EFFDT                =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID          = J.EMPLID
       AND    EMPL_RCD       = J.EMPL_RCD
       AND    EFFDT          <= $pay_end_dt)

AND    J.EFFSEQ               =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID          = J.EMPLID
       AND    EMPL_RCD       = J.EMPL_RCD
       AND    EFFDT           = J.EFFDT)

AND   [$GEXXX900_Include_Company_Criteria]
AND   [$GEXXX913_Include_Union_Cd_Criteria]

ORDER BY J.COMPANY,
         J.PAYGROUP,
         J.DEPTID,
         J.EMPL_STATUS,
         PD.NAME

End-Select
End-Procedure


Begin-Procedure P210-Earnings-Bal
#debug9 Show 'P210-Earnings-Bal'
  Let #gross_ytd  = 0

Begin-Select
EB.GRS_YTD

  Let #gross_ytd  = &EB.GRS_YTD

FROM   PS_EARNINGS_BAL  EB

WHERE  EB.EMPLID              = &J.EMPLID
!AXC Empl rcd now part of earnings balance key. 8.3 upgrade
AND    EB.EMPL_RCD	      = &J.EMPL_RCD
!End AXC
AND    EB.COMPANY             = &J.COMPANY

AND    EB.BALANCE_ID          = 'CY'

AND    EB.BALANCE_YEAR        = #balance_year

AND    EB.BALANCE_PERIOD      =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID          = EB.EMPLID
       AND    EMPL_RCD        = EB.EMPL_RCD
       AND    COMPANY         = EB.COMPANY
       AND    BALANCE_ID      = EB.BALANCE_ID
       AND    BALANCE_YEAR    = EB.BALANCE_YEAR
       AND    BALANCE_PERIOD <= #balance_period
       AND    SPCL_BALANCE    = EB.SPCL_BALANCE
       AND    ERNCD           = EB.ERNCD)

AND    EB.SPCL_BALANCE        = 'N'
AND    EB.ERNCD               = 'REG'
End-Select
End-Procedure


Begin-Procedure P220-Get-First-Status-Row
#debug9 Show 'P220-Get-First-Status-Row'
  Let $Reg-Temp-Change = 'N'
  Let $Status-Change = 'N'

Begin-Select
JOB.EFFDT
JOB.EMPL_STATUS
JOB.REG_TEMP
JOB.ACTION
JOB.ACTION_REASON
JOB.LAST_DATE_WORKED

  If &J.EMPL_STATUS = 'L'  Or
     &J.EMPL_STATUS = 'P'
    If &JOB.EMPL_STATUS = &J.EMPL_STATUS And
       $Status-Change = 'N'
      Let $Effective-Date   = &JOB.EFFDT
      Let $Action           = &JOB.ACTION
      Let $Action_Reason    = &JOB.ACTION_REASON
      Let $Last_Date_Worked = &JOB.LAST_DATE_WORKED
      Let $Status-Change = 'N'
    Else
      Let $Status-Change = 'Y'
    End-If
  Else
    If &JOB.REG_TEMP = &J.REG_TEMP And
       $Reg-Temp-Change = 'N'
      Let $Effective-Date   = &JOB.EFFDT
      Let $Action           = &JOB.ACTION
      Let $Action_Reason    = &JOB.ACTION_REASON
      Let $Last_Date_Worked = &JOB.LAST_DATE_WORKED
      Let $Reg-Temp-Change = 'N'
    Else
      Let $Reg-Temp-Change = 'Y'
    End-If
  End-If

FROM   PS_JOB JOB

WHERE  EMPLID     = &J.EMPLID
AND    EMPL_RCD  = &J.EMPL_RCD
AND    EFFDT     <= &J.EFFDT
ORDER BY JOB.EFFDT DESC, JOB.EFFSEQ DESC
End-Select
End-Procedure


Begin-Procedure P230-Print-Record
#debug9 Show 'P230-Print-Record'
  Lookup XlatLookup &j.reg_temp $reg_temp

  Do Format-DateTime($Effective-Date, $effdt, {DEFDATE}, '', '')
  Do Format-DateTime(&e.service_dt, $service_dt, {DEFDATE}, '', '')
  Do Format-DateTime($last_date_worked, $lastdtworked, {DEFDATE}, '', '')
  Do Format-DateTime(&e.termination_dt, $termination_dt, {DEFDATE}, '', '')

  Print &j.deptid              (+1,{#column1})
  Print &pd.name               (+0,{#column2})
  Print &j.emplid              (+0,{#column3})
  Print $service_dt            (+0,{#column4})
  Print &j.position_nbr        (+0,{#column5})
  Print &j.empl_status         (+0,{#column6})
!  Print $effdt                (+0,{#column7})
  Print $Action                (+0,{#column7})
  Print $Action_Reason         (+0,{#column8})
  Print $reg_temp              (+0,{#column9})
  Print $lastdtworked          (+0,{#column10})
  Print $termination_dt        (+0,{#column11})
End-Procedure


Begin-Procedure P240-After-Company-Break
#debug9 Show 'P240-After-Company-Break'
  If #company-count > 0
    Print 'Total Employees for Company'   (+2,1)
    Print $Save_Company                   (,+1)
    Print #company-count                  (,+1)  Edit 999,999,999

    Add #company-count To #report-count
    Let #company-count = 0
  End-If
End-Procedure


Begin-Procedure P250-Before-Paygroup-Break
#debug9 Show 'P250-Before-Paygroup-Break'
  New-Page
End-Procedure


Begin-Procedure P300-Finalization
#debug9 Show 'P300-Finalization'
  If $Data-Found-Flag <> 'Y'
    New-Page
    Print 'NO DATA SELECTED FOR THIS REPORT RUN' (25,)  Center
  Else
    Print 'Total Employees for the report:'      (+2,1)
    Print #report-count                          (,+1)  Edit 999,999,999
  End-If

  Do Reset                   !reset.sqc
  Do Stdapi-Term             !stdapi.sqc

  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded

  Show 'Successful end of report'
End-Procedure


#include 'gexxx900.sqc'  !Get company multiple row table
#include 'gexxx913.sqc'  !Get union code multiple row table
#include 'gexaltse.sqc'  !Alter session SQC
#include 'getcodta.sqc'  !Get-Company-Data procedure
#include 'getpgdta.sqc'  !Get-Paygroup-Data procedure
#Include 'stdapi.sqc'    !Process Scheduler Interface
#Include 'reset.sqc'     !Reset Printer Procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime Procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'datemath.sqc'  !Routines for date math
