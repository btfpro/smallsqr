!***********************************************************************
! GEXPY149:  This quarterly report will show who paid Income tax       *
!            during the previous quarter.                              *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  INITIALS    DATE           DESCRIPTION OF THE CHANGE                *
!***********************************************************************
!  VENDAXG     03/16/2009     INITIAL CREATION                         *
!                                                                      *
!***********************************************************************


#include 'setenv.sqc' !Set environment

Begin-Report
    
  do Initialization  
  do report
  do Commit-Transaction
  do Close-File 
  do stdapi-term
  do reset
End-Report

!****************************************************************************
Begin-Procedure Initialization

  do Init-DateTime
  do Init-Number
  do stdapi-init
  
  Let $ReportID      = 'GEXPY149'  
  Let $GEXPY149_Locality_Alias  = 'B.LOCALITY' ! added to access locality run time
  
  !show $GEXPY149_Locality_Alias 
  
 If $prcs_process_instance = ''
    Input $balance_year Maxlen=4 'Balance Year'
    Input $balance_qtr  Maxlen=2 'Balance Quarter'
    Let #balance_year = $balance_year
    Let #balance_qtr  = $balance_qtr
  Else
    Do Select-Parameters
    Let #balance_year = &GEX_RC_GEXPY149.Balance_Year
    Let #balance_qtr  = &GEX_RC_GEXPY149.Balance_Qtr
    Let $Locality     = &GEX_RC_GEXPY149.Locality
    Do GEXPY149-Select-Locality-Parameters
  End-If

  If #balance_year = 0 Or
     #balance_qtr  = 0
    Do Get-Default-Quarter
  End-If

  Move #balance_year To $balance_year 9999
  Move #balance_qtr  To $balance_qtr  9
  
   do Open-File
   
   let $file_header='Tax Year,Tax Quarter,SSN,Last Name,First Name,Middle Initial,Address 1,Address 2,City,State,Zip Code,Amount,PSD Number,Resident Code'
   write 2 from $file_header
   
End-Procedure  
 
!****************************************************************************
Begin-Procedure Select-Parameters

begin-select

GEX_RC_GEXPY149.BALANCE_YEAR
GEX_RC_GEXPY149.BALANCE_QTR
GEX_RC_GEXPY149.LOCALITY

FROM PS_GEX_RC_GEXPY149 GEX_RC_GEXPY149

WHERE GEX_RC_GEXPY149.OPRID          = $Prcs_OprID
AND   GEX_RC_GEXPY149.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
         
end-select

End-Procedure 

!****************************************************************************
Begin-Procedure Get-Default-Quarter
begin-select loops=1
balance_year
balance_period

  let #balance_year   = &balance_year
  let #balance_period = &balance_period

  let #balance_qtr = #balance_period
  let #balance_qtr = ((#balance_qtr - 1)/ 3) + 1
  do Format-Number(#balance_qtr, $balance_qtr, '9.99') !avoid rounding the integer portion
  move $balance_qtr to $balance_qtr x     !save the integer portion
  let #balance_qtr = $balance_qtr

  evaluate #balance_qtr
    when = 1
      subtract 1 from #balance_year
      let #balance_qtr = 4
      break
    when-other
      subtract 1 from #balance_qtr
  end-evaluate

from   ps_balance_id_def
where  balance_id = 'CY'
and    sysdate between begin_dt and end_dt
end-select
End-Procedure

!****************************************************************************
Begin-Procedure Open-File
       
      Let $Member_File   = '{OUTFILE}' || Lower($ReportID) || '_' ||$prcs_process_instance|| '.csv'
     !  Let $Member_File   = '{OUTFILE}' || Lower($ReportID) || '.csv'
      OPEN $Member_File as 2 for-writing record=480:vary status = #Open_mem_cp
   
    
   if (#Open_mem_cp <> 0)
      let $Error-Message = 'PROGRAM ABORTED - Problem opening file : ' || $Member_File
      show $Error-Message
      STOP
   end-if
 
End-Procedure

!****************************************************************************
Begin-Procedure Report
  
  move 'N' to $Errorfound
  do Process-Employee-Data
  
End-Procedure

!****************************************************************************
Begin-Procedure Process-Employee-Data
  !show 'kedar commented '$GEXPY149_INCLUDE_LOCALITY_CRITERIA
  move 'N' to $errorfound
  move 'N' to $found
begin-select
!/*+ index(c,ps_personal_data) */  

B.BALANCE_YEAR 
B.BALANCE_QTR 
B.EMPLID
C.LAST_NAME 
C.FIRST_NAME 
C.MIDDLE_NAME
C.ADDRESS1 
C.ADDRESS2 
C.CITY 
C.STATE 
C.POSTAL 
B.TAX_QTD 
B.TXGRS_QTD 
B.LOCALITY                  ! ADDED FOR TESTING

           do print-detail-info
           
FROM   PS_PERSONAL_DATA  C, 
       PS_TAX_BALANCE    B 
WHERE  C.EMPLID            = B.EMPLID 
AND    B.BALANCE_ID        = 'CY' 
AND    B.BALANCE_YEAR      = #balance_year ! 2008 
AND    B.BALANCE_PERIOD    = 
      (SELECT MAX(BALANCE_PERIOD) 
       FROM   PS_TAX_BALANCE 
       WHERE  EMPLID       = B.EMPLID 
       AND    COMPANY      = B.COMPANY 
       AND    BALANCE_ID   = B.BALANCE_ID 
       AND    BALANCE_YEAR = B.BALANCE_YEAR 
       AND    BALANCE_QTR  = 4 
       AND    TAX_CLASS    = B.TAX_CLASS 
       AND    LOCALITY     = B.LOCALITY)    
AND [$GEXPY149_INCLUDE_LOCALITY_CRITERIA]
!AND ROWNUM <= 1750 
ORDER BY B.COMPANY, B.LOCALITY, B.EMPLID

end-select

  if $found = 'N'
    do error-found     
  end-if
  
End-Procedure
!****************************************************************************
Begin-Procedure GEXPY149-Select-Locality-Parameters

 
  Let $OprID               = '''' || $Prcs_OprID       || ''''
  Let $Run_Cntl_ID         = '''' || $Prcs_Run_Cntl_ID || ''''
  Let #GEX_RC_LOCALITY_ROWS = 0
  Let $GEXPY149_INCLUDE_LOCALITY_CRITERIA = ''
  !Let $GEXPY149_EXCLUDE_LOCALITY_CRITERIA = ''
  Let $GEXPY149_INCLUDE_LOCALITY_DISPLAY_CRITERIA = 'ALL'
  !Let $GEXPY149_EXCLUDE_LOCALITY_DISPLAY_CRITERIA = 'NONE'
  
!  show 'oprid=' $OprID !me
!  show 'run id=' $Run_Cntl_ID  !me
!  show 'INCLUDE LOCALITY criteria' $GEXPY149_INCLUDE_LOCALITY_CRITERIA !me
!  SHOW 'EXCLUDE LOCALITY criteria' $GEXPY149_EXCLUDE_LOCALITY_CRITERIA
!  show 'compnay alias' $GEXPY149_Locality_Alias !me
!  show 'cloum var company ' &GEX_RC_GEXPY149.LOCALITY !me
!  show $GEXPY149_INCLUDE_LOCALITY_DISPLAY_CRITERIA
!  show $GEXPY149_EXCLUDE_LOCALITY_DISPLAY_CRITERIA
!  show 'b4 select'
  
Begin-Select

PY.LOCALITY
  
  Add 1 To #GEX_RC_LOCALITY_ROWS
 
  If #GEX_RC_LOCALITY_ROWS = 1
   Let $GEXPY149_INCLUDE_LOCALITY_CRITERIA = '(' || $GEXPY149_Locality_Alias || ' In ('''     || &PY.LOCALITY || ''''
    !show 'iNCLUDE in if -->'$GEXPY149_INCLUDE_LOCALITY_CRITERIA !me
   !Let $GEXPY149_EXCLUDE_LOCALITY_CRITERIA = '(' || $GEXPY149_Locality_Alias || ' Not In (''' || &PY.LOCALITY || ''''
    !SHOW 'EXCLUDE in if -->' $GEXPY149_EXCLUDE_LOCALITY_CRITERIA
  Else
    Let $GEXPY149_INCLUDE_LOCALITY_CRITERIA = $GEXPY149_INCLUDE_LOCALITY_CRITERIA || ',''' || &PY.LOCALITY  || ''''
!    show 'in else -->'$GEXPY149_INCLUDE_LOCALITY_CRITERIA !me
!   Let $GEXPY149_EXCLUDE_LOCALITY_CRITERIA = '(' || $GEXPY149_Locality_Alias || ' Not In (''' || &PY.LOCALITY || ''''
!    SHOW 'EXCLUDE in else -->' $GEXPY149_EXCLUDE_LOCALITY_CRITERIA
  End-If
  
   !show 'no of rows fetched-' #GEX_RC_LOCALITY_ROWS
   
From PS_GEX_RC_GEXPY149 PY

Where PY.OPRID                = [$OprID]
And   PY.RUN_CNTL_ID          = [$Run_Cntl_ID]
And   Rtrim(PY.LOCALITY, ' ') != ' '

    
    
End-Select

 If #GEX_RC_LOCALITY_ROWS = 0
    Let $GEXPY149_INCLUDE_LOCALITY_CRITERIA = $GEXPY149_Locality_Alias || ' = ' || $GEXPY149_Locality_Alias
    !Let $GEXPY149_EXCLUDE_LOCALITY_CRITERIA = $GEXPY149_Locality_Alias || ' = ' || $GEXPY149_Locality_Alias
  Else
    Let $GEXPY149_INCLUDE_LOCALITY_CRITERIA = $GEXPY149_INCLUDE_LOCALITY_CRITERIA || '))'
    !Let $GEXPY149_EXCLUDE_LOCALITY_CRITERIA = $GEXPY149_EXCLUDE_LOCALITY_CRITERIA || '))'
    Let $GEXXX900_INCLUDE_LOCALITY_DISPLAY_CRITERIA = $GEXPY149_INCLUDE_LOCALITY_CRITERIA
   !Let $GEXXX900_EXCLUDE_LOCALITY_DISPLAY_CRITERIA = $GEXPY149_EXCLUDE_LOCALITY_CRITERIA
  End-If
  
!show 'after all logic-'$GEXPY149_INCLUDE_LOCALITY_DISPLAY_CRITERIA
!show 'after all logic-'$GEXPY149_EXCLUDE_LOCALITY_DISPLAY_CRITERIA
!SHOW 'AFTER ALL LOGIC- $GEXPY149_INCLUDE_LOCALITY_CRITERIA ==' $GEXPY149_INCLUDE_LOCALITY_CRITERIA

End-Procedure
!****************************************************************************
Begin-Procedure print-detail-info
!   show 'in print detail info' 
!   show  'for locality --' &b.Locality
   encode '-' into $hyphen 
   Let $SSN             =  substr(&B.EMPLID,1,3)||$hyphen||substr(&B.EMPLID,4,2)||$hyphen||substr(&B.EMPLID,6,4)   
   Let $middle_name     =  substr(&C.MIDDLE_NAME,1,1)
   Let $ADDRESS1 	=  ltrim(rtrim(&C.ADDRESS1,' '),' ')
   Let $ADDRESS2 	=  ltrim(rtrim(&C.ADDRESS2,' '),' ')
   Let $CITY 	        =  ltrim(rtrim(&C.CITY,' '),' ')
   
   evaluate &b.Locality
        when = 'I022103C'
                Let $PSD             =    '022103' 
                break
        when = 'I022583C'
                Let $PSD             =    '022583' 
                break
        when-other
                Let $PSD             =    ''
                break
   end-evaluate 
   
   Let $resident_code   =  'R'
   
   
   
   string &B.BALANCE_YEAR  &B.BALANCE_QTR $SSN &C.LAST_NAME &C.FIRST_NAME $middle_name $ADDRESS1 $ADDRESS2 $CITY &C.STATE &C.POSTAL &B.TAX_QTD $PSD $resident_code by  ',' into $write_row
   SHOW $write_row
   write 2 from $write_row
   
End-Procedure 

!****************************************************************************
Begin-Procedure SQL-Error-Found($Proc_Name) 
  do error-found
  show 'SQL Error in ' (,34)
  show $Proc_Name ()  
  show $_sql-error () 
  show 'sql-status:' ()
  show #_sql-status () ! edit 99999 
 
End-Procedure

!****************************************************************************
Begin-Procedure Error-Found
  move 'Y' to $ErrorFound
  
  do Format-Number(#InputTran, $out, '99999')
  show $out 
  let $EmplId_1st3 = substr($EmplId,1,3)
  let $EmplId_mid2 = substr($EmplId,4,2)
  let $EmplId_last4 = substr($EmplId,6,4)
 
  String $EmplId_1st3 $EmplID_mid2 $EmplId_last4 by '-' into $EmplId11

  show $EmplID11 
End-Procedure

!****************************************************************************
Begin-Procedure Close-File
  
     Close 2
  If #filestat != 0
     Show 'Error closing output file.  Program terminating.'
     Stop
  End-If
    
End-Procedure

!****************************************************************************

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'validdt.sqc'   !Validates Native Date
