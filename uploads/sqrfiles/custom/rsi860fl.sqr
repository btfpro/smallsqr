!***********************************************************************
!  RSI860FL:      Qtrly Wage List - FLORIDA - Flat and XML File        *
!***********************************************************************
!***********************************************************************
! Rimini Street Modification Log                                       *
!                                                                      *
!  09/16/2010    RSI-HCM101457  v1.0                                   *
!    Descr: Create Flat File Format new for 2010                       *
!                                                                      *
!  07/18/2012    RSI-HCM102842  v2.0                                   *
!    Descr: Zero fill position 94 to 104 for record type 02            *
!                                                                      *
!  03/20/2014    RSI-HCM103603  v3.0                                   *
!    Descr: Revise for common version for all clients and add code to  *
!           correct out of state wages reported.                       *
!                                                                      *
!  01/28/2015    RSI-HCM104660  v4.0                                   *
!    Descr: Added edits for FIrst Name, Last Name, Email and           *
!           Contact Phone.                                             *
!                                                                      *
!************************************************************************

#include 'setenv.sqc' !Set environment
#include 'rsicdver.sqc' !Client Specific PeopleSoft Application Information
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

!***********************************************************************
! Procedure Setup
!***********************************************************************
Begin-Setup

#Define Prgm_Ver       '4.0'   !Corresponds to Modification History above.
#Define Dyn-S          [
#Define Dyn-E          ]

#If {sqr-platform} = mvs
    #Define Dyn-S \
    #Define Dyn-E \
#EndIf

#If {sqr-platform} = as400
    #Define Dyn-S \
    #Define Dyn-E \
#EndIf

#define  max_array_size 101
#define  max_array_cnt 100

End-Setup

!***********************************************************************
! Procedure report
!***********************************************************************
begin-report

  Show 'RSI860FL.SQR - Version ' {Prgm_Ver}
  Show '**************************************************'
  Show 'Creating FL Quarterly UI File(s)'
  Show ''
  let $Start = datenow()
  Show 'Report Started at : ' $Start
  Show ''

  create-array name=zero_wage_list size={max_array_size}
               field=company:char
               field=descr:char

  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'N'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

  Evaluate $TransmitterFileType
     when = 'U'
        close 10
     when = 'X'
        close 20
     when = 'B'
        close 10
        close 20
  End-Evaluate

  if $RecordWritten = 'Y'
    display ''
    display 'Creating File(s) for Florida UI Wage Reporting'
    display ''
    display 'Upon successful conclusion of this program,'

    Evaluate $TransmitterFileType
       when = 'U'
          display 'one file will have been created as follows:'
          display ''
          display $FileID_U
       when = 'X'
          display 'one file will have been created as follows:'
          display ''
          display $FileID_X
       when = 'B'
          display 'two files will have been created as follows:'
          display ''
          display $FileID_U
          display $FileID_X
    End-Evaluate

    display ''
    display 'For reporting of quarterly wages to the '
    display 'Florida Department of Revenue'
    display ''
    display 'Report ended at: ' noline
    display $AsOfToday
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  If #ErrCnt > 0
    Do Errors-In-Processing
    STOP quiet
  Else
    do Stdapi-Term
  End-If

end-report

!***********************************************************************
! Procedure Init-Report
!***********************************************************************
begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

  do Stdapi-Init
  do Get-Calendar-Year-Id

  do Initialization
  move 'RSI860FL' to $ReportID

  Let $ReportTitle = 'Florida Quarterly UI Wage Report - Internet'

end-procedure Init-Report

!***********************************************************************
! Procedure Initialization
!***********************************************************************
begin-procedure Initialization

  #IfDef RSI_TOOLS_8.4   ! 8.4 Tools Support
     let $FileOutputPath = '{IMPORTPREFIX}'
     let $FileExt        = '{IMPORTSUFFIX}'
     Let $PersStatus1    = ' '
     Let $PersStatus2    = ' '
  #Else                  ! 8.2 and 7.5 Tools Support
     let $FileOutputPath = '{FILEPREFIX}'
     let $FileExt        = '{FILESUFFIX}'
     Let $PersStatus1    = ' and cod.PER_STATUS    = ''E'' '
     Let $PersStatus2    = ' and D.PER_STATUS      = ''E'' '
  #EndIf

  #IfDef RSI_APP_REL = '8.81'
     Let $PersStatus1    = ' AND cod.PER_STATUS    = ''E'' '
     Let $PersStatus2    = ' AND D.PER_STATUS      = ''E'' '
  #EndIf

  let $xml_cntrl_begin = '<'
  let $xml_cntrl_end   = '>'
  let $xml_tag_end     = '/'
  let $xml_tag         = ''
  let $xml_content     = ''
  let $xml_output_line = ''
  let $Spaces60        = rpad('', 60, ' ')
  let #indent          = 0

  let $ErrMsg = ''
  let #ErrCnt = 0
  let #ErrMax = 100

  let $TransmissionId = 'FLUCT2009'  ! assigned to RSI by FL DOR
  let $SoftwareId     = '10001321'   ! assigned to RSI by FL DOR

  move 'FL'              to $State
  move '12'              to $StateNumCd

  do Get-Tax-Reporting-Run-Controls

  move &TX.Balance_Year to $RptYear 9999
  move &TX.Balance_qtr  to $RptQtr   09

  move $PeriodEndDate    to $AsOfDate

  let $QuarterEnding = $QtrEndMonth || $RptYear

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  if $PRCS_Process_Instance = ''
     input $Prcs_OprID       batch-mode
     input $Prcs_Run_Cntl_ID batch-mode

     if $Prcs_OprID = '' or $Prcs_Run_Cntl_ID = ''
        Display 'Report requires Oprid and Run Control Id used to read Run Control Records in order to run.'
        Stop
     else
        Do Select-RSI-Parameters
        Do Validate-Transmitter-Data
     end-if
  else
     Do Select-RSI-Parameters
     Do Validate-Transmitter-Data
  end-if

  Evaluate $TransmitterFileType
     when = 'U'
        do Open-Flat-File
     when = 'X'
        do Open-XML-File
     when = 'B'
        do Open-Flat-File
        do Open-XML-File
  End-Evaluate

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($PeriodEndDate,$PeriodEndDate,{DEFYMD},'','')

  Let #Tot_NlGrs_QTD = 0
  Let #Tot_TxGrs_QTD = 0
  Let #Tot_ExGrs_QTD = 0
  Let #Count_F       = 0

end-procedure Initialization

!***********************************************************************
! Procedure Open-Flat-File
!***********************************************************************
begin-procedure Open-Flat-File

   let $FileID_U = $FileOutputPath || 'UCT6' || substr($RptYear,3,2) || $RptQtr || '.txt'
   open $FileID_U as 10 for-writing record=512:fixed

end-procedure Open-Flat-File

!***********************************************************************
! Procedure Process-Main
!***********************************************************************
begin-procedure Process-Main
  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display '*** Transmitter Company field blank on Tax Run Control Record ***'
    display '********************* Processing stopped ************************'
    stop
  end-if
  do Get-Company-Data                 !Transmitter identifying data

  do Get-State-Tax-Data
  do Chk-EMPLR-ID-Err                 !Verify ID exist and is valid
  do Write-Transmitter-Record

Let $Prnt_CoTxGrs = 'Y'
Let $Prnt_CoExGrs = 'Y'

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

move 0 to #zero_wage_company_cnt

begin-select
CMPNY.COMPANY
CMPNY.DESCR

  Let $Company     = &CMPNY.COMPANY
  Let $CompanyName = &CMPNY.DESCR

  move 'N' to $Employee_Processed

  do Read-Employee-Data

  !--- no employee processed, it must be a zero wage company - load to array for report
  if $Employee_Processed = 'N'

     do validate-cmpny-statetax

     if $valid-co-state = 'Y'
        if #zero_wage_company_cnt < {max_array_cnt}
           add 1 to #zero_wage_company_cnt
           let zero_wage_list.company(#zero_wage_company_cnt) = &CMPNY.company
           let zero_wage_list.descr(#zero_wage_company_cnt)   = &CMPNY.descr
        end-if
     end-if
  end-if

from PS_COMPANY_TBL CMPNY
where CMPNY.EFF_STATUS = 'A' and CMPNY.TAX_REPORT_TYPE = '2' and
      CMPNY.EFFDT = ( select max(EFFDT) from PS_COMPANY_TBL where COMPANY = CMPNY.COMPANY and EFFDT <= $AsOfDate )
order by CMPNY.COMPANY
end-select

  Evaluate $TransmitterFileType
     when = 'U'
        Do write-Trlr-Record
     when = 'X'
        do Complete-XML-File
     when = 'B'
        Do write-Trlr-Record
        do Complete-XML-File
  End-Evaluate

  if #Count_F > 0
     let $ReportID = 'UCT6' || substr($RptYear,3,2) || $RptQtr || '.txt'
     do Print-Summary-Data('FileTotal')
  end-if

  !--- Print list of company with zero wage
  if #zero_wage_company_cnt > 0
     new-page
     print '********************************************' ( +2,10)
     print '*                                          *' ( +1,10)
     print '*  List of active company with zero wage.  *' ( +1,10)
     print '*                                          *' ( +1,10)
     print '********************************************' ( +1,10)
     print ' ' (+1,10)

     let #i = 1
     while (#i <= #zero_wage_company_cnt)
        get $print_company $print_descr from zero_wage_list(#i) company descr
        print $print_company (+1,10)
        print $print_descr   (  ,15)
        add 1 to #i
     end-while

     if #zero_wage_company_cnt >= {max_array_cnt}
        print '*********************************************' ( +2,10)
        print '*                                           *' ( +1,10)
        print '*       Too many companies to report.       *' ( +1,10)
        print '*                                           *' ( +1,10)
        print '*  More than '                                ( +1,10)
        print #zero_wage_company_cnt                         ( , ) edit 9999
        print ' companies with zero wage. *'                 ( , )
        print '*                                           *' ( +1,10)
        print '*********************************************' ( +1,10)
     else
        print '*********************************************' ( +2,10)
        print '*                                           *' ( +1,10)
        print '*    End of list for zero wage companies.   *' ( +1,10)
        print '*                                           *' ( +1,10)
        print '*********************************************' ( +1,10)
     end-if
  end-if

end-procedure Process-Main

!***********************************************************************
! Procedure validate-cmpny-statetax
!***********************************************************************
begin-procedure validate-cmpny-statetax

 let $valid-co-state = 'N'

begin-select
stax.COMPANY

  let $valid-co-state = 'Y'

from PS_CO_STATETAX_TBL stax
where stax.COMPANY    = $Company
  and stax.STATE      = $State
  and stax.EFF_STATUS = 'A'
  and stax.EFFDT      = (select max(EFFDT) from PS_CO_STATETAX_TBL where COMPANY = stax.COMPANY and STATE = stax.STATE and EFFDT <= $AsofDate )
end-select

end-procedure validate-cmpny-statetax

!***********************************************************************
! Procedure Get-Company-Gross-Wages
!***********************************************************************
begin-procedure Get-Company-Gross-Wages

  Let #Co_TxGrs_QTD = 0
  Let #Co_NlGrs_QTD = 0
  Let #Co_ExGrs_QTD = 0

begin-select
cod1.NATIONAL_ID
coc.TXGRS_QTD  &CO_TxGrs_QTD
coc.NLGRS_QTD  &CO_NlGrs_QTD

  Let $National_id = ltrim(rtrim(&cod1.NATIONAL_ID, ' '), ' ')
  move $NATIONAL_ID to $S123 xxx       !isolate first 3 digits

  if $S123 = &Temp_SSN_Mask        or $NATIONAL_ID = ''          or $NATIONAL_ID = '111111111' or $NATIONAL_ID = '222222222'
     or $NATIONAL_ID = '333333333' or $NATIONAL_ID = '444444444' or $NATIONAL_ID = '555555555' or $NATIONAL_ID = '666666666'
     or $NATIONAL_ID = '777777777' or $NATIONAL_ID = '888888888' or $NATIONAL_ID = '999999999' or $NATIONAL_ID = '000000000'

     ! Invalid Record - Ignore it
  Else
     if &CO_TxGrs_QTD >  &CO_NlGrs_QTD or &CO_TxGrs_QTD < 0 or &CO_NlGrs_QTD < 0

        ! Invalid Record - Ignore it
     Else
        if &CO_NlGrs_QTD > 0 and &CO_TxGrs_QTD >= 0
           Let #Co_TxGrs_QTD = #Co_TxGrs_QTD + &CO_TxGrs_QTD
           Let #Co_NlGrs_QTD = #Co_NlGrs_QTD + &CO_NlGrs_QTD
        End-If
     End-If
  End-If

from  PS_TAX_BALANCE           coc
   ,  PS_PERS_NID              cod1
#IfDef RSI_TOOLS_8.4   ! 8.4 Tools Support
   ,  PS_PERSON_NAME           cod
#Else
   ,  PS_PERSONAL_DATA         cod
#EndIf
where coc.COMPANY       = $Company
  and cod.EMPLID        = coc.EMPLID
  {Dyn-S}$PersStatus1{Dyn-E}
  and coc.TAX_CLASS     = 'U'
  and coc.BALANCE_ID    = $Calendar_Year_Id
  and coc.BALANCE_YEAR  = &TX.Balance_Year
  and coc.BALANCE_QTR   = &TX.Balance_Qtr
  and coc.STATE         = $State
  and coc.LOCALITY      = ' '
  and coc.BALANCE_PERIOD  = ( select max(BALANCE_PERIOD) from PS_TAX_BALANCE
                              where EMPLID = coc.EMPLID and COMPANY = coc.COMPANY and BALANCE_ID = coc.BALANCE_ID and BALANCE_YEAR = coc.BALANCE_YEAR AND
                                    BALANCE_QTR = coc.BALANCE_QTR and STATE = coc.STATE and LOCALITY = coc.LOCALITY and TAX_CLASS = coc.TAX_CLASS )
  and coc.NLGRS_QTD > 0 and coc.TXGRS_QTD >= 0 and coc.EMPLID = cod1.EMPLID
  and cod1.COUNTRY = {NID_Country}
  and cod1.NATIONAL_ID_TYPE = $Payroll_NID_Type
end-select

! Excess Wage cannot be Negative

   if #Co_TxGrs_QTD >  #Co_NlGrs_QTD
      let $ErrMsg = '*** Gross wages cannot be less than Taxable Wages for Company ' || $Company
      Do Write-To-Error-Log
   end-if

  ! Multiply Gross with 100 to include the decimal

  let  #Co_ExGrs_QTD = #Co_NlGrs_QTD - #Co_TxGrs_QTD
  move #Co_TxGrs_QTD to $Co_TxGrs_QTD_XML   9999999999999.99
  move #Co_NlGrs_QTD to $Co_NlGrs_QTD_XML   9999999999999.99
  move #Co_ExGrs_QTD to $Co_ExGrs_QTD_XML   999999999.99

  multiply 100 times #Co_TxGrs_QTD
  multiply 100 times #Co_NlGrs_QTD
  let  #Co_ExGrs_QTD = #Co_NlGrs_QTD - #Co_TxGrs_QTD

  move #Co_TxGrs_QTD to $Co_TxGrs_QTD  099999999999999
  move #Co_NlGrs_QTD to $Co_NlGrs_QTD  099999999999999
  move #Co_ExGrs_QTD to $Co_ExGrs_QTD  09999999999

  ! Divide the Gross by 100 for printing purpose

  Divide 100 into #Co_TxGrs_QTD
  Divide 100 into #Co_NlGrs_QTD
  Divide 100 into #Co_ExGrs_QTD

end-procedure Get-Company-Gross-Wages

!***********************************************************************
! Procedure Read-Employee-Data
!***********************************************************************
begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=before-Company
                                     after=after-company
C.EMPLID
C.STATE
C.NLGRS_QTD
C.TXGRS_QTD
C.BALANCE_PERIOD
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME
D.NAME_SUFFIX

  Let $Emplid = &C.Emplid

  Let $National_id = ltrim(rtrim(&D1.NATIONAL_ID, ' '), ' ')
  move $NATIONAL_ID to $S123 xxx       !isolate first 3 digits

  if $S123 = &Temp_SSN_Mask        or $NATIONAL_ID = ''          or $NATIONAL_ID = '111111111' or $NATIONAL_ID = '222222222'
     or $NATIONAL_ID = '333333333' or $NATIONAL_ID = '444444444' or $NATIONAL_ID = '555555555' or $NATIONAL_ID = '666666666'
     or $NATIONAL_ID = '777777777' or $NATIONAL_ID = '888888888' or $NATIONAL_ID = '999999999' or $NATIONAL_ID = '000000000'

     display ' '
     display '**** Invalid National ID ****** Emplid : ' noline
     display &C.Emplid

     print ' '                         (+2,1,11)
     print '     QTD     '             (0,+4,13)
     print '     QTD      '            (0,+4)
     print 'EmplID'                    (+1,1,11)
     print 'Taxable Gross'             (0,+4,13)
     print 'No Limit Gross'            (0,+4)
     print 'National ID'               (0,50)
     print &C.EmplID                   (+1,1,14)
     print &C.TxGrs_QTD                (0,16) edit 99,999,999.99mi
     print &C.NlGrs_QTD                (0,34) edit 99,999,999.99mi
     print $National_ID             (0,50)
     print '**** Invalid National ID ******'  (+1,1)
     Let $Error-Found = 'Y'
  else
     ! Excess Wage cannot be Negative

     if &C.TXGRS_QTD >  &C.NLGRS_QTD or &C.TXGRS_QTD < 0 or &C.NLGRS_QTD < 0

        print ' '                         (+2,1,11)
        print '     QTD     '             (0,+4,13)
        print '     QTD      '            (0,+4)
        print 'EmplID'                    (+1,1,11)
        print 'Taxable Gross'             (0,+4,13)
        print 'No Limit Gross'            (0,+4)
        print 'National ID'               (0,50)
        print &C.EmplID                   (+1,1,14)
        print &C.TxGrs_QTD                (0,16) edit 99,999,999.99mi
        print &C.NlGrs_QTD                (0,34) edit 99,999,999.99mi
        print $National_ID             (0,50)
        if &C.TXGRS_QTD >  &C.NLGRS_QTD
           print '**** Gross wages must be greater than Taxable Wages ****'  (+1,1)
        end-if
        if &C.TXGRS_QTD < 0  or &C.NLGRS_QTD < 0
           print '**** Gross Wages or Taxable Wages cannot be Negative ****'  (+1,1)
        end-if
        Let $Error-Found = 'Y'
    Else
       if &C.NlGrs_QTD > 0 and &C.TXGRS_QTD >= 0
          let $OutOfStateStatus = ''

          do Process-Employee
          move 'Y' to $Employee_Processed
       else
          do Print-Summary-Data('NegWage')
          Let $Error-Found = 'Y'
       end-if
    end-if
  End-If

FROM PS_TAX_BALANCE           C
   , PS_PERS_NID              D1
#IfDef RSI_TOOLS_8.4   ! 8.4 Tools Support
   ,  PS_PERSON_NAME          D
#Else
   ,  PS_PERSONAL_DATA        D
#EndIf
WHERE C.COMPANY       = $Company
  AND D.EMPLID        = C.EMPLID
  {Dyn-S}$PersStatus2{Dyn-E}
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
  AND C.STATE         = $State
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD) FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID      AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID  AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY    AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND C.EMPLID            = D1.EMPLID
  AND D1.COUNTRY = {NID_Country}  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure Read-Employee-Data

!***********************************************************************
! Procedure Process-Employee
!***********************************************************************
begin-procedure Process-Employee

  move &D.Last_Name         to $LastName
  move &D.First_Name        to $FirstName
  move &D.Middle_Name       to $MiddleName

  uppercase $LastName
  uppercase $FirstName
  uppercase $MiddleName

  move &C.NlGrs_QTD to #NlGrs_QTD
  move &C.TxGrs_QTD to #TxGrs_QTD

  move &C.NlGrs_QTD to #NlGrs_QTD_XML
  move &C.TxGrs_QTD to #TxGrs_QTD_XML

  Add #NlGrs_QTD         to #Tot_NlGrs_QTD
  Add #TxGrs_QTD         to #Tot_TxGrs_QTD

  Let #Tot_ExGrs_QTD = #Tot_ExGrs_QTD + ( #NlGrs_QTD -  #TxGrs_QTD )

  multiply 100 times #NlGrs_QTD
  multiply 100 times #TxGrs_QTD

  do Calculate-Out-of-State-Wages

  move #OutOfStateTaxableWages to #OutOfStateTaxableWages_XML
  move #OutOfStateWages        to #OutOfStateWages_XML

  Evaluate $TransmitterFileType
     when = 'U'
        do write-s-record
     when = 'X'
        do Write-XML-Employee-Data
     when = 'B'
        do write-s-record
        do Write-XML-Employee-Data
  End-Evaluate

  add 1 to #Count_S

end-procedure Process-Employee

!***********************************************************************
! Procedure Before-Company
!***********************************************************************
begin-procedure Before-Company
  do Get-Company-Data
  do Get-Company-Bus-Phone-Number

  do Get-State-Tax-Data             !Employer ID
  do Chk-EMPLR-ID-Err               !Verify Employer ID exist
  move $ER_ID_SUT_Rtrim to $StateEIN

  move &SUT_Experience_Rt        to #UI_Rate
  move #UI_Rate                  to $UI_Rate   99.99

  Let $Error-Found = 'N'
  do Company-Run-Control

  do Format-Company-Data

  Evaluate $TransmitterFileType
     when = 'U'
        do Write-E-Record
     when = 'X'
        do Write-XML-Company-Data
     when = 'B'
        do Write-E-Record
        do Write-XML-Company-Data
  End-Evaluate

end-procedure Before-Company

!***********************************************************************
! Procedure Chk-EMPLR-ID-Err
!***********************************************************************
begin-procedure Chk-EMPLR-ID-Err

! EMPLOYER ID IS A MANDATORY FIELD
   if RTRIM(&Employer_ID_SUT,' ') = ''
      let $ErrMsg = '*** State Unemployment ID missing in Company State Tax Table for Company ' || $Company
      Do Write-To-Error-Log
   end-if

 ! REMOVE ANY HYPHENS
   move 'N' to $Dash-Exist
   let $ER_ID_SUT_Rtrim = rtrim (&Employer_ID_SUT, ' ')
   let #Max_Lngth = length($ER_ID_SUT_Rtrim)

   while INSTR($ER_ID_SUT_Rtrim,'-',1) <> 0

      let #Hyphen = INSTR($ER_ID_SUT_Rtrim,'-',1)

      let $ER_ID_SUT_Rtrim = SUBSTR($ER_ID_SUT_Rtrim,1,(#Hyphen - 1)) ||
                                  SUBSTR($ER_ID_SUT_Rtrim,(#Hyphen + 1),#Max_Lngth)

      let #Max_Lngth = #Max_Lngth - 1     !REDUCE FIELD SIZE LENGTH
      move 'Y' to $Dash-Exist             !DASH VALUE FOUND
    end-while

  ! CHECK FOR ALL NUMERIC
    move 'N' to $Err-Ind
    let #Char_Pos  =  1

    while #Char_Pos <= #Max_Lngth
      let $Test_Char = substr ($ER_ID_SUT_Rtrim, #Char_Pos, 1)
      let #Which_Digit = instr ('0123456789', $Test_Char, 1)

      if  #Which_Digit = 0
            move 'Y' to $Err-Ind
            break
      end-if
      add 1 to #Char_Pos
    end-while

 ! VERIFY EMPLOYER ID DOESN'T EXCEED 7 DIGITS
    if $Err-Ind = 'N'
       if $Dash-Exist = 'Y' or
         ($Dash-Exist = 'N' and #Max_Lngth = 8)
          let #Max_Lngth = #Max_Lngth - 1                               !REFORMAT EMPLOYER ID
          let $ER_ID_SUT_Rtrim = SUBSTR($ER_ID_SUT_Rtrim,1,#Max_Lngth)  !BY REMOVING CHECK DIGIT
       end-if

       if #Max_Lngth > 7
           move 'Y' to $Err-Ind
       end-if
    end-if

  ! PRINT ERROR MESSAGE AND ABORT IF EMPLOYER ID INVALID
    if $Err-Ind = 'Y'
      let $ErrMsg = '*** State Unemployment ID ("' || &Employer_ID_SUT || '") not 7 digit number in Company State Tax Table for Company ' || $Company
      Do Write-To-Error-Log
    else
        move $ER_ID_SUT_Rtrim to $ER_ID_SUT_Rtrim 0999999
    end-if

end-procedure Chk-EMPLR-ID-Err

!***********************************************************************
! Procedure After-Company
!***********************************************************************
begin-procedure After-Company

  If $Error-Found = 'Y'

     Evaluate $TransmitterFileType
        when = 'U'
           Let $mmsg = $FileID_U || ' file'
        when = 'X'
           Let $mmsg = $FileID_X || ' file'
        when = 'B'
           Let $mmsg = $FileID_U || ' file or ' || $FileID_X || ' file.'
     End-Evaluate

     print 'Employees shown above do not appear in the totals below and are not included in the' ( +2,1)
     print $mmsg                          (+1,1)
  End-If

  do Print-Summary-Data('CoTotal')

  if #Count_S > 0
     Evaluate $TransmitterFileType
        when = 'U'
           do Write-T-Record
        when = 'X'
           do Write-XML-Company-Footer
        when = 'B'
           do Write-T-Record
           do Write-XML-Company-Footer
     End-Evaluate
  end-if

  add #Count_S to #Count_F

  move 0 to #Count_S
  new-page
end-procedure After-Company

!***********************************************************************
! Procedure Write-Transmitter-Record
!***********************************************************************
Begin-Procedure Write-Transmitter-Record

  let $ChkName   =  rtrim($CompanyName,' ')
  uppercase $ChkName

  do Chk-Name($ChkName,'Company',$CompanyName)

  move $CompanyName            to $Xmitr_Name

  move &CT.Federal_EIN         to $FedEIN  099999999
  move $ER_ID_SUT_Rtrim        to $AgentID

  uppercase $Xmitr_Name
  uppercase $TransmitterContact
  let $ChkName  = rtrim($TransmitterContact,' ')
  do Chk-Name($ChkName,'TransmitterContact',$TransmitterContact)

  let $ChkNum   = rtrim($TransmitterPhone,' ')
  do Chk-Num($ChkNum,'TransmitterPhone',$TransmitterPhone)

  Evaluate $TransmitterFileType
     when = 'U'
        do Write-Transmitter-Record-UCT
     when = 'X'
        do Write-Transmitter-Record-XML
     when = 'B'
        do Write-Transmitter-Record-UCT
        do Write-Transmitter-Record-XML
  End-Evaluate

End-Procedure Write-Transmitter-Record

!***********************************************************************
! Procedure Write-Transmitter-Record
!***********************************************************************
begin-procedure Write-E-Record

              write 10 from '01':2  !   1 -   2
                         $FedEIN:9  !   3 -  11
                       $StateEIN:7  !  12 -  18
                         $ErName:57 !  19 -  75
                      $ErAddress:22 !  76 -  97
                           $City:22 !  98 - 119
                        $StateCd:2  ! 120 - 121
                            $Zip:5  ! 122 - 126
                       $ZipExtsn:4  ! 127 - 130
                        $RptYear:4  ! 131 - 134
                         $RptQtr:2  ! 135 - 136
                   $Co_NlGrs_QTD:15 ! 137 - 151
                   $Co_ExGrs_QTD:11 ! 152 - 162
                   $Co_TxGrs_QTD:15 ! 163 - 177
                       $TaxesDue:11 ! 178 - 188
                       $Interest:9  ! 189 - 197
                        $Penalty:9  ! 198 - 206
                   $TotalPayment:11 ! 207 - 217
             $TransmitterContact:27 ! 218 - 244
               $TransmitterPhone:10 ! 245 - 254
               $TransmitterEmail:50 ! 255 - 304

  move 'Y' to $RecordWritten
end-procedure Write-E-Record

!***********************************************************************
! Procedure Write-S-Record
!***********************************************************************
begin-procedure Write-S-Record

  move #NlGrs_QTD                 to $NlGrs_QTD   09999999999
  move #TxGrs_QTD                 to $TxGrs_QTD   09999999999

  move $OutOfStateStatus          to $outofState

  Multiply 100 times #OutOfStateWages
  move 0.00                       to #OutOfStateWages
  move  #OutOfStateWages          to $OutOfStateWages  09999999999

  Multiply 100 times #OutOfStateTaxableWages
  move  #OutOfStateTaxableWages   to $OutOfStateTaxableWages  09999999999

  do Chk-Empl-Name

  write 10 from       '02':2    !  1 -  2
              $NATIONAL_ID:9    ! 13 - 11
                $FirstName:15   ! 12 - 26
               $MiddleName:1    ! 27 - 27
                 $LastName:20   ! 28 - 47
                $NlGrs_QTD:11   ! 48 - 58
                $TxGrs_QTD:11   ! 59 - 69
          $OutOfStateWages:11   ! 70 - 80
   $OutOfStateTaxableWages:11   ! 81 - 91
          $OutOfStateState:2    ! 92 - 93
             '00000000000':11   ! 94 - 104      !RSI-HCM102842

  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD
  move '' to $TxGrs_QTD
  move 0  to #TxGrs_QTD
end-procedure Write-S-Record

!***********************************************************************
! Procedure Write-Trlr-Record
!***********************************************************************
begin-procedure Write-Trlr-Record

    let $ReportYear   = substr($ReportDate, 7, 4)
    let $ReportMonth  = rtrim(substr($ReportDate, 1, 2),' ')
    let $ReportDay    = rtrim(substr($ReportDate, 4, 2),' ')

      write 10 from         '99':2      ! 1 -  2
                     $ReportYear:4      ! 3 -  6
                    $ReportMonth:2      ! 7 -  8
                      $ReportDay:2      ! 9 - 10
end-procedure Write-Trlr-Record

!***********************************************************************
! Procedure Chk-Empl-Name
!***********************************************************************
begin-procedure Chk-Empl-Name

  let $ChkName  = rtrim($FirstName,' ')
  do Chk-Name($ChkName,'Employee',$FirstName)

  let $ChkName  = rtrim($LastName,' ')
  do Chk-Name($ChkName,'Employee',$LastName)

  let $ChkName  = rtrim($MiddleName,' ')
  do Chk-Name($ChkName,'Employee',$MiddleName)

end-procedure Chk-Empl-Name

!***********************************************************************
! Procedure Chk-Alpha
!***********************************************************************
begin-procedure Chk-Alpha($ChkName,$NameType,:$ErrorText)

  let #ChkName_Lgth = length($ChkName)
  let #ChkName_Pos  = 1
  uppercase $ChkName

  Let $ErrorText = 'N'
  while #ChkName_Pos <= #ChkName_Lgth
    let $ChkName_Sub  = substr($ChkName, #ChkName_Pos, 1)
    let $ChkName_Sub  = upper($ChkName_Sub)
    let #ChkName_Rem_Lgth = #ChkName_Lgth - #ChkName_Pos

    let #ChkName_Inst = instr('ABCDEFGHIJKLMNOPQRSTUVWXYZ ',$ChkName_Sub, 1)
    if #ChkName_Inst = 0
       Let $ErrorText = 'Y'
    end-if

    add 1 to #ChkName_Pos
  end-while

end-procedure Chk-Alpha

!***********************************************************************
! Procedure Chk-Name
!***********************************************************************
begin-procedure Chk-Name($ChkName,$NameType,:$OutputName)

  let #ChkName_Lgth = length($ChkName)
  let #ChkName_Pos  = 1

  while #ChkName_Pos <= #ChkName_Lgth
    let $ChkName_Sub  = substr($ChkName, #ChkName_Pos, 1)
    let $ChkName_Sub  = upper($ChkName_Sub)
    let #ChkName_Rem_Lgth = #ChkName_Lgth - #ChkName_Pos

    let #ChkName_Inst = instr('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ',$ChkName_Sub, 1)
    if #ChkName_Inst = 0
       if ($NameType = 'Employee') OR
          ($NameType = 'TransmitterContact') OR
          ($NameType = 'ErAddress')
          let $OutputName = substr($OutputName,1,#ChkName_Pos -1)||' '||substr($OutputName,#ChkName_Pos+1,#ChkName_Rem_Lgth)
       end-if

       if $NameType = 'Company'
          if $ChkName_Sub <> '&'
             let $OutputName = substr($OutputName,1,#ChkName_Pos -1)||' '||substr($OutputName,#ChkName_Pos+1,#ChkName_Rem_Lgth)
          end-if
       end-if
    end-if

    add 1 to #ChkName_Pos
  end-while

end-procedure Chk-Name

!***********************************************************************
! Procedure Chk-Num
!***********************************************************************
begin-procedure Chk-Num($ChkNum,$NumType,:$OutputName)

  let #OtherCharFound = 0
  let #ChkNum_Lgth = length($ChkNum)
  let #ChkNum_Pos  = 1

  while #ChkNum_Pos <= #ChkNum_Lgth
    let $ChkNum_Sub  = substr($ChkNum, #ChkNum_Pos, 1)
    let $ChkNum_Sub  = upper($ChkNum_Sub)
    let #ChkNum_Rem_Lgth = #ChkNum_Lgth - #ChkNum_Pos

    let #ChkNum_Inst = instr('0123456789 ',$ChkNum_Sub, 1)
    if #ChkNum_Inst = 0
       if ($NumType = 'TransmitterPhone')
           let $OutputName = substr($OutputName,1,#ChkNum_Pos - 1 - #OtherCharFound )
               || substr($OutputName,#ChkNum_Pos + 1 - #OtherCharFound,#ChkNum_Rem_Lgth)
          add 1  to  #OtherCharFound
       end-if
    end-if

    add 1 to #ChkNum_Pos
  end-while

end-procedure Chk-Num

!***********************************************************************
! Procedure Write-T-Record
!***********************************************************************
begin-procedure Write-T-Record

  write 10 from '03':2    !  1 -  2
        $Month1Count:7    !  3 -  9
        $Month2Count:7    ! 10 - 16
        $Month3Count:7    ! 17 - 23

end-procedure Write-T-Record

!***********************************************************************
! Procedure Company-Run-Control
!***********************************************************************
Begin-procedure Company-Run-Control

Do Get-Company-Gross-Wages

begin-select
FL.REMITT_AMT
FL.MONTH1_COUNT7
FL.MONTH2_COUNT7
FL.MONTH3_COUNT7
FL.RSI_INTEREST_DUE
FL.RSI_PENALTY_DUE
FL.RSI_TOTAL_DUE
FL.RSI_ACCT_TYPE_FL
FL.SRC_BANK_ID
FL.FILING_REASON
FL.PAYMENT_DT

FROM PS_RSI_RSI860FL_CO FL
WHERE FL.OPRID = $Prcs_OprID
  AND FL.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND FL.COMPANY = $Company
end-SELECT

  move &FL.REMITT_AMT       to #TaxesDue
  move &FL.Month1_Count7    to #Month1Count
  move &FL.Month2_Count7    to #Month2Count
  move &FL.Month3_Count7    to #Month3Count

  move &FL.RSI_INTEREST_DUE     to #Interest
  move &FL.RSI_PENALTY_DUE      to #Penalty
  move &FL.RSI_TOTAL_DUE        to #TotalPayment
  move &FL.RSI_ACCT_TYPE_FL     to $AccountType
  move &FL.SRC_BANK_ID          to $SrcBankId
  move &FL.FILING_REASON        to $FilingReason

  if &FL.PAYMENT_DT > ''
     let $Payment_Dt = datetostr(&FL.PAYMENT_DT,'YYYY-MM-DD')
  end-if

! Negative number are not allowed

   if #TaxesDue < 0 OR #Interest < 0 or #Penalty < 0 or #TotalPayment < 0
      let $ErrMsg = '*** Negative number found in Interest, Penalty, or Total Payment field from runcontrol page for Company ' || $Company
      Do Write-To-Error-Log
   end-if

  move #TaxesDue      to $TaxesDueXML       999999999.99
  move #Interest      to $InterestXML       9999999.99
  move #Penalty       to $PenaltyXML        9999999.99
  move #TotalPayment  to $TotalPaymentXML   999999999.99

  multiply 100 times #TaxesDue
  multiply 100 times #Interest
  multiply 100 times #Penalty
  multiply 100 times #TotalPayment

  move #TaxesDue      to $TaxesDue       09999999999
  move #Interest      to $Interest       099999999
  move #Penalty       to $Penalty        099999999
  move #TotalPayment  to $TotalPayment   09999999999

  divide 100 into #TaxesDue
  divide 100 into #Interest
  divide 100 into #Penalty
  divide 100 into #TotalPayment

  move #Month1Count     to $Month1Count     0999999
  move #Month2Count     to $Month2Count     0999999
  move #Month3Count     to $Month3Count     0999999

  move #Month1Count     to $Month1Count_XML     9999999
  move #Month2Count     to $Month2Count_XML     9999999
  move #Month3Count     to $Month3Count_XML     9999999

  if &FL.PAYMENT_DT > '' and &FL.SRC_BANK_ID > ''
     do Get-Source-Bank-Info
  end-if

end-procedure Company-Run-Control

!***********************************************************************
! Procedure Validate-Transmitter-Data
!***********************************************************************
begin-procedure Validate-Transmitter-Data

! Transmitter First Name Validation IS MANDATORY FIELD
   let $string-TEST = rtrim ($TransmitterFirstName, ' ')
   let #Max_Lngth = length($string-TEST)

   if #Max_Lngth = 0
      let $ErrMsg = '*** Missing Transmitter First Name on Run Control Page'
      Do Write-To-Error-Log
   end-if

! Transmitter Last Name Validation IS MANDATORY FIELD
   let $string-TEST = rtrim ($TransmitterLastName, ' ')
   let #Max_Lngth = length($string-TEST)

   if #Max_Lngth = 0
      let $ErrMsg = '*** Missing Transmitter Last Name on Run Control Page'
      Do Write-To-Error-Log
   end-if

! Transmitter Contact Phone Validation IS MANDATORY FIELD
   let $string-TEST = rtrim ($TransmitterPhone, ' ')
   let #Max_Lngth = length($string-TEST)

   if #Max_Lngth = 0
      let $ErrMsg = '*** Missing Transmitter Contact Phone on Run Control Page'
      Do Write-To-Error-Log
   end-if

! Transmitter Email Address Validation IS MANDATORY FIELD
   let $string-TEST = rtrim ($TransmitterEmail, ' ')
   let #Max_Lngth = length($string-TEST)

   if #Max_Lngth = 0
      let $ErrMsg = '*** Missing Transmitter Email Address on Run Control Page'
      Do Write-To-Error-Log
   end-if

   Do Chk-Alpha($TransmitterContact, 'TransmitterContact', $ErrorFlag)

   if $ErrorFlag = 'Y'
      let $ErrMsg = '*** Non Alpha character found in Transmitter Name on Run Control Page'
      Do Write-To-Error-Log
   end-if

   Let $TransmitterEmail = ltrim(rtrim($TransmitterEmail, ' '), ' ')

   let #AtFound = 0
   let #Email_Lgth = length($TransmitterEmail)
   let #ChkNum_Pos  = 1

   while #ChkNum_Pos <= #Email_Lgth
      let $ChkNum_Sub  = substr($TransmitterEmail, #ChkNum_Pos, 1)
      let $ChkNum_Sub  = upper($ChkNum_Sub)
      if $ChkNum_Sub = '@'
         Let #AtFound = #ChkNum_Pos
      end-if

      add 1 to #ChkNum_Pos
   end-while

   Let $Period_at = substr($TransmitterEmail, length($TransmitterEmail) - 3,1)

   if $Period_at <> '.' or #AtFound = 0
      let $ErrMsg = '*** (Contact e-mail) must contain @ and must include .XXX (3 alpha characters) on Run Control Page'
      Do Write-To-Error-Log
   end-if

end-procedure Validate-Transmitter-Data

!----------------------------------------------------------------------!
! Procedure:  Format-Company-Data                                      !
! Descr:      Edit the company name and address data and prepare it    !
!             for inclusion into the output files.                     !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Format-Company-Data
  let $ChkName   =  rtrim($CompanyName,' ')
  uppercase $ChkName
  do Chk-Name($ChkName,'Company',$CompanyName)

  move &CT.Federal_EIN to $FedEIN   099999999
  move $CompanyName    to $ErName
  move $Compnyadd1     to $ErAddress1
  move $Compnyadd2     to $ErAddress2
  move $Compnycity     to $City
  let $StateCd = rtrim(&CT.State, ' ')
  move &CT.POSTAL      to $Zip
  move &CT.COUNTRY     to $Country

! Company Name IS MANDATORY FIELD
   let $string-TEST = rtrim ($ErName, ' ')
   let #Max_Lngth = length($string-TEST)

   if #Max_Lngth = 0
      let $ErrMsg = '*** Company Name missing from Company Table for Company ' || $Company
      Do Write-To-Error-Log
   end-if

! Company Address IS MANDATORY FIELD
   let $string-TEST = rtrim ($ErAddress1, ' ') || rtrim($ErAddress2, ' ')
   let #Max_Lngth = length($string-TEST)

   if #Max_Lngth = 0
      let $ErrMsg = '*** Company Address missing from Company Table for Company ' || $Company
      Do Write-To-Error-Log
   end-if

! Company City IS MANDATORY FIELD
   let $string-TEST = rtrim ($City, ' ')
   let #Max_Lngth = length($string-TEST)

   if #Max_Lngth = 0
      let $ErrMsg = '*** Company City missing from Company Table for Company ' || $Company
      Do Write-To-Error-Log
   end-if

! ZIP CODE IS MANDATORY FIELD
   let $ZIP-TEST = rtrim ($Zip, ' ')
   let #Max_Lngth = length($ZIP-TEST)

   if #Max_Lngth = 0
      let $ErrMsg = '*** Company Zip Code missing from Company Table for Company ' || $Company
      Do Write-To-Error-Log
   end-if

  move $Zip to $ZipExtsn ~~~~~~xxxx
  If instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  End-if
  move $Zip to $ZipExtsn ~~~~~~xxxx

 ! USE 9999 IF ZIP EXTENSION MISSING
   if $ZipExtsn = '    '
      move 9999 to $ZipExtsn
   end-if

  if $ErAddress1 > ' '
    move $ErAddress1 to $ErAddress
  else
    move $ErAddress2 to $ErAddress
  end-if

  let $ChkName  = rtrim($ErAddress,' ')
  do Chk-Name($ChkName,'ErAddress',$ErAddress)

  let $ErName_XML     = $ErName
  let $ErAddress_XML  = $ErAddress
  let $City_XML       = $City
  let $StateCd_XML    = $StateCd

  uppercase $ErName
  uppercase $ErAddress
  uppercase $City
  uppercase $StateCd

end-procedure Format-Company-Data

!----------------------------------------------------------------------!
! Procedure:  Calculate-Out-of-State-Wages                             !
! Descr:      Read out of state wages that were earned in pay periods  !
!             prior to the first pay period with Florida wages.        !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Calculate-Out-of-State-Wages

  let #Balance_Period           = &C.BALANCE_PERIOD
  let #OutOfStateWages          = 0
  let #OutOfStateTaxableWages   = 0
  let $OutOfStateState          = $State

begin-SELECT
C2.STATE
C2.NLGRS_MTD
C2.TXGRS_MTD
C2.BALANCE_QTR
C2.BALANCE_PERIOD

  Let $StateWork = Rtrim(&C2.STATE, ' ')

  if &C2.BALANCE_PERIOD < &C.BALANCE_PERIOD
     if &C2.BALANCE_QTR = &TX.Balance_Qtr
        Let #OutOfStateWages = #OutOfStateWages + &C2.NLGRS_MTD
     end-if
     Let #OutOfStateTaxableWages = #OutOfStateTaxableWages + &C2.TXGRS_MTD
  else
     do Check-Out-Of-State-Same-Bal-Period
     if #allowed_nlgrs > 0 or #allowed_txgrs > 0
        if &C2.BALANCE_QTR = &TX.Balance_Qtr
           Let #OutOfStateWages = #OutOfStateWages + #allowed_nlgrs
        end-if
        Let #OutOfStateTaxableWages = #OutOfStateTaxableWages + #allowed_txgrs
     else
        Let $StateWork = $OutOfStateState
     end-if
  end-if

  if $OutOfStateState = $State
     let $OutOfStateState = $StateWork
  else
     if $OutOfStateState <> $StateWork
        let $OutOfStateState = 'MU'
     end-if
  end-if

FROM  PS_TAX_BALANCE C2
WHERE C2.COMPANY       = $Company
  AND C2.EMPLID        = $EmplID
  AND C2.TAX_CLASS     = 'U'
  AND C2.BALANCE_ID    = $Calendar_Year_Id
  AND C2.BALANCE_YEAR  = &TX.Balance_Year
  AND C2.BALANCE_PERIOD   <= &C.BALANCE_PERIOD
  AND C2.STATE         <> $State
  AND C2.STATE         <> '$U'
  AND C2.LOCALITY      = ' '
  AND C2.NLGRS_YTD <> 0
ORDER BY C2.STATE, C2.BALANCE_PERIOD
end-SELECT

end-procedure Calculate-Out-of-State-Wages

!----------------------------------------------------------------------!
! Procedure:  Check-Out-Of-State-Same-Bal-Period                       !
! Descr:      Read out of state wages that were earned in the same pay !
!             period as the first one with Florida wages. Check the    !
!             pay check table to see if the check date of the out of   !
!             state wages preceeds the check date of the first FLorida !
!             check.                                                   !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Check-Out-Of-State-Same-Bal-Period

  Let #allowed_nlgrs    = 0
  Let #allowed_txgrs    = 0
  Let #disallowed_nlgrs = 0
  Let #disallowed_txgrs = 0
  Let $WagesAllowed     = 'Y'

  Let $BalPeriod = edit(&C.BALANCE_PERIOD, '09')
  Let $BalYear   = edit(&TX.Balance_Year, '9999')
  Let $StartCheckDt_dtu = $BalYear || '-' || $BalPeriod || '-01'

  do Convert-From-DTU-Date($StartCheckDt_dtu, $StartCheckDt)
  do dtu-month-end($StartCheckDt_dtu, $EndCheckDt_dtu)
  do Convert-From-DTU-Date($EndCheckDt_dtu, $EndCheckDt)

begin-SELECT
TAX.STATE
TAX.NLGRS_CUR
TAX.TXGRS_CUR

  If Rtrim(&TAX.STATE, ' ') = $State
     Let $WagesAllowed = 'N'
  Else
     If $WagesAllowed = 'Y'
        Let #allowed_nlgrs    = #allowed_nlgrs    + &TAX.NLGRS_CUR
        Let #allowed_txgrs    = #allowed_txgrs    + &TAX.TXGRS_CUR
     Else
        Let #disallowed_nlgrs = #disallowed_nlgrs + &TAX.NLGRS_CUR
        Let #disallowed_txgrs = #disallowed_txgrs + &TAX.TXGRS_CUR
     End-if
  End-If

FROM  PS_PAY_CHECK CHK
   ,  PS_PAY_TAX   TAX
WHERE CHK.EMPLID           = $EMPLID
  AND CHK.COMPANY          = $Company
  AND CHK.COMPANY          = TAX.COMPANY
  AND CHK.PAYGROUP         = TAX.PAYGROUP
  AND CHK.PAY_END_DT       = TAX.PAY_END_DT
  AND CHK.OFF_CYCLE        = TAX.OFF_CYCLE
  AND CHK.PAGE_NUM         = TAX.PAGE_NUM
  AND CHK.LINE_NUM         = TAX.LINE_NUM
  AND CHK.SEPCHK           = TAX.SEPCHK
  AND TAX.STATE           IN ($State,$StateWork)
  AND TAX.LOCALITY         = ' '
  AND TAX_CLASS            = 'U'
  AND CHK.PAYCHECK_STATUS IN ('F','R')
  AND TAX.NLGRS_CUR        > 0
  AND TAX.TXGRS_CUR       >= 0
  AND CHK.CHECK_DT BETWEEN   $StartCheckDt AND $EndCheckDt
ORDER BY CHK.CHECK_DT
end-SELECT

  Let #all_nlgrs = #allowed_nlgrs + #disallowed_nlgrs
  Let #all_txgrs = #allowed_txgrs + #disallowed_txgrs

  if (#all_nlgrs <> &C2.NLGRS_MTD or #all_txgrs <> &C2.TXGRS_MTD) and
     (#allowed_nlgrs > 0 or #allowed_txgrs >  0)
     print ' '                         (+2,1,29)
     print '  Check MTD  '             (0,+4,13)
     print '  Check MTD   '            (0,+4,14)
     print ' Tax Bal MTD  '            (0,+5,13)
     print ' Tax Bal MTD  '            (0,+4,14)

     print 'EmplID'                    (+1,1,20)
     print 'State'                     (0,+4,5)
     print 'Taxable Gross'             (0,+4,13)
     print 'No Limit Gross'            (0,+4,14)
     print 'Taxable Gross'             (0,+5,13)
     print 'No Limit Gross'            (0,+4,14)

     print $EmplID                     (+1,1,20)
     print $StateWork                  (0,+4,5)
     print #all_txgrs                  (0,+4,13) edit 99,999,999.99mi
     print #all_nlgrs                  (0,+4,14) edit 99,999,999.99mi
     print &C2.TXGRS_MTD               (0,+4,13) edit 99,999,999.99mi
     print &C2.NLGRS_MTD               (0,+4,14) edit 99,999,999.99mi
     print '**** Out of State Gross wages and Taxable wages mismatch between Tax Bal and Pay Check   ****'  (+1,1)
     print '**** Employee will appear in the totals, but their out of state wages should be reviewed ****'  (+1,1)
  end-if

end-procedure Check-Out-Of-State-Same-Bal-Period

!----------------------------------------------------------------------!
! Procedure:  Select-RSI-Parameters                                    !
! Descr:      Read high level run control parameters from RSI custom   !
!             run control record.                                      !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Select-RSI-Parameters
begin-select
RSI_RC.EMAIL_ADDR
RSI_RC.CONTACT_PHONE
RSI_RC.FIRST_NAME
RSI_RC.LAST_NAME
RSI_RC.MIDDLE_INITIAL
RSI_RC.RSI860FL_FILE_TYPE

FROM  PS_RSI_RC_RSI860FL  RSI_RC
WHERE RSI_RC.OPRID              = $Prcs_OprID
AND   RSI_RC.RUN_CNTL_ID        = $Prcs_Run_Cntl_ID
end-select

  let $TransmitterEmail                = LTRIM(RTRIM(&RSI_RC.Email_Addr, ' '), ' ')
  let $TransmitterFirstName            = LTRIM(RTRIM(&RSI_RC.First_Name, ' '), ' ')
  let $TransmitterMiddleInitial        = LTRIM(RTRIM(&RSI_RC.Middle_Initial, ' '), ' ')
  let $TransmitterLastName             = LTRIM(RTRIM(&RSI_RC.Last_Name, ' '), ' ')
  let $TransmitterPhone                = LTRIM(RTRIM(&RSI_RC.Contact_Phone, ' '), ' ')
  let $TransmitterFileType             = LTRIM(RTRIM(&RSI_RC.RSI860FL_FILE_TYPE, ' '), ' ')

  let $TransmitterContact               = $TransmitterFirstName

  if Length($TransmitterMiddleInitial) > 0
     let $TransmitterContact            = $TransmitterContact || ' ' || $TransmitterMiddleInitial
  end-if

  if Length($TransmitterLastName) > 0
     let $TransmitterContact            = $TransmitterContact || ' ' || $TransmitterLastName
  end-if

end-procedure Select-RSI-Parameters

!----------------------------------------------------------------------!
! Procedure:  Get-Company-Bus-Phone-Number                             !
! Descr:      Read the business phone number for the current company.  !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Get-Company-Bus-Phone-Number

Begin-Select
DTC.PHONE

  Let $CompanyBusPhone = Rtrim(&DTC.PHONE, ' ')

FROM PS_COMP_PHONE_TBL DTC
WHERE DTC.COMPANY = $Company
AND DTC.PHONE_TYPE = 'BUSN'
AND DTC.EFFDT = (SELECT MAX(DTC2.EFFDT)
                 FROM PS_COMP_PHONE_TBL DTC2
                 WHERE DTC2.COMPANY = DTC.COMPANY
                 AND DTC2.PHONE_TYPE = DTC.PHONE_TYPE
                 AND DTC2.EFFDT <= $AsOfDate)
End-Select

end-procedure Get-Company-Bus-Phone-Number

!----------------------------------------------------------------------!
! Procedure:  Get-Source-Bank-Info                                     !
! Descr:      Read Source Bank data if the user populated Payment Date !
!             and Bank Id for the current Company on the run control   !
!             page.                                                    !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Get-Source-Bank-Info

begin-SELECT
SB.ACCOUNT_EC_ID
SB.BANK_CD

   let $Transit_Num = substr(&SB.BANK_CD,1,9)
   let $Bank_Acct_Num = substr(&SB.ACCOUNT_EC_ID,1,17)

FROM PS_SRC_BANK SB
WHERE SB.SRC_BANK_ID = &FL.SRC_BANK_ID
end-SELECT
end-procedure  Get-Source-Bank-Info

!----------------------------------------------------------------------!
! Procedure:  Write-Transmitter-Record-UCT                             !
! Descr:      Write out the transmitter record to the UCT file.        !
!                                                                      !
!----------------------------------------------------------------------!
Begin-Procedure Write-Transmitter-Record-UCT

  write 10 from      '00':2     !  1 -  2
                  $FedEIN:9     !  3 - 11
                 $AgentID:7     ! 12 - 18

End-Procedure Write-Transmitter-Record-UCT

!----------------------------------------------------------------------!
! Procedure:  Write-Transmitter-Record-XML                             !
! Descr:      Write out the transmitter record to the XML file.        !
!                                                                      !
!----------------------------------------------------------------------!
Begin-Procedure Write-Transmitter-Record-XML

   let $xml_tag = 'TransmissionHeader'
   do Write-XML-Begin-Tag

      let $xml_tag = 'Jurisdiction'
      let $xml_content =  'Florida'    ! always "Florida"
      do  Write-XML-Tag-With-Content

      let $xml_tag = 'TransmissionId'
      let $xml_content =  $TransmissionId
      do  Write-XML-Tag-With-Content

      let $xml_tag = 'Timestamp'
      let $xml_content =  datetostr(datenow(),'YYYY-MM-DDTHH:MM:SS')   ! format current dt as "yyyy-(m)m-(d)dThh:mm:ss"  (24-hour clock)
      do  Write-XML-Tag-With-Content

      let $xml_tag = 'Transmitter'
      do Write-XML-Begin-Tag

         let $xml_tag = 'ETIN'
         let $xml_content =  '00000'   ! Enter "00000" if unknown.
         do  Write-XML-Tag-With-Content

      let $xml_tag = 'Transmitter'
      do Write-XML-End-Tag

      let $xml_tag = 'ProcessType'
      let $xml_content = 'P'          ! Enter "T" for test and "P" for production
      do  Write-XML-Tag-With-Content

   let $xml_tag = 'TransmissionHeader'
   do Write-XML-End-Tag

   let $xml_tag = 'OriginHeaders'
   do Write-XML-Begin-Tag

      let $xml_tag = 'ReturnOriginHeader'
      do Write-XML-Begin-Tag

         let $xml_tag = 'OriginId'
         let $xml_content = '00000000'       ! always "00000000"
         do  Write-XML-Tag-With-Content

         let $xml_tag = 'Timestamp'
         let $xml_content =  datetostr(datenow(),'YYYY-MM-DDTHH:MM:SS')   ! format current dt as "yyyy-(m)m-(d)dThh:mm:ss"  (24-hour clock)
         do  Write-XML-Tag-With-Content

         let $xml_tag = 'OriginManifest itemCount="1"'
         do Write-XML-Begin-Tag

         let $xml_tag = 'ItemReference contentLocation="1"/'
         do Write-XML-Begin-Tag
         subtract 3 from #indent

         let $xml_tag = 'OriginManifest'
         do Write-XML-End-Tag

         let $xml_tag = 'Originator'
         do Write-XML-Begin-Tag

            let $xml_tag = 'AgentIdentifier'
            let $xml_content = 'E' || rtrim($AgentID,' ')        ! from CO_STATETAX_TBL.EMPLOYER_ID_SUT
            do  Write-XML-Tag-With-Content

         let $xml_tag = 'Originator'
         do Write-XML-End-Tag

      let $xml_tag = 'ReturnOriginHeader'
      do Write-XML-End-Tag

   let $xml_tag = 'OriginHeaders'
   do Write-XML-End-Tag

End-Procedure Write-Transmitter-Record-XML

!----------------------------------------------------------------------!
! Procedure:  Open-XML-File                                            !
! Descr:      Open the XML file and write out the XML headers.         !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Open-XML-File

  let $FileID_X = $FileOutputPath || 'TAX810FL.XML'
  open $FileID_X as 20 for-writing record=200:vary

  do Write-XML-Headers

end-procedure Open-XML-File

!----------------------------------------------------------------------!
! Procedure:  Write-XML-Headers                                        !
! Descr:      Write out the XML headers.                               !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Write-XML-Headers

  write 20 from '<?xml version="1.0" encoding="UTF-8"?>'
  write 20 from '<Transmission xmlns="http://www.irs.gov/efile" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'
  write 20 from '     xsi:schemaLocation="http://www.irs.gov/efile ..\schemas\Transmission.xsd">'

end-procedure Write-XML-Headers

!----------------------------------------------------------------------!
! Procedure:  Write-XML-Company-Data                                   !
! Descr:      Write out company header to XML file.                    !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Write-XML-Company-Data

   let $xml_tag = 'ReturnData documentCount="1"'
   do Write-XML-Begin-Tag

      let $xml_tag = 'StateReturn'
      do Write-XML-Begin-Tag

         let $xml_tag = 'StateUI documentType="Form" documentName="FSET StateUI" documentId="UCT-6"'
         do Write-XML-Begin-Tag

            let $xml_tag = 'ReturnHeader'
            do Write-XML-Begin-Tag

               move &TX.Balance_Qtr to $RptQtrNum 9
               let $xml_tag = 'Quarter'
               let $xml_content = $RptQtrNum
               do  Write-XML-Tag-With-Content

               let $xml_tag = 'Taxyear'
               let $xml_content = $RptYear
               do  Write-XML-Tag-With-Content

               let $xml_tag = 'SoftwareId'
               let $xml_content = $SoftwareID
               do  Write-XML-Tag-With-Content

               let $xml_tag = 'ReturnType'
               let $xml_content = 'StateUI'
               do  Write-XML-Tag-With-Content

               let $xml_tag = 'Form'
               let $xml_content = 'UCT-6'
               do  Write-XML-Tag-With-Content

               let $xml_tag = 'FilingAction'
               do Write-XML-Begin-Tag

                  let $xml_tag = 'Action'
                  let $xml_content = 'Original'
                  do  Write-XML-Tag-With-Content

                  let $xml_tag = 'Reason'
                  let $xml_content = $FilingReason
                  do  Write-XML-Tag-With-Content

               let $xml_tag = 'FilingAction'
               do Write-XML-End-Tag

               let $xml_tag = 'TIN'
               do Write-XML-Begin-Tag

                  let $xml_tag = 'TypeTIN'
                  let $xml_content = 'FEIN'
                  do  Write-XML-Tag-With-Content

                  let $xml_tag = 'TINTypeValue'
                  let $xml_content = $FedEIN
                  do  Write-XML-Tag-With-Content

               let $xml_tag = 'TIN'
               do Write-XML-End-Tag

                let $xml_tag = 'StateEIN'
               do Write-XML-Begin-Tag

                  let $xml_tag = 'TypeStateEIN'
                  let $xml_content = 'UIAccountNo'
                  do  Write-XML-Tag-With-Content

                  let $xml_tag = 'StateEINValue'
                  let $xml_content = $StateEin
                  do  Write-XML-Tag-With-Content

               let $xml_tag = 'StateEIN'
               do Write-XML-End-Tag

               let $xml_tag = 'BusinessAddress'
               do Write-XML-Begin-Tag

                  let $xml_tag = 'BusinessName'
                  let $xml_content = rtrim($ErName,' ')
                  let #max_length = 57
                  do  Convert-And-Write-XML-Text-Data

                  let $xml_tag = 'AddressLine'
                  let $xml_content = rtrim($ErAddress,' ')
                  let #max_length = 22
                  do  Convert-And-Write-XML-Text-Data

                  let $xml_tag = 'City'
                  let $xml_content = rtrim($City,' ')
                  let #max_length = 22
                  do  Convert-And-Write-XML-Text-Data

                  let $xml_tag = 'StateOrProvince'
                  let $xml_content = $StateCd
                  do  Write-XML-Tag-With-Content

                  let $xml_tag = 'ZipCode'
                  if rtrim($ZipExtsn,' ') = ''
                    let $xml_content = substr($Zip,1,5) || '9999'
                  else
                    let $xml_content = substr($Zip,1,5) || substr($ZipExtsn,1,4)
                  end-if
                  do  Write-XML-Tag-With-Content

                  let $ChkNum   = rtrim($CompanyBusPhone,' ')
                  do Edit-PhoneNumber-XML($ChkNum,'TransmitterPhone',$CompanyBusPhone)
                  let $xml_tag = 'PhoneNumber'
                  let $xml_content = rtrim($CompanyBusPhone,' ')
                  do  Write-XML-Tag-With-Content

               let $xml_tag = 'BusinessAddress'
               do Write-XML-End-Tag

               let $xml_tag = 'Contact'
               do Write-XML-Begin-Tag

                  let $xml_tag = 'ContactName'
                  do Write-XML-Begin-Tag

                     let $xml_tag = 'FirstName'
                     let $xml_content = rtrim($TransmitterFirstName,' ')
                     do  Convert-And-Write-XML-Text-Data

                     let $xml_tag = 'MiddleName'
                     let $xml_content = rtrim($TransmitterMiddleInitial,' ')
                     do  Convert-And-Write-XML-Text-Data

                     let $xml_tag = 'LastName'
                     let $xml_content = rtrim($TransmitterLastName,' ')
                     do  Convert-And-Write-XML-Text-Data

                  let $xml_tag = 'ContactName'
                  do Write-XML-End-Tag

                  let $ChkNum   = rtrim($TransmitterPhone,' ')
                  do Edit-PhoneNumber-XML($ChkNum,'TransmitterPhone',$TransmitterPhone)
                  let $xml_tag = 'Phone'
                  let $xml_content = rtrim($TransmitterPhone,' ')
                  do  Write-XML-Tag-With-Content

                  let $xml_tag = 'EmailAddress'
                  let $xml_content = rtrim($TransmitterEmail,' ')
                  do  Write-XML-Tag-With-Content

               let $xml_tag = 'Contact'
               do Write-XML-End-Tag

            let $xml_tag = 'ReturnHeader'
            do Write-XML-End-Tag

         let $xml_tag = 'UITotalWages'
         let $xml_content = $Co_NlGrs_QTD_XML
         do Write-XML-Tag-With-Content

         let $xml_tag = 'ExcessWages'
         let $xml_content = $Co_ExGrs_QTD_XML
         do  Write-XML-Tag-With-Content

         let $xml_tag = 'UITaxableWages'
         let $xml_content = $Co_TxGrs_QTD_XML
         do  Write-XML-Tag-With-Content

         let $xml_tag = 'ContributionRate'
         let $xml_content = $UI_Rate
         do  Write-XML-Tag-With-Content

         let $xml_tag = 'ContributionDue'
         let $xml_content = $TaxesDueXML
         do  Write-XML-Tag-With-Content

         let $xml_tag = 'UIInterest'
         let $xml_content = $PenaltyXML
         do  Write-XML-Tag-With-Content

         let $xml_tag = 'UIPenalty'
         let $xml_content = $InterestXML
         do  Write-XML-Tag-With-Content

         let $xml_tag = 'UITotalDue'
         let $xml_content = $TotalPaymentXML
         do  Write-XML-Tag-With-Content

         let $xml_tag = 'PayRoll'
         do Write-XML-Begin-Tag

   move &TX.Balance_Year to $PdQtrEndDate xxxx
   move &TX.Balance_Qtr  to #PdQtrEndMonth
   multiply 3 times #PdQtrEndMonth
   move #PdQtrEndMonth    to $PdQtrEndMonth 09
   concat $PdQtrEndMonth with $PdQtrEndDate -xx-3

   if &TX.Balance_Qtr = 1 or &TX.Balance_Qtr = 4
      concat '1' with $PdQtrEndDate
   else
      concat '0' with $PdQtrEndDate
   end-if

   move 'Y' to $RecordWritten

end-procedure Write-XML-Company-Data

!----------------------------------------------------------------------!
! Procedure:  Write-XML-Company-Footer                                 !
! Descr:      Write out employer total lines                           !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Write-XML-Company-Footer

   let $xml_tag = 'PayRoll'
   do Write-XML-End-Tag

   move  #Count_S            to $NumberOfEmployees  9999999
   move  $NumberOfEmployees  to $xml_content
   let $xml_tag = 'NumberOfEmployees'
   do  Write-XML-Tag-With-Content

   let $xml_tag = 'Month1Employees'
   let $xml_content =  $Month1count_XML
   do  Write-XML-Tag-With-Content

   let $xml_tag = 'Month2Employees'
   let $xml_content =  $Month2count_XML
   do  Write-XML-Tag-With-Content

   let $xml_tag = 'Month3Employees'
   let $xml_content =  $Month3count_XML
   do  Write-XML-Tag-With-Content

   if $Payment_Dt > ''

   let $xml_tag = 'Payment'
   do Write-XML-Begin-Tag

   let $xml_tag = 'PaymentInstrument'
   do Write-XML-Begin-Tag

   let $xml_tag = 'PaymentMethodType'
   let $xml_content = 'DBT'
   do  Write-XML-Tag-With-Content

   let $xml_tag = 'ACHDebit'
   do Write-XML-Begin-Tag

   let $xml_tag = 'RoutingTransitNumber'
   let $xml_content = $Transit_Num
   do  Write-XML-Tag-With-Content

   let $xml_tag = 'BankAccountNumber'
   let $xml_content = $Bank_Acct_Num
   do  Write-XML-Tag-With-Content

   let $xml_tag = 'AccountType'
   let $xml_content = $AccountType
   do  Write-XML-Tag-With-Content

   let $xml_tag = 'AccountHolderType'
   let $xml_content = '1'        ! 1=Corporate, 2=Personal
   do  Write-XML-Tag-With-Content

   let $xml_tag = 'ACHDebit'
   do Write-XML-End-Tag

   let $xml_tag = 'PaymentInstrument'
   do Write-XML-End-Tag

   let $xml_tag = 'PaymentIdentifier'
   let $xml_content = '1'
   do  Write-XML-Tag-With-Content

   let $xml_tag = 'PaymentAmount'
   do Write-XML-Begin-Tag

   let $xml_tag = 'DebitAmount'
   let $xml_content = $TotalPaymentXML
   do  Write-XML-Tag-With-Content

   let $xml_tag = 'PaymentAmount'
   do Write-XML-End-Tag

   let $xml_tag = 'ActualSettlementDate'
   let $xml_content = $Payment_Dt
   do  Write-XML-Tag-With-Content

   let $xml_tag = 'Payment'
   do Write-XML-End-Tag

   end-if

   let $xml_tag = 'StateUI'
   do Write-XML-End-Tag

   let $xml_tag = 'StateReturn'
   do Write-XML-End-Tag

   let $xml_tag = 'ReturnData'
   do Write-XML-End-Tag

end-procedure Write-XML-Company-Footer

!----------------------------------------------------------------------!
! Procedure:  Write-XML-Employee-Data                                  !
! Descr:      Write out employee data XML record.                      !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Write-XML-Employee-Data

  move #NlGrs_QTD_XML             to $NlGrs_QTD_XML               999999999.99
  move #TxGrs_QTD_XML             to $TxGrs_QTD_XML               999999999.99

  move $OutOfStateStatus          to $outofState

  move  #OutOfStateWages_XML          to $OutOfStateWages_XML         999999999.99
  move  #OutOfStateTaxableWages_XML   to $OutOfStateTaxableWages_XML  999999999.99

  do Chk-Empl-Name

  let $xml_tag = 'Employee'
  do Write-XML-Begin-Tag

    let $xml_tag = 'SSN'
    let $xml_content = rtrim($NATIONAL_ID,' ')
    do  Write-XML-Tag-With-Content

    let $xml_tag = 'Employee'
    do Write-XML-Begin-Tag

       let $xml_tag = 'FirstName'
       let $xml_content =  rtrim($FirstName,' ')
       let #max_length = 15
       do  Write-XML-Tag-With-Content

            let $xml_tag = 'MiddleName'
            let $xml_content =  rtrim($MiddleName,' ')
            let #max_length = 1
            do  Write-XML-Tag-With-Content

            let $xml_tag = 'LastName'
            let $xml_content =  rtrim($LastName,' ')
            let #max_length = 20
            do  Write-XML-Tag-With-Content

            let $xml_tag = 'Suffix'
            let $xml_content =  rtrim($Suffix,' ')
            let #max_length = 4
            do  Write-XML-Tag-With-Content

         let $xml_tag = 'Employee'
         do Write-XML-End-Tag

         let $xml_tag = 'TotalWages'
         let $xml_content = $NlGrs_QTD_XML
         do  Write-XML-Tag-With-Content

         let $xml_tag = 'TaxableWages'
         let $xml_content = $TxGrs_QTD_XML
         do  Write-XML-Tag-With-Content

         let $xml_tag = 'OutOfStateWages'
         do Write-XML-Begin-Tag

            let $xml_tag = 'TotalWages'
            let $xml_content = '0.00'   !  $OutOfStateWages_XML
            do  Write-XML-Tag-With-Content

            let $xml_tag = 'TaxableWages'
            let $xml_content = $OutOfStateTaxableWages_XML
            do  Write-XML-Tag-With-Content

            let $xml_tag = 'TaxState'
            let $xml_content = $OutOfStateState
            do  Write-XML-Tag-With-Content

         let $xml_tag = 'OutOfStateWages'
         do Write-XML-End-Tag

         let $xml_tag = 'EducationalWages'
         do Write-XML-Begin-Tag

            let $xml_tag = 'TotalWages'
            let $xml_content = '0.00'
            do  Write-XML-Tag-With-Content

         let $xml_tag = 'EducationalWages'
         do Write-XML-End-Tag

      let $xml_tag = 'Employee'
      do Write-XML-End-Tag

end-procedure Write-XML-Employee-Data

!----------------------------------------------------------------------!
! Procedure:  Edit-PhoneNumber-XML                                     !
! Descr:      Edits phone number data to conform to XML file specs.    !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Edit-PhoneNumber-XML($ChkNum,$NumType,:$OutputName)

  let #OtherCharFound = 0
  let #ChkNum_Lgth = length($ChkNum)
  let #ChkNum_Pos  = 1

  while #ChkNum_Pos <= #ChkNum_Lgth
    let $ChkNum_Sub  = substr($ChkNum, #ChkNum_Pos, 1)
    let $ChkNum_Sub  = upper($ChkNum_Sub)
    let #ChkNum_Rem_Lgth = #ChkNum_Lgth - #ChkNum_Pos

    let #ChkNum_Inst = instr('0123456789 ',$ChkNum_Sub, 1)
    if #ChkNum_Inst = 0
       if ($NumType = 'TransmitterPhone') OR
          ($NumType = 'TransmitterFax')
           let $OutputName = substr($OutputName,1,#ChkNum_Pos - 1 - #OtherCharFound )
               || substr($OutputName,#ChkNum_Pos + 1 - #OtherCharFound,#ChkNum_Rem_Lgth)
          add 1  to  #OtherCharFound
       end-if
    end-if

    add 1 to #ChkNum_Pos
  end-while

end-procedure Edit-PhoneNumber-XML

!----------------------------------------------------------------------!
! Procedure:  Complete-XML-File                                        !
! Descr:      Write out final line of XML file.                        !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Complete-XML-File

   let $xml_tag = 'Transmission'
   do Write-XML-End-Tag

end-procedure Complete-XML-File

!----------------------------------------------------------------------!
! Procedure:  Convert-And-Write-XML-Text-Data                          !
! Descr:      Convert special XML reserve characters to their standard !
!             replacement values before embedding in the XML tag.      !
!                                                                      !
!----------------------------------------------------------------------!
begin-procedure Convert-And-Write-XML-Text-Data

    let $InputText = $xml_content
    do Translate-Special-Characters-for-XML

    let $xml_content = $OutputText
    do Write-XML-Tag-With-Content

end-procedure Convert-And-Write-XML-Text-Data

!----------------------------------------------------------------------!
! Procedure:  Write-XML-Tag-With-Content                               !
! Descr:      Write out XML tag with embedded data.                    !
!             Example: <XML_tag>content</XML_tag>                      !
!----------------------------------------------------------------------!
begin-procedure Write-XML-Tag-With-Content

   if #indent < 1
      let $xml_tab = ''
      let #indent = 0
   else
      let $xml_tab = substr($Spaces60,1,#indent)
   end-if

   let $trimmed_content = rtrim($xml_content,' ')
   let $xml_content = ltrim($trimmed_content,' ')

   let $xml_output_line = $xml_tab
                || $xml_cntrl_begin || $xml_tag || $xml_cntrl_end  || $xml_content
                || $xml_cntrl_begin || $xml_tag_end || $xml_tag || $xml_cntrl_end
   write 20 from $xml_output_line

end-procedure Write-XML-Tag-With-Content

!----------------------------------------------------------------------!
! Procedure:  Write-XML-Begin-Tag                                      !
! Descr:      Write out the XML beginning tag.                         !
!             Example: <XML_tag>                                       !
!----------------------------------------------------------------------!
begin-procedure Write-XML-Begin-Tag

   if #indent < 1
      let $xml_tab = ''
      let #indent = 0
   else
      let $xml_tab = substr($Spaces60,1,#indent)
   end-if

   let $xml_output_line = $xml_tab
                || $xml_cntrl_begin || $xml_tag|| $xml_cntrl_end

   write 20 from $xml_output_line

   add 3 to #indent

end-procedure Write-XML-Begin-Tag

!----------------------------------------------------------------------!
! Procedure:  Write-XML-End-Tag                                        !
! Descr:      Write out the XML ending tag.                            !
!             Example: </XML_tag>                                      !
!----------------------------------------------------------------------!
begin-procedure Write-XML-End-Tag

   subtract 3 from #indent

   if #indent < 1
      let $xml_tab = ''
      let #indent = 0
   else
      let $xml_tab = substr($Spaces60,1,#indent)
   end-if

   let $xml_output_line = $xml_tab
                || $xml_cntrl_begin || $xml_tag_end || $xml_tag|| $xml_cntrl_end

   write 20 from $xml_output_line

end-procedure Write-XML-End-Tag

!----------------------------------------------------------------------!
! Procedure: Translate-Special-Characters-for-XML                      !
! Descr:     Convert special characters into character strings         !
!            prior to writing the data in the XML file.                !
!                                                                      !
!            '&' will be converted to '&amp;'                          !
!            '"' will be converted to '&quot;'                         !
!            '<' will be converted to '&lt;'                           !
!            '>' will be converted to '&gt;'                           !
!            ''' will be converted to '&apos;'                         !
!----------------------------------------------------------------------!
begin-procedure Translate-Special-Characters-for-XML

  let $InputText  = replace($InputText, '&', '&amp;')
  let $InputText  = replace($InputText, '"', '&quot;')
  let $InputText  = replace($InputText, '<', '&lt;')
  let $InputText  = replace($InputText, '>', '&gt;')
  let $InputText  = replace($InputText, '''', '&apos;')

  let $OutputText = substr($InputText,1,#max_length)

end-procedure Translate-Special-Characters-for-XML

!***********************************************************************
! Procedure Write-To-Error-Log
!***********************************************************************
begin-procedure Write-To-Error-Log

  let $FileID_Err = $FileOutputPath || 'RSI860FL.' || $PRCS_Process_Instance || '.err'
  open $FileID_Err as 30 for-append record=512:vary

  write 30 from $ErrMsg:512
  close 30
  let $ErrMsg = ''
  let #ErrCnt = #ErrCnt + 1

  if #ErrCnt >= #ErrMax
     Show '*****************************************************'
     Show '   The maximum number of errors has been reached.'
     Show '   Processing has not finished successfully.'
     Show '   Please review error log for details.'
     Show '     Error Log: ' $FileID_Err
     Show '*****************************************************'
     Stop
  end-if

end-procedure Write-To-Error-Log

!***********************************************************************
! Procedure Errors-In-Processing
!***********************************************************************
begin-procedure Errors-In-Processing

  Show '*****************************************************'
  Show '   Errors were encountered in processing.'
  Show '   The following error log file was produced.'
  Show '   Please correct these errors and rerun this report.'
  Show '     Error Log: ' $FileID_Err
  Show '*****************************************************'

end-procedure Errors-In-Processing

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'number.sqc'    !Routines to format numbers
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'datemath.sqc'  !Date math procedures
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Process Scheduler Run Controls
