!***********************************************************************
!  GEXHR012:  SALARY INCREASE AUDIT                                    *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 2000 Giant Eagle,Inc. All Rights Reserved              *
!                                                                      *
!***********************************************************************
!                                                                      *
! GEXHR012:  		SALARY INCREASE AUDIT REPORT                   * 
!                                                                      *        
! Narrative:		This program tracks productive hours worked    *
!                       and flags employees who cross milestones of    *
!                       1000 or 2000 hours.                            *
!                                                                      *
! #Debugx Used:	        #debug9 paragraph trace                        *
!                       #debug8,7 data returned from sql calls         *
!                                                                      *  
! SQL Tables:		gex_dept_tbl                                   *
!                       employment                                     *
!                       personal_data                                  *
!                       earnings_bal                                   *
!                       job                                            *
!                       gex_indlife_bal                                *
!                       pay_oth_earns                                  *
!                       pay_earnings                                   *
!                                                                      *  
! Written by:	        Tony Labra 08/29/2000                          *       
!                                                                      *
! Normally Run:	        Weekly                                         *
!                                                                      *
! Control Parms:        FOR WHERE CLAUSE:                              *
!			  Company Division Code                        *
!			  Company  	                               *
!			  Paygroup  	                               *
!			  Deptid	                               *
!			  Employee Status	                       *
!			  Account Code                                 *
!			  As Of Date                                   *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  INITIALS	DATE		DESCRIPTION OF THE CHANGE              *
!***********************************************************************
!  AXL		08/29/2000	Initial Creation                       *
!                                                                      *
!  AXL          03/01/2001      Re-tooled per user request to track    *
!                               hours since last increase date.        *
!								       *				
!  AXC		07/25/2002	Add Empl_rcd as part of Key on 	       *
!				PS_EARNINGS_BAL - 8.3 Upgrade	       * 
!                                                                      *
! GEX-MXT       03/24/2008     Fixed for REHIRE DT issue in 9.0        *
! ISDVASS       04/09/2008     used $WHERE_SELECT_ASOFDATE instead of sysdate*
!                              to pull rehire_dt from custom sqc       *
! VENDTKK       02/02/2009     Added INCLUDE GETPOSNM.SQC to pull      *
!                  	           JOBTITLE from POSITION_DATA.DESCR   *
!				   field instead of JOBCODE_TBL.DESCR  *
!			           	                               *
! GEX_SEC_REENG 2015-06-24 Vahini Katta                                *
! Changes related to gex_emplid_mapp/7 digit emplid                    *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup02.sqc'

!AXL 03/01/2001 New Setup section
!********************
Begin-Setup
!********************
  Declare-Variable
    Date     $Prn_Start_Dt
  End-Declare
 
  #define #col_name		1
  #define #col_emplid     	35
  #define #col_jobtitle		50
  #define #col_hire_dt		65
  #define #col_incr_dt		80
  #define #col_reset_act  	95
  #define #col_reset_dt   	100
  #define #col_wrk_sts		115
  #define #col_rate		125	
  #define #col_hrs_curr		135
  #define #col_accum_hrs	145
  #define #col_flag		160
  
End-Setup
!AXL 03/01/2001 - End
!*********************************************************************
begin-report
!*********************************************************************

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init

  do Init-Report
  do Main

  do EOJ
  do Stdapi-Term

end-report

!***********************************************************************
Begin-Heading 9
!***********************************************************************
  #Include 'stdhdg02.sqc'

  Print $pay_period         (3,)  Center

  if $Deptid <> $priorDeptid
    do Get-Department-Name
    move $Deptid to $priorDeptid
  end-if

  print 'Deptid'               (4,1)
  print $Deptid                (0,13)
  print $DeptName              (0,+2)
!AXL 03/01/2001 - Begin
  Print '  Total'	        (+2,{#col_hrs_curr})
  Print 'Salary'		(+0,{#col_flag})
  Print 'Hours Since'		(+0,{#col_accum_hrs})

  Print '  Last' 	        (+1,{#col_incr_dt})
  Print 'Reset' 	        (+0,{#col_reset_dt})
  Print 'Hourly'		(+0,{#col_rate})
  Print '  Accum'		(+0,{#col_hrs_curr})
  Print '   Last'		(+0,{#col_accum_hrs})
  Print 'Increase'		(+0,{#col_flag})

  Print 'Name'   		(+1,{#col_name})
  Print 'Emplid'	        (+0,{#col_emplid})
  Print 'Job Title'		(+0,{#col_jobtitle})
  Print 'Hire Date'   		(+0,{#col_hire_dt})
  Print 'Incr Date' 	                (+0,{#col_incr_dt})
  Print 'Action & Date'         (+0,{#col_reset_act})
  Print 'Status'	        (+0,{#col_wrk_sts})
  Print '  Rate'		(+0,{#col_rate})
  Print '  Hours'		(+0,{#col_hrs_curr})
  Print 'Incr/Hire'			(+0,{#col_accum_hrs})
  Print 'Indicator'	        (+0,{#col_flag})

  Print '-'                    (+1,{#col_name},168)  Fill
!AXL 03/01/2001 - End  
End-Heading

!***********************************************************************
Begin-Footing 5
!***********************************************************************

  Print '-'                (+1,{#col_name},168)  Fill   !AXL 03/01/2001
  Print $hourly_rt_display_criteria     (+2,3) 
  Print 'Maximum hourly rate for LEVEL TWO wage scale'	(0,+2)

  !*******************************************************************
  ! AXL - 8/29/2000                                                  *
  ! Reset.sqc's code is being used in conjuction with custom display *
  ! message shown above.                                             *
  !*******************************************************************

  if $End_of_Report = 'Y'
    
    if $stdhdg_end_rep = ''
      print 'End of Report' (+1,1) center
    else
      print $stdhdg_end_rep (+1,1) center
    end-if
  end-if

End-Footing

!***********************************************************************
begin-procedure Init-Report
!***********************************************************************
#debug9 show 'Init-Report'

  Let $GEXXX900_Company_Alias  = 'J.COMPANY'
  Let $GEXXX901_Company_Alias  = 'J.COMPANY'
  Let $GEXXX901_Paygroup_Alias = 'J.PAYGROUP'
  Let $GEXXX902_Deptid_Alias   = 'J.DEPTID'
  Let $GEXXX903_Emp_Stat_Alias = 'J.EMPL_STATUS'
  Let $GEXXX907_Div_CD_Alias   = 'GDT.GEX_COMPANY_DIV_CD'                    
  Let $GEXXX909_Acct_CD_Alias  = 'J.ACCT_CD'

  If $prcs_process_instance = ''
    Do SQRW-Run-Controls  
  Else
    Do Process-Scheduler-Run-Controls
  End-if

  let $hourly_rt_display_criteria = edit(#hourly_rt,'$$9.99')

  Do get-pay-end-dt

  let $ReportID = 'GEXHR012'
  let $ReportTitle = 'Salary Increase Audit Report'
  Let $Order_By      = 'Company, DeptID, Name'

  display $ReportID noline
  display ' - '     noline
  display $ReportTitle 

  date-time () hh:mi:ss &TimeBegan
  date-time () MM/DD/YYYY  &DateBegan
  show 'Report Began at ' &TimeBegan ' on '  &DateBegan

  Show '$ReportID    = ' $ReportID
  Show '$ReportTitle = ' $ReportTitle
 
  Show '$GEXXX900_Include_Company_Criteria 	    = ' $GEXXX900_Include_Company_Display_Criteria
  Show '$GEXXX901_Include_Company_Paygroup_Criteria = ' $GEXXX901_Include_Company_Paygroup_Display_Criteria
  Show '$GEXXX902_Include_Deptid_Criteria           = ' $GEXXX902_Include_Deptid_Display_Criteria
  Show '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA         = ' $GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA
  Show '$GEXXX907_INCLUDE_DIV_CD_CRITERIA           = ' $GEXXX907_INCLUDE_DIV_CD_DISPLAY_CRITERIA
  Show '$GEXXX909_INCLUDE_ACCT_CD_CRITERIA          = ' $GEXXX909_INCLUDE_ACCT_CD_DISPLAY_CRITERIA
  show '$Hourly_Rt_Criteria                         = ' $hourly_rt_display_criteria
  Show '$WHERE_SELECT_ASOFDATE                      = ' $WHERE_SELECT_ASOFDATE 
  Show '$ORDER_BY                                   = ' $ORDER_BY  

  Do Print-Cover-Page

end-procedure

!***********************************************************************
Begin-Procedure SQRW-Run-Controls 
!***********************************************************************
#debug9 show 'SQRW-Run-Controls'

  Do GEXXX950-Input-Parameters
  Let $WHERE_SELECT_ASOFDATE = $X000_WHERE_SELECT_ASOFDATE
  input #hourly_rt 'Enter hourly rate for category split in 99.99 Format ' type=number
  if isblank(to_char(#hourly_rt))
     display 'Invalid .... Need an Hourly Rate '
  end-if

End-Procedure

!***********************************************************************
Begin-Procedure Process-Scheduler-Run-Controls 
!***********************************************************************
#debug9 show 'Process-Scheduler-Run-Controls'

  Do GEXRCHR1-SELECT-PARAMETERS
  Do GEXXX900-Select-Company-Parameters
  Do GEXXX901-Select-Company-Paygroup-Parameters
  Do GEXXX902-Select-Deptid-Parameters
  Do GEXXX903-Select-Emp-Stat-Parameters
  Do GEXXX907-Select-Div-CD-Parameters 
  Do GEXXX909-Select-Acct-CD-Parameters

  Let $WHERE_SELECT_ASOFDATE = $GEX_RC_HR.AsOfDate
  Let #hourly_rt             = #GEX_RC_HR.HOURLY_RT

  If Rtrim ($GEX_RC_HR.AsOfDate, ' ') = ''
    Let $WHERE_SELECT_ASOFDATE = $asoftoday
  End-If

End-Procedure

!***********************************************************************
begin-procedure Print-Cover-Page
!***********************************************************************
#debug9 show 'Print-Cover-Page'

  Print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'            (+5,1)
  Print '$Prcs_OprID          ='                                  (+2,5)
  Print $Prcs_OprID                                               (0,+2)
  Print '$Prcs_Run_Cntl_ID    ='                                  (+1,5)
  Print $Prcs_Run_Cntl_ID                                         (0,+2)

  Print 'SELECTION CRITERIA FOR THIS REPORT RUN:'                 (+5,2)

  Print '$GEXXX900_Include_Company_Criteria                   ='   (+1,5)
  Print  $GEXXX900_Include_Company_Display_Criteria                (0,+2)

  Print '$GEXXX901_Include_Company_Paygroup_Criteria          ='   (+1,5)
  Print  $GEXXX901_Include_Company_Paygroup_Display_Criteria       (0,+2)

  Print '$GEXXX902_Include_Deptid_Criteria                    ='   (+1,5)
  Print $GEXXX902_Include_Deptid_Display_Criteria                  (0,+2)

  Print '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA                  ='   (+1,5)
  Print $GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA                (0,+2)

  Print '$GEXXX907_INCLUDE_DIV_CD_CRITERIA                    ='   (+1,5)
  Print $GEXXX907_INCLUDE_DIV_CD_DISPLAY_CRITERIA                   (0,+2)

  Print '$GEXXX909_INCLUDE_ACCT_CD_CRITERIA                   ='   (+1,5)
  Print $GEXXX909_INCLUDE_ACCT_CD_DISPLAY_CRITERIA                 (0,+2)

  Print 'Hourly_rt category split                             ='   (+1,5)
  Print $hourly_rt_display_criteria		                   (0,+2)

  Print '$WHERE_SELECT_ASOFDATE                               ='   (+1,5)
  Print  $WHERE_SELECT_ASOFDATE                                    (0,+2)

  Print '$PAY_END_DT                                          ='   (+1,5)
  Print  $pay_end_dt			                           (0,+2)

  Print '$PREV PAY_END_DT                                     ='   (+1,5)
  Print  $prev_pay_end_dt                                          (0,+2)
  
  Print 'SORT ORDER FOR THIS REPORT RUN:'                          (+3,2)
  Print '$Order_By                                            ='   (+1,5)
  Print $Order_By                                                  (0,+2)

  Let #PAGE-COUNT = 0
 
End-Procedure

!*********************************************************************
Begin-Procedure Get-Pay-End-Dt
!*********************************************************************+
#debug9 show 'Get-Pay-End-Dt'

move 'N' to $found

begin-select loops = 1 
P.PAY_END_DT
P.PAY_END_DT-7 &prev_ped

  move 'Y' to $found
  let $pay_end_dt = &P.PAY_END_DT
  let $prev_pay_end_dt = &prev_ped

FROM PS_PAY_CALENDAR P

WHERE P.PAY_END_DT = (SELECT DISTINCT(MAX(PAY_END_DT))
   		      FROM PS_PAY_CALENDAR
                       WHERE PAY_END_DT <= $WHERE_SELECT_ASOFDATE
                       AND PAY_SHEETS_RUN = 'Y')
end-select

if $found = 'N'
   display 'No Pay Cycle as of:' noline
   display $AsOfToday
   stop
end-if

end-procedure

!*********************************************************************
begin-procedure Main
!*********************************************************************
#debug9 show 'Main'

  let $sql-statement = 'Main'

begin-select 
J.COMPANY	(,) On-Break
	            Print=Never
                    Level=1        
J.PAYGROUP
J.DEPTID	(,) On-Break
	            Print=Never
                    Level=2
                    Before=Before-DeptId
                  
J.JOBCODE
J.EMPLID 
J.EMPL_RCD
J.HOURLY_RT
J.FULL_PART_TIME
E.HIRE_DT
!E.REHIRE_DT		!gex-mxt commented for rehire date logic
E.LAST_INCREASE_DT
 Do format-datetime (&E.LAST_INCREASE_DT,$L_INCR_DT,{DEFCMP},'','')  
PD.NAME
SYSDATE        &GEXJOB_REH_ASOFDATE 	!GEX-MXT ADDED FOR REHIRE DATE LOGIC IN 9.0
J.Position_nbr      !VENDTKK   ITG#56786   2-Feb-2009

  Let $Position_Nbr = &J.Position_nbr     !VENDTKK   ITG#56786   2-Feb-2009
  Let $Company 	=  &J.COMPANY
  Let $DeptID  	=  &J.Deptid
  Let $jobcode	=  &J.JOBCODE

  ! GEX-MXT 03/24/2008 Fixed for REHIRE DT-BEGIN
   let $GEXJOB_REH_EMPLID = &J.EMPLID
   let #GEXJOB_REH_EMPLRCD = &J.EMPL_RCD
!   let $GEXJOB_REH_ASOFDATE = &GEXJOB_REH_ASOFDATE             ! ISDVASS used $WHERE_SELECT_ASOFDATE instead of sysdate
   Let $GEXJOB_REH_ASOFDATE = $WHERE_SELECT_ASOFDATE						! ISDVASS used $WHERE_SELECT_ASOFDATE instead of sysdate
   do Get-Job-Rehire-Dt
  ! GEX-MXT 03/24/2008 Fixed for REHIRE DT-END

	
  do get-job-title
  !VENDTKK Begin   ITG#56786   2-Feb-2009

  Do Get-Position-Title			 !getposnm.sqc
  	 IF $PosNameAbbrv = '' 
  		Let $JobTitleAbbrv = $JobTitleAbbrv
	 Else
 		Let $JobTitleAbbrv = $PosNameAbbrv
	 End-if
  !VENDTKK End   ITG#56786   2-Feb-2009	  

   If &j.full_part_time ='F'
      Let $Work_Sts ='FT'
   Else
      Let $Work_sts ='PT'
   End-If

  !GEX-MXT MODIFIED FOR REHIRE DATE LOGIC-BEGIN
  !if isblank(&e.rehire_dt) = 0
  !   let $start_dt     = &e.rehire_dt
  !   let $prn_start_dt = &e.rehire_dt
  !show 'emplid:' &J.emplid ',hire dt:' &e.hire_dt  ',$GEXJOB_REH_REHIRE_DT' $GEXJOB_REH_REHIRE_DT
  if isblank($GEXJOB_REH_REHIRE_DT) = 0
     let $start_dt     = $GEXJOB_REH_REHIRE_DT
     let $prn_start_dt = $GEXJOB_REH_REHIRE_DT
  !GEX-MXT MODIFIED FOR REHIRE DATE LOGIC-END     
  else 
     let $start_dt     = &e.hire_dt
     let $prn_start_dt = &e.hire_dt
  end-if
 !AXL 03/01/2001 - Begin
  let $start_dt_cmp = datetostr($prn_start_dt,'YYYYMMDD')
  !show '$start_dt_cmp ' $start_dt_cmp 
  !show '$L_INCR_DT ' $L_INCR_DT
 !AXL 03/01/2001 - End

  do check-for-resets

  !*******************************************************************
  ! AXL - 8/29/2000                                                  *
  ! If Promotion or Demotion row exists in PS_JOB, set a flag that   *
  ! will let sqr know to ignore hours accumulated prior to go-live   *
  ! (4/1/99) if the effdt is greater than go-live date.              *
  !*******************************************************************

  let $ignore_prior_hrs ='N'
  
  if $reset_flag='Y'  
    if $effdt_check > '19990401'
        let $start_dt = &P1.PAY_END_DT
        let $ignore_prior_hrs ='Y'
     end-if
  end-if

  !*******************************************************************
  ! AXL - 8/29/2000                                                  *
  ! Special procedure to grab hours tracked pre go-live.             *
  ! That info not converted to Psoft.                                *
  !*******************************************************************
  do get-life-to-date-hrs

  !*******************************************************************
  ! AXL - 8/29/2000                                                  *
  ! Interrogate PAY_EARNINGS & PAY_SPCL_EARNS to determine           *
  ! accummulated WK3 hours thru current pay end date and prior week's*
  ! pay end date for comparison purposes.                            *
  !*******************************************************************
  do get-hrs-thru-curr
  do get-hrs-thru-prev

  !*******************************************************************
  ! AXL - 8/29/2000                                                  *
  ! Special procedure to grab 1st qtr WK3 hrs from PS_EARNINGS_BAL.  *
  ! Tables being used for main accum logic does not have 1st qtr 99  *
  ! hours.  This is being done to fill the gap                       *
  !*******************************************************************
  do get-1st-qtr-hrs-99

  !Assume no demotions/promotion pre go-live but if row exists in PS_JOB
  !count pre-Psoft hrs anyway because there if no way to accum hrs from
  !that point on.
  if $ignore_prior_hrs='N'	
     let #ytd_hrs_curr = #ytd_spcl_hrs_curr + #gex_life_hrs + &1st_qtr_99
     let #ytd_hrs_prev = #ytd_spcl_hrs_prev + #gex_life_hrs + &1st_qtr_99
  else
  !Assume demotions/promotion post go-live & discard previous hrs
     let #ytd_hrs_curr = #ytd_spcl_hrs_curr 
     let #ytd_hrs_prev = #ytd_spcl_hrs_prev
  end-if

  let $rollover_flag = ' '

  if &j.hourly_rt <= #hourly_rt
     let #factor  = #ytd_hrs_curr / 1000  
     let #factor1 = #ytd_hrs_prev / 1000  
  else
     let #factor  = #ytd_hrs_curr / 2000
     let #factor1 = #ytd_hrs_prev / 2000
  end-if

  let $factor = to_char(#factor)
  unstring $factor by '.' into $integer $decimal
  let #integer_curr = to_number($integer)
  
  let $factor1 = to_char(#factor1)
  unstring $factor1 by '.' into $integer1 $decimal1
  let #integer_prev = to_number($integer1)
 !AXL 03/01/2001 - Begin
  !if #integer_curr = #integer_prev + 1
  !   let $rollover_flag = '*'
  !end-if

  let #accum_hrs = 0
  let $last_increase_dt = datetostr(&e.last_increase_dt)
  #debug8 show &j.emplid ' ' $last_increase_dt ' ' $last_increase_dt
  if isblank(&e.last_increase_dt) = 0  	!Last Increase Date is populated
     if $l_incr_dt > $start_dt_cmp
        do Get-Hrs-Since-Last-Incr	!Incr Dt ok to use
     else 
        do Get-Hrs-Since-Hire		!Incr Dt not ok to use
     end-if
  else
     let $last_increase_dt = ' '	
     do Get-Hrs-Since-Hire		!No Incr Date...use Hire Dt
  end-if

  if &j.hourly_rt > #hourly_rt
     let #target = 2000
  else
     let #target = 1000
  end-if
 !AXL 03/01/2001 - End
  
  if #accum_hrs > #target
     let $rollover_flag = '*'
  end-if
  

  Add 1 to #record_count
  Do Print-Detail

 #debug8 show &j.emplid ' ' $start_dt ' ' #ytd_hrs_prev ' ' #ytd_hrs_curr ' ' #integer_prev ' ' #integer_curr ' ' &j.jobcode ' ' &j.hourly_rt ' ' $rollover_flag
   
 FROM PS_JOB J,
      PS_EMPLOYMENT E,
      PS_PERSONAL_DATA PD,
       ps_gex_dept_tbl GDT
  WHERE J.EMPLID    = E.EMPLID 
    AND J.EMPL_RCD = E.EMPL_RCD
    AND E.EMPLID    = PD.EMPLID
    AND J.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB
        WHERE J.EMPLID    = EMPLID
          AND J.EMPL_RCD = EMPL_RCD
          AND EFFDT <= $WHERE_SELECT_ASOFDATE)
    AND J.EFFSEQ =
        (SELECT MAX(EFFSEQ) FROM PS_JOB
        WHERE J.EMPLID    = EMPLID
          AND J.EMPL_RCD = EMPL_RCD
          AND J.EFFDT     = EFFDT)    
    AND gdt.deptid                = j.deptid
    AND gdt.effdt                 =
      (Select Max(effdt)
       From   ps_gex_dept_tbl
       Where  deptid             = j.deptid
       And    effdt             <= $WHERE_SELECT_ASOFDATE)
    AND gdt.sequence_number       =
      (Select Max(sequence_number)
       From   ps_gex_dept_tbl
       Where  deptid             = gdt.deptid
       And    effdt              = gdt.effdt)
    And   [$GEXXX900_INCLUDE_COMPANY_CRITERIA]
    And   [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA] 
    And   [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]
    And   [$GEXXX902_INCLUDE_DEPTID_CRITERIA]
    And   [$GEXXX907_INCLUDE_DIV_CD_CRITERIA]
    And   [$GEXXX909_INCLUDE_ACCT_CD_CRITERIA]
!and j.emplid in ('200649826','173664269','195505304')
Order by j.company, j.deptid, pd.name
  
end-select
  
end-procedure

!***********************************************************************
Begin-procedure Before-Deptid
!***********************************************************************
#debug9 show 'Before-Deptid'

  New-Page
END-PROCEDURE

!*********************************************************************
begin-procedure Check-For-Resets
!*********************************************************************
#debug9 show 'Check-For-Resets'

  let $sql-statement= 'determine-start'
  let $reset_flag   ='N'
  let $reset_dt     = ' '
  let $reset_action = ' '

begin-select 
j1.effdt	
j1.action

   let $reset_flag 	= 'Y'
   let $reset_dt   	= &j1.effdt
   let $reset_action    = &j1.action

   do find-reset-pay-end-dt
   
 FROM PS_JOB J1
  WHERE J1.EMPLID  = &J.EMPLID
    AND J1.COMPANY = &J.COMPANY
    AND J1.PAYGROUP= &J.PAYGROUP
    AND J1.DEPTID = &J.DEPTID
    AND J1.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB
        WHERE J1.EMPLID    = EMPLID
          AND J1.EMPL_RCD = EMPL_RCD
          AND ACTION       in ('PRO','DEM')
          AND DEPTID       = &J.DEPTID
          AND EFFDT <= $pay_end_dt)
    AND J1.EFFSEQ =
        (SELECT MAX(EFFSEQ) FROM PS_JOB
        WHERE J1.EMPLID    = EMPLID
          AND J1.EMPL_RCD = EMPL_RCD
          AND J1.EFFDT     = EFFDT)
end-select
  
end-procedure

!*********************************************************************
Begin-Procedure Get-Life-To-Date-Hrs
!*********************************************************************
#debug9 show 'Get-Life-To-Date-Hrs'

let #gex_life_hrs = 0

Begin-Select
GIB.GEX_LIFE_HRS

 let #gex_life_hrs = &GIB.GEX_LIFE_HRS

FROM PS_GEX_INDLIFE_BAL GIB

WHERE GIB.EMPLID      = &J.EMPLID
  AND GIB.COMPANY     = &J.COMPANY

End-Select
End-Procedure

!*********************************************************************
begin-procedure Get-Hrs-Thru-Curr
!*********************************************************************
#debug9 show 'Get-Hrs-Thru-Curr'

  let $sql-statement = 'get-hrs-thru-curr'
  let #ytd_spcl_hrs_curr = 0

begin-select distinct

C2.SPCL_HRS
C2.ERNCD_SPCL
B2.pay_end_dt

  add &C2.SPCL_HRS  to #ytd_spcl_hrs_curr
  #debug8 show &j.emplid ' ' $pay_end_dt ' ' &b2.pay_end_dt ' ' '&C2.SPCL_HRS ' &C2.SPCL_HRS '#ytd_spcl_hrs_curr ' #ytd_spcl_hrs_curr
   
FROM  PS_PAY_EARNINGS B2,
      PS_PAY_SPCL_EARNS C2
WHERE  B2.EMPLID     = &J.EMPLID
   and B2.EMPL_RCD  = &J.EMPL_RCD
   AND B2.COMPANY    = &j.company
   AND B2.PAYGROUP   = &j.paygroup
   AND B2.PAY_END_DT between $start_dt and $pay_end_dt
   AND B2.COMPANY    = C2.COMPANY
   AND B2.PAYGROUP   = C2.PAYGROUP
   AND B2.PAY_END_DT = C2.PAY_END_DT
   AND B2.OFF_CYCLE  = C2.OFF_CYCLE
   AND B2.PAGE_NUM      = C2.PAGE_NUM
   AND B2.LINE_NUM      = C2.LINE_NUM
   AND C2.ERNCD_SPCL = 'WK3'

end-select
  
end-procedure

!*********************************************************************
begin-procedure Get-Hrs-Thru-Prev
!*********************************************************************
#debug9 show 'Get-Hrs-Thru-Prev'

  let $sql-statement = 'get-hrs-thru-prev'
  let #ytd_spcl_hrs_prev = 0

begin-select distinct

C3.SPCL_HRS
C3.ERNCD_SPCL
B3.pay_end_dt
  
  add &C3.SPCL_HRS  to #ytd_spcl_hrs_prev
  
FROM  PS_PAY_EARNINGS B3,
      PS_PAY_SPCL_EARNS C3
WHERE  B3.EMPLID     = &J.EMPLID
   and B3.EMPL_RCD  = &J.EMPL_RCD
   AND B3.COMPANY    = &j.company
   AND B3.PAYGROUP   = &j.paygroup
   AND B3.PAY_END_DT between $start_dt and $prev_pay_end_dt
   AND B3.COMPANY    = C3.COMPANY
   AND B3.PAYGROUP   = C3.PAYGROUP
   AND B3.PAY_END_DT = C3.PAY_END_DT
   AND B3.OFF_CYCLE  = C3.OFF_CYCLE
   AND B3.PAGE_NUM      = C3.PAGE_NUM
   AND B3.LINE_NUM      = C3.LINE_NUM
   AND C3.ERNCD_SPCL = 'WK3'

end-select
  
end-procedure

!*********************************************************************
begin-procedure Get-1st-Qtr-Hrs-99
!*********************************************************************
#debug9 show 'Get-1st-Qtr-Hrs-99'

  let $sql-statement = 'Get-1st-Qtr-Hrs-99'

begin-select

EB.HRS_YTD &1st_qtr_99

from   PS_EARNINGS_BAL EB

where   EB.EMPLID    = &j.EMPLID
 AND    EB.COMPANY   = &j.company
!Add Empl_rcd as Key -- 8.3 Upgrade
 AND 	EB.EMPL_RCD  = &j.EMPL_RCD
 AND    EB.BALANCE_ID          = 'CY'
 AND    EB.BALANCE_YEAR        = 1999
 AND    EB.BALANCE_PERIOD      = 3
 AND    EB.BALANCE_QTR         = 1
 AND    EB.SPCL_BALANCE        = 'Y' 
 AND    EB.ERNCD               = 'WK3'

end-select
  
end-procedure

!*********************************************************************
Begin-Procedure Find-Reset-Pay-End-Dt
!*********************************************************************
#debug9 show 'Find-Reset-Pay-End-Dt'

move 'N' to $found

begin-select loops = 1 
P1.PAY_END_DT
 Do format-datetime (&P1.PAY_END_DT,$effdt_check,{DEFCMP},'','')    

  move 'Y' to $found
   
FROM PS_PAY_CALENDAR P1

WHERE P1.PAY_END_DT = (SELECT DISTINCT(MIN(PAY_END_DT))
   		      FROM PS_PAY_CALENDAR
		     WHERE PAY_END_DT > &J1.EFFDT
                       AND PAY_SHEETS_RUN = 'Y')
end-select

if $found = 'N'
   display 'No Pay Cycle as of:' noline
   display &J1.EFFDT
   stop
end-if

end-procedure

!AXL 03/01/2001 Begin New Procedure
!*********************************************************************
begin-procedure Get-Hrs-Since-Last-Incr
!*********************************************************************
#debug9 show 'Get-Hrs-Since-Last-Incr'

  let $sql-statement = 'Get-Hrs-Since-Last-Incr'
 
begin-select distinct

C4.SPCL_HRS
C4.ERNCD_SPCL
B4.pay_end_dt

  add &C4.SPCL_HRS  to #accum_hrs
  #debug8 show &j.emplid ' ' $pay_end_dt ' ' &b4.pay_end_dt ' ' '&C4.SPCL_HRS ' &C4.SPCL_HRS '#accum_hrs ' #accum_hrs
   
FROM  PS_PAY_EARNINGS B4,
      PS_PAY_SPCL_EARNS C4
WHERE  B4.EMPLID     = &J.EMPLID
   and B4.EMPL_RCD  = &J.EMPL_RCD
   AND B4.COMPANY    = &j.company
   AND B4.PAYGROUP   = &j.paygroup
   AND B4.PAY_END_DT between &e.last_increase_dt and $pay_end_dt
   AND B4.COMPANY    = C4.COMPANY
   AND B4.PAYGROUP   = C4.PAYGROUP
   AND B4.PAY_END_DT = C4.PAY_END_DT
   AND B4.OFF_CYCLE  = C4.OFF_CYCLE
   AND B4.PAGE_NUM      = C4.PAGE_NUM
   AND B4.LINE_NUM      = C4.LINE_NUM
   AND C4.ERNCD_SPCL = 'WK3'

end-select
  
end-procedure
!AXL 03/01/2001 - End

!*********************************************************************
begin-procedure Get-Hrs-Since-Hire
!*********************************************************************
#debug9 show 'Get-Hrs-Since-Hire'

  let $sql-statement = 'Get-Hrs-Since-Hire'
 
begin-select distinct

C5.SPCL_HRS
C5.ERNCD_SPCL
B5.pay_end_dt

  add &C5.SPCL_HRS  to #accum_hrs
  #debug8 show &j.emplid ' ' $pay_end_dt ' ' &b5.pay_end_dt ' ' '&C5.SPCL_HRS ' &C5.SPCL_HRS '#accum_hrs ' #accum_hrs
   
FROM  PS_PAY_EARNINGS B5,
      PS_PAY_SPCL_EARNS C5
WHERE  B5.EMPLID     = &J.EMPLID
   and B5.EMPL_RCD  = &J.EMPL_RCD
   AND B5.COMPANY    = &j.company
   AND B5.PAYGROUP   = &j.paygroup
   AND B5.PAY_END_DT between $start_dt and $pay_end_dt
   AND B5.COMPANY    = C5.COMPANY
   AND B5.PAYGROUP   = C5.PAYGROUP
   AND B5.PAY_END_DT = C5.PAY_END_DT
   AND B5.OFF_CYCLE  = C5.OFF_CYCLE
   AND B5.PAGE_NUM      = C5.PAGE_NUM
   AND B5.LINE_NUM      = C5.LINE_NUM
   AND C5.ERNCD_SPCL = 'WK3'

end-select
  
end-procedure

!***********************************************************************
begin-procedure Print-Detail
!***********************************************************************
#debug9 show 'Print-Detail'
  
  Print &pd.name	    	(+1,{#col_name})	
  Print &j.emplid		(,{#col_emplid})	!edit xxx-xx-xxxx !GEX_SEC_REENG 2015-06-24 Vahini Katta
  Print $JobTitleAbbrv		(,{#col_jobtitle})
  Print $prn_start_dt		(,{#col_hire_dt})
  Print $last_increase_dt 	(,{#col_incr_dt})   !AXL 03/01/2001
  Print $reset_action 		(,{#col_reset_act})
  Print $reset_dt		(,{#col_reset_dt})
  Print $work_Sts		(,{#col_wrk_sts})
  Print &j.hourly_rt	      	(,{#col_rate})		edit 99.99
  Print #ytd_hrs_curr    	(,{#col_hrs_curr})      edit 999999.99
  Print $rollover_flag      	(,{#col_flag})
  print #accum_hrs		(,{#col_accum_hrs})	edit 999999.99  !AXL 03/01/2001

End-Procedure

!***********************************************************************
Begin-Procedure EOJ
!***********************************************************************

  if #record_count = 0
    print 'No Data Selected This Run'   (25,) Center
  end-if
 
  Do Reset			

  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded

  Show 'Successful end of report'

End-Procedure

!***********************************************************************
begin-procedure Reset
!***********************************************************************
  move 'Y' to $End_of_Report
  if #MsgFlagW
     print $MsgTextW (+2,1)
  end-if
end-procedure

#include 'askaod.sqc'    !Ask-As-Of-Date procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API

#include 'getcodta.sqc'  !Get-Company-Data procedure
#include 'getdptnm.sqc'  !Get-Department-Name procedure
#include 'getjobtl.sqc'  !Get Job Title

#include 'gexxx900.sqc'  !Get company multiple row table
#include 'gexxx901.sqc'  !Get company/paygroup multiple row table
#include 'gexxx903.sqc'  !Get employee status multiple row table
#include 'gexxx902.sqc'  !Get deptid multiple row table
#include 'gexxx907.sqc'  !Get company/division code multiple row table
#include 'gexxx909.sqc'  !Get acct_cd code multiple row table
#include 'gexxx921.sqc'  !Get HR single row run control
#include 'gexxx950.sqc'  !Get SQRW run controls
#include 'gexrehdt.sqc'	 !GEX-MXT 03/24/2008 Fixed for REHIRE DT
#include 'getposnm.sqc'  !Get-Position-Title    VENDTKK ITG#56786   2-Feb-2009  


