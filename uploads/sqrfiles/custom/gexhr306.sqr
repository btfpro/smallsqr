
!***************************************************************************************
! GEXHR306: High Potential & Gold Standard Analysis on					*
!	    Movement, Promotion and Turnover Terminations			       * 
!	    outputs
!***************************************************************************************
!                                                                                      *
!               Confidentiality Information:                                           *
!                                                                                      *
! This module is the confidential and proprietary information of                       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted                 *
! in any form, by any means, in whole or in part, nor is it to be used                 *
! for any purpose other than that for which it is expressly provided                   *
! without the written permission of Giant Eagle.                                       *
!                                                                                      *
! Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved                         *
!                                                                                      *
!***************************************************************************************
!                                                                                      *        
! GEXHR306s :           HI POTENTIAL & GOLD STANDARD ANALYSIS                          *
!                                                                                      *        
! Narrative:            Need to run GEXHR301 - Promotion SQR and			*
!			GEXHR302 - Movement SQR before this.				*
!			GEXHR301 and GEXHR302 populates PS_GEX_EVP_PROMO and		*
!			PS_GEX_EVP_MVMNT tables respectively.				*
!			Which are used by this SQR.					* 
!                                                                                      *  
! SQL Tables:           PS_GEX_EVP_MVMNT, PS_GEX_EVP_PROMO			       *
!                       PS_JOB, PS_NAMES
!											*
! Written by:           Abhishek Potnuru                                               *       
!                                                                                      *
! Normally Run:									       *
!                                                                                      *
! Control Parms:									*
!											*
!***************************************************************************************
!                         MODIFICATION HISTORY                                          *
!****************************************************************************************
! CSR    INITIALS     DATE         DESCRIPTION OF THE CHANGE                            *
!****************************************************************************************
!                                                                                       *
!        VENDAPP      03/09/2008   New program                                          *
!											*
!        GEX-TLL      04/01/2008   HCM 9.0 Upgrade 					*						*
!        GEX-TLL      05/02/2008   modified the sqr to pull action descrs 		*
!				   from ps_action_tbl					*
!	GEX-TLL	      05/06/2008   HCM 9.0 Upgrade 					*
!        VENDAXG      05/08/2009   ITG#60303 Position Number Descr Changes              *
!****************************************************************************************


#include 'setenv.sqc'    !set environment
#include 'setup32.sqc'   !printer and page-size initialization
#include 'prcsapi.sqc'   
#include 'sqrtrans.sqc'  ! set translation
#include 'datemath.sqc'


!**************************************************************************************************************************
Begin-Report
!**************************************************************************************************************************

do Initialization

do Promotion-EVP
do Promotion-EVP-CVR
do Promotion-Manager-Level
do Hipot-Promotion-Population

do Movement-EVP
do Movement-EVP-CVR
do Hipot-Movement-Population

do Turnover-Terms-CVR
do Hipot-Turnover-Terms-Population

do Finalization
do Stdapi-Term             !stdapi.sqc

End-Report


!***********************************************************************************
Begin-Procedure Initialization
!***********************************************************************************

  Do Init-DateTime           !datetime.sqc
  Do Init-Number             !number.sqc
  Do Get-Current-DateTime    !curdttim.sqc
  Do Stdapi-Init             !stdapi.sqc

  Let $ReportID      =   'gexhr306'
  Let $ReportTitle   =   'High Potential & Gold Standard Analysis'
  
  Show '$ReportID    = ' $ReportID
  Show '$ReportTitle = ' $ReportTitle
  Show '$ReportDate  = ' $ReportDate
  Show '$ReportTime  = ' $ReportTime

  Do GEXXX922-Select-Parameters

  Let $AsOfDate = $GEX_RC_PAY.AsOfDate
  If Rtrim ($GEX_RC_PAY.AsOfDate, ' ') = ''
    Let $AsOfDate = $AsOfToday
  End-If

  show '$GEX_RC_PAY.FromDate: ' $GEX_RC_PAY.FromDate
  show '$GEX_RC_PAY.ThruDate: ' $GEX_RC_PAY.ThruDate
	
  move $GEX_RC_PAY.FromDate to $FromDate YYYYMMDD
  move $GEX_RC_PAY.ThruDate to $ThruDate YYYYMMDD
!GEX-TLL 05/06/2008 Begin  
  If Ltrim(Rtrim($GEX_RC_PAY.FromDate, ' '),' ') = '' or Ltrim(Rtrim($GEX_RC_PAY.ThruDate, ' '),' ') = ''
     Let $FromDate = dateadd(strtodate($AsOfDate),'YEAR',-1)
     Let $ThruDate = dateadd(strtodate($AsOfDate),'DAY',-1)
     move $FromDate to $FromDate YYYYMMDD
     move $ThruDate to $ThruDate YYYYMMDD
  End-If

  move $FromDate to $Rpt_From_Date MM-DD-YYYY
  move $ThruDate to $Rpt-Thru_Date MM-DD-YYYY
!GEX-TLL 05/06/2008 End	
  !move $GEX_RC_PAY.FromDate to $Rpt_From_Date MM-DD-YYYY
  !move $GEX_RC_PAY.ThruDate to $Rpt-Thru_Date MM-DD-YYYY

  show '$AsofDate- :' $AsOfDate
  show '$FromDate- :' $FromDate
  show '$ThruDate- :' $ThruDate 
!GEX-TLL 05/06/2008 Begin  
  show '$GEX_RC_PAY.FromDate: ' $GEX_RC_PAY.FromDate
  show '$GEX_RC_PAY.ThruDate: ' $GEX_RC_PAY.ThruDate
  show '$Rpt_From_Date: ' $Rpt_From_Date
  show '$Rpt-Thru_Date: ' $Rpt-Thru_Date
!GEX-TLL 05/06/2008 End	
  do Open-File
  
  encode '<009>' into $tab  
  encode '<012>' into $newline 

End-Procedure


!***********************************************************************************
Begin-Procedure Promotion-EVP
!***********************************************************************************

Show 'Promotion-EVP'

Let #grand_total = 0
Let #Karet_total = 0 
Let #lucot_total = 0
Let #Minnaugh_total = 0
Let #NA_total = 0

Let $write_row = 'Promotion By EVP From: ' || $Rpt_From_Date || ' To: ' || $Rpt-Thru_Date 
do Write-Promotion-EVP

move '' to $write_row 
do Write-Promotion-EVP

String ' ' ' ' 'DESTINATION' by $tab into $write_row 
do Write-Promotion-EVP

String 'S' 'OLD EVP' 'Karet, L'	'Lucot, J' 'Minnaugh, M' 'N/A' 'Grand Total' ''
        by $tab into $write_row
do Write-Promotion-EVP

move '178509093' to $evp
move 'Karet, L' to $evp_name
move 'O' to $prefix
do Promotion-EVP-row

move '181464707' to $evp
move 'Lucot, J' to $evp_name
move 'U' to $prefix
do Promotion-EVP-row

move '192505706' to $evp
move 'Minnaugh, M' to $evp_name
move 'R' to $prefix
do Promotion-EVP-row

move ' ' to $evp
move 'N/A' to $evp_name
move 'C' to $prefix
do Promotion-EVP-row

let #grand_total = #Karet_total + #lucot_total + #Minnaugh_total + #NA_total

move #grand_total to $grand_total 999,999
move #Karet_total to $Karet_total 999,999
move #lucot_total to $lucot_total 999,999
move #Minnaugh_total to $Minnaugh_total 999,99
move #NA_total to $NA_total 999,999

String 'E' 'Grand Total' $Karet_total $lucot_total $Minnaugh_total $NA_total $grand_total by $tab into $write_row
do Write-Promotion-EVP

if #grand_total <> 0
   let #percent_EVP_karet = round((#Karet_total/#grand_total)*100,0)
   move #percent_EVP_Karet to $percent_EVP_Karet 999
   let $percent_EVP_Karet = $percent_EVP_Karet||'%'
   
   let #percent_EVP_lucot = round((#lucot_total/#grand_total)*100,0)
   move #percent_EVP_lucot to $percent_EVP_lucot 999
   let $percent_EVP_lucot = $percent_EVP_lucot||'%'
   
   let #percent_EVP_Minnaugh = round((#Minnaugh_total/#grand_total)*100,0)
   move #percent_EVP_Minnaugh to $percent_EVP_Minnaugh 999
   let $percent_EVP_Minnaugh = $percent_EVP_Minnaugh||'%'
   
   let #percent_EVP_NA = round((#NA_total/#grand_total)*100,0)
   move #percent_EVP_NA to $percent_EVP_NA 999
   let $percent_EVP_NA = $percent_EVP_NA||'%'
end-if

String '' '' $percent_EVP_Karet $percent_EVP_lucot $percent_EVP_Minnaugh $percent_EVP_NA '100%' 
	by $tab into $write_row
do Write-Promotion-EVP

End-Procedure


!***********************************************************************************
Begin-Procedure Promotion-EVP-row
!***********************************************************************************

move 0 to #count_EVP_Karet
move 0 to #count_EVP_lucot
move 0 to #count_EVP_Minnaugh
move 0 to #count_EVP_NA
move 0 to #old_grand_total

Begin-Select
EVP_PROMO.GEX_NEW_EVP
COUNT(EVP_PROMO.Emplid) &count_EVP_Promo

   Evaluate &EVP_PROMO.GEX_NEW_EVP
   when = '178509093'
	move &count_EVP_Promo to #count_EVP_Karet
	let #old_grand_total = #old_grand_total + &count_EVP_Promo
	let #Karet_total = #Karet_total + &count_EVP_Promo
	Break
   when = '181464707'
	move &count_EVP_Promo to #count_EVP_lucot
	let #old_grand_total = #old_grand_total + &count_EVP_Promo
	let #lucot_total = #lucot_total + &count_EVP_Promo
	Break
   when = '192505706'
	move &count_EVP_Promo to #count_EVP_Minnaugh
	let #old_grand_total = #old_grand_total + &count_EVP_Promo
	let #Minnaugh_total = #Minnaugh_total + &count_EVP_Promo
	Break
   when = ' '
	move &count_EVP_Promo to #count_EVP_NA
	let #old_grand_total = #old_grand_total + &count_EVP_Promo
	let #NA_total = #NA_total + &count_EVP_Promo
	Break
   End-Evaluate
   !GEX-TLL 05/06/2008 Begin

!FROM (SELECT A.CRV_RATING,P.EMPLID,P.SERVICE_DT,P.GEX_OLD_EFFDT,P.GEX_PREV_DEPTID,
!	     P.GEX_OLD_JOBCODE,P.GEX_OLD_ACTION,P.GEX_OLD_ACTN_RSN,P.GEX_OLD_BUS_AREA,
!	     P.GEX_PREV_OLD_GRADE,P.GEX_OLD_FT_PT,P.GEX_OLD_EMPL_TYPE,P.GEX_OLD_OPR_DIV,
!	     P.GEX_PREV_NEW_GRADE,P.GEX_OLD_MGR_LVL,P.GEX_OLD_EVP,P.EFFDT,P.GEX_CURR_DEPTID,
!	     P.GEX_NEW_JOBCODE,P.GEX_NEW_ACTION,P.GEX_NEW_ACTN_RSN,P.GEX_NEW_BUS_AREA,
!	     P.GEX_CURR_OLD_GRADE,P.GEX_NEW_FT_PT,P.GEX_NEW_EMPL_TYPE,P.GEX_NEW_OPR_DIV,
!	     P.GEX_CURR_NEW_GRADE,P.GEX_NEW_MGR_LVL,P.GEX_NEW_EVP 
!     FROM PS_GEX_EVP_PROMO P,PS_GEX_APRAIS_SCOR A
!      WHERE P.GEX_CHANGE = 'PROMO' AND P.EMPLID=A.EMPLID(+) AND
!            A.SCORE_TYPE='CRV' AND
!            A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID) AND
!	    (P.GEX_PREV_OLD_GRADE <> P.GEX_CURR_OLD_GRADE or P.GEX_OLD_EMPL_TYPE <> P.GEX_NEW_EMPL_TYPE) AND
!	    (P.GEX_CURR_OLD_GRADE between '13' and '50' or 
!	     P.GEX_NEW_JOBCODE in ('10005','10006','10046') or
!	     P.GEX_OLD_JOBCODE = '40048') AND 
!	    P.GEX_CURR_DEPTID NOT IN ('C122')

FROM (SELECT AP.CRV_RATING,P.EMPLID,P.SERVICE_DT,P.GEX_OLD_EFFDT,P.GEX_PREV_DEPTID,P.GEX_OLD_JOBCODE,
	    P.GEX_OLD_ACTION,P.GEX_OLD_ACTN_RSN,P.GEX_OLD_BUS_AREA,P.GEX_PREV_OLD_GRADE,
	    P.GEX_OLD_FT_PT,P.GEX_OLD_EMPL_TYPE,P.GEX_OLD_OPR_DIV,P.GEX_PREV_NEW_GRADE,
	    P.GEX_OLD_MGR_LVL,P.GEX_OLD_EVP,P.EFFDT,P.GEX_CURR_DEPTID,P.GEX_NEW_JOBCODE,
	    P.GEX_NEW_ACTION,P.GEX_NEW_ACTN_RSN,P.GEX_NEW_BUS_AREA,P.GEX_CURR_OLD_GRADE,
            P.GEX_NEW_FT_PT,P.GEX_NEW_EMPL_TYPE,P.GEX_NEW_OPR_DIV,P.GEX_CURR_NEW_GRADE,
	    P.GEX_NEW_MGR_LVL,P.GEX_NEW_EVP 
      FROM (SELECT * FROM PS_GEX_EVP_PROMO P WHERE P.GEX_CHANGE = 'PROMO' AND 



           (P.GEX_PREV_OLD_GRADE <> P.GEX_CURR_OLD_GRADE or P.GEX_OLD_EMPL_TYPE <> P.GEX_NEW_EMPL_TYPE) and
           (P.GEX_CURR_OLD_GRADE between '13' and '50' or P.GEX_NEW_JOBCODE in ('10005','10006','10046') or P.GEX_OLD_JOBCODE = '40048') AND 


           P.GEX_CURR_DEPTID NOT IN ('C122')
           ) P,
     (SELECT * FROM PS_GEX_APRAIS_SCOR A 
      WHERE A.SCORE_TYPE='CRV' AND
      A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND a1.score_type='CRV')
     ) AP
     WHERE P.EMPLID=AP.EMPLID(+)
	    
     !GEX-TLL 05/06/2008 End
	    
	    
      UNION 
      SELECT A.CRV_RATING,P.EMPLID,P.SERVICE_DT,P.GEX_OLD_EFFDT,P.GEX_PREV_DEPTID,
	     P.GEX_OLD_JOBCODE,P.GEX_OLD_ACTION,P.GEX_OLD_ACTN_RSN,P.GEX_OLD_BUS_AREA,
	     P.GEX_PREV_OLD_GRADE,P.GEX_OLD_FT_PT,P.GEX_OLD_EMPL_TYPE,P.GEX_OLD_OPR_DIV,
	     P.GEX_PREV_NEW_GRADE,P.GEX_OLD_MGR_LVL,P.GEX_OLD_EVP,P.EFFDT,P.GEX_CURR_DEPTID,
	     P.GEX_NEW_JOBCODE,P.GEX_NEW_ACTION,P.GEX_NEW_ACTN_RSN,P.GEX_NEW_BUS_AREA,
	     P.GEX_CURR_OLD_GRADE,P.GEX_NEW_FT_PT,P.GEX_NEW_EMPL_TYPE,P.GEX_NEW_OPR_DIV,
	     P.GEX_CURR_NEW_GRADE,P.GEX_NEW_MGR_LVL,P.GEX_NEW_EVP
      FROM PS_GEX_EVP_PROMO P, PS_GEX_APRAIS_SCOR A
      WHERE P.GEX_CHANGE = 'PROMO' AND A.EMPLID=P.EMPLID AND
            A.SCORE_TYPE='CRV' AND
            A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND A1.SCORE_TYPE = 'CRV') AND !GEX-TLL 05/06/2008 Added Sore_type Criteria
            (P.GEX_PREV_OLD_GRADE <> P.GEX_CURR_OLD_GRADE or P.GEX_OLD_EMPL_TYPE <> P.GEX_NEW_EMPL_TYPE)
      ) EVP_PROMO
WHERE EVP_PROMO.GEX_OLD_EVP = $evp 
GROUP BY EVP_PROMO.GEX_NEW_EVP
End-Select

move #count_EVP_Karet to $count_EVP_Karet B999,999
move #count_EVP_lucot to $count_EVP_lucot B999,999
move #count_EVP_Minnaugh to $count_EVP_Minnaugh B999,999
move #count_EVP_NA to $count_EVP_NA B999,999
move #old_grand_total to $old_grand_total

String $prefix $evp_name $count_EVP_Karet $count_EVP_lucot $count_EVP_Minnaugh $count_EVP_NA $old_grand_total '' 
	by $tab into $write_row
do Write-Promotion-EVP

End-Procedure


!***********************************************************************************
Begin-Procedure Promotion-EVP-CVR
!***********************************************************************************

Show 'Promotion-EVP-CVR'

Let $write_row = 'Promotion By EVP & Change Response Ratings From: ' || $Rpt_From_Date || ' To: ' || $Rpt-Thru_Date 
do Write-Promotion-EVP-CVR

move '' to $write_row 
do Write-Promotion-EVP-CVR

move 0 to #C_total
move 0 to #E_total
move 0 to #IP_total
move 0 to #WP_total
move 0 to #MV_total
move 0 to #MP_total
move 0 to #TN_total
move 0 to #NA_total

String 'EVP Name' 'C' 'E' 'IP' 'WP' 'MV' 'MP' 'TN' 'N/A' 'Grand Total'
        by $tab into $write_row
do Write-Promotion-EVP-CVR

move '178509093' to $evp
move 'Karet, L' to $evp_name
do Promotion-EVP-CVR-Row

move '181464707' to $evp
move 'Lucot, J' to $evp_name
do Promotion-EVP-CVR-Row

move '192505706' to $evp
move 'Minnaugh, M' to $evp_name
do Promotion-EVP-CVR-Row

move ' ' to $evp
move 'N/A' to $evp_name
do Promotion-EVP-CVR-Row

let #grand_total = #C_total + #E_total + #IP_total + #WP_total + #MV_total + #MP_total + #TN_total + #NA_total

move #C_total to $C_total 999,999
move #E_total to $E_total 999,999
move #IP_total to $IP_total 999,999
move #WP_total to $WP_total 999,999
move #MV_total to $MV_total 999,999
move #MP_total to $MP_total 999,999
move #TN_total to $TN_total 999,999
move #NA_total to $NA_total 999,999
move #grand_total to $grand_total 999,999

String 'Grand Total' $C_total $E_total $IP_total $WP_total $MV_total $MP_total
	$TN_total $NA_total $grand_total by $tab into $write_row
do Write-Promotion-EVP-CVR

End-Procedure


!***********************************************************************************
Begin-Procedure Promotion-EVP-CVR-Row
!***********************************************************************************

move 0 to #count_CVR_C
move 0 to #count_CVR_E
move 0 to #count_CVR_IP
move 0 to #count_CVR_WP
move 0 to #count_CVR_MV
move 0 to #count_CVR_MP
move 0 to #count_CVR_TN
move 0 to #count_CVR_NA
move 0 to #evp_total

Begin-Select
Promo_CVR.CRV_RATING
COUNT(Promo_CVR.Emplid) &count_CVR_promo

   Evaluate &Promo_CVR.CRV_RATING
   when = 'C'
	move &count_CVR_promo to #count_CVR_C
	let #evp_total = #evp_total + &count_CVR_promo
	let #C_total = #C_total + &count_CVR_promo
	Break
   when = 'E'
	move &count_CVR_promo to #count_CVR_E
	let #evp_total = #evp_total + &count_CVR_promo
	let #E_total = #E_total + &count_CVR_promo
	Break
   when = 'IP'
	move &count_CVR_promo to #count_CVR_IP
	let #evp_total = #evp_total + &count_CVR_promo
	let #IP_total = #IP_total + &count_CVR_promo
	Break
   when = 'WP'
	move &count_CVR_promo to #count_CVR_WP
	let #evp_total = #evp_total + &count_CVR_promo
	let #WP_total = #WP_total + &count_CVR_promo
	Break
   when = 'MV'
	move &count_CVR_promo to #count_CVR_MV
	let #evp_total = #evp_total + &count_CVR_promo
	let #MV_total = #MV_total + &count_CVR_promo
	Break
   when = 'MP'
	move &count_CVR_promo to #count_CVR_MP
	let #evp_total = #evp_total + &count_CVR_promo
	let #MP_total = #MP_total + &count_CVR_promo
	Break
   when = 'TN'
	move &count_CVR_promo to #count_CVR_TN
	let #evp_total = #evp_total + &count_CVR_promo
	let #TN_total = #TN_total + &count_CVR_promo
	Break
   when-other
	move &count_CVR_promo to #count_CVR_NA
	let #evp_total = #evp_total + &count_CVR_promo
	let #NA_total = #NA_total + &count_CVR_promo
	Break
   End-Evaluate
   !GEX-TLL 05/06/2008 Begin

!FROM (SELECT A.CRV_RATING,P.EMPLID,P.SERVICE_DT,P.GEX_OLD_EFFDT,P.GEX_PREV_DEPTID,P.GEX_OLD_JOBCODE,
!	     P.GEX_OLD_ACTION,P.GEX_OLD_ACTN_RSN,P.GEX_OLD_BUS_AREA,P.GEX_PREV_OLD_GRADE,
!	     P.GEX_OLD_FT_PT,P.GEX_OLD_EMPL_TYPE,P.GEX_OLD_OPR_DIV,P.GEX_PREV_NEW_GRADE,
!	     P.GEX_OLD_MGR_LVL,P.GEX_OLD_EVP,P.EFFDT,P.GEX_CURR_DEPTID,P.GEX_NEW_JOBCODE,
!	     P.GEX_NEW_ACTION,P.GEX_NEW_ACTN_RSN,P.GEX_NEW_BUS_AREA,P.GEX_CURR_OLD_GRADE,
!	     P.GEX_NEW_FT_PT,P.GEX_NEW_EMPL_TYPE,P.GEX_NEW_OPR_DIV,P.GEX_CURR_NEW_GRADE,
!	     P.GEX_NEW_MGR_LVL,P.GEX_NEW_EVP 
!     FROM PS_GEX_EVP_PROMO P,PS_GEX_APRAIS_SCOR A
!      WHERE P.GEX_CHANGE = 'PROMO' AND P.EMPLID=A.EMPLID(+) AND
!           A.SCORE_TYPE='CRV' AND
!            A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID) AND
!	    (P.GEX_PREV_OLD_GRADE <> P.GEX_CURR_OLD_GRADE or P.GEX_OLD_EMPL_TYPE <> P.GEX_NEW_EMPL_TYPE) and
!	    (P.GEX_CURR_OLD_GRADE between '13' and '50' or 
!	     P.GEX_NEW_JOBCODE in ('10005','10006','10046') or
!	     P.GEX_OLD_JOBCODE = '40048') AND 
!	    P.GEX_CURR_DEPTID NOT IN ('C122')

    !GEX-TLL 05/06/2008 End	
FROM (SELECT AP.CRV_RATING,P.EMPLID,P.SERVICE_DT,P.GEX_OLD_EFFDT,P.GEX_PREV_DEPTID,P.GEX_OLD_JOBCODE,
	    P.GEX_OLD_ACTION,P.GEX_OLD_ACTN_RSN,P.GEX_OLD_BUS_AREA,P.GEX_PREV_OLD_GRADE,
	    P.GEX_OLD_FT_PT,P.GEX_OLD_EMPL_TYPE,P.GEX_OLD_OPR_DIV,P.GEX_PREV_NEW_GRADE,
	    P.GEX_OLD_MGR_LVL,P.GEX_OLD_EVP,P.EFFDT,P.GEX_CURR_DEPTID,P.GEX_NEW_JOBCODE,
	    P.GEX_NEW_ACTION,P.GEX_NEW_ACTN_RSN,P.GEX_NEW_BUS_AREA,P.GEX_CURR_OLD_GRADE,
            P.GEX_NEW_FT_PT,P.GEX_NEW_EMPL_TYPE,P.GEX_NEW_OPR_DIV,P.GEX_CURR_NEW_GRADE,
	    P.GEX_NEW_MGR_LVL,P.GEX_NEW_EVP 
      FROM (SELECT * FROM PS_GEX_EVP_PROMO P WHERE P.GEX_CHANGE = 'PROMO' AND 



           (P.GEX_PREV_OLD_GRADE <> P.GEX_CURR_OLD_GRADE or P.GEX_OLD_EMPL_TYPE <> P.GEX_NEW_EMPL_TYPE) and
           (P.GEX_CURR_OLD_GRADE between '13' and '50' or P.GEX_NEW_JOBCODE in ('10005','10006','10046') or P.GEX_OLD_JOBCODE = '40048') AND 


           P.GEX_CURR_DEPTID NOT IN ('C122')
           ) P,
     (SELECT * FROM PS_GEX_APRAIS_SCOR A 
      WHERE A.SCORE_TYPE='CRV' AND
      A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND a1.score_type='CRV')
     ) AP
     WHERE P.EMPLID=AP.EMPLID(+)        
      UNION 
      SELECT A.CRV_RATING,P.EMPLID,P.SERVICE_DT,P.GEX_OLD_EFFDT,P.GEX_PREV_DEPTID,
      	P.GEX_OLD_JOBCODE,P.GEX_OLD_ACTION,P.GEX_OLD_ACTN_RSN,P.GEX_OLD_BUS_AREA,
      	P.GEX_PREV_OLD_GRADE,P.GEX_OLD_FT_PT,P.GEX_OLD_EMPL_TYPE,P.GEX_OLD_OPR_DIV,
      	P.GEX_PREV_NEW_GRADE,P.GEX_OLD_MGR_LVL,P.GEX_OLD_EVP,P.EFFDT,P.GEX_CURR_DEPTID,
      	P.GEX_NEW_JOBCODE,P.GEX_NEW_ACTION,P.GEX_NEW_ACTN_RSN,P.GEX_NEW_BUS_AREA,
      	P.GEX_CURR_OLD_GRADE,P.GEX_NEW_FT_PT,P.GEX_NEW_EMPL_TYPE,P.GEX_NEW_OPR_DIV,
      	P.GEX_CURR_NEW_GRADE,P.GEX_NEW_MGR_LVL,P.GEX_NEW_EVP
      FROM PS_GEX_EVP_PROMO P, PS_GEX_APRAIS_SCOR A
      WHERE P.GEX_CHANGE = 'PROMO' AND A.EMPLID=P.EMPLID AND
            A.SCORE_TYPE='CRV' AND
            A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND A1.SCORE_TYPE = 'CRV') AND  !GEX-TLL 05/06/2008 Added SCORE_TYPE Criteria
      (P.GEX_PREV_OLD_GRADE <> P.GEX_CURR_OLD_GRADE or P.GEX_OLD_EMPL_TYPE <> P.GEX_NEW_EMPL_TYPE)
      ) PROMO_CVR
WHERE Promo_CVR.GEX_NEW_EVP = $evp
GROUP BY Promo_CVR.CRV_RATING

End-Select

move #count_CVR_C to $count_CVR_C B999,999
move #count_CVR_E to $count_CVR_E B999,999
move #count_CVR_IP to $count_CVR_IP B999,999
move #count_CVR_WP to $count_CVR_WP B999,999
move #count_CVR_MV to $count_CVR_MV B999,999
move #count_CVR_MP to $count_CVR_MP B999,999
move #count_CVR_TN to $count_CVR_TN B999,999
move #count_CVR_NA to $count_CVR_NA B999,999
move #evp_total to $evp_total B999,999

String $evp_name $count_CVR_C $count_CVR_E $count_CVR_IP $count_CVR_WP $count_CVR_MV $count_CVR_MP
	$count_CVR_TN $count_CVR_NA $evp_total by $tab into $write_row
do Write-Promotion-EVP-CVR

End-Procedure


!***********************************************************************************
Begin-Procedure Promotion-Manager-Level
!***********************************************************************************

Show 'Promotion-Manager-Level'

Let $write_row = 'Promotion by Manager Level From: ' || $Rpt_From_Date || ' To: ' || $Rpt-Thru_Date 
do Write-Promotion-Manager-Level

move '' to $write_row 
do Write-Promotion-Manager-Level

move 0 to #NA_total
let $destination = rpad(lpad('DESTINATION',70,' '),145,' ')
String ' ' 'Count of Name' '' $destination by $tab into $write_row 
do Write-Promotion-Manager-Level

String '' 'MGR LVL' 'Dir - Dept' 'DirBusins' 'Mid Lvl Mg' 'Non-Mgr' 'Sr. Mgr.' 'SrVicePres' 'Store Dir' 
       'Store Mgmt' 'Store Mgr' 'Supervisor' 'N/A' 'Grand Total' by $tab into $write_row 
do Write-Promotion-Manager-Level

move 'Dir - Dept' to $manager_level
move '' to $prefix
do Promotion-Manager-Level-row

move 'DirBusins' to $manager_level
move 'S' to $prefix
do Promotion-Manager-Level-row

move 'Mid Lvl Mg' to $manager_level
move 'O' to $prefix
do Promotion-Manager-Level-row

move 'Non-Mgr' to $manager_level
move 'U' to $prefix
do Promotion-Manager-Level-row

move 'Sr. Mgr.' to $manager_level
move 'R' to $prefix
do Promotion-Manager-Level-row

move 'SrVicePres' to $manager_level
move 'C' to $prefix
do Promotion-Manager-Level-row

move 'Store Dir' to $manager_level
move 'E' to $prefix
do Promotion-Manager-Level-row

move 'Store Mgmt' to $manager_level
move '' to $prefix
do Promotion-Manager-Level-row

move 'Store Mgr' to $manager_level
move '' to $prefix
do Promotion-Manager-Level-row

move 'Supervisor' to $manager_level
move '' to $prefix
do Promotion-Manager-Level-row

move ' ' to $manager_level
move '' to $prefix
do Promotion-Manager-Level-row

let #grand_total = #DirDept_total + #DirBusins_total + #MidLvlMg_total + #NonMgr_total + #SrMgr_total
	+ #SrVicePres_total + #StoreDir_total + #StoreMgmt_total + #StoreMgr_total + #Supervisor_total 
	+ #NA_total
String '' 'Grand Total' #DirDept_total #DirBusins_total #MidLvlMg_total #NonMgr_total #SrMgr_total
	#SrVicePres_total #StoreDir_total #StoreMgmt_total #StoreMgr_total #Supervisor_total #NA_total 
	#grand_total by $tab into $write_row
do Write-Promotion-Manager-Level

End-Procedure


!***********************************************************************************
Begin-Procedure Promotion-Manager-Level-row
!***********************************************************************************

move 0 to #count_DirDept
move 0 to #count_DirBusins
move 0 to #count_MidLvlMg
move 0 to #count_NonMgr
move 0 to #count_SrMgr
move 0 to #count_SrVicePres
move 0 to #count_StoreDir
move 0 to #count_StoreMgmt
move 0 to #count_StoreMgr
move 0 to #count_Supervisor
move 0 to #count_NA
move 0 to #old_grand_total

Begin-Select
PROMO_MGR_LVL.GEX_NEW_MGR_LVL
COUNT(PROMO_MGR_LVL.Emplid) &count_mgr_lvl

   Evaluate &PROMO_MGR_LVL.GEX_NEW_MGR_LVL
   when = 'Dir - Dept'
	move &count_mgr_lvl to #count_DirDept
	let #old_grand_total = #old_grand_total + &count_mgr_lvl
	let #DirDept_total = #DirDept_total + &count_mgr_lvl
	Break
   when = 'DirBusins'
	move &count_mgr_lvl to #count_DirBusins
	let #old_grand_total = #old_grand_total + &count_mgr_lvl
	let #DirBusins_total = #DirBusins_total + &count_mgr_lvl
	Break
   when = 'Mid Lvl Mg'
	move &count_mgr_lvl to #count_MidLvlMg
	let #old_grand_total = #old_grand_total + &count_mgr_lvl
	let #MidLvlMg_total = #MidLvlMg_total + &count_mgr_lvl
	Break
   when = 'Non-Mgr'
	move &count_mgr_lvl to #count_NonMgr
	let #old_grand_total = #old_grand_total + &count_mgr_lvl
	let #NonMgr_total = #NonMgr_total + &count_mgr_lvl
	Break
   when = 'Sr. Mgr.'
	move &count_mgr_lvl to #count_SrMgr
	let #old_grand_total = #old_grand_total + &count_mgr_lvl
	let #SrMgr_total = #SrMgr_total + &count_mgr_lvl
	Break
   when = 'SrVicePres'
	move &count_mgr_lvl to #count_SrVicePres
	let #old_grand_total = #old_grand_total + &count_mgr_lvl
	let #SrVicePres_total = #SrVicePres_total + &count_mgr_lvl
	Break
   when = 'Store Dir'
	move &count_mgr_lvl to #count_StoreDir
	let #old_grand_total = #old_grand_total + &count_mgr_lvl
	let #StoreDir_total = #StoreDir_total + &count_mgr_lvl
	Break
   when = 'Store Mgmt'
	move &count_mgr_lvl to #count_StoreMgmt
	let #old_grand_total = #old_grand_total + &count_mgr_lvl
	let #StoreMgmt_total = #StoreMgmt_total + &count_mgr_lvl
	Break
   when = 'Store Mgr'
	move &count_mgr_lvl to #count_StoreMgr
	let #old_grand_total = #old_grand_total + &count_mgr_lvl
	let #StoreMgr_total = #StoreMgr_total + &count_mgr_lvl
	Break
   when = 'Supervisor'
	move &count_mgr_lvl to #count_Supervisor
	let #old_grand_total = #old_grand_total + &count_mgr_lvl
	let #Supervisor_total = #Supervisor_total + &count_mgr_lvl
	Break
   when-other
	move &count_mgr_lvl to #count_NA
	let #old_grand_total = #old_grand_total + &count_mgr_lvl
	let #NA_total = #NA_total + &count_mgr_lvl
	Break
   End-Evaluate
!GEX-TLL 05/06/2008 Begin
!FROM (SELECT A.CRV_RATING,P.EMPLID,P.SERVICE_DT,P.GEX_OLD_EFFDT,P.GEX_PREV_DEPTID,P.GEX_OLD_JOBCODE,
!	     P.GEX_OLD_ACTION,P.GEX_OLD_ACTN_RSN,P.GEX_OLD_BUS_AREA,P.GEX_PREV_OLD_GRADE,
!	     P.GEX_OLD_FT_PT,P.GEX_OLD_EMPL_TYPE,P.GEX_OLD_OPR_DIV,P.GEX_PREV_NEW_GRADE,
!	     P.GEX_OLD_MGR_LVL,P.GEX_OLD_EVP,P.EFFDT,P.GEX_CURR_DEPTID,P.GEX_NEW_JOBCODE,
!	     P.GEX_NEW_ACTION,P.GEX_NEW_ACTN_RSN,P.GEX_NEW_BUS_AREA,P.GEX_CURR_OLD_GRADE,
!	     P.GEX_NEW_FT_PT,P.GEX_NEW_EMPL_TYPE,P.GEX_NEW_OPR_DIV,P.GEX_CURR_NEW_GRADE,
!	     P.GEX_NEW_MGR_LVL,P.GEX_NEW_EVP 
!     FROM PS_GEX_EVP_PROMO P,PS_GEX_APRAIS_SCOR A
!     WHERE P.GEX_CHANGE = 'PROMO' AND P.EMPLID=A.EMPLID(+) AND
!           A.SCORE_TYPE='CRV' AND
!            A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID) AND
!	    (P.GEX_PREV_OLD_GRADE <> P.GEX_CURR_OLD_GRADE or P.GEX_OLD_EMPL_TYPE <> P.GEX_NEW_EMPL_TYPE) and
!	    (P.GEX_CURR_OLD_GRADE between '13' and '50' or 
!	     P.GEX_NEW_JOBCODE in ('10005','10006','10046') or
!	     P.GEX_OLD_JOBCODE = '40048') AND 
!	    P.GEX_CURR_DEPTID NOT IN ('C122')
FROM (SELECT AP.CRV_RATING,P.EMPLID,P.SERVICE_DT,P.GEX_OLD_EFFDT,P.GEX_PREV_DEPTID,P.GEX_OLD_JOBCODE,
	    P.GEX_OLD_ACTION,P.GEX_OLD_ACTN_RSN,P.GEX_OLD_BUS_AREA,P.GEX_PREV_OLD_GRADE,
	    P.GEX_OLD_FT_PT,P.GEX_OLD_EMPL_TYPE,P.GEX_OLD_OPR_DIV,P.GEX_PREV_NEW_GRADE,
	    P.GEX_OLD_MGR_LVL,P.GEX_OLD_EVP,P.EFFDT,P.GEX_CURR_DEPTID,P.GEX_NEW_JOBCODE,
	    P.GEX_NEW_ACTION,P.GEX_NEW_ACTN_RSN,P.GEX_NEW_BUS_AREA,P.GEX_CURR_OLD_GRADE,
            P.GEX_NEW_FT_PT,P.GEX_NEW_EMPL_TYPE,P.GEX_NEW_OPR_DIV,P.GEX_CURR_NEW_GRADE,
	    P.GEX_NEW_MGR_LVL,P.GEX_NEW_EVP 
      FROM (SELECT * FROM PS_GEX_EVP_PROMO P WHERE P.GEX_CHANGE = 'PROMO' AND 



           (P.GEX_PREV_OLD_GRADE <> P.GEX_CURR_OLD_GRADE or P.GEX_OLD_EMPL_TYPE <> P.GEX_NEW_EMPL_TYPE) and
           (P.GEX_CURR_OLD_GRADE between '13' and '50' or P.GEX_NEW_JOBCODE in ('10005','10006','10046') or P.GEX_OLD_JOBCODE = '40048') AND 


           P.GEX_CURR_DEPTID NOT IN ('C122')
           ) P,
     (SELECT * FROM PS_GEX_APRAIS_SCOR A 
      WHERE A.SCORE_TYPE='CRV' AND
      A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND a1.score_type='CRV')
     ) AP
     WHERE P.EMPLID=AP.EMPLID(+)

!GEX-TLL 05/06/2008 End	    
      UNION 
      SELECT A.CRV_RATING,P.EMPLID,P.SERVICE_DT,P.GEX_OLD_EFFDT,P.GEX_PREV_DEPTID,
      	P.GEX_OLD_JOBCODE,P.GEX_OLD_ACTION,P.GEX_OLD_ACTN_RSN,P.GEX_OLD_BUS_AREA,
      	P.GEX_PREV_OLD_GRADE,P.GEX_OLD_FT_PT,P.GEX_OLD_EMPL_TYPE,P.GEX_OLD_OPR_DIV,
      	P.GEX_PREV_NEW_GRADE,P.GEX_OLD_MGR_LVL,P.GEX_OLD_EVP,P.EFFDT,P.GEX_CURR_DEPTID,
      	P.GEX_NEW_JOBCODE,P.GEX_NEW_ACTION,P.GEX_NEW_ACTN_RSN,P.GEX_NEW_BUS_AREA,
      	P.GEX_CURR_OLD_GRADE,P.GEX_NEW_FT_PT,P.GEX_NEW_EMPL_TYPE,P.GEX_NEW_OPR_DIV,
      	P.GEX_CURR_NEW_GRADE,P.GEX_NEW_MGR_LVL,P.GEX_NEW_EVP
      FROM PS_GEX_EVP_PROMO P, PS_GEX_APRAIS_SCOR A
      WHERE P.GEX_CHANGE = 'PROMO' AND A.EMPLID=P.EMPLID AND
            A.SCORE_TYPE='CRV' AND
            A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND A1.SCORE_TYPE = 'CRV') AND !GEX-TLL 05/06/2008 Added SCORE_TYPE Criteria
	    (P.GEX_PREV_OLD_GRADE <> P.GEX_CURR_OLD_GRADE or P.GEX_OLD_EMPL_TYPE <> P.GEX_NEW_EMPL_TYPE)
      ) PROMO_MGR_LVL
WHERE PROMO_MGR_LVL.GEX_OLD_MGR_LVL = $manager_level 
GROUP BY PROMO_MGR_LVL.GEX_NEW_MGR_LVL
End-Select

move #count_DirDept to $count_DirDept 999,999b
move #count_DirBusins to $count_DirBusins 999,999b
move #count_MidLvlMg to $count_MidLvlMg 999,999b
move #count_NonMgr to $count_NonMgr 999,999b
move #count_SrMgr to $count_SrMgr 999,999b
move #count_SrVicePres to $count_SrVicePres 999,999b
move #count_StoreDir to $count_StoreDir 999,999b
move #count_StoreMgmt to $count_StoreMgmt 999,999b
move #count_StoreMgr to $count_StoreMgr  999,999b
move #count_Supervisor to $count_Supervisor 999,999b
move #count_NA to $count_NA 999,999b

if $manager_level = ' '
   Let $manager_level = 'N/A'
end-if

String $prefix $manager_level $count_DirDept $count_DirBusins $count_MidLvlMg $count_NonMgr 
	$count_SrMgr $count_SrVicePres $count_StoreDir $count_StoreMgmt $count_StoreMgr 
	$count_Supervisor $count_NA #old_grand_total '' by $tab into $write_row
do Write-Promotion-Manager-Level

End-Procedure


!***********************************************************************************
Begin-Procedure Hipot-Promotion-Population
!***********************************************************************************

Show 'Hipot-Promotion-Population'

Let $Report_title = 'Hi Potential & Gold Standards Promotion Population From: ' || $Rpt_From_Date || ' To: ' ||
$Rpt-Thru_Date 
String '' '' '' $Report_Title by $tab into $write_row 
do Write-Hipot-Promotion-Population

move '' to $write_row
do Write-Hipot-Promotion-Population

String 'NAME' 'EFFDT' 'DEPT' 'DESCR' 'BUS AREA' 'OPR DIV' 'JOBCODE' 'DESCR' 'SERVICE DT' 
	'ACTION' 'DESCR' 'REASON' 'DESCR' 'OLD SG' 'FT/PT' 'TYPE' 'NEW SG' 'MGR LEVEL' 'EVP'  '|' 
	'NAME' 'EFFDT' 'DEPT' 'DESCR' 'BUS AREA' 'OPR DIV' 'JOBCODE' 'DESCR' 'SERVICE DT'
	'ACTION' 'DESCR' 'REASON' 'DESCR' 'OLD SG' 'FT/PT' 'TYPE'  'NEW SG' 'MGR LEVEL' 'EVP' 
	by $tab into $write_row
do Write-Hipot-Promotion-Population

Begin-Select
PROMO.EMPLID &emplid_HPP
PROMO.SERVICE_DT
PROMO.GEX_OLD_EFFDT
PROMO.GEX_PREV_DEPTID
PROMO.GEX_OLD_JOBCODE
PROMO.GEX_OLD_ACTION
PROMO.GEX_OLD_ACTN_RSN
PROMO.GEX_OLD_BUS_AREA
PROMO.GEX_PREV_OLD_GRADE
PROMO.GEX_OLD_FT_PT
PROMO.GEX_OLD_EMPL_TYPE
PROMO.GEX_OLD_OPR_DIV
PROMO.GEX_PREV_NEW_GRADE
PROMO.GEX_OLD_MGR_LVL
PROMO.GEX_OLD_EVP
PROMO.EFFDT
PROMO.GEX_CURR_DEPTID
PROMO.GEX_NEW_JOBCODE
PROMO.GEX_NEW_ACTION
PROMO.GEX_NEW_ACTN_RSN
PROMO.GEX_NEW_BUS_AREA
PROMO.GEX_CURR_OLD_GRADE
PROMO.GEX_NEW_FT_PT
PROMO.GEX_NEW_EMPL_TYPE
PROMO.GEX_NEW_OPR_DIV
PROMO.GEX_CURR_NEW_GRADE
PROMO.GEX_NEW_MGR_LVL
PROMO.GEX_NEW_EVP

	let $emplid_pop = &emplid_HPP
	Do Hipot-GetCompleteName 

	let $old_deptid = '="' || edit(&PROMO.GEX_PREV_DEPTID,'0000') || '"'
	let $lkup_DEPTID = &PROMO.GEX_PREV_DEPTID
	Do get-deptid-descr
	let $Old_Dept_descr  = &DT1.DESCR

	let $old_jobcode = '="' || edit(&PROMO.GEX_OLD_JOBCODE,'00000') || '"'
	let $lkup_jobcode     = &PROMO.GEX_OLD_JOBCODE
	!Vendaxg Added for ITG#60303 on 05/08/2009 - Begin
	Let $Effdt = &PROMO.GEX_OLD_EFFDT
	Let $Action = &PROMO.GEX_OLD_ACTION
	Let $Action_Reason = &PROMO.GEX_OLD_ACTN_RSN
	Do Get-Position-Number	!Vendaxg Added for ITG#60303 on 05/08/2009 
	Let $PosName = ''   
     	Do Get-Position-Title
     	If $PosName = ''
		do get-jobcode-descr
		let $old_job_descr   = &JT1.DESCR
	Else 
		let $old_job_descr   = $PosName
	End-if
	!Vendaxg Added for ITG#60303 on 05/08/2009 - End
	let $action = &PROMO.GEX_OLD_ACTION
	do get-action-descr
	!let $old_action_descr = &xlat.xlatlongname  !GEX-TLL 05/02/2008
	let $old_action_descr = &xlat.action_descr   !GEX-TLL 05/02/2008

	let $actn_reason = &PROMO.GEX_OLD_ACTN_RSN
	do get-actn-reason-descr 
	let $old_actn_rsn_descr = &ar.descr

	let $GEX_EVP = &PROMO.GEX_OLD_EVP
	Do Get-EVP-Name
	let $old_gex_evp_name = $EVP_NAME


	let $new_deptid = '="' || edit(&PROMO.GEX_CURR_DEPTID,'0000') || '"'
	let $lkup_DEPTID = &PROMO.GEX_CURR_DEPTID
	Do get-deptid-descr
	let $New_Dept_descr  = &DT1.DESCR

	let $new_jobcode = '="' || edit(&PROMO.GEX_NEW_JOBCODE,'00000') || '"'
	let $lkup_jobcode     = &PROMO.GEX_NEW_JOBCODE
	!Vendaxg Added for ITG#60303 on 05/08/2009 - Begin
	Let $Effdt = &PROMO.EFFDT
	Let $Action = &PROMO.GEX_NEW_ACTION
	Let $Action_Reason = &PROMO.GEX_NEW_ACTN_RSN
	Do Get-Position-Number	!Vendaxg Added for ITG#60303 on 05/08/2009 
	Let $PosName = ''   
     	Do Get-Position-Title
     	If $PosName = ''
		do get-jobcode-descr
		let $New_job_descr   = &JT1.DESCR
	Else 
		let $New_job_descr   = $PosName
	End-if
	!Vendaxg Added for ITG#60303 on 05/08/2009 - End
	
	

	let $action = &PROMO.GEX_New_ACTION
	do get-action-descr
	!let $New_action_descr = &xlat.xlatlongname  !GEX-TLL 05/02/2008
	let $New_action_descr = &xlat.action_descr   !GEX-TLL 05/02/2008

	let $actn_reason = &PROMO.GEX_New_ACTN_RSN
	do get-actn-reason-descr 
	let $New_actn_rsn_descr = &ar.descr

	let $GEX_EVP = &PROMO.GEX_NEW_EVP
	Do Get-EVP-Name
	let $new_gex_evp_name = $EVP_NAME

	String $Name &PROMO.GEX_OLD_EFFDT $old_deptid $Old_Dept_descr 
		&PROMO.GEX_OLD_BUS_AREA &PROMO.GEX_OLD_OPR_DIV $old_jobcode $old_job_descr 
		&PROMO.SERVICE_DT &PROMO.GEX_OLD_ACTION $old_action_descr &PROMO.GEX_OLD_ACTN_RSN 
		$old_actn_rsn_descr &PROMO.GEX_PREV_OLD_GRADE &PROMO.GEX_OLD_FT_PT 
		&PROMO.GEX_OLD_EMPL_TYPE  &PROMO.GEX_PREV_NEW_GRADE &PROMO.GEX_OLD_MGR_LVL 
		$old_gex_evp_name  '|' 
		$Name &PROMO.EFFDT $new_deptid $New_Dept_descr &PROMO.GEX_NEW_BUS_AREA 
		&PROMO.GEX_NEW_OPR_DIV $new_jobcode $New_job_descr &PROMO.SERVICE_DT 
		&PROMO.GEX_NEW_ACTION $New_action_descr &PROMO.GEX_NEW_ACTN_RSN $New_action_descr 
		&PROMO.GEX_CURR_OLD_GRADE &PROMO.GEX_NEW_FT_PT &PROMO.GEX_NEW_EMPL_TYPE 
		&PROMO.GEX_CURR_NEW_GRADE &PROMO.GEX_NEW_MGR_LVL $new_gex_evp_name  
		by $tab into $write_row
	do Write-Hipot-Promotion-Population
!GEX-TLL 05/06/2008 Begin
!FROM (SELECT A.CRV_RATING,P.EMPLID,P.SERVICE_DT,P.GEX_OLD_EFFDT,P.GEX_PREV_DEPTID,P.GEX_OLD_JOBCODE,
!	     P.GEX_OLD_ACTION,P.GEX_OLD_ACTN_RSN,P.GEX_OLD_BUS_AREA,P.GEX_PREV_OLD_GRADE,
!	     P.GEX_OLD_FT_PT,P.GEX_OLD_EMPL_TYPE,P.GEX_OLD_OPR_DIV,P.GEX_PREV_NEW_GRADE,
!	     P.GEX_OLD_MGR_LVL,P.GEX_OLD_EVP,P.EFFDT,P.GEX_CURR_DEPTID,P.GEX_NEW_JOBCODE,
!	     P.GEX_NEW_ACTION,P.GEX_NEW_ACTN_RSN,P.GEX_NEW_BUS_AREA,P.GEX_CURR_OLD_GRADE,
!            P.GEX_NEW_FT_PT,P.GEX_NEW_EMPL_TYPE,P.GEX_NEW_OPR_DIV,P.GEX_CURR_NEW_GRADE,
!	     P.GEX_NEW_MGR_LVL,P.GEX_NEW_EVP 
!     FROM PS_GEX_EVP_PROMO P,PS_GEX_APRAIS_SCOR A
!     WHERE P.GEX_CHANGE = 'PROMO' AND P.EMPLID = A.EMPLID(+) AND
!           A.SCORE_TYPE='CRV' AND
!           A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID) AND
!	   (P.GEX_PREV_OLD_GRADE <> P.GEX_CURR_OLD_GRADE or P.GEX_OLD_EMPL_TYPE <> P.GEX_NEW_EMPL_TYPE) and
!	   (P.GEX_CURR_OLD_GRADE between '13' and '50' or 
!           P.GEX_NEW_JOBCODE in ('10005','10006','10046') or
!            P.GEX_OLD_JOBCODE = '40048') AND 
!          P.GEX_CURR_DEPTID NOT IN ('C122')
FROM (SELECT AP.CRV_RATING,P.EMPLID,P.SERVICE_DT,P.GEX_OLD_EFFDT,P.GEX_PREV_DEPTID,P.GEX_OLD_JOBCODE,
	    P.GEX_OLD_ACTION,P.GEX_OLD_ACTN_RSN,P.GEX_OLD_BUS_AREA,P.GEX_PREV_OLD_GRADE,
	    P.GEX_OLD_FT_PT,P.GEX_OLD_EMPL_TYPE,P.GEX_OLD_OPR_DIV,P.GEX_PREV_NEW_GRADE,
	    P.GEX_OLD_MGR_LVL,P.GEX_OLD_EVP,P.EFFDT,P.GEX_CURR_DEPTID,P.GEX_NEW_JOBCODE,
	    P.GEX_NEW_ACTION,P.GEX_NEW_ACTN_RSN,P.GEX_NEW_BUS_AREA,P.GEX_CURR_OLD_GRADE,
            P.GEX_NEW_FT_PT,P.GEX_NEW_EMPL_TYPE,P.GEX_NEW_OPR_DIV,P.GEX_CURR_NEW_GRADE,
	    P.GEX_NEW_MGR_LVL,P.GEX_NEW_EVP 
      FROM (SELECT * FROM PS_GEX_EVP_PROMO P WHERE P.GEX_CHANGE = 'PROMO' AND 



           (P.GEX_PREV_OLD_GRADE <> P.GEX_CURR_OLD_GRADE or P.GEX_OLD_EMPL_TYPE <> P.GEX_NEW_EMPL_TYPE) and
           (P.GEX_CURR_OLD_GRADE between '13' and '50' or P.GEX_NEW_JOBCODE in ('10005','10006','10046') or P.GEX_OLD_JOBCODE = '40048') AND 


           P.GEX_CURR_DEPTID NOT IN ('C122')
           ) P,
     (SELECT * FROM PS_GEX_APRAIS_SCOR A 
      WHERE A.SCORE_TYPE='CRV' AND
      A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND a1.score_type='CRV')
     ) AP
     WHERE P.EMPLID=AP.EMPLID(+)
!GEX-TLL 05/06/2008 End           
     UNION 
     SELECT A.CRV_RATING,P.EMPLID,P.SERVICE_DT,P.GEX_OLD_EFFDT,P.GEX_PREV_DEPTID,
     	P.GEX_OLD_JOBCODE,P.GEX_OLD_ACTION,P.GEX_OLD_ACTN_RSN,P.GEX_OLD_BUS_AREA,
     	P.GEX_PREV_OLD_GRADE,P.GEX_OLD_FT_PT,P.GEX_OLD_EMPL_TYPE,P.GEX_OLD_OPR_DIV,
     	P.GEX_PREV_NEW_GRADE,P.GEX_OLD_MGR_LVL,P.GEX_OLD_EVP,P.EFFDT,P.GEX_CURR_DEPTID,
     	P.GEX_NEW_JOBCODE,P.GEX_NEW_ACTION,P.GEX_NEW_ACTN_RSN,P.GEX_NEW_BUS_AREA,
     	P.GEX_CURR_OLD_GRADE,P.GEX_NEW_FT_PT,P.GEX_NEW_EMPL_TYPE,P.GEX_NEW_OPR_DIV,
     	P.GEX_CURR_NEW_GRADE,P.GEX_NEW_MGR_LVL,P.GEX_NEW_EVP 
      FROM PS_GEX_EVP_PROMO P, PS_GEX_APRAIS_SCOR A
      WHERE P.GEX_CHANGE = 'PROMO' AND A.EMPLID = P.EMPLID AND
            A.SCORE_TYPE='CRV' AND
            A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND A1.SCORE_TYPE = 'CRV') AND !GEX-TLL  06/05/2008 Added SCORE_TYPE Criteria
	    (P.GEX_PREV_OLD_GRADE <> P.GEX_CURR_OLD_GRADE or P.GEX_OLD_EMPL_TYPE <> P.GEX_NEW_EMPL_TYPE)
     )PROMO
End-Select

End-Procedure


!***********************************************************************************
Begin-Procedure Movement-EVP
!***********************************************************************************

Show 'Movement-EVP'

Let #grand_total = 0
Let #Karet_total = 0 
Let #lucot_total = 0
Let #Minnaugh_total = 0
Let #NA_total = 0

Let $write_row = 'Movement by EVP From: ' || $Rpt_From_Date || ' To: ' || $Rpt-Thru_Date 
do Write-Movement-EVP

move '' to $write_row
do Write-Movement-EVP

String ' ' ' ' 'DESTINATION' by $tab into $write_row 
do Write-Movement-EVP

String 'S' ' ' 'Karet, L'	'Lucot, J' 'Minnaugh, M' 'N/A' 'Grand Total' ''
        by $tab into $write_row
do Write-Movement-EVP

move '178509093' to $evp
move 'Karet, L' to $evp_name
move 'O' to $prefix
do Movement-EVP-row

move '181464707' to $evp
move 'Lucot, J' to $evp_name
move 'U' to $prefix
do Movement-EVP-row

move '192505706' to $evp
move 'Minnaugh, M' to $evp_name
move 'R' to $prefix
do Movement-EVP-row

move ' ' to $evp
move 'N/A' to $evp_name
move 'C' to $prefix
do Movement-EVP-row

let #grand_total = #Karet_total + #lucot_total + #Minnaugh_total + #NA_total

move #grand_total to $grand_total B999,999
move #Karet_total to $Karet_total B999,999
move #lucot_total to $lucot_total B999,999
move #Minnaugh_total to $Minnaugh_total B999,99
move #NA_total to $NA_total B999,999

String 'E' 'Grand Total' $Karet_total $lucot_total $Minnaugh_total $NA_total $grand_total by $tab into $write_row
do Write-Movement-EVP

if #grand_total <> 0
   let #percent_EVP_karet = round((#Karet_total/#grand_total)*100,0)
   move #percent_EVP_Karet to $percent_EVP_Karet 999
   let $percent_EVP_Karet = $percent_EVP_Karet||'%'

   let #percent_EVP_lucot = round((#lucot_total/#grand_total)*100,0)
   move #percent_EVP_lucot to $percent_EVP_lucot 999
   let $percent_EVP_lucot = $percent_EVP_lucot||'%'

   let #percent_EVP_Minnaugh = round((#Minnaugh_total/#grand_total)*100,0)
   move #percent_EVP_Minnaugh to $percent_EVP_Minnaugh 999
   let $percent_EVP_Minnaugh = $percent_EVP_Minnaugh||'%'
   
   let #percent_EVP_NA = round((#NA_total/#grand_total)*100,0)
   move #percent_EVP_NA to $percent_EVP_NA 999
   let $percent_EVP_NA = $percent_EVP_NA||'%'
end-if

String '' '' $percent_EVP_Karet $percent_EVP_lucot $percent_EVP_Minnaugh $percent_EVP_NA '100%' 
	by $tab into $write_row
do Write-Movement-EVP

End-Procedure


!***********************************************************************************
Begin-Procedure Movement-EVP-row
!***********************************************************************************

move 0 to #count_EVP_Karet
move 0 to #count_EVP_lucot
move 0 to #count_EVP_Minnaugh
move 0 to #count_EVP_NA
move 0 to #old_grand_total

Begin-Select
EVP_MVMNT.GEX_NEW_GEX_EVP
COUNT(EVP_MVMNT.Emplid) &count_EVP_Mvmnt

   Evaluate &EVP_MVMNT.GEX_NEW_GEX_EVP
   when = '178509093'
	move &count_EVP_Mvmnt to #count_EVP_Karet
	let #old_grand_total = #old_grand_total + &count_EVP_Mvmnt
	let #Karet_total = #Karet_total + &count_EVP_Mvmnt
	Break
   when = '181464707'
	move &count_EVP_Mvmnt to #count_EVP_lucot
	let #old_grand_total = #old_grand_total + &count_EVP_Mvmnt
	let #lucot_total = #lucot_total + &count_EVP_Mvmnt
	Break
   when = '192505706'
	move &count_EVP_Mvmnt to #count_EVP_Minnaugh
	let #old_grand_total = #old_grand_total + &count_EVP_Mvmnt
	let #Minnaugh_total = #Minnaugh_total + &count_EVP_Mvmnt
	Break
   when-other
	move &count_EVP_Mvmnt to #count_EVP_NA
	let #old_grand_total = #old_grand_total + &count_EVP_Mvmnt
	let #NA_total = #NA_total + &count_EVP_Mvmnt
	Break
   End-Evaluate
!GEX-TLL 05/06/2008 Begin
!FROM (SELECT A.CRV_RATING,M.EMPLID,M.SERVICE_DT,M.GEX_OLD_EFFDT,M.GEX_OLD_DEPTID,M.GEX_OLD_JOBCODE,M.GEX_OLD_ACTION,
!             M.GEX_OLD_ACTN_RSN,M.GEX_OLD_BUS_AREA,M.GEX_OLD_SAL_GRADE,M.GEX_OLD_FT_PT,M.GEX_OLD_EMPL_TYPE,
!	     M.GEX_OLD_OPR_DIV,M.GEX_OLD_SG,M.GEX_OLD_MGR_LVL,M.GEX_OLD_GEX_EVP,M.GEX_NEW_EFFDT,M.DEPTID,
!	     M.GEX_NEW_JOBCODE,M.GEX_NEW_ACTION,M.GEX_NEW_ACTN_RSN,M.GEX_NEW_BUS_AREA,M.GEX_NEW_SAL_GRADE,
!	     M.GEX_NEW_FT_PT,M.GEX_NEW_EMPL_TYPE,M.GEX_NEW_OPR_DIV,M.GEX_NEW_SG,M.GEX_NEW_MGR_LVL,M.GEX_NEW_GEX_EVP 
!     FROM PS_GEX_EVP_MVMNT M, PS_GEX_APRAIS_SCOR A
!      WHERE M.EMPLID=A.EMPLID(+) AND
!            A.SCORE_TYPE='CRV' AND
!            A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID) AND
!            ( 
!             M.GEX_OLD_SG BETWEEN '13' and '50' or 
!             M.GEX_NEW_SG BETWEEN '13' and '50' or 
!             M.GEX_OLD_JOBCODE in ('10005','10006','10046','40048') or 
!             M.GEX_NEW_JOBCODE in ('10005','10006','10046','40048')
!	    )
!	    AND M.DEPTID not in ('C122')
FROM (SELECT M.EMPLID,AP.CRV_RATING,M.SERVICE_DT,M.GEX_OLD_EFFDT,M.GEX_OLD_DEPTID,M.GEX_OLD_JOBCODE,M.GEX_OLD_ACTION,
	     M.GEX_OLD_ACTN_RSN,M.GEX_OLD_BUS_AREA,M.GEX_OLD_SAL_GRADE,M.GEX_OLD_FT_PT,M.GEX_OLD_EMPL_TYPE,
	     M.GEX_OLD_OPR_DIV,M.GEX_OLD_SG,M.GEX_OLD_MGR_LVL,M.GEX_OLD_GEX_EVP,M.GEX_NEW_EFFDT,M.DEPTID,
	     M.GEX_NEW_JOBCODE,M.GEX_NEW_ACTION,M.GEX_NEW_ACTN_RSN,M.GEX_NEW_BUS_AREA,M.GEX_NEW_SAL_GRADE,
	     M.GEX_NEW_FT_PT,M.GEX_NEW_EMPL_TYPE,M.GEX_NEW_OPR_DIV,M.GEX_NEW_SG,M.GEX_NEW_MGR_LVL,M.GEX_NEW_GEX_EVP 
      FROM(SELECT * FROM PS_GEX_EVP_MVMNT M
	   WHERE (M.GEX_OLD_SG BETWEEN '13' and '50' or M.GEX_NEW_SG BETWEEN '13' and '50' or 
                  M.GEX_OLD_JOBCODE in ('10005','10006','10046','40048') or M.GEX_NEW_JOBCODE in ('10005','10006','10046','40048'))







	          AND M.DEPTID not in ('C122')
          ) M,
	  (SELECT * FROM PS_GEX_APRAIS_SCOR A WHERE A.SCORE_TYPE='CRV' AND
	   A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND a1.score_type='CRV')
          ) AP
      WHERE M.EMPLID = AP.EMPLID(+)    
!GEX-TLL 05/06/2008 End
      UNION
      SELECT M.EMPLID,A.CRV_RATING,M.SERVICE_DT,M.GEX_OLD_EFFDT,M.GEX_OLD_DEPTID,M.GEX_OLD_JOBCODE,M.GEX_OLD_ACTION,
             M.GEX_OLD_ACTN_RSN,M.GEX_OLD_BUS_AREA,M.GEX_OLD_SAL_GRADE,M.GEX_OLD_FT_PT,M.GEX_OLD_EMPL_TYPE,
	     M.GEX_OLD_OPR_DIV,M.GEX_OLD_SG,M.GEX_OLD_MGR_LVL,M.GEX_OLD_GEX_EVP,M.GEX_NEW_EFFDT,M.DEPTID,
	     M.GEX_NEW_JOBCODE,M.GEX_NEW_ACTION,M.GEX_NEW_ACTN_RSN,M.GEX_NEW_BUS_AREA,M.GEX_NEW_SAL_GRADE,
	     M.GEX_NEW_FT_PT,M.GEX_NEW_EMPL_TYPE,M.GEX_NEW_OPR_DIV,M.GEX_NEW_SG,M.GEX_NEW_MGR_LVL,M.GEX_NEW_GEX_EVP 
      FROM PS_GEX_EVP_MVMNT M, PS_GEX_APRAIS_SCOR A
      WHERE A.EMPLID=M.EMPLID AND
            A.SCORE_TYPE='CRV' AND
            A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND A1.SCORE_TYPE = 'CRV') !GEX-TLL 05/06/2008 Added SCORE_TYPE Criteria
      ) EVP_MVMNT
WHERE EVP_MVMNT.GEX_OLD_GEX_EVP = $evp
GROUP BY EVP_MVMNT.GEX_NEW_GEX_EVP
End-Select

move #count_EVP_Karet to $count_EVP_Karet B999,999
move #count_EVP_lucot to $count_EVP_lucot B999,999
move #count_EVP_Minnaugh to $count_EVP_Minnaugh B999,999
move #count_EVP_NA to $count_EVP_NA B999,999
move #old_grand_total to $old_grand_total B999,999

String $prefix $evp_name $count_EVP_Karet $count_EVP_lucot $count_EVP_Minnaugh $count_EVP_NA $old_grand_total '' 
	by $tab into $write_row
do Write-Movement-EVP

End-Procedure


!***********************************************************************************
Begin-Procedure Movement-EVP-CVR
!***********************************************************************************

Show 'Movement-EVP-CVR'

move 0 to #C_total
move 0 to #E_total
move 0 to #IP_total
move 0 to #WP_total
move 0 to #MV_total
move 0 to #MP_total
move 0 to #TN_total
move 0 to #NA_total

Let $write_row = 'Movement by EVP & Change Response Ratings From: ' || $Rpt_From_Date || ' To: ' || $Rpt-Thru_Date 
do Write-Movement-EVP-CVR

move '' to $write_row
do Write-Movement-EVP-CVR

String 'EVP Name' 'C' 'E' 'IP' 'WP' 'MV' 'MP' 'TN' 'N/A' 'Grand Total'
        by $tab into $write_row
do Write-Movement-EVP-CVR

move '178509093' to $evp
move 'Karet, L' to $evp_name
do Movement-EVP-CVR-Row

move '181464707' to $evp
move 'Lucot, J' to $evp_name
do Movement-EVP-CVR-Row

move '192505706' to $evp
move 'Minnaugh, M' to $evp_name
do Movement-EVP-CVR-Row

move ' ' to $evp
move 'N/A' to $evp_name
do Movement-EVP-CVR-Row

let #grand_total = #C_total + #E_total + #IP_total + #WP_total + #MV_total + #MP_total + #TN_total + #NA_total

move #C_total to $C_total B999,999
move #E_total to $E_total B999,999
move #IP_total to $IP_total B999,999
move #WP_total to $WP_total B999,999
move #MV_total to $MV_total B999,999
move #MP_total to $MP_total B999,999
move #TN_total to $TN_total B999,999
move #NA_total to $NA_total B999,999
move #grand_total to $grand_total B999,999

String 'Grand Total' $C_total $E_total $IP_total $WP_total $MV_total $MP_total
	$TN_total $NA_total $grand_total by $tab into $write_row
do Write-Movement-EVP-CVR

End-Procedure


!***********************************************************************************
Begin-Procedure Movement-EVP-CVR-Row
!***********************************************************************************

move 0 to #count_CVR_C
move 0 to #count_CVR_E
move 0 to #count_CVR_IP
move 0 to #count_CVR_WP
move 0 to #count_CVR_MV
move 0 to #count_CVR_MP
move 0 to #count_CVR_TN
move 0 to #count_CVR_NA
move 0 to #evp_total

Begin-Select
EVP_CVR_MVMNT.CRV_RATING
COUNT(EVP_CVR_MVMNT.EMPLID) &count_EVP_cvr

   Evaluate &EVP_CVR_MVMNT.CRV_RATING
   when = 'C'
	move &count_EVP_cvr to #count_CVR_C
	let #evp_total = #evp_total + &count_EVP_cvr
	let #C_total = #C_total + &count_EVP_cvr
	Break
   when = 'E'
	move &count_EVP_cvr to #count_CVR_E
	let #evp_total = #evp_total + &count_EVP_cvr
	let #E_total = #E_total + &count_EVP_cvr
	Break
   when = 'IP'
	move &count_EVP_cvr to #count_CVR_IP
	let #evp_total = #evp_total + &count_EVP_cvr
	let #IP_total = #IP_total + &count_EVP_cvr
	Break
   when = 'WP'
	move &count_EVP_cvr to #count_CVR_WP
	let #evp_total = #evp_total + &count_EVP_cvr
	let #WP_total = #WP_total + &count_EVP_cvr
	Break
   when = 'MV'
	move &count_EVP_cvr to #count_CVR_MV
	let #evp_total = #evp_total + &count_EVP_cvr
	let #MV_total = #MV_total + &count_EVP_cvr
	Break
   when = 'MP'
	move &count_EVP_cvr to #count_CVR_MP
	let #evp_total = #evp_total + &count_EVP_cvr
	let #MP_total = #MP_total + &count_EVP_cvr
	Break
   when = 'TN'
	move &count_EVP_cvr to #count_CVR_TN
	let #evp_total = #evp_total + &count_EVP_cvr
	let #TN_total = #TN_total + &count_EVP_cvr
	Break
   when-other
	move &count_EVP_cvr to #count_CVR_NA
	let #evp_total = #evp_total + &count_EVP_cvr
	let #NA_total = #NA_total + &count_EVP_cvr
	Break
   End-Evaluate
!GEX-TLL 05/06/2008 Begin
!FROM (SELECT A.CRV_RATING,M.EMPLID,M.SERVICE_DT,M.GEX_OLD_EFFDT,M.GEX_OLD_DEPTID,M.GEX_OLD_JOBCODE,M.GEX_OLD_ACTION,
!             M.GEX_OLD_ACTN_RSN,M.GEX_OLD_BUS_AREA,M.GEX_OLD_SAL_GRADE,M.GEX_OLD_FT_PT,M.GEX_OLD_EMPL_TYPE,
!	     M.GEX_OLD_OPR_DIV,M.GEX_OLD_SG,M.GEX_OLD_MGR_LVL,M.GEX_OLD_GEX_EVP,M.GEX_NEW_EFFDT,M.DEPTID,
!	     M.GEX_NEW_JOBCODE,M.GEX_NEW_ACTION,M.GEX_NEW_ACTN_RSN,M.GEX_NEW_BUS_AREA,M.GEX_NEW_SAL_GRADE,
!	     M.GEX_NEW_FT_PT,M.GEX_NEW_EMPL_TYPE,M.GEX_NEW_OPR_DIV,M.GEX_NEW_SG,M.GEX_NEW_MGR_LVL,M.GEX_NEW_GEX_EVP 
!     FROM PS_GEX_EVP_MVMNT M, PS_GEX_APRAIS_SCOR A
!      WHERE M.EMPLID=A.EMPLID(+) AND
!            A.SCORE_TYPE='CRV' AND
!            A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID) AND
!            ( 
!             M.GEX_OLD_SG BETWEEN '13' and '50' or 
!             M.GEX_NEW_SG BETWEEN '13' and '50' or 
!             M.GEX_OLD_JOBCODE in ('10005','10006','10046','40048') or 
!             M.GEX_NEW_JOBCODE in ('10005','10006','10046','40048')
!	    )
!	    AND M.DEPTID not in ('C122')
FROM (SELECT M.EMPLID,AP.CRV_RATING,M.SERVICE_DT,M.GEX_OLD_EFFDT,M.GEX_OLD_DEPTID,M.GEX_OLD_JOBCODE,M.GEX_OLD_ACTION,
	     M.GEX_OLD_ACTN_RSN,M.GEX_OLD_BUS_AREA,M.GEX_OLD_SAL_GRADE,M.GEX_OLD_FT_PT,M.GEX_OLD_EMPL_TYPE,
	     M.GEX_OLD_OPR_DIV,M.GEX_OLD_SG,M.GEX_OLD_MGR_LVL,M.GEX_OLD_GEX_EVP,M.GEX_NEW_EFFDT,M.DEPTID,
	     M.GEX_NEW_JOBCODE,M.GEX_NEW_ACTION,M.GEX_NEW_ACTN_RSN,M.GEX_NEW_BUS_AREA,M.GEX_NEW_SAL_GRADE,
	     M.GEX_NEW_FT_PT,M.GEX_NEW_EMPL_TYPE,M.GEX_NEW_OPR_DIV,M.GEX_NEW_SG,M.GEX_NEW_MGR_LVL,M.GEX_NEW_GEX_EVP 
      FROM(SELECT * FROM PS_GEX_EVP_MVMNT M
	   WHERE (M.GEX_OLD_SG BETWEEN '13' and '50' or M.GEX_NEW_SG BETWEEN '13' and '50' or 
                  M.GEX_OLD_JOBCODE in ('10005','10006','10046','40048') or M.GEX_NEW_JOBCODE in ('10005','10006','10046','40048'))







	          AND M.DEPTID not in ('C122')
          ) M,
	  (SELECT * FROM PS_GEX_APRAIS_SCOR A WHERE A.SCORE_TYPE='CRV' AND
	   A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND a1.score_type='CRV')
          ) AP
      WHERE M.EMPLID = AP.EMPLID(+)  
!GEX-TLL 05/06/2008 End
      UNION
      SELECT M.EMPLID,A.CRV_RATING,M.SERVICE_DT,M.GEX_OLD_EFFDT,M.GEX_OLD_DEPTID,M.GEX_OLD_JOBCODE,M.GEX_OLD_ACTION,
             M.GEX_OLD_ACTN_RSN,M.GEX_OLD_BUS_AREA,M.GEX_OLD_SAL_GRADE,M.GEX_OLD_FT_PT,M.GEX_OLD_EMPL_TYPE,
	     M.GEX_OLD_OPR_DIV,M.GEX_OLD_SG,M.GEX_OLD_MGR_LVL,M.GEX_OLD_GEX_EVP,M.GEX_NEW_EFFDT,M.DEPTID,
	     M.GEX_NEW_JOBCODE,M.GEX_NEW_ACTION,M.GEX_NEW_ACTN_RSN,M.GEX_NEW_BUS_AREA,M.GEX_NEW_SAL_GRADE,
	     M.GEX_NEW_FT_PT,M.GEX_NEW_EMPL_TYPE,M.GEX_NEW_OPR_DIV,M.GEX_NEW_SG,M.GEX_NEW_MGR_LVL,M.GEX_NEW_GEX_EVP 
      FROM PS_GEX_EVP_MVMNT M, PS_GEX_APRAIS_SCOR A
      WHERE A.EMPLID=M.EMPLID AND
            A.SCORE_TYPE='CRV' AND
            A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND A1.SCORE_TYPE = 'CRV') !GEX-TLL 05/06/2008 Added SCORE_TYPE Criteria
      ) EVP_CVR_MVMNT
WHERE EVP_CVR_MVMNT.GEX_NEW_GEX_EVP=$evp
GROUP BY EVP_CVR_MVMNT.CRV_RATING
End-Select

move #count_CVR_C to $count_CVR_C B999,999
move #count_CVR_E to $count_CVR_E B999,999
move #count_CVR_IP to $count_CVR_IP B999,999
move #count_CVR_WP to $count_CVR_WP B999,999
move #count_CVR_MV to $count_CVR_MV B999,999
move #count_CVR_MP to $count_CVR_MP B999,999
move #count_CVR_TN to $count_CVR_TN B999,999
move #count_CVR_NA to $count_CVR_NA B999,999
move #evp_total to $evp_total B999,999

String $evp_name $count_CVR_C $count_CVR_E $count_CVR_IP $count_CVR_WP $count_CVR_MV $count_CVR_MP
	$count_CVR_TN $count_CVR_NA $evp_total by $tab into $write_row
do Write-Movement-EVP-CVR

End-Procedure


!***********************************************************************************
Begin-Procedure Hipot-Movement-Population
!***********************************************************************************

Show 'Hipot-Movement-Population'

Let $Report_title = 'Hi Potential & Gold Standards Movement Population From: ' || $Rpt_From_Date || ' To: ' || $Rpt-Thru_Date 
String '' '' '' '' $Report_Title by $tab into $write_row 
do Write-Hipot-Movement-Population

move '' to $write_row
do Write-Hipot-Movement-Population

String 'NAME' 'EFFDT' 'DEPT' 'DESCR' 'BUS AREA' 'OPR DIV' 'JOBCODE' 'DESCR' 'SERVICE DT'
	'ACTION' 'DESCR' 'REASON' 'DESCR' 'OLD SG' 'FT/PT' 'TYPE' 'NEW SG' 'MGR LEVEL' 'EVP' '|' 
	'NAME' 'EFFDT' 'DEPT' 'DESCR' 'BUS AREA' 'OPR DIV' 'JOBCODE' 'DESCR' 'SERVICE DT'
	'ACTION' 'DESCR' 'REASON' 'DESCR' 'OLD SG' 'FT/PT' 'TYPE'  'NEW SG' 'MGR LEVEL' 'EVP' 
	by $tab into $write_row
do Write-Hipot-Movement-Population

Begin-Select
MVMNT.EMPLID &emplid_HMP
MVMNT.SERVICE_DT
MVMNT.GEX_OLD_EFFDT
MVMNT.GEX_OLD_DEPTID
MVMNT.GEX_OLD_JOBCODE
MVMNT.GEX_OLD_ACTION
MVMNT.GEX_OLD_ACTN_RSN
MVMNT.GEX_OLD_BUS_AREA
MVMNT.GEX_OLD_SAL_GRADE
MVMNT.GEX_OLD_FT_PT
MVMNT.GEX_OLD_EMPL_TYPE
MVMNT.GEX_OLD_OPR_DIV
MVMNT.GEX_OLD_SG
MVMNT.GEX_OLD_MGR_LVL
MVMNT.GEX_OLD_GEX_EVP
MVMNT.GEX_NEW_EFFDT
MVMNT.DEPTID
MVMNT.GEX_NEW_JOBCODE
MVMNT.GEX_NEW_ACTION
MVMNT.GEX_NEW_ACTN_RSN
MVMNT.GEX_NEW_BUS_AREA
MVMNT.GEX_NEW_SAL_GRADE
MVMNT.GEX_NEW_FT_PT
MVMNT.GEX_NEW_EMPL_TYPE
MVMNT.GEX_NEW_OPR_DIV
MVMNT.GEX_NEW_SG
MVMNT.GEX_NEW_MGR_LVL
MVMNT.GEX_NEW_GEX_EVP

	let $emplid_pop = &emplid_HMP
	Do Hipot-GetCompleteName 

	let $old_deptid = '="' || edit(&MVMNT.GEX_OLD_DEPTID,'0000') || '"'
	let $lkup_DEPTID = &MVMNT.GEX_OLD_DEPTID
	Do get-deptid-descr
	let $Old_Dept_descr  = &DT1.DESCR

	let $old_jobcode = '="' || edit(&MVMNT.GEX_OLD_JOBCODE,'00000') || '"'
	let $lkup_jobcode     = &MVMNT.GEX_OLD_JOBCODE
	do get-jobcode-descr
	let $old_job_descr   = &JT1.DESCR

	let $action = &MVMNT.GEX_OLD_ACTION
	do get-action-descr
	!let $old_action_descr = &xlat.xlatlongname  !GEX-TLL 05/02/2008
	let $old_action_descr = &xlat.action_descr   !GEX-TLL 05/02/2008

	let $actn_reason = &MVMNT.GEX_OLD_ACTN_RSN
	do get-actn-reason-descr 
	let $old_actn_rsn_descr = &ar.descr

	let $GEX_EVP = &MVMNT.GEX_OLD_GEX_EVP
	Do Get-EVP-Name
	let $old_gex_evp_name = $EVP_NAME


	let $new_deptid = '="' || edit(&MVMNT.DEPTID,'0000') || '"'
	let $lkup_DEPTID = &MVMNT.DEPTID
	Do get-deptid-descr
	let $New_Dept_descr  = &DT1.DESCR

	let $new_jobcode = '="' || edit(&MVMNT.GEX_NEW_JOBCODE,'00000') || '"'
	let $lkup_jobcode     = &MVMNT.GEX_NEW_JOBCODE
	do get-jobcode-descr
	let $New_job_descr   = &JT1.DESCR

	let $action = &MVMNT.GEX_New_ACTION
	do get-action-descr
	!let $New_action_descr = &xlat.xlatlongname  !GEX-TLL 05/02/2008
	let $New_action_descr = &xlat.action_descr   !GEX-TLL 05/02/2008

	let $actn_reason = &MVMNT.GEX_New_ACTN_RSN
	do get-actn-reason-descr 
	let $New_actn_rsn_descr = &ar.descr

	let $GEX_EVP = &MVMNT.GEX_NEW_GEX_EVP
	Do Get-EVP-Name
	let $new_gex_evp_name = $EVP_NAME

	String $Name &MVMNT.GEX_OLD_EFFDT $old_deptid $Old_Dept_descr &MVMNT.GEX_OLD_BUS_AREA 
	&MVMNT.GEX_OLD_OPR_DIV $old_jobcode $old_job_descr &MVMNT.SERVICE_DT &MVMNT.GEX_OLD_ACTION 
	$old_action_descr &MVMNT.GEX_OLD_ACTN_RSN $old_actn_rsn_descr  &MVMNT.GEX_OLD_SAL_GRADE 
	&MVMNT.GEX_OLD_FT_PT &MVMNT.GEX_OLD_EMPL_TYPE  &MVMNT.GEX_OLD_SG &MVMNT.GEX_OLD_MGR_LVL 
	$old_gex_evp_name  '|' 
	$Name &MVMNT.GEX_NEW_EFFDT $new_deptid $New_Dept_descr &MVMNT.GEX_NEW_BUS_AREA 
	&MVMNT.GEX_NEW_OPR_DIV $new_jobcode $New_job_descr &MVMNT.SERVICE_DT &MVMNT.GEX_NEW_ACTION 
	$New_action_descr &MVMNT.GEX_NEW_ACTN_RSN $New_action_descr  &MVMNT.GEX_NEW_SAL_GRADE 
	&MVMNT.GEX_NEW_FT_PT &MVMNT.GEX_NEW_EMPL_TYPE &MVMNT.GEX_NEW_SG &MVMNT.GEX_NEW_MGR_LVL 
	$new_gex_evp_name  by $tab into $write_row
	do Write-Hipot-Movement-Population

FROM (SELECT M.EMPLID,M.SERVICE_DT,M.GEX_OLD_EFFDT,M.GEX_OLD_DEPTID,M.GEX_OLD_JOBCODE,M.GEX_OLD_ACTION,
             M.GEX_OLD_ACTN_RSN,M.GEX_OLD_BUS_AREA,M.GEX_OLD_SAL_GRADE,M.GEX_OLD_FT_PT,M.GEX_OLD_EMPL_TYPE,
	     M.GEX_OLD_OPR_DIV,M.GEX_OLD_SG,M.GEX_OLD_MGR_LVL,M.GEX_OLD_GEX_EVP,M.GEX_NEW_EFFDT,M.DEPTID,
	     M.GEX_NEW_JOBCODE,M.GEX_NEW_ACTION,M.GEX_NEW_ACTN_RSN,M.GEX_NEW_BUS_AREA,M.GEX_NEW_SAL_GRADE,
	     M.GEX_NEW_FT_PT,M.GEX_NEW_EMPL_TYPE,M.GEX_NEW_OPR_DIV,M.GEX_NEW_SG,M.GEX_NEW_MGR_LVL,M.GEX_NEW_GEX_EVP 
      !GEX-TLL 05/06/2008 Begin
      !FROM PS_GEX_EVP_MVMNT M, PS_GEX_APRAIS_SCOR A
      !WHERE M.EMPLID=A.EMPLID(+) AND
      !      A.SCORE_TYPE='CRV' AND
      !      A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID) AND
      !      ( 
      !       M.GEX_OLD_SG BETWEEN '13' and '50' or 
      !       M.GEX_NEW_SG BETWEEN '13' and '50' or 
      !       M.GEX_OLD_JOBCODE in ('10005','10006','10046','40048') or 
      !       M.GEX_NEW_JOBCODE in ('10005','10006','10046','40048')
      !	    )
      ! 	    AND M.DEPTID not in ('C122')
      FROM(SELECT * FROM PS_GEX_EVP_MVMNT M
	   WHERE (M.GEX_OLD_SG BETWEEN '13' and '50' or M.GEX_NEW_SG BETWEEN '13' and '50' or 
                  M.GEX_OLD_JOBCODE in ('10005','10006','10046','40048') or M.GEX_NEW_JOBCODE in ('10005','10006','10046','40048'))







	          AND M.DEPTID not in ('C122')
          ) M,
	  (SELECT * FROM PS_GEX_APRAIS_SCOR A WHERE A.SCORE_TYPE='CRV' AND
	   A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND a1.score_type='CRV')
          ) AP
      WHERE M.EMPLID = AP.EMPLID(+)
     !GEX-TLL 05/06/2008 End	    
      UNION
      SELECT M.EMPLID,M.SERVICE_DT,M.GEX_OLD_EFFDT,M.GEX_OLD_DEPTID,M.GEX_OLD_JOBCODE,M.GEX_OLD_ACTION,
             M.GEX_OLD_ACTN_RSN,M.GEX_OLD_BUS_AREA,M.GEX_OLD_SAL_GRADE,M.GEX_OLD_FT_PT,M.GEX_OLD_EMPL_TYPE,
	     M.GEX_OLD_OPR_DIV,M.GEX_OLD_SG,M.GEX_OLD_MGR_LVL,M.GEX_OLD_GEX_EVP,M.GEX_NEW_EFFDT,M.DEPTID,
	     M.GEX_NEW_JOBCODE,M.GEX_NEW_ACTION,M.GEX_NEW_ACTN_RSN,M.GEX_NEW_BUS_AREA,M.GEX_NEW_SAL_GRADE,
	     M.GEX_NEW_FT_PT,M.GEX_NEW_EMPL_TYPE,M.GEX_NEW_OPR_DIV,M.GEX_NEW_SG,M.GEX_NEW_MGR_LVL,M.GEX_NEW_GEX_EVP 
      FROM PS_GEX_EVP_MVMNT M, PS_GEX_APRAIS_SCOR A
      WHERE A.EMPLID=M.EMPLID AND
            A.SCORE_TYPE='CRV' AND
            A.EFFDT=(SELECT MAX(A1.EFFDT) FROM PS_GEX_APRAIS_SCOR A1 WHERE A1.EMPLID=A.EMPLID AND A1.SCORE_TYPE = 'CRV') !GEX-TLL 05/06/2008 Added SCORE_TYPE Criteria
      ) MVMNT
End-Select

End-Procedure


!***********************************************************************************
Begin-Procedure Hipot-GetCompleteName
!***********************************************************************************

let $name=''

Begin-Select
N.FIRST_NAME                    
N.MIDDLE_NAME
N.LAST_NAME

  let $firstname      = &N.FIRST_NAME
    If length($firstname) > 15
       let $firstname = substr($firstname,1,15)
     End-If

  let $midname      = &N.MIDDLE_NAME
    If length($midname) > 15
       let $midname = substr($midname,1,15)
     End-If
     
  let $lastname       = &n.last_name
     If length($lastname) > 30
       let $lastname = substr($lastname,1,30)
     End-If

  let $name = $lastname ||', '||$firstname||' '||$midname 

FROM PS_NAMES N
WHERE N.EFFDT = (SELECT MAX(NN.EFFDT) FROM   PS_NAMES NN WHERE  
       		 N.EMPLID     = NN.EMPLID    AND    
       		 NN.NAME_TYPE  = N.NAME_TYPE AND    
       		 NN.EFFDT       <= SYSDATE)
AND N.EMPLID = $emplid_pop
End-Select

End-Procedure


!***********************************************************************************
Begin-Procedure get-deptid-descr
!***********************************************************************************

begin-select
dt1.descr

from ps_dept_tbl dt1
where    DT1.SETID            = 'COMMN'
AND    DT1.DEPTID           = $lkup_DEPTID
AND    DT1.EFF_STATUS       = 'A'
AND    DT1.EFFDT            = (SELECT MAX(EFFDT) FROM   PS_DEPT_TBL WHERE  
				DEPTID       = DT1.DEPTID AND    
				SETID        = DT1.SETID AND    
				EFFDT       <= SYSDATE)
end-select
end-procedure


!***********************************************************************************
begin-procedure get-jobcode-descr
!***********************************************************************************

begin-select
jt1.descr
jt1.manager_level
jt1.eeo1code

from ps_jobcode_tbl jt1
where    jt1.SETID          = 'COMMN'
AND    jt1.jobcode          = $lkup_jobcode
AND    jt1.EFF_STATUS       = 'A'
AND    jt1.EFFDT            = (SELECT MAX(EFFDT) FROM   PS_jobcode_tbl WHERE  
				jobcode      = jt1.jobcode AND    
				SETID        = jt1.SETID AND    
				EFFDT       <= SYSDATE)
end-select
end-procedure


!**********************************************************************************
begin-procedure get-action-descr
!**********************************************************************************

begin-select
!xlat.xlatlongname	!GEX-TLL 05/02/2008
xlat.action_descr   !GEX-TLL 05/02/2008

!from xlattable xlat  !GEX-TLL Commneted for HCM 9.0 Upgrade
!from psxlatitem xlat !GEX-TLL Added for HCM 9.0 Upgrade   !GEX-TLL 05/02/2008
from PS_ACTION_TBL xlat  !GEX-TLL 05/02/2008
!where xlat.fieldname = 'ACTION'  !GEX-TLL 05/02/2008
!and xlat.fieldvalue = $action	  !GEX-TLL 05/02/2008
where xlat.action=$action         !GEX-TLL 05/02/2008
and xlat.eff_status = 'A' 
!GEX-TLL 05/02/2008 - Begin
and xlat.effdt=
		(select MAX(EFFDT) FROM PS_ACTION_TBL
		WHERE xlat.ACTION = ACTION           
         	AND xlat.EFF_STATUS = EFF_STATUS)
!GEX-TLL 05/02/2008 - End 

end-select
end-procedure


!**********************************************************************************
begin-procedure get-actn-reason-descr
!**********************************************************************************

begin-select
ar.descr

from ps_actn_reason_tbl ar
where ar.action = $action
and ar.action_reason = $actn_reason
and ar.eff_status = 'A'
end-select
end-procedure


!***********************************************************************************
Begin-Procedure Get-EVP-Name
!***********************************************************************************

evaluate $GEX_EVP
    when = '192505706'
      let $EVP_NAME = 'Minnaugh, M'
    break
    when = '181464707'
      let $EVP_NAME = 'Lucot, J'
    break
    when = '178509093'
      let $EVP_NAME = 'Karet, L'
    break
    when-other
      let $EVP_NAME = ' '
end-evaluate

End-Procedure


!***********************************************************************************
Begin-Procedure Turnover-Terms-CVR
!***********************************************************************************

Show 'Turnover-Terms-CVR'

Let $write_row = 'Terminations with Change Response Ratings From: ' || $Rpt_From_Date || ' To: ' || $Rpt-Thru_Date 
do Write-Turnover-Terms-CVR

move '' to $write_row
do Write-Turnover-Terms-CVR

String 'CVR' 'Total' by $tab into $write_row
do Write-Turnover-Terms-CVR

do Turnover-Terms-CVR-Row

let #grand_total = #E_total + #MV_total + #MP_total + #WP_total

move #C_total to $C_total B999,999
move #E_total to $E_total B999,999
move #IP_total to $IP_total B999,999
move #Intern_total to $Intern_total B999,999
move #WP_total to $WP_total B999,999
move #MV_total to $MV_total B999,999
move #MP_total to $MP_total B999,999
move #TN_total to $TN_total B999,999
move #NA_total to $NA_total B999,999
move #grand_total to $grand_total B999,999

End-Procedure


!***********************************************************************************
Begin-Procedure  Turnover-Terms-CVR-Row
!***********************************************************************************

move 0 to #count_CVR_C
move 0 to #count_CVR_E
move 0 to #count_CVR_Intern
move 0 to #count_CVR_IP
move 0 to #count_CVR_MP
move 0 to #count_CVR_MV
move 0 to #count_CVR_TN
move 0 to #count_CVR_WP
move 0 to #count_CVR_NA
move 0 to #evp_totals

Begin-Select 
AP_TERM.CRV_RATING
COUNT(terms.EMPLID) &count_Term_CVR

   Evaluate &AP_TERM.CRV_RATING
   when = 'C'
	move &count_Term_CVR to #count_CVR_C
	String 'C' #count_CVR_C by $tab into $write_row
	do Write-Turnover-Terms-CVR
	Break
   when = 'E'
	move &count_Term_CVR to #count_CVR_E
	String 'E' #count_CVR_E by $tab into $write_row
	do Write-Turnover-Terms-CVR
	Break
   when = 'IP'
	move &count_Term_CVR to #count_CVR_IP
	String 'IP' #count_CVR_IP by $tab into $write_row
	do Write-Turnover-Terms-CVR
	Break
   when = 'intern'
	move &count_Term_CVR to #count_CVR_Intern
	String 'Intern' #count_CVR_Intern by $tab into $write_row
	do Write-Turnover-Terms-CVR
	Break
   when = 'WP'
	move &count_Term_CVR to #count_CVR_WP
	String 'WP' #count_CVR_WP by $tab into $write_row
	do Write-Turnover-Terms-CVR
	Break
   when = 'MV'
	move &count_Term_CVR to #count_CVR_MV
	String 'MV' #count_CVR_MV by $tab into $write_row
	do Write-Turnover-Terms-CVR
	Break
   when = 'MP'
	move &count_Term_CVR to #count_CVR_MP
	String 'MP' #count_CVR_MP by $tab into $write_row
	do Write-Turnover-Terms-CVR
	Break
   when = 'TN'
	move &count_Term_CVR to #count_CVR_TN
	String 'TN' #count_CVR_TN by $tab into $write_row
	do Write-Turnover-Terms-CVR
	Break
   when-other
	move &count_Term_CVR to #count_CVR_NA
	String 'N\A' #count_CVR_NA by $tab into $write_row
	do Write-Turnover-Terms-CVR
	Break
   End-Evaluate

from (SELECT DISTINCT A.EMPLID as EMPLID, 
C.NAME as NAME, 
A.COMPANY as COMPANY, 
A.PAYGROUP as PAYGROUP, 
A.DEPTID as DEPTID, 
E.DESCR as DEPT_DESCR, 
G.GEX_OPR_DIV as GEX_OPR_DIV, 
F.GEX_COMPANY_DIV_CD as GEX_COMPANY_DIV_CD,  
G.GEX_BUS_AREA as GEX_BUS_AREA, 
A.ACCT_CD as ACCT_CD, 
F.DEPARTMENT as DEPARTMENT, 
F.BUSINESS_UNIT as BUSINESS_UNIT, 
A.UNION_CD as UNION_CD, 
C.SEX AS SEX,  
TO_CHAR((TRUNC(MONTHS_BETWEEN(D.TERMINATION_DT,TO_DATE( TO_CHAR(C.BIRTHDATE,'YYYY-MM-DD'),'YYYY-MM-DD'))/12))) AS AGE, 
A.FULL_PART_TIME AS FULL_PART_TIME, 
A.EMPL_TYPE AS EMPL_TYPE, 
TO_CHAR(A.JOB_ENTRY_DT,'YYYY-MM-DD') AS JOB_ENTRY_DT, 
A.JOBCODE AS JOBCODE, 
A.GRADE as GRADE, 
B.DESCR as JOBCODE_DESCR, 
B.FLSA_STATUS AS FLSA_STATUS,
B.EEO1CODE as EEO1CODE,
B.MANAGER_LEVEL as MANAGER_LEVEL,
B.STD_HOURS as STD_HOURS, 
TO_CHAR(D.SERVICE_DT,'YYYY-MM-DD') as SERVICE_DT,
TO_CHAR((TRUNC(MONTHS_BETWEEN(D.TERMINATION_DT,TO_DATE( TO_CHAR(D.SERVICE_DT,'YYYY-MM-DD'),'YYYY-MM-DD'))/1))) as LOS, 
J.DESCR as ACTN_REASON_DESCR,  
TO_CHAR((TRUNC(MONTHS_BETWEEN(D.TERMINATION_DT,TO_DATE( TO_CHAR(A.JOB_ENTRY_DT,'YYYY-MM-DD'),'YYYY-MM-DD'))/1))) as TIMEINPOS, 
TO_CHAR(D.HIRE_DT,'YYYY-MM-DD') as HIRE_DT, 
TO_CHAR(D.REHIRE_DT,'YYYY-MM-DD') as REHIRE_DT,
TO_CHAR(D.TERMINATION_DT,'YYYY-MM-DD') as TERMINATION_DT, 
TO_CHAR(A.EFFDT,'YYYY-MM-DD') as EFFDT,
G.GEX_SVPVP AS GEX_SVPVP, 
G.GEX_EVP AS GEX_EVP, 
TO_CHAR(C.BIRTHDATE,'YYYY-MM-DD') AS BIRTHDATE, 
E.SETID as SETID,
J.ACTION as ACTION,
J.ACTION_REASON as ACTION_REASON
FROM PS_JOB A, PS_JOBCODE_TBL B, PS_PERSONAL_DATA C, PS_EMPLOYMENT D, PS_DEPT_TBL E, 
	PS_GEX_DEPT_TBL F, PS_GEX_EVP_TBL G, PS_ACTN_REASON_TBL J, PS_JOB I
  WHERE ( ( A.EFFDT >= TO_DATE($GEX_RC_PAY.FromDate,'DD-MON-YYYY')
     AND A.EFFDT <= TO_DATE($GEX_RC_PAY.ThruDate,'DD-MON-YYYY'))
     AND A.ACTION IN ('RET','RWP','TER','TWB','TWP')
     AND B.SETID = A.SETID_JOBCODE
     AND B.JOBCODE = A.JOBCODE
     AND B.EFFDT =
        (SELECT MAX(B_ED.EFFDT) FROM PS_JOBCODE_TBL B_ED
        WHERE B.SETID = B_ED.SETID
          AND B.JOBCODE = B_ED.JOBCODE
          AND B_ED.EFFDT <= A.EFFDT)
     AND A.EMPLID = C.EMPLID
     AND A.EMPLID = D.EMPLID
     AND A.EMPL_RCD = D.EMPL_RCD     
     AND A.PAYGROUP = G.PAYGROUP 
     AND A.ACCT_CD = G.ACCT_CD 
     AND E.SETID = A.SETID_DEPT
     AND E.DEPTID = A.DEPTID
     AND E.EFFDT =
        (SELECT MAX(E_ED.EFFDT) FROM PS_DEPT_TBL E_ED
        WHERE E.SETID = E_ED.SETID
          AND E.DEPTID = E_ED.DEPTID
          AND E_ED.EFFDT <= A.EFFDT)
     AND E.SETID = F.SETID
     AND E.DEPTID = F.DEPTID
     AND F.EFFDT =
        (SELECT MAX(F_ED.EFFDT) FROM PS_GEX_DEPT_TBL F_ED
        WHERE F.SETID = F_ED.SETID
          AND F.DEPTID = F_ED.DEPTID
          AND F_ED.EFFDT <= E.EFFDT)
     AND A.DEPTID =  G.DEPTID (+)
     AND D.TERMINATION_DT BETWEEN TO_DATE($GEX_RC_PAY.FromDate,'DD-MON-YYYY') AND TO_DATE($GEX_RC_PAY.ThruDate,'DD-MON-YYYY')
     AND ( A.COMPANY NOT BETWEEN '005' AND '999'
     AND A.COMPANY NOT IN ('KAP','VEC'))
     AND A.GEX_SEASONAL_EMP = 'N'
     AND A.JOBCODE <> '90000'
     AND J.ACTION = A.ACTION
     AND J.ACTION_REASON = A.ACTION_REASON
     AND J.EFFDT =
        (SELECT MAX(J_ED.EFFDT) FROM PS_ACTN_REASON_TBL J_ED
        WHERE J.ACTION = J_ED.ACTION
          AND J.ACTION_REASON = J_ED.ACTION_REASON
          AND J_ED.EFFDT <= SYSDATE)
     AND I.EFFDT =
        (SELECT MAX(I_ED.EFFDT) FROM PS_JOB I_ED
        WHERE I.EMPLID = I_ED.EMPLID
          AND I.EMPL_RCD = I_ED.EMPL_RCD
          AND I_ED.EFFDT < A.EFFDT)
    AND I.EFFSEQ =
        (SELECT MAX(I_ES.EFFSEQ) FROM PS_JOB I_ES
        WHERE I.EMPLID = I_ES.EMPLID
          AND I.EMPL_RCD = I_ES.EMPL_RCD
          AND I.EFFDT = I_ES.EFFDT)
     AND A.EMPLID = I.EMPLID
     AND A.EMPL_RCD = I.EMPL_RCD
     AND I.EMPL_STATUS IN ('A','L','P','S') )
 ) terms, 
     (select * from PS_GEX_APRAIS_SCOR AP where AP.SCORE_TYPE='CRV'
    AND AP.EFFDT=(SELECT MAX(AP1.EFFDT) FROM PS_GEX_APRAIS_SCOR AP1 
    WHERE AP1.EMPLID = AP.EMPLID
    AND AP1.SCORE_TYPE = 'CRV')!GEX-TLL 05/06/2008 Added 
    ) AP_TERM
where AP_TERM.emplid = terms.emplid
GROUP BY AP_TERM.CRV_RATING
END-SELECT     

move #count_CVR_C to $count_CVR_C B999,999
move #count_CVR_E to $count_CVR_E B999,999
move #count_CVR_IP to $count_CVR_IP B999,999
move #count_CVR_Intern to $count_CVR_Intern B999,999
move #count_CVR_WP to $count_CVR_WP B999,999
move #count_CVR_MV to $count_CVR_MV B999,999
move #count_CVR_MP to $count_CVR_MP B999,999
move #count_CVR_TN to $count_CVR_TN B999,999
move #count_CVR_NA to $count_CVR_NA B999,999
move #evp_total to $evp_total B999,999

End-Procedure


!***********************************************************************************
Begin-Procedure Hipot-Turnover-Terms-Population
!***********************************************************************************

show 'Hipot-Turnover-Terms-Population'

Let $write_row = 'Terminations with Change Response Ratings From: ' || $Rpt_From_Date || ' To: ' || $Rpt-Thru_Date 
do Write-Hipot-Turnover-Terms-Population

move '' to $write_row
do Write-Hipot-Turnover-Terms-Population

string 'Name' 'CVR Rating' 'Co' 'Group' 'Deptid' 'Dept Descr' 'OpDiv' 'CoDiv' 'Bus Area' 
	'Full/Part' 'Type' 'Job Entry Dt' 'Job Code' 'Grade' 'Job Title' 'Service Dt' 'LOS (Mos)' 
	'Term Reason' 'Time in Pos (Mos)' 'Hire Date' 'Rehire Dt' 'Term Date' 'Eff Date of Term Row' 
	'EVP' by $tab into $write_row
do Write-Hipot-Turnover-Terms-Population

Begin-Select
TERMS.EMPLID 
TERMS.NAME
TERM_CRV.CRV_RATING
TERMS.COMPANY
TERMS.PAYGROUP
TERMS.DEPTID
TERMS.DEPT_DESCR
TERMS.GEX_OPR_DIV
TERMS.GEX_COMPANY_DIV_CD
TERMS.GEX_BUS_AREA
TERMS.FULL_PART_TIME
TERMS.EMPL_TYPE
TERMS.JOB_ENTRY_DT
TERMS.JOBCODE
TERMS.GRADE
TERMS.JOBCODE_DESCR
TERMS.SERVICE_DT
TERMS.LOS
TERMS.ACTN_REASON_DESCR
TERMS.TIMEINPOS
TERMS.HIRE_DT
TERMS.REHIRE_DT
TERMS.TERMINATION_DT
TERMS.EFFDT
TERMS.GEX_EVP
TERMS.BIRTHDATE
TERMS.SETID
TERMS.ACTION
TERMS.ACTION_REASON
	
	let $GEX_EVP = &TERMS.GEX_EVP
	Do Get-EVP-Name

	String &TERMS.NAME &TERM_CRV.CRV_RATING &TERMS.COMPANY &TERMS.PAYGROUP 
	&TERMS.DEPTID &TERMS.DEPT_DESCR	&TERMS.GEX_OPR_DIV &TERMS.GEX_COMPANY_DIV_CD 
	&TERMS.GEX_BUS_AREA &TERMS.FULL_PART_TIME &TERMS.EMPL_TYPE &TERMS.JOB_ENTRY_DT 
	&TERMS.JOBCODE &TERMS.GRADE &TERMS.JOBCODE_DESCR &TERMS.SERVICE_DT &TERMS.LOS 
	&TERMS.ACTN_REASON_DESCR &TERMS.TIMEINPOS &TERMS.HIRE_DT &TERMS.REHIRE_DT 
	&TERMS.TERMINATION_DT &TERMS.EFFDT $EVP_NAME by $tab into $write_row
	do Write-Hipot-Turnover-Terms-Population

FROM
(SELECT DISTINCT A.EMPLID as EMPLID, 
C.NAME as NAME, 
A.COMPANY as COMPANY, 
A.PAYGROUP as PAYGROUP, 
A.DEPTID as DEPTID, 
E.DESCR as DEPT_DESCR, 
G.GEX_OPR_DIV as GEX_OPR_DIV, 
F.GEX_COMPANY_DIV_CD as GEX_COMPANY_DIV_CD,  
G.GEX_BUS_AREA as GEX_BUS_AREA, 
A.ACCT_CD as ACCT_CD, 
F.DEPARTMENT as DEPARTMENT, 
F.BUSINESS_UNIT as BUSINESS_UNIT, 
A.UNION_CD as UNION_CD, 
C.SEX AS SEX,  
TO_CHAR((TRUNC(MONTHS_BETWEEN(D.TERMINATION_DT,TO_DATE( TO_CHAR(C.BIRTHDATE,'YYYY-MM-DD'),'YYYY-MM-DD'))/12))) AS AGE, 
A.FULL_PART_TIME AS FULL_PART_TIME, 
A.EMPL_TYPE AS EMPL_TYPE, 
TO_CHAR(A.JOB_ENTRY_DT,'YYYY-MM-DD') AS JOB_ENTRY_DT, 
A.JOBCODE AS JOBCODE, 
A.GRADE as GRADE, 
B.DESCR as JOBCODE_DESCR, 
B.FLSA_STATUS AS FLSA_STATUS,
B.EEO1CODE as EEO1CODE,
B.MANAGER_LEVEL as MANAGER_LEVEL,
B.STD_HOURS as STD_HOURS, 
TO_CHAR(D.SERVICE_DT,'YYYY-MM-DD') as SERVICE_DT,
TO_CHAR((TRUNC(MONTHS_BETWEEN(D.TERMINATION_DT,TO_DATE( TO_CHAR(D.SERVICE_DT,'YYYY-MM-DD'),'YYYY-MM-DD'))/1))) as LOS, 
J.DESCR as ACTN_REASON_DESCR,  
TO_CHAR((TRUNC(MONTHS_BETWEEN(D.TERMINATION_DT,TO_DATE( TO_CHAR(A.JOB_ENTRY_DT,'YYYY-MM-DD'),'YYYY-MM-DD'))/1))) as TIMEINPOS, 
TO_CHAR(D.HIRE_DT,'YYYY-MM-DD') as HIRE_DT, 
TO_CHAR(D.REHIRE_DT,'YYYY-MM-DD') as REHIRE_DT,
TO_CHAR(D.TERMINATION_DT,'YYYY-MM-DD') as TERMINATION_DT, 
TO_CHAR(A.EFFDT,'YYYY-MM-DD') as EFFDT,
G.GEX_SVPVP AS GEX_SVPVP, 
G.GEX_EVP AS GEX_EVP, 
TO_CHAR(C.BIRTHDATE,'YYYY-MM-DD') AS BIRTHDATE, 
E.SETID as SETID,
J.ACTION as ACTION,
J.ACTION_REASON as ACTION_REASON
  FROM PS_JOB A, PS_JOBCODE_TBL B, PS_PERSONAL_DATA C, PS_EMPLOYMENT D, PS_DEPT_TBL E, 
  PS_GEX_DEPT_TBL F, PS_GEX_EVP_TBL G, PS_ACTN_REASON_TBL J, PS_JOB I
  WHERE ( ( A.EFFDT >= TO_DATE($GEX_RC_PAY.FromDate,'DD-MON-YYYY')
     AND A.EFFDT <= TO_DATE($GEX_RC_PAY.ThruDate,'DD-MON-YYYY'))
     AND A.ACTION IN ('RET','RWP','TER','TWB','TWP')
     AND B.SETID = A.SETID_JOBCODE
     AND B.JOBCODE = A.JOBCODE
     AND B.EFFDT =
        (SELECT MAX(B_ED.EFFDT) FROM PS_JOBCODE_TBL B_ED
        WHERE B.SETID = B_ED.SETID
          AND B.JOBCODE = B_ED.JOBCODE
          AND B_ED.EFFDT <= A.EFFDT)
     AND A.EMPLID = C.EMPLID
     AND A.EMPLID = D.EMPLID
     AND A.EMPL_RCD = D.EMPL_RCD
     AND A.PAYGROUP = G.PAYGROUP 
     AND A.ACCT_CD = G.ACCT_CD 
     AND E.SETID = A.SETID_DEPT
     AND E.DEPTID = A.DEPTID
     AND E.EFFDT =
        (SELECT MAX(E_ED.EFFDT) FROM PS_DEPT_TBL E_ED
        WHERE E.SETID = E_ED.SETID
          AND E.DEPTID = E_ED.DEPTID
          AND E_ED.EFFDT <= A.EFFDT)
     AND E.SETID = F.SETID
     AND E.DEPTID = F.DEPTID
     AND F.EFFDT =
        (SELECT MAX(F_ED.EFFDT) FROM PS_GEX_DEPT_TBL F_ED
        WHERE F.SETID = F_ED.SETID
          AND F.DEPTID = F_ED.DEPTID
          AND F_ED.EFFDT <= E.EFFDT)
     AND A.DEPTID =  G.DEPTID (+)
     AND D.TERMINATION_DT BETWEEN TO_DATE($GEX_RC_PAY.FromDate,'DD-MON-YYYY') AND TO_DATE($GEX_RC_PAY.ThruDate,'DD-MON-YYYY')
     AND ( A.COMPANY NOT BETWEEN '005' AND '999'
     AND A.COMPANY NOT IN ('KAP','VEC'))
     AND A.GEX_SEASONAL_EMP = 'N'
     AND A.JOBCODE <> '90000'
     AND J.ACTION = A.ACTION
     AND J.ACTION_REASON = A.ACTION_REASON
     AND J.EFFDT =
        (SELECT MAX(J_ED.EFFDT) FROM PS_ACTN_REASON_TBL J_ED
        WHERE J.ACTION = J_ED.ACTION
          AND J.ACTION_REASON = J_ED.ACTION_REASON
          AND J_ED.EFFDT <= SYSDATE)
     AND I.EFFDT =
        (SELECT MAX(I_ED.EFFDT) FROM PS_JOB I_ED
        WHERE I.EMPLID = I_ED.EMPLID
          AND I.EMPL_RCD = I_ED.EMPL_RCD
          AND I_ED.EFFDT < A.EFFDT)
    AND I.EFFSEQ =
        (SELECT MAX(I_ES.EFFSEQ) FROM PS_JOB I_ES
        WHERE I.EMPLID = I_ES.EMPLID
          AND I.EMPL_RCD = I_ES.EMPL_RCD
          AND I.EFFDT = I_ES.EFFDT)
     AND A.EMPLID = I.EMPLID
     AND A.EMPL_RCD = I.EMPL_RCD
     AND I.EMPL_STATUS IN ('A','L','P','S') )) terms, 
     (select * from PS_GEX_APRAIS_SCOR AP where AP.SCORE_TYPE='CRV'
    AND AP.EFFDT=(SELECT MAX(AP1.EFFDT) FROM PS_GEX_APRAIS_SCOR AP1 
    WHERE AP1.EMPLID = AP.EMPLID
    AND AP1.SCORE_TYPE = 'CRV') !GEX-TLL 05/06/2008 Added
    ) TERM_CRV
where TERM_CRV.emplid = terms.emplid
End-Select

End-Procedure


!***********************************************************************************
Begin-Procedure Open-File
!***********************************************************************************

Show 'Open-File'

let $currdt = '_' || $fromdate || '_' || $thrudate
show '$currdt:' $currdt

!let $output_destination = 'U:\psoft\working\vendapp\wrking\44431\output\'
!let $output_destination = 'T:\DATA\EVP\ITG-44431\'
let $output_destination = '\\corp.gianteagle.com\common\HR\Metrics\EVP\Secure\HiPots_Gold Standard\'  
!let $output_destination = '\\riva\hrdev\temp\' !GEX-TLL testing

   Let $file = 'HiPot_GS Promotion by EVP'
   Let $file = $output_destination || $file || $currdt || '.xls'
   show '$file:' $file
   Open $file
       As 1
       For-Writing
       Record=1000:Vary

   Let $file = 'HiPot_GS Promotion by EVP_CVR'
   Let $file = $output_destination || $file || $currdt || '.xls'
   show '$file:' $file
   Open $file
       As 2
       For-Writing
       Record=1000:Vary

   Let $file = 'HiPot_GS Promotion Population'
   Let $file = $output_destination || $file || $currdt || '.xls'
   show '$file:' $file
   Open $file
       As 3
       For-Writing
       Record=1000:Vary

   Let $file = 'HiPot_GS Movement by EVP'
   Let $file = $output_destination || $file || $currdt || '.xls'
   show '$file:' $file
   Open $file
       As 4
       For-Writing
       Record=1000:Vary

   Let $file = 'HiPot_GS Movement by EVP_CVR'
   Let $file = $output_destination || $file || $currdt || '.xls'
   show '$file:' $file
   Open $file
       As 5
       For-Writing
       Record=1000:Vary

   Let $file = 'HiPot_GS movement Population'
   Let $file = $output_destination || $file || $currdt || '.xls'
   show '$file:' $file
   Open $file
       As 6
       For-Writing
       Record=1000:Vary

   Let $file = 'Hipot_GS Turnover Terms Population'
   Let $file = $output_destination || $file || $currdt || '.xls'
   show '$file:' $file
   Open $file
       As 7
       For-Writing
       Record=1000:Vary
  
   Let $file = 'HiPot_GS Turnover Terminations by CVR'
   Let $file = $output_destination || $file || $currdt || '.xls'
   show '$file:' $file
   Open $file
       As 8
       For-Writing
       Record=1000:Vary

   Let $file = 'HiPot_GS Promotion by Manager level'
   Let $file = $output_destination || $file || $currdt || '.xls'
   show '$file:' $file
   Open $file
       As 9
       For-Writing
       Record=1000:Vary

End-Procedure


!***********************************************************************************
Begin-Procedure Write-Promotion-EVP
!***********************************************************************************
 
  Write 1 from $write_row Status=#filestat	

  If #filestat <> 0
     Show 'Error writing file HiPot_GS Promotion by EVP.  Program terminating.'
     Stop
  End-If

End-Procedure


!***********************************************************************************
Begin-Procedure Write-Promotion-EVP-CVR
!***********************************************************************************
  
  Write 2 from $write_row Status=#filestat	

  If #filestat <> 0
     Show 'Error writing file HiPot_GS Promotion by EVP_CVR.  Program terminating.'
     Stop
  End-If

End-Procedure


!***********************************************************************************
Begin-Procedure Write-Hipot-Promotion-Population
!***********************************************************************************
  
  Write 3 from $write_row Status=#filestat	

  If #filestat <> 0
     Show 'Error writing file HiPot_GS Promotion Population.  Program terminating.'
     Stop
  End-If

End-Procedure


!***********************************************************************************
Begin-Procedure Write-Movement-EVP
!***********************************************************************************
  
  Write 4 from $write_row Status=#filestat	

  If #filestat <> 0
     Show 'Error writing file HiPot_GS Movement by EVP.  Program terminating.'
     Stop
  End-If

End-Procedure


!***********************************************************************************
Begin-Procedure Write-Movement-EVP-CVR
!***********************************************************************************
  
  Write 5 from $write_row Status=#filestat	

  If #filestat <> 0
     Show 'Error writing file HiPot_GS Movement by EVP_CVR.  Program terminating.'
     Stop
  End-If

End-Procedure


!***********************************************************************************
Begin-Procedure Write-Hipot-Movement-Population
!***********************************************************************************
  
  Write 6 from $write_row Status=#filestat	

  If #filestat <> 0
     Show 'Error writing file HiPot_GS Movement Population.  Program terminating.'
     Stop
  End-If

End-Procedure


!***********************************************************************************
Begin-Procedure Write-Hipot-Turnover-Terms-Population
!***********************************************************************************
  
  Write 7 from $write_row Status=#filestat	

  If #filestat <> 0
     Show 'Error writing file Hipot_GS Turnover Terms Population.  Program terminating.'
     Stop
  End-If

End-Procedure


!***********************************************************************************
Begin-Procedure Write-Turnover-Terms-CVR
!***********************************************************************************
  
  Write 8 from $write_row Status=#filestat	

  If #filestat <> 0
     Show 'Error writing file HiPot_GS Turnover Terminations by CVR.  Program terminating.'
     Stop
  End-If

End-Procedure


!***********************************************************************************
Begin-Procedure Write-Promotion-Manager-Level
!***********************************************************************************
  
  Write 9 from $write_row Status=#filestat	

  If #filestat <> 0
     Show 'Error writing file HiPot_GS Promotion by Manager level.  Program terminating.'
     Stop
  End-If

End-Procedure


!***********************************************************************************
Begin-Procedure Finalization
!***********************************************************************************

Show 'Finalization'

  Close 1
  If #filestat != 0
     Show 'Error Closing HiPot_GS Promotion by EVP file. Program terminating.'
     Stop
  End-If

  Close 2
  If #filestat != 0
     Show 'Error closing HiPot_GS Promotion by EVP_CVR file. Program terminating.'
     Stop
  End-If

  Close 3
  If #filestat != 0
     Show 'Error closing HiPot_GS Promotion Population file. Program terminating.'
     Stop
  End-If

  Close 4
  If #filestat != 0
     Show 'Error closing HiPot_GS Movement by EVP file. Program terminating.'
     Stop
  End-If

  Close 5
  If #filestat != 0
     Show 'Error closing HiPot_GS Movement by EVP_CVR file. Program terminating.'
     Stop
  End-If

  Close 6
  If #filestat != 0
     Show 'Error closing HiPot_GS Movement Population file. Program terminating.'
     Stop
  End-If

  Close 7
  If #filestat != 0
     Show 'Error closing Hipot_GS Turnover Terms Population file. Program terminating.'
     Stop
  End-If

  Close 8
  If #filestat != 0
     Show 'Error closing HiPot_GS Turnover Terminations by CVR file. Program terminating.'
     Stop
  End-If

  Close 9
  If #filestat != 0
     Show 'Error closing HiPot_GS Promotion by Manager level file. Program terminating.'
     Stop
  End-If

End-Procedure

!Vendaxg added for ITG#60303 on 05/08/2009 - Begin

Begin-Procedure Get-Position-Number
!Show 'Enerting Proceudre Get-Position-Number Emplid : '$emplid_pop ' Effdt :'$Effdt ' Action : '$Action ' Action Reason : '$Action_Reason
Begin-Select 
POS.POSITION_NBR 
 
 Let $Position_Nbr = &POS.POSITION_NBR
 !    Show 'Position Number : '$Position_Nbr
FROM PS_JOB POS 
WHERE POS.EMPLID = $emplid_pop
AND POS.EFFDT = $Effdt
AND POS.ACTION = $Action
AND POS.ACTION_REASON = $Action_Reason

End-Select
End-Procedure Get-Position-Number
!Vendaxg added for ITG#60303 on 05/08/2009 - End
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'useprntr.sqc'
#include 'gexxx922.sqc'  !Get pay single row run controls  
#Include 'getposnm.sqc'   !get position title  !Vendaxg added for ITG#60303 on 05/08/2009