!***********************************************************************
! GEXPYPWT:  This daily vacation process for part-time employees will  *
!            calculate the correct amount of vacation dollars that the *
!            employee 'earned' in the last calendar year of employment *
!            or in the last 12 months of employment if the employee    *
!            completed first year of service that day.  The vacation   *
!            dollars are awarded at the time the employee meets their  *
!            service anniversary based on their date of service.       *
!                                                                      *
!            Special processing needs to occur for employees that      *
!            transfer from FT to PT. Since the employee is newly       *
!            statused as PT, the Part-Time Vacation process needs to   *
!            occur for the employee immediately to award the employee  *
!            with the correct vacation dollars.                        *
!                                                                      *
!            The vacation process will also process terminated and     *
!            retired employees that have an effective date equal to    *
!            the current date.  There are rules specific to each       *
!            union code for reporting on terminated and retired        *
!            employees.                                                *
!                                                                      *
!            This process must run daily to handle PT status           *
!            and terminated/retired employees for uninon code YRK      *
!            This is a clone of GEXPYPTW                               *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *        
!***********************************************************************
!GEXHR_848_E110880  11/18/2011 Kundan kumar Yeedibilli Initial Creation*
!VENDAXG   AXG      10/18/2012 modified to pick vacations from Setup   * 
! GEX_SEC_REENG 2015-04-29 Vahini Katta                                *
! Changes related to gex_emplid_mapp/7 digit emplid                    *
!************************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup32.sqc'

!***********************************************************************
begin-setup
!***********************************************************************

  declare-report Vacation-Payout-Report
Printer-Type=HPLASERJET
    layout=DEFAULT
  end-declare

  declare-report Report-log
Printer-Type=HPLASERJET
    layout=DEFAULT
  end-declare
   
  declare-report Balance-Report
Printer-Type=HPLASERJET
    layout=DEFAULT
  end-declare

end-setup


!***********************************************************************
begin-heading 6 for-reports=(report-log)
!***********************************************************************

  LET $REPORTID = 'PYPWTLOG'
  move 'Part Time Vacation Calculation - Report Log' to $ReportTitle

 #Include 'stdhdg01.sqc'

  position          (+2)
  print 'Trans#'    (,1)
  print 'Emplid'    (,18)
  print 'Message'   (,50)

  print '-'         (+1,1,174) fill
end-heading


!***********************************************************************
begin-heading 6 for-reports=(Vacation-Payout-Report)
!***********************************************************************

  LET $REPORTID = 'PYPWTPAY'
  move 'Vacation Payout Report' to $ReportTitle

 #Include 'stdhdg01.sqc'

  position                  (+2)
  print 'EmplID'            (,1)
  print 'Name'              (,20)
  print 'Action'            (,50)
  print 'Effective Date'    (,65)
  print 'Vacation Balance'  (,80)

  print '-'                 (+1,1,174) fill
end-heading


!***********************************************************************
begin-heading 6 for-reports=(Balance-Report)
!***********************************************************************

  LET $REPORTID = 'PYPWTBAL'
  move 'Payout Report' to $ReportTitle

  #Include 'stdhdg01.sqc'
  do Get-Company-Data
  do Get-Department-Name

  print 'Company'          (3,1)
  print $prev_cmpy         (0,13)
  print $CompanyName       (0,17)
  
  print 'DeptID:'           (4,1)
  print $prev_deptid        (,13)
  print $DeptName           (,+1)

  position                  (+2)
  print 'EmplID'            (,1)
  print 'Name'              (,20)
  print 'Action'            (,50)
  print 'Effective Date'    (,65)
  print 'Earnings'          (,85)
  print 'Balance Due'       (,100)

  print '-'                 (+1,1,174) fill
end-heading


!***********************************************************************
begin-report
!***********************************************************************

  use-report Report-log

  show 'In begin-report .. doing inits'
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do stdapi-init

  move 'GEXPYPWT' to $ReportID
  move 'Part-Time Employee Vacation Calculation - Daily' to $ReportTitle
 
  Let $GEXXX970_Deptid_Alias  = 'A.Deptid'
  Let $GEXXX970_Jobcode_Alias = 'A.Jobcode'
 
 
 ! used only when run through SQRW. It will read the run control tables.
  if isnull($prcs_process_instance)
	let $Prcs_OprID = 'ISDVDXS'
	let $Prcs_Run_Cntl_ID = 'gexpypwt'
  end-if

  show 'Selecting runtime params'

    Do GEXXX922-Select-Parameters
    Do GEXXX970-Select-Deptid-Jobcode-Parameters
    Let $AsOfDate = $GEX_RC_PAY.ASOFDATE
    If Rtrim($AsOfDate,' ') = ''
      Let $AsOfDate = $AsOfToday
    End-If

!   show '$AsOfDate : ' $AsOfDate 
   Let $GEXXX913_UNION_CD_Alias = 'A.UNION_CD'
   Do GEXXX913-Select-UNION-CD-Parameters

  date-time () HH:MI:SS &timeBegan
  date-time () MM/DD/YYYY &dateBegan
  show 'Report Began at ' &timeBegan ' on ' &dateBegan
  show ' '

  Do Convert-To-DTU-Date($AsOfDate,$AsofDate_dtu)
  Do dtu-add-days($AsOfDate_dtu, 1, $AsOfDatePlus1_dtu)
  Do dtu-add-days($AsOfDate_dtu,-1, $AsOfDateMinus1_dtu)
  Do Convert-From-DTU-Date($AsOfDatePlus1_dtu,$AsOfDatePlus1)
  Do Convert-From-DTU-Date($AsOfDateMinus1_dtu,$AsOfDateMinus1)

  show 'Doing GEXREGTP_init_strings'
  do GEXREGTP_init_strings

  show 'Doing get-date-codes'
  do get-date-codes

  do Convert-To-DTU-Date($AsOfDate, $AsOfDate_dtu)

  move $AsOfYYYY to #AsOfYYYY

  let #prev_year = #AsOfYYYY - 1

  let $prev_year = to_char(floor(#prev_year))

  let $PrevYearEnd = $prev_year ||'1231'
  let $Prev_YearEndDt = '31-DEC-' || $PREV_YEAR		
  !unstring $prev_year by '.' into $prev_year $prev_year_dec
  
  show 'Doing GEXREGTP_init_strings'
  do GEXREGTP_init_strings

  move 'N' to $found
  let #inputtran = 0

  show 'Doing select-employees'
  do select-employees

  show 'Doing select-retirees-terms'
  do select-retirees-terms
  
Report-Exit:

  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded

  show ' '
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded
  show ' '

  display #InputTran 999,999 noline
  display ' Transactions Processed'

  Show 'End of report .. commiting'
  do Commit-Transaction
  ! do Rollback-Transaction  ! Uncomment this and comment the commit line above
			     ! if you want to run thsi sqr without commiting any data
  do stdapi-term
end-report


!***********************************************************************
Begin-Procedure Select-Employees
!***********************************************************************

#debug9 Show 'Select-Employees'
  move 'N' to $found
  move 'N' to $Empl_found
  move 'N' to $Bal_found	 

  let $var = 'AND ( (A.REG_TEMP '||$GEXREGTP_part_time_code_string || ') OR
                    ( A.DEPTID IN (''0062'',''0066'',''0042'') ) )'
  show 'Exclude Deptid, Jobcode ' $GEXXX970_EXCLUDE_DEPTID_JOBCODE_CRITERIA   
  show 'Union_cd ' $GEXXX913_INCLUDE_UNION_CD_CRITERIA                        

begin-select ON-ERROR=SQL-Error-Found

A.COMPANY
A.DEPTID
A.PAYGROUP
A.EMPLID
A.EMPL_RCD
A.REG_TEMP
A.HOURLY_RT
A.UNION_CD  		
A.ACTION	 	
A.EFFDT		 	
A.JOBCODE		
B.GEX_VCN_SENIOR_DT
!B.REHIRE_DT		
B.SERVICE_DT
PD.NAME			

  Let $company = &a.company	
  Let $deptid  = &a.deptid	
  Let $union_cd= &a.union_cd    

  move &A.EMPLID to $emplid
  move 'Y' to $Empl_found
  move 'N' to $skip_record

  #debug8 display '-------------------------------------------'
  #debug8 display 'emplid ' noline
  #debug8 display $emplid

  show 'Emplid ================================================= ' $emplid
  show ' in main process '  &B.SERVICE_DT
  show 'Doing determine-service-dt' 
  
  
   let $GEXJOB_REH_EMPLID = $emplid
   let #GEXJOB_REH_EMPLRCD = &A.EMPL_RCD
   let $GEXJOB_REH_ASOFDATE = $AsOfDate
   do Get-Job-Rehire-Dt
   #debug8 show 'emplid:' $emplid ',$GEXJOB_REH_REHIRE_DT ' $GEXJOB_REH_REHIRE_DT
    
  
  
  do determine-service-dt

  #debug8 display 'Service_Anniversary Flag before check trans ft pt ' noline
  #debug8 display $service_anniversary

  

 #debug8 show '$deptid : ' $deptid

  Evaluate $deptid
     When = '0062'          
     When = '0066'
     When = '0042'
          let $transfer = 'X'
          break
      When-Other
	   show 'Doing check-transfer-FT-to-PT'
          do check-transfer-FT-to-PT
  End-Evaluate

  #debug8 display 'Service_Anniversary Flag after check trans ft pt ' noline
  #debug8 display $service_anniversary

  let #Prior_Vac_Amt = 0	

  #debug8 display 'Transfer Flag: ' noline 
  #debug8 display $transfer

  #debug8 display 'First Year Service Flag: ' noline
  #debug8 display $first_year_service

  #debug8 display 'Service_Anniversary Flag: ' noline
  #debug8 display $service_anniversary
  
  if $transfer = 'Y'
    if $first_year_service = 'Y'
       #debug8 show $transfer_dt_cmp ' ' $PrevYearEnd 
       if $transfer_dt_cmp <= $PrevYearEnd 

          let $pay_end_criteria  = 'AND EE.PAY_END_DT >= ' ||
                            '''' ||
                            $service_dt ||
                            '''' ||
                            ' AND EE.PAY_END_DT <= ' ||
                            '''' ||
                            $transfer_dt ||
                            '''' 
	  #debug8 show '$pay_end_criteria : ' $pay_end_criteria  
	  show 'Doing get-FT-vac-amt-new'
	  do get-FT-vac-amt-new
       else 
           let $pay_end_criteria  = 'AND EE.PAY_END_DT > ' ||
                            '''' ||
                            $Prev_YearEndDt ||
                            '''' ||
                            ' AND EE.PAY_END_DT <= ' ||
                            '''' ||
                            $transfer_dt ||
                            '''' 
	  #debug8 show '$pay_end_criteria : ' $pay_end_criteria  
	  show 'Doing get-FT-vac-amt-new'
          do get-FT-vac-amt-new
       end-if
    else
       if #dtu_years < 1
	  #debug8 show '#dtu_years ' #dtu_years 
          move 'Y' to $skip_record
	  #debug8 show '$skip_record : ' $skip_record
       else
          let $balance_year_criteria = 'AND    C2.BALANCE_YEAR      = ' || $AsOfYYYY
	  #debug8 show '$balance_year_criteria : ' $balance_year_criteria 
	  show 'Doing get-FT-vac-amt'
          do get-FT-vac-amt
       end-if
    end-if
  end-if

  let #max_eligible_weeks = 0	
  let $curr_addl_found = 'N'	
  let #curr_wks_check = 0	

  #debug8 show '$transfer flag        b4 calc vacn stmt ' $transfer 
  #debug8 show '$service_anniversary  b4 calc vacn stmt ' $service_anniversary

  #debug8 show '$service_anniversary ' $service_anniversary
  #debug8 show '$transfer ' $transfer
  #debug8 show '$skip_record ' $skip_record 

  if ($service_anniversary = 'Y' or $transfer = 'Y' or $transfer = 'X') and $skip_record = 'N'
    show 'Doing calc-vacation-amount'    
    do calc-vacation-amount
    #debug8 show '$transfer flag        b4 select-curr-addl-pay ' $transfer 
    #debug8 show '#max_eligible_weeks   b4 select-curr-addl-pay ' #max_eligible_weeks
	#debug8 show '$transfer ' $transfer
	#debug8 show '#max_eligible_weeks ' #max_eligible_weeks 

    if ($transfer <> 'Y' and #max_eligible_weeks <> 0) !do this for svc or x stores
  #debug8 show 'Doing select-curr-addl-pay'
       do select-curr-addl-pay
	#debug8 show '$curr_addl_found ' $curr_addl_found 
         if $curr_addl_found = 'Y'
	    show '$union_cd ' $union_cd	
	   !GEXPY_848_E136736_01 2012-10-18 VENDAXG START
	   ! evaluate $union_cd
	   !  when = 'YRK'
	   Do Find-UnionCd-In-RunCntl
	   If $Union_Cd_Found = 'Y'
	   !GEXPY_848_E136736_01 2012-10-18 VENDAXG END
	    #debug8 show 'first_year_service' $first_year_service
	    if $first_year_service='Y' and  $service_anniversary='Y'
	    
	       move #max_eligible_weeks to #eligible_weeks
	     else
               if #max_eligible_weeks <= #curr_wks_check
                  move 0 to #eligible_weeks
                  
               else
                  let #eligible_weeks = #max_eligible_weeks - #curr_wks_check
               end-if
             end-if 
	     ! show '#eligible_weeks ' #eligible_weeks 
	   !GEXPY_848_E136736_01 2012-10-18 VENDAXG START
	   ! when-other
    	     
	   ! end-evaluate
	   End-if
	   !GEXPY_848_E136736_01 2012-10-18 VENDAXG END
	    #debug8 display 'eligible_weeks after new : ' noline
            #debug8 display #eligible_weeks 
         end-if
    end-if

!    show '$skip_record ' $skip_record 
    if $skip_record = 'N'

      let #year_vac_amt = #week_vac_amt * #eligible_weeks
      multiply 1 times #year_vac_amt round=2
	show '#year_vac_amt ' #year_vac_amt 
      if #year_vac_amt <= 0
        move 'Y' to $skip_record

      end-if

      if $skip_record = 'N'
        add 1 to #inputtran
        let #year_vac_Amt = #year_vac_Amt - #Prior_Vac_Amt	
	show '#year_vac_Amt ' #year_vac_Amt 
        let #hrs_worked = 0
	show '$first_year_service ' $first_year_service 
	
        if $first_year_service = 'Y'
		#debug8 show '$transfer ' $transfer 
           if $transfer = 'Y'
		#debug8 show '$transfer_dt_cmp ' $transfer_dt_cmp 
		#debug8 show '$PrevYearEnd ' $PrevYearEnd
              if $transfer_dt_cmp <= $PrevYearEnd 

                let $pay_end_criteria  = 'AND CC.PAY_END_DT >= ' ||
                          '''' ||
                          $service_dt ||
                          '''' ||
                          ' AND CC.PAY_END_DT <= ' ||
                          '''' ||
                          $max_pay_end_Dt ||
                         ''''
		#debug8 show '$pay_end_criteria  ' $pay_end_criteria  
		show 'Doing Hours-Worked-New  '
                do Hours-Worked-New   !Use PS_PAY_EARNINGS rather than PS_EARNINGS_BAL
              else !use prior year
                let $balance_year_criteria = 'AND    J.BALANCE_YEAR      = ' || $prev_year
		#debug8 show '$balance_year_criteria ' $balance_year_criteria 
		show 'Doing hours-worked'
                do hours-worked  
              end-if
           else !transfer = No --- go ahead and establish criteria
                let $pay_end_criteria  = 'AND CC.PAY_END_DT >= ' ||
                          '''' ||
                          $service_dt ||
                          '''' ||
                          ' AND CC.PAY_END_DT <= ' ||
                          '''' ||
                          $max_pay_end_Dt ||
                         ''''
		#debug8 show '$pay_end_criteria ' $pay_end_criteria
		show 'Doing Hours-Worked-New'
                do Hours-Worked-New   !Use PS_PAY_EARNINGS rather than PS_EARNINGS_BAL
           end-if 
        else !first_year_service = 'N'
           let $balance_year_criteria = 'AND    J.BALANCE_YEAR      = ' || $prev_year
	   #debug8 show '$balance_year_criteria ' $balance_year_criteria 
	   show 'Doing hours-worked'
           do hours-worked  
        end-if
	show '#hrs_worked ' #hrs_worked 
        let #avg_weekly_hrs_worked = #hrs_worked / 52
	show '#avg_weekly_hrs_worked ' #avg_weekly_hrs_worked
        If #avg_weekly_hrs_worked = 0
          let #vac_hourly_rt = 0
        Else
          let #vac_hourly_rt = #week_vac_amt/#avg_weekly_hrs_worked
        End-If
	
	show '#week_vac_amt ' #week_vac_amt
	show '#vac_hourly_rt ' #vac_hourly_rt 

	show 'Doing check-existing-vac-erncd'
        do check-existing-vac-erncd		

	show 'Doing select-existing-addl-pay'
        do select-existing-addl-pay

      
 #debug8 show '$existing_addl_pay ' $existing_addl_pay 
        if $existing_addl_pay = 'N'
           let #GOAL_BAL = 0
        end-if
      
	show 'Doing Insert-Addl-Pay-Data'
        do Insert-Addl-Pay-Data
		#debug8 show '#week_vac_amt ' #week_vac_amt 
		#debug8 show '#year_vac_amt ' #year_vac_amt
		#debug8 show '$transfer ' $transfer
           if (#week_vac_amt > #year_vac_amt AND $transfer = 'Y')
              move 'Y' to $Bal_found
	      #debug8 show '&A.DEPTID ' &A.DEPTID
	      #debug8 show '$prev_deptid ' $prev_deptid
              if rtrim(&A.DEPTID,' ') <> rtrim($prev_deptid,' ')
                 and rtrim($prev_deptid,' ') <> ''
                 let $dept_changed='Y'
              end-if  
	 #debug8 show 'Doing Print-Balance-Report'
              do Print-Balance-Report
              move &A.DEPTID to $prev_deptid
              move &A.Company to $prev_cmpy
           end-if
    end-if
  end-if
  end-if

FROM  PS_JOB A,
      PS_EMPLOYMENT B, 
      PS_PERSONAL_DATA PD	

WHERE  A.EMPLID           = B.EMPLID
AND    A.EMPL_RCD        = B.EMPL_RCD  
AND    B.EMPLID           = PD.EMPLID
AND [$GEXXX913_INCLUDE_UNION_CD_CRITERIA]	
AND    A.EMPL_STATUS NOT IN ('T','R','U','Q')
AND    A.EFFDT            =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID     = A.EMPLID
       AND    EMPL_RCD  = A.EMPL_RCD
       AND    EFFDT     <= $AsOfDate)
AND    A.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB 
       WHERE  EMPLID      = A.EMPLID
       AND    EMPL_RCD   = A.EMPL_RCD
       AND    EFFDT       = A.EFFDT)
[$var] 
    AND [$GEXXX970_EXCLUDE_DEPTID_JOBCODE_CRITERIA] 	
ORDER BY A.COMPANY, A.DEPTID, A.EMPLID	
end-select

  if $Empl_found = 'N'
    use-report report-log
    Print 'NO DATA SELECTED FOR THIS REPORT RUN'	(25,) Center
  end-if
  
  if $Bal_found = 'N'
    use-report Balance-Report
    Print 'NO DATA SELECTED FOR BALANCE DUE REPORT'	(25,) Center
    use-report report-log
  end-if

end-procedure


!***********************************************************************
!This procedure selects employees, who are retired or terminated 
!during the current pay period and belongs to union codes G01, or G02
!or G04.
!***********************************************************************
Begin-Procedure Select-Retirees-Terms
!***********************************************************************

#debug9 Show 'Select-Retirees-Terms'
  move 'N' to $R_Empl_found
  let $var = 'AND ( (A3.REG_TEMP '||$GEXREGTP_part_time_code_string || ') OR ( A3.DEPTID IN (''0062'',''0066'') ) )'
   show 'Select-Retirees-Terms $var ' $var
  
   Let $GEXXX913_UNION_CD_Alias = 'A3.UNION_CD'
   Do GEXXX913-Select-UNION-CD-Parameters
   show 'Union_cd ' $GEXXX913_INCLUDE_UNION_CD_CRITERIA

begin-select ON-ERROR=SQL-Error-Found
A3.EMPLID
A3.EMPL_RCD
A3.REG_TEMP
A3.HOURLY_RT
to_char(A3.EFFDT,'MM/DD/YYYY') &effdt
A3.EFFDT 
A3.ACTION
A3.EMPL_STATUS
A3.UNION_CD
P3.NAME

  move &A3.EMPLID to $emplid

  show 'Doing check-unused-vacation'
  do check-unused-vacation

  if #vac_bal > 0
    move 'Y' to $R_Empl_found
	show 'Doing print-payout-report'
    do print-payout-report
  end-if

FROM   PS_JOB        A3,
      PS_PERSONAL_DATA P3

WHERE A3.EMPLID         = P3.EMPLID 
AND [$GEXXX913_INCLUDE_UNION_CD_CRITERIA]		
AND    A3.EMPL_STATUS   IN ('R','T','U','Q')
AND    A3.EFFDT          = $AsOfDate
AND    A3.EFFSEQ         =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB 
       WHERE  EMPLID     = A3.EMPLID
       AND    EMPL_RCD  = A3.EMPL_RCD
       AND    EFFDT      = A3.EFFDT)
     [$var]
      And   A3.deptid||A3.JOBCODE not in 
              (select distinct a.deptid||a.jobcode
               from ps_gex_rc_dptjc a
               where a.OPRID                 = [$OprID]
                and  a.RUN_CNTL_ID           = [$Run_Cntl_ID])
ORDER BY A3.EMPLID
end-select
  #debug8 show '$R_Empl_found ' $R_Empl_found 
  if $R_Empl_found = 'N'
    show 'No Retired/Terminated Employees found to calculate part time vacation amounts'
    use-report Vacation-Payout-Report
    Print 'NO DATA SELECTED FOR THIS REPORT RUN'	(25,) Center
    use-report report-log
  end-if
end-procedure


!***********************************************************************
!This procedure finds out the appropriate service date and finds out
!if the employee has met his/her service anniversary during the current
!pay period.
!***********************************************************************
begin-procedure determine-service-dt
!***********************************************************************

#debug9 Show '-- In Determine-Service-Dt Step --'
  move 'N' to $service_anniversary
 
  #debug8 show 'In determine-service-dt'
  show '&B.GEX_VCN_SENIOR_DT ' &B.GEX_VCN_SENIOR_DT

  if RTRIM(&B.GEX_VCN_SENIOR_DT,' ') <> ''
    move &B.GEX_VCN_SENIOR_DT to $service_dt
  else
      
	show 'Rehire Date : ' $GEXJOB_REH_REHIRE_DT   
    if RTRIM($GEXJOB_REH_REHIRE_DT,' ')	<> ''		
     
 #debug8 show 'Doing Select-REI-date'
      do Select-REI-date			
      if $REI_date_found = 'Y'			
    #debug8 show '  &B.SERVICE_DT  ' &B.SERVICE_DT
         move &B.SERVICE_DT to $service_dt	
      else	
   #debug8 show 'Rehire Date : ' $GEXJOB_REH_REHIRE_DT	
         move $GEXJOB_REH_REHIRE_DT to $service_dt				
      end-if					
    else
    #debug8 show ' in else $service_dt ' &B.SERVICE_DT
      move &B.SERVICE_DT to $service_dt
    end-if
  end-if
  show '$service_dt '  $service_dt
  Let $Service_Cmp_Dt = strtodate($service_dt,'DD-MON-YYYY')	
  #debug8 show '$Service_Cmp_Dt: '$Service_Cmp_Dt	
  do Convert-To-DTU-Date($service_dt, $service_dt_dtu)
  #debug8 show ' $service_dt_dtu  ' $service_dt_dtu           ' $AsOfDate_dtu  ' $AsOfDate_dtu	
  do dtu-diff-years($service_dt_dtu,$AsOfDate_dtu,#dtu_years)
  do dtu-diff-years($service_dt_dtu,$AsOfDateMinus1_dtu,#dtu_yearsMinus1)

  show '#dtu_years ' #dtu_years
 ! show '#dtu_yearsMinus1 ' #dtu_yearsMinus1 
  
  if #dtu_years <> #dtu_yearsMinus1
    move 'Y' to $service_anniversary
    if #dtu_years = 1
      move 'Y' to $first_year_service
    else
      move 'N' to $first_year_service
    end-if
	#debug8 show '$first_year_service ' $first_year_service
  else
     if #dtu_years = 1
       move 'Y' to $first_year_service
     else
       move 'N' to $first_year_service 
    end-if
	show '$first_year_service ' $first_year_service
	show '$service_anniversary ' $service_anniversary
  end-if

  if $first_year_service = 'Y'
  let $service_dt_plus_one = dateadd(strtodate($service_dt),'Year',1)
  #debug8 show '$service_dt_plus_one ' $service_dt_plus_one 
  show 'Doing find-max-pay-end'
  do find-max-pay-end
  end-if

end-procedure
!***********************************************************************
Begin-Procedure find-max-pay-end
!***********************************************************************

move 'N' to $max_found

begin-select loops = 1 
PAY.PAY_END_DT

  move 'Y' to $max_found
  move &PAY.PAY_END_DT to $max_pay_end_Dt
  #debug8 show '$max_pay_end_Dt ' $max_pay_end_Dt

FROM PS_PAY_CALENDAR PAY
WHERE PAY.PAY_END_DT = (SELECT DISTINCT(min(PAY_END_DT))
   		      FROM PS_PAY_CALENDAR
		     WHERE PAY_END_DT >= $service_dt_plus_one
                     AND PAY_SHEETS_RUN = 'Y')
end-select

if $max_found = 'N'
   display 'No Pay Cycle as of:' noline
   display $service_dt_plus_one
   move $AsOfToday to $max_pay_end_Dt
   display 'Using today for max pay end dt for ' noline
   display $emplid
end-if
end-procedure


!***********************************************************************
!This procedure selects an REHIRE row with REI reason
!***********************************************************************
begin-procedure select-REI-date
!***********************************************************************

#debug9 Show 'select-REI-date'
  move 'N' to $REI_date_found
Begin-Select on-error=sql-error-found
REI.EFFDT

  move 'Y' to $REI_date_found
  #debug8 show '$REI_date_found ' $REI_date_found

FROM   PS_JOB REI
WHERE  REI.EMPLID           = &A.EMPLID
AND    REI.EMPL_RCD        = &A.EMPL_RCD
AND    REI.EFFDT            =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID      = REI.EMPLID
       AND    EMPL_RCD   = REI.EMPL_RCD
       AND    ACTION_REASON = 'REI'
       AND    EFFDT      <= $AsOfDate)
AND    REI.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID      = REI.EMPLID
       AND    EMPL_RCD   = REI.EMPL_RCD
       AND    EFFDT       = REI.EFFDT)
end-select
end-procedure   


!***********************************************************************
!This procedure checks if the current employee being processed, is
!transferred from FT to PT during the current pay period
!***********************************************************************
Begin-Procedure Check-Transfer-FT-to-PT
!***********************************************************************

#debug9 Show 'Check-Transfer-FT-to-PT'
  move 'N' to $Transfer
  let $var1 = 'AND REG_TEMP '||$GEXREGTP_full_time_code_string
  let $var2 = 'AND REG_TEMP '||$GEXREGTP_part_time_code_string
  let $var3 = 'AND A1.REG_TEMP '||$GEXREGTP_part_time_code_string

!  show '$var1 ' $var1
!  show '$var2 ' $var2
!  show '$var3 ' $var3
!  show '$AsOfDateMinus1 ' $AsOfDateMinus1
!  show '$asofdate ' $asofdate

begin-select ON-ERROR=SQL-Error-Found

'A1'
a1.effdt  &a1.effdt
  Do format-datetime (&a1.effdt,$transfer_dt_cmp,{DEFCMP},'','')  

  let $transfer_dt = &a1.effdt

  move 'Y' to $Transfer
  
FROM   PS_JOB A1
WHERE  A1.EMPLID        = &A.EMPLID
AND    A1.EMPL_RCD     = &A.EMPL_RCD
AND  A1.EFFDT            =
      (SELECT Min(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID     = A1.EMPLID
       AND    EMPL_RCD  = A1.EMPL_RCD
       [$var2]
       AND    EFFDT     >=
                         (Select Max(effdt)
                          From   ps_job
                          Where  emplid     = a1.emplid
                          And    empl_rcd  = a1.empl_rcd
                          And    effdt     <= $asofdate
                          [$var1]) )
 AND    A1.EFFSEQ           =
      (SELECT Min(EFFSEQ)		
       FROM   PS_JOB 
       WHERE  EMPLID      = A1.EMPLID
       AND    EMPL_RCD   = A1.EMPL_RCD
       AND    EFFDT       = A1.EFFDT)
[$var3]
AND    A1.ACTION_DT     = $AsOfDateMinus1
end-select

end-procedure


!***********************************************************************
begin-procedure Get-FT-Vac-Amt-New
!***********************************************************************

#debug9 Show 'get-FT-vac-amt-new'
#debug8 Show '$pay_end_criteria used in get-FT-vac-amt-new ' $pay_end_criteria

 show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD ' ' &A.COMPANY

begin-select on-error=sql-error-found
FF.OTH_EARNS &OTH_EARNS

  add &OTH_EARNS to #Prior_Vac_Amt	

FROM  PS_PAY_EARNINGS EE, PS_PAY_OTH_EARNS FF
WHERE    EE.EMPLID	= &A.EMPLID
     and EE.EMPL_RCD    = &A.EMPL_RCD	
     AND EE.COMPANY     = &A.COMPANY
     AND EE.COMPANY 	= FF.COMPANY
     AND EE.PAYGROUP 	= FF.PAYGROUP
     AND EE.PAY_END_DT 	= FF.PAY_END_DT
     AND EE.OFF_CYCLE 	= FF.OFF_CYCLE
     AND EE.PAGE_NUM 	= FF.PAGE_NUM
     AND EE.LINE_NUM 	= FF.LINE_NUM
     AND EE.ADDL_NBR 	= FF.ADDL_NBR
     AND FF.ERNCD 	= '513'		!FT Vacation
     [$pay_end_criteria]

end-select
end-procedure

!***********************************************************************
begin-procedure get-FT-vac-amt
!***********************************************************************

#debug9 Show 'get-FT-vac-amt'

  show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD ' ' &A.COMPANY
  #debug8 show '$balance_year_criteria ' $balance_year_criteria

begin-select on-error=sql-error-found
C2.GRS_YTD &GRS_YTD

  add &GRS_YTD to #Prior_Vac_Amt	

FROM   PS_EARNINGS_BAL C2
WHERE  C2.EMPLID              = &A.EMPLID
AND    C2.EMPL_RCD            = &A.EMPL_RCD	
AND    C2.COMPANY             = &A.COMPANY
AND    C2.EMPL_RCD            = &A.EMPL_RCD
AND    C2.BALANCE_ID          = 'CY'
[$balance_year_criteria]
AND    C2.BALANCE_PERIOD      =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID          = C2.EMPLID
       AND    EMPL_RCD        = C2.EMPL_RCD	
       AND    COMPANY         = C2.COMPANY
       AND    BALANCE_ID      = C2.BALANCE_ID
       AND    BALANCE_YEAR    = C2.BALANCE_YEAR
       AND    SPCL_BALANCE    = C2.SPCL_BALANCE
       AND    ERNCD           = C2.ERNCD)
AND    C2.SPCL_BALANCE        = 'N'
AND    C2.ERNCD               = '513'    !FT Vacation
end-select
end-procedure


!***********************************************************************
begin-procedure calc-vacation-amount
!***********************************************************************

#debug9 Show '-- In Calc-Vacation-Amount Step --'

  let #total_gross = 0
  Let $Mstr_Cntrct_Nrml = 'N'		
  
  if $first_year_service = 'Y'
     if $transfer = 'Y' 
        if $transfer_dt_cmp <= $PrevYearEnd 
		#debug8 show '$first_year_service = Y $transfer = Y  $transfer_dt_cmp <= $PrevYearEnd'

	   let $pay_end_criteria  = 'AND AA.PAY_END_DT >= ' ||
                             '''' ||
                             $service_dt ||
                             '''' ||
                             ' AND AA.PAY_END_DT <= ' ||
                             '''' ||
                             $Prev_YearEndDt ||
                             ''''
		#debug8 show '$pay_end_criteria ' $pay_end_criteria
		show 'Doing Get-Total-Gross-New'
           do Get-Total-Gross-New   !Use Pay_Earnings rather than Earnings_Bal
        else ! user prior yr & ytd up to anniversay date.
           let $pay_end_criteria  = 'AND AA.PAY_END_DT >= ' ||
                             '''' ||
                             $service_dt ||
                             '''' ||
                             ' AND AA.PAY_END_DT <= ' ||
                             '''' ||
                             $max_pay_end_Dt ||
                             ''''
		#debug8 show '$first_year_service = Y $transfer = Y  $transfer_dt_cmp > $PrevYearEnd'
		#debug8 show '$pay_end_criteria ' $pay_end_criteria
		show 'Doing Get-Total-Gross-New'
           do Get-Total-Gross-New   !Use Pay_Earnings rather than Earnings_Bal
        end-if
     else  !transfer = NO use new criteria
        let $pay_end_criteria  = 'AND AA.PAY_END_DT >= ' ||
                          '''' ||
                          $service_dt ||
                          '''' ||
                          ' AND AA.PAY_END_DT <= ' ||
                          '''' ||
                          $max_pay_end_Dt ||
                          ''''

	#debug8 show '$first_year_service = Y $transfer = N'
		#debug8 show '$pay_end_criteria ' $pay_end_criteria 
		show 'Doing Get-Total-Gross-New'

        do Get-Total-Gross-New   !Use Pay_Earnings rather than Earnings_Bal
     end-if
  else !1st year svc = No
     let $balance_year_criteria = 'AND    F.BALANCE_YEAR      = ' || $prev_year
	#debug8 show '$first_year_service = N'
	#debug8 show '$balance_year_criteria ' $balance_year_criteria 
	show 'Doing get-total-gross'
     do get-total-gross   
  end-if

  let #week_vac_amt = (#total_gross * 0.02)

  show '#week_vac_amt ' #week_vac_amt 
!Whenever employee meets the milestone anniversary, one more week 
!worth of vacation will be allowed.
 
  #debug8 show '$transfer flag b4 eval stmt ' $transfer 
  #debug8 show '#dtu_years     b4 eval stmt ' #dtu_years
  #debug8 show '$union_cd      b4 eval stmt ' $union_cd 

  #debug8 show '$transfer ' $transfer
  #debug8 show '$union_cd ' $union_cd
  #debug8 show '#dtu_years ' #dtu_years

  if ($transfer = 'N' or $transfer = 'X') !Must be a Service Ann or Transfer X
  !Evaluates are different when dealing with service milestones
  !GEXPY_848_E136736_01 2012-10-18 VENDAXG START
    Do Find-UnionCd-In-RunCntl
    !Evaluate $union_cd 
    !   When = 'YRK'
    !    evaluate #dtu_years 
    !        when = 12
    !        move 4 to #eligible_weeks 
    !        move 4 to #max_eligible_weeks
    !        break
    !        when = 7
    !        move 3 to #eligible_weeks
    !        move 3 to #max_eligible_weeks
    !        break
    !        when = 2
    !        move 2 to #eligible_weeks
    !        move 2 to #max_eligible_weeks
    !        break
    !        when = 1
    !        move 1 to #eligible_weeks
    !        move 1 to #max_eligible_weeks
    !        break
    !        when-other
    !        move 0 to #eligible_weeks 
    !        break 
    !        end-evaluate
    !     
    !   break  	
    ! end-evaluate
     
    If $Union_Cd_Found = 'Y'
    	Do Get-Eligible-Weeks
    End-if	
   !GEXPY_848_E136736_01 2012-10-18 VENDAXG END 
  end-if
  show '#eligible_weeks ' #eligible_weeks
  show '#max_eligible_weeks ' #max_eligible_weeks

end-procedure   

!GEXPY_848_E136736_01 2012-10-18 VENDAXG START
!***********************************************************************
Begin-Procedure Find-UnionCd-In-RunCntl
!***********************************************************************
Let $Union_Cd_Found = 'N'

Begin-Select
RC.UNION_CD

	Let $Union_Cd_Found = 'Y'
	Show 'Union Code FOund in Run Control: '&RC.UNION_CD
	
FROM PS_GEX_RC_UNION_CD RC
WHERE RC.OPRID =	$Prcs_OprID
AND RC.RUN_CNTL_ID =	$Prcs_Run_Cntl_ID
AND RC.UNION_CD = 	$union_cd
End-Select

!***********************************************************************
End-Procedure Find-UnionCd-In-RunCntl   
!***********************************************************************

!***********************************************************************
Begin-Procedure Get-Eligible-Weeks
!***********************************************************************
Let #eligible_weeks = 0
Let #max_eligible_weeks = 0
Begin-select
ELIG.HOURS_EARNED
	
	Let #eligible_weeks = &ELIG.HOURS_EARNED
	Let #max_eligible_weeks = &ELIG.HOURS_EARNED
	Show 'Eligible weeks found for Union code: '$union_cd ' and Year :' #dtu_years ' in setup.'
	
FROM PS_GEX_VAC_SCHEDUL ELIG
WHERE ELIG.UNION_CD = $union_cd
AND ELIG.YEARS = #dtu_years
AND ELIG.EFFDT = (SELECT MAX(ELIG1.EFFDT) FROM PS_GEX_VAC_SCHEDUL ELIG1
		WHERE ELIG.UNION_CD = ELIG1.UNION_CD
		AND ELIG1.EFFDT <= $AsOfDate)

End-Select 

!***********************************************************************
End-Procedure Get-Eligible-Weeks
!***********************************************************************
!GEXPY_848_E136736_01 2012-10-18 VENDAXG END
!***********************************************************************
begin-procedure Get-Total-Gross-New
!***********************************************************************

#debug9 Show '-- In Get-Total-Gross-New Step --'
#debug8 show '$Criteria used in GET-TOTAL-GROSS_NEW ' $pay_end_criteria

#debug8 show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD
   
   Let $GEXXX900_Company_Alias = 'AA.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA
   

Begin-SELECT 
sum(BB.OTH_EARNS) &BB.OTH_EARNS

   add &BB.OTH_EARNS to #total_gross
   show '#total_gross : ' #total_gross

FROM PS_PAY_EARNINGS AA, PS_PAY_OTH_EARNS BB
  WHERE  AA.EMPLID   = &A.EMPLID
     AND AA.EMPL_RCD = &A.EMPL_RCD	
     AND (AA.COMPANY > '999'  or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] )  
     AND AA.COMPANY  = BB.COMPANY
     AND AA.PAYGROUP = BB.PAYGROUP
     AND AA.PAY_END_DT = BB.PAY_END_DT
     AND AA.OFF_CYCLE = BB.OFF_CYCLE
     AND AA.PAGE_NUM = BB.PAGE_NUM
     AND AA.LINE_NUM = BB.LINE_NUM
     AND AA.ADDL_NBR = BB.ADDL_NBR
     AND BB.ERNCD NOT IN ('ADJ','525','650','651','602','DDP')    
     [$pay_end_criteria]
end-select
end-procedure



!***********************************************************************
begin-procedure get-total-gross
!***********************************************************************

#debug9 Show '-- In Get-Total-Gross Step --'
 
   Let $GEXXX900_Company_Alias = 'F.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA
  

begin-select on-error=sql-error-found
SUM(F.GRS_YTD) &F.GRS_YTD

  add &F.GRS_YTD to #total_gross
  show '#total_gross : ' #total_gross

FROM   PS_EARNINGS_BAL F
WHERE  F.EMPLID         = &A.EMPLID
AND    F.EMPL_RCD       = &A.EMPL_RCD	
AND    (F.COMPANY 	> '999'	 or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] ) 
AND    F.BALANCE_ID	= 'CY'
[$balance_year_criteria]
AND    F.BALANCE_PERIOD    =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID       = F.EMPLID
       AND    EMPL_RCD     = F.EMPL_RCD	
       AND    COMPANY      = F.COMPANY
       AND    BALANCE_ID   = F.BALANCE_ID
       AND    BALANCE_YEAR = F.BALANCE_YEAR
       AND    SPCL_BALANCE = F.SPCL_BALANCE
       AND    ERNCD        = F.ERNCD)
AND    F.SPCL_BALANCE      = 'N'

AND    F.ERNCD        NOT IN ('ADJ','525','602','650','651','DDP')   

end-select
end-procedure



!***********************************************************************
begin-procedure hours-worked-new
!***********************************************************************

#debug9 Show '-- In Hours-Worked-New Step --'
#debug8 show '$criteria used in hours-worked_NEW ' $pay_end_criteria
!	show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD
   Let $GEXXX900_Company_Alias = 'CC.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA

Begin-SELECT distinct 
CC.pay_end_dt 
CC.OFF_CYCLE
DD.SPCL_HRS


   add &DD.SPCL_HRS to #hrs_worked

FROM PS_PAY_EARNINGS CC, PS_PAY_SPCL_EARNS DD
  WHERE  CC.EMPLID     = &A.EMPLID
     AND CC.EMPL_RCD  =  &A.EMPL_RCD
     AND CC.COMPANY    = DD.COMPANY
     AND (CC.COMPANY    > '999'  or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] ) 
     AND CC.PAYGROUP   = DD.PAYGROUP
     AND CC.PAY_END_DT = DD.PAY_END_DT
     AND CC.OFF_CYCLE  = DD.OFF_CYCLE
     AND CC.PAGE_NUM      = DD.PAGE_NUM
     AND CC.LINE_NUM      = DD.LINE_NUM
     AND CC.SEPCHK     = DD.SEPCHK	
     AND DD.ERNCD_SPCL = 'WK1'
     [$pay_end_criteria]
end-select
end-procedure


!***********************************************************************
begin-procedure hours-worked
!***********************************************************************

#debug9 Show '-- In Hours-Worked Step --'
!	show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD ' ' &A.COMPANY
   Let $GEXXX900_Company_Alias = 'J.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA
  
begin-select on-error=sql-error-found
SUM(J.HRS_YTD) &J.HRS_YTD

  add &J.HRS_YTD To #hrs_worked

FROM   PS_EARNINGS_BAL J
WHERE  J.EMPLID            = &A.EMPLID
AND    J.EMPL_RCD          = &A.EMPL_RCD
AND   ( J.COMPANY           = &A.COMPANY
OR    (J.COMPANY       > '999'  or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] ) )
AND    J.BALANCE_ID        = 'CY'
[$balance_year_criteria]
AND    J.BALANCE_PERIOD    =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID       = J.EMPLID
       AND    EMPL_RCD     = J.EMPL_RCD	 
       AND    COMPANY      = J.COMPANY
       AND    BALANCE_ID   = J.BALANCE_ID
       AND    BALANCE_YEAR = J.BALANCE_YEAR
       AND    SPCL_BALANCE = J.SPCL_BALANCE
       AND    ERNCD        = J.ERNCD)
AND    J.SPCL_BALANCE      = 'Y'
AND    J.ERNCD             = 'WK1'
end-select
end-procedure


!***********************************************************************
!This procedure calculates the total absentee days of the employee 
!during the previous service year or previous calendar year as 
!determined by the service years.
!***********************************************************************
begin-procedure calc-total-absence-period
!***********************************************************************

#debug9 Show 'calc-total-absence-period'
  if $first_year_service = 'Y'
    move $AsOfDate to $RFL_date
    move $service_dt to $start_date
  else
    move '31-DEC-' to $RFL_date
    concat $prev_year with $RFL_date
    move '01-JAN-' to $start_date
    concat $prev_year with $start_date
  end-if
	show '$start_date ' $start_date
	show '$prev_year ' $prev_year 
	show '$RFL_date ' $RFL_date

  move 'N' to $No_More_Absence
  let #total_absence = 0


!Need to find out the absence period by ignoring the actions PLA/FML,
!or PLA/WC2 or LOA/DIS (if the employee belongs to G01), otherwise, 
!if the employee does not belong to G01, just ignore PLA/FML and 
!calculate the absence period

  while $No_More_Absence = 'N'
    if &A.UNION_CD = 'G01'
      let $ignore_string = 'AND G.ACTION||G.ACTION_REASON NOT IN (''PLAFML'',''PLAWC2'',''LOADIS'')'
    else
      let $ignore_string = 'AND G.ACTION||G.ACTION_REASON NOT IN (''PLAFML'')'
    end-if
    show '$ignore_string ' $ignore_string 
    show 'Doing select-LOA-periods'
    do select-LOA-periods
  end-while
end-procedure


!*********************************************************************
!This procedure adjusts the already calculated earned yearly vacation
!amount depending on the total absence period during the last service 
!year or during the last calendar year.(Determined by the Number of 
!service years). 
!*********************************************************************
begin-procedure adjust-year-vac-amt
!***********************************************************************

#debug9 Show 'adjust-year-vac-amt'
  if #total_absence <= 90
    goto skip-adjust
  end-if

  if #total_absence > 90 and #total_absence <= 180
     multiply 0.25 times #eligible_weeks
  else    !> 180 days

    if $first_year_service = 'Y'
      move $AsOfDate to $RFL_date
      move $service_Dt to $start_date
    else
      move '31-DEC-' to $RFL_date
      concat $prev_year with $RFL_date
      move '01-JAN-' to $start_date
      concat $prev_year with $start_date
    end-if


!If the total absence period calculated is greater than 180 days, 
!and the employee belongs to union code G01, need to find out the 
!total absence period agian by ignoring only PLA/FML(FMLA Leave)
!and PLA/WC2(Workers Compensation).

    move 'N' to $No_More_Absence
    if &A.UNION_CD = 'G01'
      let #total_absence = 0
      while $No_More_Absence = 'N'
        let $ignore_string = 'AND G.ACTION||G.ACTION_REASON NOT IN (''PLAFML'',''PLAWC2'')'
        do select-LOA-periods
      end-while
    end-if

    if #total_absence > 180 and #total_absence <= 270 
       multiply 0.5 times #eligible_weeks
    else   ! > 270 days
       let #eligible_weeks = 0
    end-if
  end-if

skip-adjust:
  if &A.UNION_CD = 'G01'
    if $first_year_service = 'Y'
      move $AsOfDate to $RFL_date
      move $service_Dt to $start_date
    else
      move '31-DEC-' to $RFL_date
      concat $prev_year with $RFL_date
      move '01-JAN-' to $start_date
      concat $prev_year with $start_date
    end-if


!Employee that has absence period for the action PLA/WC2 (workers Comp)
!must have worked some hours during the previous year in order to 
!qualify for any vacation. Any hours worked in the previous year
!will guarantee full earned vacation dollars.
	show 'Doing check-work-comp'
    do check-work-comp
  end-if

  if #year_vac_amt <= 0
    move 'Y' to $skip_record
  end-if
end-procedure


!*********************************************************************
!This procedure calculates the total absence period. It finds each
!Leave of absence start date and end date during the year
!and adds them together. It enables to sum all the days, the employee
!was in Leave of Absence during the year even though he/she
!uses it multiple times.
!*********************************************************************
begin-procedure select-LOA-Periods
!***********************************************************************

#debug9 Show 'select-LOA-Periods'
	show 'Doing select-starting-absence-date'
   do select-starting-absence-date

   if $No_More_Absence = 'N'
      do convert-to-dtu-date(&G.EFFDT,$Start_dt_dtu)
   else
      goto skip-process
   end-if
   if &A.UNION_CD = 'G01'
     let $ignore_string = 'AND H.ACTION||H.ACTION_REASON NOT IN (''PLAFML'',''PLAWC2'',''LOADIS'')'
   else
     let $ignore_string = 'AND H.ACTION||H.ACTION_REASON NOT IN (''PLAFML'')'
   end-if
	show '$ignore_string ' $ignore_string 
	show 'Doing select-RFL-date '

   do select-RFL-date

   if $RFL_date_found = 'Y'
      do Convert-To-Dtu-date(&H.EFFDT,$RFL_dt_dtu)
   else
      do convert-to-dtu-date($RFL_date,$RFL_dt_dtu)
      move 'Y' to $No_More_Absence
   end-if

   do dtu-diff-days($Start_dt_dtu,$RFL_dt_dtu,#diff_days)
   add #diff_days to #total_absence

   do convert-from-dtu-date($RFL_dt_dtu,$start_date)

skip-process:

end-procedure


!**********************************************************************
!This procedure selects the each Leave of Absence period's start date
!**********************************************************************
begin-procedure select-starting-absence-date
!***********************************************************************

#debug9 Show 'select-starting-absence-date'
  move 'N' to $found
!	show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD ' ' $Start_date ' ' $RFL_date

Begin-Select on-error=sql-error-found
G.EFFDT
  move 'Y' to $found
FROM   PS_JOB G
WHERE  G.EMPLID           = &A.EMPLID
AND    G.EMPL_RCD        = &A.EMPL_RCD
AND    G.EFFDT            =
      (SELECT MIN(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID      = G.EMPLID
       AND    EMPL_RCD   = G.EMPL_RCD
       AND    EMPL_STATUS = G.EMPL_STATUS
       AND    EFFDT       > $Start_date
       AND    EFFDT      <= $RFL_date)
AND    G.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID      = G.EMPLID
       AND    EMPL_RCD   = G.EMPL_RCD
       AND    EMPL_STATUS = G.EMPL_STATUS
       AND    EFFDT       = G.EFFDT)
AND    G.EMPL_STATUS      = 'P'  !Leave of absence paid
  [$ignore_string]
end-select

  if $found = 'N'
    move 'Y' to $No_More_Absence
  end-if
end-procedure   


!*****************************************************************
!This procedure selects each Leave of Absence period's end date
!*****************************************************************
begin-procedure select-RFL-date
!***********************************************************************

#debug9 Show 'select-RFL-date'
  move 'N' to $RFL_date_found

!   show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD ' ' &G.EFFDT ' ' $RFL_date

Begin-Select on-error=sql-error-found
H.EFFDT

  move 'Y' to $RFL_date_found

FROM   PS_JOB H
WHERE  H.EMPLID           = &A.EMPLID
AND    H.EMPL_RCD        = &A.EMPL_RCD
AND    H.EFFDT            =
      (SELECT MIN(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID      = H.EMPLID
       AND    EMPL_RCD   = H.EMPL_RCD
       AND    EMPL_STATUS = H.EMPL_STATUS
       AND    EFFDT       > &G.EFFDT
       AND    EFFDT      <= $RFL_date)
AND    H.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID      = H.EMPLID
       AND    EMPL_RCD   = H.EMPL_RCD
       AND    EMPL_STATUS = H.EMPL_STATUS
       AND    EFFDT       = H.EFFDT)
AND    H.EMPL_STATUS     <> 'P'  !Leave of absence paid
  [$ignore_string]
end-select
end-procedure   


!***********************************************************************
!Employee that has absence period for the action PLA/WC2 (workers Comp)
!must have worked some hours during the year in order to 
!qualify for any vacation. Any hours worked in the previous year
!will guarantee full earned vacation dollars.
!***********************************************************************
begin-procedure check-work-comp
!***********************************************************************

#debug9 Show 'check-work-comp'
  move 'N' to $Worked
  move 'N' to $work_comp_found

  let $ignore_string = 'AND G1.ACTION||G1.ACTION_REASON IN (''PLAWC2'')'
	show '$ignore_string  ' $ignore_string 
!	show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD ' ' $Start_date ' ' $RFL_date
Begin-Select on-error=sql-error-found
'G1'
  move 'Y' to $work_Comp_found

  let #hrs_ytd = 0

  if $first_year_service = 'Y'
    let $balance_year_criteria = 'AND    E1.BALANCE_YEAR     IN (' || $prev_year || ',' || $AsOfYYYY || ')'
    #debug8 show '$balance_year_criteria ' $balance_year_criteria
    show 'Doing check-earnings-balance'
    do check-earnings-balance
  else
    let $balance_year_criteria = 'AND    E1.BALANCE_YEAR      = ' || $prev_year
    #debug8 show '$balance_year_criteria ' $balance_year_criteria
    show 'Doing check-earnings-balance'
    do check-earnings-balance
  end-if

  if #hrs_ytd > 0
    move 'Y' to $Worked
  end-if

  exit-select
   
FROM   PS_JOB G1
WHERE  G1.EMPLID         = &A.EMPLID
AND    G1.EMPL_RCD      = &A.EMPL_RCD
AND    G1.EFFDT          =
      (SELECT MIN(EFFDT)
       FROM PS_JOB
       WHERE EMPLID      = G1.EMPLID
       AND EMPL_RCD     = G1.EMPL_RCD
       AND EFFDT        >= $Start_date
       AND EFFDT        <= $RFL_date)
AND    G1.EFFSEQ         =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID     = G1.EMPLID
       AND    EMPL_RCD  = G1.EMPL_RCD
       AND    EFFDT      = G1.EFFDT)
  [$ignore_string]
end-select

  if $worked = 'N' and $work_comp_found = 'Y'
    let #eligible_weeks = 0  !No Vacation if no hours were registered other
 	 		     !than Workers compensations during the year
  end-if
end-procedure   


!***********************************************************************
begin-procedure check-earnings-balance
!***********************************************************************

#debug9 Show 'check-earnings-balance'

!	show 'Parameters ' &A.EMPLID ' ' &A.COMPANY ' ' &A.EMPL_RCD

Begin-Select on-error=sql-error-found
Sum(E1.HRS_YTD) &hrs_ytd
      
  Add &hrs_ytd To #hrs_ytd

FROM   PS_EARNINGS_BAL E1
WHERE  E1.EMPLID              = &A.EMPLID
AND    E1.COMPANY             = &A.COMPANY
AND    E1.BALANCE_ID          = 'CY'
AND    E1.EMPL_RCD            = &A.EMPL_RCD
[$balance_year_criteria]
AND    E1.BALANCE_PERIOD      =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID          = E1.EMPLID
       AND    EMPL_RCD        = E1.EMPL_RCD	
       AND    COMPANY         = E1.COMPANY
       AND    BALANCE_ID      = E1.BALANCE_ID
       AND    BALANCE_YEAR    = E1.BALANCE_YEAR
       AND    SPCL_BALANCE    = E1.SPCL_BALANCE
       AND    ERNCD           = E1.ERNCD)
AND    E1.SPCL_BALANCE        = 'N'
AND    E1.ERNCD          NOT IN ('ADJ','509','525','602','650','651','DDP')  
AND    E1.HRS_YTD             > 0
end-select
end-procedure   


!*********************************************************************
!This procedure tries to find if the PT Vacation Earnings Code (515) is
!defined in ADDL_PAY_ERNCD table. If there is, inserts a row in 
!ADDL_PAY_EFFDT with next pay begin date as the effective date. Otherwise,
!inserts the earning code 515 in the ADDL_PAY_ERNCD and also a row with
!effective date equal to next pay begin date in ADDL_PAY_EFFDT.
!*********************************************************************
begin-procedure check-existing-vac-erncd
!***********************************************************************

#debug9 Show 'check-existing-vac-erncd'
  move 'N' to $found

begin-select on-error=sql-error-found
'K'
  move 'Y' to $found
  show 'Doing insert-new-effdt'
  do insert-new-effdt

FROM   PS_ADDL_PAY_ERNCD K
WHERE  K.EMPLID    = &A.EMPLID
AND    K.EMPL_RCD = &A.EMPL_RCD
AND    K.ERNCD     = '515'
end-select

  if $found = 'N'
    show 'Doing insert-Vac-erncd'
    do insert-Vac-erncd
    show 'Doing insert-new-effdt'
    do insert-new-effdt
  end-if
end-procedure


!***********************************************************************
Begin-Procedure Insert-Vac-Erncd
!***********************************************************************

#debug9 Show 'Insert-Vac-Erncd'
  begin-sql on-error=sql-error-found
    INSERT INTO PS_ADDL_PAY_ERNCD
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                RECORD_SOURCE)                   
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '515',
                'O')
  end-sql
end-procedure


!***********************************************************************
Begin-Procedure Insert-new-effdt
!***********************************************************************

#debug9 Show 'Insert-new-effdt'
  begin-sql on-error=sql-error-found
    INSERT INTO PS_ADDL_PAY_EFFDT
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                EFFDT,
                RECORD_SOURCE)                   
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '515',
                $AsOfDate,		
                'O')
  end-sql
end-procedure


!***********************************************************************
Begin-Procedure Select-Curr-Addl-Pay
!***********************************************************************

#debug9 Show '-- In Select-Curr-Addl-Pay Step --'
  
begin-select on-error=sql-error-found
XX.OTH_PAY
XX.GOAL_AMT

  #debug8 show 'XX.OTH_PAY and XX.GOAL_AMT ' &XX.OTH_PAY ' ' &XX.GOAL_AMT
 
  let $curr_addl_found = 'Y'
  if &XX.OTH_PAY > 0
     let #curr_wks_check = floor(&XX.GOAL_AMT / &XX.OTH_PAY)
  end-if

FROM PS_ADDL_PAY_DATA XX
WHERE  XX.EMPLID         = &A.EMPLID
AND    XX.EMPL_RCD       = &A.EMPL_RCD
AND    XX.EFFDT = 
       (SELECT MAX(EFFDT) FROM PS_ADDL_PAY_DATA
        WHERE XX.EMPLID = EMPLID
          AND XX.EMPL_RCD = EMPL_RCD
          AND XX.ERNCD = ERNCD
          AND EFFDT <= $AsOfDate)
AND    XX.ERNCD          = '515'
end-select
end-procedure


!***********************************************************************
Begin-Procedure Select-existing-Addl-Pay
!***********************************************************************

#debug9 Show 'Select-existing-Addl-Pay'
  let $year_begin_dt = '01-JAN-'
  concat $AsOfYYYY with $year_begin_Dt

  show '$year_begin_dt ' $year_begin_dt

  let $existing_addl_pay = 'N'

begin-select on-error=sql-error-found
I5.EMPLID
I5.EMPL_RCD
I5.ERNCD
I5.EFFDT
I5.ADDL_SEQ
I5.DEPTID
I5.JOBCODE
I5.POSITION_NBR
I5.ACCT_CD
I5.GL_PAY_TYPE
I5.ADDL_PAY_SHIFT
I5.OTH_HRS
I5.HOURLY_RT
I5.OTH_PAY
I5.ADDLPAY_REASON
I5.SEPCHK
I5.EARNINGS_END_DT
I5.GOAL_AMT
I5.GOAL_BAL
I5.OK_TO_PAY
I5.DISABLE_DIR_DEP
I5.PRORATE_ADDL_PAY
I5.PRORATE_CUI_WEEKS
I5.PAY_PERIOD1
I5.PAY_PERIOD2
I5.PAY_PERIOD3
I5.PAY_PERIOD4
I5.PAY_PERIOD5
I5.STATE
I5.LOCALITY
I5.TAX_PERIODS
I5.TAX_METHOD
I5.ADDL_PAY_FREQUENCY
I5.DED_TAKEN
I5.DED_SUBSET_ID
I5.DED_TAKEN_GENL
I5.DED_SUBSET_GENL
I5.PLAN_TYPE
I5.BUSINESS_UNIT
I5.COMP_RATECD

  let $existing_addl_pay = 'Y'
  let #goal_bal = &I5.GOAL_BAL
	
  If $Mstr_Cntrct_Nrml = 'N'		
        add &I5.GOAL_AMT to #year_Vac_amt
  End-If				
  
FROM   PS_ADDL_PAY_DATA I5
WHERE  I5.EMPLID         = &A.EMPLID
AND    I5.EMPL_RCD      = &A.EMPL_RCD
AND    I5.EFFDT          =
      (SELECT MAX(EFFDT)
       FROM   PS_ADDL_PAY_DATA
       WHERE  EMPLID     = I5.EMPLID
       AND    EMPL_RCD  = I5.EMPL_RCD
       AND    EFFDT     >= $year_begin_dt
       AND    ERNCD      = I5.ERNCD)
AND    I5.ERNCD          = '515'
end-select
end-procedure


!***********************************************************************
Begin-Procedure Insert-Addl-Pay-Data
!***********************************************************************
#debug9 Show 'Insert-Addl-Pay-Data'
  begin-sql on-error=sql-error-found
    INSERT INTO PS_ADDL_PAY_DATA
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                EFFDT,
                ADDL_SEQ,
                DEPTID,
                JOBCODE,
                POSITION_NBR,
                ACCT_CD,
                GL_PAY_TYPE,
                ADDL_PAY_SHIFT,
                OTH_HRS,
                HOURLY_RT,
                OTH_PAY,
                ADDLPAY_REASON,
                SEPCHK,
                EARNINGS_END_DT,
                GOAL_AMT,
                GOAL_BAL,
                OK_TO_PAY,
                DISABLE_DIR_DEP,
                PRORATE_ADDL_PAY,
                PRORATE_CUI_WEEKS,
                PAY_PERIOD1,
                PAY_PERIOD2,
                PAY_PERIOD3,
                PAY_PERIOD4,
                PAY_PERIOD5,
                STATE,
                LOCALITY,
                TAX_PERIODS,
                TAX_METHOD,
                ADDL_PAY_FREQUENCY,
                DED_TAKEN,
                DED_SUBSET_ID,
                DED_TAKEN_GENL,
                DED_SUBSET_GENL,
                PLAN_TYPE,
		BUSINESS_UNIT,
		COMP_RATECD,
                RECORD_SOURCE)                    
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '515',
                $AsOfDate,		
                1,
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                #avg_weekly_hrs_worked,		!OTH_HRS
                #vac_hourly_rt,			!HOURLY_RT
                #week_vac_amt,                  !OTH_PAY
                ' ',
                0,                              !SEPCHK
                '',
                #year_vac_amt,			!GOAL_AMT
                #GOAL_BAL,                 
                'N',			   
                ' ',
                ' ',
                ' ',
                'N',
                'N',
                'N',
                'N',
                'N',
                ' ',
                ' ',
                0,
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
	        'STDBU',  
		' ',
                'O')                              
  end-sql
end-procedure


!*********************************************************************
!This procedure checks if there is any unused vacation in the current 
!year for the employees who are retired or terminated during the current
!pay period.
!*********************************************************************
Begin-Procedure check-unused-vacation
!*********************************************************************

#debug9 Show 'check-unused-vacation'
  let #vac_bal = 0

  move '31-DEC-' to $RFL_date
  concat $AsOfYYYY with $RFL_date
  move '01-JAN-' to $start_date
  concat $AsOfYYYY with $start_date

  show 'Parameters ' $Start_date ' ' $RFL_date

Begin-Select on-error=sql-error-found
I1.EMPLID 
I1.EMPL_RCD 
I1.EFFDT 
I1.ERNCD 
I1.GOAL_AMT
I1.GOAL_BAL
    
  move &I1.GOAL_AMT to #vac_awarded
  move &I1.GOAL_BAL to #vac_taken

  let #vac_bal = #vac_awarded - #vac_taken

FROM   PS_ADDL_PAY_DATA I1
WHERE  I1.EMPLID         = &A3.EMPLID
AND    I1.EMPL_RCD      = &A3.EMPL_RCD
AND    I1.EFFDT          =
      (SELECT MAX(EFFDT)
       FROM   PS_ADDL_PAY_DATA
       WHERE  EMPLID     = I1.EMPLID
       AND    EMPL_RCD  = I1.EMPL_RCD
       AND    EFFDT     >= $Start_date
       AND    EFFDT     <= $RFL_date
       AND    ERNCD      = I1.ERNCD)
AND    I1.ERNCD          = '515'
AND   (I1.GOAL_AMT - I1.GOAL_BAL) > 0
end-select
end-procedure


!*********************************************************************
!This procedure finds the previous year's vacation amount that the 
!employee earned. And, prorates that amount depending on the 
!Termination/Retirement month.
!*********************************************************************
Begin-Procedure calc-prorated-vacation
!*********************************************************************

#debug9 Show 'calc-prorated-vacation'
!	 show 'Parameters ' $Start_date ' ' $RFL_date

Begin-Select on-error=sql-error-found
I2.EMPLID 
I2.EMPL_RCD 
I2.EFFDT 
I2.ERNCD 
I2.HOURLY_RT 
I2.GOAL_AMT 
I2.GOAL_BAL
    
  move &I2.GOAL_AMT to #prev_vac_bal
  let #term_retire_month = substr(&effdt,1,2)

  evaluate #term_retire_month
    when <= 3
      let #prorate_vac = #prev_vac_bal * 0.25
      break
    when <= 6
      let #prorate_vac = #prev_vac_bal * 0.5
      break
    when <= 9
      let #prorate_vac = #prev_vac_bal * 0.75
      break
    when <= 12
      let #prorate_vac = #prev_vac_bal 
      break
  end-evaluate
     
FROM   PS_ADDL_PAY_DATA I2
WHERE  I2.EMPLID         = &A3.EMPLID
AND    I2.EMPL_RCD      = &A3.EMPL_RCD
AND    I2.EFFDT          =
      (SELECT MAX(EFFDT)
       FROM   PS_ADDL_PAY_DATA
       WHERE  EMPLID     = I2.EMPLID
       AND    EMPL_RCD  = I2.EMPL_RCD
       AND    EFFDT     >= $Start_date
       AND    EFFDT     <= $RFL_date
       AND    ERNCD      = I2.ERNCD)
AND    I2.ERNCD          = '515'
end-select
end-procedure


!*********************************************************************
!This procedure prints the employee's payout report who are retired
!or terminated during the current pay period.
!*********************************************************************
Begin-Procedure Print-Payout-Report
!*********************************************************************

#debug9 Show 'Print-Payout-Report'
	show 'printing Print-Payout-Report'
use-report Vacation-Payout-Report

  print &A3.EMPLID (+1,1) !edit xxx-xx-xxxx ! GEX_SEC_REENG 2015-06-24 Vahini Katta 
  print &P3.NAME   (,20) 
  print &A3.ACTION (,50)
  print &A3.EFFDT  (,65)
  print #vac_bal   (,80) 

use-report report-log
end-procedure



!*********************************************************************
Begin-Procedure Print-Balance-Report
!*********************************************************************

#debug9 Show 'Print-Balance-Report'
	Show 'Print-Balance-Report'
use-report Balance-Report
  if $dept_changed='Y'
     new-page
  else 
     let $dept_changed='N'
  end-if

  print &A.EMPLID  (+1,1) !edit xxx-xx-xxxx ! GEX_SEC_REENG 2015-06-24 Vahini Katta 
  print &PD.NAME   (,20) 
  print &A.ACTION  (,50)
  print &A.EFFDT   (,65)
  print #week_vac_amt (,85)
  print #year_vac_amt (,100)

use-report report-log
end-procedure


!*********************************************************************
begin-procedure SQL-Error-Found
!*********************************************************************

#debug9 Show 'SQL-Error-Found'
  show 'In SQL-Error-Found '  $EmplId
  let $EmplId_1st3 = substr($EmplId,1,3)
  let $EmplId_mid2 = substr($EmplId,4,2)
  let $EmplId_last4 = substr($EmplId,6,4)
 
  String $EmplId_1st3 $EmplID_mid2 $EmplId_last4 by '-' into $EmplId11

  move 'Y' to $ErrorFound
  do Format-Number(#InputTran, $out, '99999')
  print $out         (+1,1)
  !print $EmplID11    (,18) !GEX_SEC_REENG 2015-04-29 Vahini Katta
  print $EmplID      (,18)  !GEX_SEC_REENG 2015-04-29 Vahini Katta
  print $sql-error   (,35) 
end-procedure


!*********************************************************************
begin-procedure Get-Company-Data
!*********************************************************************

  if rtrim($prev_cmpy,' ') = ''
    move '' to $CompanyName
    goto GetCompanyExit
  end-if
  if $AsOfDate = ''  !if no As-Of-Date is specified, default to Today
    move $AsOfToday to $AsOfDate
  end-if
	show '$prev_cmpy ' $prev_cmpy
	show '$AsOfDate ' $AsOfDate

begin-SELECT
CT.DESCR

FROM  PS_COMPANY_TBL CT
WHERE CT.COMPANY = $prev_cmpy
  AND CT.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_COMPANY_TBL
       WHERE  COMPANY = $prev_cmpy
         AND  EFFDT  <= $AsOfDate)
end-SELECT

     let $CompanyName      = rtrim(&CT.Descr,' ')

GetCompanyExit:
    
end-procedure


!*********************************************************************
begin-procedure Get-Department-Name
!*********************************************************************

  move '' to $DeptName
  
  if Rtrim($prev_deptid,' ') = ''
    goto GetDptNmExit
  end-if

  if $AsOfDate = ''
    move $AsOfToday to $AsOfDate
  end-if

!	show 'Parameters ' $prev_deptid ' '  $AsOfDate

begin-SELECT
X.DESCR

  let $DeptName      = Rtrim(&X.DESCR,' ')
  
FROM  PS_DEPT_TBL X
WHERE X.DEPTID = $prev_deptid
 AND X.EFFDT <= $AsOfDate
 AND X.EFFDT  =
       (SELECT MAX(EFFDT)
        FROM   PS_DEPT_TBL
        WHERE  DEPTID = X.DEPTID
        AND  EFFDT <= $AsOfDate)
end-SELECT

GetDptNmExit:

end-procedure

!*********************************************************************
#Include 'gexxx922.sqc'  !Get GEX_RC_PAY run control parameters
#include 'gexxx970.sqc'  !Get multiple deptid/jobcode row table
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getdatcd.sqc'  !Retrieves the asofyear, asofmonth etc.,
#Include 'datetime.sqc'  !Routines for date and time formatting
#include 'askaod.sqc'    !Ask-As-Of-Date routine
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#include 'gexregtp.sqc'  !Translates the REG_TEMP to Full_Part_time
#include 'gexxx913.sqc'  !Union_cd 
#include 'gexxx900.sqc'  !Company
#include 'gexrehdt.sqc'	 