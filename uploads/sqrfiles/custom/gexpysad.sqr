!***********************************************************************

! Interface ID:   GPYC019 - Salary Administration: Service Increases   *

! Interface Name: GEXPYSAD.SQR                                         *

! GEXPYSAD: This program evaluates employees on a weekly basis         *

!           to determine service milestones met based on the current   *

!           salary grade assigned.                                     *

!                                                                      *

!***********************************************************************

!                                                                      *

!               Confidentiality Information:                           *

!                                                                      *

! This module is the confidential and proprietary information of       *

! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*

! in any form, by any means, in whole or in part, nor is it to be used *

! for any purpose other than that for which it is expressly provided   *

! without the written permission of Giant Eagle.                       *

!                                                                      *

!***********************************************************************

!                                                                      *

!  $Date:: 04/15/98 08:30a      $                                      *

!  $Revision:: 01               $                                      *

!  $Workfile:: GEXPYSAD.SQR     $                                      *

!                                                                      *

!***********************************************************************

!                         MODIFICATION HISTORY                         *

!***********************************************************************

!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *

!***********************************************************************

! GPYC019    GXD         04/15/1998   INITIAL CREATION                 *

!                                                                      *

! GPYC019    SXK         05/20/1998   Modified according to specs      *

!                                                                      *

! GPYC019    SXK         06/12/1998   Added Plan group Code Changes    *

!                                                                      *

! GPYC019    SXK         06/14/1998   Added Month Fraction Handling    *

!				      capability                       *

!                                                                      *

! GPYC019    SXK 	 06/30/1998   Added Leave of Absence process   *

!                                                                      *

! GPYC019    SXK         07/27/1998   Run Frequency is changed from    *

!                                     weekly to daily. Also any        *

!                                     future rows as of today, need    *

!                                     to be reported for hourly rate   *

!                                     adjustment                       *

!                                                                      *

! GPYC019    SXK         08/13/1998   Added Grade Group Code changes   *

!                                     to let employees transfer from   *

!				      one grade to another without     *

!				      changing their grade entry dt    *

!                                                                      *

! GPYC019    SXK         08/16/1998   Added code to look in the job    *

!				      history for the original grade   *

!				      entry date whenever there is a   *

!				      demotion action performed.       *

!                                                                      *

! GPYC019    SXK         08/18/1998   Added code to give right step    *

!                                     increase even if employee was    *

!				      promoted to higher grade and     *

!				      and demoted back after he        *

!                                     missed one step incr while he    *

!                                     was in the higher grade	       *

!                                                                      *

! GPYC019    SXK         08/19/1998   Run Frequency is changed From    *

!                                     daily to weekly. Also This will  *

!                                     run on sundays. For months       *

!				      requirements, hrs requirement,   *

!                                     the new job insert effdt will    *

!                                     be next pay begin dt.            *

!                                                                      *

!	     SXK         09/09/1998   Added TermS that are after pay   *

!                                     end date and before wednesday    *

!                                     Also added last 3 columns in     *

!                                     RMC report                       *

!                                                                      *

!            SXK         09/22/1998   Added New Mobius ReportID        *

!                                                                      *

!            SXK         10/19/1998   Modified for demotion grades     *

!                                     that do not exist prior to       *

!                                     demotion to check first grade    *

!                                     entry dates in the system        *

!                                                                      *

!	     SXK	 10/26/1998   Added spcl_balance               *

!                                                                      *

!	     SXK         12/13/1998   Changed cut off date to 01/24/99 *

!                                                                      *

!            CJH         02/03/1999   Changed cut off date to 01/25/98 *

!                                     for testing.Commented new go-live*

!                                     cut off date of 03/28/1999.      *

!                                                                      *

!	     SXK         02/09/1999   Flipped the cut off date to      *

!                                     03/28/1999.                      *

!                                                                      *

!	     SXK         03/22/1999   Turned on fraction logic         *

!                                                                      *

!	     SXK         04/22/1999   Modified to create a temp table  *

!				      to store RMC rpt data, sort it   *

!				      by dpt, name order and print it  *

!                                                                      *

!	     SXK         05/24/1999   Modified to update bas_Data_chg  *

!                                     in personal_data table           *

!                                                                      *

!	     SXK         06/29/1999   Modified to look for rehires     *

!                                     after cutoff date also.          *

!                                                                      *

!	     SXK         07/19/1999   Modified to use numeric variables*

!				      while inserting into rmc temp    *

!                                     table                            *

!                                                                      *

!            SXK         09/15/1999   Modified the tablespace to       *

!                                     TE7TOOLS001                      *

!                                                                      *

!	     SXK         11/16/1999   Modified to get correct mtd_hrs  *

!				      from pay_earnings in             *

!                                     get-service-hrs procedure        *

!                                                                      *

!	     SXK         01/25/2000   Modified to have new columns in  *

!                                     job insert that were part of 7.5 *

!                                     upgrade                          *

!                                                                      *

!	     SXK         03/15/2000   Modified to have RMC, RPH div    *

!				      get extra quarter based on clerk *

!				      grades. Also changed to have     *

!                                     sum(hrs_ytd) instead of          *

!                                     sum(hrs_mtd) in procedure        *

!			              calculate-sum-of-mtd-hours-1     *

!                                                                      *

!            CJH         11/27/2000   Modify program to include COD    *

!                                     employees                        *

!                                                                      *

!            CJH         02/02/2001   Modify EFFDT range selected from *

!                                     JOB for the row to clone(J.EFFDT)*

!                                                                      *

!            CJH         04/17/2001   Pickup Cleveland employees by    *

!                                     Cmpy selection rather than Cmpy  *

!                                     Div code.  Change displays.      *

!                                                                      *

!            CJH         05/03/2001   Adjust the selection criteria for*

!                                     the "RMC Futures" rpt to include *

!                                     COD EEs                          *

!                                                                      *

!            CJH         05/07/2001   Add logic to integrate           *

!                                     COD-converted EEs into main      *

!                                     process by restricting dates from*

!                                     which hours are accumulated. Use *

!                                     the COD conversion date as a     *

!                                     'start dt' for the COD-affected  *

!                                     population.                      *

!                                                                      *

!  HR70133   AXL         05/14/2001   Add new job field                *

!                                     GEX_SEASONAL_EMP.                *

!                                                                      *

!            SCM         8/20/2001    1) Add paygroup RE4 for Columbus *

!                                     2) Change Grade Entry Dt select  *

!                                     to select min date that the ee   *

!                                     has been active                  *

!                                     (using empl_status for active)   *

!                                                                      *

!            CJH         11/07/2001   Add insert into ps_compensation  *

!                                     when rt change is inserted into  *

!                                     job                              *

!                                                                      *

!            CJH         11/19/2001   Add Richmond Road RSC to SAD     *

!                                     selection                        *

!                                                                      *

!            AXL         05/28/2002   Several mods related to PYSADBAK *

!                                     output.                          *

!                                                                      *

!            GBD         05/30/2002   Add procedure to pick up the     *

!                                     paysheet hours for the current   *

!                                     open pay for COD Employees.      *

!                                     Verify that program retrieves and*

!                                     totals all years > 2001.         *

!                                                                      *

!            GBD         07/24/2002   Add code to correct Apprentice   *

!                                     processing logic.                *

!                                     Add code to stop possible process*

!                                     looping in Check-Grade-Date.     *

!                                                                      *

!            GBD         08/09/2002   Added code for Rochester and     *

!                                     Chippewa apprentice processing.  *

!                                                                      *

!            GBD         10/08/2002   Added default for Comp_RateCd on *

!                                     PS_COMPENSATION.                 *

!                                                                      *

!  HR10343   SCM         10/15/2002   Subselect for max balance period *

!                                     (select in ps_earnings_bal) is not

!                                     including spcl accum erncd.      *

!                                     Also added alias's to subselects.*

!                                                                      *

!  HR10306   GBD         03/04/2003   Added code to correct effseq in  *

!                                     insert into ps_compensation.     *

!                                                                      *

!  HR10531   AXL         08/29/2003   Added RULE HINT to Fetch Baker   *

!                                     procedure for 8.19. performance. *

!                                                                      *

!  HR10515   AXL         01/25/2004   Add run control logic to allow   *

!                                     Payroll to run 3 versions        *

!                                     simultaneously.                  *

!                                                                      *

!  HR10738   AXL         06/15/2004   Tie the hiredate/rehire date     *

!                                     logic to GEI/TMK companies only  *

!                                                                      *

!  ITG #33126                                                          *

!  HR10932   CWB         07/07/2005   Add columns to the PAY_EARNINGS/ *

!                                     PAY_OTH_EARNS join.              *   

!                                                                      *

!  HR10899   CWB         07/11/2005   Add GEX_PROF_EXP_MTHS            *

!                                     fumctionality                    *

!                                                                      *

! ISDVNPK  08/27/2007 Modified for 9.0 upgrade with JOB and JOB_JR changes

!

! ISDVASS  02/26/2008 Added Rounding logic for Hourly_RT field

! GEX isdvnpk      03/25/2008 for rehire dt issue in 90   

! GEXHR_851_E2248_01  2014-12-16 Vahini Katta

! Added missing Salary Plans
!
!Surya Sobha - 04/26/2016  - Added  Salary plans under the grades 
!			 - ACP, ABF, ACF, and ABP
!***********************************************************************

!***********************************************************************



#include 'setenv.sqc' !Set environment 



begin-setup



   #include 'setup32a.sqc'



   declare-report RMC-Report

Printer-Type=HPLASERJET

      layout=DEFAULT

   end-declare



   declare-report Bakery-Report

Printer-Type=HPLASERJET

      layout=DEFAULT

   end-declare



   declare-report Report-Log

Printer-Type=HPLASERJET

      layout=DEFAULT

   end-declare



   declare-report Future-Report

Printer-Type=HPLASERJET

      layout=DEFAULT

   end-declare



end-setup



!*********************************************************************

!Initial processing, retrieving current dates and calls the main 

!procedure to do the processing.                                     

!*********************************************************************

begin-report



  use-report Report-Log



  do Array-Initialization

  do Init-DateTime

  do Init-Number

  do stdapi-init

  let $first_rec ='Y'  !AXL 05/28/2002 Control page breaking

  

  do Get-Calendar-Year-Id

  move 'GEXPYSAD' to $ReportID

  move 'Service Increases' to $ReportTitle

  display $ReportTitle noline

  display '  ' noline



  !AXL 1/25/2004 - New Run Cntl logic - Begin

  Let $GEXXX900_Company_Alias  = 'ERN.COMPANY'

  Let $GEXXX901_Company_Alias  = 'A.COMPANY' 

  Let $GEXXX901_Paygroup_Alias = 'A.PAYGROUP'

  Let $GEXXX907_Div_CD_Alias   = 'BKRB.GEX_COMPANY_DIV_CD'



  if $Prcs_Process_Instance = ''



     Let $CompanyString = ''''

     Display 'Enter Company or leave blank to exit.'

     While 1=1

       Input $In-Company Maxlen=3 'Company'

       Uppercase $In-Company

       If Rtrim($In-Company, ' ') = ''

         Concat '''' With $CompanyString

         Break

       End-If

       If $CompanyString <> ''''

         Concat ''',''' With $CompanyString

       End-If

       Concat $In-Company With $CompanyString

     End-While



     If $CompanyString = ''''''

       Let $GEXXX900_INCLUDE_COMPANY_CRITERIA  = '1=1'

       Let $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA = 'ALL'

     Else

       Let $GEXXX900_INCLUDE_COMPANY_CRITERIA  = $GEXXX900_Company_Alias || ' In (' || $CompanyString || ')'

       Let $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA = $GEXXX900_INCLUDE_COMPANY_CRITERIA

     End-If

   

     Display 'Enter Company/Paygroup or leave blank to exit.'

     While 1=1

       Input $In-Company Maxlen=3 'Company'

       Uppercase $In-Company

       If Rtrim($In-Company, ' ') = ''

          Break

       Else

          Input $In-Paygroup Maxlen=3 'Paygroup'

          Uppercase $In-Paygroup

          If Rtrim($In-Paygroup, ' ') = ''

             Let $Include_Condition = '(' || $GEXXX901_Company_Alias || ' = '''  || $In-Company || ''')'

          Else

             Let $Include_Condition = '(' || $GEXXX901_Company_Alias || ' = '''  || $In-Company || ''' And ' || $GEXXX901_Paygroup_Alias || ' = '''  || $In-Paygroup || ''')'

          End-If

          Add 1 To #GEX_RC_PAYGROUP_ROWS

          If #GEX_RC_PAYGROUP_ROWS = 1

             Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = '(' || $Include_Condition

          Else

             Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA || ' Or '  || $Include_Condition

          End-If

       End-If

     End-While 



     If #GEX_RC_PAYGROUP_ROWS = 0

       Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = '1=1'

       Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA = 'ALL'

     Else

       Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA || ')'

       Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA

     End-If



     Let $DivCdString = ''''

     Display 'Enter Company Division Code or leave blank to exit.'

     While 1=1

       Input $In-DivCd Maxlen=3 'Company Division Code'

       Uppercase $In-DivCd

       If Rtrim($In-DivCd, ' ') = ''

         Concat '''' With $DivCdString

         Break

       End-If

       If $DivCdString <> ''''

         Concat ''',''' With $DivCdString

       End-If

       Concat $In-DivCd With $DivCdString

     End-While



     If $DivCdString = ''''''

       Let $GEXXX907_INCLUDE_DIV_CD_CRITERIA = '1=1'

       Let $GEXXX907_INCLUDE_DIV_CD_DISPLAY_CRITERIA = 'ALL'

     Else

       Let $GEXXX907_INCLUDE_DIV_CD_CRITERIA = $GEXXX907_Div_CD_Alias || ' In (' || $DivCdString || ')'

       Let $GEXXX907_INCLUDE_DIV_CD_DISPLAY_CRITERIA = $GEXXX907_INCLUDE_DIV_CD_CRITERIA

     End-If



  else	

     Do GEXXX900-Select-Company-Parameters 

     Do GEXXX901-Select-Company-Paygroup-Parameters 

     Do GEXXX907-Select-Div-CD-Parameters   

  end-if

 

  show '$GEXXX900_INCLUDE_COMPANY_CRITERIA              = ' $GEXXX900_INCLUDE_COMPANY_CRITERIA   

  show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA     = ' $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA   

  show '$GEXXX907_INCLUDE_DIV_CD_CRITERIA               = ' $GEXXX907_INCLUDE_DIV_CD_CRITERIA   

  !AXL 1/25/2004 - New Run Cntl logic - End



  do Get-Current-DateTime



  let $sev-error = 'N'

  move 0 to #show_count



!******** Initialize Variables *******

  let #tot_count = 0

  let #RMC_count = 0

  let #write_recs = 0

  let #first_pass = 0

  let #second_pass = 0

  let #job_insert = 0

!CJH = 02/03/1999 - begin 

  let $cut_off_date = '1999-03-28'

!CJH - 02/03/1999 - end

  do convert-from-dtu-date($cut_off_date,$cut_off_date_dbf)

!*************************************

  !sxk 04/22/1999 Begin



  !AXL 2/2004 - Begin

  Evaluate $Prcs_Run_Cntl_ID

    When = 'gexpysad_1'

      let $tablename = 'PS_GEX_R_GEXPYSAD1'

      break

    When = 'gexpysad_2'

      let $tablename = 'PS_GEX_R_GEXPYSAD2'

      break

    When = 'gexpysad_3'

      let $tablename = 'PS_GEX_R_GEXPYSAD3'

      break

    When-Other

      let $tablename = 'PS_GEX_R_GEXPYSAD'

  End-Evaluate

  !let $tablename = 'PS_GEX_R_GEXPYSAD'

  !AXL 2/2004 - End



  do create-temp-table

  !SXK 04/22/1999 End

  do Report

  !SXK 04/22/1999 Begin

  do drop-temp-table

  !SXK 04/22/1999 End

!GBD 07/24/2002 Begin - use Rollback for testing

  do Commit-Transaction

!  do Rollback-Transaction   

!GBD 07/24/2002 End

  date-time () hh:mi:ss &timeEnded

  display 'Report Ended: ' noline

  display &timeEnded

  do stdapi-term

  !*do Reset

end-report



!*********************************************************************

!If this Program is being executed through process scheduler, 

!the run control parameters and calls the main processing procedure.

!Otherwise, interrogates the user for the run control parameters and 

!validates them. If the run control parameters are invalid, stops the

!execution.

!*********************************************************************

begin-procedure Report



date-time () hh:mi:ss &timeBegan

display 'Report Began: ' noline

display &timeBegan



 move 'N' to $Errorfound



 date-time () MM/DD/YYYY &curr_date



 move &curr_date to $curr_date



  do Format-datetime($curr_date,$curr_Date_dbf_1,{DEFMDY},'','native')

  do Convert-To-DTU-Date($curr_Date_dbf_1,$curr_Date_1)

  do Get-Pay-End-Dt

  do convert-to-dtu-date($pay_end_Dt,$pay_end_dt_dtu)

  let $range_begin_dt = $pay_end_Dt_Dtu

  do convert-from-dtu-date($range_begin_dt,$range_begin_dt_dbf)

  do dtu-add-days($pay_end_dt_dtu,4,$range_end_dt)

! let $range_end_Dt = $curr_date_1

  do convert-from-dtu-date($range_end_dt,$range_end_dt_dbf)

  display 'Range begin dt:' noline

  display $range_begin_dt_dbf

  display 'Range End Dt:' noline

  display $range_end_dt_dbf



 if $sev-error = 'Y'

    goto Report-exit

 end-if

  

 if $skip_employee_processing = 'Y'

    goto report-exit

 end-if



 do process-data

 !SXK 04/22/1999 Begin

 do sort-RMC-data

 !SXK 04/22/1999 End

 do fetch-baker-apprentice



Report-Exit:





  date-time () hh:mi:ss &timeProcess

  display #InputTran 99999 noline

  display ' Transactions Processed: ' 

  display #job_insert 99999 noline

  display ' Transactions Inserted into JOB ' 

  display &timeProcess



end-procedure



!*********************************************************************

!Prints the header information in the report.

!*********************************************************************



begin-heading 11 for-reports=(RMC-Report)

  move 'RMC - Employees within 20 Hours for next salary step increase'  to $reporttitle

  LET $REPORTID = 'PYSADRMC'

  #Include 'stdhdg01.sqc'

   

  position (-1)



  print '******************************************************' () center



  print 'NOTE:Manual Overides in the T&A system are possible   ' (+1) center

  print '     when processing your weekly payroll for employees' (+1) center

  print '     listed below                                     ' (+1) center 



  print '******************************************************' (+1) center



  position (+2)



  print 'DEPTID'                 (+1,01)

  print 'EMPLID'                 (,12)

  print 'NAME'                   (,24)

  print 'TOTAL HRS'              (,57)

  print 'PLAN'                   (,70)

  print 'GRADE'                  (,77)

  print 'NEW STEP#'              (,83)

  print 'NEW STEP'               (-1,95)

  print 'REQ.HOURS'              (+1,95)

  print 'NEW STEP'               (-1,107)

  print 'HOURLY RT'              (+1,107)

  print 'LOA TYPE'               (,122)

  print 'LAST DATE'		 (-1,132)

  print ' WORKED  '              (+1,132)

  print 'TERMINATION DATE'	 (,145)



  print '-'                  (+1,01,155) FILL

  print ' '                      (+1,1)



end-heading



!************

begin-heading 9 for-reports=(Bakery-Report)

LET $REPORTID = 'PYSADBAK'

move 'Baker, Cake Decorator, & Meat Apprentices Eligible for Promotion' to $reporttitle

  #include 'stdhdg01.sqc'

  !AXL 5/28/2002 New heading changes for DEPTID page breaking - Begin

  Do Company-Name

  print 'Company'          (+1,1)

  print $Company	   (0,13)

  print $CompanyName	   (0,18)

 

  do Deptid-Name

  print 'Deptid'           (+1,1)

  print $Deptid            (0,13)

  print $DeptName          (0,18)



  print 'EMPLID'                 (+2,2)

  print 'NAME'                   (,14)

  print 'PLAN'                   (,47)

  print 'GRADE'                  (,57)

  print 'STEP'                   (,65)

  print 'HOURLY RATE'            (,73)

  print 'PROMOTION'              (-1,87)

  print 'DUE DATE' 		 (+1,87)

  Print 'STATUS'		 (,99)

  !AXL 5/28/2002 New heading changes for DEPTID page breaking - End

  print '-'                      (+1,01,110) fill

  print ' '                      (+1,1)



end-heading



!************

begin-heading 11 for-reports=(Future-Report)

LET $REPORTID = 'PYSADFUT'

move 'Employees with future rows as of step increase ' to $reporttitle

  #include 'stdhdg01.sqc'

  position (-1)



  print '******************************************************' () center

  print 'NOTE:Hourly rate for these future rows for each employee' (+1) center

  print '     need to be verified.                               ' (+1) center

  print '******************************************************' (+1) center



  position (+3)





  print 'DEPTID'                 (+1,1)

  print 'EMPLID'                 (,12)

  print 'NAME'                   (,24)

  print 'PLAN'                   (,57)

  print 'GRADE'                  (,67)

  print 'NEW STEP'               (,75)

  print 'HOURLY RATE'            (,87)



  print '-'                  (+1,01,109) fill

  print ' '                      (+1,1)



end-heading



!************

begin-heading 7 for-reports=(Report-Log)

move 'Report Log' to $reporttitle

LET $REPORTID = 'PYSADLOG'

  #include 'stdhdg01.sqc'



  print 'Report Log'                 () CENTER



  position (+2)



  print 'Messages:'              (+1,1)



end-heading



!*********************************************************************

! Array Initialization

!*********************************************************************

begin-procedure Array-Initialization

   

   create-array name=Steps                       -

		size=200                         -

		field=SalAdmin:char              -

		field=Grade:char                 -

		field=Step:number:2              -

		field=HourlyRt:number:19.6       -

		field=IncMnthly:number:4.1       -

		field=IncHourly:number:8.2



!** Create default values for array fields **

   move 0 to #init



   while #init <= #Max

     put                 ' '        -

			 ' '        -

			 0          -

			 0          -

			 0          -

			 0          -

       into Steps(#init) SalAdmin   -

			 Grade      -

			 Step       -

			 HourlyRt   -

			 IncMnthly  -

			 IncHourly   



     add 1 to #init

   end-while



   move -1 to #Max

     

end-procedure





!*********************************************************************

! Selects employees from the specific divisons, checks who met the

! service increase steps by verifying against their actual service,

! in terms of either months or hours and required service in the

! SAL_STEP_TBL. For all the employees who have met the service increase

! a new job row will be inserted.

!*********************************************************************



begin-procedure process-data



  !display 'Begin process'



  move 'N' to $rowfound

  move 'N' to $skip_employee_Processing

  

Let $REHIRE_WHERE_Y1 = 'REH'

Let $REHIRE_WHERE_Y2 = 'HIR'

Let $REHIRE_WHERE_Y3 = '01-jan-1900'

  

LET $REHIRE_WHERE_X = '((SELECT JRHX.EFFDT FROM PS_JOB JRHX WHERE JRHX.EMPLID = A.EMPLID AND JRHX.EMPL_RCD  = A.EMPL_RCD  AND JRHX.EFFDT =

        (SELECT MAX(JRHX1.EFFDT) FROM PS_JOB JRHX1 WHERE JRHX.EMPLID = JRHX1.EMPLID AND JRHX.EMPL_RCD  = JRHX1.EMPL_RCD

          AND JRHX1.EFFDT <= ''' || $range_end_dt_dbf || ''' AND JRHX1.ACTION = ''' || $REHIRE_WHERE_Y1 || ''') 

     AND JRHX.EFFSEQ = (SELECT MAX(JRHX2.EFFSEQ) FROM PS_JOB JRHX2 WHERE JRHX.EMPLID = JRHX2.EMPLID AND JRHX.EMPL_RCD = JRHX2.EMPL_RCD

          AND JRHX.EFFDT = JRHX2.EFFDT AND JRHX2.ACTION = ''' || $REHIRE_WHERE_Y1 || ''')

     AND JRHX.EFFDT >=	NVL((SELECT JRHXA.EFFDT FROM PS_JOB JRHXA WHERE JRHXA.EMPLID = JRHX.EMPLID AND JRHXA.EMPL_RCD  = JRHX.EMPL_RCD

    	  AND JRHXA.EFFDT = (SELECT MAX(JRHXA1.EFFDT) FROM PS_JOB JRHXA1 WHERE JRHXA.EMPLID = JRHXA1.EMPLID

          AND JRHXA.EMPL_RCD  = JRHXA1.EMPL_RCD AND JRHXA1.EFFDT <= ''' || $range_end_dt_dbf || ''' AND JRHXA1.ACTION = ''' || $REHIRE_WHERE_Y2 || ''') 

    	  AND JRHXA.EFFSEQ = (SELECT MAX(JRHXA2.EFFSEQ) FROM PS_JOB JRHXA2 WHERE JRHXA.EMPLID = JRHXA2.EMPLID

          AND JRHXA.EMPL_RCD  = JRHXA2.EMPL_RCD AND JRHXA.EFFDT = JRHXA2.EFFDT AND JRHXA2.ACTION = ''' || $REHIRE_WHERE_Y2 || ''')), ''' || $REHIRE_WHERE_Y3 || ''')))'

 



  !AXL 6/15/2004 - Begin

  Evaluate $Prcs_Run_Cntl_ID

    When = 'gexpysad_1'

    When = 'gexpysad_2'

      let $main_step = '(' || $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA || 

                           ' AND ((c.hire_Dt >= ''' ||

                           $cut_off_date_dbf ||

!                              ''') or (c.rehire_dt >= ''' ||   ! GEX isdvnpk      03/25/2008 for rehire dt issue in 90   

                           ''') or (' || $REHIRE_WHERE_X || ' >= ''' ||

!          		 GEX isdvnpk      03/25/2008 for rehire dt issue in 90   

                           $cut_off_date_dbf || ''')) )'

      break

    When-Other

      let $main_step = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA 

  End-Evaluate

  !show '$main_step ' $main_step

  !AXL 6/15/2004 - End



  let #inputtran = 0



begin-select ON-ERROR=SQL-Error-Found('Process-data')



A.EMPLID

   move &A.EMPLID             to $emplid

A.EMPL_RCD

   move &A.EMPL_RCD          to #empl_rcd

A.EFFDT                          &A.EFFDT

A.EFFSEQ

A.DEPTID

   move &A.DEPTID             to $deptid

A.JOBCODE

A.POSITION_NBR

A.POSITION_OVERRIDE

A.POSN_CHANGE_RECORD

A.EMPL_STATUS

A.ACTION

A.ACTION_DT

A.ACTION_REASON

A.LOCATION

A.TAX_LOCATION_CD

A.JOB_ENTRY_DT

A.DEPT_ENTRY_DT

A.POSITION_ENTRY_DT

A.SHIFT

A.REG_TEMP

A.FULL_PART_TIME

A.COMPANY

A.PAYGROUP

A.BAS_GROUP_ID

A.ELIG_CONFIG1

A.ELIG_CONFIG2

A.ELIG_CONFIG3

A.ELIG_CONFIG4

A.ELIG_CONFIG5

A.ELIG_CONFIG6

A.ELIG_CONFIG7

A.ELIG_CONFIG8

A.ELIG_CONFIG9

A.BEN_STATUS

A.COBRA_ACTION

A.EMPL_TYPE

A.HOLIDAY_SCHEDULE

A.STD_HOURS

   move &A.STD_HOURS          to #std_hours

A.OFFICER_CD

A.EMPL_CLASS

A.SAL_ADMIN_PLAN

A.GRADE

A.GRADE_ENTRY_DT

   move &A.GRADE_ENTRY_DT     to $grade_entry_dt

A.STEP

   move &A.STEP               to #step

A.STEP_ENTRY_DT

A.GL_PAY_TYPE

A.ACCT_CD

A.EARNS_DIST_TYPE 

! GEX ISDVNPK 08/27/2007

!A.SALARY_MATRIX_CD

!A.RATING_SCALE

!A.REVIEW_RATING

!A.REVIEW_DT

! GEX ISDVNPK 08/27/2007

A.COMP_FREQUENCY

   move &A.COMP_FREQUENCY     to $comp_frequency

A.COMPRATE

   move &A.COMPRATE           to #old_comprate

A.CHANGE_AMT

   move &A.CHANGE_AMT         to #change_amt

A.CHANGE_PCT

   move &A.CHANGE_PCT         to #change_pct

A.ANNUAL_RT

   move &A.ANNUAL_RT          to #annual_rt

A.MONTHLY_RT

   move &A.MONTHLY_RT         to #monthly_rt 

A.DAILY_RT                                           !GBD 09/20/2002

   move &A.DAILY_RT           to #daily_rt           !GBD 09/20/2002

A.HOURLY_RT

   move &A.HOURLY_RT          to #hourly_rt

A.ANNL_BENEF_BASE_RT

A.SHIFT_RT

A.SHIFT_FACTOR

A.CURRENCY_CD

A.FLSA_STATUS

A.EEO_CLASS

A.FUNCTION_CD

A.HOURLY_RT_FRA

A.ACCDNT_CD_FRA

A.ESTABID

A.LAST_DATE_WORKED

A.GEX_LIGHT_DUTY

A.GEX_CHANGE_RECORD

A.GEX_VOLUN_LOW_HRS

A.GEX_STUDENT_IND

A.GEX_MOON_IND

A.GEX_DEPTID_OVR

A.GEX_ACCT_CD_OVR

A.GEX_GL_EXP_OVR

A.GEX_STEWARD

A.GEX_DUES_EXEMPT

A.GEX_FINAN_CORE

A.GEX_INFLATED_HRS

A.GEX_FP_CODE

A.GEX_SEASONAL_EMP	!AXL 5/14/2001 New job field

B.GEX_COMPANY_DIV_CD

! GEX isdvnpk      03/25/2008 for rehire dt issue in 90  

!C.REHIRE_DT

(SELECT JREH.EFFDT FROM PS_JOB JREH WHERE JREH.EMPLID = A.EMPLID AND JREH.EMPL_RCD  = A.EMPL_RCD  AND JREH.EFFDT =

        (SELECT MAX(JREH1.EFFDT) FROM PS_JOB JREH1 WHERE JREH.EMPLID = JREH1.EMPLID AND JREH.EMPL_RCD  = JREH1.EMPL_RCD

          AND JREH1.EFFDT <= $range_end_dt_dbf AND JREH1.ACTION = 'REH') 

    AND JREH.EFFSEQ = (SELECT MAX(JREH2.EFFSEQ) FROM PS_JOB JREH2 WHERE JREH.EMPLID = JREH2.EMPLID AND JREH.EMPL_RCD = JREH2.EMPL_RCD

          AND JREH.EFFDT     = JREH2.EFFDT AND JREH2.ACTION      = 'REH')

    AND JREH.EFFDT >=	NVL((SELECT JREHA.EFFDT FROM PS_JOB JREHA WHERE JREHA.EMPLID = JREH.EMPLID AND JREHA.EMPL_RCD  = JREH.EMPL_RCD

    	  AND JREHA.EFFDT = (SELECT MAX(JREHA1.EFFDT) FROM PS_JOB JREHA1 WHERE JREHA.EMPLID = JREHA1.EMPLID

          AND JREHA.EMPL_RCD  = JREHA1.EMPL_RCD AND JREHA1.EFFDT <= $range_end_dt_dbf AND JREHA1.ACTION = 'HIR') 

    	  AND JREHA.EFFSEQ = (SELECT MAX(JREHA2.EFFSEQ) FROM PS_JOB JREHA2 WHERE JREHA.EMPLID = JREHA2.EMPLID

          AND JREHA.EMPL_RCD  = JREHA2.EMPL_RCD AND JREHA.EFFDT = JREHA2.EFFDT AND JREHA2.ACTION = 'HIR')), '01-jan-1900')) &C_REHIRE_DT

! GEX isdvnpk      03/25/2008 for rehire dt issue in 90  

C.HIRE_DT

C.TERMINATION_DT





   move &B.GEX_COMPANY_DIV_CD to $gex_company_div_cd

    

    move 'Y' to $rowfound

    move 'N' to $skip_employee_processing

    use-report report-log

    display '********************'

    show &A.COMPANY ' : ' $emplid ' : ' &B.GEX_COMPANY_DIV_CD ' : ' $deptid ' : ' &C.HIRE_DT

    display '********************'

    display 'Hire Date:' noline

    display &c.hire_dt

    display 'ReHire Date:' noline

    display &C_REHIRE_DT    ! &c.rehire_dt ! GEX isdvnpk      03/25/2008 for rehire dt issue in 90  



    if #current-line > 51

       new-page

    end-if



    move &A.COMPANY to $company

    move &A.PAYGROUP to $paygroup



	!**********************************************************     

	!Retrives the Special earnings accumulator, when ever there 

	!is a change in either plan or grade values

	!**********************************************************     



	    if (RTRIM($sal_admin_plan,' ') <> RTRIM(&A.SAL_ADMIN_PLAN,' '))

	 or

	       (RTRIM(&A.GRADE,' ') <> RTRIM($grade,' '))

             move &A.SAL_ADMIN_PLAN to $sal_admin_plan

		 move &A.GRADE to $grade

		 do get-special-accum

	    end-if



	!**********************************************************     



	   if RTRIM(&A.GRADE_ENTRY_DT,' ') <> ''

                display 'Grade entry date(job):' noline

		display &a.grade_Entry_Dt

		if RTRIM(&C_REHIRE_DT,' ') <> ''          ! &C.REHIRE_DT  ! GEX isdvnpk      03/25/2008 for rehire dt issue in 90  

                  do find-rehire-action-row

                  if RTRIM($rehire_reason,' ') = 'REI'

                     do Check-Grade-Date

                  end-if

	        end-if

             !SXK 08/16/98 Begin

               let $demotion_exists = 'N'

               do find-demotion-action-row

               if $demotion_exists = 'Y'

                  do Find-Original-Grade-Entry-Dt

             !SXK 10/19/1998 Begin

                  if $prev_grade_Date_exists = 'N'

                     if &A.EFFDT = $grade_entry_dt  !Means, current grade group code is different

						    !from the previous grade group code

                        do Find-original-HIR-grade-date

                     end-if

                  end-if

             !SXK 10/19/1998 End

               end-if

             !SXK 08/16/98 End

	!SXK 07/01/98 Begin



             if (&A.GRADE = 'ABF' OR 

                &A.GRADE = 'ABP' OR 

                &A.GRADE = 'ACF' OR 

                &A.GRADE = 'ACP' ) 

                

                move $grade_entry_dt to $old_grade_entry_Dt

                do calc-leave-period



             end-if



	!SXK End 



              do Get-Sal-Step-Tbl

               add 1 to #inputtran

	   end-if



        !show 'emplid from main step ' $EMPLID



FROM PS_JOB A, PS_GEX_DEPT_TBL B, PS_EMPLOYMENT C

WHERE A.DEPTID = B.DEPTID

AND   A.GRADE <> ' '

AND   A.SAL_ADMIN_PLAN <> ' '

AND   A.STEP > 0

AND   A.GRADE_ENTRY_DT is not null

AND   ((A.EMPL_STATUS in ('A','L','P'))  or

       (A.ACTION in ('TER','TWP','TWB') and 

!#################################################################

        a.empl_status not in ('U','Q') and  

!#################################################################

        A.EFFDT > $pay_End_dt and A.EFFDT <= $range_end_dt_dbf))

AND   A.EMPLID = C.EMPLID

AND   A.EMPL_RCD = C.EMPL_RCD

!and ((((c.hire_Dt >= $cut_off_date_dbf) or   AXL 06/15/2004

!     (c.rehire_dt >= $cut_off_date_dbf))     AXL 06/15/2004

!AXL 1/25/2004 Run control Cmpy/Paygroup criteria - Begin

AND [$main_step]

!AND '(' || $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA || ')'

!    AND (A.COMPANY in ('GEI','TMK') 

!    and A.PAYGROUP in ('RET','PHM','RE2','PH2','RE4')))

!     OR

! 11/19/2001 - CJH

!     ((A.COMPANY = 'RFI') and A.PAYGROUP in ('RE3','PH3')))

!     ((A.COMPANY = 'RFI') and A.PAYGROUP in ('RE3','PH3','W08')))

!AXL 1/25/2004 Run control Cmpy/Paygroup criteria - End

AND   A.EFFDT = (SELECT MAX(EFFDT)   

		 FROM PS_JOB         

		 WHERE EMPLID = A.EMPLID

		 AND   EMPL_RCD = A.EMPL_RCD

!		 AND   EMPL_STATUS = 'A'

		 AND   EFFDT <= $range_end_dt_dbf)

AND   A.EFFSEQ = (SELECT MAX(C.EFFSEQ)

		  FROM PS_JOB C

		  WHERE C.EMPLID = A.EMPLID

		  AND   C.EMPL_RCD = A.EMPL_RCD

!		  AND   C.EMPL_STATUS = 'A'

		  AND   C.EFFDT = A.EFFDT)

AND   B.EFFDT = (SELECT MAX(D.EFFDT)

		 FROM PS_GEX_DEPT_TBL D

		 WHERE D.DEPTID = B.DEPTID

		 AND   D.EFFDT <= $range_end_dt_dbf)


ORDER BY A.SAL_ADMIN_PLAN DESC, A.GRADE DESC



end-select



if $rowfound = 'N'

   print 'No Employees found for the Service Increases Report.' (+1,1)

else

   position (+2)

   if #current-line > 51

      new-page

   end-if

end-if



end-procedure



!*********************************************************************

! Selects employees from the specific divisons, checks who met the

! service increase steps by verifying against their actual service,

! in terms of either months or hours and required service in the

! SAL_STEP_TBL. For all the employees who have met the service increase

! a new job row will be inserted.

!*********************************************************************



begin-procedure fetch-baker-apprentice



use-report bakery-report



move 'N' to $baker_found



Let $REHIRE_WHERE_Y1 = 'REH'

Let $REHIRE_WHERE_Y2 = 'HIR'

Let $REHIRE_WHERE_Y3 = '01-jan-1900'



Let $REHIRE_WHERE_Y = '((SELECT JRHY.EFFDT FROM PS_JOB JRHY WHERE JRHY.EMPLID = BKR.EMPLID AND JRHY.EMPL_RCD  = BKR.EMPL_RCD  AND JRHY.EFFDT =

        (SELECT MAX(JRHY1.EFFDT) FROM PS_JOB JRHY1 WHERE JRHY.EMPLID = JRHY1.EMPLID AND JRHY.EMPL_RCD  = JRHY1.EMPL_RCD

          AND JRHY1.EFFDT <= ''' || $range_end_dt_dbf || ''' AND JRHY1.ACTION = ''' || $REHIRE_WHERE_Y1 || ''') 

     AND JRHY.EFFSEQ = (SELECT MAX(JRHY2.EFFSEQ) FROM PS_JOB JRHY2 WHERE JRHY.EMPLID = JRHY2.EMPLID AND JRHY.EMPL_RCD = JRHY2.EMPL_RCD

          AND JRHY.EFFDT = JRHY2.EFFDT AND JRHY2.ACTION = ''' || $REHIRE_WHERE_Y1 || ''')

     AND JRHY.EFFDT >=	NVL((SELECT JRHYA.EFFDT FROM PS_JOB JRHYA WHERE JRHYA.EMPLID = JRHY.EMPLID AND JRHYA.EMPL_RCD  = JRHY.EMPL_RCD

    	  AND JRHYA.EFFDT = (SELECT MAX(JRHYA1.EFFDT) FROM PS_JOB JRHYA1 WHERE JRHYA.EMPLID = JRHYA1.EMPLID

          AND JRHYA.EMPL_RCD  = JRHYA1.EMPL_RCD AND JRHYA1.EFFDT <= ''' || $range_end_dt_dbf || ''' AND JRHYA1.ACTION = ''' || $REHIRE_WHERE_Y2 || ''') 

    	  AND JRHYA.EFFSEQ = (SELECT MAX(JRHYA2.EFFSEQ) FROM PS_JOB JRHYA2 WHERE JRHYA.EMPLID = JRHYA2.EMPLID

          AND JRHYA.EMPL_RCD  = JRHYA2.EMPL_RCD AND JRHYA.EFFDT = JRHYA2.EFFDT AND JRHYA2.ACTION = ''' || $REHIRE_WHERE_Y2 || ''')), ''' || $REHIRE_WHERE_Y3 || ''')))'





 !AXL 1/25/2004 - Begin

 Evaluate $Prcs_Run_Cntl_ID

    When = 'gexpysad_1'

    When = 'gexpysad_2'		!AXL 06/15/2004 - Add

      let $fba_step = '(' || $GEXXX907_INCLUDE_DIV_CD_CRITERIA || 

                          ' AND ((BKRE.hire_Dt >= ''' ||

                          $cut_off_date_dbf ||

!                               ''') or (BKRE.rehire_dt >= ''' ||      ! GEX isdvnpk      03/25/2008 for rehire dt issue in 90   

                          ''') or (' ||$REHIRE_WHERE_Y || ' >= ''' ||

!         GEX isdvnpk      03/25/2008 for rehire dt issue in 90             		

                          $cut_off_date_dbf || ''')) )'

      break

    When-Other

      let $fba_step = $GEXXX907_INCLUDE_DIV_CD_CRITERIA 

  End-Evaluate

  !AXL 1/25/2004 - End    

  show '$fba_step ' $fba_step



begin-select ON-ERROR=SQL-Error-Found('Fetch-Baker-Apprentice')

!AXL 5/28/2002 Multiple mods to support page breaking and distinct selections - Begin

!AXL 8/29/2003 Add RULE hint for 8.19 performance

BKR.COMPANY	        ()      on-break print=never

   				level=1

                                save=$prev_cmpy



BKR.DEPTID		()	on-break print=never

   				level=2

				save=$prev_deptid

                                before=Before-Deptid

BKR.EMPLID

   move &BKR.EMPLID             to $emplid

BKR.EMPL_STATUS

   move &BKR.EMPL_STATUS        to $empl_status

BKR.EMPL_RCD

   move &BKR.EMPL_RCD           to #empl_rcd

BKR.EFFDT

   move &BKR.EFFDT              to $effdt

BKR.HOURLY_RT

   move &BKR.HOURLY_RT          to #hourly_rt

BKR.SAL_ADMIN_PLAN

BKR.GRADE

BKR.GRADE_ENTRY_DT

   move &BKR.GRADE_ENTRY_DT     to $grade_entry_dt

BKR.STEP

   move &BKR.STEP               to #step

BKR.STEP_ENTRY_DT

   move &BKR.STEP_ENTRY_DT      to $step_entry_dt

BKRS.EFFDT

BKRS.GEX_INCR_MNTHS

BKR.ACTION_REASON

! GEX isdvnpk      03/25/2008 for rehire dt issue in 90   

!NVL(BKRE.hire_Dt,BKRE.rehire_Dt) &hireDate

NVL(BKRE.hire_Dt,(SELECT JREHZ.EFFDT FROM PS_JOB JREHZ WHERE JREHZ.EMPLID = BKR.EMPLID AND JREHZ.EMPL_RCD  = BKR.EMPL_RCD  AND JREHZ.EFFDT =

        (SELECT MAX(JREHZ1.EFFDT) FROM PS_JOB JREHZ1 WHERE JREHZ.EMPLID = JREHZ1.EMPLID AND JREHZ.EMPL_RCD  = JREHZ1.EMPL_RCD

          AND JREHZ1.EFFDT <= $range_end_dt_dbf AND JREHZ1.ACTION = 'REH') 

    AND JREHZ.EFFSEQ = (SELECT MAX(JREHZ2.EFFSEQ) FROM PS_JOB JREHZ2 WHERE JREHZ.EMPLID = JREHZ2.EMPLID AND JREHZ.EMPL_RCD = JREHZ2.EMPL_RCD

          AND JREHZ.EFFDT     = JREHZ2.EFFDT AND JREHZ2.ACTION      = 'REH')

    AND JREHZ.EFFDT >=	NVL((SELECT JREHZA.EFFDT FROM PS_JOB JREHZA WHERE JREHZA.EMPLID = JREHZ.EMPLID AND JREHZA.EMPL_RCD  = JREHZ.EMPL_RCD

    	  AND JREHZA.EFFDT = (SELECT MAX(JREHZA1.EFFDT) FROM PS_JOB JREHZA1 WHERE JREHZA.EMPLID = JREHZA1.EMPLID

          AND JREHZA.EMPL_RCD  = JREHZA1.EMPL_RCD AND JREHZA1.EFFDT <= $range_end_dt_dbf AND JREHZA1.ACTION = 'HIR') 

    	  AND JREHZA.EFFSEQ = (SELECT MAX(JREHZA2.EFFSEQ) FROM PS_JOB JREHZA2 WHERE JREHZA.EMPLID = JREHZA2.EMPLID

          AND JREHZA.EMPL_RCD  = JREHZA2.EMPL_RCD AND JREHZA.EFFDT = JREHZA2.EFFDT AND JREHZA2.ACTION = 'HIR')), '01-jan-1900'))) &hireDate

! GEX isdvnpk      03/25/2008 for rehire dt issue in 90   



    Let $Company  = &BKR.Company

  

    Let $Deptid   = &BKR.Deptid

    move &BKRS.GEX_INCR_MNTHS to #promo_months



    move 'Y' to $baker_found



    move &BKR.SAL_ADMIN_PLAN to $sal_admin_plan

    move &BKR.GRADE to $grade

 

    !SXK 07/01/98 Begin



    move $grade_entry_dt to $old_grade_entry_Dt

    do convert-to-dtu-date($grade_entry_dt,$grade_entry_dt_dtu) !determine GED

    do convert-to-dtu-date($effdt,$effdt_dtu) !determine date for re-hire proc

    do calc-leave-period

    

    !SXK End 



    do dtu-add-months($grade_entry_dt_dtu,#promo_months,$promo_dt)

    do format-datetime ($asoftoday,$curr_date_cmp,{DEFCMP},'','')  

   

    If &bkr.action_reason ='REI'

       do find-term-period

       if $term_info_found ='Y'

          do dtu-diff-days(&trm_begin_Dt_dtu,$effdt_dtu,#extend_days)

          do find-prior-actv-row

          display 'Prior Actv Gr Entry DT: ' noline

          display &prev_grade_entry_dt_dtu

          do dtu-add-months(&prev_grade_entry_dt_dtu,#promo_months,$promo_dt2)

          display '$promo_dt2: ' noline

          display $promo_dt2



          if #extend_days > 0

             do dtu-add-days($promo_dt2,#extend_days,$promo_dt)   

             display 'diff $promo_dt: ' noline

             display $promo_dt

          end-if

       end-if

    end-if



    let $rpt_print_flag = datetostr(dateadd(strtodate($promo_dt,'YYYY-MM-DD'),'MONTH',-6),'YYYYMMDD')

    let $promo_dt_cmp   = datetostr(strtodate($promo_dt,'YYYY-MM-DD'),'YYYYMMDD')

   

    Do Find-Incr-Type

    let $h_msg ='EE in last 6 mos of apprenticeship - Monitor PYSADRMC rpt(EE''s w/in 20 hrs) for promotion'

    show 'emplid ' $emplid ' $grade_entry_dt ' $grade_entry_dt ' $promo_dt ' $promo_dt ' $curr_date_cmp $rpt_print_flag ' $curr_date_cmp ' '  $rpt_print_flag ' step tyep ' $incr_type



    

    if $curr_date_cmp > $rpt_print_flag

     do print-bakery-report

     add 1 to #deptid_count

    end-if



    !show 'emplid from fba step ' $EMPLID



FROM PS_JOB BKR, 

     PS_GEX_DEPT_TBL BKRB,

     PS_SAL_STEP_TBL BKRS,

     PS_EMPLOYMENT   BKRE

WHERE BKR.EMPLID = BKRE.EMPLID

  !AXL 1/25/2004 - Begin

  AND [$fba_step]

  !AND (BKRB.GEX_COMPANY_DIV_CD = 'GEM' AND ((BKRE.hire_Dt >= $cut_off_date_dbf) or (BKRE.rehire_dt >= $cut_off_date_dbf))

  !   OR 

  !   BKRB.GEX_COMPANY_DIV_CD in ('RMC','RTL','COL','CLE'))

  !AXL 1/25/2004 - End

 AND   ((BKR.EMPL_STATUS in ('A','L','P'))  or

       (BKR.ACTION in ('TER','TWP','TWB') and 

        BKR.EFFDT > $pay_End_dt and BKR.EFFDT <= $range_end_dt_dbf))

 AND   BKR.DEPTID = BKRB.DEPTID

 AND   BKR.GRADE in ('ACP','ACF','ABF','ABP','AMF','AMP','AGF','CCF','MGF')

 AND   BKR.SAL_ADMIN_PLAN <> ' '

 AND   BKR.SAL_ADMIN_PLAN = BKRS.SAL_ADMIN_PLAN

 AND   BKR.GRADE = BKRS.GRADE

 !AND   BKR.STEP = BKRS.STEP  AXL 5/28/2002 New Max(STEP) logic - Begin 

 AND  BKRS.EFFDT = (SELECT MAX(EFFDT) FROM PS_SAL_STEP_TBL

                 WHERE BKRS.SETID          = SETID

                 AND   BKRS.SAL_ADMIN_PLAN = SAL_ADMIN_PLAN

                 AND   BKRS.GRADE          = GRADE

                 AND   EFFDT              <= $range_end_dt_dbf) 

 AND  BKRS.STEP = (SELECT MAX(B_ED.step) FROM PS_SAL_STEP_TBL B_ED

                 WHERE BKRS.SETID = B_ED.SETID

                 and BKRS.SAL_ADMIN_PLAN = B_ED.SAL_ADMIN_PLAN

                 and BKRS.GRADE = B_ED.GRADE

	         AND B_ED.EFFDT <= BKRS.EFFDT) 

 !AXL 5/28/2002 New Max(STEP) - End

 AND  BKR.GRADE_ENTRY_DT is not null

 AND  BKR.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB         

		 WHERE EMPLID = BKR.EMPLID

		 AND   EMPL_RCD = BKR.EMPL_RCD

		 AND   EFFDT <= $range_end_dt_dbf)

 AND  BKR.EFFSEQ = (SELECT MAX(C1.EFFSEQ)

		  FROM PS_JOB C1

		  WHERE C1.EMPLID = BKR.EMPLID

		  AND   C1.EMPL_RCD = BKR.EMPL_RCD

		  AND   C1.EFFDT = BKR.EFFDT)

 AND  BKRB.EFFDT = (SELECT MAX(BKRD.EFFDT)

		 FROM PS_GEX_DEPT_TBL BKRD

		 WHERE BKRD.DEPTID = BKRB.DEPTID

		 AND   BKRD.EFFDT <= $range_end_dt_dbf)



ORDER BY BKR.COMPANY, BKR.DEPTID, BKR.SAL_ADMIN_PLAN DESC,

         BKR.GRADE DESC, BKR.GRADE_ENTRY_DT 

!AXL 5/28/2002 Multiple mods to support page breaking and distinct selections - End

end-select



if $baker_found = 'N'

   print 'No Baker Apprentices found to report for the promotion.' (+1,1)

end-if



use-report report-log



end-procedure



!*********************************************************************

!Retrieves the pay end date for a specific company and paygroup and

!looks for the latest pay cycle that was confirmed

!*********************************************************************

begin-procedure Get-Pay-End-Dt

!GBD 05/30/2002 Begin

!display $curr_date_dbf_1

  let $show_cdbf = 'Curr Date_DBF_1: '||$curr_date_dbf_1

  show $show_cdbf

!GBD 05/30/2002 End



begin-select on-error=sql-error-found('Get-Pay-End-Dt')

PED.PAY_END_DT  &PED.PAY_END_DT



   move &PED.PAY_END_DT to $pay_end_dt

   display 'Pay End Date: ' noline

   display &PED.pay_end_dt

   exit-select



FROM PS_PAY_CALENDAR PED

WHERE PED.PAY_CONFIRM_RUN = 'N'

AND   PED.PAY_SHEETS_RUN = 'Y'

AND   PED.PAY_END_DT = (SELECT MAX(PED2.PAY_END_DT)

			FROM PS_PAY_CALENDAR PED2

			WHERE PED2.PAY_CONFIRM_RUN = 'N'

                  AND   PED2.PAY_SHEETS_RUN = 'Y'

                  AND   PED2.PAY_END_DT <= $curr_Date_dbf_1)



end-select



if RTRIM($pay_end_Dt, ' ') = ''

   print 'No Previous pay cycle sheets ran as of ' (+1,1)

   print $curr_date_dbf_1 ()

   move 'Y' to $skip_employee_processing

end-if





end-procedure



!*********************************************************************

!Retrieves the special earnigns accumulator for this grade

!********************************************************************

begin-procedure get-special-accum



begin-select on-error=sql-error-found('Get-Special-Accum')

GRADE.STEP_INCREM_ACCUM



   move &GRADE.STEP_INCREM_ACCUM to $spcl_accum



FROM PS_SAL_GRADE_TBL GRADE

WHERE GRADE.SAL_ADMIN_PLAN = $sal_admin_plan

  AND GRADE.GRADE = $grade

  AND GRADE.EFF_STATUS = 'A'

  AND GRADE.EFFDT = (SELECT MAX(EFFDT)

		       FROM PS_SAL_GRADE_TBL

		      WHERE SAL_ADMIN_PLAN = $sal_admin_plan

			AND GRADE = $grade

			AND EFFDT <= $pay_end_dt)



end-select



end-procedure



!*********************************************************************

!Retrieves most current rehire action job row 

!********************************************************************* 



begin-procedure Find-rehire-action-row

move 'N' to $rehire_row_found

move ' ' to $rehire_reason



begin-select on-error=sql-error-found('Find-rehire-action-row')

JOB2.ACTION_REASON

  

    move &JOB2.ACTION_REASON to $rehire_reason

    move 'Y' to $rehire_Row_found



FROM PS_JOB JOB2



WHERE JOB2.EMPLID = $emplid

  AND JOB2.EMPL_RCD = #empl_rcd

  AND JOB2.EFFDT = (SELECT MAX(EFFDT)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND ACTION = 'REH'

!SXK 10/19/1998 Should be looking at Rehires with current grade 

                    AND GRADE = $grade

!SXK 10/19/1998 End

                    AND EFFDT <= $range_end_dt_dbf)

  AND JOB2.EFFSEQ = (SELECT MAX(EFFSEQ)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND EFFDT = JOB2.EFFDT)

end-SELECT



end-procedure



!*********************************************************************

!Retrieves most current demotion action job row 

!********************************************************************* 



begin-procedure Find-demotion-action-row



begin-select on-error=sql-error-found('Find-Demotion-action-row')

'XXX'

  

    move 'Y' to $Demotion_Exists



    display 'Demotion Found'



FROM PS_JOB JOB21



WHERE JOB21.EMPLID = $emplid

  AND JOB21.EMPL_RCD = #empl_rcd

  AND JOB21.EFFDT = (SELECT MAX(EFFDT)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND ACTION = 'DEM'

                    AND GRADE = $grade

                    AND EFFDT <= $range_end_dt_dbf)

  AND JOB21.EFFSEQ = (SELECT MAX(EFFSEQ)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND EFFDT = JOB21.EFFDT)

end-SELECT



end-procedure



!*********************************************************************

!Retrieves previous grade entry date

!********************************************************************* 



begin-procedure Find-Original-Grade-Entry-Dt



move 'N' to $prev_grade_date_exists



begin-select on-error=sql-error-found('Find-Original-Grade-Entry-Dt')

JOB22.GRADE_ENTRY_DT

  

  move &JOB22.GRADE_ENTRY_DT to $grade_entry_dt

  do convert-to-dtu-date($grade_entry_Dt,$grade_entry_dt_dtu)

  move 'Y' to $prev_grade_date_exists



FROM PS_JOB JOB22



WHERE JOB22.EMPLID = $emplid

  AND JOB22.EMPL_RCD = #empl_rcd



!  SCM    8/20/2001    BEGIN      commented old code and added new code to ensure that grade

!      entry date logic does not cross terms.  We want the minimum active row that the ee

!      entered that grade. Do not count term status.  [If termed, service w/in grade starts over]. 

!      This sql will select the max terminated row and then the min

!      active row in that grade.  If there are no terms, (return=null), it will use the

!      current effdt.

!      

!  AND JOB22.EFFDT = (SELECT MIN(EFFDT)                              !Used to be MAX 10/19/98

!                   FROM PS_JOB

!                  WHERE EMPLID = $emplid

!                    AND EMPL_RCD = #empl_rcd

!                    AND GRADE = $grade

!                    AND STEP = 1       !commented out 10/19/98 to avoid grades with not first steps

!                    AND EFFDT < $grade_entry_dt)



  AND JOB22.EFFDT = (SELECT MIN(EFFDT)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND GRADE = $grade

                    AND EMPL_STATUS IN ('A', 'L', 'P', 'S')

                    AND EFFDT >= nvl((SELECT MAX(EFFDT)

                                 FROM PS_JOB

                                 WHERE EMPLID = $emplid

                                 AND EMPL_RCD = #empl_rcd

                                 AND EMPL_STATUS = 'T'),EFFDT))

!   SCM     8/20/2001    END

   

  AND JOB22.EFFSEQ = (SELECT MAX(EFFSEQ)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND EFFDT = JOB22.EFFDT)

end-SELECT



end-procedure



!*********************************************************************

!Retrieves original hired grade entry date

!********************************************************************* 



begin-procedure Find-Original-HIR-Grade-date



begin-select on-error=sql-error-found('Find-Original-HIR-Grade-Date')

JOBHIR.GRADE_ENTRY_DT

  

  move &JOBHIR.GRADE_ENTRY_DT to $grade_entry_dt

  do convert-to-dtu-date($grade_entry_Dt,$grade_entry_dt_dtu)

FROM PS_JOB JOBHIR



WHERE JOBHIR.EMPLID = $emplid

  AND JOBHIR.EMPL_RCD = #empl_rcd

  AND JOBHIR.EFFDT = (SELECT MIN(EFFDT)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND EFFDT < $range_end_Dt_dbf)

  AND JOBHIR.EFFSEQ = (SELECT MAX(EFFSEQ)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND EFFDT = JOBHIR.EFFDT)

end-SELECT



end-procedure



!***********************************************************

!Calculates the correct Grade Begin Date based on the 

!JOB History of the employee. Goes back to the history

!rows one by one till there it finds a row, where either

!plan group code or grade is different than the current

!plan group code/grade combination

!***********************************************************

begin-procedure Check-Grade-Date



move $Sal_Admin_Plan to $Prior_Sal_Admin_plan

move $grade to $Prior_Grade

move $grade_entry_dt to $hold_grade_Dt



do get-current-plan-group-code



move $plan_group_cd to $prior_plan_group_cd

move $grade_group_cd to $prior_grade_group_cd



!GBD 07/24/2002 Begin

  let #count_loop = 0

!GBD 07/24/2002 End



while ($grade = $Prior_Grade or ($grade <> $prior_grade and

      $grade_group_Cd = $prior_grade_group_cd)) and

      $plan_group_cd = $prior_plan_group_cd and

      $prior_grade <> ' ' and $prior_plan_group_cd <> ' ' and

      $prior_grade_group_cd <> ' ' and

      $stop_loop <> 'Y'



      do check-prior-grade-entry-date



      if RTRIM(&CR.GRADE_ENTRY_DT,' ') <> ''

!GBD 07/24/2002 Begin

         add +1 to #count_loop

         if #count_loop > 10                       !If the process loops, this will stop it

            if &CR.GRADE_ENTRY_DT = $hold_grade_dt

               let $stop_loop = 'Y'

            end-if

         end-if

!GBD 07/24/2002 End

         move &CR.GRADE_ENTRY_DT to $hold_grade_dt

      else

         let $stop_loop = 'Y'

      end-if



end-while



move $hold_grade_dt to $Grade_Entry_Dt



end-procedure



!*********************************************************************

!Retrieves the current plan group code from salary plan table

!********************************************************************

begin-procedure get-current-plan-group-code



begin-select on-error=sql-error-found('Get-Current-Plan-Group-Code')

PLAN.GEX_PLAN_GRADE_GRP

PLAN.GEX_GRADE_SET_CD

   move &PLAN.GEX_PLAN_GRADE_GRP to $plan_group_cd

   move &PLAN.GEX_GRADE_SET_CD	 to $grade_group_cd



FROM PS_SAL_GRADE_TBL PLAN

WHERE PLAN.SAL_ADMIN_PLAN = $sal_admin_plan

  AND PLAN.GRADE = $grade

  AND PLAN.EFF_STATUS = 'A'

  AND PLAN.EFFDT = (SELECT MAX(EFFDT)

		       FROM PS_SAL_PLAN_TBL

		      WHERE SAL_ADMIN_PLAN = $sal_admin_plan

                        AND PLAN.GRADE = $grade

			AND EFFDT <= $range_end_dt_dbf)

end-select



end-procedure



!***********************************************************

begin-procedure Check-Prior-Grade-Entry-Date

!***********************************************************



move ' ' to $prior_plan_group_cd

move ' ' to $prior_grade

move ' ' to $prior_grade_group_cd



begin-select on-error=sql-error-found('Check-Prior-Grade-Entry-Date')

CR.GRADE

CR.GRADE_ENTRY_DT

GRP.GEX_PLAN_GRADE_GRP

GRP.GEX_GRADE_SET_CD



  move &GRP.GEX_PLAN_GRADE_GRP to $Prior_Plan_group_cd

  move &GRP.GEX_GRADE_SET_CD to $prior_grade_group_cd

  move &CR.GRADE to $Prior_Grade



FROM PS_JOB CR, PS_SAL_GRADE_TBL GRP

WHERE CR.EMPLID = $emplid

AND   CR.EMPL_RCD = #empl_rcd

AND   GRP.SAL_ADMIN_PLAN = CR.SAL_ADMIN_PLAN

AND   GRP.GRADE = CR.GRADE

AND   GRP.EFF_STATUS = 'A'

AND   CR.GRADE_ENTRY_DT is not null

AND   CR.EFFDT = (SELECT Max(CR2.EFFDT)

		  FROM PS_JOB CR2

		  WHERE CR2.EMPLID = $emplid

		  AND   CR2.EMPL_RCD = #empl_rcd

		  AND   CR2.EFFDT < $hold_grade_Dt)

AND   CR.EFFSEQ = (SELECT Max(CR3.EFFSEQ)

		  FROM PS_JOB CR3

		  WHERE CR3.EMPLID = $emplid

		  AND   CR3.EMPL_RCD = #empl_rcd

		  AND   CR3.EFFDT = CR.EFFDT)

AND   GRP.EFFDT = (SELECT Max(EFFDT)

		  FROM PS_SAL_GRADE_TBL

		  WHERE SAL_ADMIN_PLAN = GRP.SAL_ADMIN_PLAN

                  AND   GRADE = GRP.GRADE

		  AND   EFFDT <= CR.EFFDT)



end-select



end-procedure



!*********************************************************************

! Get Salary Step Table

!*********************************************************************

begin-procedure Get-Sal-Step-Tbl

   

!*************************************

!build array - match row with Job data

!*************************************



!*******************************************************************

!Only after the first employee processing, we can go and retrieve

!the old plan and grade, otherwise, array will be empty

!*******************************************************************



if #inputtran > 1

   get $SalAdmin from Steps(0) SalAdmin

   get $HGrade   from Steps(0) Grade

end-if



   if ($sal_admin_plan <> $SalAdmin) or ($grade <> $HGrade)

      do Fill-Array

      if #array_total = 0

	 move 'Y' to $skip_employee_processing

      end-if

   end-if



   move 0 to #out

   let $array_found = 'N'

   move 'N' to $month_elig_met

   move 'N' to $hour_elig_met

   move 'N' to $add_new_job_row



	do Convert-To-DTU-Date($grade_entry_dt, $grade_entry_dt_dtu)



	!Compares the grade_entry_dt to yesterday



	do dtu-diff-months($grade_entry_dt_dtu,$range_begin_dt,#dtu_months_asofthu)

	!Compares the grade_entry_dt to today



	do dtu-diff-months($grade_entry_dt_dtu,$range_end_dt,#dtu_months_asofwed)



	!display 'Range Begin Dt:' noline

	!display $range_begin_dt

	display 'Range End Dt:' noline

	display $range_end_Dt

	display 'Grade Entry Dt:' noline

	display $grade_entry_dt_Dtu 





	display 'Calculated Months(Asof wednesday):' noline

	display #dtu_months_asofwed

	!display 'Calculated Months(Asof yesterday):' noline

	!display #dtu_months_asofthu



        

! CJH - 05/07/2001 - begin

! add grade entry dt range (if statements)

!              do get-service-hours



        if $company = 'RFI' 

           if $grade_entry_dt_dtu > '2001-03-24'

              do get-service-hours

           else 

              do get-service-hours-COD

           end-if

        else

           do get-service-hours

        end-if

! CJH - 05/07/2001 - end





        do get-prof-hrs-and-months

	add #gex_prof_exp_hrs to #sum_mtd_hrs

!########################################################## CWB 04/25/2005 

        add #gex_prof_exp_mths to #dtu_months_asofthu

        add #gex_prof_exp_mths to #dtu_months_asofwed

!##########################################################################

! GBD 05/30/2002 Begin

        Do Format-Number(#gex_prof_exp_hrs,$gex_prof_exp_hrs,'999999.99')

        let $show_gex_prof_exp_hrs = '+ Prof Exp Hrs:       '||$gex_prof_exp_hrs

        Do Format-Number(#sum_mtd_hrs,$calc_hrs,'999999.99')

        let $show_calc_hrs = 'Calculated Hours:     '||$calc_hrs

        show $show_gex_prof_exp_hrs

        show '-------------------------------------------------------------'

        show $show_calc_hrs

!##########################################################################

        show 'gex_prof_exp_mths: ' #gex_prof_exp_mths

	show 'Calculated Months(Asof wednesday) after prof exp mths added:' #dtu_months_asofwed

	show 'Calculated Months(Asof thursday) after prof exp mths added:' #dtu_months_asofthu

!##########################################################################

        show '============================================================='

!        display 'Prof Exp Hrs: ' noline

!        display #gex_prof_exp_hrs

!	display 'Calculated Hours:' noline

!	display #sum_mtd_hrs

! GBD 05/30/2002 End



	

   while $array_found = 'N' and $skip_employee_processing = 'N' and

	 #out <= #array_total



	get $SalAdmin $HGrade #HStep #HourlyRt #Inc_months #Inc_hours from Steps(#out)



	display $SalAdmin noline

	display ' ' noline

	display $sal_admin_plan

	display $HGrade noline

	display ' ' noline

	display $grade

	display #HStep noline

	display ' ' noline

	display #step

	display #HourlyRt noline

	display ' ' noline

	display #hourly_rt

	display #Inc_Months noline

	display '  ' noline

	display #Inc_Hours



!*******************************************************************

!If the current salary step of the employee in the job table is 

!same as the top step in the array, no need to insert a new job row

!because, the employee is already at the top step

!*******************************************************************



      if #out = 0 and #step = #Hstep 

       display 'Equal Top step'

	 let $array_found = 'Y'

	 let $add_new_job_row = 'N'

	 break

      else

	  if #out = 0

	     move #Hstep to #top_Step

             move #Inc_Months to #promo_months

	    end-if

      end-if   



      if #step > #Hstep

	 let $array_found = 'Y'

	 let $add_new_job_row = 'N'

	 break

      end-if



!*******************************************************************

!Processes further, if the required service months field is populated

!for this step, otherwise, processing will continue at the "else" part

!*******************************************************************



move 'N' to $dates_equal

	if #inc_months > 0

display 'In months calculation'

display 'Req. Months:' noline

display #inc_months



           let $month_fraction = to_char(#inc_months)

           unstring $month_Fraction by '.' into $month_integer $month_fraction

           let #month_integer = to_number($month_integer)

           let #month_fraction = to_number($month_fraction)

           display 'Fraction:' noline

           display #month_fraction

           if #month_Fraction > 0

display 'Fraction > 0'

              if #dtu_months_asofwed = #dtu_months_Asofthu  

                 move 'Y' to $dates_equal                   

                 do dtu-add-months($grade_entry_dt_dtu,#dtu_months_asofwed,$calc_date)

                 display 'Calc Date:' noline

                 display $calc_Date

                 do dtu-diff-days($calc_date,$range_end_dt,#diff_days)

                 display 'Fraction Days(as of today):' noline

                 display #diff_days

                 if (#diff_days >= 15) and (#dtu_months_asofwed = #month_integer)

                    add 0.5 to #dtu_months_asofwed

                 end-if

              else

                 move 'N' to $dates_equal

              end-if

           end-if



!display 'Before comparing'



!		if #dtu_months_asofwed <> #dtu_months_Asofthu

!		   if #dtu_months_asofwed = #inc_months

		   if #dtu_months_asofwed >= #inc_months



!If termination happens prior to meeting the required months, 

!skips employee processing

                    if RTRIM(&C.TERMINATION_DT,' ') <> ''

                      do dtu-add-months($grade_Entry_dt_dtu,#inc_months,$new_calc_grade_Dt_Dtu)

                      unstring $new_calc_grade_dt_dtu by '-' into $new_year $new_month $new_date

                      let $new_comp_date = $new_year||$new_month||$new_date

                      do convert-to-dtu-date(&C.TERMINATION_DT,$new_termination_dt_dtu)

                      unstring $new_termination_Dt_dtu by '-' into $new_year1 $new_month1 $new_date1

                      let $new_comp_date1 = $new_year1||$new_month1||$new_date1

                      if $new_comp_date1 < $new_comp_date

                         let $array_found = 'Y'

                         move 'N' to $add_new_job_row

                         break

                      end-if

                    end-if

!Termination process end



        	    do dtu-diff-months($grade_entry_dt_dtu,$pay_end_dt_dtu,#dtu_months_asofsun)

!##########################################################################

                    add #gex_prof_exp_mths to #dtu_months_asofsun

!##########################################################################

                    if #dtu_months_asofsun < #inc_months

                       print 'NOTE:employee met the service between monday and wednesday; ' (+1,1)

                       print $emplid ()

                    end-if

display 'After compare'



		!*************************************************      

		!Employee met the required months specified 

		!in the step table as of today

		!So, the next step for the employee salary administration

		!will be the step above the current step, we are 

		!processing. (Because the array has been created 

		!in the step descending order

		!*************************************************

			

			 move 'Y' to $Month_elig_met



		   end-if

!             else

!               if $demotion_Exists = 'Y' and #dtu_months_asofwed >= #inc_months

!                  move 'Y' to $Month_elig_met

!               end-if

!             end-if



!*******************************************************************

!If both required months and required hours are populated on the

!salary step table, we have to check if hours worked in the current

!grade has met the required hours. While calculating the required

!hours, it is necessary to find any professional experience hours

!and add to the service hours. If the hours are met, the new

!job effdt will be the Sunday of next pay period. Otherwise, if the

!the employee is of RMC division, and he is within the 20 hours 

!required hours, prints a report so that, the right hourly rate

!will be applied in the time&attendance by the store manager for this

!employee in the next pay period.

!*******************************************************************



		if #inc_hours > 0 and $month_elig_met = 'Y'



	display 'In Months and Hours'

	display 'Req. Hours:' noline

	display #inc_hours



		   if #sum_mtd_hrs >= #inc_hours

		      

		      move 'Y' to $Hour_elig_met

                    if #Hstep = #top_Step

                       move 'N' to $add_new_job_row

                       print 'Employee should have been promoted;Already at Top Step and qualified for promotion' (+1,1)

                       print 'Emplid:'()

                       print $emplid ()

                    else

		       

			   let #new_step = #Hstep + 1 

                       if #new_step > #step

                          move 'Y' to $add_new_job_Row

                       end-if



                    end-if



 

         		let #new_hourly_rt = #prior_hourly_Rt



		      move 'Y' to $array_found

                      do convert-to-dtu-date($pay_end_Dt,$pay_end_dt_dtu)

                      do dtu-add-days($pay_end_dt_dtu,1,$new_job_effdt)



		      break



		   else

			let #total_hrs = #sum_mtd_hrs + 20

                        display #total_hrs



			if (#total_hrs >= #inc_hours) and

			    (($gex_company_div_cd = 'RMC') or 

				($gex_company_div_cd = 'RPH'))

			   let #new_step = #Hstep + 1 

                           

			     let #new_hourly_Rt = #prior_hourly_rt

		!		move 'Y' to $array_found

				!SXK 04/22/1999 Begin 

			       do Create-RMC-Report

				!SXK 04/22/1999 End

			end-if

	

		   end-if

		

		else

                  if $month_elig_met = 'Y'

			   move 'Y' to $array_found

                    if #Hstep = #top_Step

                       move 'N' to $add_new_job_row

                       print 'Employee should have been promoted;Already at Top Step and qualified for promotion' (+1,1)

                       print 'Emplid:'()

                       print $emplid ()

                    else

       		   let #new_step = #Hstep + 1 

 !                     if $demotion_exists = 'Y'

                         if #new_step > #step

                            move 'Y' to $add_new_job_row

                         end-if

 !                     else

 !                        move 'Y' to $add_new_job_row

 !                     end-if



 !                    let $new_job_effdt = $curr_date_1

                      do convert-to-dtu-date($pay_end_Dt,$pay_end_dt_dtu)

                      do dtu-add-days($pay_end_dt_dtu,1,$new_job_effdt)



                    end-if



			 let #new_hourly_rt = #prior_hourly_rt

			   break

		  end-if

		end-if

	

	else



!*******************************************************************

!If required hours are populated on the

!salary step table, we have to check if hours worked in the current

!grade has met the required hours. While calculating the required

!hours, it is necessary to find any professional experience hours

!and add to the service hours. If the hours are met, the new

!job effdt will be the sunday of next pay period. Otherwise, if the

!the employee is of RMC division, and he is within the 20 hours 

!required hours, prints a report so that, the right hourly rate

!will be applied in the time&attendance by the store manager for this

!employee in the next pay period.

!*******************************************************************



	 if #inc_hours > 0



	display 'In Hours'

	display 'Req. Hours:' noline

	display #inc_hours



		   if #sum_mtd_hrs >= #inc_hours

		    move 'Y' to $Hour_elig_met

                    if #Hstep = #top_Step

                       move 'N' to $add_new_job_row

                       print 'Employee should have been promoted;Already at Top Step and qualified for promotion' (+1,1)

                       print 'Emplid:'()

                       print $emplid ()

                    else

			   let #new_step = #Hstep + 1 

                       if #new_step > #step

                          move 'Y' to $add_new_job_Row

                       end-if



                    end-if



		  let #new_hourly_rt = #prior_hourly_rt

                      do convert-to-dtu-date($pay_end_Dt,$pay_end_dt_dtu)

                      do dtu-add-days($pay_end_dt_dtu,1,$new_job_effdt)



			move 'Y' to $array_found

			break

		   else

			let #total_hrs = #sum_mtd_hrs + 20

			if (#total_hrs >= #inc_hours) and

! 05/03/2001 - CJH - use paygroups rather than Company div Cds

!			    (($gex_company_div_cd = 'RMC') or 

!				($gex_company_div_cd = 'RPH') or

!                                ($gex_company_div_cd = 'CLV') or

!                                ($gex_company_div_cd = 'CLE') or

!                                ($gex_company_div_cd = 'CLR')) 

            ((&A.PAYGROUP = 'RE2') or (&A.PAYGROUP = 'PH2') or (&A.PAYGROUP = 'RE3') or (&A.PAYGROUP = 'PH3')

                or (&A.PAYGROUP = 'RE4'))               !SCM 8/20/2001  added RE4    

! 05/03/2001 - CJH - end

			   let #new_step = #Hstep + 1 

			     let #new_hourly_Rt = #prior_hourly_rt

     !				move 'Y' to $array_found

				!SXK 04/22/1999 Begin

			       do Create-RMC-Report

				!SXK 04/22/1999 End

			end-if

		   end-if

	   end-if



	end-if            



	add 1 to #out

        move #HourlyRT to #prior_hourly_rt

	

   end-while 



!*******************************************************************

!If the employee is a baker apprentice and reached top step in the

!grade, prints a report so that store managers know that this

!employee will be promoted soon

!*******************************************************************



display 'New Job row Flag:' noline

display $add_new_job_row



   if $add_new_job_Row = 'Y'



!*******************************************************************

!If the baker apprentice is not at the top step in the grade yet, but

!moved to a higher step, it is necessary to calculate the step 1 hourly

!rate from this grade and subtract hourly rate of step 1 of baker

!clerk to get the increment in hourly rate for each step. It is also

!necessary to retrieve the number of steps in between the current step

!of employee and new step the employee is eligible to give the right

!hourly rate.



!If the employee is not a baker apprentice but met the service increase

!and his current hourly rate in the job table is higher than the 

!hourly rate of the step the employee is eligible,(and it is not due 

!to demotion action)then, keeps the current job hourly rate but 

!the employee's step will be incremented.

!*******************************************************************



!GBD 07/24/2002 Begin

        display '**********************'

        display '   Apprentice Logic   '

        display '**********************'

        display 'Sal Admin Plan: ' noline

        display $sal_admin_plan

        display 'Grade:         ' noline

        display $grade

        display 'Gex Co Div Cd: ' noline

        display $gex_company_div_cd

        display 'Plan Group Cd: ' noline

        display $plan_group_cd

        display '**********************'

!GBD 07/24/2002 End



	if (($grade = 'ACP') OR 

	   ($grade = 'ACF') or ($grade = 'ABP') or 

	   ($grade = 'ABF')) and

	 (($gex_company_div_cd = 'GEM') or 

	  ($gex_company_div_cd = 'GPH') or

	  ($gex_company_div_cd = 'VDO') or 

	  ($gex_company_div_cd = 'RTL') or

!SXK 03/15/2000 Added the following logic to take care of RMC division also  

!GBD 07/24/2002 Begin

!	  (($gex_company_div_cd = 'RMC') or ($gex_company_div_cd = 'RPH')

	  ((($gex_company_div_cd = 'RMC') or ($gex_company_div_cd = 'RPH'))

           and ($plan_group_cd <> 'WIL')))

!GBD 07/24/2002 End



!GBD 08/09/2002 Begin

!GEXHR_851_E2248_01  2014-12-16 Vahini Katta Begins

              !if ($sal_admin_plan = 'RCH' or $sal_admin_plan = 'CHP')

              

              evaluate $sal_admin_plan

	         when = 'RCH'

	      	 when = 'CHP'

	      	 when = 'CNF'

	      	 when = 'BDC'

		 when = 'CLV'

		 when = 'MAH'

		 when = 'IND'

		 when = 'HER'

		 when = 'STW'

		 when = 'STK'

		 when = 'GRN'

		 when = 'MAS'

		 when = 'HRT'

		 when = 'NMA'

		 when = 'WSH'

		 when = 'AKN'

		 when = 'BTL'

		 when = 'WIL'

		 when = 'CNT'

		 when = 'JAM'

		 when = 'HOW'

		 when = 'BDM'

		 when = 'POR'

		 when = 'ALL'

		 when = 'FLN'

		 when = 'WAD'
		 
!Surya Sobha - 04/26/2016 - Added the below Sal Admin Plans - Start 
		 when = 'CAN'

		 when = 'COL'

		 when = 'EDN'

		 when = 'GEM'

		 when = 'GIR'

		 when = 'LAT'

		 when = 'MRK'

		 when = 'NVS'

		 when = 'PHC'

		 when = 'SDY'

		 when = 'SFD'

		 when = 'SMT'

		 when = 'WMF'

		 when = 'WVA'
!Surya Sobha - 04/26/2016 - Added the below Sal Admin Plans - End 

                     if #hourly_rt >= #new_hourly_rt and (&A.ACTION <> 'DEM')

                        let #new_hourly_rt = #hourly_rt

                     end-if

                      break

	      	 when-other

	      	      

 !GEXHR_851_E2248_01 2014-12-16 Vahini Katta Ends                

            !else

!GBD 08/09/2002 End



               do get-apprentice-step-one-rate

	       do get-clerk-step-one-rate

	    

	       let #Step_Increments = #new_Step - #step

               display 'Step Increments:' noline

               display #step_increments

               let #HourlyRt_Increment = #apprentice_rt - #clerk_rt

               display 'Hourly Rt Inc:' noline

               display #hourlyrt_increment

               display 'Current Hourly Rt:' noline

               display #hourly_rt

               let #new_hourly_rt = (#step_increments * #hourlyrt_Increment) + #hourly_rt

!GBD 08/09/2002 Begin

!               display 'New Hourly Rt:'

!               display #new_hourly_rt

            !end-if   

            break

            end-evaluate                        

!GBD 08/09/2002 End



	else

            if #hourly_rt >= #new_hourly_rt and (&A.ACTION <> 'DEM')

               let #new_hourly_rt = #hourly_rt

            end-if

	end-if          



display 'New Hourly Rt:' noline

display #new_hourly_rt





!** Calculates comprate, compchange, and compchange percent***



      do Determine-Comp-Freq

display 'After comp Freq'

      do Calc-Comprate

display 'after comp rate'

      do Calc-Comp-Change

display 'after Comp Change'

      do Insert-Job-Record

display 'After Insert'



   end-if





end-procedure



!*********************************************************************

!Calculates Leave period employee was in, if any.

!********************************************************************* 



begin-procedure Calc-Leave-Period

move 'Y' to $Leave_Info_Found

move $grade_entry_dt to $leave_effdt

do convert-to-dtu-date($grade_entry_dt,$grade_entry_dt_dtu)



display 'Calc-Leave-Period'



while $leave_info_found = 'Y'



   do find-leave-period



end-while



do convert-from-dtu-date($grade_entry_dt_dtu,$grade_entry_dt)



end-procedure



!*********************************************************************

!Calculates Leave period employee was in, if any.

!********************************************************************* 



begin-procedure find-leave-period



move 'N' to $leave_info_found



display 'Find-Leave-Period'

let #diff_days = 0



begin-select on-error=sql-error-found('Find-Leave-Period')

LV.EFFDT

to_char(LV.EFFDT,'YYYY-MM-DD') &lv_begin_Dt_dtu

  

    move 'Y' to $leave_info_found

    do find-leave-period-end-date

    if $end_date_found = 'Y'

       do dtu-diff-days(&lv_begin_dt_dtu,&lv_end_Dt_Dtu,#diff_days)

       display 'Leave begin Date:' noline

       display &lv_begin_dt_dtu

       display 'Leave End Date:' noline

       display &lv_end_Dt_dtu

       if #diff_days > 0

          do dtu-add-days($grade_entry_dt_dtu,#diff_days,$grade_entry_dt_dtu)

       end-if

       display 'New Grade Entry Date:' noline

       display $grade_entry_dt_dtu

       move &lv1.effdt to $leave_Effdt

    else

       if $empl_status = 'L' OR $empl_status = 'P'

          do convert-to-dtu-date($pay_end_dt,$lv_end_dt_dtu)

          do dtu-diff-days(&lv_begin_dt_dtu,$lv_end_dt_dtu,#diff_days)

          display 'Leave begin Date:' noline

          display &lv_begin_dt_dtu

          display 'Leave End Date:' noline

          display $lv_end_Dt_dtu

          if #diff_days > 0

             do dtu-add-days($grade_entry_dt_dtu,#diff_days,$grade_entry_dt_dtu)

          end-if

          display 'New Grade Entry Date:' noline

          display $grade_entry_dt_dtu

       end-if



       move 'N' to $leave_info_found



    end-if





FROM PS_JOB LV



WHERE LV.EMPLID = $emplid

  AND LV.EMPL_RCD = #empl_rcd

  AND LV.EFFDT = (SELECT MIN(EFFDT)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND EMPL_STATUS IN ('L','P')

                    AND EFFDT > $leave_effdt

                    AND EFFDT <= $range_end_dt_dbf)

  AND LV.EFFSEQ = (SELECT MIN(EFFSEQ)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND EFFDT = LV.EFFDT)

end-SELECT



end-procedure



!*********************************************************************

!Finds the Leave Period End Date

!********************************************************************* 



begin-procedure Find-Leave-Period-End-Date

move 'N' to $end_date_found



begin-select on-error=sql-error-found('Find-Leave-Period-End-Date')

to_char(LV1.EFFDT,'YYYY-MM-DD') &lv_end_Dt_dtu

LV1.EFFDT  



    move 'Y' to $end_date_found



FROM PS_JOB LV1



WHERE LV1.EMPLID = $emplid

  AND LV1.EMPL_RCD = #empl_rcd

  AND LV1.EFFDT = (SELECT MIN(EFFDT)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND EMPL_STATUS = 'A'

                    AND EFFDT > &LV.EFFDT

                    AND EFFDT <= $range_end_Dt_dbf)

  AND LV1.EFFSEQ = (SELECT MIN(EFFSEQ)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND EFFDT = LV1.EFFDT)

end-SELECT



end-procedure



!*******************************************************************

!Fills the array with the steps information 

!*******************************************************************



begin-procedure Fill-Array



move 0 to #in

CLEAR-ARRAY name=Steps



begin-select on-error=sql-error-found('Fill-Array')

SP.SAL_ADMIN_PLAN

SP.GRADE

SP.STEP

SP.HOURLY_RT

SP.GEX_INCR_MNTHS

SP.INCREM_HOURS



   display 'Counter:' noline

   display #in

   display 'Step:' noline

   display &sp.step

   display 'Hourly rt:' noline

   display &sp.hourly_rt



   put &SP.SAL_ADMIN_PLAN  &SP.GRADE  &SP.STEP  &SP.HOURLY_RT  &SP.GEX_INCR_MNTHS  &SP.INCREM_HOURS into Steps(#in)



   add 1 to #in



FROM PS_SAL_STEP_TBL SP

WHERE SP.SAL_ADMIN_PLAN = $sal_admin_plan

AND   SP.GRADE = $grade

AND   SP.EFFDT = (SELECT MAX(SP2.EFFDT) FROM

		  PS_SAL_STEP_TBL SP2

		  WHERE SP2.SAL_ADMIN_PLAN = $sal_admin_plan

		  AND   SP2.GRADE = $grade

		  AND   SP2.EFFDT <= $range_end_dt_dbf)

ORDER BY SP.STEP DESC

end-select



   let #array_total = #in

   display 'Array Total: ' noline

   display #array_total



! SXK 05/18/98 Added Error processing logic

if #in = 0

  

   print 'No Steps found for Salary Plan:' (+1,1)

   print $Sal_Admin_Plan ()

   print '; Grade:' ()

   print $Grade ()



end-if

  

end-procedure

!*********************************************************



begin-procedure get-service-hours-COD



move 'N' to $errorfound

move 'N' to $found

let #sum_mtd_hrs = 0



begin-select on-error=sql-error-found('get-service-hours-COD')

SUM(SHC.HRS_MTD) &sum_service_COD



!GBD 05/30/2002 Begin

   Let #sum_service_cod = &sum_service_COD

   Do Format-Number(#sum_service_cod,$sum_service_cod,'999999.99')

   Let $show_mtd_cod = 'Sum of 2001 MTD Hrs:  '||$sum_service_cod

   show $show_mtd_cod

!   display 'Sum of MTD hours (COD) : ' noline

!   display &sum_service_COD 

!GBD 05/30/2002 End

   move &sum_service_COD to #sum_mtd_hrs



FROM PS_EARNINGS_BAL SHC



WHERE SHC.EMPLID = $emplid

  AND SHC.COMPANY = $company

  AND SHC.BALANCE_ID = 'CY'

  AND SHC.BALANCE_YEAR = 2001

  and SHC.BALANCE_PERIOD > 03

  AND SHC.ERNCD = $spcl_accum

  AND SHC.SPCL_BALANCE = 'Y'

end-SELECT



do calculate-sum-of-mtd-hrs-COD



end-procedure    

!*********************************************************

begin-procedure calculate-sum-of-mtd-hrs-COD



begin-select on-error=sql-error-found('calculate-sum-of-mtd-hrs-COD')

SUM(RNGC.HRS_YTD) &sum_mtd_hrs_COD



!GBD 05/30/2002 Begin

   Let #sum_mtd_hrs_cod = &sum_mtd_hrs_COD

   Do Format-Number(#sum_mtd_hrs_cod,$sum_mtd_hrs_cod,'999999.99')

   Let $show_ytd_cod = 'Sum of 2002 YTD Hrs:  '||$sum_mtd_hrs_cod

   show $show_ytd_cod

   show '-------------------------------------------------------------'

!   display 'Sum of YTD hours (COD) : ' noline

!   display &sum_mtd_hrs_COD

!GBD 05/30/2002 End

   add &sum_mtd_hrs_COD to #sum_mtd_hrs



   #debug9 display $spcl_accum

   #debug9 display #rnctl_yyyy

   #debug9 display #prev_mm

   #debug9 display 'Sum of MTD:'

   #debug9 display #sum_mtd_hrs

   #debug9 display 'Pay Period:'

   #debug9 display #pay_period

   #debug9 display 'Week Hours:'

   #debug9 display #week_hrs



FROM PS_EARNINGS_BAL RNGC

WHERE RNGC.EMPLID = $emplid

  and rngC.company = $company

  AND RNGC.BALANCE_ID = 'CY'

  AND RNGC.BALANCE_YEAR > 2001

  AND RNGC.ERNCD = $spcl_accum

  AND RNGC.SPCL_BALANCE = 'Y'

  AND RNGC.BALANCE_PERIOD = (SELECT MAX(EB1.BALANCE_PERIOD)

				FROM PS_EARNINGS_BAL EB1         !SCM 10/15/2002 added alias

				WHERE EB1.EMPLID = $emplid

                                AND EB1.COMPANY = $company

				AND EB1.BALANCE_ID = 'CY'

				AND EB1.BALANCE_YEAR = RNGC.BALANCE_YEAR

				AND EB1.ERNCD = $spcl_accum)     !SCM 10/15/2002 added

end-SELECT



!GBD 05/30/2002 Begin

  Do Get-Current-Unconfirmed-Pay-Hours

!GBD 05/30/2002 End



end-procedure    



!GBD 05/30/2002 Begin

!**********************************************************

!Retrieves the total hours for the special accumulator for

!the COD employee from ps_pay_oth_earns table rather than

!from ps_earnings_bal table for the current open pay. These

!hours are not yet accumulated on Earnings Balance.

!**********************************************************

begin-procedure Get-Current-Unconfirmed-Pay-Hours

   move 'N' to $hrs_found



begin-select on-error=sql-error-found('Get-Current-Unconfirmed-Pay-Hours')

SUM(CO.oth_hrs)   &CO.oth_hrs



! GBD 05/30/2002 Begin

   let #co_oth_hrs = &CO.oth_hrs

   show 'Get-Current-Unconfirmed-Pay-Hours'

!   let $show_cw = $emplid||' '||$company||' '||$grade_entry_dt||' '||$spcl_accum||' '||$sal_admin_plan||' '||$grade

!   show $show_cw

   Do Format-Number(#sum_mtd_hrs,$sum_mtd_hrs,'999999.99')

   let $show_sum_mtd_hrs = 'Sum Earnings MTD Hrs: '||$sum_mtd_hrs

   Do Format-Number(#co_oth_hrs,$co_oth_hrs,'999999.99')

   let $show_co_oth_hrs = '+ Current Pay Hours:  '||$co_oth_hrs



!   display 'Current Pay Hrs (COD): ' noline

!   display &CO.oth_hrs

! GBD 05/30/2002 End



   move 'Y' to $hrs_found

   add &CO.oth_hrs to #sum_mtd_hrs



! GBD 05/30/2002 Begin

   show $show_sum_mtd_hrs

   show $show_co_oth_hrs

   show '-------------------------------------------------------------'

   Do Format-Number(#sum_mtd_hrs,$sum_tot_mtd_hrs,'999999.99')

   let $show_tot_mtd_hrs = 'TOT MTD Hrs:          '||$sum_tot_mtd_hrs

   show $show_tot_mtd_hrs



!   display 'First Month Hours: ' noline

!   display #First_month_hrs

! GBD 05/30/2002 End



FROM PS_PAY_EARNINGS CE,

     PS_PAY_OTH_EARNS CO



WHERE CE.EMPLID = $emplid

AND   CE.COMPANY = $company

AND   CE.COMPANY = CO.COMPANY

AND   CE.PAYGROUP = CO.PAYGROUP

AND   CE.PAY_END_DT = CO.PAY_END_DT

AND   CE.PAGE_NUM = CO.PAGE_NUM

AND   CE.LINE_NUM = CO.LINE_NUM

AND   CE.ADDL_NBR = CO.ADDL_NBR



and   ce.sepchk   = co.sepchk          ! CWB 07/07/2005   Add key field to join

and   ce.off_cycle = co.off_cycle      ! CWB 07/07/2005   Add key field to join



AND   EXISTS (SELECT 'SPCL'

                     FROM PS_EARNINGS_SPCL SPCL

                    WHERE SPCL.ERNCD_SPCL = $spcl_accum

		      AND SPCL.ERNCD = CO.ERNCD)



AND   CE.PAY_END_DT = $pay_end_dt

AND   CE.OK_TO_PAY = 'Y'

!AND EXISTS (SELECT 'CHECK'

!		FROM PS_PAY_CHECK

!		WHERE COMPANY = CE.COMPANY

!		AND PAYGROUP = CE.PAYGROUP

!		AND PAY_END_DT = CE.PAY_END_DT

!		AND PAGE_NUM = CE.PAGE_NUM

!		AND LINE_NUM = CE.LINE_NUM

!		AND SEPCHK = CE.SEPCHK

!		AND EMPLID = CE.EMPLID

!		AND EMPL_RCD = CE.EMPL_RCD)

!		AND PAYCHECK_NBR > 0)

end-select



end-procedure

!GBD 05/30/2002 End



!*********************************************************

!Retrieves the total hours for the special accumulator for

!the employee from ps_pay_oth_earns table rather than from

!ps_earnings_bal table. This is because, we cannot get the 

!total hours for an employee based on a starting date from

!ps_earnings_bal table. So, we go to the pay_oth_earns table

!to find which week the grade_begin_dt falls and accumulate

!the hours from that week onwards till the month end.

!

!Later, we go to the ps_earnings_bal to retrieve the rest of

!hours.

!**********************************************************

begin-procedure Get-Service-Hours

   move 'N' to $hrs_found

 let #sum_mtd_hrs = 0



let $grade_entry_dt_mm = substr($grade_entry_dt_Dtu,6,2)

let $grade_entry_dt_yyyy = substr($grade_entry_dt_Dtu,1,4)

let $grade_entry_dt_dd = substr($grade_entry_Dt_dtu,9,2)



begin-select on-error=sql-error-found('Get-Service-Hours')

/*+ INDEX */

SUM(OTH.oth_hrs)   &OTH.oth_hrs



   move 'Y' to $hrs_found

   move &OTH.oth_hrs to #sum_mtd_hrs



!GBD 05/30/2002 Begin

   show 'Get-Service-Hours'

   Do Format-Number(#sum_mtd_hrs,$service_hrs,'999999.99')

   let $show_service_hrs = 'Service Hrs:          '||$service_hrs

   show $show_service_hrs

!GBD 05/30/2002 End



FROM PS_PAY_EARNINGS ERN,

     PS_PAY_OTH_EARNS OTH



WHERE ERN.EMPLID = $emplid

And   [$GEXXX900_Include_Company_Criteria]   		!AXL 1/25/2004 - New

!AND   ERN.COMPANY IN ('BRM','GEI','RTP','TMK','RFI')   -AXL 1/25/2004 - Disable

AND   ERN.COMPANY = OTH.COMPANY

AND   ERN.PAYGROUP = OTH.PAYGROUP

AND   ERN.PAY_END_DT = OTH.PAY_END_DT

AND   ERN.PAGE_NUM = OTH.PAGE_NUM

AND   ERN.LINE_NUM = OTH.LINE_NUM

AND   ERN.ADDL_NBR = OTH.ADDL_NBR



and   ern.sepchk   = oth.sepchk          ! CWB 07/07/2005  Add key field to join

and   ern.off_cycle = oth.off_cycle      ! CWB 07/07/2005  Add key field to join



!SXK 11/16/1999 Begin - Modified to exists condition

AND   EXISTS (SELECT 'SPCL'

                     FROM PS_EARNINGS_SPCL SPCL

                    WHERE SPCL.ERNCD_SPCL = $spcl_accum

		      AND SPCL.ERNCD = OTH.ERNCD)

!SXK 11/16/99 Also modified subselect to have nvl condition

AND   ERN.PAY_END_DT >= (SELECT nvl(Max(ERN2.PAY_END_DT),$grade_entry_dt)

			  FROM PS_PAY_EARNINGS ERN2

			  WHERE ERN2.EMPLID = $emplid

                          !AXL 1/25/2004 - Begin

			  !AND   ERN2.COMPANY in ('BRM','GEI','RTP','TMK','RFI')

                          AND ERN2.COMPANY in (select distinct ERN.company

                                               from ps_company_tbl ERN

                                                 where [$GEXXX900_Include_Company_Criteria]) 

                          !AXL 1/25/2004 - End

                          AND   ERN2.PAY_END_DT <= $grade_Entry_dt)

AND substr(to_char(ERN.PAY_END_DT,'YYYY-MM-DD'),1,4) = $grade_entry_dt_yyyy

AND substr(to_char(ERN.PAY_END_DT,'YYYY-MM-DD'),6,2) = $grade_entry_dt_mm

!SXK 11/16/1999 Modified to check if pay_check has paycheck_nbr assigned

AND EXISTS (SELECT 'CHECK'

		FROM PS_PAY_CHECK

		WHERE COMPANY = ERN.COMPANY

		AND PAYGROUP = ERN.PAYGROUP

		AND PAY_END_DT = ERN.PAY_END_DT

		AND PAGE_NUM = ERN.PAGE_NUM

		AND LINE_NUM = ERN.LINE_NUM

                and off_cycle = ern.off_cycle   ! CWB 07/07/2005  Add key field to join

		AND SEPCHK = ERN.SEPCHK

		AND EMPLID = ERN.EMPLID

		AND EMPL_RCD = ERN.EMPL_RCD

		AND PAYCHECK_NBR > 0

		AND substr(to_char(CHECK_DT,'YYYY-MM-DD'),1,4) = $grade_entry_dt_yyyy

                AND substr(to_char(CHECK_DT,'YYYY-MM-DD'),6,2) = $grade_entry_dt_mm)

end-select



let #start_month = to_number($grade_entry_dt_mm)

let $start_yy = $grade_entry_Dt_yyyy



do calculate-sum-of-mtd-hrs-in-range



end-procedure



!********************************************************************

!Calculates number of hours starting from the month after the grade

!entry date month till the end of that year

!*******************************************************************



begin-procedure calculate-sum-of-mtd-hrs-in-range



move 'N' to $errorfound

move 'N' to $found



begin-select on-error=sql-error-found('calculate-sum-of-mtd-hrs-in-range')

!SXK 11/16/1999

SUM(RNG.HRS_MTD) &sum_mtd_hrs_in_range



!GBD 05/30/2002 Begin

   let #sum_mtd_hrs_in_range = &sum_mtd_hrs_in_range   

   Do Format-Number(#sum_mtd_hrs_in_range,$sum_mtd_hrs_in_range,'999999.99')

   let $show_sum_mtd_hrs_in_range = 'Sum of MTD Hrs:       '||$sum_mtd_hrs_in_range

   show $show_sum_mtd_hrs_in_range



!   display 'Sum of MTD hours: ' noline

!   display &sum_mtd_hrs_in_range 

!GBD 05/30/2002 End

   add &sum_mtd_hrs_in_range to #sum_mtd_hrs



!   display &c.erncd_spcl

!   display #rnctl_yyyy

!   display #prev_mm

!   display 'Sum of MTD:'

!   display #sum_mtd_hrs

!   display 'Pay Period:'

!   display #pay_period

!   display 'Week Hours:'

!   display #week_hrs



FROM PS_EARNINGS_BAL RNG



WHERE RNG.EMPLID = $emplid

  AND RNG.COMPANY = $company

  AND RNG.BALANCE_ID = 'CY'

  AND RNG.BALANCE_YEAR = $start_yy

  AND RNG.BALANCE_PERIOD > #start_month

  AND RNG.ERNCD = $spcl_accum

!SXK 10/26/1998 Begin

  AND RNG.SPCL_BALANCE = 'Y'

!SXK 10/26/1998 End

end-SELECT



do calculate-sum-of-mtd-hrs-1



end-procedure    



!*********************************************************************

!Calculates total monthly hours in between a range of years

!*********************************************************************



begin-procedure calculate-sum-of-mtd-hrs-1



begin-select on-error=sql-error-found('calculate-sum-of-mtd-hrs-1')

SUM(RNG1.HRS_YTD) &sum_mtd_hrs_1



   let #sum_mtd_hrs_1 = &sum_mtd_hrs_1

   Do Format-Number(#sum_mtd_hrs_1,$sum_mtd_hrs_1,'999999.99')

   let $show_sum_mtd_hrs_1 = 'Sum of YTD Hrs:       '||$sum_mtd_hrs_1

   show $show_sum_mtd_hrs_1



!   display 'Sum of YTD hours: ' noline

!   display &sum_mtd_hrs_1

   add &sum_mtd_hrs_1 to #sum_mtd_hrs



!   display &c.erncd_spcl

!   display #rnctl_yyyy

!   display #prev_mm

!   display 'Sum of MTD:'

!   display #sum_mtd_hrs

!   display 'Pay Period:'

!   display #pay_period

!   display 'Week Hours:'

!   display #week_hrs



FROM PS_EARNINGS_BAL RNG1





WHERE RNG1.EMPLID = $emplid

  and rng1.company = $company

  AND RNG1.BALANCE_ID = 'CY'

  AND RNG1.BALANCE_YEAR > $start_yy

  AND RNG1.ERNCD = $spcl_accum

!SXK 10/26/1998 Begin

  AND RNG1.SPCL_BALANCE = 'Y'

!SXK 10/26/1998 End

  AND RNG1.BALANCE_PERIOD = (SELECT MAX(EB2.BALANCE_PERIOD)

				FROM PS_EARNINGS_BAL EB2        !SCM 10/15/2002 added alias

				WHERE EB2.EMPLID = $emplid

                                AND EB2.COMPANY = $company

				AND EB2.BALANCE_ID = 'CY'

				AND EB2.BALANCE_YEAR = RNG1.BALANCE_YEAR

				AND EB2.ERNCD = $spcl_accum)     !SCM  10/15/2002 added

end-SELECT



!GBD 05/30/2002 Begin

  Do Get-Current-Unconfirmed-Pay-Hours

!GBD 05/30/2002 End



end-procedure    



!******************************************************************

!Retrives the professional experience hours amd months

!*******************************************************************

begin-procedure Get-Prof-Hrs-and-months



   move 'N' to $prof_found



begin-select on-error=sql-error-found('Get-Prof-Hrs-And-Months')

PH.GEX_PROF_EXP_HRS        &PH.GEX_PROF_EXP_HRS

PH.GEX_PROF_EXP_MTHS       &PH.GEX_PROF_EXP_MTHS        ! CWB 04/25/2005 added



   move 'Y' to $prof_found

   move &PH.GEX_PROF_EXP_HRS to #gex_prof_exp_hrs       ! CWB 04/25/2005 added

   move &PH.GEX_PROF_EXP_MTHS to #gex_prof_exp_mths      

!   display #gex_prof_exp_hrs

!   if #GEX_PROF_EXP_MTHS > 0

!     show '$emplid: ' $emplid ', prof exp months: '   #GEX_PROF_EXP_MTHS

!   end-if



FROM PS_EMPLOYMENT PH

WHERE PH.EMPLID = $emplid

AND   PH.EMPL_RCD = #empl_rcd



end-select



   if $prof_found = 'N'

      move 0 to #gex_prof_exp_hrs

      move 0 to #gex_prof_exp_mths        ! CWB 04/25/2005 added

   end-if



end-procedure 



!*********************************************************************

! Retrieve Step 1 hourly rate for baker apprerentice

!*********************************************************************

begin-procedure Get-apprentice-step-one-rate



move 'N' to $apprentice_found



begin-select on-error=sql-error-found('Get-Apprentice-Step-One-Rate')

BA.HOURLY_RT



   move &BA.HOURLY_RT to #apprentice_rt

   move 'Y' to $apprentice_found

	

FROM PS_SAL_STEP_TBL BA

WHERE BA.SAL_ADMIN_PLAN = $sal_admin_plan

AND   BA.GRADE = $grade

AND   BA.STEP = 1

AND   BA.EFFDT = (SELECT MAX(EFFDT)

			FROM PS_SAL_STEP_TBL

			WHERE SAL_ADMIN_PLAN = $sal_admin_plan

			AND   GRADE = $grade

			AND   STEP = 1

			AND   EFFDT <= $range_end_dt_dbf)



end-select



if $apprentice_found = 'N'

   print 'No Step one row found for apprentice grade: ' (+1,1)

   print $grade ()

   print ',Salary Plan: ' ()

   print $sal_admin_plan ()

end-if



end-procedure



!*******************************************************************

! Retrieve Step 1 hourly rate for baker clerk Grade

!*******************************************************************

begin-procedure Get-Clerk-Step-One-Rate



move 'N' to $clerk_found



begin-select on-error=sql-error-found('Get-Clerk-Step-One-Rate')

BC.HOURLY_RT



   move &BC.HOURLY_RT to #clerk_rt

   move 'Y' to $clerk_found





FROM PS_SAL_STEP_TBL BC

WHERE BC.SAL_ADMIN_PLAN = $sal_admin_plan

AND   BC.GRADE = 'BCF'

AND   BC.STEP = 1

AND   BC.EFFDT = (SELECT MAX(EFFDT)

			FROM PS_SAL_STEP_TBL

			WHERE SAL_ADMIN_PLAN = $sal_admin_plan

			AND   GRADE = 'BCF'

			AND   STEP = 1

			AND   EFFDT <= $range_end_dt_dbf)



end-select



   display 'Clerk Rt:      ' noline

   display #clerk_rt

   display 'Apprentice Rt: ' noline

   display #apprentice_rt



if $clerk_found = 'N'

   do get-clerk-step-one-rate-1

end-if



   display 'Clerk Rt:      ' noline

   display #clerk_rt

   display 'Apprentice Rt: ' noline

   display #apprentice_rt


end-procedure



!*******************************************************************

! Retrieve Step 1 hourly rate for clerk Grade

!*******************************************************************

begin-procedure Get-Clerk-Step-One-Rate-1



if &A.FULL_PART_TIME = 'F'

   let $clerk_grade = 'CLF'

else

   let $clerk_grade = 'CLP'

end-if



begin-select on-error=sql-error-found('Get-Clerk-Step-One-Rate-1')

BC1.HOURLY_RT



   move &BC1.HOURLY_RT to #clerk_rt

   move 'Y' to $clerk_found





FROM PS_SAL_STEP_TBL BC1

WHERE BC1.SAL_ADMIN_PLAN = $sal_admin_plan

AND   BC1.GRADE = $clerk_grade

AND   BC1.STEP = 1

AND   BC1.EFFDT = (SELECT MAX(EFFDT)

			FROM PS_SAL_STEP_TBL

			WHERE SAL_ADMIN_PLAN = $sal_admin_plan

			AND   GRADE = $clerk_grade

			AND   STEP = 1

			AND   EFFDT <= $range_end_dt_dbf)



end-select



if $clerk_found = 'N'

   print 'No Step one row found grade:' (+1,1)

   print $clerk_grade ()

   print ',Salary Plan: ' ()

   print $sal_admin_plan ()

end-if



end-procedure



!********************************************************************

! Calculate Comp Frequency, Comp Rate, Change Amount, Change Percent,

!           Monthly Rate, Annual Rate

!********************************************************************

! Determine Comp Frequency

!********************************************************************

begin-procedure Determine-Comp-Freq

   evaluate $comp_frequency

      when = 'D'

	 let #comp_freq = 365

	 break

      when = 'W'

	 let #comp_freq = 52

	 break

      when = 'B'

	 let #comp_freq = 26

	 break

      when = 'S'

	 let #comp_freq = 24

	 break

      when = 'M'

	 let #comp_freq = 12

	 break

      when = 'Q'

	 let #comp_freq = 4

	 break

      when-other

	 let #comp_freq = 1

	 break

   end-evaluate



end-procedure



!*******************************************************************

!Calculate the comprate based on the comp frequency

!*******************************************************************



begin-procedure Calc-Comprate



!display 'In Calc-Comprate'

      

  

   display 'Comp Frequency: ' noline

   display $comp_frequency noline

   display ' ' noline

   display #comp_freq



   display #new_hourly_rt noline

   display ' > ' noline

   display #hourly_rt

   display 'Action: ' noline

   display &A.ACTION



      if $comp_frequency = 'H'

	 let #comprate = #new_hourly_rt

      else

	 let #comprate = #annual_rt / #comp_freq

      end-if

   

   display 'Old Comprate: ' noline

   display #old_comprate



   display 'Comprate: ' noline

   display #comprate



   evaluate $comp_frequency

	when = 'H'

	 let #annual_rt = #new_hourly_rt * #std_hours * 52

	when = 'A'

	 let #annual_rt = #comprate

      when-other

	 let #annual_rt = #comprate * #comp_Freq

   end-evaluate



   let #monthly_rt = #annual_rt / 12



   display 'Annual Rt: ' noline

   display #annual_rt

   display 'Monthly Rt: ' noline

   display #monthly_rt

   display 'Hourly Rt: ' noline

   display #new_hourly_rt



end-procedure



!*******************************************************************

!Calculates the change in the comprate

!*******************************************************************

begin-procedure Calc-Comp-Change



!   display 'In Calc-Comp-Change'



!** Recalc Change Amt **



      let #change_amt = #comprate - #old_comprate



!** Recalc Change Pct **



   if #old_comprate = 0

      let #change_pct = 0

   else

      let #change_pct_tmp = (#change_amt / #old_comprate) * 100

      if #change_pct_tmp > 999.999

	 let #change_pct = 999.999

      else

	 if #change_pct_tmp < -999.999

	    let #change_pct = -999.999

	 else

	    let #change_pct = #change_pct_tmp

	 end-if

      end-if

   end-if

   

!   display 'Change_amt: ' noline

!   display #change_amt

!   display 'Change_pct: ' noline

!   display #change_pct



end-procedure

!SXK 04/22/1999 Begin

!*********************************************************************

!Create temporary table for holding RMC report details

!*********************************************************************

begin-procedure create-temp-table

! 02/01/2001 - drop the temp table before trying to create it

begin-sql on-error=ignore-error('drop-temp-table')

DROP TABLE [$tablename]

end-sql 





begin-sql on-error=sql-error-found('create-temp-table')

CREATE TABLE [$tablename](

       DEPTID           VARCHAR2(10) NOT NULL,

       NAME             VARCHAR2(50) NOT NULL,

       EMPLID           VARCHAR2(11) NOT NULL,

       OTH_HRS          NUMBER(7,2)  NOT NULL,

       SAL_ADMIN_PLAN   VARCHAR2(3)  NOT NULL,

       GRADE            VARCHAR2(3)  NOT NULL,

       STEP             NUMBER(38)   NOT NULL,

       INC_HRS          NUMBER(7,2)  NOT NULL,

       HOURLY_RT        NUMBER(18,6) NOT NULL,

       ACTION_REASON    VARCHAR2(3)  NOT NULL,

       LAST_DATE_WORKED DATE,

       TERMINATION_DT   DATE)

       TABLESPACE TE7TOOLS001

end-sql

end-procedure



!*********************************************************************

!Drop temporary reporting table

!*********************************************************************

begin-procedure drop-temp-table

begin-sql on-error=sql-error-found('drop-temp-table')

DROP TABLE [$tablename]

end-sql

end-procedure



!*********************************************************************

! Create RMC Report

!*********************************************************************

begin-procedure Create-RMC-Report



  do get-empl-name



  display 'In Create RMC Report'



  if &A.EMPL_STATUS = 'L' or &A.EMPL_STATUS = 'P'

     move &A.ACTION_REASON to $loa_type

  else

     move ' ' to $loa_type

  end-if



  do Format-Number(#sum_mtd_hrs, $curr_hrs, 'BB,BB9.99')

  do Format-Number(#inc_hours, $inc_hours, 'BB,BB9.99')



  if RTRIM($curr_hrs, ' ') = ''

       let $curr_hrs = '     0.00'

  end-if

  if RTRIM($inc_hours, ' ') = ''

      let $inc_hours = '     0.00'

  end-if



begin-sql on-error=sql-error-found('create-RMC-report')

INSERT INTO [$tablename]

(DEPTID,

NAME,

EMPLID,

OTH_HRS,

SAL_ADMIN_PLAN,

GRADE,

STEP,

INC_HRS,

HOURLY_RT,

ACTION_REASON,

LAST_DATE_WORKED,

TERMINATION_DT)

VALUES(

$deptid, 

$name,

$emplid, 

#sum_mtd_hrs,    !$curr_hrs,    

$sal_admin_plan,

$grade,        

#new_step,     

#inc_hours,       !$inc_hours,     

#new_hourly_rt, 

$loa_type,      

&A.LAST_DATE_WORKED,

&C.TERMINATION_DT)

end-sql

		       

 move 0 to #inc_hours

 move 0 to #curr_hrs

 add 1 to #RMC_count 



end-procedure



!*********************************************************************

! Sort RMC Data

!*********************************************************************

begin-procedure Sort-RMC-Data

  use-report RMC-Report

begin-select on-error=sql-error-found('Sort-RMC-Data')

RM.DEPTID () on-break print=never level=1 after=dept-rm-change

RM.NAME

RM.EMPLID

RM.OTH_HRS

RM.SAL_ADMIN_PLAN

RM.GRADE

RM.STEP

RM.INC_HRS

RM.HOURLY_RT

RM.ACTION_REASON

RM.LAST_DATE_WORKED

RM.TERMINATION_DT



 do print-RMC-report



from [$tablename] rm

order by rm.deptid, rm.name

end-select

 use-report report-log

end-procedure



!*********************************************************************

! Department Change in RMC report

!*********************************************************************

begin-procedure Dept-RM-Change

new-page

end-procedure



!*********************************************************************

! Print RMC Report

!*********************************************************************

begin-procedure Print-RMC-Report



!  do get-empl-name





  display 'In RMC Report'



!  if &A.EMPL_STATUS = 'L' or &A.EMPL_STATUS = 'P'

!     move &A.ACTION_REASON to $loa_type

!  else

!     move ' ' to $loa_type

!  end-if



  if #current-line > 51

     new-page

  end-if

  move &RM.OTH_HRS to #oth_hrs_rm

  move &RM.INC_HRS to #inc_hrs_rm



    do Format-Number(#oth_hrs_rm, $curr_hrs_RM, 'BB,BB9.99')

    do Format-Number(#INC_HRS_rm, $inc_hours_RM, 'BB,BB9.99')



    if RTRIM($curr_hrs_RM, ' ') = ''

       let $curr_hrs_RM = '     0.00'

    end-if

    if RTRIM($inc_hours_RM, ' ') = ''

      let $inc_hours_RM = '     0.00'

    end-if

		       

    print &RM.deptid           (+1,02)

    print &RM.emplid            (,12)

    print &RM.name              (,24)

    print $curr_hrs_RM          (,58)

    print &RM.sal_admin_plan    (,70)

    print &RM.grade             (,77)

    print &RM.step          (,83)

    print $inc_hours_RM         (,95)

    print &RM.hourly_rt     (,107)

    print &RM.ACTION_REASON          (,122)

    print &RM.LAST_DATE_WORKED (,130)

    print &RM.TERMINATION_DT  (,145)



end-procedure

!SXK 04/22/1999 End

!AXL 5/28/2002 New Procedures - Begin

!********************************************************************* 

begin-procedure Find-Prior-Actv-Row

!*********************************************************************

  move 'N' to $prior_actv_row_found



  display 'find-prior-actv-row'

 

begin-select on-error=sql-error-found('find-prior-actv-row')

PREV.EFFDT

to_char(PREV.EFFDT,'YYYY-MM-DD') &prev_grade_entry_dt_dtu

  

    move 'Y' to $prior_actv_row_found

    show '$prior grade entry date found for emplid ' $emplid 

   

FROM PS_JOB PREV



WHERE PREV.EMPLID = $emplid

  AND PREV.EMPL_RCD = #empl_rcd

  AND PREV.EFFDT = (SELECT min(EFFDT) FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND GRADE = &BKR.GRADE

                    AND EFFDT < &TRM.EFFDT)

  AND PREV.EFFSEQ = (SELECT min(EFFSEQ) FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND EFFDT = PREV.EFFDT)

end-SELECT



end-procedure



!********************************************************************* 

begin-procedure Find-Term-Period

!*********************************************************************

  move 'N' to $term_info_found



  display 'find-term-period'

  let #extend_days = 0



begin-select on-error=sql-error-found('Find-Leave-Period')

TRM.EFFDT

to_char(TRM.EFFDT,'YYYY-MM-DD') &trm_begin_Dt_dtu

  

    move 'Y' to $term_info_found

    show '$term_info_found for emplid ' $emplid 

   

FROM PS_JOB TRM



WHERE TRM.EMPLID = $emplid

  AND TRM.EMPL_RCD = #empl_rcd

  AND TRM.EFFDT = (SELECT max(EFFDT)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND EMPL_STATUS = 'T'

                    AND EFFDT < &bkr.effdt)

  AND TRM.EFFSEQ = (SELECT MAX(EFFSEQ)

                   FROM PS_JOB

                  WHERE EMPLID = $emplid

                    AND EMPL_RCD = #empl_rcd

                    AND EFFDT = TRM.EFFDT)

end-SELECT



end-procedure



!***********************************************************

Begin-Procedure Find-Incr-Type

!***********************************************************



 move 'N' to $incr_type_found

 let $incr_type = ' '

 

begin-select on-error=sql-error-found('Find-Incr-Type')

INCR.STEP_INCREM_TYPE



  let $incr_type_found ='Y'

  let $incr_type = &INCR.STEP_INCREM_TYPE



FROM PS_SAL_GRADE_TBL INCR

WHERE INCR.SAL_ADMIN_PLAN = &BKR.SAL_ADMIN_PLAN

AND   INCR.GRADE          = &BKR.GRADE

AND   INCR.EFFDT          = &BKRS.EFFDT



end-select



end-procedure



!*********************************************************************

begin-procedure Before-Deptid

!*********************************************************************

  

  if $first_rec = 'Y'

    let $first_rec ='N'

  else

    if #deptid_count > 0	!Suppress page break if no info for deptid

       new-page

       let #deptid_count = 0

    end-if

  end-if



end-procedure

!AXL 5/28/2002 New Procedures - End



!*********************************************************************

! Print Bakery Report

!*********************************************************************

begin-procedure Print-Bakery-Report



   do get-empl-name



   if #current-line > 51

      new-page

   end-if



   !AXL 5/28/2002 Disable..promo_dt resolved elsewhere

   !do dtu-add-months($grade_entry_dt_dtu,#promo_months,$promo_dt)

    

    do ps_sqr_round(#hourly_rt,2,#hourly_rt)									! ISDVASS issue #272 9.0 upgrade

    

   print $emplid           (+1,2)

   print $name             (,14)

   print $sal_admin_plan   (,48)

   print $grade            (,57)

   print #step             (,65)

   print #hourly_rt        (,73)

   

   if $incr_type='H' 

      print '**********'   (,87)

      print $h_msg         (+1,2)

      print $empl_status   (-1,101)

      position (+2)

   else

      print $promo_dt         (,87)

      print $empl_status      (,101)

   end-if





end-procedure



!*********************************************************************

!Fetches Employee Name to report

!*********************************************************************

begin-procedure Get-Empl-Name

begin-select on-error=sql-error-found('Get-Empl-Name')

NM.NAME



   move &NM.NAME to $name



FROM PS_PERSONAL_DATA NM

WHERE NM.EMPLID = $emplid

end-select



end-procedure



!*********************************************************************

!Inserts new job row

!*********************************************************************

begin-procedure Insert-Job-Record



do convert-from-dtu-date($new_job_effdt,$new_job_effdt_Dbf)



display 'Emplid:' noline

display $emplid

display 'Empl Rcd' noline

display #empl_rcd

display 'Effdt:' noline

display $new_job_effdt_dbf

display 'DeptID:' noline

display $deptid

display 'company:' noline

display $company

display 'Paygroup:' noline

display $paygroup

display 'Plan:' noline

display $sal_admin_plan 

display 'Grade:' noline

display $grade

display 'New Step:' noline

display #new_step

display 'Step Effdt:' noline

display $new_job_effdt_dbf

display 'comprate:' noline

display #comprate

display 'Change Amt:' noline

display #change_amt 

display 'Change Pct:' noline

display #change_pct

display 'Annual Rt:' noline

display #annual_rt

display 'Hourly Rt:' noline

display #new_hourly_rt 

display 'Monthly Rt:' noline

display #monthly_rt

display 'Daily Rt: ' noline

display #daily_rt



!GBD 07/24/2002 Begin - Comment out for testing

      do insert-procedure

!GBD 07/24/2002 End



      add 1 to #job_insert

      do check-future-rows

      if $future_rows_exist = 'Y'

         do print-future-report

      end-if



end-procedure





!*********************************************************************

!This procedure checks if any current dated job row exists. If so, 

!increments the sequence number and inserts a new job row with the

!calculated eligibility config2 value, otherwise, inserts a new job

!row with current date as the effdt and with new eligibility config2

!value.  After inserting into job table, updates the personal table and

!deletes the employee from the clicker table.

!*********************************************************************

begin-procedure insert-procedure

#debug9 show 'gexbnahp.insert-procedure'

            move 'N' to $update-is-done

            do select-job-row



            if $errorfound = 'N'

!SXK 11/09/1999 Begin

	       if $bas_action_retrieved <> 'Y'

		  do get-bas-action

	       end-if

!SXK 11/09/1999 End

               if $effdt_row_exists = 'Y' 

!SXK 11/09/1999 Begin

		  let $bac_emplid = &I.EMPLID

		  let #bac_empl_rcd = &I.EMPL_RCD

		  let $bac_bas_action_source = 'TJ'

		  let $bac_event_dt = &I.EFFDT

		  let #bac_event_effseq = #effseq

		  let $bac_cobra_action = &I.COBRA_ACTION

!SXK 11/09/1999 End

                  do insert-job-row-effdt-exists

               else

!SXK 11/09/1999 Begin

		  let $bac_emplid = &J.EMPLID

		  let #bac_empl_rcd = &J.EMPL_RCD

		  let $bac_bas_action_source = 'TJ'

		  let $bac_event_dt = $effdt_dbf

		  let #bac_event_effseq = 0

		  let $bac_cobra_action = &J.COBRA_ACTION

!SXK 11/09/1999 End



                     do insert-job-row

               end-if



! 11/07/2001 - CJH - insert into ps_compensation for rt changes

               do process-compensation-rows

! 11/07/2001 - end

            end-if



end-procedure



!SXK 11/09/1999 Begin

!*******************************************************************

!Retrieves Bas Action Value from Action Reason Table

!*******************************************************************

Begin-Procedure get-bas-action



begin-select on-error=sql-error-found('Get-Bas-Action')

BAC.BAS_ACTION

  let $bas_action_retrieved = 'Y'

FROM PS_ACT_RSN_TBL_NA BAC   ! PS_ACTN_REASON_TBL BAC GEX ISDVNPK 08/27/2007

WHERE BAC.ACTION = 'PAY'

AND BAC.ACTION_REASON = 'SPG'

AND BAC.EFFDT = (select max(effdt)

		from PS_ACT_RSN_TBL_NA  ! PS_ACTN_REASON_TBL GEX ISDVNPK 08/27/2007

		where action = bac.action

		and action_Reason = bac.action_reason

		and effdt <= $effdt_dbf)

end-select

end-procedure



!SXK 11/09/1999



!*********************************************************************

!Selects the job table row with runcontrol effdt. If it does not exist

!calls the select to get the maximum effdt row for the employee

!*********************************************************************



begin-procedure select-job-row

#debug9 show 'gexbnahp.select-job-row'



let $effdt_dbf = $new_job_effdt_dbf

display 'Effdt:' noline

display $effdt_dbf



move 'N' to $effdt_row_exists

move 'N' to $errorfound



begin-select on-error=sql-error-found('select-job-row')

I.EMPLID

I.EMPL_RCD

I.EFFDT

I.EFFSEQ

I.PER_ORG           ! GEX ISDVNPK 08/27/2007                     

I.DEPTID

I.JOBCODE

I.POSITION_NBR

I.SUPERVISOR_ID                 ! GEX ISDVNPK 08/27/2007                    

I.POSITION_OVERRIDE

I.POSN_CHANGE_RECORD

I.EMPL_STATUS

I.ACTION

I.ACTION_dT

I.ACTION_REASON

I.LOCATION

I.TAX_LOCATION_cD

I.JOB_ENTRY_DT

I.DEPT_ENTRY_DT

I.POSITION_ENTRY_DT

I.SHIFT

I.REG_TEMP

I.FULL_PART_TIME

I.COMPANY

I.PAYGROUP

!SXK 11/09/1999 Begin

!I.PIN_NUM

!I.PAY_BASIS_NUM

!SXK 11/09/1999 End

I.BAS_GROUP_ID

I.ELIG_CONFIG1

I.ELIG_CONFIG2

I.ELIG_CONFIG3

I.ELIG_CONFIG4

I.ELIG_CONFIG5

I.ELIG_CONFIG6

I.ELIG_CONFIG7

I.ELIG_CONFIG8

I.ELIG_CONFIG9

I.BEN_STATUS

!SXK 11/09/1999 Begin

I.BAS_ACTION

!SXK 11/09/1999 End

I.COBRA_aCTION

I.EMPL_TYPE

I.HOLIDAY_SCHEDULE

I.STD_HOURS

I.STD_HRS_FREQUENCY                                  !GBD 09/20/2002

I.OFFICER_CD

I.EMPL_CLASS

I.SAL_ADMIN_PLAN

I.GRADE

I.GRADE_ENTRY_dT

I.STEP

I.STEP_ENTRY_DT

I.GL_PAY_TYPE

I.ACCT_cD

I.EARNS_DIST_TYPE

! GEX ISDVNPK 08/27/2007          

!I.SALARY_MATRIX_CD

!I.RATING_SCALE

!I.REVIEW_RATING

!I.REVIEW_DT

! GEX ISDVNPK 08/27/2007          

I.COMP_FREQUENCY

I.COMPRATE

I.CHANGE_AMT

I.CHANGE_PCT

I.ANNUAL_RT

I.MONTHLY_RT

I.DAILY_RT

I.HOURLY_RT

I.ANNL_BENEF_BASE_RT

I.SHIFT_RT

I.SHIFT_FACTOR

I.CURRENCY_CD

!sxk 11/09/1999 Begin

I.BUSINESS_UNIT

I.SETID_DEPT

I.SETID_JOBCODE

I.SETID_LOCATION                                     !GBD 09/20/2002

I.SETID_SALARY                                       !GBD 09/20/2002

I.REG_REGION

I.DIRECTLY_TIPPED

!SXK 11/09/1999 End

I.FLSA_STATUS

I.EEO_CLASS

I.FUNCTION_CD

I.TARIFF_GER                                         !GBD 09/20/2002 Begin

I.TARIFF_AREA_GER        

I.PERFORM_GROUP_GER

I.LABOR_TYPE_GER         

I.SPK_COMM_ID_GER        

!I.WRKS_CNCL_MEM_GER     ! GEX ISDVNPK 08/27/2007                                       !GBD 09/20/2002 End

I.HOURLY_RT_FRA

I.ACCDNT_CD_FRA

I.VALUE_1_FRA                                        !GBD 09/20/2002 Begin

I.VALUE_2_FRA            

I.VALUE_3_FRA            

I.VALUE_4_FRA            

I.VALUE_5_FRA            

I.CTG_RATE               

I.PAID_HOURS             

I.PAID_FTE               

I.PAID_HRS_FREQUENCY

! GEX ISDVNPK 08/27/2007               

!I.GVT_EFFDT              

!I.GVT_EFFDT_PROPOSED     

!I.GVT_TRANS_NBR          

!I.GVT_TRANS_NBR_SEQ      

!I.GVT_WIP_STATUS         

!I.GVT_STATUS_TYPE        

!I.GVT_NOA_CODE           

!I.GVT_LEG_AUTH_1         

!I.GVT_PAR_AUTH_D1        

!I.GVT_PAR_AUTH_D1_2      

!I.GVT_LEG_AUTH_2         

!I.GVT_PAR_AUTH_D2        

!I.GVT_PAR_AUTH_D2_2      

!I.GVT_PAR_NTE_DATE       

!I.GVT_WORK_SCHED         

!I.GVT_SUB_AGENCY         

!I.GVT_ELIG_FEHB          

!I.GVT_FEHB_DT            

!I.GVT_PAY_RATE_DETER     

!I.GVT_STEP               

!I.GVT_RTND_PAY_PLAN      

!I.GVT_RTND_SAL_PLAN      

!I.GVT_RTND_GRADE         

!I.GVT_RTND_STEP          

!I.GVT_RTND_GVT_STEP      

!I.GVT_PAY_BASIS          

!I.GVT_COMPRATE           

!I.GVT_LOCALITY_ADJ       

!I.GVT_BIWEEKLY_RT        

!I.GVT_DAILY_RT           

!I.GVT_HRLY_RT_NO_LOC     

!I.GVT_DLY_RT_NO_LOC      

!I.GVT_BW_RT_NO_LOC       

!I.GVT_MNLY_RT_NO_LOC     

!I.GVT_ANNL_RT_NO_LOC     

!I.GVT_XFER_FROM_AGCY     

!I.GVT_XFER_TO_AGCY       

!I.GVT_RETIRE_PLAN        

!I.GVT_ANN_IND            

!I.GVT_FEGLI              

!I.GVT_FEGLI_LIVING       

!I.GVT_LIVING_AMT         

!I.GVT_ANNUITY_OFFSET     

!I.GVT_CSRS_FROZN_SVC     

!I.GVT_PREV_RET_COVRG     

!I.GVT_FERS_COVERAGE      

!I.GVT_TYPE_OF_APPT       

!I.GVT_POI                

!I.GVT_POSN_OCCUPIED      

!I.GVT_CONT_EMPLID        

!I.GVT_ROUTE_NEXT         

!I.GVT_CHANGE_FLAG        

!I.GVT_TSP_UPD_IND        

!I.GVT_PI_UPD_IND         

!I.GVT_SF52_NBR           

!I.GVT_S113G_CEILING      

!I.GVT_LEO_POSITION       

!I.GVT_ANNUIT_COM_DT      

!I.GVT_BASIC_LIFE_RED     

!I.GVT_DED_PRORT_DT       

!I.GVT_FEGLI_BASC_PCT     

!I.GVT_FEGLI_OPT_PCT      

!I.GVT_FEHB_PCT           

!I.GVT_RETRO_FLAG         

!I.GVT_RETRO_DED_FLAG     

!I.GVT_RETRO_JOB_FLAG     

!I.GVT_RETRO_BSE_FLAG     

!I.GVT_OTH_PAY_CHG        

!I.GVT_DETL_POSN_NBR      

!I.ANNL_BEN_BASE_OVRD     

!I.BENEFIT_PROGRAM        

!I.UPDATE_PAYROLL         

!I.GVT_PAY_PLAN           

!I.GVT_PAY_FLAG           

!I.GVT_NID_CHANGE

! GEX ISDVNPK 08/27/2007                  

I.UNION_FULL_PART        

I.UNION_POS              

I.MATRICULA_NBR          

I.SOC_SEC_RISK_CODE      

I.UNION_FEE_AMOUNT       

I.UNION_FEE_START_DT     

I.UNION_FEE_END_DT       

I.EXEMPT_JOB_LBR         

I.EXEMPT_HOURS_MONTH     

I.WRKS_CNCL_FUNCTION     

I.INTERCTR_WRKS_CNCL     

I.CURRENCY_CD1           

I.PAY_UNION_FEE          

I.UNION_CD               

I.BARG_UNIT              

I.UNION_SENIORITY_DT     

I.ENTRY_DATE             

I.LABOR_AGREEMENT        

I.EMPL_CTG               

I.EMPL_CTG_L1            

I.EMPL_CTG_L2            

I.SETID_LBR_AGRMNT  

! GEX ISDVNPK 08/27/2007

I.WPP_STOP_FLAG                          

I.LABOR_FACILITY_ID                      

I.LBR_FAC_ENTRY_DT                       

I.LAYOFF_EXEMPT_FLAG                     

I.LAYOFF_EXEMPT_RSN                      

! GEX ISDVNPK 08/27/2007    

I.GP_PAYGROUP            

I.GP_DFLT_ELIG_GRP       

I.GP_ELIG_GRP            

I.GP_DFLT_CURRTTYP       

I.CUR_RT_TYPE            

I.GP_DFLT_EXRTDT         

I.GP_ASOF_DT_EXG_RT      

I.ADDS_TO_FTE_ACTUAL     

I.CLASS_INDC             

I.ENCUMB_OVERRIDE        

I.FICA_STATUS_EE         

I.FTE                    

I.PRORATE_CNT_AMT        

I.PAY_SYSTEM_FLG         

I.BORDER_WALKER          

I.LUMP_SUM_PAY           

I.CONTRACT_NUM           

I.JOB_INDICATOR          

I.WRKS_CNCL_ROLE_CHE     

!I.WRKS_CNCL_ID_LCL     ! GEX ISDVNPK 08/27/2007   

I.BENEFIT_SYSTEM         

I.WORK_DAY_HOURS         

!I.SUPERVISOR_ID    ! GEX ISDVNPK 08/27/2007     

! GEX ISDVNPK 08/27/2007     

I.HR_STATUS                              

I.APPT_TYPE                              

I.MAIN_APPT_NUM_JPN  

! GEX ISDVNPK 08/27/2007                         

I.REPORTS_TO             

I.FORCE_PUBLISH          

I.JOB_DATA_SRC_CD                                    !GBD 09/20/2002 End

I.ESTABID

! GEX ISDVNPK 08/27/2007     

I.SUPV_LVL_ID                            

I.SETID_SUPV_LVL                         

I.ABSENCE_SYSTEM_CD                      

I.POI_TYPE                               

I.HIRE_DT                                

I.LAST_HIRE_DT                           

I.TERMINATION_DT                         

I.ASGN_START_DT                          

I.LST_ASGN_START_DT                      

I.ASGN_END_DT                            

I.LDW_OVR                                

I.LAST_DATE_WORKED                       

I.EXPECTED_RETURN_DT                     

I.EXPECTED_END_DATE                      

I.AUTO_END_FLG                           

I.LASTUPDDTTM                            

I.LASTUPDOPRID   

! GEX ISDVNPK 08/27/2007                             

I.GEX_LIGHT_DUTY

I.GEX_CHANGE_RECORD

I.GEX_VOLUN_LOW_HRS

I.GEX_STUDENT_IND

I.GEX_MOON_IND

I.GEX_DEPTID_OVR

I.GEX_ACCT_CD_OVR

I.GEX_GL_EXP_OVR

I.GEX_STEWARD

I.GEX_DUES_EXEMPT

I.GEX_FINAN_CORE

I.GEX_INFLATED_HRS

i.GEX_FP_CODE

I.GEX_SEASONAL_EMP	!AXL 5/14/2001 New job field



    move 'Y' to $effdt_row_exists



    let #effseq = &I.EFFSEQ + 1

    move &I.EMPL_RCD to #empl_rcd



    do select-job-jr-row                             !GBD 09/20/2002



FROM PS_JOB I



WHERE I.EMPLID = $emplid

  AND I.EMPL_RCD = &A.empl_rcd

  AND I.EFFDT = $effdt_Dbf

  AND I.EFFSEQ = 

      (SELECT MAX(EFFSEQ)

         FROM PS_JOB

        WHERE EMPLID = $emplid

          AND EMPL_RCD = &A.EMPL_RCD

          AND EFFDT = $effdt_dbf)

end-SELECT



if $effdt_row_exists = 'N'

  do select-current-job-row

end-if



end-procedure



!GBD 09/20/2002 Begin

!*********************************************************************

begin-procedure select-job-jr-row

#debug9 show 'select-job-jr-row'



begin-select on-error=sql-error-found('select-job-jr-row')

I2.EMPLID                 

I2.EMPL_RCD               

I2.EFFDT                  

I2.EFFSEQ                 

I2.LASTUPDDTTM            

I2.LASTUPDOPRID           

I2.TAXCODE_UK             

I2.TAX_BASIS_UK           

I2.WORKER_TYPE_MEX        

I2.REDUCED_WEEK_MEX       

I2.LOCATED_CD_MEX         

I2.SALARY_TYPE_MEX        

I2.IMS_TERM_DT_MEX 

!GEX ISDVNPK 08/27/2007       

!I2.CASUAL_IND             

!I2.SALARY_PACKAGED        

!I2.PAYROLL_STATE_AUS      

!I2.CLASSN_CURRENT_AUS     

!I2.WORK_SECTOR_AUS        

!I2.FUNCTION_AUS           

!I2.ANN_CNTACT_HRS_AUS     

!I2.TEACH_WEEKS_AUS        

!I2.CASUAL_TYPE_AUS        

!I2.TERM_TYPE_AUS          

!I2.TERM_LTD_AUS   

!GEX ISDVNPK 08/27/2007               

I2.BALANCE_GRP_NUM        

I2.FP_ACTION_2            

I2.CTG_RATE               

I2.FP_LEGALSTAT_CD        

I2.FP_SCNDMT_CD           

I2.FP_SCND_TYP            

I2.FP_CIVIL_PENSION       

I2.FP_SOURCE_ORG          

I2.FP_RECEP_ORG           

I2.FP_RETURN_CD           

I2.FP_PR_LEGSTA           

I2.FP_FOREND_DT           

I2.FP_END_DT              

I2.FP_CAREFRZPCT          

I2.FP_HIR_DOS_SIT         

I2.FP_PT_PCT_DET          

I2.FP_TITLE_NUM           

I2.FP_DURATION_PCT        

I2.FP_RATING_PRS_FLG      

I2.FP_BUDGET_NBR          

I2.FP_HDCNT_NBR           

I2.FP_POTENT_NBR          

I2.FP_RANK_CD             

I2.FP_STEP_CD             

I2.FP_RK_ENT_DT           

I2.FP_CORPS_CD            

I2.FP_CHG_COR_DT          

I2.FP_CATG_FP             

I2.FP_CATG_LEVEL          

I2.FP_RK_TRIALPD          

I2.FP_STEP_END_DT         

I2.FP_FOR_PROM_DT         

I2.FP_NOMINATION_DT       

I2.FP_TRAINEE             

I2.FP_TRNE_POSN           

I2.FP_RK_PD_END_DT        

I2.FP_SANCTION            

I2.FP_DOWN_GRA            

I2.FP_APPL_SAL_DT         

I2.FP_CHG_IND             

I2.FP_CLD_INST            

I2.FP_SETID_RANK          

I2.FP_INSTALL_DT          

I2.FP_EQUIV_STEP          

I2.FP_STEP_CD2            

I2.FP_BUSINESS_CD         

I2.FP_APPL_DT             

I2.FP_CHG_SAL             

I2.FP_POINTYP_CD          

I2.FP_GROSS_IND           

I2.FP_INCS_IND            

I2.FP_INCS_IND2           

I2.FP_PT_PCT              

I2.FP_PT_END_DT           

I2.FP_PT_FOREND_DT        

I2.FP_COMPRATE            

I2.FP_INST_STAT           

I2.FP_RETROSPECT          

I2.FP_ROW_END_DT          

I2.LAST_UPDATE_DATE       

I2.OTHER_ID_JPN           

I2.INTCP_XFR_FLG          

I2.INTCP_XFR_START_DT     

I2.INTCP_XFR_END_DT       

I2.INTCP_BUS_UNIT         

I2.INTCP_DEPTID           

I2.INTCP_DEPTID2          

I2.INTCP_SETID_DEPT       

I2.INTCP_COMPANY          

I2.INTCP_COMPANY2         

I2.INTCP_SUPV_LVL_ID      

I2.INTCP_SUPV_LVL_ID2

!GEX ISDVNPK 08/27/2007  

I2.START_DATE_JPN                          

I2.EXP_END_DATE_JPN                        

I2.END_DATE_JPN                            

!I2.SUPV_LVL_ID            

!I2.EXPECTED_END_DATE      

!I2.AUTO_END_FLG  

!GEX ISDVNPK 08/27/2007           

I2.DUTIES_TYPE            

I2.ASSIGNMENT_ID          

I2.TARGET_COMPRATE        

I2.CMP_DONT_ABSORB        

I2.SSN_EMPLOYER           

I2.UNITA_PROD_CD          

I2.ACTION_ITA             

I2.ACTION_REASON_ITA      

I2.SPECIAL_HIRCTG_ITA     

I2.PART_TIME_TYPE_ITA     

I2.PART_TIME_PERC_ITA     

I2.PARTTIME_ENDDT_ITA   

!GEX ISDVNPK 08/27/2007   

I2.WORKDAYS_NLD                            

I2.CONT_SAL_TYPE_BRA                       

I2.CBO_CD_BRA                              

I2.SEFIP_CATEGORY_BRA                      

I2.UNION_CD_ALT_BRA   

!GEX ISDVNPK 08/27/2007                      



FROM PS_JOB_JR I2



WHERE I2.EMPLID = &I.EMPLID

  AND I2.EMPL_RCD = &I.EMPL_RCD

  AND I2.EFFDT = &I.EFFDT

  AND I2.EFFSEQ = &I.EFFSEQ

end-select



end-procedure

!GBD 09/20/2002 End



!*********************************************************************

!Selects maximum effdt row for the employee

!*********************************************************************



begin-procedure select-current-job-row

#debug9 show 'gexbnahp.select-current-job-row'





move 'N' to $errorfound

display 'Empl RCD:' noline

display &A.empl_rcd



begin-select on-error=sql-error-found('select-current-job-row')

J.EMPLID

J.EMPL_RCD 

J.EFFDT

J.EFFSEQ    &effseq

J.PER_ORG     ! GEX ISDVNPK 08/27/2007                               

J.DEPTID

J.JOBCODE

J.POSITION_NBR 

J.SUPERVISOR_ID                   ! GEX ISDVNPK 08/27/2007               

J.POSITION_OVERRIDE

J.POSN_CHANGE_RECORD

J.EMPL_STATUS

J.ACTION

J.ACTION_dT

J.ACTION_REASON

J.LOCATION

J.TAX_LOCATION_cD

J.JOB_ENTRY_DT

J.DEPT_ENTRY_DT

J.POSITION_ENTRY_DT

J.SHIFT

J.REG_TEMP

J.FULL_PART_TIME

J.COMPANY

J.PAYGROUP

!SXK 11/09/1999 Begin

!J.PIN_NUM                                           !GBD 09/20/2002

!J.PAY_BASIS_NUM                                     !GBD 09/20/2002

!SXK 11/09/1999 End

J.BAS_GROUP_ID

J.ELIG_CONFIG1

J.ELIG_CONFIG2

J.ELIG_CONFIG3

J.ELIG_CONFIG4

J.ELIG_CONFIG5

J.ELIG_CONFIG6

J.ELIG_CONFIG7

J.ELIG_CONFIG8

J.ELIG_CONFIG9

J.BEN_STATUS

!SXK 11/09/1999 Begin

J.BAS_ACTION

!SXK 11/09/1999 End

J.COBRA_aCTION

J.EMPL_TYPE

J.HOLIDAY_SCHEDULE

J.STD_HOURS

J.STD_HRS_FREQUENCY                                  !GBD 09/20/2002

J.OFFICER_CD

J.EMPL_CLASS

J.SAL_ADMIN_PLAN

J.GRADE

J.GRADE_ENTRY_dT

J.STEP

J.STEP_ENTRY_DT

J.GL_PAY_TYPE

J.ACCT_cD

J.EARNS_DIST_TYPE

! GEX ISDVNPK 08/27/2007      

!J.SALARY_MATRIX_CD

!J.RATING_SCALE

!J.REVIEW_RATING

!J.REVIEW_DT

! GEX ISDVNPK 08/27/2007      

J.COMP_FREQUENCY

J.COMPRATE

J.CHANGE_AMT

J.CHANGE_PCT

J.ANNUAL_RT

J.MONTHLY_RT

J.DAILY_RT                                           !GBD 09/20/2002

J.HOURLY_RT

J.ANNL_BENEF_BASE_RT

J.SHIFT_RT

J.SHIFT_FACTOR

J.CURRENCY_CD

!sxk 11/09/1999 Begin

J.BUSINESS_UNIT

J.SETID_DEPT

J.SETID_JOBCODE

J.SETID_LOCATION                                     !GBD 09/20/2002

J.SETID_SALARY                                       !GBD 09/20/2002

J.REG_REGION

J.DIRECTLY_TIPPED

!SXK 11/09/1999 End

J.FLSA_STATUS

J.EEO_CLASS

J.FUNCTION_CD

J.TARIFF_GER                                         !GBD 09/20/2002

J.TARIFF_AREA_GER

J.PERFORM_GROUP_GER

J.LABOR_TYPE_GER

J.SPK_COMM_ID_GER

!J.WRKS_CNCL_MEM_GER    ! GEX ISDVNPK 08/27/2007                                       !GBD 09/20/2002

J.HOURLY_RT_FRA

J.ACCDNT_CD_FRA

J.VALUE_1_FRA                                        !GBD 09/20/2002 Begin      

J.VALUE_2_FRA            

J.VALUE_3_FRA            

J.VALUE_4_FRA            

J.VALUE_5_FRA            

J.CTG_RATE               

J.PAID_HOURS             

J.PAID_FTE               

J.PAID_HRS_FREQUENCY   

! GEX ISDVNPK 08/27/2007        

!J.GVT_EFFDT              

!J.GVT_EFFDT_PROPOSED     

!J.GVT_TRANS_NBR          

!J.GVT_TRANS_NBR_SEQ      

!J.GVT_WIP_STATUS         

!J.GVT_STATUS_TYPE        

!J.GVT_NOA_CODE           

!J.GVT_LEG_AUTH_1         

!J.GVT_PAR_AUTH_D1        

!J.GVT_PAR_AUTH_D1_2      

!J.GVT_LEG_AUTH_2         

!J.GVT_PAR_AUTH_D2        

!J.GVT_PAR_AUTH_D2_2      

!J.GVT_PAR_NTE_DATE       

!J.GVT_WORK_SCHED         

!J.GVT_SUB_AGENCY         

!J.GVT_ELIG_FEHB          

!J.GVT_FEHB_DT            

!J.GVT_PAY_RATE_DETER     

!J.GVT_STEP               

!J.GVT_RTND_PAY_PLAN      

!J.GVT_RTND_SAL_PLAN      

!J.GVT_RTND_GRADE         

!J.GVT_RTND_STEP          

!J.GVT_RTND_GVT_STEP      

!J.GVT_PAY_BASIS          

!J.GVT_COMPRATE           

!J.GVT_LOCALITY_ADJ       

!J.GVT_BIWEEKLY_RT        

!J.GVT_DAILY_RT           

!J.GVT_HRLY_RT_NO_LOC     

!J.GVT_DLY_RT_NO_LOC      

!J.GVT_BW_RT_NO_LOC       

!J.GVT_MNLY_RT_NO_LOC     

!J.GVT_ANNL_RT_NO_LOC     

!J.GVT_XFER_FROM_AGCY     

!J.GVT_XFER_TO_AGCY       

!J.GVT_RETIRE_PLAN        

!J.GVT_ANN_IND            

!J.GVT_FEGLI              

!J.GVT_FEGLI_LIVING       

!J.GVT_LIVING_AMT         

!J.GVT_ANNUITY_OFFSET     

!J.GVT_CSRS_FROZN_SVC     

!J.GVT_PREV_RET_COVRG     

!J.GVT_FERS_COVERAGE      

!J.GVT_TYPE_OF_APPT       

!J.GVT_POI                

!J.GVT_POSN_OCCUPIED      

!J.GVT_CONT_EMPLID        

!J.GVT_ROUTE_NEXT         

!J.GVT_CHANGE_FLAG        

!J.GVT_TSP_UPD_IND        

!J.GVT_PI_UPD_IND         

!J.GVT_SF52_NBR           

!J.GVT_S113G_CEILING      

!J.GVT_LEO_POSITION       

!J.GVT_ANNUIT_COM_DT      

!J.GVT_BASIC_LIFE_RED     

!J.GVT_DED_PRORT_DT       

!J.GVT_FEGLI_BASC_PCT     

!J.GVT_FEGLI_OPT_PCT      

!J.GVT_FEHB_PCT           

!J.GVT_RETRO_FLAG         

!J.GVT_RETRO_DED_FLAG     

!J.GVT_RETRO_JOB_FLAG     

!J.GVT_RETRO_BSE_FLAG     

!J.GVT_OTH_PAY_CHG        

!J.GVT_DETL_POSN_NBR      

!J.ANNL_BEN_BASE_OVRD     

!J.BENEFIT_PROGRAM        

!J.UPDATE_PAYROLL         

!J.GVT_PAY_PLAN           

!J.GVT_PAY_FLAG           

!J.GVT_NID_CHANGE 

! GEX ISDVNPK 08/27/2007              

J.UNION_FULL_PART        

J.UNION_POS              

J.MATRICULA_NBR          

J.SOC_SEC_RISK_CODE      

J.UNION_FEE_AMOUNT       

J.UNION_FEE_START_DT     

J.UNION_FEE_END_DT       

J.EXEMPT_JOB_LBR         

J.EXEMPT_HOURS_MONTH     

J.WRKS_CNCL_FUNCTION     

J.INTERCTR_WRKS_CNCL     

J.CURRENCY_CD1           

J.PAY_UNION_FEE          

J.UNION_CD               

J.BARG_UNIT              

J.UNION_SENIORITY_DT     

J.ENTRY_DATE             

J.LABOR_AGREEMENT        

J.EMPL_CTG               

J.EMPL_CTG_L1            

J.EMPL_CTG_L2            

J.SETID_LBR_AGRMNT 

! GEX ISDVNPK 08/27/2007     

J.WPP_STOP_FLAG                          

J.LABOR_FACILITY_ID                      

J.LBR_FAC_ENTRY_DT                       

J.LAYOFF_EXEMPT_FLAG                     

J.LAYOFF_EXEMPT_RSN                      

! GEX ISDVNPK 08/27/2007     

J.GP_PAYGROUP            

J.GP_DFLT_ELIG_GRP       

J.GP_ELIG_GRP            

J.GP_DFLT_CURRTTYP       

J.CUR_RT_TYPE            

J.GP_DFLT_EXRTDT         

J.GP_ASOF_DT_EXG_RT      

J.ADDS_TO_FTE_ACTUAL     

J.CLASS_INDC             

J.ENCUMB_OVERRIDE        

J.FICA_STATUS_EE         

J.FTE                    

J.PRORATE_CNT_AMT        

J.PAY_SYSTEM_FLG         

J.BORDER_WALKER          

J.LUMP_SUM_PAY           

J.CONTRACT_NUM           

J.JOB_INDICATOR          

J.WRKS_CNCL_ROLE_CHE     

!J.WRKS_CNCL_ID_LCL       

J.BENEFIT_SYSTEM         

J.WORK_DAY_HOURS      

! GEX ISDVNPK 08/27/2007 

J.HR_STATUS                              

J.APPT_TYPE                              

J.MAIN_APPT_NUM_JPN                      

! GEX ISDVNPK 08/27/2007 

J.REPORTS_TO             

J.FORCE_PUBLISH          

J.JOB_DATA_SRC_CD                                    !GBD 09/20/2002 nd

J.ESTABID

! GEX ISDVNPK 08/27/2007 

J.SUPV_LVL_ID                            

J.SETID_SUPV_LVL                         

J.ABSENCE_SYSTEM_CD                      

J.POI_TYPE                               

J.HIRE_DT                                

J.LAST_HIRE_DT                           

J.TERMINATION_DT                         

J.ASGN_START_DT                          

J.LST_ASGN_START_DT                      

J.ASGN_END_DT                            

J.LDW_OVR                                

J.LAST_DATE_WORKED                       

J.EXPECTED_RETURN_DT                     

J.EXPECTED_END_DATE                      

J.AUTO_END_FLG                           

J.LASTUPDDTTM                            

J.LASTUPDOPRID                           

! GEX ISDVNPK 08/27/2007 

J.GEX_LIGHT_DUTY

J.GEX_CHANGE_RECORD

J.GEX_VOLUN_LOW_HRS

J.GEX_STUDENT_IND

J.GEX_MOON_IND

J.GEX_DEPTID_OVR

J.GEX_ACCT_CD_OVR

J.GEX_GL_EXP_OVR

J.GEX_STEWARD

J.GEX_DUES_EXEMPT

J.GEX_FINAN_CORE

J.GEX_INFLATED_HRS

J.GEX_FP_CODE

J.GEX_SEASONAL_EMP	!AXL 5/14/2001 New job field

   move 'Y' to $found

   move &effseq to #effseq

   move &J.EMPL_RCD to #empl_rcd



   do select-current-job-jr-row                      !GBD 09/20/2002

   

FROM PS_JOB J

WHERE J.EMPLID = $emplid

  AND J.EMPL_RCD = &A.EMPL_RCD

  AND J.EFFDT = 

       (SELECT MAX(EFFDT)

          FROM PS_JOB 

         WHERE EMPLID = $emplid

           AND EMPL_RCD = &a.EMPL_RCD

! CJH - 04/08/2003 - modify effdt range since pgm runs on Mondays - want to retrieve Job rows as of Pay Begin

!            AND EFFDT <=$range_end_dt_dbf)

           AND EFFDT <=$new_job_effdt_dbf)

  AND J.EFFSEQ = 

       (SELECT MAX(EFFSEQ)

          FROM PS_JOB

         WHERE EMPLID = $emplid

           AND EMPL_RCD = &A.EMPL_RCD         

           AND EFFDT = J.EFFDT)

! CJH - 02/02/2001 - end

end-SELECT



if $found = 'N'

   print 'No Job information exists for the employee:' (+1,1)

   print $emplid ()

   display 'No Job information exists for the employee:' noline

   display $emplid

end-if

           

end-procedure



!GBD 09/20/2002 Begin

!*********************************************************************

begin-procedure select-current-job-jr-row

#debug9 show 'select-current-job-jr-row'



begin-select on-error=sql-error-found('select-current-job-jr-row')

J2.EMPLID                 

J2.EMPL_RCD               

J2.EFFDT                  

J2.EFFSEQ                 

J2.LASTUPDDTTM            

J2.LASTUPDOPRID           

J2.TAXCODE_UK             

J2.TAX_BASIS_UK           

J2.WORKER_TYPE_MEX        

J2.REDUCED_WEEK_MEX       

J2.LOCATED_CD_MEX         

J2.SALARY_TYPE_MEX        

J2.IMS_TERM_DT_MEX 

!GEX ISDVNPK 08/27/2007       

!J2.CASUAL_IND             

!J2.SALARY_PACKAGED        

!J2.PAYROLL_STATE_AUS      

!J2.CLASSN_CURRENT_AUS     

!J2.WORK_SECTOR_AUS        

!J2.FUNCTION_AUS           

!J2.ANN_CNTACT_HRS_AUS     

!J2.TEACH_WEEKS_AUS        

!J2.CASUAL_TYPE_AUS        

!J2.TERM_TYPE_AUS          

!J2.TERM_LTD_AUS   

!GEX ISDVNPK 08/27/2007               

J2.BALANCE_GRP_NUM        

J2.FP_ACTION_2            

J2.CTG_RATE               

J2.FP_LEGALSTAT_CD        

J2.FP_SCNDMT_CD           

J2.FP_SCND_TYP            

J2.FP_CIVIL_PENSION       

J2.FP_SOURCE_ORG          

J2.FP_RECEP_ORG           

J2.FP_RETURN_CD           

J2.FP_PR_LEGSTA           

J2.FP_FOREND_DT           

J2.FP_END_DT              

J2.FP_CAREFRZPCT          

J2.FP_HIR_DOS_SIT         

J2.FP_PT_PCT_DET          

J2.FP_TITLE_NUM           

J2.FP_DURATION_PCT        

J2.FP_RATING_PRS_FLG      

J2.FP_BUDGET_NBR          

J2.FP_HDCNT_NBR           

J2.FP_POTENT_NBR          

J2.FP_RANK_CD             

J2.FP_STEP_CD             

J2.FP_RK_ENT_DT           

J2.FP_CORPS_CD            

J2.FP_CHG_COR_DT          

J2.FP_CATG_FP             

J2.FP_CATG_LEVEL          

J2.FP_RK_TRIALPD          

J2.FP_STEP_END_DT         

J2.FP_FOR_PROM_DT         

J2.FP_NOMINATION_DT       

J2.FP_TRAINEE             

J2.FP_TRNE_POSN           

J2.FP_RK_PD_END_DT        

J2.FP_SANCTION            

J2.FP_DOWN_GRA            

J2.FP_APPL_SAL_DT         

J2.FP_CHG_IND             

J2.FP_CLD_INST            

J2.FP_SETID_RANK          

J2.FP_INSTALL_DT          

J2.FP_EQUIV_STEP          

J2.FP_STEP_CD2            

J2.FP_BUSINESS_CD         

J2.FP_APPL_DT             

J2.FP_CHG_SAL             

J2.FP_POINTYP_CD          

J2.FP_GROSS_IND           

J2.FP_INCS_IND            

J2.FP_INCS_IND2           

J2.FP_PT_PCT              

J2.FP_PT_END_DT           

J2.FP_PT_FOREND_DT        

J2.FP_COMPRATE            

J2.FP_INST_STAT           

J2.FP_RETROSPECT          

J2.FP_ROW_END_DT          

J2.LAST_UPDATE_DATE       

J2.OTHER_ID_JPN           

J2.INTCP_XFR_FLG          

J2.INTCP_XFR_START_DT     

J2.INTCP_XFR_END_DT       

J2.INTCP_BUS_UNIT         

J2.INTCP_DEPTID           

J2.INTCP_DEPTID2          

J2.INTCP_SETID_DEPT       

J2.INTCP_COMPANY          

J2.INTCP_COMPANY2         

J2.INTCP_SUPV_LVL_ID      

J2.INTCP_SUPV_LVL_ID2

!GEX ISDVNPK 08/27/2007  

J2.START_DATE_JPN                          

J2.EXP_END_DATE_JPN                        

J2.END_DATE_JPN                            

!J2.SUPV_LVL_ID            

!J2.EXPECTED_END_DATE      

!J2.AUTO_END_FLG  

!GEX ISDVNPK 08/27/2007           

J2.DUTIES_TYPE            

J2.ASSIGNMENT_ID          

J2.TARGET_COMPRATE        

J2.CMP_DONT_ABSORB        

J2.SSN_EMPLOYER           

J2.UNITA_PROD_CD          

J2.ACTION_ITA             

J2.ACTION_REASON_ITA      

J2.SPECIAL_HIRCTG_ITA     

J2.PART_TIME_TYPE_ITA     

J2.PART_TIME_PERC_ITA     

J2.PARTTIME_ENDDT_ITA   

!GEX ISDVNPK 08/27/2007   

J2.WORKDAYS_NLD                            

J2.CONT_SAL_TYPE_BRA                       

J2.CBO_CD_BRA                              

J2.SEFIP_CATEGORY_BRA                      

J2.UNION_CD_ALT_BRA   

!GEX ISDVNPK 08/27/2007     



FROM PS_JOB_JR J2



WHERE J2.EMPLID = &J.EMPLID

  AND J2.EMPL_RCD = &J.EMPL_RCD

  AND J2.EFFDT = &J.EFFDT

  AND J2.EFFSEQ = &effseq

end-select



end-procedure

!GBD 09/20/2002 End



!*********************************************************************

!Inserts into the job table with new config2 value 

!*********************************************************************



begin-procedure insert-job-row

#debug9 show 'gexbnahp.insert-job-row'



display 'insert-job-row'

begin-sql on-error=sql-error-found('insert-job-row')



insert into PS_JOB

(EMPLID                                 

,EMPL_RCD                               

,EFFDT                                  

,EFFSEQ                                 

,PER_ORG                                

,DEPTID                                 

,JOBCODE                                

,POSITION_NBR                           

,SUPERVISOR_ID                          

,POSITION_OVERRIDE                      

,POSN_CHANGE_RECORD                     

,EMPL_STATUS                            

,ACTION                                 

,ACTION_DT                              

,ACTION_REASON                          

,LOCATION                               

,TAX_LOCATION_CD                        

,JOB_ENTRY_DT                           

,DEPT_ENTRY_DT                          

,POSITION_ENTRY_DT                      

,SHIFT                                  

,REG_TEMP                               

,FULL_PART_TIME                         

,COMPANY                                

,PAYGROUP                               

,BAS_GROUP_ID                           

,ELIG_CONFIG1                           

,ELIG_CONFIG2                           

,ELIG_CONFIG3                           

,ELIG_CONFIG4                           

,ELIG_CONFIG5                           

,ELIG_CONFIG6                           

,ELIG_CONFIG7                           

,ELIG_CONFIG8                           

,ELIG_CONFIG9                           

,BEN_STATUS                             

,BAS_ACTION                             

,COBRA_ACTION                           

,EMPL_TYPE                              

,HOLIDAY_SCHEDULE                       

,STD_HOURS                              

,STD_HRS_FREQUENCY                      

,OFFICER_CD                             

,EMPL_CLASS                             

,SAL_ADMIN_PLAN                         

,GRADE                                  

,GRADE_ENTRY_DT                         

,STEP                                   

,STEP_ENTRY_DT                          

,GL_PAY_TYPE                            

,ACCT_CD                                

,EARNS_DIST_TYPE                        

,COMP_FREQUENCY                         

,COMPRATE                               

,CHANGE_AMT                             

,CHANGE_PCT                             

,ANNUAL_RT                              

,MONTHLY_RT                             

,DAILY_RT                               
,HOURLY_RT                              

,ANNL_BENEF_BASE_RT                     

,SHIFT_RT                               

,SHIFT_FACTOR                           

,CURRENCY_CD                            

,BUSINESS_UNIT                          

,SETID_DEPT                             

,SETID_JOBCODE                          

,SETID_LOCATION                         

,SETID_SALARY                           

,REG_REGION                             

,DIRECTLY_TIPPED                        

,FLSA_STATUS                            

,EEO_CLASS                              

,FUNCTION_CD                            

,TARIFF_GER                             

,TARIFF_AREA_GER                        

,PERFORM_GROUP_GER                      

,LABOR_TYPE_GER                         

,SPK_COMM_ID_GER                        

,HOURLY_RT_FRA                          

,ACCDNT_CD_FRA                          

,VALUE_1_FRA                            

,VALUE_2_FRA                            

,VALUE_3_FRA                            

,VALUE_4_FRA                            

,VALUE_5_FRA                            

,CTG_RATE                               

,PAID_HOURS                             

,PAID_FTE                               

,PAID_HRS_FREQUENCY                     

,UNION_FULL_PART                        

,UNION_POS                              

,MATRICULA_NBR                          

,SOC_SEC_RISK_CODE                      

,UNION_FEE_AMOUNT                       

,UNION_FEE_START_DT                     

,UNION_FEE_END_DT                       

,EXEMPT_JOB_LBR                         

,EXEMPT_HOURS_MONTH                     

,WRKS_CNCL_FUNCTION                     

,INTERCTR_WRKS_CNCL                     

,CURRENCY_CD1                           

,PAY_UNION_FEE                          

,UNION_CD                               

,BARG_UNIT                              

,UNION_SENIORITY_DT                     

,ENTRY_DATE                             

,LABOR_AGREEMENT                        

,EMPL_CTG                               

,EMPL_CTG_L1                            

,EMPL_CTG_L2                            

,SETID_LBR_AGRMNT                       

,WPP_STOP_FLAG                          

,LABOR_FACILITY_ID                      

,LBR_FAC_ENTRY_DT                       

,LAYOFF_EXEMPT_FLAG                     

,LAYOFF_EXEMPT_RSN                      

,GP_PAYGROUP                            

,GP_DFLT_ELIG_GRP                       

,GP_ELIG_GRP                            

,GP_DFLT_CURRTTYP                       

,CUR_RT_TYPE                            

,GP_DFLT_EXRTDT                         

,GP_ASOF_DT_EXG_RT                      

,ADDS_TO_FTE_ACTUAL                     

,CLASS_INDC                             

,ENCUMB_OVERRIDE                        

,FICA_STATUS_EE                         

,FTE                                    

,PRORATE_CNT_AMT                        

,PAY_SYSTEM_FLG                         

,BORDER_WALKER                          

,LUMP_SUM_PAY                           

,CONTRACT_NUM                           

,JOB_INDICATOR                          

,WRKS_CNCL_ROLE_CHE                     

,BENEFIT_SYSTEM                         

,WORK_DAY_HOURS                         

,HR_STATUS                              

,APPT_TYPE                              

,MAIN_APPT_NUM_JPN                      

,REPORTS_TO                             

,FORCE_PUBLISH                          

,JOB_DATA_SRC_CD                        

,ESTABID                                

,SUPV_LVL_ID                            

,SETID_SUPV_LVL                         

,ABSENCE_SYSTEM_CD                      

,POI_TYPE                               

,HIRE_DT                                

,LAST_HIRE_DT                           

,TERMINATION_DT                         

,ASGN_START_DT                          

,LST_ASGN_START_DT                      

,ASGN_END_DT                            

,LDW_OVR                                

,LAST_DATE_WORKED                       

,EXPECTED_RETURN_DT                     

,EXPECTED_END_DATE                      

,AUTO_END_FLG                           

,LASTUPDDTTM                            

,LASTUPDOPRID                           

,GEX_LIGHT_DUTY                         

,GEX_CHANGE_RECORD                      

,GEX_VOLUN_LOW_HRS                      

,GEX_STUDENT_IND                        

,GEX_MOON_IND                           

,GEX_DEPTID_OVR                         

,GEX_ACCT_CD_OVR                        

,GEX_GL_EXP_OVR                         

,GEX_STEWARD                            

,GEX_DUES_EXEMPT                        

,GEX_FINAN_CORE                         

,GEX_INFLATED_HRS                       

,GEX_FP_CODE                            

,GEX_SEASONAL_EMP)	!AXL 5/14/2001 New job field)

VALUES

(&J.EMPLID,

&J.EMPL_RCD,

$effdt_dbf,

0,

&J.PER_ORG,

&J.DEPTID,

&J.JOBCODE,

&J.POSITION_NBR,

&J.SUPERVISOR_ID,

&J.POSITION_OVERRIDE,

&J.POSN_CHANGE_RECORD,

&J.EMPL_STATUS,

'PAY',

$curr_Date_dbf_1,

'SPG',

&J.LOCATION,

&J.TAX_LOCATION_cD,

&J.JOB_ENTRY_DT,

&J.DEPT_ENTRY_DT,

&J.POSITION_ENTRY_DT,

&J.SHIFT,

&J.REG_TEMP,

&J.FULL_PART_TIME,

&J.COMPANY,

&J.PAYGROUP,

!SXK 11/09/1999 Begin

!&J.PIN_NUM,

!&J.PAY_BASIS_NUM,

!SXK 11/09/1999 End

&J.BAS_GROUP_ID,

&J.ELIG_CONFIG1,

&J.ELIG_CONFIG2,

&J.ELIG_CONFIG3,

&J.ELIG_CONFIG4,

&J.ELIG_CONFIG5,

&J.ELIG_CONFIG6,

&J.ELIG_CONFIG7,

&J.ELIG_CONFIG8,

&J.ELIG_CONFIG9,

&J.BEN_STATUS,

!SXK 11/09/1999 Begin

&BAC.BAS_ACTION,

!SXK 11/09/1999 End

&J.COBRA_aCTION,

&J.EMPL_TYPE,

&J.HOLIDAY_SCHEDULE,

&J.STD_HOURS,

&J.STD_HRS_FREQUENCY,                                !GBD 09/20/2002

&J.OFFICER_CD,

&J.EMPL_CLASS,

$sal_admin_plan,

$grade,

&J.GRADE_ENTRY_dT,

#new_step,

$effdt_dbf,

&J.GL_PAY_TYPE,

&J.ACCT_cD,

&J.EARNS_DIST_TYPE,

!&J.SALARY_MATRIX_CD,

!&J.RATING_SCALE,

!&J.REVIEW_RATING,

!&J.REVIEW_DT,

&J.COMP_FREQUENCY,

#comprate,

#change_amt,

#change_pct,

#annual_rt,

#monthly_rt, 

#daily_rt,

#new_hourly_rt,

&J.ANNL_BENEF_BASE_RT,

&J.SHIFT_RT,

&J.SHIFT_FACTOR,

&J.CURRENCY_CD,

!sxk 11/09/1999 Begin

&J.BUSINESS_UNIT,

&J.SETID_DEPT,

&J.SETID_JOBCODE,

&J.SETID_LOCATION,                                   !GBD 09/20/2002

&J.SETID_SALARY,                                     !GBD 09/20/2002

&J.REG_REGION,

&J.DIRECTLY_TIPPED,

!SXK 11/09/1999 End

&J.FLSA_STATUS,

&J.EEO_CLASS,

&J.FUNCTION_CD,

&J.TARIFF_GER,                                       !GBD 09/20/2002 Begin

&J.TARIFF_AREA_GER,        

&J.PERFORM_GROUP_GER,

&J.LABOR_TYPE_GER,         

&J.SPK_COMM_ID_GER,        

!&J.WRKS_CNCL_MEM_GER,                                !GBD 09/20/2002 End

&J.HOURLY_RT_FRA,

&J.ACCDNT_CD_FRA,

&J.VALUE_1_FRA,                                      !GBD 09/20/2002 Begin

&J.VALUE_2_FRA,            

&J.VALUE_3_FRA,            

&J.VALUE_4_FRA,            

&J.VALUE_5_FRA,            

&J.CTG_RATE,               

&J.PAID_HOURS,             

&J.PAID_FTE,               

&J.PAID_HRS_FREQUENCY,     

!&J.GVT_EFFDT,              

!&J.GVT_EFFDT_PROPOSED,     

!&J.GVT_TRANS_NBR,          

!&J.GVT_TRANS_NBR_SEQ,      

!&J.GVT_WIP_STATUS,         

!&J.GVT_STATUS_TYPE,        

!&J.GVT_NOA_CODE,           

!&J.GVT_LEG_AUTH_1,         

!&J.GVT_PAR_AUTH_D1,        

!&J.GVT_PAR_AUTH_D1_2,     

!&J.GVT_LEG_AUTH_2,      

!&J.GVT_PAR_AUTH_D2,        

!&J.GVT_PAR_AUTH_D2_2,      

!&J.GVT_PAR_NTE_DATE,       

!&J.GVT_WORK_SCHED,        

!&J.GVT_SUB_AGENCY,         

!&J.GVT_ELIG_FEHB,          

!&J.GVT_FEHB_DT,            

!&J.GVT_PAY_RATE_DETER,     

!&J.GVT_STEP,               

!&J.GVT_RTND_PAY_PLAN,      

!&J.GVT_RTND_SAL_PLAN,      

!&J.GVT_RTND_GRADE,         

!&J.GVT_RTND_STEP,          

!&J.GVT_RTND_GVT_STEP,      

!&J.GVT_PAY_BASIS,          

!&J.GVT_COMPRATE,           

!&J.GVT_LOCALITY_ADJ,       

!&J.GVT_BIWEEKLY_RT,        

!&J.GVT_DAILY_RT,           

!&J.GVT_HRLY_RT_NO_LOC,     

!&J.GVT_DLY_RT_NO_LOC,      

!&J.GVT_BW_RT_NO_LOC,       

!&J.GVT_MNLY_RT_NO_LOC,     

!&J.GVT_ANNL_RT_NO_LOC,     

!&J.GVT_XFER_FROM_AGCY,     

!&J.GVT_XFER_TO_AGCY,       

!&J.GVT_RETIRE_PLAN,        

!&J.GVT_ANN_IND,            

!&J.GVT_FEGLI,              

!&J.GVT_FEGLI_LIVING,       

!&J.GVT_LIVING_AMT,         

!&J.GVT_ANNUITY_OFFSET,     

!&J.GVT_CSRS_FROZN_SVC,     

!&J.GVT_PREV_RET_COVRG,     

!&J.GVT_FERS_COVERAGE,      

!&J.GVT_TYPE_OF_APPT,       

!&J.GVT_POI,                

!&J.GVT_POSN_OCCUPIED,      

!&J.GVT_CONT_EMPLID,        

!&J.GVT_ROUTE_NEXT,         

!&J.GVT_CHANGE_FLAG,       

!&J.GVT_TSP_UPD_IND,        

!&J.GVT_PI_UPD_IND,         

!&J.GVT_SF52_NBR,           

!&J.GVT_S113G_CEILING,      

!&J.GVT_LEO_POSITION,      

!&J.GVT_ANNUIT_COM_DT,      

!&J.GVT_BASIC_LIFE_RED,     

!&J.GVT_DED_PRORT_DT,       

!&J.GVT_FEGLI_BASC_PCT,     

!&J.GVT_FEGLI_OPT_PCT,      

!&J.GVT_FEHB_PCT,           

!&J.GVT_RETRO_FLAG,         

!&J.GVT_RETRO_DED_FLAG,     

!&J.GVT_RETRO_JOB_FLAG,     

!&J.GVT_RETRO_BSE_FLAG,     

!&J.GVT_OTH_PAY_CHG,        

!&J.GVT_DETL_POSN_NBR,      

!&J.ANNL_BEN_BASE_OVRD,     

!&J.BENEFIT_PROGRAM,        

!&J.UPDATE_PAYROLL,         

!&J.GVT_PAY_PLAN,           

!&J.GVT_PAY_FLAG,           

!&J.GVT_NID_CHANGE,         

&J.UNION_FULL_PART,        

&J.UNION_POS,              

&J.MATRICULA_NBR,          

&J.SOC_SEC_RISK_CODE,      

&J.UNION_FEE_AMOUNT,       

&J.UNION_FEE_START_DT,     

&J.UNION_FEE_END_DT,       

&J.EXEMPT_JOB_LBR,         

&J.EXEMPT_HOURS_MONTH,     

&J.WRKS_CNCL_FUNCTION,     

&J.INTERCTR_WRKS_CNCL,     

&J.CURRENCY_CD1,           

&J.PAY_UNION_FEE,          

&J.UNION_CD,               

&J.BARG_UNIT,              

&J.UNION_SENIORITY_DT,     

&J.ENTRY_DATE,             

&J.LABOR_AGREEMENT,        

&J.EMPL_CTG,               

&J.EMPL_CTG_L1,            

&J.EMPL_CTG_L2,            

&J.SETID_LBR_AGRMNT,  

&J.WPP_STOP_FLAG,                          

&J.LABOR_FACILITY_ID,                      

&J.LBR_FAC_ENTRY_DT,                       

&J.LAYOFF_EXEMPT_FLAG,                   

&J.LAYOFF_EXEMPT_RSN,

&J.GP_PAYGROUP,            

&J.GP_DFLT_ELIG_GRP,       

&J.GP_ELIG_GRP,            

&J.GP_DFLT_CURRTTYP,       

&J.CUR_RT_TYPE,            

&J.GP_DFLT_EXRTDT,         

&J.GP_ASOF_DT_EXG_RT,      

&J.ADDS_TO_FTE_ACTUAL,     

&J.CLASS_INDC,             

&J.ENCUMB_OVERRIDE,        

&J.FICA_STATUS_EE,        

&J.FTE,                    

&J.PRORATE_CNT_AMT,        

&J.PAY_SYSTEM_FLG,         

&J.BORDER_WALKER,          

&J.LUMP_SUM_PAY,           

&J.CONTRACT_NUM,           

&J.JOB_INDICATOR,          

&J.WRKS_CNCL_ROLE_CHE,     

!&J.WRKS_CNCL_ID_LCL,       

&J.BENEFIT_SYSTEM,         

&J.WORK_DAY_HOURS,         

&J.HR_STATUS,                             

&J.APPT_TYPE,                              

&J.MAIN_APPT_NUM_JPN, 

&J.REPORTS_TO,             

&J.FORCE_PUBLISH,          

&J.JOB_DATA_SRC_CD,                                  !GBD 09/20/2002 End

&J.ESTABID,

&J.SUPV_LVL_ID                            

,&J.SETID_SUPV_LVL                         

,&J.ABSENCE_SYSTEM_CD                      

,&J.POI_TYPE                               

,&J.HIRE_DT                                

,&J.LAST_HIRE_DT                           

,&J.TERMINATION_DT                         

,&J.ASGN_START_DT                          

,&J.LST_ASGN_START_DT                      

,&J.ASGN_END_DT                            

,&J.LDW_OVR                                

,&J.LAST_DATE_WORKED                       

,&J.EXPECTED_RETURN_DT                     

,&J.EXPECTED_END_DATE                      

,&J.AUTO_END_FLG                           

,&J.LASTUPDDTTM                            

,&J.LASTUPDOPRID,                           

&J.GEX_LIGHT_DUTY,

'Y',

&J.GEX_VOLUN_LOW_HRS,

&J.GEX_STUDENT_IND,

&J.GEX_MOON_IND,

&J.GEX_DEPTID_OVR,

&J.GEX_ACCT_CD_OVR,

&J.GEX_GL_EXP_OVR,

&J.GEX_STEWARD,

&J.GEX_DUES_EXEMPT,

&J.GEX_FINAN_CORE,

&J.GEX_INFLATED_HRS,

&J.GEX_FP_CODE,

&J.GEX_SEASONAL_EMP)	!AXL 5/14/2001 New job field

end-sql



  do insert-job-jr-row                               !GBD 09/20/2002



end-procedure



!GBD 09/20/2002 Begin

!*********************************************************************

begin-procedure insert-job-jr-row

#debug9 show 'gexbnahp.insert-job-jr-row'



display 'insert-job-jr-row'

begin-sql on-error=sql-error-found('insert-job-jr-row')



insert into PS_JOB_JR

(EMPLID                                  

,EMPL_RCD                                

,EFFDT                                   

,EFFSEQ                                  

,LASTUPDDTTM                             

,LASTUPDOPRID                            

,TAXCODE_UK                              

,TAX_BASIS_UK                            

,WORKER_TYPE_MEX                         

,REDUCED_WEEK_MEX                        

,LOCATED_CD_MEX                          

,SALARY_TYPE_MEX                         

,IMS_TERM_DT_MEX                         

,BALANCE_GRP_NUM                         

,FP_ACTION_2                             

,CTG_RATE                                

,FP_LEGALSTAT_CD                         

,FP_SCNDMT_CD                            

,FP_SCND_TYP                             

,FP_CIVIL_PENSION                        

,FP_SOURCE_ORG                           

,FP_RECEP_ORG                            

,FP_RETURN_CD                            

,FP_PR_LEGSTA                            

,FP_FOREND_DT                            

,FP_END_DT                               

,FP_CAREFRZPCT                           

,FP_HIR_DOS_SIT                          

,FP_PT_PCT_DET                           

,FP_TITLE_NUM                            

,FP_DURATION_PCT                         

,FP_RATING_PRS_FLG                       

,FP_BUDGET_NBR                           

,FP_HDCNT_NBR                            

,FP_POTENT_NBR                           

,FP_RANK_CD                              

,FP_STEP_CD                              

,FP_RK_ENT_DT                            

,FP_CORPS_CD                             

,FP_CHG_COR_DT                           

,FP_CATG_FP                              

,FP_CATG_LEVEL                           

,FP_RK_TRIALPD                           

,FP_STEP_END_DT                          

,FP_FOR_PROM_DT                          

,FP_NOMINATION_DT                        

,FP_TRAINEE                              

,FP_TRNE_POSN                            

,FP_RK_PD_END_DT                         

,FP_SANCTION                             

,FP_DOWN_GRA                             

,FP_APPL_SAL_DT                          

,FP_CHG_IND                              

,FP_CLD_INST                             

,FP_SETID_RANK                           

,FP_INSTALL_DT                           

,FP_EQUIV_STEP                           

,FP_STEP_CD2                             

,FP_BUSINESS_CD                          

,FP_APPL_DT                              

,FP_CHG_SAL                              

,FP_POINTYP_CD                           

,FP_GROSS_IND                            

,FP_INCS_IND                             

,FP_INCS_IND2                            

,FP_PT_PCT                               

,FP_PT_END_DT                            

,FP_PT_FOREND_DT                         

,FP_COMPRATE                             

,FP_INST_STAT                            

,FP_RETROSPECT                           

,FP_ROW_END_DT                           

,LAST_UPDATE_DATE                        

,OTHER_ID_JPN                            

,INTCP_XFR_FLG                           

,INTCP_XFR_START_DT                      

,INTCP_XFR_END_DT                        

,INTCP_BUS_UNIT                          

,INTCP_DEPTID                            

,INTCP_DEPTID2                           

,INTCP_SETID_DEPT                        

,INTCP_COMPANY                           

,INTCP_COMPANY2                          

,INTCP_SUPV_LVL_ID                       

,INTCP_SUPV_LVL_ID2                      

,START_DATE_JPN                          

,EXP_END_DATE_JPN                        

,END_DATE_JPN                            

,DUTIES_TYPE                             

,ASSIGNMENT_ID                           

,TARGET_COMPRATE                         

,CMP_DONT_ABSORB                         

,SSN_EMPLOYER                            

,UNITA_PROD_CD                           

,ACTION_ITA                              

,ACTION_REASON_ITA                       

,SPECIAL_HIRCTG_ITA                      

,PART_TIME_TYPE_ITA                      

,PART_TIME_PERC_ITA                      

,PARTTIME_ENDDT_ITA                      

,WORKDAYS_NLD                            

,CONT_SAL_TYPE_BRA                       

,CBO_CD_BRA                              

,SEFIP_CATEGORY_BRA                      

,UNION_CD_ALT_BRA)

VALUES

(&J.EMPLID,

&J.EMPL_RCD,

$effdt_dbf,

0,

&J2.LASTUPDDTTM                             

,&J2.LASTUPDOPRID                            

,&J2.TAXCODE_UK                              

,&J2.TAX_BASIS_UK                            

,&J2.WORKER_TYPE_MEX                         

,&J2.REDUCED_WEEK_MEX                        

,&J2.LOCATED_CD_MEX                          

,&J2.SALARY_TYPE_MEX                         

,&J2.IMS_TERM_DT_MEX                         

,&J2.BALANCE_GRP_NUM                         

,&J2.FP_ACTION_2                             

,&J2.CTG_RATE                                

,&J2.FP_LEGALSTAT_CD                         

,&J2.FP_SCNDMT_CD                            

,&J2.FP_SCND_TYP                             

,&J2.FP_CIVIL_PENSION                        

,&J2.FP_SOURCE_ORG                           

,&J2.FP_RECEP_ORG                            

,&J2.FP_RETURN_CD                            

,&J2.FP_PR_LEGSTA                            

,&J2.FP_FOREND_DT                            

,&J2.FP_END_DT                               

,&J2.FP_CAREFRZPCT                           

,&J2.FP_HIR_DOS_SIT                          

,&J2.FP_PT_PCT_DET                           

,&J2.FP_TITLE_NUM                            

,&J2.FP_DURATION_PCT                         

,&J2.FP_RATING_PRS_FLG                       

,&J2.FP_BUDGET_NBR                           

,&J2.FP_HDCNT_NBR                            

,&J2.FP_POTENT_NBR                           

,&J2.FP_RANK_CD                              

,&J2.FP_STEP_CD                              

,&J2.FP_RK_ENT_DT                            

,&J2.FP_CORPS_CD                             

,&J2.FP_CHG_COR_DT                           

,&J2.FP_CATG_FP                              

,&J2.FP_CATG_LEVEL                           

,&J2.FP_RK_TRIALPD                           

,&J2.FP_STEP_END_DT                          

,&J2.FP_FOR_PROM_DT                          

,&J2.FP_NOMINATION_DT                        

,&J2.FP_TRAINEE                              

,&J2.FP_TRNE_POSN                            

,&J2.FP_RK_PD_END_DT                         

,&J2.FP_SANCTION                             

,&J2.FP_DOWN_GRA                             

,&J2.FP_APPL_SAL_DT                          

,&J2.FP_CHG_IND                              

,&J2.FP_CLD_INST                             

,&J2.FP_SETID_RANK                           

,&J2.FP_INSTALL_DT                           

,&J2.FP_EQUIV_STEP                           

,&J2.FP_STEP_CD2                             

,&J2.FP_BUSINESS_CD                          

,&J2.FP_APPL_DT                              

,&J2.FP_CHG_SAL                              

,&J2.FP_POINTYP_CD                           

,&J2.FP_GROSS_IND                            

,&J2.FP_INCS_IND                             

,&J2.FP_INCS_IND2                            

,&J2.FP_PT_PCT                               

,&J2.FP_PT_END_DT                            

,&J2.FP_PT_FOREND_DT                         

,&J2.FP_COMPRATE                             

,&J2.FP_INST_STAT                            

,&J2.FP_RETROSPECT                           

,&J2.FP_ROW_END_DT                           

,&J2.LAST_UPDATE_DATE                        

,&J2.OTHER_ID_JPN                            

,&J2.INTCP_XFR_FLG                           

,&J2.INTCP_XFR_START_DT                      

,&J2.INTCP_XFR_END_DT                        

,&J2.INTCP_BUS_UNIT                          

,&J2.INTCP_DEPTID                            

,&J2.INTCP_DEPTID2                           

,&J2.INTCP_SETID_DEPT                        

,&J2.INTCP_COMPANY                           

,&J2.INTCP_COMPANY2                          

,&J2.INTCP_SUPV_LVL_ID                       

,&J2.INTCP_SUPV_LVL_ID2                      

,&J2.START_DATE_JPN                          

,&J2.EXP_END_DATE_JPN                        

,&J2.END_DATE_JPN                            

,&J2.DUTIES_TYPE                             

,&J2.ASSIGNMENT_ID                           

,&J2.TARGET_COMPRATE                         

,&J2.CMP_DONT_ABSORB                         

,&J2.SSN_EMPLOYER                            

,&J2.UNITA_PROD_CD                           

,&J2.ACTION_ITA                              

,&J2.ACTION_REASON_ITA                       

,&J2.SPECIAL_HIRCTG_ITA                      

,&J2.PART_TIME_TYPE_ITA                      

,&J2.PART_TIME_PERC_ITA                      

,&J2.PARTTIME_ENDDT_ITA                      

,&J2.WORKDAYS_NLD                            

,&J2.CONT_SAL_TYPE_BRA                       

,&J2.CBO_CD_BRA                              

,&J2.SEFIP_CATEGORY_BRA                      

,&J2.UNION_CD_ALT_BRA )

end-sql



end-procedure

!GBD 09/20/2002 End



!*********************************************************************

!Inserts into job table with new config2 value

!*********************************************************************



begin-procedure insert-job-row-effdt-exists

#debug9 show 'gexbnahp.insert-job-row-effdt-exists'



display 'insert=job-row-effdt-exists'



begin-sql on-error=sql-error-found('insert-job-row-effdt-exists')

INSERT INTO PS_JOB

(EMPLID                                 

,EMPL_RCD                               

,EFFDT                                  

,EFFSEQ                                 

,PER_ORG                                

,DEPTID                                 

,JOBCODE                                

,POSITION_NBR                           

,SUPERVISOR_ID                          

,POSITION_OVERRIDE                      

,POSN_CHANGE_RECORD                     

,EMPL_STATUS                            

,ACTION                                 

,ACTION_DT                              

,ACTION_REASON                          

,LOCATION                               

,TAX_LOCATION_CD                        

,JOB_ENTRY_DT                           

,DEPT_ENTRY_DT                          

,POSITION_ENTRY_DT                      

,SHIFT                                  

,REG_TEMP                               

,FULL_PART_TIME                         

,COMPANY                                

,PAYGROUP                               

,BAS_GROUP_ID                           

,ELIG_CONFIG1                           

,ELIG_CONFIG2                           

,ELIG_CONFIG3                           

,ELIG_CONFIG4                           

,ELIG_CONFIG5                           

,ELIG_CONFIG6                           

,ELIG_CONFIG7                           

,ELIG_CONFIG8                           

,ELIG_CONFIG9                           

,BEN_STATUS                             

,BAS_ACTION                             

,COBRA_ACTION                           
,EMPL_TYPE                              

,HOLIDAY_SCHEDULE                       

,STD_HOURS                              

,STD_HRS_FREQUENCY                      

,OFFICER_CD                             

,EMPL_CLASS                             

,SAL_ADMIN_PLAN                         

,GRADE                                  

,GRADE_ENTRY_DT                         

,STEP                                   

,STEP_ENTRY_DT                          

,GL_PAY_TYPE                            

,ACCT_CD                                

,EARNS_DIST_TYPE                        

,COMP_FREQUENCY                         

,COMPRATE                               

,CHANGE_AMT                             

,CHANGE_PCT                             

,ANNUAL_RT                              

,MONTHLY_RT                             

,DAILY_RT                               

,HOURLY_RT                              

,ANNL_BENEF_BASE_RT                     

,SHIFT_RT                               

,SHIFT_FACTOR                           

,CURRENCY_CD                            

,BUSINESS_UNIT                          

,SETID_DEPT                             

,SETID_JOBCODE                          

,SETID_LOCATION                         

,SETID_SALARY                           

,REG_REGION                             

,DIRECTLY_TIPPED                        

,FLSA_STATUS                            

,EEO_CLASS                              

,FUNCTION_CD                            

,TARIFF_GER                             

,TARIFF_AREA_GER                        

,PERFORM_GROUP_GER                      

,LABOR_TYPE_GER                         

,SPK_COMM_ID_GER                        

,HOURLY_RT_FRA                          

,ACCDNT_CD_FRA                          

,VALUE_1_FRA                            

,VALUE_2_FRA                            

,VALUE_3_FRA                            

,VALUE_4_FRA                            

,VALUE_5_FRA                            

,CTG_RATE                               

,PAID_HOURS                             

,PAID_FTE                               

,PAID_HRS_FREQUENCY                     

,UNION_FULL_PART                        

,UNION_POS                              

,MATRICULA_NBR                          

,SOC_SEC_RISK_CODE                      

,UNION_FEE_AMOUNT                       

,UNION_FEE_START_DT                     

,UNION_FEE_END_DT                       

,EXEMPT_JOB_LBR                         

,EXEMPT_HOURS_MONTH                     

,WRKS_CNCL_FUNCTION                     

,INTERCTR_WRKS_CNCL                     

,CURRENCY_CD1                           

,PAY_UNION_FEE                          

,UNION_CD                               

,BARG_UNIT                              

,UNION_SENIORITY_DT                     

,ENTRY_DATE                             

,LABOR_AGREEMENT                        

,EMPL_CTG                               

,EMPL_CTG_L1                            

,EMPL_CTG_L2                            

,SETID_LBR_AGRMNT                       

,WPP_STOP_FLAG                          

,LABOR_FACILITY_ID                      

,LBR_FAC_ENTRY_DT                       

,LAYOFF_EXEMPT_FLAG                     

,LAYOFF_EXEMPT_RSN                      

,GP_PAYGROUP                            

,GP_DFLT_ELIG_GRP                       

,GP_ELIG_GRP                            

,GP_DFLT_CURRTTYP                       

,CUR_RT_TYPE                            

,GP_DFLT_EXRTDT                         

,GP_ASOF_DT_EXG_RT                      

,ADDS_TO_FTE_ACTUAL                     

,CLASS_INDC                             

,ENCUMB_OVERRIDE                        

,FICA_STATUS_EE                         

,FTE                                    

,PRORATE_CNT_AMT                        

,PAY_SYSTEM_FLG                         

,BORDER_WALKER                          

,LUMP_SUM_PAY                           

,CONTRACT_NUM                           

,JOB_INDICATOR                          

,WRKS_CNCL_ROLE_CHE                     

,BENEFIT_SYSTEM                         

,WORK_DAY_HOURS                         

,HR_STATUS                              

,APPT_TYPE                              

,MAIN_APPT_NUM_JPN                      

,REPORTS_TO                             

,FORCE_PUBLISH                          

,JOB_DATA_SRC_CD                        

,ESTABID                                

,SUPV_LVL_ID                            

,SETID_SUPV_LVL                         

,ABSENCE_SYSTEM_CD                      

,POI_TYPE                               

,HIRE_DT                                

,LAST_HIRE_DT                           

,TERMINATION_DT                         

,ASGN_START_DT                          

,LST_ASGN_START_DT                      

,ASGN_END_DT                            

,LDW_OVR                                

,LAST_DATE_WORKED                       

,EXPECTED_RETURN_DT                     

,EXPECTED_END_DATE                      

,AUTO_END_FLG                           

,LASTUPDDTTM                            

,LASTUPDOPRID                           

,GEX_LIGHT_DUTY                         

,GEX_CHANGE_RECORD                      

,GEX_VOLUN_LOW_HRS                      

,GEX_STUDENT_IND                        

,GEX_MOON_IND                           

,GEX_DEPTID_OVR                         

,GEX_ACCT_CD_OVR                        

,GEX_GL_EXP_OVR                         

,GEX_STEWARD                            

,GEX_DUES_EXEMPT                        

,GEX_FINAN_CORE                         

,GEX_INFLATED_HRS                       

,GEX_FP_CODE                            

,GEX_SEASONAL_EMP)	!AXL 5/14/2001 New job field)

VALUES

(&I.EMPLID,

&I.EMPL_RCD,

&I.EFFDT,

#effseq,

&I.PER_ORG,

&I.DEPTID,

&I.JOBCODE,

&I.POSITION_NBR,

&I.SUPERVISOR_ID,

&I.POSITION_OVERRIDE,

&I.POSN_CHANGE_RECORD,

&I.EMPL_STATUS,

'PAY',

$curr_date_dbf_1,

'SPG',

&I.LOCATION,

&I.TAX_LOCATION_cD,

&I.JOB_ENTRY_DT,

&I.DEPT_ENTRY_DT,

&I.POSITION_ENTRY_DT,

&I.SHIFT,

&I.REG_TEMP,

&I.FULL_PART_TIME,

&I.COMPANY,

&I.PAYGROUP,

!SXK 11/09/1999 Begin

!&I.PIN_NUM,

!&I.PAY_BASIS_NUM,

!SXK 11/09/1999 End

&I.BAS_GROUP_ID,

&I.ELIG_CONFIG1,

&I.ELIG_CONFIG2,

&I.ELIG_CONFIG3,

&I.ELIG_CONFIG4,

&I.ELIG_CONFIG5,

&I.ELIG_CONFIG6,

&I.ELIG_CONFIG7,

&I.ELIG_CONFIG8,

&I.ELIG_CONFIG9,

&I.BEN_STATUS,

!SXK 11/09/1999 Begin

&BAC.BAS_ACTION,

!SXK 11/09/1999 End

&I.COBRA_aCTION,

&I.EMPL_TYPE,

&I.HOLIDAY_SCHEDULE,

&I.STD_HOURS,

&I.STD_HRS_FREQUENCY,                                !GBD 09/20/2002

&I.OFFICER_CD,

&I.EMPL_CLASS,

$sal_admin_plan,

$grade,

&I.GRADE_ENTRY_dT,

#new_step,

$effdt_dbf,

&I.GL_PAY_TYPE,

&I.ACCT_cD,

&I.EARNS_DIST_TYPE,

!&I.SALARY_MATRIX_CD,

!&I.RATING_SCALE,

!&I.REVIEW_RATING,

!&I.REVIEW_DT,

&I.COMP_FREQUENCY,

#comprate,

#change_amt,

#change_pct,

#annual_rt,

#monthly_rt, 

#daily_rt,                                           !GBD 09/20/2002

#new_hourly_rt,

&I.ANNL_BENEF_BASE_RT,

&I.SHIFT_RT,

&I.SHIFT_FACTOR,

&I.CURRENCY_CD,

!sxk 11/09/1999 Begin

&I.BUSINESS_UNIT,

&I.SETID_DEPT,

&I.SETID_JOBCODE,

&I.SETID_LOCATION,                                   !GBD 09/20/2002

&I.SETID_SALARY,                                     !GBD 09/20/2002

&I.REG_REGION,

&I.DIRECTLY_TIPPED,

!SXK 11/09/1999 End

&I.FLSA_STATUS,

&I.EEO_CLASS,

&I.FUNCTION_CD,

&I.TARIFF_GER,                                       !GBD 09/20/2002 Begin

&I.TARIFF_AREA_GER,        

&I.PERFORM_GROUP_GER,

&I.LABOR_TYPE_GER,         

&I.SPK_COMM_ID_GER,        

!&I.WRKS_CNCL_MEM_GER,                                !GBD 09/20/2002 End

&I.HOURLY_RT_FRA,

&I.ACCDNT_CD_FRA,

&I.VALUE_1_FRA,                                      !GBD 09/20/2002 Begin

&I.VALUE_2_FRA,            

&I.VALUE_3_FRA,            

&I.VALUE_4_FRA,            

&I.VALUE_5_FRA,            

&I.CTG_RATE,               

&I.PAID_HOURS,             

&I.PAID_FTE,               

&I.PAID_HRS_FREQUENCY,     

!&I.GVT_EFFDT,              

!&I.GVT_EFFDT_PROPOSED,     

!&I.GVT_TRANS_NBR,          

!&I.GVT_TRANS_NBR_SEQ,      

!&I.GVT_WIP_STATUS,         

!&I.GVT_STATUS_TYPE,        

!&I.GVT_NOA_CODE,           

!&I.GVT_LEG_AUTH_1,        

!&I.GVT_PAR_AUTH_D1,        

!&I.GVT_PAR_AUTH_D1_2,      

!&I.GVT_LEG_AUTH_2,         

!&I.GVT_PAR_AUTH_D2,        

!&I.GVT_PAR_AUTH_D2_2,      

!&I.GVT_PAR_NTE_DATE,       

!&I.GVT_WORK_SCHED,        

!&I.GVT_SUB_AGENCY,         

!&I.GVT_ELIG_FEHB,          

!&I.GVT_FEHB_DT,            

!&I.GVT_PAY_RATE_DETER,     

!&I.GVT_STEP,               

!&I.GVT_RTND_PAY_PLAN,      

!&I.GVT_RTND_SAL_PLAN,     

!&I.GVT_RTND_GRADE,         

!&I.GVT_RTND_STEP,          

!&I.GVT_RTND_GVT_STEP,      

!&I.GVT_PAY_BASIS,          

!&I.GVT_COMPRATE,          

!&I.GVT_LOCALITY_ADJ,       

!&I.GVT_BIWEEKLY_RT,        

!&I.GVT_DAILY_RT,           

!&I.GVT_HRLY_RT_NO_LOC,     

!&I.GVT_DLY_RT_NO_LOC,      

!&I.GVT_BW_RT_NO_LOC,       

!&I.GVT_MNLY_RT_NO_LOC,     

!&I.GVT_ANNL_RT_NO_LOC,     

!&I.GVT_XFER_FROM_AGCY,     

!&I.GVT_XFER_TO_AGCY,       

!&I.GVT_RETIRE_PLAN,       

!&I.GVT_ANN_IND,            

!&I.GVT_FEGLI,              

!&I.GVT_FEGLI_LIVING,       

!&I.GVT_LIVING_AMT,         

!&I.GVT_ANNUITY_OFFSET,     

!&I.GVT_CSRS_FROZN_SVC,     

!&I.GVT_PREV_RET_COVRG,     

!&I.GVT_FERS_COVERAGE,      

!&I.GVT_TYPE_OF_APPT,      

!&I.GVT_POI,                

!&I.GVT_POSN_OCCUPIED,      

!&I.GVT_CONT_EMPLID,        

!&I.GVT_ROUTE_NEXT,         

!&I.GVT_CHANGE_FLAG,        

!&I.GVT_TSP_UPD_IND,       

!&I.GVT_PI_UPD_IND,         

!&I.GVT_SF52_NBR,           

!&I.GVT_S113G_CEILING,      

!&I.GVT_LEO_POSITION,       

!&I.GVT_ANNUIT_COM_DT,      

!&I.GVT_BASIC_LIFE_RED,     

!&I.GVT_DED_PRORT_DT,       

!&I.GVT_FEGLI_BASC_PCT,     

!&I.GVT_FEGLI_OPT_PCT,      

!&I.GVT_FEHB_PCT,           

!&I.GVT_RETRO_FLAG,         

!&I.GVT_RETRO_DED_FLAG,     

!&I.GVT_RETRO_JOB_FLAG,     

!&I.GVT_RETRO_BSE_FLAG,     

!&I.GVT_OTH_PAY_CHG,        

!&I.GVT_DETL_POSN_NBR,      

!&I.ANNL_BEN_BASE_OVRD,     

!&I.BENEFIT_PROGRAM,        

!&I.UPDATE_PAYROLL,         

!&I.GVT_PAY_PLAN,           

!&I.GVT_PAY_FLAG,           

!&I.GVT_NID_CHANGE,         

&I.UNION_FULL_PART,        

&I.UNION_POS,              

&I.MATRICULA_NBR,          

&I.SOC_SEC_RISK_CODE,      

&I.UNION_FEE_AMOUNT,       

&I.UNION_FEE_START_DT,     

&I.UNION_FEE_END_DT,       

&I.EXEMPT_JOB_LBR,         

&I.EXEMPT_HOURS_MONTH,     

&I.WRKS_CNCL_FUNCTION,     

&I.INTERCTR_WRKS_CNCL,     

&I.CURRENCY_CD1,           

&I.PAY_UNION_FEE,          

&I.UNION_CD,               

&I.BARG_UNIT,              

&I.UNION_SENIORITY_DT,     

&I.ENTRY_DATE,             

&I.LABOR_AGREEMENT,        

&I.EMPL_CTG,               

&I.EMPL_CTG_L1,            

&I.EMPL_CTG_L2,            

&I.SETID_LBR_AGRMNT,  

&I.WPP_STOP_FLAG,                         

&I.LABOR_FACILITY_ID,                      

&I.LBR_FAC_ENTRY_DT,                      

&I.LAYOFF_EXEMPT_FLAG,                     

&I.LAYOFF_EXEMPT_RSN,                      

&I.GP_PAYGROUP,            

&I.GP_DFLT_ELIG_GRP,       

&I.GP_ELIG_GRP,            

&I.GP_DFLT_CURRTTYP,       

&I.CUR_RT_TYPE,            

&I.GP_DFLT_EXRTDT,         

&I.GP_ASOF_DT_EXG_RT,      

&I.ADDS_TO_FTE_ACTUAL,     

&I.CLASS_INDC,             

&I.ENCUMB_OVERRIDE,        

&I.FICA_STATUS_EE,         

&I.FTE,                    

&I.PRORATE_CNT_AMT,        

&I.PAY_SYSTEM_FLG,         

&I.BORDER_WALKER,          

&I.LUMP_SUM_PAY,           

&I.CONTRACT_NUM,           

&I.JOB_INDICATOR,          

&I.WRKS_CNCL_ROLE_CHE,     

!&I.WRKS_CNCL_ID_LCL,       

&I.BENEFIT_SYSTEM,         

&I.WORK_DAY_HOURS,         

&I.HR_STATUS,                              

&I.APPT_TYPE,                             

&I.MAIN_APPT_NUM_JPN,                      

&I.REPORTS_TO,             

&I.FORCE_PUBLISH,          

&I.JOB_DATA_SRC_CD,                                  !GBD 09/20/2002 End

&I.ESTABID,

&I.SUPV_LVL_ID,                            

&I.SETID_SUPV_LVL,                         

&I.ABSENCE_SYSTEM_CD,                      

&I.POI_TYPE,                               

&I.HIRE_DT,                                

&I.LAST_HIRE_DT,                          

&I.TERMINATION_DT,                         

&I.ASGN_START_DT,                          

&I.LST_ASGN_START_DT,                      

&I.ASGN_END_DT,                            

&I.LDW_OVR,                                

&I.LAST_DATE_WORKED,                       

&I.EXPECTED_RETURN_DT,                     

&I.EXPECTED_END_DATE,                      

&I.AUTO_END_FLG,                           

&I.LASTUPDDTTM,                            

&I.LASTUPDOPRID,                           

&I.GEX_LIGHT_DUTY,

'Y',

&I.GEX_VOLUN_LOW_HRS,

&I.GEX_STUDENT_IND,

&I.GEX_MOON_IND,

&I.GEX_DEPTID_OVR,

&I.GEX_ACCT_CD_OVR,

&I.GEX_GL_EXP_OVR,

&I.GEX_STEWARD,

&I.GEX_DUES_EXEMPT,

&I.GEX_FINAN_CORE,

&I.GEX_INFLATED_HRS,

&I.GEX_FP_CODE,

&I.GEX_SEASONAL_EMP)	!AXL 5/14/2001 New job field

end-sql



  do insert-job-jr-row-effdt-exists                      !GBD 09/20/2002



end-procedure



!GBD 09/20/2002 Begin

!*********************************************************************

begin-procedure insert-job-jr-row-effdt-exists

#debug9 show 'gexbnahp.insert-job-jr-row-effdt-exists'



display 'insert-job-jr-row-effdt-exists'

begin-sql on-error=sql-error-found('insert-job-jr-row-effdt-exists')



insert into PS_JOB_JR

(EMPLID                                  

,EMPL_RCD                                

,EFFDT                                   

,EFFSEQ                                  

,LASTUPDDTTM                             

,LASTUPDOPRID                            

,TAXCODE_UK                              

,TAX_BASIS_UK                            

,WORKER_TYPE_MEX                         

,REDUCED_WEEK_MEX                        

,LOCATED_CD_MEX                          

,SALARY_TYPE_MEX                         

,IMS_TERM_DT_MEX                         

,BALANCE_GRP_NUM                         

,FP_ACTION_2                             

,CTG_RATE                                

,FP_LEGALSTAT_CD                         

,FP_SCNDMT_CD                            

,FP_SCND_TYP                             

,FP_CIVIL_PENSION                        

,FP_SOURCE_ORG                           

,FP_RECEP_ORG                            

,FP_RETURN_CD                            

,FP_PR_LEGSTA                            

,FP_FOREND_DT                            

,FP_END_DT                               

,FP_CAREFRZPCT                           

,FP_HIR_DOS_SIT                          

,FP_PT_PCT_DET                           

,FP_TITLE_NUM                            

,FP_DURATION_PCT                         

,FP_RATING_PRS_FLG                       

,FP_BUDGET_NBR                           

,FP_HDCNT_NBR                            

,FP_POTENT_NBR                           

,FP_RANK_CD                              

,FP_STEP_CD                              

,FP_RK_ENT_DT                            

,FP_CORPS_CD                             

,FP_CHG_COR_DT                           

,FP_CATG_FP                              

,FP_CATG_LEVEL                           

,FP_RK_TRIALPD                           

,FP_STEP_END_DT                          

,FP_FOR_PROM_DT                          

,FP_NOMINATION_DT                        

,FP_TRAINEE                              

,FP_TRNE_POSN                            

,FP_RK_PD_END_DT                         

,FP_SANCTION                             

,FP_DOWN_GRA                             

,FP_APPL_SAL_DT                          

,FP_CHG_IND                              

,FP_CLD_INST                             

,FP_SETID_RANK                           

,FP_INSTALL_DT                           

,FP_EQUIV_STEP                           

,FP_STEP_CD2                             

,FP_BUSINESS_CD                          

,FP_APPL_DT                              

,FP_CHG_SAL                              

,FP_POINTYP_CD                           

,FP_GROSS_IND                            

,FP_INCS_IND                             

,FP_INCS_IND2                            

,FP_PT_PCT                               

,FP_PT_END_DT                            

,FP_PT_FOREND_DT                         

,FP_COMPRATE                             

,FP_INST_STAT                            

,FP_RETROSPECT                           

,FP_ROW_END_DT                           

,LAST_UPDATE_DATE                        

,OTHER_ID_JPN                            

,INTCP_XFR_FLG                           

,INTCP_XFR_START_DT                      

,INTCP_XFR_END_DT                        

,INTCP_BUS_UNIT                          

,INTCP_DEPTID                            

,INTCP_DEPTID2                           

,INTCP_SETID_DEPT                        

,INTCP_COMPANY                           

,INTCP_COMPANY2                          

,INTCP_SUPV_LVL_ID                       

,INTCP_SUPV_LVL_ID2                      

,START_DATE_JPN                          

,EXP_END_DATE_JPN                        

,END_DATE_JPN                            

,DUTIES_TYPE                             

,ASSIGNMENT_ID                           

,TARGET_COMPRATE                         

,CMP_DONT_ABSORB                         

,SSN_EMPLOYER                            

,UNITA_PROD_CD                           

,ACTION_ITA                              

,ACTION_REASON_ITA                       

,SPECIAL_HIRCTG_ITA                      

,PART_TIME_TYPE_ITA                      

,PART_TIME_PERC_ITA                      

,PARTTIME_ENDDT_ITA                      

,WORKDAYS_NLD                            

,CONT_SAL_TYPE_BRA                       

,CBO_CD_BRA                              

,SEFIP_CATEGORY_BRA                      

,UNION_CD_ALT_BRA)

VALUES

(&I.EMPLID,

&I.EMPL_RCD,

&I.EFFDT,

#effseq,

&I2.LASTUPDDTTM                             

,&I2.LASTUPDOPRID                            

,&I2.TAXCODE_UK                              

,&I2.TAX_BASIS_UK                            

,&I2.WORKER_TYPE_MEX                         

,&I2.REDUCED_WEEK_MEX                        

,&I2.LOCATED_CD_MEX                          

,&I2.SALARY_TYPE_MEX                         

,&I2.IMS_TERM_DT_MEX                         

,&I2.BALANCE_GRP_NUM                         

,&I2.FP_ACTION_2                             

,&I2.CTG_RATE                                

,&I2.FP_LEGALSTAT_CD                         

,&I2.FP_SCNDMT_CD                            

,&I2.FP_SCND_TYP                             

,&I2.FP_CIVIL_PENSION                        

,&I2.FP_SOURCE_ORG                           

,&I2.FP_RECEP_ORG                            

,&I2.FP_RETURN_CD                            

,&I2.FP_PR_LEGSTA                            

,&I2.FP_FOREND_DT                            

,&I2.FP_END_DT                               

,&I2.FP_CAREFRZPCT                           

,&I2.FP_HIR_DOS_SIT                          

,&I2.FP_PT_PCT_DET                           

,&I2.FP_TITLE_NUM                            

,&I2.FP_DURATION_PCT                         

,&I2.FP_RATING_PRS_FLG                       

,&I2.FP_BUDGET_NBR                           

,&I2.FP_HDCNT_NBR                            

,&I2.FP_POTENT_NBR                           

,&I2.FP_RANK_CD                              

,&I2.FP_STEP_CD                              

,&I2.FP_RK_ENT_DT                            

,&I2.FP_CORPS_CD                             

,&I2.FP_CHG_COR_DT                           

,&I2.FP_CATG_FP                              

,&I2.FP_CATG_LEVEL                           

,&I2.FP_RK_TRIALPD                           

,&I2.FP_STEP_END_DT                          

,&I2.FP_FOR_PROM_DT                          

,&I2.FP_NOMINATION_DT                        

,&I2.FP_TRAINEE                              

,&I2.FP_TRNE_POSN                            

,&I2.FP_RK_PD_END_DT                         

,&I2.FP_SANCTION                             

,&I2.FP_DOWN_GRA                             

,&I2.FP_APPL_SAL_DT                          

,&I2.FP_CHG_IND                              

,&I2.FP_CLD_INST                             

,&I2.FP_SETID_RANK                           

,&I2.FP_INSTALL_DT                           

,&I2.FP_EQUIV_STEP                           

,&I2.FP_STEP_CD2                             

,&I2.FP_BUSINESS_CD                          

,&I2.FP_APPL_DT                              

,&I2.FP_CHG_SAL                              

,&I2.FP_POINTYP_CD                           

,&I2.FP_GROSS_IND                            

,&I2.FP_INCS_IND                             

,&I2.FP_INCS_IND2                            

,&I2.FP_PT_PCT                               

,&I2.FP_PT_END_DT                            

,&I2.FP_PT_FOREND_DT                         

,&I2.FP_COMPRATE                             

,&I2.FP_INST_STAT                            

,&I2.FP_RETROSPECT                           

,&I2.FP_ROW_END_DT                           

,&I2.LAST_UPDATE_DATE                        

,&I2.OTHER_ID_JPN                            

,&I2.INTCP_XFR_FLG                           

,&I2.INTCP_XFR_START_DT                      

,&I2.INTCP_XFR_END_DT                        

,&I2.INTCP_BUS_UNIT                          

,&I2.INTCP_DEPTID                            

,&I2.INTCP_DEPTID2                           

,&I2.INTCP_SETID_DEPT                        

,&I2.INTCP_COMPANY                           

,&I2.INTCP_COMPANY2                          

,&I2.INTCP_SUPV_LVL_ID                       

,&I2.INTCP_SUPV_LVL_ID2                      

,&I2.START_DATE_JPN                          

,&I2.EXP_END_DATE_JPN                        

,&I2.END_DATE_JPN                            

,&I2.DUTIES_TYPE                             

,&I2.ASSIGNMENT_ID                           

,&I2.TARGET_COMPRATE                         

,&I2.CMP_DONT_ABSORB                         

,&I2.SSN_EMPLOYER                            

,&I2.UNITA_PROD_CD                           

,&I2.ACTION_ITA                              

,&I2.ACTION_REASON_ITA                       

,&I2.SPECIAL_HIRCTG_ITA                      

,&I2.PART_TIME_TYPE_ITA                      

,&I2.PART_TIME_PERC_ITA                      

,&I2.PARTTIME_ENDDT_ITA                      

,&I2.WORKDAYS_NLD                            

,&I2.CONT_SAL_TYPE_BRA                       

,&I2.CBO_CD_BRA                              

,&I2.SEFIP_CATEGORY_BRA                      

,&I2.UNION_CD_ALT_BRA)

end-sql



end-procedure

!GBD 09/20/2002 End



!*********************************************************************

! Process ps_compensation rows

!*********************************************************************

begin-procedure process-compensation-rows



  display 'inserting compensation row'



  let $sql-statement = 'GEXPYSAD.SQR,Process-Compensation-Rows,PS_COMPENSATION'

  let $found = 'N'



if $effdt_row_exists = 'Y'

   let $comp_emplid         = &I.EMPLID

   let #comp_empl_rcd       = &I.EMPL_RCD

   let $comp_effdt          = $effdt_dbf

!   let $comp_effdt          = &I.EFFDT

   let #comp_effseq         = #effseq                   !GBD 03/04/2003

   let $comp_comp_frequency = &I.COMP_FREQUENCY

   let $comp_currency_cd    = &I.CURRENCY_CD

!   let $comp_pin_num        = &I.PIN_NUM

else

   let $comp_emplid         = &J.EMPLID

   let #comp_empl_rcd       = &J.EMPL_RCD

!   let $comp_effdt          = &J.EFFDT

   let $comp_effdt          = $effdt_dbf

   let #comp_effseq         = 0                         !GBD 03/04/2003

   let $comp_comp_frequency = &J.COMP_FREQUENCY

   let $comp_currency_cd    = &J.CURRENCY_CD

!   let $comp_pin_num        = &J.PIN_NUM

end-if



 show 'effdt: ' $comp_effdt



begin-SELECT On-Error=Sql-error-found('Process-Compensation-Rows')

SC.EMPLID

SC.EMPL_RCD

SC.EFFDT

SC.EFFSEQ                                               !GBD 03/04/2003

SC.COMP_EFFSEQ



  let $found = 'Y'



from ps_compensation SC

where SC.emplid = $comp_emplid

and   SC.empl_rcd = #comp_empl_rcd

and   SC.effdt = $comp_effdt

and   SC.effseq = #comp_effseq                          !GBD 03/04/2003

end-SELECT

 show 'existing comp row: ' $found

 if $found = 'Y'

    let #comp_effseq_new = &SC.COMP_EFFSEQ + 1

 else

    let #comp_effseq_new = #effseq

 end-if



 do insert-compensation



end-procedure



!********************************************************************

begin-procedure insert-compensation

!********************************************************************

  let $sql-statement = 'GEXPYSAD.SQR,Insert-compensation,PS_COMPENSATION'



!GBD 10/08/2002 Begin

  if $effdt_row_exists = 'Y'

   let $check_empl_type = &I.EMPL_TYPE

  else

   let $check_empl_type = &J.EMPL_TYPE

  end-if



  if $check_empl_type = 'H'

     let $COMP_RATECD = 'NAHRLY'

  else

     let $COMP_RATECD = 'NAANNL'

  end-if

!GBD 10/08/2002 End



begin-SQL On-Error=Sql-error-found('Insert-Compensation')

Insert into ps_compensation

(EMPLID,

EMPL_RCD,

EFFDT,

EFFSEQ,

COMP_EFFSEQ,

COMP_RATECD,

COMP_RATE_POINTS,

COMPRATE,

COMP_PCT,

COMP_FREQUENCY,

CURRENCY_CD,

MANUAL_SW,

!PIN_NUM,

CONVERT_COMPRT,

RATE_CODE_GROUP,

CHANGE_AMT,                                          !GBD 09/20/2002 Begin

CHANGE_PCT,     

CHANGE_PTS,     

FTE_INDICATOR,

CMP_SRC_IND                                          !GBD 09/20/2002 End

)

values

($comp_emplid,

#comp_empl_rcd,

$comp_effdt,

#comp_effseq,

#comp_effseq_new,

$COMP_RATECD,                                        !GBD 10/08/2002

0,

#comprate,

0,

$comp_comp_frequency,

$comp_CURRENCY_CD,

'N',

!$comp_pin_num,

#comprate,

' ',

#change_amt,                                         !GBD 09/20/2002 Begin

#change_pct,

0,

'N',

'N'                                                  !GBD 09/20/2002 End

)



end-sql

end-procedure



!*********************************************************************

!Checks if there are any future rows as of new step increase date

!*********************************************************************

Begin-Procedure Check-Future-Rows

move 'N' to $future_rows_exist

begin-select on-error=sql-error-found('Check-Future-Rows')

'xx'

  move 'Y' to $future_rows_exist

FROM PS_JOB FUT

WHERE FUT.EMPLID = $emplid

  AND FUT.EMPL_RCD = &A.EMPL_RCD

  AND FUT.EFFDT > $effdt_Dbf

end-select



end-procedure



!*********************************************************************

! Print Future Report

!*********************************************************************

begin-procedure Print-Future-Report



  use-report future-report



   do get-empl-name



   if #current-line > 51

      new-page

   end-if



   print $deptid          (+1,02)

   print $emplid           (,12)

   print $name             (,24)

   print $sal_admin_plan   (,58)

   print $grade            (,67)

   print #new_step         (,75)

   print #hourly_rt        (,87)



end-procedure

!AXL 5/28/2002 New Procs for page breaks - Begin 

!***********************************************************************

begin-procedure Company-Name

!***********************************************************************

  

  if $AsOfDate = ''  !if no As-Of-Date is specified, default to Today

    move $AsOfToday to $AsOfDate

  end-if



begin-SELECT ON-ERROR=SQL-Error-Found('Company-Name')

CT.DESCR

  move &ct.descr to $companyname

FROM  PS_COMPANY_TBL CT

WHERE CT.COMPANY = $Company

  AND CT.EFFDT =

      (SELECT MAX(EFFDT)

       FROM   PS_COMPANY_TBL

       WHERE  CT.COMPANY = Company

         AND  EFFDT  <= $AsOfDate)

end-SELECT

 

end-procedure



!***********************************************************************

begin-procedure Deptid-Name

!***********************************************************************

 

begin-SELECT ON-ERROR=SQL-Error-Found('Deptid-Name')

DPT.DESCR

  move  &DPT.Descr to $DeptName 

FROM  PS_DEPT_TBL DPT

WHERE DPT.DEPTID = $DeptID

  AND DPT.EFFDT =

      (SELECT MAX(EFFDT)

       FROM   PS_DEPT_TBL 

       WHERE  DPT.DEPTID = DeptID

         AND  EFFDT <= $AsOfDate)

end-SELECT



end-procedure

!AXL 5/28/2002 New Procs for page breaks - End



!*********************************************************************

!Displays the error messages and stops execution

!*********************************************************************

 

begin-procedure SQL-Error-Found($Proc_Name) 

!  do error-found

  display 'SQL Error in ' 

  display $Proc_Name 

  display $_sql-error

  display 'sql-status:' 

  display #_sql-status 



  STOP



end-procedure





begin-procedure ignore-Error($Proc_Name) 

 display 'temp table not dropped...does not exist'



end-procedure



#Include 'tranctrl.sqc'  !Common Transaction Control Procedures

!*#Include 'reset.sqc'     !Reset printer procedure

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure

#Include 'datetime.sqc'  !Routines for date and time formatting

#Include 'number.sqc'    !Routines to format numbers

#Include 'stdapi.sqc'    !Update Process API

#Include 'payrnctl.sqc'  !Get_Run_Control Procedure

!#Include 'payinit.sqc'

#Include 'datemath.sqc'  !Does the date-math functions

#Include 'getdatcd.sqc'  !Get-Date-Codes procedure

#Include 'getbalid.sqc'  !Get-Calendar-Year-Id

#include 'gexxx900.sqc'  !Get company multiple row table

#include 'gexxx901.sqc'  !Get company/paygroup multiple row table

#include 'gexxx907.sqc'  !Get company/division code multiple row table

