!*******************************************************************
! GEXPY227:  This SQR process calculates vacation hours for employees  *
!            in the Union Codes BOL and DVR & Stores 4016 and 4089 who *
!            have attained one or more years of service.  Vacation     *
!            hours earned is calculated by multiplying the number of   *
!            eligible vacation weeks (as determined by service years)  *
!            times the average number of hours worked in the previous  *
!            calendar year.                                            *
!                                                                      *
!                                                                      *
!            Employees are awarded vacation hours at the beginning of  *
!            the calendar year.  Therefore, this process will run      *
!            annually.                                                 *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc. it is not to be copied, reproduced, or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *        
!***********************************************************************
!  ITG93004 ISDVNPK   03/03/2011     INITIAL CREATION                  *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup32.sqc'

begin-setup
  declare-report Vacation-Detail-Report
Printer-Type=HPLASERJET
!Printer-Type=LINEPRINTER     ! FOR TESTING 
    layout=DEFAULT
  end-declare

  declare-report Report-log
Printer-Type=HPLASERJET
!Printer-Type=LINEPRINTER     ! FOR TESTING
    layout=DEFAULT
  end-declare
end-setup


begin-heading 6 for-reports=(report-log)
  LET $REPORTID = 'PY227LOG'
  move 'Vacation Calculation for BOL & DVR - Report Log' to $ReportTitle

 #Include 'stdhdg01.sqc'

  position          (+2)
  print 'Trans#'    (,1)
  print 'Emplid'    (,18)
  print 'Message'   (,50)
  print '-'         (+1,1,174) fill
end-heading


begin-heading 7 for-reports=(Vacation-Detail-Report)
  move 'GEXPY227' to $ReportID
  move 'Vacation Calculation for BOL & DVR - Annual Update' to $ReportTitle

 #Include 'stdhdg02.sqc'
  Let $X000_temp_out = 'Report as of ' || $X000_REPORT_HEADING_ASOFDATE

  Print $X000_temp_out            (3,)  center
  print 'Dept'                    (6,1)
  print 'Acct'                    (,15)
  print 'Awarded'                 (,168)
  print 'Full/Part'               (,114)
  print 'Hrs Worked'              (,146)

  print 'Code'                    (+1,1)
  print 'Description'             (,15)
  print 'Name'                    (,32)
  print 'Emplid'                  (,69)
  print 'Pay Group'               (,84)
  print 'Job Code'                (,98)
  print 'Time Ind'                (,114)
  print 'Hire Date'               (,129)
  print '   YTD   '               (,146)
  print 'Vacation Hrs'            (,163)
  print '-'                       (+1,1,174) fill
end-heading


begin-report
  use-report Vacation-Detail-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init
  Let $GEXXX913_UNION_CD_Alias = 'A.UNION_CD'
  Let $GEXXX900_Company_Alias  = 'J.COMPANY' 

  If $prcs_process_instance = ''
    Do Ask-As-Of-Date

      Let $CompanyString = ''''
     Display 'Enter Company or leave blank to exit.'
     While 1=1
       Input $In-Company Maxlen=3 'Company'
       Uppercase $In-Company
       If Rtrim($In-Company, ' ') = ''
         Concat '''' With $CompanyString
         Break
       End-If
       If $CompanyString <> ''''
         Concat ''',''' With $CompanyString
       End-If
       Concat $In-Company With $CompanyString
     End-While

     If $CompanyString = ''''''
       Let $GEXXX900_INCLUDE_COMPANY_CRITERIA  = '1=1'
       Let $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA = 'ALL'
     Else
       Let $GEXXX900_INCLUDE_COMPANY_CRITERIA  = $GEXXX900_Company_Alias || ' In (' || $CompanyString || ')'
       Let $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA = $GEXXX900_INCLUDE_COMPANY_CRITERIA
     End-If
 
    Let $UnionCdString = ''''
    Display 'Enter Union Code or leave blank to exit.'
    While 1=1
      Input $In-UnionCd Maxlen=3 'Union Code'
      Uppercase $In-UnionCd
      If Rtrim($In-UnionCd, ' ') = ''
        Concat '''' With $UnionCdString
        Break
      End-If
      If $UnionCdString <> ''''
        Concat ''',''' With $UnionCdString
      End-If
      Concat $In-UnionCd With $UnionCdString
    End-While
    If $UnionCdString = ''''''
      Let $GEXXX913_INCLUDE_UNION_CD_CRITERIA = '1=1'
      Let $GEXXX913_INCLUDE_UNION_CD_DISPLAY_CRITERIA = 'ALL'
    Else
      Let $GEXXX913_INCLUDE_UNION_CD_CRITERIA = $GEXXX913_Union_CD_Alias || ' In (' || $UnionCdString || ')'
      Let $GEXXX913_INCLUDE_UNION_CD_DISPLAY_CRITERIA = $GEXXX913_INCLUDE_UNION_CD_CRITERIA
    End-If
   
  Else
    Do GEXXX922-Select-Parameters
    Let $AsOfDate = $GEX_RC_PAY.ASOFDATE
    If Rtrim($AsOfDate,' ') = ''
      Let $AsOfDate = $AsOfToday
    End-If
    
    Do GEXXX913-Select-UNION-CD-Parameters
    Do GEXXX900-Select-Company-Parameters  
    
  End-If

  show '$AsOfDate                                      = ' $AsOfDate
  show '$GEXXX913_INCLUDE_UNION_CD_CRITERIA            = ' $GEXXX913_INCLUDE_UNION_CD_DISPLAY_CRITERIA   
  show '$GEXXX900_INCLUDE_COMPANY_CRITERIA             = ' $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA  
    
  let $Year4   = '1'
  Do Format-DateTime($AsOfDate, $X000_REPORT_HEADING_ASOFDATE, {DEFMDY}, '', '')

  date-time () HH:MI:SS &timeBegan
  date-time () MM/DD/YYYY &dateBegan
  show 'Report Began at ' &timeBegan ' on ' &dateBegan
  show ' '

  do Gexregtp_Init_Strings
  do Get-Date-Codes
  do Convert-To-DTU-Date($AsOfDate, $AsOfDate_dtu)

  move $AsOfYYYY to #AsOfYYYY
  let #prior_year = #asofyyyy - 1            
  let #next_year = #AsOfYYYY + 1
  let #prev_year = #prior_year 
  let $prev_year = to_char(floor(#prev_year))
  let $prior_year = to_char(floor(#prior_year)) 
  let $next_year = to_char(floor(#next_year))	
  Let $effdt      = '01-JAN-' || $next_year	
  let $begin_prior_year = '01-JAN-'||$prior_year
  let $end_prior_year = '31-DEC-'||$prior_year   
  let $curr_year = $asofyyyy                    
  let $begin_curr_year = '01-JAN-'||$curr_year   
  let $end_curr_year = '31-DEC-'||$curr_year    
  let $02JAN_curr_year = '02-JAN-'||$curr_year   
  do convert-to-dtu-date($begin_curr_year,$begin_curr_year_dtu)  
  let $begin_prev_year = '01-JAN-'||$prev_year  
  let $end_prev_year = '31-DEC-'||$prev_year   
  Let $End_2006 = '31-DEC-2006'	
  do convert-to-dtu-date($End_2006,$End_2006_dtu)

  show ' '
  
  show '$effdt:            ' $effdt
  show '$AsOfYYYY:         ' $AsOfYYYY		
  show '$begin_prior_year: ' $begin_prior_year
  show '$end_prior_year:   ' $end_prior_year 
  show '$begin_prev_year: '  $begin_prev_year
  show '$end_prev_year:   '  $end_prev_year 
  show '$begin_curr_year:  ' $begin_curr_year
  show '$end_curr_year:    ' $end_curr_year 
  show '$02JAN_curr_year:  ' $02JAN_curr_year 
  show '$End_2006:         '$End_2006	! Added for 2006 Schedule
  show '$End_2006_dtu:     '$End_2006_dtu	!Added for 2006 schedule
  show ' '
  #debug8 show '#debug8'
  #debug8 show '$effdt:            ' $effdt
  #debug8 show '$AsOfYYYY:         ' $AsOfYYYY		
  #debug8 show '$begin_prior_year: ' $begin_prior_year
  #debug8 show '$end_prior_year:   ' $end_prior_year 
  #debug8 show '$begin_curr_year:  ' $begin_curr_year
  #debug8 show '$end_curr_year:    ' $end_curr_year 
  #debug8 show ' '
  move 'N' to $found
  let #inputtran = 0
  do Select-Employees
  
Report-Exit:

  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded

  show ' '
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded
  show ' '

  display #InputTran 999,999 noline
  display ' Transactions Processed'


  do Commit-Transaction
  show ' '
 show 'COMMIT'

  do Stdapi-Term
end-report

begin-procedure Select-Employees
#debug9 Show 'Select-Employees'
  let $wc_flag = 'N'
  move 'N' to $found
  move 'N' to $Empl_found

begin-select ON-ERROR=SQL-Error-Found
A.COMPANY   ()  ON-BREAK  LEVEL=1  PRINT=NEVER

A.DEPTID    ()  ON-BREAK  LEVEL=2  PRINT=NEVER
                                   SAVE=$previous_deptid
                                   BEFORE=Before-Deptid-Change
                                   AFTER=After-Deptid-Change
A.JOBCODE
A.PAYGROUP
A.EMPLID
A.EMPL_RCD
A.EFFDT
A.EMPL_STATUS
A.ACTION
A.ACTION_REASON
A.REG_TEMP
A.HOURLY_RT
A.ACCT_CD
A.UNION_CD
B.HIRE_DT
B.REHIRE_DT
B.SERVICE_DT
B.GEX_VCN_SENIOR_DT        

  let $Company = &A.company
  let $union_cd = &a.union_cd
  let $EMPLID = &a.emplid  
  let $empl_rcd = &a.empl_rcd
  let $empl_status = &A.EMPL_STATUS
  let $action_reason = &A.ACTION_REASON
  move 'Y' to $Empl_found
  move 0 to #hrs_worked
  move 0 to #vac_hrs_awarded
  move 0 to #tot_pre_wc_hrs
  move 0 to #total_wc_hrs
  move 0 to #nbr_wc_weeks_1
  move 0 to #nbr_wc_weeks_2
  move 0 to #nbr_wc_weeks_3
  
  move &B.GEX_VCN_SENIOR_DT to $GEX_VCN_SENIOR_DT
  do Convert-To-DTU-Date($GEX_VCN_SENIOR_DT, $GEX_VCN_SENIOR_DT_dtu)
  do Dtu-Diff-Years($GEX_VCN_SENIOR_DT_dtu,$AsOfDate_dtu,#dtu_years_VCN)
  
  do Dtu-Diff-Years($GEX_VCN_SENIOR_DT_dtu,$End_2006_dtu,#dtu_years_VCN_06)
  
  move &B.SERVICE_DT to $service_dt
  do Convert-To-DTU-Date($service_dt, $service_dt_dtu)
  do Dtu-Diff-Years($service_dt_dtu,$AsOfDate_dtu,#dtu_years)
  do Dtu-Diff-Years($service_dt_dtu,$End_2006_dtu,#dtu_years_Srvc_06)
   let $VAC_SENIOR_DT = datetostr(&B.GEX_VCN_SENIOR_DT,'dd-mon-yyyy')
   
   If rtrim(datetostr(&B.GEX_VCN_SENIOR_DT,'dd-mon-yyyy'),' ') = ''
     let #dtu_years = #dtu_years
   let #dtu_years_06 = #dtu_years_Srvc_06	
   else
     let #dtu_years = #dtu_years_VCN
     let #dtu_years_06 = #dtu_years_VCN_06
   End-If
     
  
  #ifdef debug8 
    show ' '
    show 'emplid  = ' $emplid
    show '     $service_dt         = ' $service_dt
    show '     $service_dt_dtu     = ' $service_dt_dtu
    show '     $AsOfDate_dtu       = ' $AsOfDate_dtu
    show '     #dtu_years          = ' #dtu_years
  #endif
  
   do Hours-Worked
   if &a.empl_status = 'P'
   and &a.action = 'PLA'
   and substr(&a.action_reason,1,2) = 'WC'
    let $wc_flag = 'Y'
    let $wc_EFFDT = &a.EFFDT 
    do Convert-To-DTU-Date($wc_EFFDT, $wc_EFFDT_dtu)
    do dtu-add-months($wc_effdt_dtu,-1,$1month_ago_dtu)
    do dtu-add-months($wc_effdt_dtu,-2,$2months_ago_dtu)
    do dtu-add-months($wc_effdt_dtu,-3,$3months_ago_dtu)
    let $disp_effdt = &a.effdt
    let $wc_emplid = &a.emplid 
    let $wc_empl_status = &a.empl_status
    let $wc_action_reason = &a.action_reason 
    do work-comp-rtn 
!    show $emplid ' hours worked from EARNINGS_BAL: ' &j.hrs_ytd
    do check-for-prior-wc
  else
  if &a.empl_status = 'P'         
   and &a.action = 'PLA'
   and substr(&a.action_reason,1,3) = 'LOF'
    SHOW 'TO CALCULATE VOL LAYOFF HOURS'
    let $lf_flag = 'Y'
    let $lf_EFFDT = &a.EFFDT 
      do get-vol-lyof-rtn
   END-IF
    
    let $wc_flag = 'N'
    let $begin_wc_year = $begin_curr_year
    let $end_wc_year = $end_curr_year
    do check-for-prior-wc
    do check-for-prior-lf
    if $prior_wc_flag = 'Y'
    end-if
  end-if


   if #hrs_worked > 0
    add 1 to #inputtran
    let #avg_weekly_hrs_worked = #hrs_worked / 52

    do Calc-Eligible-Weeks
    let #vac_hrs_awarded = round(#avg_weekly_hrs_worked * #eligible_weeks,2)

    do Check-Existing-Vac-Erncd
    do Insert-Addl-Pay-Data
    do Print-Detail-Report
    Else
      let #avg_weekly_hrs_worked = 0	
   end-if
 
  #ifdef debug8 
    show '     avg hours       = ' #avg_weekly_hrs_worked
    show '     hours worked    = ' #hrs_worked
    show '     eligible_weeks  = ' #eligible_weeks
    show '     vac_hrs_awarded = ' #vac_hrs_awarded
    show ' '
  #endif
  
FROM  PS_JOB A,
      PS_EMPLOYMENT B 
WHERE  A.EMPLID           = B.EMPLID
   AND A.EMPL_RCD        = B.EMPL_RCD  
   AND  [$GEXXX913_INCLUDE_UNION_CD_CRITERIA]
   AND A.EMPL_STATUS NOT IN ('T','R','U','Q')
   AND A.EFFDT            =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID     = A.EMPLID
          AND EMPL_RCD  = A.EMPL_RCD
          AND EFFDT     <= $AsOfDate)
   AND A.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB 
       WHERE  EMPLID                       = A.EMPLID
          AND EMPL_RCD   = A.EMPL_RCD
          AND EFFDT       = A.EFFDT)
   AND ((add_months(B.SERVICE_DT,12) <= $AsOfDate and B.gex_vcn_senior_dt is Null) 
        or (add_months(B.gex_vcn_senior_dt,12) <= $AsOfDate and B.gex_vcn_senior_dt is not Null))
ORDER BY A.COMPANY, A.DEPTID, A.EMPLID
end-select

   if $Empl_found = 'N'
      Print 'NO DATA SELECTED FOR THIS REPORT RUN'	(25,) Center
   end-if
end-procedure Select-Employees
!*****************************************************************

!*****************************************************************
! Get the hours for the 3 months prior to going on Workers' Comp.

begin-procedure work-comp-rtn
#debug9 show 'work-comp-rtn'

  move 0 to #tot_pre_wc_hrs
  move 0 to #tot_nbr_wc_weeks
  add 1 to #wc_cntr
  if $wc_flag = 'Y'
    add 1 to #main_cntr
  end-if
  if $prior_wc_flag = 'Y'
    add 1 to #prior_cntr
  end-if

! First time
  let $bal_year = substr($1month_ago_dtu,1,4)
  let $bal_period = substr($1month_ago_dtu,6,2)
  move 0 to #pre_wc_hrs 
  do get-hours-before-wc
  add #pre_wc_hrs to #tot_pre_wc_hrs
! Second time
  let $bal_year = substr($2months_ago_dtu,1,4)
  let $bal_period = substr($2months_ago_dtu,6,2)
  move 0 to #pre_wc_hrs 
  do get-hours-before-wc
  add #pre_wc_hrs to #tot_pre_wc_hrs
! Third time
  let $bal_year = substr($3months_ago_dtu,1,4)
  let $bal_period = substr($3months_ago_dtu,6,2)
  move 0 to #pre_wc_hrs 
  do get-hours-before-wc
  add #pre_wc_hrs to #tot_pre_wc_hrs

  if $wc_flag = 'Y'
    do get-nbr-wc-weeks-1
    add #nbr_wc_weeks_1 to #tot_nbr_wc_weeks
  end-if
  if $prior_wc_flag = 'Y'
    do get-nbr-wc-weeks-2
    add #nbr_wc_weeks_2 to #tot_nbr_wc_weeks
  end-if

    if #tot_nbr_wc_weeks > 12
      move 12 to #tot_nbr_wc_weeks
    end-if

    let #avg_pre_wc_hrs = round((#tot_pre_wc_hrs / 13),2)       

    let #total_wc_hrs = #avg_pre_wc_hrs * #tot_nbr_wc_weeks
    add #total_wc_hrs to #hrs_worked  

end-procedure work-comp-rtn


!**********************************************************************************
! Calc the number of weeks the emp was on VL in current year. 
!**********************************************************************************

begin-procedure get-vol-lyof-rtn
  !SHOW #HRS_WORKED 'hrs worked'
  IF $lf_flag = 'Y'
  do Convert-To-DTU-Date($lf_EFFDT, $lf_EFFDT_dtu)
  if $lf_effdt_dtu < $begin_curr_year_dtu
    let #nbr_lf_weeks_1 = round(datediff(strtodate($end_curr_year,'DD-MON-YYYY'), strtodate($begin_curr_year,'DD-MON-YYYY'), 'WEEK' ),2)
  else  
    let #nbr_lf_weeks_1 = round(datediff(strtodate($end_curr_year,'DD-MON-YYYY'), strtodate($lf_effdt,'DD-MON-YYYY'), 'WEEK' ),2)
  end-if
    SHOW #nbr_lf_weeks_1   ' ACTUAL layoff weeks'
  if #nbr_lf_weeks_1 > 6
    move 6 to #nbr_lf_weeks_1
  end-if
  SHOW #nbr_lf_weeks_1  ' layoff weeks'
  let #nbr_lf_weeks = #nbr_lf_weeks_1
 End-if
 
  if $prior_lf_flag ='Y'
   do Convert-To-DTU-Date($prior_LF_EFFDT, $prior_LF_EFFDT_dtu)
  if $prior_LF_effdt_dtu < $begin_curr_year_dtu
    let #nbr_LF_weeks_2 = round(datediff(strtodate($rfl_effdt_lf,'DD-MON-YYYY'), strtodate($begin_curr_year,'DD-MON-YYYY'), 'WEEK' ),2)
  else  
    let #nbr_LF_weeks_2 = round(datediff(strtodate($rfl_effdt_lf,'DD-MON-YYYY'), strtodate($prior_lf_effdt,'DD-MON-YYYY'), 'WEEK' ),2)
    show 'num of weeks ' #nbr_LF_weeks_2
  end-if

  if #nbr_LF_weeks_2 > 6
    move 6 to #nbr_LF_weeks_2
  end-if
  !SHOW #nbr_lf_weeks_2  ' prior layoff weeks'
  let #nbr_lf_weeks = #nbr_lf_weeks_2
  end-if
  
  let #hrs_worked = #hrs_worked + #nbr_lf_weeks * 40
  show '#hrs_worked   ' #hrs_worked

end-procedure get-vol-lyof-rtn

!**********************************************************************************
! Calc the number of weeks the emp was on WC in current year. Cap at 12 weeks.
!**********************************************************************************

begin-procedure get-nbr-wc-weeks-1
#debug9 show 'get-nbr-wc-weeks-1'

  do Convert-To-DTU-Date($wc_EFFDT, $wc_EFFDT_dtu)
  if $wc_effdt_dtu < $begin_curr_year_dtu
    let #nbr_wc_weeks_1 = round(datediff(strtodate($end_curr_year,'DD-MON-YYYY'), strtodate($begin_curr_year,'DD-MON-YYYY'), 'WEEK' ),2)
  else  
    let #nbr_wc_weeks_1 = round(datediff(strtodate($end_curr_year,'DD-MON-YYYY'), strtodate($wc_effdt,'DD-MON-YYYY'), 'WEEK' ),2)
  end-if

  if #nbr_wc_weeks_1 > 12
    move 12 to #nbr_wc_weeks_1
  end-if

end-procedure get-nbr-wc-weeks-1
!**********************************************************************************

begin-procedure get-nbr-wc-weeks-2
#debug9 show 'get-nbr-wc-weeks-2'
#debug9 show '$prior_wc_effdt: ' $prior_wc_effdt
#debug9 show '$begin_curr_year: ' $begin_curr_year


  do Convert-To-DTU-Date($prior_wc_EFFDT, $prior_wc_EFFDT_dtu)
  if $prior_wc_effdt_dtu < $begin_curr_year_dtu
    let #nbr_wc_weeks_2 = round(datediff(strtodate($rfl_effdt,'DD-MON-YYYY'), strtodate($begin_curr_year,'DD-MON-YYYY'), 'WEEK' ),2)
  else  
    let #nbr_wc_weeks_2 = round(datediff(strtodate($rfl_effdt,'DD-MON-YYYY'), strtodate($prior_wc_effdt,'DD-MON-YYYY'), 'WEEK' ),2)
  end-if

  if #nbr_wc_weeks_2 > 12
    move 12 to #nbr_wc_weeks_2
  end-if

end-procedure get-nbr-wc-weeks-2
!**********************************************************************************

!**********************************************************************************
begin-procedure get-hours-before-wc
#debug9 show 'get-hours-before-wc'
begin-select on-error=SQL-Error-Found
l.HRS_MTD &l.HRS_MTD
from ps_earnings_bal l
where  l.emplid            = $wc_emplid
   AND L.BALANCE_ID        = 'CY'
   AND L.BALANCE_YEAR      = $bal_year
   AND L.balance_period    = $bal_period
   AND L.EMPL_RCD          = 0
   AND L.SPCL_BALANCE      = 'Y'
   AND L.ERNCD             = 'TOT'
end-select
  move &l.hrs_mtd to #pre_wc_hrs 
end-procedure get-hours-before-wc

!*****************************************************************

begin-procedure check-for-prior-wc
#debug9 show 'check-for-prior-wc'

move 'N' to $prior_wc_flag

begin-SELECT
m.emplid &m.emplid
m.effdt &m.effdt
m.empl_status &m.empl_status
m.action      &m.action
m.action_reason &m.action_reason

  let $prior_wc_effdt = &m.effdt
  let $prior_yr_wc_dt = &m.effdt
  let $wc_month = substr(&m.effdt,4,3)

n.effdt &n.effdt
  let $curr_yr_rfl_dt = &n.effdt

  move 'Y' to $prior_wc_flag
   do Convert-To-DTU-Date($curr_yr_rfl_dt, $curr_yr_rfl_dtu)
   do Convert-To-DTU-Date($prior_yr_wc_dt, $wc_EFFDT_dtu)
   do dtu-add-months($wc_effdt_dtu,-1,$1month_ago_dtu)
   do dtu-add-months($wc_effdt_dtu,-2,$2months_ago_dtu)
   do dtu-add-months($wc_effdt_dtu,-3,$3months_ago_dtu)
   let $disp_effdt = $prior_yr_wc_dt
   let $wc_emplid = &m.emplid
   let $wc_emplid = &m.emplid 
   let $wc_empl_status = &m.empl_status
   let $wc_action_reason = &m.action_reason 
   let $rfl_effdt = &n.effdt 
   do work-comp-rtn
FROM  PS_JOB M, ps_job N
WHERE m.emplid = $emplid
and  m.empl_rcd = $empl_rcd
and  m.union_cd = $union_cd
   AND m.empl_status = 'P'
   AND SUBSTR(m.action_reason,1,2) = 'WC' 
   AND m.EFFDT            =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID     = m.EMPLID
          AND EMPL_RCD  = m.EMPL_RCD
          and empl_status = 'P'
          AND SUBSTR(action_reason,1,2) = 'WC' 
	  AND effdt    <= n.effdt)
   AND m.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB 
       WHERE  EMPLID     = m.EMPLID
          AND EMPL_RCD   = m.EMPL_RCD
          AND EFFDT      = m.EFFDT)

AND n.emplid = m.emplid
AND n.empl_rcd = m.empl_rcd
AND n.union_cd = m.union_cd
AND n.action = 'RFL'
   AND n.EFFDT  =
      (SELECT MIN(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID    = n.EMPLID
          AND EMPL_RCD  = n.EMPL_RCD
          and action    = n.action  
          AND EFFDT    >= $begin_curr_year 
	  AND effdt    <= $end_curr_year
          and effdt     > m.effdt)
   AND n.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB 
       WHERE  EMPLID     = n.EMPLID
          AND EMPL_RCD   = n.EMPL_RCD
          and action     = n.action 
          AND EFFDT      = n.EFFDT)

AND NOT EXISTS
(SELECT 'X'	  
FROM  PS_JOB o
WHERE o.emplid = m.emplid
AND o.empl_rcd = m.empl_rcd
AND o.union_cd = m.union_cd
   AND o.action = 'RFL'
      AND o.effdt    <=  $end_prior_year 
      AND o.effdt     > m.effdt)

end-select
 
end-procedure check-for-prior-wc
!*****************************************************************


!*****************************************************************
begin-procedure check-for-prior-lf
#debug9 show 'check-for-prior-lf'

move 'N' to $prior_lf_flag

begin-SELECT
p.emplid &p.emplid
p.effdt &p.effdt
p.empl_status &p.empl_status
p.action      &p.action
p.action_reason &p.action_reason

  let $prior_lf_effdt = &p.effdt
  let $prior_yr_lf_dt = &p.effdt
  let $lf_month = substr(&p.effdt,4,3)

q.effdt &q.effdt
  let $curr_yr_rfl_dt = &q.effdt

  move 'Y' to $prior_lf_flag
   do Convert-To-DTU-Date($curr_yr_rfl_dt, $curr_yr_rfl_dtu)
   do Convert-To-DTU-Date($prior_yr_lf_dt, $lf_EFFDT_dtu)
   
   let $disp_effdt = $prior_yr_lc_dt
   let $lf_emplid = &p.emplid
   let $lf_emplid = &p.emplid 
   let $lf_empl_status = &p.empl_status
   let $lf_action_reason = &p.action_reason 
   let $rfl_effdt_LF = &q.effdt 
   do get-vol-lyof-rtn
FROM  PS_JOB P, ps_job Q
WHERE p.emplid = $emplid
and  p.empl_rcd = $empl_rcd
and  p.union_cd = $union_cd
   AND p.empl_status = 'P'
   AND SUBSTR(p.action_reason,1,3) = 'LOF' 
   AND p.EFFDT            =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID     = p.EMPLID
          AND EMPL_RCD  = p.EMPL_RCD
          and empl_status = 'P'
          AND SUBSTR(action_reason,1,3) = 'LOF' 
	  AND effdt    <= q.effdt)
   AND p.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB 
       WHERE  EMPLID     = p.EMPLID
          AND EMPL_RCD   = p.EMPL_RCD
          AND EFFDT      = p.EFFDT)

AND q.emplid = p.emplid
AND q.empl_rcd = p.empl_rcd
AND q.union_cd = p.union_cd
AND q.action = 'RFL'
   AND q.EFFDT  =
      (SELECT MIN(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID    = q.EMPLID
          AND EMPL_RCD  = q.EMPL_RCD
          and action    = q.action  
          AND EFFDT    >= $begin_curr_year 
	  AND effdt    <= $end_curr_year
          and effdt     > p.effdt)
   AND q.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB 
       WHERE  EMPLID     = q.EMPLID
          AND EMPL_RCD   = q.EMPL_RCD
          and action     = q.action 
          AND EFFDT      = q.EFFDT)

AND NOT EXISTS
(SELECT 'X'	  
FROM  PS_JOB r
WHERE r.emplid = p.emplid
AND r.empl_rcd = p.empl_rcd
AND r.union_cd = p.union_cd
   AND r.action = 'RFL'
      AND r.effdt    <=  $end_prior_year 
      AND r.effdt     > p.effdt)

end-select
 
end-procedure check-for-prior-lf
!*****************************************************************


begin-procedure Before-Deptid-Change
#debug9 Show 'Before-Deptid-Change'
  let $DeptID = &A.DEPTID
  do Get-Department-name

end-procedure Before-Deptid-Change


begin-procedure After-Deptid-Change
#debug9 Show 'After-Deptid-Change'
  if #detail_count > 0
    new-page
    move 0 to #detail_count
  end-if
  let $DeptName = ''
end-procedure After-Deptid-Change


begin-procedure Hours-Worked
#debug9 Show 'Hours-Worked'

begin-select on-error=SQL-Error-Found
SUM(J.HRS_YTD) &J.HRS_YTD

  #debug8 show '&J.HRS_YTD  ' &J.HRS_YTD
  add &J.HRS_YTD To #hrs_worked

FROM   PS_EARNINGS_BAL J
WHERE  J.EMPLID            = $EMPLID
   AND (J.COMPANY 	   > '999'	or [$GEXXX900_INCLUDE_COMPANY_CRITERIA]) 
   AND J.BALANCE_ID        = 'CY'
   AND J.BALANCE_YEAR      =  #AsOfYYYY
   AND J.EMPL_RCD          = $EMPL_RCD
   AND J.BALANCE_PERIOD    =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID       = J.EMPLID
          AND COMPANY      = J.COMPANY
          AND BALANCE_ID   = J.BALANCE_ID
          AND BALANCE_YEAR = J.BALANCE_YEAR
          AND SPCL_BALANCE = J.SPCL_BALANCE
          AND EMPL_RCD     = J.EMPL_RCD
          AND ERNCD        = J.ERNCD)
   AND J.SPCL_BALANCE      = 'Y'
   AND J.ERNCD             = 'TOT'
end-select
end-procedure Hours-Worked


!*********************************************************************
!This procedure determines the number of weeks allowed based on the 
!service years for the employee.
!*********************************************************************

begin-procedure Calc-Eligible-Weeks
#debug9 Show 'Calc-Eligible-Weeks'

 Let $empl_unioncdd = &A.UNION_CD
 Let $empl_deptid = &a.deptid

  let $Selectedclause = '(ADCD.UNION_CD = ''' || $UNION_CD || ''''
  let $Selectedclause = $Selectedclause || ' AND ADCD.DEPTID = ''' || $empl_deptid || ''')'
  Do Select-Eligible-Weeks
   If #eligible_weeks = 0
     Do Select-Eligible-Weeks
     let $Selectedclause = '(ADCD.DEPTID = ''' || $empl_deptid || ''')'
     else
     If #eligible_weeks = 0
     Do Select-Eligible-Weeks
      let $Selectedclause = '(ADCD.UNION_CD = ''' || $UNION_CD || ''')'
     end-if
    end-if
    
end-procedure Calc-Eligible-Weeks
!*********************************************************************

!*********************************************************************
begin-procedure Select-Eligible-Weeks
#debug9 Show 'Select-Eligible-Weeks'

  Let #eligible_weeks = 0	
Begin-select on-error=SQL-Error-Found
adcD.MAXIMUM_WEEKS &adcD.MAXIMUM_WEEKS

    move &adcD.MAXIMUM_WEEKS to #eligible_weeks
    If #eligible_weeks <> 0
     exit-select
    end-if
FROM PS_GEX_BOL_DVR_VAC adcD
WHERE [$Selectedclause]
  and  #dtu_years >= adcD.SERVICE_YEARS 
ORDER BY adcD.SERVICE_YEARS  DESC
end-select

End-procedure Select-Eligible-Weeks
!*********************************************************************


!************************************************************************************

begin-procedure get-prev-hours
#debug9 show 'get-prev-hours'
begin-select on-error=SQL-Error-Found
n.HRS_YTD &n.HRS_YTD
from ps_earnings_bal n
where  n.emplid            = $emplid
   and n.empl_rcd          = $empl_rcd
   and n.company           = $company
   AND n.BALANCE_ID        = 'CY'
   AND n.BALANCE_YEAR      = $prev_year
   AND n.balance_period    = 
   (select max(balance_period)
    from ps_earnings_bal
    where balance_year = $prev_year
    and balance_id = n.balance_id
    and emplid = n.emplid
    and empl_rcd = n.empl_rcd
    and company = n.company 
    and erncd = n.erncd) 
   AND n.EMPL_RCD          = 0
   AND n.SPCL_BALANCE      = 'Y'
   AND n.ERNCD             = 'TOT'
end-select
  move &n.hrs_ytd to #prev_tot_hrs 
end-procedure get-prev-hours

!*****************************************************************
!*****************************************************************
Begin-procedure get-curr-vac-hrs
Begin-select on-error=SQL-Error-Found
ad.oth_hrs &ad.oth_hrs
    move &ad.oth_hrs to #curr_vac_hrs
FROM ps_addl_pay_data ad
WHERE ad.emplid = $emplid
  AND ad.erncd = '513'
  and ad.effdt = 
  (select max(effdt)
  from ps_addl_Pay_data 
  where emplid = ad.emplid
  and erncd = ad.erncd 
  and effdt between $begin_curr_year and $02JAN_curr_year)
end-select

End-procedure get-curr-vac-hrs
!*************************************************************************************

!*********************************************************************
!This procedure tries to find if the Vacation Earnings Code (513) is
!defined in ADDL_PAY_ERNCD table. If there is, inserts a row in 
!ADDL_PAY_EFFDT with AsofDate as the effective date. Otherwise,
!inserts the earning code 513 in the ADDL_PAY_ERNCD and also a row with
!effective date equal to AsofDate in ADDL_PAY_EFFDT.
!*********************************************************************
   
begin-procedure Check-Existing-Vac-Erncd
#debug9 Show 'Check-Existing-Vac-Erncd'
  move 'N' to $found

begin-select on-error=SQL-Error-Found
'K'
  move 'Y' to $found
  do Insert-New-Effdt

FROM   PS_ADDL_PAY_ERNCD K
WHERE  K.EMPLID    = &A.EMPLID
   AND K.EMPL_RCD = &A.EMPL_RCD
   AND K.ERNCD     = '513'
end-select

  if $found = 'N'
    do Insert-Vac-Erncd
    do Insert-New-Effdt
  end-if
end-procedure Check-Existing-Vac-Erncd


begin-procedure Insert-Vac-Erncd
#debug9 Show 'Insert-Vac-Erncd for Emplid: ' &a.emplid
  begin-sql on-error=SQL-Error-Found
    INSERT INTO PS_ADDL_PAY_ERNCD
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                RECORD_SOURCE)                   
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '513',
                'O')                             
  end-sql
end-procedure Insert-Vac-Erncd


begin-procedure Insert-New-Effdt
#debug9 Show 'Insert-New-Effdt for Emplid: ' &a.emplid ', effdt: ' $effdt
 begin-sql on-error=SQL-Error-Found
    INSERT INTO PS_ADDL_PAY_EFFDT
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                EFFDT,
                RECORD_SOURCE)                   
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '513',
                $effdt,
                'O')                               
  end-sql
end-procedure Insert-New-Effdt


begin-procedure Insert-Addl-Pay-Data
#debug9 Show 'Insert-Addl-Pay-Data for Emplid: ' &a.emplid ', effdt: ' $effdt
 begin-sql on-error=SQL-Error-Found
    INSERT INTO PS_ADDL_PAY_DATA
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                EFFDT,
                ADDL_SEQ,
                DEPTID,
                JOBCODE,
                POSITION_NBR,
                ACCT_CD,
                GL_PAY_TYPE,
                ADDL_PAY_SHIFT,
                OTH_HRS,
                HOURLY_RT,
                OTH_PAY,
                ADDLPAY_REASON,
                SEPCHK,
                EARNINGS_END_DT,
                GOAL_AMT,
                GOAL_BAL,
                OK_TO_PAY,
                DISABLE_DIR_DEP,
                PRORATE_ADDL_PAY,
                PRORATE_CUI_WEEKS,
                PAY_PERIOD1,
                PAY_PERIOD2,
                PAY_PERIOD3,
                PAY_PERIOD4,
                PAY_PERIOD5,
                STATE,
                LOCALITY,
                TAX_PERIODS,
                TAX_METHOD,
                ADDL_PAY_FREQUENCY,
                DED_TAKEN,
                DED_SUBSET_ID,
                DED_TAKEN_GENL,
                DED_SUBSET_GENL,
                PLAN_TYPE,
                BUSINESS_UNIT,
                COMP_RATECD,
                RECORD_SOURCE)                      
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '513',
                $effdt,
                1,
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                #vac_hrs_awarded,
                0,
                0,
                ' ',
                0,
                '',
                0,
                0,
                'N',
                ' ',
                ' ',
                ' ',
                'N',
                'N',
                'N',
                'N',
                'N',
                ' ',
                ' ',
                0,
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                'STDBU',                             
                ' ',
                'O')                             
  end-sql
end-procedure Insert-Addl-Pay-Data


begin-procedure Print-Detail-Report
#debug9 Show 'Print-Detail-Report'
use-report Vacation-Detail-Report

  add 1 to #detail_count

  let $Acctcd = &A.ACCT_CD
  Do Get-Acct-cd-descr
  Do Get-Employee-Name

  print &A.DEPTID                   (+1,1)
  print $AcctNameAbbrv              (,15)
  print $Old_Format_Name            (,32)  
  print &A.EMPLID                   (,69)
  print &A.PAYGROUP                 (,84)
  print &A.JOBCODE                  (,98)

  move &A.REG_TEMP to $GEXREGTP_ftpt_code
  do GEXREGTP_translate_code
  print $GEXREGTP_ftpt_code_return  (,118)

  let $Year4   = '1'
  do Format-DateTime(&B.HIRE_DT,$HireDate,{DEFMDY},'','')
  print $HireDate                   (,129)

  print #hrs_worked                 (,145)   edit 99,999.99
  print #vac_hrs_awarded            (,166)   edit 99,999.99
end-procedure Print-Detail-Report


!*****************************************************************
!*****************************************************************

!*****************************************************************

begin-procedure SQL-Error-Found
#debug9 Show 'SQL-Error-Found'
  move $EmplId to $Format_EmplId xxx-xx-xxxx
  move 'Y' to $ErrorFound
  do Format-Number(#InputTran, $out, '99999')
  
  use-report report-log

  print $out         (+1,1)
  print $EmplID11    (,18)
  print $sql-error   (,35) 

  display $out noline 
  display '    ' noline 
  display $EmplID11
  display $sql-error
  display 'Program stopped by user request.'
  STOP

end-procedure SQL-Error-Found


#Include 'gexxx922.sqc'  !Get GEX_RC_PAY run control parameters
#include 'gexxx913.sqc'  !Get Union code multiple row table
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getdatcd.sqc'  !Retrieves the asofyear, asofmonth etc.,
#Include 'datetime.sqc'  !Routines for date and time formatting
#include 'askaod.sqc'    !Ask-As-Of-Date routine
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#include 'gexregtp.sqc'  !Translates the REG_TEMP to Full_Part_time
#include 'getdptnm.sqc'  !Get department name
#include 'getactnm.sqc'  !Get account name
#include 'getcodta.sqc'  !Get company data
#Include 'getempnm.sqc'  !Get-Employee-Name
#include 'gexxx900.sqc'  !Company