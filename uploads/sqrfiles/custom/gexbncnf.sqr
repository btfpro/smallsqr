!***********************************************************************
! GEXBNCNF: Benefits Confirmation Forms
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! PeopeSoft, Inc.; it is not to be copied, reproduced, or transmitted  *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of PeopleSoft.                        *
!                                                                      *
! Copyright (c) 1988-1997 PeopleSoft, Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
!      $Date:: 7/02/98 5:59p    $                                      *
!  $Revision:: 3                $                                      *
!  $Workfile:: GEXBNCNF.SQR     $                                      *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE		DESCRIPTION OF THE CHANGE      *        
!***********************************************************************
!  GBNC60   SXK      12/04/1998         INITIAL CREATION               *
!                                                                      *
!  GBNC060  SXK      12/21/1998         Modified to print only if      *
!					multiple options exist         *
!                                                                      *
!	    SXK      03/05/99           Modified to suppress opt code  *
!                                                                      *
!	    SXK      04/21/1999         Modified to print dependent    *
!					flags only when if they are    *
!                                       elected.                       *
!                                                                      *
!	    SXK      11/23/1999         Changed from zip to postal     *
!                                                                      *
!           AXL      09/21/2000		Fix a problem with column      *
!                                       headings not printing for plan *
!                                       types where the spouse is not a*
!                                       covered dependent.             *
!                                       Add SSN and birthdate to the   *
!                                       Dependent/Beneficiary section. * 
!                                                                      *  
!           CWB      08/20/2001         Changed to sort by name,       *
!                                       rather than by emplid.         * 
!                                                                      * 
!           GBD      08/09/2002         Provider field was replaced by *
!                                       Vendor_ID on PS_BENEF_PLAN_TBL.*
!                                       Benefit_Rcd# reference needed  *
!                                       updated to Benefit_Rcd_Nbr.    *
!                                                                      *  
!           CWB      05/01/2003         Expanded the edit for EVENT_ID *
!                                       from '9' to '999'              *
!                                                                      *
!           CJH      12/19/2003         Make wording changes on form   *
!                                                                      *
!           AXL      12/01/2004         Various cosmetic changes to    *
!                                       improve readability.  Retrieve *
!                                       provider descr from PS_VENDOR  *
!                                       instead of PS_PROVIDR_TBL      *
!                                                                      *
!  10847    AXL      01/26/2005         Need to modify logic/hardcoding*
!                                       used to print group numbers on *
!                                       the Confirmation forms. See    *
!                                       CSR for complete details.      *
!                                                                      *
!  10911    AXL      04/25/2005         Prevent "A placement specified *
!                                       is out of range.(-1,0,0)" error*
!                                                                      *
!  10943    AXL      09/26/2005         Add logic for a new mailer page*
!                                       for a window address envelope. *
!                                       Change group number (30539) to *
!                                       (9657198)                      *
!								       *
!  11027    DXS      06/29/2006         Made chane in procedure	       *
!					Approval-Of-Changes. If Event  *
!					Maint, then only print         *
!					signature and the verbiage.    *
!								       *
!  11151    DXS      02/12/2007         Made printing changes in       *
!                                       procedure Confirmation-Page-One*
!                                       and Foot-Note.		       *
!					Added procedure Get-Mapp-Emplid*
!					Changed the                    *
!					$prcs_process_instance = ''    *
!					logic for testing code via SQRW*
!					Added new procedure            *
!                                       Init-Random-Number called from *
!					Init-Report.                   *
!					Added new procedure	       *
!					Get-Random-Number called from  *
!					Select-Data.                   *
!					In Print-Medical-Cvg, hide first*
!                                       5 numbers of depend's SSN      *
!           GEX-CXB 10/05/2007          HCM Upgrade 9.0 Changes.       *
!           GEX-CXB 11/13/2007          HCM Upgrade 9.0 Changes.       *
!         ISDVDZK  11/21/2008           Changed the code according to ITG 53420*
!         VENDKXY  on 09/16/09          Done changes for ITG 66322	*
!         HRISRXK  on 11/17/09          FLEXIBLE CREDIT PRINT	*
!        VENDKXY    01/14/2009          Done the Changes for ITG 71778 *
!        ISDVRKK    02/11/2011          fixed over writing/blank pages *
!        ISDVRKK    03/09/2011          Added 5 to fix text over text  *
!        ISDVRKK    03/22/2011          fix text over text             *             
!        ISDVVXK    03/31/2011          Removed 5 that were added to the*
!                                       Dependents Printing            *
!GEX_SEC_REENG 2015-04-29 Vahini Katta                                 *
!Changes related to gex_emplid_mapp/7 digit emplid
!***********************************************************************

#include 'setenv.sqc'  !Set Database Environment
#Include 'setup01.sqc' ! Portrait  Printer and page-size initialization

#define OE_Return_Dt    '11/15/19'   !Printed in heading for OE
#define EM_Return_Dt    '2 weeks'    !Printed in heading for EM

!Column Position
#define col0                20   !Headings 0 through 4
#define col1                31   !28
!#define col1                32   !28
#define col1a               42
#define col2                57
#define col3                66

!Page Parameter
#define Num_Per_Page       18       !Number of plans+1 that can fit on each
                                    !page--before automatic page break
#define Total_Line         54       !Begin Total line for Plan Accumulations,  50

#define Start_Footer       60       !Vendkxy Done changes for ITG ITG 66322 

#define Start_Row           1

#define page_max           55

!Edit Mask
#define covrg_mask          $9,999,999
#define period_pay_mask     $99,999.99
#define pct_mask            990.99
#define amt_mask            $99,999.99

!Printer
#define Laser Postscript

!Line
#define horz_line_ln  80                 
#define horz_short_ln 45
#define norm_lnsize   10

!Point Size
#define SMALL           '8'     !Small
#define NORM            '10'    !Normal
#define BIG             '14'    !Large
#define NORM_LNSIZE     '10'    !Normal Line
#define BIG_LNSIZE      '20'    !Large Line

!*************************************
Begin-Report
!*************************************

  do Init-Report

  do Get-Report-Language

  display 'Report Begin at ' noline
  do display-time

  do Main-Report

  display 'Report Ended at ' noline
  do display-time

  if #Empl_Cnt = 0
    display '**** NO CONFIRMATION FORMS PRINTED ****'
  end-if

! DXS, comment this after testing
!  do Rollback-Transaction

! DXS, un-comment this after testing
  do StdAPI-Term

End-Report

!*************************************
Begin-Setup
!*************************************
 Page-Size 63 80         

 declare Printer         !Declare printer characteristics.
    type=HPLASERJET      !Types are POSTSCRIPT, HPLASERJET.
    orientation=Portrait !Orientations are PORTRAIT or LANDSCAPE.
    top-margin= .4
    left-margin= .30     !rkk 03/22/2011
    font=5               !Font Number
    point-size=12
    char-size=7.2

End-Setup


!*************************************
Begin-Procedure Init-Report
!*************************************

  let $ReportID    = 'BAS005'
  do Init-Datetime
  do Init-Number
  do Get-Current-DateTime
  move 0 to #Empl_Cnt            !Number of confirmation forms processed

  display ''
  display 'GEXBNCNF: Confirmation Statement'

  do StdAPI-Init

! DXS, added this 
  if $prcs_process_instance = ''
   let $prcs_oprid = 'ISDVDXS'
   let $prcs_run_cntl_id = 'gexbncnf'
  end-if
  
  do Get-Values

  do Init-Random-Number	! DXS, 2/13/07
  
End-Procedure


!**************************************
! This procedure is used to Initialize
! the random number generation logic
! Called once for every run.
! DXS, 2/13/07
!**************************************
begin-procedure Init-Random-Number
begin-sql
   begin
	DBMS_RANDOM.initialize(TO_NUMBER(TO_CHAR(SYSDATE, 'SSSSS')));;
   end;;
end-sql
end-procedure 



!*************************************
Begin-Procedure Ask-Values
!*************************************

  do Ask-Schedule-Id
  do Ask-Process-Status
  do Ask-Reprint-Prompt

End-Procedure


!**********************************
! This procedure is used to read language-dependent text from the Strings table
!**********************************
Begin-Procedure Report-Translation
!**********************************
! Read from BAS005 program IDS
do Init_Report_Translation($ReportID, $Language_Cd)
do Append_Report_Translation('BEN1')

do Get_Field_Information ('BAS005', 'BEN_PGM',      $BAS005-BEN-PGM,     #CW)
do Get_Field_Information ('BAS005', 'DT_OF_BIRTH',  $BAS005-DT-OF-BIRTH, #CW)
do Get_Field_Information ('BAS005', 'SERV_DT',      $BAS005-SERV-DT,     #CW)
do Get_Field_Information ('BAS005', 'EVNT_CLASS',   $BAS005-EVNT-CLASS,  #CW)
do Get_Field_Information ('BAS005', 'INVST_OPT',    $BAS005-INVST-OPT,   #CW)
do Get_Field_Information ('BAS005', 'WITHIN',       $BAS005-WITHIN,      #CW)
do Get_Field_Information ('BAS005', 'BY',           $BAS005-BY,          #CW)
do Get_Field_Information ('BAS005', 'BEN_CHOICE',   $BAS005-BEN-CHOICE,  #CW)
do Get_Field_Information ('BAS005', 'CATEG_BASE',   $BAS005-CATEG-BASE,  #CW)
do Get_Field_Information ('BAS005', 'CONFIRM_OF',   $BAS005-CONFIRM-OF,  #CW)
do Get_Field_Information ('BAS005', 'ELECTIONS',    $BAS005-ELECTIONS,   #CW)
do Get_Field_Information ('BAS005', 'HOURS',        $BAS005-HOURS,       #CW)
do Get_Field_Information ('BAS005', 'WAIVE',        $BAS005-WAIVE,       #CW)
do Get_Field_Information ('BAS005', 'DEP_BENEFS',   $BAS005-DEP-BENEFS,  #CW)
do Get_Field_Information ('BAS005', 'MED_DENT',     $BAS005-MED-DENT,    #CW)
do Get_Field_Information ('BAS005', 'BEN_PER',      $BAS005-BEN_PER,     #CW)
do Get_Field_Information ('BAS005', 'EXCESS',       $BAS005-EXCESS,      #CW)
do Get_Field_Information ('BAS005', 'CONTING',      $BAS005-CONTING,     #CW)

do Get_Field_Information ('BAS005', 'T01_L01A',     $BAS005-T01-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T02_L01A',     $BAS005-T02-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T02_L02A',     $BAS005-T02-L02A,    #CW)
do Get_Field_Information ('BAS005', 'T02_L02B',     $BAS005-T02-L02B,    #CW)
do Get_Field_Information ('BAS005', 'T03_L01A',     $BAS005-T03-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T04_L01A',     $BAS005-T04-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T04_L02A',     $BAS005-T04-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T04_L03A',     $BAS005-T04-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T05_L01A',     $BAS005-T05-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T06_L01A',     $BAS005-T06-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T07_L01A',     $BAS005-T07-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T08_L01A',     $BAS005-T08-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T08_L01B',     $BAS005-T08-L01B,    #CW)
do Get_Field_Information ('BAS005', 'T08_L01C',     $BAS005-T08-L01C,    #CW)
do Get_Field_Information ('BAS005', 'T08_L01D',     $BAS005-T08-L01D,    #CW)
do Get_Field_Information ('BAS005', 'T08_L01E',     $BAS005-T08-L01E,    #CW)
do Get_Field_Information ('BAS005', 'T08_L01F',     $BAS005-T08-L01F,    #CW)
do Get_Field_Information ('BAS005', 'T09_L01A',     $BAS005-T09-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T10_L01A',     $BAS005-T10-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T10_L01B',     $BAS005-T10-L01B,    #CW)
do Get_Field_Information ('BAS005', 'T11_L01A',     $BAS005-T11-L01A,    #CW)
do Get_Field_Information ('BAS005', 'T11_L01B',     $BAS005-T11-L01B,    #CW)
do Get_Field_Information ('BAS005', 'T11_L02A',     $BAS005-T11-L02A,    #CW)
do Get_Field_Information ('BAS005', 'T11_L02B',     $BAS005-T11-L02B,    #CW)
do Get_Field_Information ('BAS005', 'T11_L03A',     $BAS005-T11-L03A,    #CW)
do Get_Field_Information ('BAS005', 'T11_L03B',     $BAS005-T11-L03B,    #CW)
do Get_Field_Information ('BAS005', 'T11_L05A',     $BAS005-T11-L05A,    #CW)

do Get_Field_Information ('BEN1',   'EMPLOYEE_ID2', $BEN1-EMPLOYEE-ID2,  #CW)
do Get_Field_Information ('BEN1',   'EFFDT2',       $BEN1-EFFDT2,        #CW)
do Get_Field_Information ('BEN1',   'PAY_PERIOD',   $BEN1-PAY-PERIOD,    #CW)
do Get_Field_Information ('BEN1',   'COVERAGE',     $BEN1-COVERAGE,      #CW)
do Get_Field_Information ('BEN1',   'AFTERTAX',     $BEN1-AFTERTAX,      #CW)
do Get_Field_Information ('BEN1',   'PRETAX',       $BEN1-PRETAX,        #CW)
do Get_Field_Information ('BEN1',   'DEDCTON',      $BEN1-DEDCTON,       #CW)
do Get_Field_Information ('BEN1',   'BEN_OPT',      $BEN1-BEN-OPT,       #CW)
do Get_Field_Information ('BEN1',   'ELECTION',     $BEN1-ELECTION,      #CW)
do Get_Field_Information ('BEN1',   'PERCENT',      $BEN1-PERCENT,       #CW)
do Get_Field_Information ('BEN1',   'YES',          $BEN1-YES,           #CW)
do Get_Field_Information ('BEN1',   'DEPEND_NAME',  $BEN1-DEPEND-NAME,   #CW)
do Get_Field_Information ('BEN1',   'BENEF_NAME',   $BEN1-BENEF-NAME,    #CW)
do Get_Field_Information ('BEN1',   'MEDICAL',      $BEN1-MEDICAL,       #CW)
do Get_Field_Information ('BEN1',   'DENTAL',       $BEN1-DENTAL,        #CW)
do Get_Field_Information ('BEN1',   'VISION',       $BEN1-VISION,        #CW)
do Get_Field_Information ('BEN1',   'OPTION',       $BEN1-OPTION,        #CW)
do Get_Field_Information ('BEN1',   'FLAT_AMT',     $BEN1-FLAT-AMT,      #CW)
do Get_Field_Information ('BEN1',   'TOT_COST',     $BEN1-TOT-COST,      #CW)
do Get_Field_Information ('BEN1',   'SIGNATURE2',   $BEN1-SIGNATURE2,    #CW)
do Get_Field_Information ('BEN1',   'DATE2',        $BEN1-DATE2,         #CW)
do Get_Field_Information ('BEN1',   'EVENT_ID2',    $BEN1-EVENT-ID2,     #CW)



End-Procedure

!*************************************
Begin-Procedure Get-Values
!*************************************

  do Select-Parameters
  do Get-Schedule-Id
  do Get-Process-Status

  if $process_status_EE = 'Y' and $process_status_FE = 'N'
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS IN (''EE'')) '
  else
  if $process_status_EE = 'N' and $process_status_FE = 'Y'
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS IN (''FE'')) '
  else
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS IN (''EE'',''FE'')) '
 end-if
 end-if

 #debug8 show '$ProcStatCriteria ' $ProcStatCriteria

  do Get-Reprint-Prompt

End-Procedure

!*********************************
Begin-Procedure Ask-Reprint-Prompt
!*********************************

  let $Reprint = ''

  While ($Reprint <> 'Y') And ($Reprint <> 'N')
    Input $Reprint 'Is this a Reprint [Y/N] ?'
    let $Reprint = UPPER(RTRIM($Reprint, ' '))
  End-While

  if ($Reprint = 'Y')
    do Ask-Reprint-Id
  end-if


End-Procedure

!******************************
Begin-Procedure Ask-Reprint-Id
!******************************

  let $Reprint_Match = 'N'
  input $Reprint_Id 'Enter Reprint Id'
  let $Reprint_Id = UPPER(RTRIM($Reprint_Id, ' '))

  While ($Reprint_Match <> 'Y') And ($Reprint_Id <> '')
    do Validate-Reprint-Id
    if ($Reprint_Match = 'N')
      input $Reprint_Id '(Reprint Id does not exist). Enter Reprint Id'
      let $Reprint_Id = UPPER(RTRIM($Reprint_Id, ' '))
    end-if
  End-While

End-Procedure

!**********************************
Begin-Procedure Validate-Reprint-Id
!**********************************

  let $Reprint_Match = 'N'

Begin-SELECT
PRINT_ID
  let $Reprint_Match = 'Y'
FROM  PS_BAS_PRNT
WHERE PRINT_ID = $Reprint_Id
AND   SCHED_ID = $Sched_Id
End-SELECT

End-Procedure

!**********************************
Begin-Procedure Ask-Process-Status
!**********************************

 again:
 input $ProcStat 'Enter Process Status [FE or EE] '
 let $ProcStat = UPPER(RTRIM($ProcStat,' '))
 if $ProcStat <> 'FE' and $ProcStat <> 'EE' and $ProcStat <> ''
   goto again
 end-if

 if ($ProcStat = '')
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS IN (''EE'',''FE'')) '
 else
    let $ProcStatCriteria = ' (A.BAS_PROCESS_STATUS = ''' || $ProcStat || ''') '
 end-if

End-Procedure

!****************************
Begin-Procedure Main-Report
!****************************
 #debug9 show 'Main-report'

  if ($Reprint = 'Y')
    if ($Reprint_Match = 'Y')
      do Reprint-Forms
      do Delete-Reprint-Id
    end-if
  else
    do Print-Forms
  end-if


End-Procedure

!****************************
Begin-Procedure Reprint-Forms
!****************************
 #debug9 show 'RePrint-Forms'

Begin-Select
A3.PRINT_ID
A4.EMPLID
A4.BENEFIT_RCD_NBR
A4.EVENT_ID
PD.NAME

  let $Where =        ' (A.EMPLID = '''       || &A4.EmplId || ''') And '
  let $TempVal = edit(&A4.Benefit_Rcd_Nbr, '9')    
#ifdef INFORMIX
  let $Where = $Where || '(A.BENEFIT_RCD_NBR = ' || $TempVal     || ') And '
#else
  let $Where = $Where || '(A.BENEFIT_RCD_NBR = ' || $TempVal     || ') And '
#endif

  let $TempVal = edit(&A4.Event_Id, '999')

  let $Where = $Where || '(A.EVENT_ID = '     || $TempVal     || ') '

  do Select-Data

From  PS_BAS_PRNT A3,
      PS_BAS_PRNT_PARTIC A4,
      PS_PERSONAL_DATA PD
Where A3.PRINT_ID = $Reprint_Id
And   A3.PRINT_ID = A4.PRINT_ID
And   A3.SCHED_ID = $Sched_Id
AND   A4.EMPLID = PD.EMPLID
Order By PD.NAME ASC,
         A4.BENEFIT_RCD_NBR ASC,
         A4.EVENT_ID ASC
End-Select

End-Procedure

!****************************
Begin-Procedure Print-Forms
!****************************
 #debug9 show 'Print-Forms'

    let $Where = '(A.EVENT_STATUS IN (''O'',''C'')) And '
    let $Where = $Where || '((A.CONFIRM_NOTIFY_DT IS NULL) Or '
    let $Where = $Where || '(A.STATUS_DT > A.CONFIRM_NOTIFY_DT)) '

 #debug8 show '$Where  ' $Where 

    do Select-Data

 End-Procedure

!************************************
Begin-Procedure Select-Data
!***********************************
 #debug9 show 'Select-Data'

 move 0 to #TmpRow              !Initialize

Begin-Select
A.SCHED_ID
A.EMPLID
A.EMPL_RCD
A.BENEFIT_RCD_NBR
A.EVENT_ID
A.BENEFIT_PROGRAM
 move &A.Benefit_Program to $ReportID

A.EVENT_CLASS
 do Get-Event-Descr

A.EVENT_DT
  do Format-DateTime(&A.Event_Dt,$Event_Dt,{DEFDATE},'', '')
  do convert-to-dtu-date(&A.Event_Dt,$Event_dt_dtu)
  let $Event_YY = substr($Event_Dt_dtu,1,4)

A.BAS_PROCESS_STATUS
B.NAME
  let $Name = RTRIM(&b.Name, ' ')			!AXL 9/26/2005
  do Rotate-Name  !convert to First name Last name	AXL 9/26/2005
B.ADDRESS1
B.ADDRESS2

B.CITY
B.STATE
B.Postal !SXK 11/23/99 Changed from zip
  let $CityState = RTRIM(&B.City, ' ') || ',  ' || RTRIM(&B.State,' ') || ' ' || &B.postal

B.BIRTHDATE
 do Format-DateTime(&B.Birthdate,$Birthdate,{DEFDATE},'', '')

C.EFFDT
 do Format-DateTime(&C.Effdt,$EFfdt,{DEFDATE},'','')

C.DESCR
C.DFLT_CREDIT_RLLOVR
D.SERVICE_DT
 do Format-DateTime(&D.Service_Dt,$Service_dt,{DEFDATE},'','')

D.EMPL_RCD

 move 0 to #Flexible_Credits  !Flexible Credits Accumulator
 move 0 to #Page_Number       !Reset to 0 for each employee

 move 'N' to $multiple_options
 do check-options
 if $multiple_options = 'Y'
    do Get-Random-Number	! DXS, 2/13/07. To get random number
    add 1 to  #Empl_Cnt          !Increment the employee counter
	
    do Confirmation-Page-One   !Special header for page one.

    if (&A.BAS_PROCESS_STATUS <> 'EE')
       do Get-Flexible-Credits
    end-if

    do Benefit-Choices           !Get elections; then, print forms.

     do Print-Deduction-Totals    !Print deductiion totals
    do GetDepCount
    do Benefit-Choices-Con       !
    do Dependent-Benef
    do Approval-Of-Changes
    
    if $DpndFoundFlag ='Y'            !rkk 02-08-2011
       do Reset-Printer
    end-if

 end-if

 if (&A.BAS_PROCESS_STATUS <> 'EE')
 
      do Update-Confirm-Notify-Date
 end-if



A.CREDIT_ROLLOVER
A.CONFIRM_NOTIFY_DT
A.JOB_EFFDT
P1.PAY_FREQUENCY

From  PS_BAS_PARTIC A,
      PS_PERSONAL_DATA B,
      PS_BEN_DEFN_PGM C,
      PS_EMPLOYMENT D,
      PS_JOB A2,
      PS_PAYGROUP_TBL P1

Where A.SCHED_ID LIKE $Sched_Id
And   A.PROCESS_IND = 'N'
And ((A.EVENT_CLASS <> '002') and (A.EVENT_CLASS <> 'RWP') and (A.EVENT_CLASS <> 'TWP') and (A.EVENT_CLASS <> 'TWB') and (A.EVENT_CLASS <> 'SU1') and (A.EVENT_CLASS <> 'SU2'))
And LTRIM(RTRIM(A.GEX_EBEN_IND,' '),' ') <> 'N'
And   [$Where]
And   [$ProcStatCriteria]
And   A.BENEFIT_RCD_NBR =
        (SELECT MAX(BENEFIT_RCD_NBR)
         From PS_BAS_PARTIC
         Where SCHED_ID = A.SCHED_ID
         And   EMPLID = A.EMPLID
         And   BENEFIT_RCD_NBR = A.BENEFIT_RCD_NBR
         And   EVENT_ID = A.EVENT_ID)
And   B.EMPLID = A.EMPLID
And   C.BENEFIT_PROGRAM = A.BENEFIT_PROGRAM
And   C.EFFDT =
        (SELECT MAX(EFFDT)
         From PS_BEN_DEFN_PGM
         Where BENEFIT_PROGRAM = C.BENEFIT_PROGRAM)
And   D.EMPLID = A.EMPLID
And   D.BENEFIT_RCD_NBR = A.BENEFIT_RCD_NBR
And   D.EMPL_RCD = A.EMPL_RCD
And   A2.EMPLID = A.EMPLID
And   A2.EFFDT = A.JOB_EFFDT
And   A2.EFFDT =
         (SELECT MAX(EFFDT)
          From PS_JOB
          Where EMPLID = A2.EMPLID
          And   EMPL_RCD = A2.EMPL_RCD
          And   EFFDT = A.JOB_EFFDT)
And   A2.EFFSEQ =
         (SELECT MAX(EFFSEQ)
          From PS_JOB
          Where EMPLID = A2.EMPLID
          And   EMPL_RCD = A2.EMPL_RCD
          And   EFFDT = A.JOB_EFFDT)
And   P1.COMPANY = A2.COMPANY
And   P1.PAYGROUP = A2.PAYGROUP
And   P1.EFFDT =
         (SELECT MAX(EFFDT)
          From PS_PAYGROUP_TBL
          Where COMPANY = P1.COMPANY
          And   PAYGROUP = P1.PAYGROUP
          And   EFFDT <= A2.EFFDT)
Order By A.BAS_PROCESS_STATUS ASC,
         A.BENEFIT_PROGRAM,
         B.NAME,
         A.BENEFIT_RCD_NBR ASC,
         A.EVENT_ID ASC

End-Select
End-Procedure


!********************************
! Procedure which generates the 
! random number. Called for each
! emplid that is processed.
! DXS, 02/13/2007
!********************************
begin-procedure Get-Random-Number
 #debug9 show 'Get-Random-Number'

begin-select
(1+ABS(MOD(dbms_random.random,9)))	&random_num

	move &random_num to $random_num

FROM dual
end-select
end-procedure 


!*******************************
Begin-Procedure Get-Event-Descr
!*******************************
 #debug9 show 'Get-Event-Descr'

Begin-Select
A1.DESCR
 move &A1.Descr to $Benef_Admin_Type

From PS_BAS_EVT_CLASS A1
Where A1.EVENT_CLASS = &A.Event_Class
And   A1.EFF_STATUS = 'A'
End-Select

End-Procedure

!*****************************
Begin-Procedure Reset-Printer
!*****************************
 #debug9 show 'Reset-Printer'

 new-page

End-Procedure


!*************************************
Begin-Procedure Confirmation-Page-One
!*************************************
 #debug9 show 'Confirmation-Page-One'

  let $Event_yyyy = $event_yy
 do Print-Mailer-Pg		
 do Page-Header

 !do Get-Mapp-Emplid	!GEX_SEC_REENG 2015-04-29 Vahini Katta

 graphic () font 5  {norm}
 let #Col3 = {col3} - 10

 print &B.Name                       (4,1)
!*** 'Benefit Pgm:'
 print $BAS005-BEN-PGM               (,#col3)
 print &A.Benefit_Program            (,{col3})

 print &B.Address1                   (+1,1)
!*** 'Employee ID:'
 print $BEN1-EMPLOYEE-ID2            (,{col1})
 ! print &A.Emplid                     (,{col1a})
 !print $mapp_emplid                   (,{col1a})  ! DXS, 02/12/07, Print GE Emplid
 print &A.Emplid                     (,{col1a}) !GEX_SEC_REENG 2015-04-29 Vahini Katta
!*** 'Effective Date:'
 print $BEN1-EFFDT2                  (,#col3)
 print $Event_Dt                     (,{col3})

 if rtrim(&B.Address2,' ') = ''
   print $CityState                  (+1,1)
 else
   print &B.Address2                 (+1,1)
 end-if
!*** 'Date of Birth:'
 print $BAS005-DT-OF-BIRTH           (,{col1})
 print $Birthdate                    (,{col1a})
!***  'Service Date:'
 print $BAS005-SERV-DT               (,#col3)
 print $Service_Dt                   (,{col3})

 if rtrim(&B.Address2,' ') = ''
   print ''                          (+1,1)
 else
   print $CityState                  (+1,1)
 end-if
!*** 'Event Id:'
 print $BEN1-EVENT-ID2               (,{col1})
 let #col1 =  10
 print &A.Event_Id                   (,{col1a})
!***  'Event Class:'
 print $BAS005-EVNT-CLASS            (,#col3)
 print &A.Event_Class                (,{col3})
 position     (-1)		!AXL 1/25/2005
 graphic (+1,1,{horz_line_ln}) Horz-line {norm_lnsize} !Horizontal Line

 do Format-DateTime(&C.Effdt,$C.Effdt,{DEFCMP},'','')
 let $Tmp_Year = substr($C.Effdt,3,2)
 let #Tmp_Year = To_Number($Tmp_Year)
 Subtract 1 from #Tmp_Year
 let $Cur_Year = To_Char(#Tmp_Year)

!*** 'this form, sign it, and return to Human Resources '
 let $ReturnDt = $BAS005-T01-L01A
 if RTRIM(&A.Event_Class,' ') = 'OE'
!***   'by ' || {OE_Return_Dt} || $Cur_Year || '.'
   let $ReturnDt = $ReturnDt || $BAS005-BY || {OE_Return_Dt} || $Cur_Year || '.'
 else
   let $ReturnDt = $ReturnDt || $BAS005-WITHIN || {EM_Return_Dt} || '.'
 end-if

graphic () font 5 11.5  !{NORM}

Let $printtext = 'This statement confirms your benefits through Giant Eagle.  As a reminder, the only time you may' !VENDKXY Done the Changes for ITG 71778  
print $printtext         (+2,1)
Let $printtext = 'change your benefit choices is during Open Enrollment or with a qualified family status change.' !VENDKXY Done the Changes for ITG 71778
print $printtext         (+,1)
Let $printtext = 'Please contact MyHRConnection (1-888-892-2248 or MyHRConnection@gianteagle.com) with questions.' !VENDKXY Done the Changes for ITG 71778 
print $printtext         (+,1)
position          (-1)  

let $grp_stmt = 'Please note your health care group number(s) appear on the line below your benefit election.'
print $grp_stmt      (+1,1) bold

let $printtext = 'return it by '
do convert-to-dtu-date($AsOfToday,$AsOfToday_Dtu)
do dtu-add-days($AsOfToday_Dtu,14,$Returndt_dtu)
do convert-from-dtu-date($returndt_dtu,$returndt)
do Format-DateTime ($Returndt, $returndt, {DEFMDY}, '', '')

 position          (-1)		!AXL 1/25/2005 
 graphic () font 5 {norm}
 graphic (0,1,{horz_line_ln}) Horz-line {norm_lnsize} !Horizontal Line  AXL 1/25/2005 was +1
 
 let #col_ccb  = {col1a} + 8  !rkk 03/22/2011
 let #col_pppt = {col2} + 5   !rkk 03/22/2011
 let #col_ppat = {col3} + 4   !rkk 03/22/2011
 let #col_bo = {col1} - 1
! let #col_bo = {col1} - 2 rkk 02/2011

!*** 'YOUR BENEFIT CHOICES'
print 'YOUR BENEFIT ELECTIONS'	(+2,1) Bold
!*** 'Pay Period'
 print $BEN1-PAY-PERIOD		(0,#col_pppt)	!(0,{col2})
!*** 'Pay Period'
print  $BEN1-PAY-PERIOD		(0,#col_ppat)	!(0,{col3})
!*** 'BO'
let  $BEN1-BEN-OPT-PRNT =  'Benefit Option / ' 
print $BEN1-BEN-OPT-PRNT      (+1,#col_bo)
!*** 'Coverage'
 print $BEN1-COVERAGE		(+0,#col_ccb)
!*** 'PreTax'
 print $BEN1-PRETAX		(0,#col_pppt)  !(0,{col2})
!*** 'AfterTax'
print $BEN1-AFTERTAX		(0,#col_ppat)  !(0,{col3})

!***  'Provider'
 let #col_p = {col1} - 13		
 
 print 'Provider '      (+1,#col_p)
 print 'Group Number'             (0,#col_bo)
 print $BAS005-CATEG-BASE         (0,#col_ccb)
!***  'Deduction'
 print $BEN1-DEDCTON              (0,#col_pppt)		!(0,{col2})
!***  'Deduction'
 print $BEN1-DEDCTON              (0,#col_ppat)		!(0,{col3})

 graphic (0,#col_p,56) Horz-Line {Norm_Lnsize} !Horizontal Line !AXL 12/1/2004 Was 50

End-Procedure

!GEX_SEC_REENG 2015-04-29 Vahini Katta Begins
!*********************************
! ISDVDXS 02/12/2007
! Procedure to get GE Emplid 
!*********************************
!Begin-Procedure Get-Mapp-Emplid
! #debug9 show 'Get-Mapp-Emplid'

!let $mapp_emplid = ' '
!Begin-SELECT
!MAPP.EMPLID
! let $mapp_emplid = RTRIM(&MAPP.EMPLID,' ')

!FROM PS_GEX_EMPLID_MAPP MAPP
!WHERE MAPP.SSN = &A.EMPLID
!End-SELECT
!End-Procedure
!GEX_SEC_REENG 2015-04-29 Vahini Katta Ends

!***************************
Begin-Procedure Page-Header
!***************************
 #debug9 show 'Page-Header'

  let $mailer_pg = 'Y'
  new-page
  let $mailer_pg = 'N'

 let $Report_Id = UPPER(&C.Descr)
 let $Report_Name = $BAS005-CONFIRM-OF || $Event_YYYY || $BAS005-ELECTIONS
       || '-' || ' ' || $Benef_Admin_Type

 graphic () font 5 {norm}

 print $Report_Id                     ({start_row},1) bold
 print $Report_Name                   (+1,1) bold

 graphic (+1,1,{horz_line_ln}) Horz-line {Norm_Lnsize} !Horizontal Line

End-Procedure

!*******************************
Begin-Procedure Benefit-Choices
!*******************************
 #debug9 show 'Benefit-Choices'

 let $first_PlanDescr ='Y'
 move 0 to #PreTax_Total        !PreTax Total Accumulator
 move 0 to #AfterTax_Total      !AfterTax Total Accumulator
 move 0 to #Line_Ct             !Detail Line Counter

Begin-Select
E.SCHED_ID
 move &E.Sched_Id to $SchedId
E.EMPLID
 move &E.Emplid to $Empl_Id
E.BENEFIT_RCD_NBR
  move &E.Benefit_Rcd_Nbr to #BenefitRcdNo    
E.EVENT_ID
 move &E.Event_Id to #EventId
E.PLAN_TYPE
 move &E.Plan_Type to $Plan_Type
 move 'PLAN_TYPE'  to $Fieldname
 move $Plan_Type to $Fieldvalue
 do Read-Translate-Table
 let $PlanDescr = $Xlatlongname

E.OPTION_CD
 let $Option_Cd = RTRIM(&E.Option_Cd,' ')
E.ENROLL_ACTION
E.BAS_ERROR
E.ANNUAL_PLEDGE
E.ANN_EX_CREDIT_FSA
E.VACN_HOURS
 move &E.Vacn_Hours to $Vacn_Hours
 let $Vacn_Hours = $Vacn_Hours || $BAS005-HOURS
E.APAY_EFFDT
E.DISPLAY_PLN_SEQ
 

 if ($Option_Cd <> '') 

  
   do Get-Option-Info

   move &Op.Covrg_Cd to $CovrgCd
   move $AsOfToday to $CovrgEffdt
   do Get-Covrg-Code-Descr
   let $Covrg_Cd = $CovrgDescr


   if ($Option_Cd = 'W')
     let $Option = 'WAIVE'
     let $provider_descr = ' '
   else
     do Get-Benef-Descr
     let $Option =  &Benefit_Plan
   end-if

   move 0 to #PreTax_Deduction   !PreTax Deduction Accumulator
   move 0 to #AfterTax_Deduction !AfterTax Deduction Accumulator

   do Get-Cost-Data

 end-if


    do Print-Plan-Pg1  !NO IF before


From PS_BAS_PARTIC_PLAN E
Where E.SCHED_ID     = &A.Sched_Id
And   E.EMPLID       = &A.Emplid
And   E.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr       
And   E.EVENT_ID     = &A.Event_Id
And   ((E.OPTION_CD <> ' ')
    Or (E.OPTION_CD = ' ' And E.ENROLL_ACTION <> 'T' And E.BAS_ERROR = 'Y')
    Or (E.OPTION_CD = ' ' And E.ENROLL_ACTION = 'T'))
AND   E.PLAN_TYPE  <> '20'
AND   E.PLAN_TYPE  <> '22'
AND   E.PLAN_TYPE  <> '40'
AND   E.PLAN_TYPE <> '30'
AND E.PLAN_TYPE <> '31'
AND   E.PLAN_TYPE  <> '4W'
AND   E.PLAN_TYPE  <> '4X'
AND   E.PLAN_TYPE  <> '4Y'
AND   E.PLAN_TYPE  <> '4Z'
And  ((E.PLAN_TYPE LIKE '0%')
    Or (E.PLAN_TYPE LIKE '1%')
    Or (E.PLAN_TYPE LIKE '2%')
    Or (E.PLAN_TYPE LIKE '3%')
    Or (E.PLAN_TYPE LIKE '6%')
    Or (E.PLAN_TYPE LIKE '9%'))
AND   1 < (select count(plan_type) from ps_bas_partic_optn
            where     SCHED_ID        = E.SCHED_ID
		AND   EMPLID          = E.EMPLID
		AND   BENEFIT_RCD_NBR    = E.BENEFIT_RCD_NBR
		AND   EVENT_ID        = E.EVENT_ID
		AND   PLAN_TYPE       = E.PLAN_TYPE
                AND   BENEFIT_PROGRAM = E.BENEFIT_PROGRAM
                AND   OPTION_TYPE IN ('O','W')
                AND   HISTORY_ONLY = 'N')

Order by E.DISPLAY_PLN_SEQ ASC,
         E.PLAN_TYPE ASC
End-Select
End-Procedure

!*******************************
Begin-Procedure Check-Options
!*******************************
 #debug9 show 'Check-Options'

let $options_found = 'N'
let #options_count = 0

Begin-Select
E12.PLAN_TYPE
   do check-multiple-options
   if #options_count > 0
      let $options_found = 'Y'
   end-if
From PS_BAS_PARTIC_PLAN E12
Where E12.SCHED_ID     = &A.Sched_Id
And   E12.EMPLID       = &A.Emplid
And   E12.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr    
And   E12.EVENT_ID     = &A.Event_Id
And   ((E12.OPTION_CD <> ' ')
    Or (E12.OPTION_CD = ' ' And E12.ENROLL_ACTION <> 'T' And E12.BAS_ERROR = 'Y')
    Or (E12.OPTION_CD = ' ' And E12.ENROLL_ACTION = 'T'))
AND   E12.PLAN_TYPE  <> '20'
AND   E12.PLAN_TYPE  <> '22'
AND   E12.PLAN_TYPE  <> '40'
AND   E12.PLAN_TYPE  <> '4W'
AND   E12.PLAN_TYPE  <> '4X'
AND   E12.PLAN_TYPE  <> '4Y'
AND   E12.PLAN_TYPE  <> '4Z'
AND   E12.PLAN_TYPE  <> '30'
AND   E12.PLAN_TYPE  <> '31'
AND   E12.PLAN_TYPE <> '15'
AND   E12.PLAN_TYPE <> '16'
AND   E12.PLAN_TYPE <> '17'
AND   E12.PLAN_TYPE <> '18'
End-Select
End-Procedure
!*******************************
!*******************************
Begin-Procedure check-multiple-options
 #debug9 show 'check-multiple-options'

begin-select ON-ERROR=SQL-Error
count(D1.PLAN_TYPE) &option_counter


  move &option_counter to  #Option_max_counter
  if #option_max_counter > 1
     move 'Y' to $multiple_options
  end-if

FROM PS_BAS_PARTIC_OPTN D1
WHERE D1.SCHED_ID = &A.SCHED_ID
  AND D1.EMPLID = &A.EMPLID
  AND D1.BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
  AND D1.EVENT_ID = &A.EVENT_ID
  AND D1.PLAN_TYPE = &E12.PLAN_TYPE
  AND D1.BENEFIT_PROGRAM = &A.BENEFIT_PROGRAM
  AND D1.OPTION_TYPE IN ('O','W')
  AND D1.HISTORY_ONLY = 'N'
end-select

end-procedure

!*******************************
Begin-Procedure Get-Option-Info
!*******************************
 #debug9 show ' Get-Option-Info'

Begin-Select

OP.COVRG_CD
OP.CALCULATED_BASE
OP.DED_CLASS
OP.OPTION_ID
OP.BENEFIT_PLAN
OP.PAY_PERIOD1
OP.PAY_PERIOD2
OP.PAY_PERIOD3
OP.PAY_PERIOD4
OP.PAY_PERIOD5

From PS_BAS_PARTIC_OPTN OP
Where OP.SCHED_ID     = $SchedId
And   OP.EMPLID       = $Empl_Id
And   OP.BENEFIT_RCD_NBR = #BenefitRcdNo
And   OP.EVENT_ID     = #EventId
And   OP.PLAN_TYPE    = $Plan_Type
And   OP.OPTION_CD    = $Option_Cd
End-Select
End-Procedure

!*******************************
Begin-Procedure Get-Benef-Descr
!*******************************
 #debug9 show ' Get-Benef-Descr'

let $Provider = ''

Begin-Select

E2.DESCR &Benefit_Plan
E2.VENDOR_ID
   move &E2.VENDOR_ID to $provider
E2.GROUP_NBR
  
  #debug8 show 'plan_type ' $Plan_Type
  #debug8 show '&OP.Benefit_Plan ' &OP.Benefit_Plan
  #debug8 show 'E2.VENDOR_ID ' &E2.VENDOR_ID
  #debug8 show 'E2.DESCR ' &Benefit_Plan
  #debug8 show 'E2.GROUP_NBR ' &E2.GROUP_NBR

  if RTRIM($provider,' ') <> ''
     do get-provider-descr
  end-if

  let $GROUP_NBR = &E2.GROUP_NBR

  Evaluate $plan_type
    when = '14'
       Evaluate $provider
          when = '0014'
	    let $GROUP_NBR = '30539-' || &E2.GROUP_NBR		
	    break
	  when = '0018'
            let $GROUP_NBR = '9657198-' || &E2.GROUP_NBR	
	    break
	  when-other
       end-evaluate
     break
    when = '1Z'
     let $GROUP_NBR = 'GEP0' || &E2.GROUP_NBR
     break
    when-other
  End-Evaluate

From PS_BENEF_PLAN_TBL E2
Where  E2.PLAN_TYPE    = $Plan_Type
And    E2.BENEFIT_PLAN = &OP.Benefit_Plan
And    E2.EFFDT =
              (SELECT MAX(EFFDT)
               From PS_BENEF_PLAN_TBL
               Where PLAN_TYPE    = E2.PLAN_TYPE
               And   BENEFIT_PLAN = E2.BENEFIT_PLAN
               And   EFFDT       <= &A.Event_Dt)
End-Select
End-Procedure

!*******************************
Begin-Procedure Get-Provider-Descr
!*******************************
 #debug9 show ' Get-Provider-Descr'

let $provider_descr = ' '
Begin-Select

E21.Vendor_Name_Short

  move &E21.Vendor_Name_short to $provider_descr

  #debug8 show '$provider ' $provider
  #debug8 show '&A.Event_Dt ' &A.Event_Dt
  #debug8 show '&E21.DESCR ' &E21.Vendor_Name_short

FROM PS_VENDOR E21
WHERE E21.VENDOR_ID = $provider AND
      E21.SETID = 'COMMN'


End-Select
End-Procedure

!*****************************
Begin-Procedure Get-Cost-Data
!*****************************
 #debug9 show ' Get-Cost-Data'

 move ' ' to $Msg

Begin-Select

G.PLAN_TYPE
G.OPTION_ID
G.DEDN_AMT_B_TAX
G.DEDN_AMT_A_TAX
G.DEDN_AMT_NT_TAX

 if (&G.Dedn_Amt_B_Tax <> 0)
   let #PreTax_Deduction = #PreTax_Deduction + &G.Dedn_Amt_B_Tax
   let #PreTax_Total = #PreTax_Total + &G.Dedn_Amt_B_Tax
 end-if

 if (&G.Dedn_Amt_A_Tax <> 0)
   let #AfterTax_Deduction = #AfterTax_Deduction + &G.Dedn_Amt_A_Tax
   let #AfterTax_Total = #AfterTax_Total + &G.Dedn_Amt_A_Tax
 end-if

 if (&G.Dedn_Amt_NT_Tax <> 0)
   let #Employer_Deduction = #Employer_Deduction + &G.Dedn_Amt_NT_Tax
   let #Employer_Total = #Employer_Total + &G.Dedn_Amt_NT_Tax
 end-if

!*** 'Your deductions are not synchronized with your pay frequency type.'

 Evaluate &P1.Pay_Frequency

  When = 'M'
    if &OP.Pay_Period1 <> 'Y'
      let $Msg = $BAS005-DEDN-NO-SYNCH
    end-if
    break
  When = 'S'
    if (&OP.Pay_Period1 <> 'Y' Or &OP.Pay_Period2 <> 'Y')
      let $Msg = $BAS005-DEDN-NO-SYNCH
    end-if
    break
  When = 'B'
    if (&OP.Pay_Period1 <> 'Y' Or &OP.Pay_Period2 <> 'Y'
        Or &OP.Pay_Period3 <> 'Y')
      let $Msg = $BAS005-DEDN-NO-SYNCH
    end-if
    break
  When = 'W'
    if (&OP.Pay_Period1 <> 'Y' Or &OP.Pay_Period2 <> 'Y'
        Or &OP.Pay_Period3 <> 'Y' Or &OP.Pay_Period4 <> 'Y'
        Or &OP.Pay_Period5 <> 'Y')
      let $Msg = $BAS005-DEDN-NO-SYNCH
    end-if
    break
 End-Evaluate

From PS_BAS_PARTIC_COST G
Where G.SCHED_ID     = &E.Sched_Id
And   G.EMPLID       = &E.Emplid
And   G.BENEFIT_RCD_NBR = &E.BENEFIT_RCD_NBR
And   G.EVENT_ID     = &E.Event_Id
And   G.PLAN_TYPE    = &E.Plan_Type
And   G.OPTION_ID    = &OP.Option_Id
And   G.COST_TYPE    = 'P'
End-Select
End-Procedure

!******************************
Begin-Procedure Print-Plan-Pg1
!******************************
 #debug9 show 'Print-Plan-Pg1'
 add 1 to #Line_Ct
 let #mod = Mod(#Line_Ct,{Num_Per_Page})
 #debug8 show 'Line_Ct ' #Line_Ct
 if #mod = 0
   do Foot-Note
!   new-page   rkk 02/2011
 end-if

 if &E.Bas_Error = 'Y'
   let $PlanDescr = '*' || $PlanDescr
 end-if
 #debug8 show 'emplid & plan type ' &a.emplid ' ' &E.Plan_Type !
 #debug8 show '$PlanDescr ' $PlanDescr
 #debug8 show '$first_PlanDescr ' $first_PlanDescr
 if $first_PlanDescr = 'Y'
    let $first_PlanDescr = 'N'
    print $PlanDescr            (+1,1)
 else
    if $save_option = 'WAIVE'
       print $PlanDescr            (+2,1)	!was +1
    else
       print $PlanDescr            (+3,1)	!was +2   
    end-if
 end-if
 #debug8 show '$save_option ' $save_option  

 if ($Option_Cd = '')
   if (&E.Enroll_Action = 'T')
!*** (Coverage has been terminated)
     print $BAS005-T02-L01A     (0,{col1})
   end-if
 else
   let $provider_descr = substr($provider_descr,1,11)
   print $provider_descr (0,#col_p)
   let #len = length($option)

   if $Option <> 'WAIVE'
     Evaluate &E.Plan_Type
       when = '10'
       when = '11'
       when = '14'
       when = '1Z'
       
         print $Option               (0,#col_bo,30)
         print $GROUP_NBR            (+1,#col_bo,30)
         graphic (0,1,80) Horz-Line {norm_lnsize} !Horizontal Line !Was 50
         print ''                    (-1,#col_bo,30)	
       when-other
          print $Option               (0,#col_bo,30)
         graphic (0,1,80) Horz-Line {norm_lnsize} !Horizontal Line !Was 50 
     end-evaluate
   else
     print $Option               (0,#col_bo,30)
     graphic (0,1,80) Horz-Line {norm_lnsize} !Horizontal Line !Was 50
 
   end-if

   if ((&E.Plan_Type >= '10' and &E.Plan_Type < '20')
       Or (&E.Plan_Type >= '1A' and &E.Plan_Type < '2A'))
       print $Covrg_Cd              (0,#col_ccb)	
   end-if

   if ((&E.Plan_Type >= '20' and &E.Plan_Type < '40')
         Or (&E.Plan_Type >= '2A' and &E.Plan_Type < '4A')
         And RTRIM(&E.Option_Cd,' ') <> 'W')
     print &OP.Calculated_Base      (0,#col_ccb) edit {covrg_mask}
   end-if

   if ((&E.Plan_Type >= '60' and &E.Plan_Type < '70')
           Or (&E.Plan_Type >= '6A' and &E.Plan_Type < '7A'))
      do PS_SQR_Trunc(&E.Annual_Pledge, 0, #Test)
      if (&E.Annual_Pledge = #Test)
        print &E.Annual_Pledge    (0,#col_ccb) edit {covrg_mask}
      else
        print &E.Annual_Pledge   (0,#col_ccb) edit {amt_mask}
      end-if
   end-if

   if ((&E.Plan_Type >= '90' and &E.Plan_Type <= '99')
       Or (&E.Plan_Type >= '9A' and &E.Plan_Type <= '9Z'))
      print $Vacn_Hours       (0,#col_ccb)
   end-if

   if &OP.Ded_Class = 'B'
      print #PreTax_Deduction   (0,#col_pppt) edit {period_pay_mask}
   end-if

   if &OP.Ded_Class = 'A'
      print #AfterTax_Deduction     (0,#col_ppat) edit {period_pay_mask}
   end-if
 
   if ((&E.Plan_Type = '60' and &A.Credit_Rollover = 'H') or
       (&E.Plan_Type = '61' and &A.Credit_Rollover = 'D')) and
      (&E.Ann_Ex_Credit_FSA <> 0)
        add 1 to #Line_Ct
!***    (Pledge includes
        print $BAS005-T02-L02A   (+1,{col1})
        print &E.Ann_Ex_Credit_FSA          (0,{col1a}) edit {amt_mask}
!***    ' of Excess Credit Rollover)'
        print $BAS005-T02-L02B  (0,-3)
   end-if
    !show '$option 2 ' $option
    let $save_option = $option

 end-if

 if &E.Bas_Error = 'Y'
   add 1 to #Line_Ct
   do Get-Bas-Message
   print '*'                    (+1,5)
   print $Short_Error_Message   ()
 end-if
   
End-Procedure

!************************************
Begin-Procedure Get-Flexible-Credits
!************************************
 #debug9 show 'Get-Flexible-Credits'

Begin-Select
M.EMPLID
M.PLAN_TYPE
L.EARNINGS_END_DT
L.OTH_PAY

 Add &L.Oth_Pay to #Flexible_Credits

From PS_BAS_PARTIC_PLAN M,
     PS_ADDL_PAY_DATA   L
Where M.SCHED_ID         = &A.Sched_Id
And   M.EMPLID           = &A.Emplid
And   M.BENEFIT_RCD_NBR     = &A.Benefit_Rcd_Nbr    
And   M.EVENT_ID         = &A.Event_Id
And   L.EMPLID           = M.EMPLID
And   L.PLAN_TYPE        = M.PLAN_TYPE
And   L.ADDLPAY_REASON   = 'BAS'
And   L.EFFDT = (SELECT MAX(EFFDT)
                 From   PS_ADDL_PAY_DATA
                 Where  EMPLID         = M.EMPLID
                 And    PLAN_TYPE      = M.PLAN_TYPE
                 And    ADDLPAY_REASON = 'BAS')
And   ((L.EARNINGS_END_DT IS NULL) Or (L.EARNINGS_END_DT > &A.Event_Dt))

End-Select
End-Procedure

!***********************************
Begin-Procedure Benefit-Choices-Con
!***********************************
#debug9 show 'Benefit-Choices-Con'

 let $subTitle = 'YOUR BENEFIT ELECTIONS - Continues '
 let $ChoiceFoundFlag = 'N'
     position (+3)

let $found_con = 'N'

Begin-Select

  if ($ChoiceFoundFlag = 'N')
    do Hdg-Con
  end-if
 
E1.SCHED_ID
 move &E1.Sched_Id to $SchedId
E1.EMPLID
 move &E1.Emplid to $Empl_Id
E1.BENEFIT_RCD_NBR
  move &E1.Benefit_Rcd_Nbr to #BenefitRcdNo    
E1.EVENT_ID
 move &E1.Event_Id to #EventId
E1.PLAN_TYPE
 move &E1.Plan_Type to $Plan_Type
 move 'PLAN_TYPE' to $Fieldname
 move $Plan_Type  to $Fieldvalue
 do Read-Translate-Table
 let $Plan_Descr = $Xlatlongname

E1.OPTION_CD
 let $Option_Cd = RTRIM(&E1.Option_Cd,' ')
E1.ENROLL_ACTION

E1.FLAT_DED_AMT
 move &E1.Flat_Ded_Amt to $Flat_Ded_Amt {amt_mask}
E1.PCT_GROSS
 move &E1.Pct_Gross to $Pct_Gross {pct_mask}
E1.SAVINGS_COVRG
 if &E1.Savings_Covrg = '1'
   let $PreTax_Election = 'PRE-TAX       - ' || $Flat_Ded_Amt
 else
   let $PreTax_Election = 'PRE-TAX       - ' || $Pct_Gross || '%'
 end-if

E1.FLAT_DED_AMT_ATAX
 move &E1.Flat_Ded_Amt_Atax to $Flat_Ded_Amt_Atax {amt_mask}
E1.PCT_GROSS_ATAX
 move &E1.Pct_Gross_Atax to $Pct_Gross_Atax {pct_mask}
E1.SAVINGS_COVRG_ATAX
 if &E1.Savings_Covrg_Atax = '1'
   let $AfterTax_Election = 'AFTER-TAX  - ' || $Flat_Ded_Amt_Atax
 else
   let $AfterTax_Election = 'AFTER-TAX  - ' || $Pct_Gross_Atax || '%'
 end-if

E1.PENSION_BASE
 move &E1.Pension_Base to $Pension_Base {covrg_mask}
!*** 'Base                - ' || $Pension_Base
 let $Pension_Base = $BEN005-T04-L01A || $Pension_Base

E1.VOLUNTARY_AMT
 move &E1.Voluntary_Amt to $Voluntary_Amt {amt_mask}
!*** 'Voluntary Amt - ' || $Voluntary_Amt
 let $Voluntary_Amt = $BEN005-T04-L02A || $Voluntary_Amt

E1.VOLUNTARY_PCT
 move &E1.Voluntary_Pct to $Voluntary_Pct {pct_mask}
!*** 'Voluntary Pct   - ' || $Voluntary_Pct || '%'
 let $Voluntary_Pct = $BEN005-T04-L03A || $Voluntary_Pct || '%'

E1.BAS_ERROR
E1.DISPLAY_PLN_SEQ

 let $found_con = 'Y'

 if ($Option_Cd <> '')

   do Get-Option-Info
   do Get-Benef-Descr

   if ($Option_Cd = 'W')
     let $Option = '(' || $Option_Cd || ') ' || 'WAIVE'
   else
     let $Option = '(' || $Option_Cd || ') ' || &Benefit_Plan
   end-if

 end-if

 if $plan_type <> '82'
  do Print-Plan-Pg2
 end-if

From PS_BAS_PARTIC_PLAN E1
Where E1.SCHED_ID     = &A.Sched_Id
And   E1.EMPLID       = &A.Emplid
And   E1.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr      
And   E1.EVENT_ID     = &A.Event_Id
And   ((E1.OPTION_CD <> ' ')
    Or (E1.OPTION_CD = ' ' And E1.ENROLL_ACTION <> 'T' And E1.BAS_ERROR = 'Y')
    Or (E1.OPTION_CD = ' ' And E1.ENROLL_ACTION = 'T'))
AND   E1.PLAN_TYPE  <> '20'
AND   E1.PLAN_TYPE  <> '22'
AND   E1.PLAN_TYPE  <> '40'
AND   E1.PLAN_TYPE  <> '4W'
AND   E1.PLAN_TYPE  <> '4X'
AND   E1.PLAN_TYPE  <> '4Y'
AND   E1.PLAN_TYPE  <> '4Z'
AND   E1.PLAN_TYPE <> '15'
AND   E1.PLAN_TYPE <> '16'
AND   E1.PLAN_TYPE <> '17'
AND   E1.PLAN_TYPE <> '18'
And   ((E1.PLAN_TYPE >= '40' and E1.PLAN_TYPE < '60')
    Or (E1.PLAN_TYPE >= '4A' and E1.PLAN_TYPE <= '5Z')
    Or (E1.PLAN_TYPE >= '70' and E1.PLAN_TYPE < '90')
    Or (E1.PLAN_TYPE >= '7A' and E1.PLAN_TYPE <= '8Z'))
AND   1 < (select count(plan_type) from ps_bas_partic_optn
            where     SCHED_ID        = E1.SCHED_ID
		AND   EMPLID          = E1.EMPLID
		AND   BENEFIT_RCD_NBR    = E1.BENEFIT_RCD_NBR
		AND   EVENT_ID        = E1.EVENT_ID
		AND   PLAN_TYPE       = E1.PLAN_TYPE
                AND   BENEFIT_PROGRAM = E1.BENEFIT_PROGRAM
                AND   OPTION_TYPE IN ('O','W')
                AND   HISTORY_ONLY = 'N')
Order by E1.DISPLAY_PLN_SEQ ASC
End-Select

 if $found_con = 'Y'
    do Foot-Note
 end-if
End-Procedure

!***********************
Begin-Procedure Hdg-Con
!***********************
 #debug9 show 'Hdg-Con'

!***  'Benefit Option'
 print $BEN1-BEN-OPT         (+2,{col1})
!***  'Election'
 print $BEN1-ELECTION            (0,{col1a})
 graphic (0,{col1},45) Horz-Line {norm_lnsize} !Horizontal Line

 let $ChoiceFoundFlag = 'Y'

End-Procedure

!******************************
Begin-Procedure Print-Plan-Pg2
!******************************
 #debug9 show 'Print-Plan-Pg2'
 
 add 1 to #Line_Ct

 if &E1.Bas_Error = 'Y'
   let $Plan_Descr = '*' || $Plan_Descr
 end-if
 print $Plan_Descr                      (+1,1)

 if ($Option_Cd = '')
   if (&E1.Enroll_Action = 'T')
!*** '(Coverage has been terminated)'
     print $BAS005-T02-L01A                 (0,{col1})
   end-if
 else
   let #len = length($option)
   if substr($option,5,2) = 'GE'  
      let $option_pre = substr($option,1,4)
      let $option = substr($option,8,#len)
      let $option = $option_pre || $option
   end-if
   print $Option               (0,{col1})

   if ((&E1.Plan_Type >= '40' and &E1.Plan_Type < '50')
       Or (&E1.Plan_Type >= '4A' and &E1.Plan_Type <= '4Z'))    !Savings
       print $PreTax_Election     (0,{col1a})
       print $AfterTax_Election   (+1,{col1a})
   end-if

   if ((&E1.Plan_Type >= '80' and &E1.Plan_Type < '90')
       Or (&E1.Plan_Type >= '8A' and &E1.Plan_Type <= '8Z'))    !Pension
       print $Pension_Base     (0,{col1a})
       print $Voluntary_Amt    (+1,{col1a})
       print $Voluntary_Pct    (+1,{col1a})
   end-if
 end-if

 if &E1.Bas_Error = 'Y'
    add 1 to #Line_Ct
    do Get-Bas-Message
    print '*'                    (+1,5)
    print $Short_Error_Message   ()
 end-if

End-Procedure

!**********************************
Begin-Procedure Investment-Choices
!**********************************
 #debug9 show 'Investment-Choices'

!*** 'YOUR INVESTMENT CHOICES'
 let $SubTitle = 'YOUR INVESTMENT ELECTIONS'
 let $InvestFoundFlag = 'N'
 do Page-Header

Begin-Select

 if ($InvestFoundFlag = 'N')
   do Hdg-Rpt-Investment
 end-if

P.SCHED_ID
 move &P.Sched_Id to $SchedId
P.EMPLID
 move &P.Emplid to $Empl_Id
P.BENEFIT_RCD_NBR
 move &P.Benefit_Rcd_Nbr to #BenefitRcdNo     
P.EVENT_ID
 move &P.Event_Id to #EventId
Q.PLAN_TYPE
 move &Q.Plan_Type to $Plan_Type
Q.INVESTMENT_OPT
Q.EVENT_DT
 do Get-Investment-Descr
 let $Investment = &Q1.DescrShort

Q.INVESTMENT_PCT
Q.BAS_ERROR
 if &Q.Bas_Error = 'Y'
  do Get-Bas-Message
  let $Error_Message = '* ' || $Short_Error_Message
 end-if

 do Print-Investments

From PS_BAS_PARTIC_PLAN P,
     PS_BAS_PARTIC_INVT Q
Where P.SCHED_ID     = &A.Sched_Id
And   P.EMPLID       = &A.Emplid
And   P.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr     
And   P.EVENT_ID     = &A.Event_Id
And   ((P.OPTION_CD <> ' ')
      Or (P.OPTION_CD = ' ' And P.ENROLL_ACTION <> 'T' And P.BAS_ERROR = 'Y'))
And   Q.SCHED_ID     = P.SCHED_ID
And   Q.EMPLID       = P.EMPLID
And   Q.BENEFIT_RCD_NBR = P.BENEFIT_RCD_NBR
And   Q.EVENT_ID     = P.EVENT_ID
And   Q.PLAN_TYPE    = P.PLAN_TYPE
And (Q.PLAN_TYPE <> '4X')
And (Q.PLAN_TYPE <> '4Y')
And (Q.PLAN_TYPE <> '4Z')
Order By Q.PLAN_TYPE ASC, Q.INVESTMENT_OPT ASC
End-Select


End-Procedure

!************************************
Begin-Procedure Get-Investment-Descr
!************************************
 #debug9 show 'Get-Investment-Descr'

Begin-Select

Q1.DESCRSHORT
From PS_SAVINGS_INV_TBL Q1
Where Q1.PLAN_TYPE = &Q.Plan_Type
And   Q1.INVESTMENT_OPT = &Q.Investment_Opt
And   Q1.EFFDT =
         (SELECT MAX(EFFDT)
          From PS_SAVINGS_INV_TBL
          Where PLAN_TYPE = Q1.PLAN_TYPE
          And   INVESTMENT_OPT = Q1.INVESTMENT_OPT
          And   EFFDT <= &A.Event_Dt)

End-Select
End-Procedure

!**********************************
Begin-Procedure Hdg-Rpt-Investment
!**********************************
 #debug9 show 'Hdg-Rpt-Investment'

 if ($ChoiceFoundFlag = 'N')
   print $SubTitle                         (+3,1)   bold
 else
   print $SubTitle                         (+6,1)   bold
 end-if

!*** 'Investment Option'
 print $BAS005-INVST-OPT               (+2,{col1})
!*** 'Percent'
 print $BEN1-PERCENT                         (0,{col2})

 graphic (0,{col1},45) Horz-Line {norm_lnsize} !Horizontal Line

 let $InvestFoundFlag = 'Y'

End-Procedure

!*********************************
Begin-Procedure Print-Investments
!*********************************
 #debug9 show 'Print-Investments'

 print $Investment                       (+1,{col1})

 if (&Q.Bas_Error = 'Y')
  print '*'                              (0,{col1a})
 end-if

 print &Q.Investment_pct                 (0,{col2}) edit {pct_mask}
 print '%'                               ()

 if (&Q.Bas_Error = 'Y')
  print $Error_Message                   (+2,{col1})
 end-if

End-Procedure

!***************************************
Begin-Procedure GetDepCount
!***************************************
 #debug9 show 'GetDepCount'

  #debug8 Show 'ProcedureGetDepCount'

  let $MedCvgFlag_x='N'
  Let #DependentCount=0
  
Begin-Select Distinct
SX9.DEPENDENT_BENEF

  let #DependentCount= #DependentCount+1  
 
    let $MedCvgFlag_x='Y'
      
From PS_BAS_PARTIC_PLAN RX9,
     PS_BAS_PARTIC_DPND SX9,
     PS_DEPENDENT_BENEF TX9
Where RX9.SCHED_ID     = &A.Sched_Id
And   RX9.EMPLID       = &A.Emplid
And   RX9.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr  
And   RX9.EVENT_ID     = &A.Event_Id
And   RX9.COVERAGE_ELECT <> 'W'
And   RX9.OPTION_CD      <> ' '
And   RX9.PLAN_TYPE in ('10','11','14','1Z','15','16','17','18')
And   SX9.SCHED_ID     = RX9.SCHED_ID
And   SX9.EMPLID       = RX9.EMPLID
And   SX9.BENEFIT_RCD_NBR = RX9.BENEFIT_RCD_NBR
And   SX9.EVENT_ID     = RX9.EVENT_ID
And   SX9.PLAN_TYPE    = RX9.PLAN_TYPE
And   TX9.EMPLID          = SX9.EMPLID
And   TX9.DEPENDENT_BENEF = SX9.DEPENDENT_BENEF

end-select
end-procedure


!*******************************
Begin-Procedure Dependent-Benef
!*******************************
#debug9 show 'Dependent-Benef'

#debug8 show '#current-line: '#current-line
  if #current-line > 1
  	position (-1)
  else
  end-if

!*** 'DEPENDENTS/BENEFICIARIES'
  let $SubTitle = $BAS005-DEP-BENEFS
  let $DpndFoundFlag = 'N'
  let $SectionFlag = 'N'
  !*ISDVVXK 03/31/2011 REMOVED 5 which were added on 03/09/11
  let #kola  = {col0}    + 1   
  let  #kolb  = {col0}   + 9 
  let #kol0  = {col1} + 4  
  let #kol1  = {col1a} -1	
  let #kol1a = {col1a} + 5	
  let #kol1b = #kol1a + 5	
  LET #kol1c = #kol1b + 5 
  LET #kol1d = #kol1c + 5 
  LET #kol1e = #kol1d + 5 
  LET #kol1f = #kol1e + 3 
  let #kol2  = {col2}
  let #kol3  = {col3}

!--------------------------------------

!*** 'Medical/Dental'
  let $PlanTitle = 'HEALTH BENEFITS'
  let $Error_Message  = ''
  let $MedCvgFlag     = ''
  let $DenCvgFlag     = ''
  let $VisCvgFlag     = ''
  let $PresFlag       = ''
  let $DpPresFlag     = ''
  let $DpVisCvgFlag   = ''
  let $DpDenCvgFlag    = ''
  let $DpMedCvgFlag   = ''
  let $DependentBenef = ''
  let $Dep_Bd         = ''
  let $PriorDpnd      = ''

  #debug8 Show  '#DependentCount' #DependentCount
  if ((#current-line > 50 and #DependentCount<> 0) or #DependentCount>3)
  do foot-note
  end-if  
  
Begin-Select


  if ($DpndFoundFlag = 'N')
    do Hdg-Rpt-Dependents-Benef
    do Hdg-Rpt-Medical-Dental 	
  end-if

  if ($SectionFlag = 'N')
    do Hdg-Rpt-Medical-Dental
  end-if

T.BIRTHDATE	

  do Format-DateTime(&T.Birthdate,$Dep_Birthdate,{DEFDATE},'', '')

S.DEPENDENT_BENEF
  if ($PriorDpnd <> &S.Dependent_Benef)
    Do Print-Medical-Cvg
    let $PriorDpnd = &S.Dependent_Benef
  end-if
  let $DependentBenef    = &S.Dependent_Benef
  let $Dep_Bd            = $Dep_Birthdate	
R.SCHED_ID
  move &R.Sched_Id to     $SchedId       !Bas Error procedure
R.EMPLID
  move &R.Emplid to       $Empl_Id       !Bas Error procedure
R.BENEFIT_RCD_NBR
  move &R.Benefit_Rcd_Nbr to #BenefitRcdNo  
R.EVENT_ID
  move &R.Event_Id to     #EventId       !Bas Error procedure
R.PLAN_TYPE
  move &R.Plan_Type to    $Plan_Type     !Bas Error procedure
S.BAS_ERROR

T.NAME
  let $DpndName = &T.Name

S.PLAN_TYPE
 
  Do Get-Depend-NID
  let $DpndName_NID = &NID.National_Id

  Evaluate &S.Plan_Type
    When = '10'
      let $MedCvgFlag = 'Y'
      break
    When = '11'
      let $DenCvgFlag = 'Y'
      break
     When = '14'
       let $VisCvgFlag = 'Y'
       break
     When = '1Z'
       let $PresFlag = 'Y'
       break
     When = '15'
       let $DpMedCvgFlag = 'Y'
       break
    When = '16'
       let $DpDenCvgFlag = 'Y'
       break
    When = '17'
       let $DpVisCvgFlag = 'Y'
       break
   When = '18'
       let $DpPresFlag = 'Y'
       break 
  End-Evaluate

  if (&S.Bas_Error = 'Y')
    do Get-Bas-Message
    let $Error_Message = $Error_Message || $Short_Error_Message
  end-if


From PS_BAS_PARTIC_PLAN R,
     PS_BAS_PARTIC_DPND S,
     PS_DEPENDENT_BENEF T
Where R.SCHED_ID     = &A.Sched_id
And   R.EMPLID       = &A.Emplid
And   R.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr     
And   R.EVENT_ID     = &A.Event_Id
And   ((R.PLAN_TYPE >= '10' And R.PLAN_TYPE <= '19')
    Or (R.PLAN_TYPE >= '1A' and R.PLAN_TYPE <= '1Z'))
And   R.COVERAGE_ELECT <> 'W'
And   R.OPTION_CD      <> ' '
And   S.SCHED_ID     = R.SCHED_ID
And   S.EMPLID       = R.EMPLID
And   S.BENEFIT_RCD_NBR = R.BENEFIT_RCD_NBR
And   S.EVENT_ID     = R.EVENT_ID
And   S.PLAN_TYPE    = R.PLAN_TYPE
And   T.EMPLID          = S.EMPLID
And   T.DEPENDENT_BENEF = S.DEPENDENT_BENEF
Order By S.DEPENDENT_BENEF ASC, R.PLAN_TYPE ASC
End-Select

 Do Print-Medical-Cvg

!--------------------------------------

 let $SectionFlag = 'N'
 let $PlanTitle = 'Savings'

Begin-Select

  if ($DpndFoundFlag = 'N')
    do Page-Header
    do Hdg-Rpt-Dependents-Benef
    do Hdg-Rpt-Savings
  end-if
  if ($SectionFlag = 'N')
    do Hdg-Rpt-Savings
  end-if

X.SCHED_ID
  move &X.Sched_Id to     $SchedId       !Bas Error procedure
X.EMPLID
  move &X.Emplid to       $Empl_Id       !Bas Error procedure
X.BENEFIT_RCD_NBR
  move &X.Benefit_Rcd_Nbr to #BenefitRcdNo  
X.EVENT_ID
  move &X.Event_Id to     #EventId       !Bas Error procedure
X.PLAN_TYPE
  move &X.Plan_Type to    $Plan_Type     !Bas Error procedure
X.OPTION_CD
  move &X.Option_Cd to    $Option_Cd     !Get-Ben-Plan procedure
  Do Get-Ben-Plan

Y.BAS_ERROR

Y.DEPENDENT_BENEF
  let $DependentBenef = &Y.Dependent_Benef

  if (&Y.Bas_Error = 'Y')
    let $DependentBenef = '*' || $DependentBenef
  else
    let $DependentBenef = ' ' || $DependentBenef
  end-if

Z.NAME
  let $DpndName = &Z.Name

  let $DependentBenef = $DependentBenef || ' ' || $DpndName
  print $DependentBenef         (+1,1)

  print $Benefit_Plan           (0,#kol0)

Y.BENEF_PCT                     (0,#KOL1) EDIT {PCT_MASK}

  if (&Y.Bas_Error = 'Y')
    do Get-Bas-Message
    let $Error_Message = '* ' || $Short_Error_Message
    print $Error_Message        (+1,3)
  end-if

From PS_BAS_PARTIC_PLAN X,
     PS_BAS_PARTIC_DPND Y,
     PS_DEPENDENT_BENEF Z
Where X.SCHED_ID     = &A.Sched_id
And   X.EMPLID       = &A.Emplid
And   X.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr     
And   X.EVENT_ID     = &A.Event_Id
and   x.plan_type <> '40'
and   x.plan_type <> '41'
and   x.plan_type <> '4W'
and   x.plan_type <> '4X'
and   x.plan_type <> '4Y'
and   x.plan_type <> '4Z'
And   ((X.PLAN_TYPE >= '40' And X.PLAN_TYPE <= '49')
    Or (X.PLAN_TYPE >= '4A' And X.PLAN_TYPE <= '4Z'))
And   X.COVERAGE_ELECT <> 'W'
And   X.OPTION_CD      <> ' '
And   Y.SCHED_ID     = X.SCHED_ID
And   Y.EMPLID       = X.EMPLID
And   Y.BENEFIT_RCD_NBR = X.BENEFIT_RCD_NBR
And   Y.EVENT_ID     = X.EVENT_ID
And   Y.PLAN_TYPE    = X.PLAN_TYPE
And   Z.EMPLID          = Y.EMPLID
And   Z.DEPENDENT_BENEF = Y.DEPENDENT_BENEF
Order By Y.DEPENDENT_BENEF ASC, X.PLAN_TYPE ASC
End-Select

!--------------------------------------

 let $SectionFlag = 'N'
 let $PlanTitle = 'Pension'

Begin-Select

  if ($DpndFoundFlag = 'N')
    do Page-Header
    do Hdg-Rpt-Dependents-Benef
    do Hdg-Rpt-Life-Or-Pension
  end-if
  if ($SectionFlag = 'N')
    do Hdg-Rpt-Life-Or-Pension
  end-if

A1.SCHED_ID
  move &A1.Sched_Id to     $SchedId       !Bas Error procedure
A1.EMPLID
  move &A1.Emplid to       $Empl_Id       !Bas Error procedure
A1.BENEFIT_RCD_NBR
  move &A1.Benefit_Rcd_Nbr to #BenefitRcdNo  
A1.EVENT_ID
  move &A1.Event_Id to     #EventId       !Bas Error procedure
A1.PLAN_TYPE
  move &A1.Plan_Type to    $Plan_Type     !Bas Error procedure
A1.OPTION_CD
  move &A1.Option_Cd to    $Option_Cd     !Get-Ben-Plan procedure
  Do Get-Ben-Plan

B1.BAS_ERROR

B1.DEPENDENT_BENEF
  let $DependentBenef = &B1.Dependent_Benef

  if (&B1.Bas_Error = 'Y')
    let $DependentBenef = '*' || $DependentBenef
  else
    let $DependentBenef = ' ' || $DependentBenef
  end-if

C1.NAME
  let $DpndName = &C1.Name

  let $DependentBenef = $DependentBenef || ' ' || $DpndName
  print $DependentBenef         (+1,1)

B1.BENEF_PCT
  if (&B1.Benef_Pct > 0.0)
    print &B1.Benef_Pct         (0,#kol1) edit {PCT_MASK}
  end-if
B1.FLAT_AMOUNT
  if (&B1.Flat_Amount > 0.0)
    print &B1.Flat_Amount       (0,#kol1a) edit {AMT_MASK}
  end-if
B1.EXCESS
  if (&B1.Excess = 'Y')
    print $BEN1-YES                 (0,#kol2)
  end-if
B1.CONTINGENT
  if (&B1.Contingent = 'Y')
    print $BEN1-YES                 (0,#kol3)
  end-if

  if (&B1.Bas_Error = 'Y')
    do Get-Bas-Message
    let $Error_Message = '* ' || $Short_Error_Message
    print $Error_Message        (+1,3)
  end-if

From PS_BAS_PARTIC_PLAN A1,
     PS_BAS_PARTIC_DPND B1,
     PS_DEPENDENT_BENEF C1
Where A1.SCHED_ID     = &A.Sched_id
And   A1.EMPLID       = &A.Emplid
And   A1.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr       
And   A1.EVENT_ID     = &A.Event_Id
And   ((A1.PLAN_TYPE >= '80' And A1.PLAN_TYPE <= '89')
    Or (A1.PLAN_TYPE >= '8A' And A1.PLAN_TYPE <= '8Z'))
and   a1.plan_type <> '82'
And   A1.COVERAGE_ELECT <> 'W'
And   A1.OPTION_CD      <> ' '
And   B1.SCHED_ID     = A1.SCHED_ID
And   B1.EMPLID       = A1.EMPLID
And   B1.BENEFIT_RCD_NBR = A1.BENEFIT_RCD_NBR
And   B1.EVENT_ID     = A1.EVENT_ID
And   B1.PLAN_TYPE    = A1.PLAN_TYPE
And   C1.EMPLID          = B1.EMPLID
And   C1.DEPENDENT_BENEF = B1.DEPENDENT_BENEF
Order By B1.DEPENDENT_BENEF ASC, A1.PLAN_TYPE ASC
End-Select


End-Procedure

!*******************************
Begin-Procedure Get-Depend-NID
!*******************************
#debug9 show 'Get-Depend-NID'

Begin-SELECT

NID.NATIONAL_ID

FROM PS_DEP_BENEF_NID NID
  WHERE NID.EMPLID = &A.EMPLID
    AND NID.DEPENDENT_BENEF = &S.DEPENDENT_BENEF 

end-select

end-procedure

!****************************************
Begin-Procedure Hdg-Rpt-Dependents-Benef
!****************************************
#debug9 show 'Hdg-Rpt-Dependents-Benef'

  print $SubTitle           (0,1) Bold
  let $DpndFoundFlag = 'Y'

End-Procedure



!**************************************
Begin-Procedure Hdg-Rpt-Medical-Dental
!**************************************
#debug9 show 'Hdg-Rpt-Medical-Dental'

 print $PlanTitle           (+2,1)
 graphic (0,1,14) Horz-Line {norm_lnsize} !Horizontal line

!*** 'Dependent Name'
 print $BEN1-DEPEND-NAME    (+2,2) 
  
  Print 'SSN'      (0,#kola)
  Print 'DOB'      (0,#kolb)
  
  do Check-Med
  do Check-Den
  do Check-Vis
  do Check-Pres
  do Check-Dp-Med
  do Check-Dp-Den
  do Check-Dp-Vis	
  do Check-Dp-Pres

!*** 'Medical'
   if ($MedCvgFlag_x = 'Y')	
      print 'MED'       (0,#kol0)   
   end-if
!*** 'Dental'
   if ($DenCvgFlag_x = 'Y')	
      print 'DEN'         (0,#kol1)   
   end-if
!*** 'Vision'
   if ($VisCvgFlag_x = 'Y')	
       print 'VIS'         (0,#kol1a)   
   end-if
   if ($PresFlag_x = 'Y')	
        print 'Rx'       (0,#kol1b)   
   end-if

   if ($DpMedCvgFlag_x = 'Y')	
        print 'DP '        (-1,#kol1c)
        print 'MED'       (+1,#kol1c)
   end-if
   
   if ($DpDenCvgFlag_x = 'Y')	   
        print 'DP'       (-1,#kol1d)
        print 'DEN'       (+1,#kol1d) 
   end-if
      
   if ($DpVisCvgFlag_x = 'Y')   
        print 'DP'       (-1,#kol1e)
         print 'VIS'       (+1,#kol1e)
   end-if
      
   if ($DpPresFlag_x = 'Y')	
     print 'DP '       (-1,#kol1f)
     print 'RX'       (+1,#kol1f)
   end-if
   
 print ' '                  (+1,1)

 let $SectionFlag = 'Y'

End-Procedure

!***************************************
Begin-Procedure Check-Med
!***************************************
#debug9 show 'Check-Med'

     let $MedCvgFlag_x='N'

Begin-Select loops = 1

'w'
       
     let $MedCvgFlag_x='Y'

From PS_BAS_PARTIC_PLAN RX,
     PS_BAS_PARTIC_DPND SX,
     PS_DEPENDENT_BENEF TX

Where RX.SCHED_ID     = &A.Sched_Id
And   RX.EMPLID       = &A.Emplid
And   RX.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr       
And   RX.EVENT_ID     = &A.Event_Id
And   RX.PLAN_TYPE =  '10'
And   RX.COVERAGE_ELECT <> 'W'
And   RX.OPTION_CD      <> ' '
And   SX.SCHED_ID     = RX.SCHED_ID
And   SX.EMPLID       = RX.EMPLID
And   SX.BENEFIT_RCD_NBR = RX.BENEFIT_RCD_NBR
And   SX.EVENT_ID     = RX.EVENT_ID
And   SX.PLAN_TYPE    = RX.PLAN_TYPE
And   TX.EMPLID          = SX.EMPLID
And   TX.DEPENDENT_BENEF = SX.DEPENDENT_BENEF

end-select

end-procedure

!***************************************
Begin-Procedure Check-Den
!***************************************
#debug9 show 'Check-Den'

     let $DenCvgFlag_x='N'

Begin-Select loops = 1

'x'

     let $DenCvgFlag_x='Y'

From PS_BAS_PARTIC_PLAN RX2,
     PS_BAS_PARTIC_DPND SX2,
     PS_DEPENDENT_BENEF TX2

Where RX2.SCHED_ID     = &A.Sched_Id
And   RX2.EMPLID       = &A.Emplid
And   RX2.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr        
And   RX2.EVENT_ID     = &A.Event_Id
And   RX2.PLAN_TYPE =  '11'
And   RX2.COVERAGE_ELECT <> 'W'
And   RX2.OPTION_CD      <> ' '
And   SX2.SCHED_ID     = RX2.SCHED_ID
And   SX2.EMPLID       = RX2.EMPLID
And   SX2.BENEFIT_RCD_NBR = RX2.BENEFIT_RCD_NBR
And   SX2.EVENT_ID     = RX2.EVENT_ID
And   SX2.PLAN_TYPE    = RX2.PLAN_TYPE
And   TX2.EMPLID          = SX2.EMPLID
And   TX2.DEPENDENT_BENEF = SX2.DEPENDENT_BENEF

end-select

end-procedure

!***************************************
Begin-Procedure Check-Vis
!***************************************
#debug9 show 'Check-Vis'

     let $VisCvgFlag_x='N'

Begin-Select loops = 1
'y'

     let $VisCvgFlag_x='Y'

From PS_BAS_PARTIC_PLAN RX3,
     PS_BAS_PARTIC_DPND SX3,
     PS_DEPENDENT_BENEF TX3

Where RX3.SCHED_ID     = &A.Sched_Id
And   RX3.EMPLID       = &A.Emplid
And   RX3.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr     
And   RX3.EVENT_ID     = &A.Event_Id
And   RX3.PLAN_TYPE =  '14'
And   RX3.COVERAGE_ELECT <> 'W'
And   RX3.OPTION_CD      <> ' '
And   SX3.SCHED_ID     = RX3.SCHED_ID
And   SX3.EMPLID       = RX3.EMPLID
And   SX3.BENEFIT_RCD_NBR = RX3.BENEFIT_RCD_NBR
And   SX3.EVENT_ID     = RX3.EVENT_ID
And   SX3.PLAN_TYPE    = RX3.PLAN_TYPE
And   TX3.EMPLID          = SX3.EMPLID
And   TX3.DEPENDENT_BENEF = SX3.DEPENDENT_BENEF

end-select

end-procedure

!***************************************
Begin-Procedure Check-Pres
!***************************************
#debug9 show 'Check-Pres'

     let $PresFlag_x='N'

Begin-Select loops = 1

'z'
     
     let $PresFlag_x ='Y'	

From PS_BAS_PARTIC_PLAN RX4,
     PS_BAS_PARTIC_DPND SX4,
     PS_DEPENDENT_BENEF TX4

Where RX4.SCHED_ID     = &A.Sched_Id
And   RX4.EMPLID       = &A.Emplid
And   RX4.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr    
And   RX4.EVENT_ID     = &A.Event_Id
And   RX4.PLAN_TYPE =  '1Z'
And   RX4.COVERAGE_ELECT <> 'W'
And   RX4.OPTION_CD      <> ' '
And   SX4.SCHED_ID     = RX4.SCHED_ID
And   SX4.EMPLID       = RX4.EMPLID
And   SX4.BENEFIT_RCD_NBR = RX4.BENEFIT_RCD_NBR
And   SX4.EVENT_ID     = RX4.EVENT_ID
And   SX4.PLAN_TYPE    = RX4.PLAN_TYPE
And   TX4.EMPLID          = SX4.EMPLID
And   TX4.DEPENDENT_BENEF = SX4.DEPENDENT_BENEF

end-select

end-procedure


!***************************************
Begin-Procedure Check-Dp-Med
!***************************************
#debug9 show 'Check-Dp-Med'

     let $DpMedCvgFlag_x='N'

Begin-Select loops = 1

'A'
     
     let $DpMedCvgFlag_x ='Y'	

From PS_BAS_PARTIC_PLAN RX5,
     PS_BAS_PARTIC_DPND SX5,
     PS_DEPENDENT_BENEF TX5

Where RX5.SCHED_ID     = &A.Sched_Id
And   RX5.EMPLID       = &A.Emplid
And   RX5.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr 
And   RX5.EVENT_ID     = &A.Event_Id
And   RX5.PLAN_TYPE =  '15'
And   RX5.COVERAGE_ELECT <> 'W'
And   RX5.OPTION_CD      <> ' '
And   SX5.SCHED_ID     = RX5.SCHED_ID
And   SX5.EMPLID       = RX5.EMPLID
And   SX5.BENEFIT_RCD_NBR = RX5.BENEFIT_RCD_NBR
And   SX5.EVENT_ID     = RX5.EVENT_ID
And   SX5.PLAN_TYPE    = RX5.PLAN_TYPE
And   TX5.EMPLID          = SX5.EMPLID
And   TX5.DEPENDENT_BENEF = SX5.DEPENDENT_BENEF

end-select

end-procedure

!***************************************
Begin-Procedure Check-Dp-Den
!***************************************
#debug9 show 'Check-Dp-Den'

     let $DpDenCvgFlag_x='N'

Begin-Select loops = 1

'B'
     
     let $DpDenCvgFlag_x ='Y'	

From PS_BAS_PARTIC_PLAN RX6,
     PS_BAS_PARTIC_DPND SX6,
     PS_DEPENDENT_BENEF TX6

Where RX6.SCHED_ID     = &A.Sched_Id
And   RX6.EMPLID       = &A.Emplid
And   RX6.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr    
And   RX6.EVENT_ID     = &A.Event_Id
And   RX6.PLAN_TYPE =  '16'
And   RX6.COVERAGE_ELECT <> 'W'
And   RX6.OPTION_CD      <> ' '
And   SX6.SCHED_ID     = RX6.SCHED_ID
And   SX6.EMPLID       = RX6.EMPLID
And   SX6.BENEFIT_RCD_NBR = RX6.BENEFIT_RCD_NBR
And   SX6.EVENT_ID     = RX6.EVENT_ID
And   SX6.PLAN_TYPE    = RX6.PLAN_TYPE
And   TX6.EMPLID          = SX6.EMPLID
And   TX6.DEPENDENT_BENEF = SX6.DEPENDENT_BENEF

end-select

end-procedure

!***************************************
Begin-Procedure Check-Dp-Vis
!***************************************
#debug9 show 'Check-Dp-Vis'

     let $DpVisCvgFlag_x='N'

Begin-Select loops = 1

'C'
     
     let $DpVisCvgFlag_x ='Y'	

From PS_BAS_PARTIC_PLAN RX7,
     PS_BAS_PARTIC_DPND SX7,
     PS_DEPENDENT_BENEF TX7

Where RX7.SCHED_ID     = &A.Sched_Id
And   RX7.EMPLID       = &A.Emplid
And   RX7.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr    
And   RX7.EVENT_ID     = &A.Event_Id
And   RX7.PLAN_TYPE =  '17'
And   RX7.COVERAGE_ELECT <> 'W'
And   RX7.OPTION_CD      <> ' '
And   SX7.SCHED_ID     = RX7.SCHED_ID
And   SX7.EMPLID       = RX7.EMPLID
And   SX7.BENEFIT_RCD_NBR = RX7.BENEFIT_RCD_NBR
And   SX7.EVENT_ID     = RX7.EVENT_ID
And   SX7.PLAN_TYPE    = RX7.PLAN_TYPE
And   TX7.EMPLID          = SX7.EMPLID
And   TX7.DEPENDENT_BENEF = SX7.DEPENDENT_BENEF

end-select

end-procedure


!***************************************
Begin-Procedure Check-Dp-Pres
!***************************************
#debug9 show 'Check-Dp-Pres'

     let $DpPresFlag_x='N'

Begin-Select loops = 1

'D'
     
     let $DpPresFlag_x ='Y'	

From PS_BAS_PARTIC_PLAN RX8,
     PS_BAS_PARTIC_DPND SX8,
     PS_DEPENDENT_BENEF TX8

Where RX8.SCHED_ID     = &A.Sched_Id
And   RX8.EMPLID       = &A.Emplid
And   RX8.BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr    
And   RX8.EVENT_ID     = &A.Event_Id
And   RX8.PLAN_TYPE =  '18'
And   RX8.COVERAGE_ELECT <> 'W'
And   RX8.OPTION_CD      <> ' '
And   SX8.SCHED_ID     = RX8.SCHED_ID
And   SX8.EMPLID       = RX8.EMPLID
And   SX8.BENEFIT_RCD_NBR = RX8.BENEFIT_RCD_NBR
And   SX8.EVENT_ID     = RX8.EVENT_ID
And   SX8.PLAN_TYPE    = RX8.PLAN_TYPE
And   TX8.EMPLID          = SX8.EMPLID
And   TX8.DEPENDENT_BENEF = SX8.DEPENDENT_BENEF

end-select

end-procedure


 
!***************************************
Begin-Procedure Hdg-Rpt-Life-Or-Pension
!***************************************
#debug9 show 'Hdg-Rpt-Life-Or-Pension'

 print $PlanTitle           (+2,1)
 graphic (0,1,14) Horz-Line {norm_lnsize} !Horizontal line

!*** 'Beneficiary Name'
 print  $BEN1-BENEF-NAME    (+1,2)
!*** 'Option'
 print  $BEN1-OPTION       (0,#kol0)
!*** '% Benefit'
 print $BAS005-BEN-PER      (0,#kol1)
!*** 'Flat Amount'
 print $BEN1-FLAT-AMT       (0,#kol1a)
!*** 'Excess'
 print $BAS005-EXCESS        (0,#kol2)
!*** 'Contingent'
 print  $BAS005-CONTING     (0,#kol3)
 print ' '                  (+1,1)

 let $SectionFlag = 'Y'

End-Procedure

!*******************************
Begin-Procedure Hdg-Rpt-Savings
!*******************************
#debug9 show 'Hdg-Rpt-Savings'

 print $PlanTitle           (+2,1)
 graphic (0,1,14) Horz-Line {norm_lnsize} !Horizontal line

!*** 'Beneficiary Name'
 print $BEN1-BENEF-NAME     (+1,2)
!*** 'Option'
 print  $BEN1-OPTION        (0,#kol0)
!*** '% Benefit'
 print $BAS005-BEN-PER      (0,#kol1)
 print ' '                  (+1,1)

 let $SectionFlag = 'Y'

End-Procedure

!********************************
Begin-Procedure Print-Medical-Cvg
!********************************
#debug9 show 'Print-Medical-Cvg'

#debug8 show '#current-line: '#current-line
  if #current-line > 58
    do foot-note
  end-if  
  
  if ($DependentBenef <> '')
    if ($Error_Message <> '')
      let $DependentBenef = '*' || $DependentBenef
    else
      let $DependentBenef = ' ' || $DependentBenef
    end-if
    let $DependentBenef = $DependentBenef || ' ' || $DpndName 

    print $DependentBenef         (+1,1)

    extract $last4 from $DpndName_NID 5 4
    #debug8 show '$last4  ' $last4 
    let $Hide-DpndName_NID = 'xxxxx' || $last4 
    #debug8 show '$Hide-DpndName_NID  ' $Hide-DpndName_NID 
    print $Hide-DpndName_NID 	 (0,#kola)

    print $Dep_Bd                (0,#kolb)	

    if ($MedCvgFlag = 'Y')
      print $BEN1-YES             (0,#kol0)
    end-if
    if ($DenCvgFlag = 'Y')
      print $BEN1-YES             (0,#kol1)
    end-if
    if ($VisCvgFlag = 'Y')
      print $BEN1-YES             (0,#kol1a)
    end-if
    if ($PresFlag = 'Y')
      print $BEN1-YES             (0,#kol1b)
    end-if
     if ($DpMedCvgFlag = 'Y')
      print $BEN1-YES             (0,#kol1c)
    end-if
    if ($DpDenCvgFlag = 'Y')
      print $BEN1-YES             (0,#kol1d)
    end-if
    if ($DpVisCvgFlag = 'Y')
      print $BEN1-YES             (0,#kol1e)
    end-if
    if ($DpPresFlag = 'Y')
      print $BEN1-YES             (0,#kol1f)
    end-if

    if ($Error_Message <> '')
      let $Error_Message = '* ' || $Error_Message
      print $Error_Message        (+1,3)
    end-if

    let $Error_Message  = ''
    let $MedCvgFlag     = ''
    let $DenCvgFlag     = ''
    let $VisCvgFlag     = ''
    let $PresFlag       = ''
    let $DpPresFlag     = ''
    let $DpVisCvgFlag   = ''
    let $DpDenCvgFlag    = ''
    let $DpMedCvgFlag   = ''
    let $DependentBenef = ''
    let $Dep_bd = '' 	

  end-if

End-Procedure

!*******************************
Begin-Procedure Get-Ben-Plan
!*******************************
#debug9 show 'Get-Ben-Plan'

  let $Benefit_Plan = 'NoFind'!''

Begin-Select

BP.BENEFIT_PLAN
  let $Benefit_Plan = RTRIM(&BP.Benefit_Plan,' ')

From PS_BAS_PARTIC_OPTN BP
Where BP.SCHED_ID     = $SchedId
And   BP.EMPLID       = $Empl_Id
And   BP.BENEFIT_RCD_NBR = #BenefitRcdNo
And   BP.EVENT_ID     = #EventId
And   BP.PLAN_TYPE    = $Plan_Type
And   BP.OPTION_CD    = $Option_Cd
End-Select

End-Procedure

!*******************************
Begin-Procedure Get-Bas-Message
!*******************************
#debug9 show 'Get-Bas-Message'

  let $Short_Error_Message = '[ErrMsg Not Available]'

Begin-Select

O.DESCR
  let $Short_Error_Message = RTRIM(&O.Descr,' ')

From PS_BAS_MESSAGE     N,
     PS_PAY_MESSAGE_TBL O
Where N.SCHED_ID     = $SchedId
And   N.EMPLID       = $Empl_Id
And   N.BENEFIT_RCD_NBR = #BenefitRcdNo
And   N.EVENT_ID     = #EventId
And   N.MSGDATA1     = $Plan_Type
And   O.MSGID        = N.MSGID
End-Select
End-Procedure

!**************************************
Begin-Procedure Print-Deduction-Totals
!**************************************
#debug9 show 'Print-Deduction-Totals'

 graphic () font 5 {norm}
 !Horizontal Line
 graphic ({Total_Line},1,{horz_line_ln}) Horz-line {norm_lnsize}

If #Flexible_Credits > 0                                              !RKK
  print 'Total Credit Per Pay Period' (+2,1)                          !RKK
  print #Flexible_Credits          (0,{col2})  edit {period_pay_mask} !RKK
end-if                                                                !RKK

 let #Deduction_Fm_Pay = #PreTax_Total - #Flexible_Credits

 if #Deduction_Fm_Pay < 0
    let #Deduction_Fm_Pay = ABS(#Deduction_Fm_Pay)
 else
   print 'Total Deduction Per Pay Period' (+2,1)
   print #Deduction_Fm_Pay           (0,{col2}) edit {period_pay_mask}
 end-if

 print #AfterTax_Total               (0,{col3})   edit {period_pay_mask}

 if $Msg <> ' '
   print $Msg                        (+1,1)     bold
 end-if

End-Procedure

!***********************************
Begin-Procedure Approval-Of-Changes
!***********************************
#debug9 show 'Approval-Of-Changes'

if #current-line > 58 and (&A.Sched_Id='EM' or &A.Sched_Id='EMX') 
do  Foot-Note
end-if 

Begin-Document (+3,1)

 !$Statement1
 !$statement2
 !$Statement

End-Document

 #debug8 show '$DpndFoundFlag ' $DpndFoundFlag
 if $DpndFoundFlag ='Y'
    graphic (+1,1,{horz_line_ln}) Horz-line {norm_lnsize} !Horizontal Line
 end-if
 
 #debug8 show '&A.Sched_Id : ' &A.Sched_Id
 #debug8 show '$SchedId : ' $SchedId
 #debug8 show '$Sched_Id : ' $Sched_Id
 
 if $DpndFoundFlag ='Y'            !rkk 02-08-2011
   move 1 to #Appr
   do Foot-Note
 end-if
 
End-Procedure

!*************************
Begin-Procedure Foot-Note
!*************************
#debug9 show 'Foot-Note' 
 add 1 to #Page_Number
 
 !Horizontal Line
 
 graphic ({start_footer},1,{Horz_Line_Ln}) Horz-line {norm_lnsize}

 print &B.name                          (+1,1)   
 
 let #col1 = {col1} + 3
 let $Page_Number = edit (#Page_Number,'99')
 let $Tmp_Text = $BEN1-PAGE || $Page_Number
 print $Tmp_Text                    (0,#col1)
 let #col1 = {col3} - 1 
 let $bottom_ssn = $random_num || &A.emplid || $random_num  
 print $bottom_ssn                   (0,#col1)
 
#debug8 show 'Line_Ct ' #Line_Ct
#debug8 show '#current-line: '#current-line
#debug8 show 'Foot-Note Appr: '#Appr 
 if #Appr <> 1
   #debug8 show '#current-line: '#current-line
   do Reset-Printer
   move 0 to #Appr
 else
   move 0 to #Appr
 end-if

End-Procedure

!****************************
Begin-Procedure Print-Line-1
!****************************
#debug9 show 'Print-Line-1'

 graphic (+1,1,{horz_line_ln}) Horz-line {norm_lnsize} !Horizontal Line

End-Procedure

!******************************************
Begin-Procedure Update-Confirm-Notify-Date
!******************************************
#debug9 show 'Update-Confirm-Notify-Date'

let $Sql-Statement = 'BAS005: UPDATE PS_BAS_Partic'
Begin-SQL On-Error=SQL-Error

UPDATE PS_BAS_PARTIC
SET    CONFIRM_NOTIFY_DT = $AsOfToday
Where  SCHED_ID = &A.Sched_Id
And    EMPLID = &A.Emplid
And    BENEFIT_RCD_NBR = &A.Benefit_Rcd_Nbr        
And    EVENT_ID = &A.Event_Id;

End-SQL

 display 'Confirmation Form Printed for Emplid: ' noline
 display &A.Emplid

End-Procedure

!*********************************
Begin-Procedure Delete-Reprint-Id
!*********************************
#debug9 show 'Delete-Reprint-Id'

let $Sql-Statement = 'BAS004: DELETE PS_Bas_Prnt'
Begin-SQL On-Error=SQL-Error

DELETE FROM PS_BAS_PRNT
WHERE PRINT_ID = $Reprint_Id;

End-SQL

let $Sql-Statement = 'BAS004: DELETE PS_Bas_Prnt_Partic'
Begin-SQL On-Error=SQL-Error

DELETE FROM PS_BAS_PRNT_PARTIC
WHERE PRINT_ID = $Reprint_Id;

End-SQL

End-Procedure

!************************************
Begin-Procedure Print-Mailer-Pg
!************************************
#debug9 show 'Print-Mailer-Pg'

   Graphic () Font 5 {BIG}             !Increase font size
   let $mailer_pg = 'Y'
   print $Name                              (+33,30)	Bold
   print &B.Address1                        (+1,30)	Bold
   if rtrim(&B.Address2,' ') <> ''
      print &B.Address2                     (+1,30)	Bold
      print $CityState                 (+1,30)	Bold	
   else
      print $CityState                 (+1,30)	Bold
   end-if
   Graphic () Font 5 {NORM}             !Restore font size
   let $mailer_pg = 'N'
end-procedure

!****************************
Begin-Procedure Display-Time
!****************************
#debug9 show 'Display-Time'

do get-current-datetime
display $asofnow

End-Procedure

! *-----------------------------------------------------------------------*
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Format-DateTime
#include 'getsched.sqc'  !Ask-Schedule-Id Procedure
#include 'readxlat.sqc'  !Read-Translate-Table Procedure
#include 'number.sqc'    !Init-Number Procedure
#include 'getcvgcd.sqc'  !Get-Covrg-Code-Descr
#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'datemath.sqc'
#Include 'rotname1.sqc'  !Rotate-Name procedure
! *------------------------* End Of Report *------------------------------*

