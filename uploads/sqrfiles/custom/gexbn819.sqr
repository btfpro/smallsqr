!***********************************************************************
! GEXBN819: Conflicting Events that affect benefits                                                   *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!  NARRATIVE: All BP's                                                 *
!             Benefit Events that are conflicting in terms of effective*
!             dates within a couple of weeks either backward or forward*
!             need to be reported.                                     *
!                                                                      *
!  RUN FREQUENCY: Daily                                                *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *  
!***********************************************************************
!  GBNC075   GXD       08/31/1998     INITIAL CREATION                 *
!                                                                      *
!  HR10694   AXL       06/03/2004     Limit conflicting events known to*
!                                     cause problems.                  * 
!***********************************************************************

#include 'setenv.sqc' !Set environment

begin-setup

#include 'setup32a.sqc'

declare-report Report-log
Printer-Type=HPLASERJET
  layout=DEFAULT
end-declare

end-setup


!*********************************************************************
!Initial processing, retrieving current dates, etc. 
!*********************************************************************
begin-report
#debug9 show 'gexbn819.begin-report'

  use-report Report-log

  do Init-DateTime
  do Init-Number
  do stdapi-init
  
  

  move 'GEXBN819' to $ReportID
  let $ReportTitle = 'Conflicting Events that affect Benefits'
  show '$ReportID=' $ReportID
  show '$ReportTitle=' $ReportTitle 

  do Get-Current-DateTime
  show '$asoftoday=' $asoftoday 
  show '$reportdate=' $reportdate 
  
  do Report

!  do rollback-transaction                      !**debug**remove
  do Commit-Transaction                 

  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term

end-report

!*********************************************************************
!If this Program is being executed through process scheduler, 
!the run control parameters and calls the main processing procedure.
!Otherwise, interrogates the user for the run control parameters and 
!validates them. If the run control parameters are invalid, stops the
!execution.
!*********************************************************************
begin-procedure Report
#debug9 show 'gexbn819.report'

date-time () hh:mi:ss &timeBegan
display 'Report Began: ' noline
display &timeBegan

  move 'N' to $Errorfound
  move $asoftoday to $where_select_date
  
  show '$where_select_date= ' $where_select_date

  Do Convert-to-dtu-date($AsOfToday,$current_date)
  do dtu-add-days($current_date,-1,$yesterday)
  do convert-from-dtu-date($yesterday,$AsOfYesterday)

  let $curr_yy = substr($current_date,1,4)
  let $curr_mm = substr($current_date,6,2)
  let $curr_dd = substr($current_date,9,2)
  let $curr_all = $curr_yy||$curr_mm||$curr_dd

  do Main-Process

Report-Exit:

  Do Get-Current-DateTime
  Print 'End Time: ' (+2,1)
  Print $ReportDate      ()
  Print ' '              ()
  Print $ReportTime      ()

end-procedure


!*********************************************************************
!Prints the header information in the report log.
!*********************************************************************

begin-heading 7 for-reports=(report-log)
#debug9 show 'gexbn819.begin-heading'

 #Include 'stdhdg01.sqc'

!  Do GEXXX951-Select-Oracle-Instance

!  print 'Oracle DB: '              (1,1)
!  print $GEXXX951_Oracle_Instance     ()
!  print 'Giant Eagle'                 () Center

!  print 'Report ID: '      (+1,1)
!  print $ReportID              ()
!  print $ReportTitle           () Center

!  print 'SQR Begin Time '  (+1,1)
!  print $ReportDate            ()
!  print $ReportTime        (0,+2)

  print 'Emplid'          (+3,36) bold
  print 'Event ID'          (,48) bold
  print 'Event Date'        (,59) bold
  print 'Event Status'      (,72) bold
  print 'Job Effdt'         (,88) bold
  print 'Benefit Program'  (,100) bold
  print 'Event Class'      (,118) bold
  print 'Process Status'   (,134) bold
  print '-'            (+1,36,113) fill
 
end-heading


!*********************************************************************
!Prints the footer in the report log
!*********************************************************************

begin-footing 2 for-reports=(Report-log)
#debug9 show 'gexbn019.begin-footing'

page-number (1,108) 'Page '  
last-page () ' of ' '.'

end-footing


!*******************************************************************
!Retrieves all the benefit programs for this SQR program and process 
!them one by one
!*******************************************************************
Begin-Procedure Main-Process
!Display 'gexbn804.Main-Process'

! Do Get-Pay-Calendar
 Do Get-Bas-Partic

end-procedure

!*****************************************************************
! Get the Current Pay Begin Dt & Pay End Dt from Pay Calendar
!*****************************************************************
begin-procedure Get-Pay-Calendar
!Display 'Get-Pay-Calendar'
begin-select

MAX(PC.PAY_END_DT)          &PC.PAY_END_DT
   move &PC.PAY_END_DT   to $pay_end_dt
   
MAX(PC.PAY_BEGIN_DT)        &PC.PAY_BEGIN_DT
   move &PC.PAY_BEGIN_DT to $pay_begin_dt

   Do Convert-to-dtu-date($pay_end_dt,$pay_end)
   let $end_yy = substr($pay_end,1,4)
   let $end_mm = substr($pay_end,6,2)
   let $end_dd = substr($pay_end,9,2)
   let $end_all = $end_yy||$end_mm||$end_dd

   Do Convert-to-dtu-date($pay_begin_dt,$pay_beg)
   let $beg_yy = substr($pay_beg,1,4)
   let $beg_mm = substr($pay_beg,6,2)
   let $beg_dd = substr($pay_beg,9,2)
   let $beg_all = $beg_yy||$beg_mm||$beg_dd

 !   Display $end_all
 !   Display $beg_all

   Do Get-Max-Pay-Begin-Dt
   Do Get-Min-Pay-End-Dt
!KMW 7.5 fix
!   Let $event_dt_range = '(BP1.JOB_EFFDT BETWEEN '||''''||$range_begin_dt||''''||' AND !'||''''||$range_end_dt||''''||')'
!   Let $event_dt_range = '(to_char(BP1.EVENT_DT,'|| ''''||'yyyymmdd'||''''||') BETWEEN !'||''''||'19980501'||''''||' AND '||''''||'19980902'||''''||')'

 Let $event_dt_range = '(BP1.event_dt BETWEEN '||''''||$range_begin_dt||''''||' AND '||''''||$range_end_dt||''''||')'
! end kmw
  display $event_dt_range
   
FROM PS_PAY_CALENDAR PC
!KMW 7.5 fix
!WHERE PC.PAY_END_DT   >= &BP.JOB_EFFDT
!AND   PC.PAY_BEGIN_DT <= &BP.JOB_EFFDT
WHERE PC.PAY_END_DT   >= &BP.event_dt
AND   PC.PAY_BEGIN_DT <= &BP.event_dt
end-select
end-procedure

!*****************************************************************
begin-procedure Get-Max-Pay-Begin-Dt
begin-select 
MAX(PB.PAY_BEGIN_DT)        &PB.PAY_BEGIN_DT
   move &PB.PAY_BEGIN_DT to $pb_date

   Do Convert-to-dtu-date($pb_date,$pb_dt)
   let $pb_yy = substr($pb_dt,1,4)
   let $pb_mm = substr($pb_dt,6,2)
   let $pb_dd = substr($pb_dt,9,2)
   let $range_begin_dt_yyyymmdd = $pb_yy||$pb_mm||$pb_dd
   let $range_begin_dt = $pb_date

FROM PS_PAY_CALENDAR PB
WHERE PB.PAY_BEGIN_DT < $pay_begin_dt

end-select

  Display 'Range Begin Dt: ' noline
  Display $range_begin_dt

end-procedure

!*****************************************************************
begin-procedure Get-Min-Pay-End-Dt
begin-select
MIN(PE.PAY_END_DT)        &PE.PAY_END_DT
   move &PE.PAY_END_DT to $pe_date

   Do Convert-to-dtu-date($pe_date,$pe_dt)
   let $pe_yy = substr($pe_dt,1,4)
   let $pe_mm = substr($pe_dt,6,2)
   let $pe_dd = substr($pe_dt,9,2)
   let $range_end_dt_yyyymmdd = $pe_yy||$pe_mm||$pe_dd
   let $range_end_dt = $pe_date

FROM PS_PAY_CALENDAR PE
WHERE PE.PAY_END_DT > $pay_end_dt

end-select

  Display 'Range End Dt: ' noline
  Display $range_end_dt

end-procedure

!*****************************************************************
! Get Emplid, Event ID from the Bas Partic table who have an 
!     Event Dt < $asoftoday and an Event Status = 'PR'
!*****************************************************************
begin-procedure Get-Bas-Partic
!Display 'Get-Bas-Partic'

  move 'Y' to $first_pass
  move 0   to #event_id_count
  move 'N' to $multiple_event_exists
  move 0   to #empl_count
  move 'N' to $Data_Flag

begin-select
BP.EMPLID
   move &BP.EMPLID    to $emplid

BP.EMPL_RCD      
   move &BP.EMPL_RCD to #empl_rcd

BP.EVENT_ID
   move &BP.EVENT_ID  to $event_id
BP.JOB_EFFDT
BP.EVENT_DT
BP.BENEFIT_PROGRAM
BP.EVENT_CLASS
BP.EVENT_STATUS
BP.BAS_PROCESS_STATUS

   Display '***********' 
   display 'Emplid:' noline
   Display $emplid 
   display 'Empl Rcd#:' noline
   Display #empl_rcd
   display 'Event ID:' noline
   Display $event_id
 !**
   Do Get-Pay-Calendar

 !   if $first_pass = 'Y'
 !      move $emplid to $hold_emplid
 !      move #empl_rcd to #hold_empl_rcd
 !      move $event_id to $hold_event_id
 !      move $event_id to $hold_first_event_id
 !      let $event_id_string = '(BP1.EVENT_ID NOT IN (' || '''' || $event_id || ''''
 !      move 'N' to $first_pass
 !   end-if

 !   Display 'Emplid: ' noline
 !   Display $emplid
 !   Display 'Hold Emplid: ' noline
 !   Display $hold_emplid

 !   add 1 to #event_id_count
 !   if $emplid = $hold_emplid
 !      add 1 to #event_id_count
 !      if #event_id_count = 1
 !	 let $event_id_string = $event_id_string || ',' || '''' || $event_id || ''''
 !	 move $event_id to $hold_event_id
 !      else
 !	 let $event_id_string = $event_id_string || ',' || '''' || $event_id || ''''
 !         display $event_id_string
 !	 move $event_id to $hold_event_id
 !      end-if
 !   else
 !      if #event_id_count > 0
 !	 let $event_id_string = $event_id_string || '))'
 !	 display $event_id_string
 !
 !	 if #event_id_count > 1
 !	    move 'Y' to $multiple_event_exists
 !	 end-if
 !
 !      end-if 

      do Get-Bas-Partic1
 !      if $multiple_event_exists = 'Y'
 !	Do Get-Bas-Partic2
 !      end-if
 !	 move $emplid to $hold_emplid
 !	 move #empl_rcd to #hold_empl_rcd
 !	 move $event_id to $hold_event_id
 !	 move $event_id to $hold_first_event_id
 ! 	 move 0 to #event_id_count
 !	 move 'N' to $multiple_event_exists
 !	 let $event_id_string = '(BP1.EVENT_ID NOT IN (' || '''' || $event_id || ''''
 !   end-if
!kmw 7.5 fix
! FROM PS_JOB JB,
FROM  PS_BAS_PARTIC BP
!WHERE JB.EMPLID       = BP.EMPLID
!AND   JB.EMPL_RCD    = BP.EMPL_RCD

 !AND   BP.EVENT_STATUS = 'C'
 !AND   BP.EVENT_STATUS = 'PR'
Where   BP.BAS_PROCESS_STATUS = 'FE'
!AND   BP.JOB_EFFDT = JB.EFFDT
!AND   BP.JOB_EFFSEQ = JB.EFFSEQ
AND  BP.STATUS_DT between $AsOfYesterday and $AsOfToday
!AND  BP.EVENT_CLASS in ('LOA','PLA','TER')   AXL 6/3/2004 - Add
ORDER BY BP.EMPLID, BP.EVENT_DT, BP.EVENT_ID

end-select

   if $Data_Flag = 'Y' 

!      if #event_id_count > 0
!	 let $event_id_string = $event_id_string || '))'
!         display $event_id_string
!     
!	 if #event_id_count > 1
!	    move 'Y' to $multiple_event_exists
!	 end-if
!
!      else
!	 let $event_id_string = $event_id_string || '))'
!         display $event_id_string
!	 move 'N' to $multiple_event_exists
!      end-if
!      do Get-Bas-Partic1
!      if $multiple_event_exists = 'Y'
!	 Do Get-Bas-Partic2
!      end-if
!      move $emplid to $hold_emplid
!      move #empl_rcd to #hold_empl_rcd
!      move $event_id to $hold_event_id
!    
!      Do Format-Number(#empl_count, $empl_count,'9999')
!      print 'Total Records Processed: '  (+2,36)
!      print $empl_count                   (0,+1)

   else
      print ' '                             (+5,1)
      print 'NO DATA SELECTED FOR THIS REPORT'  () Center
   end-if

end-procedure

!*****************************************************************
! Get Bas Partic employee info using strings
!*****************************************************************
begin-procedure Get-Bas-Partic1

begin-select
BP1.EMPLID
    move &BP1.EMPLID           to $out_emplid
BP1.EVENT_ID
    move &BP1.EVENT_ID         to $out_event_id
BP1.EVENT_DT
    move &BP1.EVENT_DT         to $out_event_dt
BP1.EVENT_STATUS
    move &BP1.EVENT_STATUS     to $out_event_status
BP1.JOB_EFFDT
    move &BP1.JOB_EFFDT        to $out_job_effdt
BP1.BENEFIT_PROGRAM
    move &BP1.BENEFIT_PROGRAM  to $out_benefit_program
BP1.EVENT_CLASS
BP1.BAS_PROCESS_STATUS
    move &BP1.EVENT_CLASS      to $out_event_class

    move &BP.EMPLID           to $out_emplid
    move &BP.EVENT_ID         to $out_event_id
    move &BP.EVENT_DT         to $out_event_dt
    move &BP.EVENT_STATUS     to $out_event_status
    move &BP.JOB_EFFDT        to $out_job_effdt
    move &BP.BENEFIT_PROGRAM  to $out_benefit_program
    move &BP.EVENT_CLASS      to $out_event_class
    move &BP.BAS_PROCESS_STATUS to $out_status

    !AXL 6/3/2004 - Begin
    Let $print_check = &BP.EVENT_CLASS || &BP1.EVENT_CLASS

    Evaluate $print_check
      
	when = 'TERHIR'
	when = 'RETHIR'
	when = 'TERREH'
	when = 'RETREH'
	when = 'LOARFL'
	when = 'LOATER'
	when = 'LOARET'
	when = 'FMLRFL'
	when = 'FMLLOA'
	when = 'FMLTER'
	when = 'FMLRET'
	when = 'LOFRFL'
	when = 'LOFLOA'
	when = 'LOFTER'
	when = 'LOFRET'
	when = 'LTDRFL'
	when = 'LTDLOA'
	when = 'LTDTER'
	when = 'LTDRET'
	when = 'MILRFL'
	when = 'MILLOA'
	when = 'MILTER'
	when = 'MILRET'
	when = 'PERRFL'
	when = 'PERLOA'
	when = 'PERTER'
	when = 'PERRET'
	when = 'ST2RFL'
	when = 'ST2LOA'
	when = 'ST2TER'
	when = 'ST2RET'
	when = 'ST3RFL'
	when = 'ST3LOA'
	when = 'ST3TER'
	when = 'ST3RET'
	when = 'STDRFL'
	when = 'STDLOA'
	when = 'STDTER'
	when = 'STDRET'
	when = 'WC1RFL'
	when = 'WC1LOA'
	when = 'WC1TER'
	when = 'WC1RET'
	when = 'WC2RFL'
	when = 'WC2LOA'
	when = 'WC2TER'
	when = 'WC2RET'
            let $print_rec = 'Y' 
        when-other
	    let $print_rec = 'N' 
    End-Evaluate
    Let $print_check2 = &BP1.EVENT_CLASS || &BP.EVENT_CLASS

    Evaluate $print_check2
      
	when = 'TERHIR'
	when = 'RETHIR'
	when = 'TERREH'
	when = 'RETREH'
	when = 'LOARFL'
	when = 'LOATER'
	when = 'LOARET'
	when = 'FMLRFL'
	when = 'FMLLOA'
	when = 'FMLTER'
	when = 'FMLRET'
	when = 'LOFRFL'
	when = 'LOFLOA'
	when = 'LOFTER'
	when = 'LOFRET'
	when = 'LTDRFL'
	when = 'LTDLOA'
	when = 'LTDTER'
	when = 'LTDRET'
	when = 'MILRFL'
	when = 'MILLOA'
	when = 'MILTER'
	when = 'MILRET'
	when = 'PERRFL'
	when = 'PERLOA'
	when = 'PERTER'
	when = 'PERRET'
	when = 'ST2RFL'
	when = 'ST2LOA'
	when = 'ST2TER'
	when = 'ST2RET'
	when = 'ST3RFL'
	when = 'ST3LOA'
	when = 'ST3TER'
	when = 'ST3RET'
	when = 'STDRFL'
	when = 'STDLOA'
	when = 'STDTER'
	when = 'STDRET'
	when = 'WC1RFL'
	when = 'WC1LOA'
	when = 'WC1TER'
	when = 'WC1RET'
	when = 'WC2RFL'
	when = 'WC2LOA'
	when = 'WC2TER'
	when = 'WC2RET'
            let $print_rec2 = 'Y' 
        when-other
	    let $print_rec2 = 'N' 
    End-Evaluate

    if ($print_rec = 'Y' or $print_rec2 = 'Y')
    !AXL 6/3/2004 - End

      print 'Current Event:' (+1,4)

      Do Print-Record

      move &BP1.EMPLID           to $out_emplid
      move &BP1.EVENT_ID         to $out_event_id
      move &BP1.EVENT_DT         to $out_event_dt
      move &BP1.EVENT_STATUS     to $out_event_status
      move &BP1.JOB_EFFDT        to $out_job_effdt
      move &BP1.BENEFIT_PROGRAM  to $out_benefit_program
      move &BP1.EVENT_CLASS      to $out_event_class
      move &BP1.BAS_PROCESS_STATUS to $out_status

      Display 'Bas Partic1'
      Display $out_emplid noline
      Display ' ' noline
      Display $out_event_id noline
      Display ' ' noline
      Display $out_event_dt noline
      Display ' ' noline
      Display $out_event_status noline
      Display ' ' noline
      Display $out_job_effdt
      print 'Conflicting Event:' (+1,4)
      Do Print-Record
      position (+1)

    end-if	!AXL 6/3/2004

FROM PS_BAS_PARTIC BP1
WHERE BP1.EMPLID    = $emplid   !Used to be $hold_emplid
AND   BP1.EMPL_RCD = #empl_rcd
 !AND   [$event_id_string]
AND   BP1.EVENT_ID <> $event_id
AND   [$event_dt_range]
AND   BP1.BAS_PROCESS_STATUS <> 'FP'
ORDER BY BP1.EMPLID, BP1.EVENT_DT, BP1.EVENT_ID
end-select
end-procedure

!*****************************************************************
! Get Bas Partic employee info using 
!*****************************************************************
!begin-procedure Get-Bas-Partic2

!begin-select
!BP2.EMPLID
!    move &BP2.EMPLID           to $out_emplid
!BP2.EVENT_ID
!    move &BP2.EVENT_ID         to $out_event_id
!BP2.EVENT_DT
!    move &BP2.EVENT_DT         to $out_event_dt
!BP2.EVENT_STATUS
!    move &BP2.EVENT_STATUS     to $out_event_status
!BP2.JOB_EFFDT
!    move &BP2.JOB_EFFDT        to $out_job_effdt
!BP2.BENEFIT_PROGRAM
!    move &BP2.BENEFIT_PROGRAM  to $out_benefit_program
!BP2.EVENT_CLASS
!    move &BP2.EVENT_CLASS      to $out_event_class

!    Display 'Bas Partic2'
!    Display $out_emplid noline
!    Display ' ' noline
!    Display $out_event_id noline
!    Display ' ' noline
!    Display $out_event_dt noline
!    Display ' ' noline
!    Display $out_event_status noline
!    Display ' ' noline
!    Display $out_job_effdt

!    Do Print-Record

!FROM PS_BAS_PARTIC BP2
!WHERE BP2.EMPLID     = $hold_emplid
!AND   BP2.EMPL_RCD  = #hold_empl_rcd
!AND   BP2.EVENT_ID  <> $hold_first_event_id
!AND   to_char(BP2.EVENT_DT,'yyyymmdd') = $curr_all
!AND   BP2.EVENT_STATUS <> 'FP'
!ORDER BY BP2.EMPLID, BP2.EVENT_ID
!end-select
!end-procedure

!********************************************************************
! Print Record
!********************************************************************
begin-procedure Print-Record

 if #current-line > 51
    new-page
 end-if

 let $empl1 = substr($out_emplid,1,3)
 let $empl2 = substr($out_emplid,4,2)
 let $empl3 = substr($out_emplid,6,4)
 let $print_emplid = $empl1||'-'||$empl2||'-'||$empl3

 Do Convert-to-dtu-date($out_event_dt, $oe_dt)
 let $oe_yy = substr($oe_dt,1,4)
 let $oe_mm = substr($oe_dt,6,2)
 let $oe_dd = substr($oe_dt,9,2)
 let $out_event_all = $oe_mm||'/'||$oe_dd||'/'||$oe_yy

 Do Convert-to-dtu-date($out_job_effdt, $oj_dt)
 let $oj_yy = substr($oj_dt,1,4)
 let $oj_mm = substr($oj_dt,6,2)
 let $oj_dd = substr($oj_dt,9,2)
 let $out_job_all = $oj_mm||'/'||$oj_dd||'/'||$oj_yy

 print $print_emplid         (,36)
 print $out_event_id          (0,52)
 print $out_event_all         (0,59)
 print $out_event_status      (0,78)
 print $out_job_all           (0,87)
 print $out_benefit_program  (0,112)
 print $out_event_class      (0,126)
 print $out_status (0,144)

 add 1    to #empl_count
 move 'Y' to $Data_Flag

end-procedure

!********************************************************************
!This procedure displays in the error report if there are any sql erros
!happened in the program
!********************************************************************
begin-procedure SQL-Error-Found($Proc_Name) 
#debug9 show 'gexbn819.SQL-Error-Found'

  print 'SQL Error in ' (,34)
  print $Proc_Name         ()  
  print $_sql-error        () 
  print 'sql-status:'      ()
  print #_sql-status       () edit 99999 

end-procedure

!**************************************************************  
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
!#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'payrnctl.sqc'  !Select-Parameters
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'readxlat.sqc'  !Read xlattable
#Include 'gexxx951.sqc'  !Get-Oracle-Instance
