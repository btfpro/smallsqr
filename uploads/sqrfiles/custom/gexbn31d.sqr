!************************************************************************
! GEXBN31D:  This program process Ben Admin events that are determined  *
!            to be eligible for the finalze process.  Finalizing Prepared
!            events will move the event to an enrolled status in ben    * 
!            admin.  Prepared events that are eligible to be finalized  *
!            are those that contain plans with no elections allowed or  *
!            with a single option.  The finalize process occurs for the *
!            event as a whol, therefore, any plans within the event that*
!            have multiplle options will cause the entire event to be   *
!            ineligible for the finalize process.  This program will run*
!            following each execution of the standard ben admin COBOL   *
!            process.                                                   *
!************************************************************************
!                                                                       *
!               Confidentiality Information:                            *
!                                                                       *
! This module is the confidential and proprietary information of        *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used  *
! for any purpose other than that for which it is expressly provided    *
! without the written permission of Giant Eagle.                        *
!                                                                       *
!                                                                       *
!********************************************************************** *
!                                                                       *
!  $Date:: 01/27/98 09:00A      $                                       *
!  $Revision:: 01               $                                       *
!  $Workfile:: GEXBN31D.SQR     $                                       *
!                                                                       *
!********************************************************************** *
!                         MODIFICATION HISTORY                          *
!********************************************************************** *
!  ID#     INITIALS    DATE       DESCRIPTION OF THE CHANGE             *        
!  GEX-MXT  MXT        11/28/2007 INITIAL CREATION                      *
! ISDVASS              06/25/2008 Changed logic and procedure names     *  
! ISDVNPK 08/12/2008   Added to process if employees satisfy greater than 31 days also*
!************************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup02.sqc'
!*********************************************************************
!Initial processing, retrieving current dates and calls the main 
!procedure to do the processing.                                     
!*********************************************************************

begin-setup
  declare-variable 
    date     $SELECT_ASOFDATE 
  end-declare
end-setup

begin-report

  do Init-DateTime
  do Init-Number
  do stdapi-init
  
  Do GEXRCHR1-SELECT-PARAMETERS
  
  If Rtrim ($GEX_RC_HR.ASOfDATE, ' ') = ''
      Let $SELECT_ASOFDATE = $AsOfToday
      Let $SELECT_ASOFDATE = DATEADD($SELECT_ASOFDATE,'DAY',- 31)
  Else
      Let $SELECT_ASOFDATE = $GEX_RC_HR.ASOfDATE    
  End-If  
  
  show 'AsOfDate : ' $SELECT_ASOFDATE  
  move 'GEXBN31D' to $ReportID
  move 'Ben Admin Finalize Process' to $ReportTitle
  display $ReportTitle

  do Get-Current-DateTime

  do Report
  do Commit-Transaction
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term

end-report

!*********************************************************************
!If this Program is being executed through process scheduler, 
!the run control parameters and calls the main processing procedure.
!Otherwise, interrogates the user for the run control parameters and 
!validates them. If the run control parameters are invalid, stops the
!execution.
!*********************************************************************
begin-procedure Report

date-time () hh:mi:ss &timeBegan
display 'Report Began: ' noline
display &timeBegan

 move 'N' to $Errorfound


 do process-events

  
Report-Exit:


  print 'Events Processed: ' (+2,1)
  print #inputtran () edit 999999
  print 'Events Finalized: ' (+2,1)
  print #Final_counter () edit 999999

  date-time () hh:mi:ss &timeProcess
  display #InputTran 99999 noline
  display ' Events Processed: ' noline
  display &timeProcess
  display #Final_counter 99999 noline
  display ' Events Finalized: ' noline
  display &timeProcess
end-procedure

!*********************************************************************
!Prints the header information in the error report.
!*********************************************************************

begin-heading 6


#include 'stdhdg01.sqc'

  print 'Tran #' (+1,1) bold
  print 'Message' (,21) BOLD

  print '-' (+1,1,176) fill

end-heading

!*********************************************************************
!Prints the footer in the report
!*********************************************************************

begin-footing 2 
page-number (1,160) 'Page '  
last-page () ' of ' '.'

end-footing

!*********************************************************************
!This is the logic to process events that are to be finalized. For 
!every event finds if any plan has multiple options. If it is so, does
!not update the final enroll flag in ps_bas_partic table. Otherwise, 
!updates the flag to 'Y'. 
!*********************************************************************

begin-procedure process-events

date-time () MM/DD/YYYY &curr_date

move &curr_date to $curr_date

do format-datetime($curr_date,$curr_Date_dbf_1,{DEFMDY},'','native')

move 'N' to $event_found

let #inputtran = 0
let #final_count = 0

begin-select ON-ERROR=SQL-Error-Found('Process-events')
A.SCHED_ID
A.EMPLID
A.BENEFIT_RCD_NBR
A.EVENT_ID
A.EMPL_RCD
A.BENEFIT_PROGRAM
A.EVENT_DT
A.BAS_PROCESS_STATUS
A.GEX_PROCESS_IND
A.FINALIZE_ENROLL

  move 'Y' to $Event_Found
  display &A.emplid
  add 1 to #inputtran

!  do process-plans							! ISDVASS commented on 06/25/2008
  !if $multiple_options = 'N' and $plan_found = 'Y'	!GEX-MXT commented on 11/28/2007	
!  if $plan_found = 'Y'					!GEX-MXT added on 11/28/2007     ISDVASS commented on 06/25/2008
     do 31d-finalize
!  end-if												! ISDVASS commented on 06/25/2008
 
FROM PS_BAS_PARTIC A
WHERE A.BAS_PROCESS_STATUS in ('PR','RE','NT')     !Prepared or Notified Status or RE
  AND A.EVENT_STATUS = 'O'            !Open Event
  AND A.PROCESS_IND = 'N'             !Normal         
  AND A.FINALIZE_ENROLL = 'N'         !not Finalized 
  AND A.SCHED_ID ='EM'                !Only want to process events that have a sched_id = 'EM'.  
!  AND A.GEX_EBEN_IND = 'Y'						! ISDVASS commented on 06/25/2008
  AND A.STATUS_DT <= $SELECT_ASOFDATE	      ! ISDVNPK Added < as per Pam on 08/12/2008
ORDER BY A.SCHED_ID,A.EMPLID,A.BENEFIT_RCD_NBR,A.EVENT_ID
end-select

if $Event_found = 'N'
   do error-found
   print 'No Events found to finalize '(,34)
end-if

end-procedure



!*********************************************************************
!Updates the ps_bas_partic by setting final_enroll flag to 'Y'
!*********************************************************************

begin-procedure 31d-finalize

move 'N' to $found
move 'N' to $errorfound

begin-sql on-error=sql-error-found('31d-Finalize')
UPDATE PS_BAS_PARTIC C
   SET C.FINALIZE_ENROLL = 'Y'
WHERE C.SCHED_ID = &A.SCHED_ID
  AND C.EMPLID = &A.EMPLID
  AND C.BENEFIT_RCD_NBR = &A.BENEFIT_RCD_NBR
  AND C.EVENT_ID = &A.EVENT_ID
end-sql

add 1 to #final_counter

end-procedure

!*********************************************************************
!Displays the error messages and stops execution
!*********************************************************************
 
begin-procedure SQL-Error-Found($Proc_Name) 
  do error-found
  display 'SQL Error in ' 
  display $Proc_Name 
  display $_sql-error
  display 'sql-status:' 
  display #_sql-status 

  STOP

end-procedure

!*********************************************************************
!Displays the employee id that failed 
!*********************************************************************

begin-procedure Error-Found
  move 'Y' to $ErrorFound
  do Format-Number(#InputTran, $out, '99999')
  print $out (+1,1)

  let $EmplId_1st3 = substr($EmplId,1,3)
  let $EmplId_mid2 = substr($EmplId,4,2)
  let $EmplId_last4 = substr($EmplId,6,4)
 
  String $EmplId_1st3 $EmplID_mid2 $EmplId_last4 by '-' into $EmplId11

  print $EmplID11 (,8)
end-procedure

#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
#include 'gexxx921.sqc'  !get gex_rc_hr.asofdate 
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
