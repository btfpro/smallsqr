!***********************************************************************
!*   GEXPY666 - Create interface for child support                     *
!***********************************************************************                                                        
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *                                                                                                                    *
!***********************************************************************
! GEXPY666:        Interface for child support payments                *                        
!                                                                      *
! Narrative:       This program creates multiple csv files containing  *
!                  child support payments. The files are written to a  * 
!                  network location. A Summary report is also generated*
!								       *
! #Debugx Used:	   #debug9 paragraph trace                             *
!	           #debug8 key variable values                         *
!                                                                      *
! SQL Tables:      PS_estab_tbl                                        *
!                  PS_company_tbl                                      *
!                  PS_PAY_CHECK                                        * 
!	           PS_GARN_SPEC                                        *
! 	           PS_PAY_GARNISH                                      *
!                  PS_PERSONAL_DATA                                    *
!                                                                      *
! Written by:      Deepak Shirguppi                                    *
!                                                                      *
! Normally Run:    Weekly                                              *
!                                                                      *
! Control Parms:   Pay End Date                                        *                                                                                                                                 *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
! ID#   INIT	DATE		DESCRIPTION OF THE CHANGE              *
! ----- ----    -----------	-------------------------              *
!	DXS	11/07/2006	INITIAL CREATION                       *
!                                                                      *
! 11194 DXS     04/16/2007	Changed extract file extension to .txt *
!				Adding condition to exclude -ve and    *
!				zero dollar values		       *
!  
!     VENDTKK   09/30/2007      Altered program : emplid (9 char)      *
!			        from PS_JOB be replaced with national_id *
!			       (9 char) from PS_PERS_NID EMPLID        *
!     GEX-MXT   03/05/2008      HCM Upgrade 9.0                        *
!     ISDVVXK	01/09/2016      South Carolina does not participate in *
!                               Expert Pay so we need to remove from the*
!                               GEXPY666 file                          *
!***********************************************************************
#include 'setenv.sqc' !Set environment
#include 'setup02.sqc'
!#Define OUTFILE /apps/hr/hrms90/hrdev90/outgoing/	!For Testing
!*********************************************************************
!Initial processing, retrieving current dates and calls the main 
!procedure to do the processing.                                     
!*********************************************************************
Begin-report
!*********************************************************************
#debug9 Show 'Begin-Report'

  do Init-DateTime
  do Init-Number
  do stdapi-init
  do Init-Report
  do Get-Current-DateTime
  do Report
  do Commit-Transaction
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term

end-report

!*********************************************************************
Begin-Procedure Init-Report
!*********************************************************************
#debug9 Show 'Init-Report'
 
  move 'GEXPY666' to $ReportID
  move 'Child Support Payment Interface' to $ReportTitle
  display $ReportTitle noline
  display '  ' noline

  let #write_rec1 = 0
  let $sep = chr(44)
  let $file_done = 'N' 
  let $summary = 'N'

  If $prcs_process_instance = ''
	let $Prcs_OprID = 'HRBATCH'
	let $Prcs_Run_Cntl_ID = 'gexpy666'
  End-If

  !ISDVVXK 01/09/2016 Begins
  Let $GEXXX937_State_Alias   = 'C.STATE'
  !ISDVVXK 01/09/2016 Ends
  #debug9 show 'Doing Process-Scheduler-Run-Controls'
  do Process-Scheduler-Run-Controls
End-Procedure


!*********************************************************************
BEGIN-HEADING 9
!*********************************************************************
#debug9 Show 'Begin-Heading'

  #include 'stdhdg01.sqc'

 if $summary = 'N'
  do Print-co-subheading

  print 'Paygroup'          (+2,6,12)
  print 'Last Name'         (,16,18)
  print 'First Name'        (,36,22)
  print 'SSN'               (,58,9)                           
  print 'Case ID'           (,74,16)
  print 'Payment'           (,96)
  print 'Fee(Co)'	    (,110)	
  print 'Total'		    (,122)
  print '--------'          (+1,6)
  print '--------'          (,16)
  print '----------'        (,36)
  print '---'               (,58)
  print '----------------'  (,74)
  print '------'            (,96)
  print '------'            (,110)
  print '------'            (,122)

else
	print 'Summary Info ' (+2,1)  center
	print 'Business Unit' (+2,1)
	print 'Account'	      (,15)
	print 'Department'    (,24)
	print 'Product Code'  (,38)
	print 'Payment'       (,52)
	print 'Fee(Co)'       (,62)
	print 'Total'	      (,73)
	print '-------------' (+1,1)
	print '-------'       (,15)
	print '----------'    (,24)
	print '------------'  (,38)
	print '-------'       (,52)
	print '-------'       (,62)
	print '-------'       (,73)

end-if

END-HEADING

!*********************************************************************
Begin-Procedure Process-Scheduler-Run-Controls
!*********************************************************************
#debug9 Show 'Process-Scheduler-Run-Controls'

 #debug9 show 'Doing GEXXX922-Select-Parameters'
  Do GEXXX922-Select-Parameters
  Do GEXXX937-Select-State-Parameters !ISDVVXK 01/09/2017

  Let $pay_end_dt = $GEX_RC_PAY.Pay_End_Dt

  If $pay_end_dt = ''
    do Select-Pay-End-Dt
  End-If

  Display 'Pay End Date:  ' Noline
  Display $pay_end_dt

End-Procedure


!*************************************************** 
begin-procedure Report
!*************************************************** 

date-time () hh:mi:ss &timeBegan
display 'Report Began: ' noline
display &timeBegan

 move 'N' to $Errorfound

  date-time () MMDDYYYY &curr_date
  move &curr_date to $curr_date

 #debug9 show 'Doing Drop-Temp-Table' 
 do Drop-Temp-Table

 #debug9 show 'Doing Create-Temp-Table' 
 do Create-Temp-Table

 #debug9 show 'Doing Process-Data'
 do Process-Data

 #debug9 show 'Doing Summary-Info'
 new-page
 let $summary = 'Y'
 do Summary-Info

  date-time () hh:mi:ss &timeProcess
  display #InputTran 99999 noline
  display ' Transactions Processed: ' noline
  display &timeProcess

end-procedure


!****************************************** 
begin-procedure Drop-Temp-Table
!****************************************** 
begin-sql
drop table PS_GEXPY666
end-sql
end-procedure


!****************************************** 
begin-procedure Create-Temp-Table
!****************************************** 
begin-sql
create table PS_GEXPY666
(
	BUSINESS_UNIT     VARCHAR2(5) NOT NULL,
	DEPARTMENT        VARCHAR2(10) NOT NULL,
	ACCOUNT		  VARCHAR2(25) NOT NULL,
	DEDUCT_GARN_AMT   NUMBER(10,2) NOT NULL,
	DEDUCT_CMPNY_FEE  NUMBER(10,2) NOT NULL
)
end-sql
end-procedure 


!****************************************** 
begin-procedure Create-CSV-File
!****************************************** 
#debug9 Show 'Create-CSV-File'

 ! let $filename1 = '\\nt4\common\Common\PYRL\ExpertPay\'|| $Cmp_Prefix || '_' || $curr_date || '.csv'     
 let $filename1 = '{OUTFILE}' || $Cmp_Prefix || '_' || $curr_date || '.txt'  
! let $filename1 = 'c:\isdvdxs\'|| $Cmp_Prefix || '_' || $curr_date || '.csv'	! DXS


!let $filename1 = 'c:\temp\gexpy666.txt'		!vendtkk
  show $filename1
open $filename1 as 1 for-writing record=265

if #writestat != 0
   show 'Error Opening output file ' $filename1 ' Program terminating.'
   stop
end-if

 #debug9 show 'Doing Write-Header-Rec'
do Write-Header-Rec

end-procedure 


!****************************************** 
begin-procedure Process-Data
!******************************************

display 'Begin Process-Data'
 show '$GEXXX937_Exclude_State_Criteria :' $GEXXX937_Exclude_State_Criteria

move 'N' to $rowfound

let #inputtran = 0
let #tl_deduct_garn_amt = 0

move 'Y' to $firstRec
move 'N' to $lastRec

begin-select ON-ERROR=SQL-Error-Found('Process-data')

B.COMPANY   () on-break level=1 print=never skiplines=2 procedure=Co-Total
   if $firstRec = 'Y'
      move &B.company to $saveco
      #debug9 show 'First Rec ' 
      if &B.company <= '999'
	let $Cmp_Prefix = 'IND'
      else
	let $Cmp_Prefix = 'CORP'
      end-if
      #debug9 show 'Doing Create-CSV-File'
      do Create-CSV-File
      move 'N' to $firstRec
   end-if
   
B.PAYGROUP
  move &B.paygroup   to $paygroup
B.EMPLID              
  move &B.emplid     to $emplid
B.PAY_END_DT          
  move &B.pay_end_dt to $pay_end_dt
C.COURT_DOC_ID      
  move &C.court_doc_id to $court_doc_id
C.STATE		() on-break level=2 print=never skiplines=2 procedure=State-Total
  move &C.STATE to $state
PD.LAST_NAME
  move &PD.LAST_NAME to $LastName
PD.FIRST_NAME
  move &PD.FIRST_NAME to $FirstName
SUM(D.DEDUCT_GARN_AMT)    &D.deduct_garn_amt              
  move &D.deduct_garn_amt to #d_deduct_garn_amt          !use to keep running total
SUM(D.DEDUCT_CMPNY_FEE)	  &d.deduct_cmpny_fee
  move &d.deduct_cmpny_fee to #deduct_cmpny_fee	
! DXS, new addition 
a.gl_liability	&account
	move &account to $account
e.department	&department
	move &department to $department
DECODE(e.gex_bus_unit_ap,' ',e.business_unit,e.gex_bus_unit_ap)	&business_unit
	move &business_unit to $business_unit


! #debug9 show 'Doing Rotate-Name'
!  do Rotate-Name      !returned as 3 sep fields ($LastName $FirstName $MidInitial)

 #debug9 show 'Doing Remove-Special-Chars'
  do Remove-Special-Chars 

  #ifdef debug8 
	show '&B.EMPLID ' &B.EMPLID 
  #end-if

  move 'Y' to $rowfound
  add 1 to #inputtran
  
  let #sumded_garn_amt = 0
  move #d_deduct_garn_amt to #sumded_garn_amt
       
  #debug8 show '#sumded_garn_amt ' #sumded_garn_amt

  #debug9 show 'Doing Write-Detail-Rec'
  do Write-Detail-Rec

  let #empl_total = #d_deduct_garn_amt + #deduct_cmpny_fee

  #debug8 show '#deduct_cmpny_fee ' #deduct_cmpny_fee
  #debug8 show '#empl_total  ' #empl_total 

  #debug9 show 'Doing Print-Report'
  do Print-Report

  #debug9 show 'Doing Insert-Temp-Table'
  do Insert-Temp-Table

  add #sumded_garn_amt to #co_total_garn_amt
  add #deduct_cmpny_fee to #co_total_fee
  add #empl_total to #co_total_empl

  add #sumded_garn_amt to #st_total_garn_amt
  add #deduct_cmpny_fee to #st_total_fee
  add #empl_total to #st_total_empl

  #debug8 show '#st_total_garn_amt ' #st_total_garn_amt
  #debug8 show '#st_total_fee ' #st_total_fee
  #debug8 show '#st_total_empl ' #st_total_empl

  #debug8 show '#co_total_garn_amt ' #co_total_garn_amt
  #debug8 show '#co_total_fee ' #co_total_fee
  #debug8 show '#co_total_empl ' #co_total_empl


FROM 	PS_PAY_CHECK B, 
	PS_GARN_SPEC C,
	PS_PAY_GARNISH D,
        PS_PERSONAL_DATA PD,
	PS_DEDUCTION_CLASS A,
	PS_GEX_DEPT_TBL e
WHERE B.PAYCHECK_NBR <> 0
AND   B.PAY_END_DT = $pay_end_dt
AND   B.PAYCHECK_STATUS in ('F','A','R')     !  F=Confirmed, A=Adjusted, R=Reversed
AND   C.COMPANY = B.COMPANY
AND   C.EMPLID =  B.EMPLID
AND   PD.EMPLID = B.EMPLID
AND   D.COMPANY = B.COMPANY
AND   D.PAYGROUP = B.PAYGROUP
AND   D.OFF_CYCLE = B.OFF_CYCLE 
AND   D.PAGE_NUM = B.PAGE_NUM
AND   D.LINE_NUM = B.LINE_NUM
AND   D.SEPCHK = B.SEPCHK
AND   D.GARNID = C.GARNID
AND   D.PAY_END_DT = B.PAY_END_DT
! AND   D.DEDUCT_GARN_AMT > 0                 !do not include if negative amt (adjustment)
AND   C.GARN_TYPE = 'C'			! Child Support
! and c.company in ('005','GEI')
! DXS, new addition 
AND a.dedcd = d.dedcd
AND a.ded_class = d.ded_class
AND e.setid = 'COMMN'
AND e.deptid = b.deptid
AND e.effdt = (SELECT MAX(e1.effdt)
		   FROM ps_gex_dept_tbl e1
		   WHERE e1.setid = e.setid
		   AND e1.deptid = e.deptid
		   AND e1.effdt <= $pay_end_dt)
AND e.sequence_number = (SELECT MAX(e2.sequence_number)
	   		   FROM ps_gex_dept_tbl e2
			   WHERE e2.setid = e.setid
			   AND e2.deptid = e.deptid
			   AND e2.effdt = e.effdt)
And   [$GEXXX937_Exclude_State_Criteria]	!ISDVVXK 01/09/2017	
GROUP BY B.COMPANY, B.PAYGROUP, B.EMPLID, B.PAY_END_DT, C.COURT_DOC_ID, C.STATE, PD.LAST_NAME,PD.FIRST_NAME,
a.gl_liability, e.department, DECODE(e.gex_bus_unit_ap,' ',e.business_unit,e.gex_bus_unit_ap)
having SUM(D.DEDUCT_GARN_AMT) > 0		! DXS, 04/16/07. Added this condition, to not select -ve and zero dollar values
ORDER BY B.COMPANY, C.STATE, B.PAYGROUP, PD.LAST_NAME, PD.FIRST_NAME
end-select

if $rowfound = 'N'
   display 'No Employees found for the Child support Interface'
   print 'No Employees found for Payroll Child support Interface'  (+1,5)
else
   move 'Y' to $lastRec
   #debug8 show '$lastRec ' $lastRec
   #debug9 show 'Doing Co-Total'
   do Co-Total
   do Write-Trailer-Rec   

   #debug9 show 'Doing Print-report-totals'
   do Print-report-totals

   display 'File(s) created for Payroll Child Interface'

   close 1
end-if


end-procedure


!*******************************************
begin-procedure Write-Header-Rec
!*******************************************
#debug9 Show 'Write-Header-Rec'

 move 'H' to $rec_type              
 if $Cmp_Prefix = 'IND'
      let $profile = 'INDEPENDENT'
 else
      let $profile = 'CORPORATE'
 end-if 
 ! move 'Expert Pay' to $profile
 move 'CSV' to $format

 write 1 from  $rec_type:1        !col 1-1     rectype
	       $sep:1
               $profile:50	  !col 2-50    profile
               $sep:1 
	       $format:3	
	       $sep:1
            
end-procedure


!************************************************
begin-procedure Write-Detail-Rec
!************************************************
#debug9 Show 'Write-Detail-Rec'

  add 1 to #write_rec1             ! count of detail rows in each file

  #debug8 show '#sumded_garn_amt ' #sumded_garn_amt 
  #debug8 show '#tl_deduct_garn_amt ' #tl_deduct_garn_amt

  add #sumded_garn_amt to #tl_deduct_garn_amt		! trailer row sum amount in each file
  add #sumded_garn_amt to #t2_deduct_garn_amt		! grand total

  #debug8 show 'After #tl_deduct_garn_amt ' #tl_deduct_garn_amt
  #debug8 show 'After #t2_deduct_garn_amt ' #t2_deduct_garn_amt

  move 'D'            to $rec_type
  move #sumded_garn_amt to $deduct_garn_amt  0000009.99		! detail record line item amount

  #debug8 show '$deduct_garn_amt ' $deduct_garn_amt  

  let $Dollars = Substr($deduct_garn_amt,1,7)              !  no decimal point  
  let $Cents = Substr($deduct_garn_amt,9,2)
  let $format_garn_amt = $Dollars || $Cents
  
  let $county = '00000'				! DXS, hard-coded values 
  let $med_indicator = '1'	! DXS, hard-coded values 
  let $emp_indicator = '1'	! DXS, hard-coded values 

  #debug8 show '<' $court_doc_id  '><' $emplid '>'
  
   
   do Get-Emp-Ssn ($emplid, $Ssn_Out)      !VENDTKK 09-03-2007  ITG-42074
   
    
  write 1 from $rec_type:1
	       $sep:1
	       $state:2
	       $sep:1
	       $court_doc_id:20
	       $sep:1
               $county:5
	       $sep:1
	       $Ssn_Out:9         !VENDTKK 09-03-2007  ITG-42074
              ! $emplid:9	
	       $sep:1
	       $FirstName:20
	       $sep:1
       	       $LastName:20
	       $sep:1
	       $format_garn_amt:10
	       $sep:1
	       $med_indicator:01
	       $sep:1
	       $emp_indicator:01
	       $sep:1

end-procedure


!***********************************************
begin-procedure Write-Trailer-Rec
!***********************************************
#debug9 Show 'Write-Trailer-Rec'

 move  #tl_deduct_garn_amt to  $tl_deduct_garn_amt   0000000099999
 move  #write_rec1 to  $write_rec1   09999

  #debug8  show '#tl_deduct_garn_amt ' #tl_deduct_garn_amt

  move #tl_deduct_garn_amt to $tl_deduct_garn_amt 0000000009.99   !format to 2 decimals     
  
  #debug8 show '$tl_deduct_garn_amt  ' $tl_deduct_garn_amt 

  let $Tl_Dollars = Substr($tl_deduct_garn_amt,1,10)     ! format garn amt so that there is  
  let $Tl_Cents = Substr($tl_deduct_garn_amt,12,2)       ! no decimal point
  let $format_tl_garn_amt = $Tl_Dollars || $Tl_Cents   
 
  #debug8 show '$format_tl_garn_amt ' $format_tl_garn_amt 

 move 'T'            to $rec_type

 write 1 from  $rec_type:1
	       $sep:1
	       $write_rec1:5
	       $sep:1
	       $format_tl_garn_amt:12
	       $sep:1

 move #write_rec1 to #corp_count 
 move #tl_deduct_garn_amt to #corp_amt

 end-procedure


!*******************************************
begin-procedure Print-co-subheading
!*******************************************
#debug9 Show 'Print-co-subheading'

  do Get-Co-Name
  Print 'Company:  '    (+2,1)
  Print $SaveCo		()
  print $co.descr       (0,+3)                    

  #debug8 show '$SaveCo ' $SaveCo
  #debug8 show '$co.descr ' $co.descr

end-procedure


!************************************************ 
begin-procedure Get-Co-Name 
!************************************************
#debug9 Show 'Get-Co-Name' 
begin-SELECT
CO.DESCR
  move &CO.DESCR to $co.descr

FROM PS_COMPANY_TBL CO
WHERE 	CO.COMPANY = $SaveCo
AND CO.EFF_STATUS = 'A'
AND CO.EFFDT = (SELECT MAX(CO_ED.EFFDT)
                 FROM   PS_COMPANY_TBL CO_ED
                 WHERE  CO_ED.COMPANY = CO.COMPANY
		  AND  EFFDT  <= $pay_end_dt)
end-SELECT
end-procedure
 

!*******************************************
begin-procedure Print-report 
!*******************************************
#debug9 Show 'Print-report' 

do Get-Emp-Ssn ($emplid, $Ssn_Out)      !VENDTKK 09-03-2007  ITG-42074
  Print $Paygroup                     (+1,6,3)
  Print $LastName                     (,16,18) 
  Print $FirstName                    (,36,22)
  !Print $emplid	              (,58,9)	vendtkk
  Print $Ssn_Out                      (,58,9)    !VENDTKK 09-03-2007  ITG-42074
  Print $court_doc_id                 (,74,10) 
  Print #sumded_garn_amt              (,94)     Edit 9,999.99
  print #deduct_cmpny_fee	      (,110)    Edit 999.99
  print #empl_total		      (,120)    Edit 9,999.99

end-procedure


!*******************************************
begin-procedure State-Total
!*******************************************

  Print 'Total for State   :  '               (+1,1)
  print $state                       (,22)
  Print #st_total_garn_amt           (,93)   Edit 99,999.99
  Print #st_total_fee		     (,110)  Edit 999.99
  Print #st_total_empl		     (,119)  Edit 99,999.99

	let #st_total_garn_amt = 0
	let #st_total_fee = 0
	let #st_total_empl = 0

end-procedure


!*******************************************
begin-procedure Co-Total
!*******************************************
#debug9 Show 'Doing State-Total before Co-Total' 

	do State-Total

#debug9 Show 'Co-Total' 

  Print 'Total for Company :  '               (+1,1)
  print $saveco                      (,22)
  Print #co_total_garn_amt           (,93)   Edit 99,999.99
  Print #co_total_fee		     (,110)  Edit 999.99
  Print #co_total_empl		     (,119)  Edit 99,999.99

  if $lastRec = 'N'                 !if $lastRec='Y', do not print subheading for next co.
	
	  ! Start of next Company 
	  #debug9 show 'Start of next Company, Doing new-page '
	  #debug8 show '&B.company ' &B.company 
	  #debug8 show '$saveco ' $saveco	
	  new-page
	  let #co_total_garn_amt = 0
	  let #co_total_fee = 0
	  let #co_total_empl = 0
	  move &B.company to $saveco
	
	  if &B.company > '999' and $file_done = 'N' 
		! Write trailer row before closing the file.  
	  	#debug9 Show 'Doing Write-Trailer-Rec'
	  	do Write-Trailer-Rec

		let #ind_count = #write_rec1
	  	let #ind_amt = #tl_deduct_garn_amt 
	  	
		let #write_rec1 = 0
	  	let #tl_deduct_garn_amt = 0
	  	close 1
	
		let $Cmp_Prefix = 'CORP'
		do Create-CSV-File
		let $file_done = 'Y' 
	  end-if
  
	  #debug8 show '&B.company ' &B.company 
	  #debug8 show '$saveco ' $saveco
	 
  end-if  
    
end-procedure

 
!*******************************************
begin-procedure Print-report-totals
!*******************************************
#debug9 Show 'Print-report-totals'

  Print '********  Report Totals  ********* '     (+4,10)

  Print 'INDEP Count : ' (+2,10) 
  Print #ind_count	 (,35) 	Edit 999,999
  Print 'INDEP Amt : '	(+1,10) 	
  Print #ind_amt	(,28) 	Edit 999,999,999.99

  Print 'CORP Count : ' (+2,10) 
  Print #corp_count 	 (,35) 	Edit 999,999
  Print 'CORP Amt : '	(+1,10) 	
  Print #corp_amt	(,28) 	Edit 999,999,999.99
	 
  Print 'Total Count : '	(+2,10) 
  Print #InputTran              (,35)    Edit 999,999
  Print 'Total Amt : '          (+1,10)  
  Print #t2_deduct_garn_amt     (,28)    Edit 999,999,999.99

  
end-procedure


!******************************************
begin-procedure Select-Pay-End-Dt
!******************************************
#debug9 Show 'Select-Pay-End-Dt'

begin-select
MAX(PC.pay_end_dt) &pay_end_dt

	move &pay_end_dt to $pay_end_dt

FROM ps_pay_calendar pc
WHERE pc.pay_confirm_run = 'Y' 
AND pc.pay_end_dt <= SYSDATE 
end-select

display 'selecting max pay_end_dt =  ' noline
display $pay_end_dt

end-procedure


!*********************************************************************
!Displays the error messages and stops execution
!*********************************************************************
 
begin-procedure SQL-Error-Found($Proc_Name) 

  display 'SQL Error in  ' noline 
  display $Proc_Name 
  display $_sql-error
  display 'sql-status: ' noline 
  display #_sql-status 

  STOP

end-procedure


!************************************************************************
!Removes commas, periods in the LastName and FirstName 
!************************************************************************
begin-procedure Remove-Special-Chars
	#debug8 show 'Before $LastName ' $LastName
	#debug8 show 'Before $FirstName ' $FirstName

unstring $FirstName by ',' into $first $second $third
let $FirstName = $first || ' ' || $second || ' ' || $third
unstring $FirstName by '.' into $first $second $third
let $FirstName = $first || ' ' || $second || ' ' || $third

unstring $LastName by ',' into $first $second $third
let $LastName = $first || ' ' || $second || ' ' || $third
unstring $LastName by '.' into $first $second $third
let $LastName = $first || ' ' || $second || ' ' || $third

	#debug8 show 'After $LastName ' $LastName
	#debug8 show 'After $FirstName ' $FirstName

end-procedure 


!*********************************
begin-procedure Insert-Temp-Table
!*********************************
begin-sql
insert into PS_GEXPY666
(business_unit,
department,
account,
deduct_garn_amt,
deduct_cmpny_fee)
values
($business_unit,
$department,
$account,
#d_deduct_garn_amt,
#deduct_cmpny_fee
)
end-sql
end-procedure 


!*********************************
begin-procedure Summary-Info
!*********************************
begin-select
tmp.business_unit
tmp.department
tmp.account
sum(tmp.deduct_garn_amt)	&tmp.deduct_garn_amt
sum(tmp.deduct_cmpny_fee)	&tmp.deduct_cmpny_fee

	move &tmp.business_unit	to $business_unit
	move &tmp.department	to $department
	move &tmp.account	to $account
	move &tmp.deduct_garn_amt to #deduct_garn_amt
	move &tmp.deduct_cmpny_fee to #deduct_cmpny_fee
	let #sum_total = #deduct_garn_amt + #deduct_cmpny_fee
	
	#debug9 show 'Doing Print-Summary'
	do Print-Summary

from PS_GEXPY666 tmp
group by tmp.business_unit, tmp.department, tmp.account
end-select
end-procedure 


!*********************************
begin-procedure Print-Summary
!*********************************
	print $business_unit	(+1,1)
	print $account		(,15)
	print $department	(,24)
	print '0000'             (,38)
	print #deduct_garn_amt   (,52)     Edit 9,999.99
	print #deduct_cmpny_fee  (,62)     Edit 999.99
	print #sum_total 	 (,73)	   Edit 9,999.99

end-procedure 

#Include 'gexxx922.sqc'  !Get gex_rc_pay run controls
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
#Include 'rotname3.sqc'  !Routines to rotate name
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'getgeid.sqc'	 !Get 7 digit Emplid  vendtkk
#Include 'gexxx937.sqc'  !Get state multiple row table  	!ISDVVXK 01/09/2017