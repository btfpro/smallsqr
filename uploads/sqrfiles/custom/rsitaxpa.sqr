!***********************************************************************
! RSITAXPA:   Create PA Act 32 EIC Reports for Selected Tax Agencies   *
!***********************************************************************
!***********************************************************************
! Rimini Street Modification Log                                       *
!                                                                      *
!  04/12/2011 RSI-HCM102120  v1.0                                      *
!  Descr: Create new PA Act 32 EIC Reporting Program                   *
!                                                                      *
!  05/20/2011 RSI-HCM102210  v1.1                                      *
!  Descr: Modified to allow Batch Mode processing functionality.       *
!                                                                      *
!  07/19/2011 RSI-HCM102195  v2.0                                      *
!  Descr: Modify PA Act 32 EIC Reporting Program to add Annual and     *
!         Monthly reporting functionality. Also, added CENTAX tax      *
!         collection district reporting. Removed State Wages/Taxes.    *
!                                                                      *
!  08/23/2011 RSI-HCM102318  v2.1                                      *
!  Descr: Modified to suppress Error Reporting functionality during    *
!         Staging table load until all Tax Reporting Agencies are      *
!         setup.                                                       *
!                                                                      *
!  11/01/2011 RSI-HCM102370  v2.2                                      *
!  Descr: Modified to add functionality for Jordan Tax Collection      *
!         Agency.                                                      *
!                                                                      *
!  02/08/2012 RSI-HCM102601  v3.0                                      *
!  Descr: Modified to:                                                 *
!         - Correct Reprocessing functionality and add the Error path  *
!           when the Maximum Error threshold has been met.             *
!         - Corrected PSD code functionality for clients who use the   *
!           PSD Code for the Locality code.                            *
!         - Modified code to dynamically use table driven record       *
!           layout instead of hard-coded Agency driven record layouts. *
!                                                                      *
!  03/25/2012 RSI-HCM102758  v3.1                                      *
!  Descr: Modified to:                                                 *
!         - Enabled functionality.                                     *
!         - Modified to produce combined tcd files for specific        *
!           agencies.                                                  *
!         - Other corrections as necessary                             *
!                                                                      *
!  04/13/2012 RSI-HCM102797  v3.2                                      *
!  Descr: Modified to:                                                 *
!         - Enhance out of state reporting.                            *
!         - Enhance message log.                                       *
!         - Enhance error log messages.                                *
!         - Enhance Location street addresses on file.                 *
!                                                                      *
!  06/13/2012 RSI-HCM102815  v4.0                                      *
!  Descr: Modified to:                                                 *
!         - More accurately report teleworker and work site addresses. *
!         - Ensure no spaces at end of file names.                     *
!         - Report out of state courtesy withholding to correct Agency.*
!         - Expanded error processing.                                 *
!         - Added Batch-Mode capability.                               *
!                                                                      *
!  10/26/2012 RSI-HCM103057  v4.01                                     *
!  Descr: Modified to:                                                 *
!         - Correct Agency with no data file creation.                 *
!                                                                      *
!  10/27/2012 RSI-HCM103022  v4.1                                      *
!  Descr: Modified to:                                                 *
!         - Add error message for invalid Res and Work PSD Codes.      *
!         - Reduced data processed to only include Agencies on the run *
!           control page.                                              *
!         - Removed unnecessary code.                                  *
!         - Miscellaneous program flow improvements and code cleanup.  *
!                                                                      *
!  10/30/2012 RSI-HCM102694  v4.2                                      *
!  Descr: Modified to:                                                 *
!         - Add error message if program is run using Recon Rpt Parms. *
!                                                                      *
!  01/18/2013 RSI-HCM103247  v4.3                                      *
!  Descr: Modified to:                                                 *
!         - Corrected Taxable Gross and Tax when multiple checks are   *
!           issued on the same date                                    *
!         - Updated Program Version                                    *
!                                                                      *
!  02/15/2013 RSI-HCM103196  v4.4                                      *
!  Descr: Modified to:                                                 *
!         - Only include active Localities from the run control page   *
!           and skip Philadelphia Locality when validating Localities. *
!         - Improve accuracy of reporting adjusted checks.             *
!         - Remove unnecessary code and/or procedures.                 *
!         - Improved debugging procedures.                             *
!                                                                      *
!  04/15/2013 RSI-HCM103309  v4.5                                      *
!  Descr: Modified to:                                                 *
!         - Use CHECK_DT from PAY_CALENDAR instead on PAY_CHECK        *
!           to more accurately report check reversals.                 *
!                                                                      *
!  07/15/2013 RSI-HCM103325  v5.1                                      *
!  Descr: Modified to:                                                 *
!         - Annual Reporting File Changes : Keystone ; Jordon ;        *
!           Berkheimer                                                 *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   ! Set Environment
#include 'rsicdver.sqc' ! Client Specific PeopleSoft Application Information
#include 'setup32.sqc'  ! Printer and Page-Size Initialization
#include 'usarpt.sqc'   ! USA-specific variables

!***********************************************************************
! Procedure Setup
!***********************************************************************
Begin-Setup

  #Define Prgm_Ver       '5.1'   !Corresponds to Modification History above.
  #Define Max_Rows       1500
  #Define Max_Fields     50
  #Define Max_Records    500
  #Define Page_Max_Lines 770
  #Define Page_Max_Cols  82
  #Define ImgWidth       80
  #Define ImgHeight      730
  #Define SpacesForRows  35.6
  #Define Dyn-S          [
  #Define Dyn-E          ]

  #If {sqr-platform} = mvs
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

  #If {sqr-platform} = as400
      #Define Dyn-S \
      #Define Dyn-E \
  #EndIf

  Declare-Report PRINTERRORS
    layout       = DEFAULT
    printer-type = HP
  End-Declare

  Declare-Report PRINTFORMS
    layout       = FORMS
    printer-type = HP
  End-Declare

  Declare-Layout FORMS
    paper-size  = (8.5,11)
    orientation = portrait
    left-margin = 0.1
    line-height = 1
    max-lines   = {Page_Max_Lines}
    max-columns = {Page_Max_Cols}
  End-Declare

  create-array
    name  = RECORD_TYPES
    size  = {Max_Rows}
    field = RSI_RECORD_TYPE:char
    field = RSI_RECORD_NAME:char
    field = COLUMNNUM:number:2
    field = RSI_VARIABLE_NAME:char
    field = RSI_START_POS:number:3
    field = RSI_END_POS:number:3
    field = RSI_LENGTH:number:3
    field = RSI_FILL_VALUE:char
    field = RSI_FILL_SIDE:char
    field = RSI_CASE:char
    field = RSI_JUSTIFY:char
    field = RSI_FILE_TYPE:char

  create-array
    name  = FILE_FIELDS
    size  = {Max_Fields}
    field = FIELDNAME:char
    field = FIELDVALUE:char

  create-array
    name  = RECORD_MAPPING
    size  = {Max_Records}
    field = RSI_RPTG_AGENCY:char
    field = RSI_RECORD_TYPE:char
    field = RSI_RECORD_NAME:char
    field = RSI_LENGTH:number:3
    field = RSI_FILE_EXTENSION:char
    field = RSI_FILE_OVERRIDE:char
    field = RSI_FILE_TYPE:char
    field = RSI_IMAGE_NAME:char

  create-array
    name  = PAYCHECK_DATA
    size  = {Max_Records}
    field = LD_RSI_RPTG_AGENCY:char
    field = LD_COMPANY:char
    field = LD_WORKPSDCODE:char
    field = LD_WRK_ADDRESS1:char
    field = LD_WRK_ADDRESS2:char
    field = LD_WRK_POSTAL:char
    field = LD_RESPSDCODE:char
    field = LD_RES_ADDRESS1:char
    field = LD_RES_ADDRESS2:char
    field = LD_RES_POSTAL:char
    field = LD_LOCALITY:char
    field = LD_TCDPSDCODE:char
    field = LD_EMPLOYER_ID_LWT:char
    field = Ld_Tax_Gross:number:11
    field = Ld_Tax_Curr:number:11
    field = LD_WRK_CITY:char
    field = LD_WRK_COUNTY:char
    field = LD_WRK_STATE:char
    field = LD_RES_CITY:char
    field = LD_RES_STATE:char

  create-array
    name  = DES_AGENCY
    size  = {Max_Records}
    field = SELECTED_COMPANY:char
    field = RSI_RPTG_AGENCY:char

  create-array
    name  = SORT_SWAP
    size  = {Max_Rows}
    field = N:number
    field = J:number

!  #Define DebugA
!  #Define DebugB
!  #Define DebugC
!  #Define DebugD
!  #Define DebugE
!  #Define DebugF
!  #Define DebugG

End-Setup

!***********************************************************************
! Procedure Program
!***********************************************************************
Begin-Program

  Show 'RSITAXPA.SQR - Version ' {Prgm_Ver}
  Show '**************************************************'
  Show 'Creating PA Act 32 EIT Files for Selected Agencies'

  let $Start = datenow()
  Show 'Report Started at : ' $Start
  Show ''

  do Init-Report

  If $prcs_process_instance <> ''
     do Get-Rptg-Mode
  Else

     input $Prcs_OprID batch-mode
     input $Prcs_Run_Cntl_ID batch-mode

     If $Prcs_OprID = '' and $Prcs_Run_Cntl_ID = ''
        Show ''
        Show 'Report requires Operator ID and Run Control ID used on the Run Control Records to run.'
        Show ''
        STOP
     Else
        do Get-Rptg-Mode
     End-If
  End-If

  Show $ReportDescr
  do Clear-Variables
  do Get-Localities              ! Validate Locality in the Staging Table exists in PS_LOCATION_TBL
  do Validate-Transmitter-Co     ! Validate Transmitter Company Data
  do Get-Transmitter-Data        ! Get Transmitter Contact Information
  do Get-Agency-Parameters       ! Get Run Control Parms to Process by Agency
  do Remove-Unreported-Rows      ! Remove unreported rows from TAXPA Data Staging Table

  If $Create_File = 'N'
     move #Balance_Period to $Del_Bal_Period  09
     let $Del_Bal_Period = ltrim($Del_Bal_Period,'0')
     let $Delete_Where_Clause = ' WHERE BALANCE_YEAR           = ' || $Balance_Year   || ' '
                             || '   AND BALANCE_PERIOD         = ' || $Del_Bal_Period || ' '
                             || '   AND RPTG_PERIOD            = ''' || $Rptg_Period  || ''' '
                             || '   AND SAVE_ROW              <> ''F'' '
                             || '   AND RSI_MIN_WORK_FLAG NOT IN (''I'',''U'') '
     do Delete-Staging-Table-Data
  End-If

  If $Errors_Found = 'Y'
     do Error-Log
     Show ''
       let $End = datenow()
     Show 'Report Ended at : ' $End
     do Commit-Transaction
     STOP quiet                  ! Errors Found. Show Error in Process Monitor
  Else
     Show ''
     let $End = datenow()
     Show 'Report Ended at : ' $End
     do Stdapi-Term              ! End of Job Processing
  End-If

End-Program

!***********************************************************************
! Procedure Init-Report
!***********************************************************************
Begin-Procedure Init-Report

  do Set-DB
  do Init-DateTime
  do Init-Number
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Get-Tax-Reporting-Run-Controls
  do Initialization
  do Get-Output-File-Path
  do Get-Image-Path

End-Procedure Init-Report

!***********************************************************************
! Procedure Set-DB
!***********************************************************************
Begin-Procedure Set-DB

    #IfDef DB2ALL
       #Define DB2
    #EndIf
    #IfDef DB2UNIX
       #Define DB2
    #EndIf
    #IfDef DB2400
       #Define DB2
    #EndIf
    #IfDef DB2DDCS
       #Define DB2
    #EndIf

End-Procedure Set-DB

!***********************************************************************
! Procedure Initialization
!***********************************************************************
Begin-Procedure Initialization

  show 'Procedure = Initialization'      !ISDVMZA
  let $ReportID        = 'RSITAXPA'
  let $Errors_Found    = 'N'
  let #Max_Errors      = 50
  let $Max_Errors      = 'N'
  let #Page_Lines      = 54
  let $Print_Detail    = 'N'
  let $Rptg_Agency     = ''
  let $AddressType     = ''
  let $Des_Agency      = 'N'
  let $Co_Des_Agency   = 'N'
  let $Create_File     = 'N'
  let $StateCode       = '42'
  let $RecChngNotice   = '0'
  let $Get_Local_Ee_Data_Where_Clause1 = ''
  let $Get_Local_Ee_Data_Where_Clause2 = ''
  let $Get_Local_Ee_Data_Where_Clause3 = ''
  let $Get_Local_Ee_Data_Where_Clause4 = ''
  let $Run_Parms_Where_Clause          = ''
  let $Delete_Where_Clause             = ''
  let $Selected_Companies_Where_Clause = ''
  let $Fill  = ''
  let $Sp1 = ' '

  do Get-Current-DateTime

  move &TX.COMPANY    to $Company_Data
  move &TX.BALANCE_ID to $Bal_id

BEGIN-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
END-SELECT

End-Procedure Initialization

!***********************************************************************
! Procedure Get-Output-File-Path
!***********************************************************************
Begin-Procedure Get-Output-File-Path

  #IfDef RSI_TOOLS_8.4   ! 8.4 Tools Support
     let $FileOutputPath = '{IMPORTPREFIX}'
  #Else                  ! 8.2 and 7.5 Tools Support
     let $FileOutputPath = '{FILEPREFIX}'
  #EndIf

  let #PathLength = length($FileOutputPath)
  let $End_Char   = substr($FileOutputPath, #PathLength, 1)

  #IfDef NT
    If $End_Char <> '\'
       let $FolderSep = '\'
    Else
       let $FolderSep = ''
    End-If
  #EndIf

  #IfDef UNIX
    If $End_Char <> '/'
       let $FolderSep = '/'
    Else
       let $FolderSep = ''
    End-If
  #EndIf

  let $FileOutputPath = $FileOutputPath || $FolderSep

  #IfDef HAS
     do Get_OutPut_Location
     let $FileOutputPath = $g_file_path_out
  #EndIf

End-Procedure Get-Output-File-Path

!***********************************************************************
! Procedure Delete-Staging-Table-Data
!***********************************************************************
Begin-Procedure Delete-Staging-Table-Data

  show 'Procedure = Delete-Staging-Table-Data'      !ISDVMZA

BEGIN-SQL on-error=Ignore-SQL-Error
DELETE FROM PS_RSI_TAXPA_LD
{Dyn-S}$Delete_Where_Clause{Dyn-E}
END-SQL

End-Procedure Delete-Staging-Table-Data

!***********************************************************************
! Procedure Ignore-SQL-Error
!***********************************************************************
Begin-Procedure Ignore-SQL-Error

! Dummy procedure to avoid SQL error message on delete of empty table

End-Procedure Ignore-SQL-Error

!***********************************************************************
! Procedure Get-Rptg-Mode
!***********************************************************************
Begin-Procedure Get-Rptg-Mode

  show 'Procedure = Get-Rptg-Mode'      !ISDVMZA

BEGIN-SELECT
FF.RPTG_PERIOD           &FF.RPTG_PERIOD
FF.BALANCE_YEAR          &FF.BALANCE_YEAR
FF.BALANCE_PERIOD        &FF.BALANCE_PERIOD
FF.REPROCESS             &FF.REPROCESS
FF.REG_SELECT_COMP       &FF.REG_SELECT_COMP
FF.RSI_RPTG_AGENCY       &FF.RSI_RPTG_AGENCY
FF.RSI_CREATE_FILE       &FF.RSI_CREATE_FILE
FF.RSI_RECON_RPT         &FF.RSI_RECON_RPT

  If &FF.RSI_RECON_RPT = 'Y'
     Show ''
     Show '*****************************************************************************************************'
     Show 'This program cannot be run when the Generate Reconciliation Report checkbox is checked on the Run'
     Show 'Control Page. Please return to the Process Scheduler Request page and select the RSITXPA2 - PA ACT 32'
     Show 'Reconciliation Report or uncheck the Generate Reconciliation Report checkbox and rerun this program.'
     Show '*****************************************************************************************************'
     Show ''
     Stop
  End-If

  move &FF.BALANCE_YEAR   to #Balance_Year
  move #Balance_Year      to $Balance_Year    9999
  move &FF.BALANCE_PERIOD to #Balance_Period
  move #Balance_Period    to $Where_Bal_Period  09

  let $Designated_Agency = rtrim(ltrim(&FF.RSI_RPTG_AGENCY, ' '), ' ')
  let $Sel_Company       = &FF.REG_SELECT_COMP
  let $Rptg_Period       = &FF.RPTG_PERIOD
  let $Reprocess         = &FF.REPROCESS
  let $Create_File       = &FF.RSI_CREATE_FILE
  let $TaxYear2          = substr($Balance_Year,3,2)

  let $Run_Parms_Where_Clause = 'WHERE BALANCE_YEAR   = ' || $Balance_Year   || ' '
                             || '  AND BALANCE_PERIOD = ' || $Where_Bal_Period || ' '
                             || '  AND RPTG_PERIOD    = ''' || $Rptg_Period  || ''''

  If $Designated_Agency <> ''
     let $Des_Agency = 'Y'
     let $Process_Agency_EE_Data_Where_Clause2 = ''
  Else
     let $Des_Agency = 'N'
     let $Process_Agency_EE_Data_Where_Clause2 = '  AND E.RSI_TCD_PSD_CODE =  ''' || $TcdPSDCode || ''''
  End-If

  do Process-Rptg-Period
  do Get-Period-End-Dt
  do Get-Period-Begin-Dt
  do Load-Tax-Collection-Agencies
  do Load-Tax-Collection-Agencies-From-Run-Control
  do Load-Employer-Ids
  do Load-PSD-Codes
  do Load-Record-Types-Array
  do Load-Agency-Record-Mapping-Array

  Evaluate $Sel_Company
    When = 'R'
      let $Selected_Companies_Where_Clause = ''

      If $Reprocess = 'Y'
         move #Balance_Period to $Del_Bal_Period  09
         let $Del_Bal_Period = ltrim($Del_Bal_Period,'0')
         let $Delete_Where_Clause = ' WHERE BALANCE_YEAR           = ' || $Balance_Year   || ' '
                                 || '   AND BALANCE_PERIOD         = ' || $Del_Bal_Period || ' '
                                 || '   AND RPTG_PERIOD            = ''' || $Rptg_Period  || ''' '
                                 || '   AND RSI_MIN_WORK_FLAG NOT IN (''I'',''U'') '
                                 || '   AND RSI_RPTG_AGENCY IN (SELECT FF1.W2_RPTG_AGENCY '
                                 || '                           FROM PS_RC_RSITAXPA FF1 '
                                 || '                           WHERE FF1.OPRID       = ''' || $Prcs_OprID  || ''' '
                                 || '                           AND FF1.RUN_CNTL_ID   = ''' || $Prcs_Run_Cntl_ID  || ''')'
         do Delete-Staging-Table-Data             ! Clear TAXPA File Staging Table for Run Control Parms
      End-If
      let $Get_Local_Ee_Data_Where_Clause4 = ''
      do Get-Ees-to-Process                       ! Load TAXPA Data to Staging Table
      Break
    When = 'C'
      do Load-Co-Des-Agency-Array
      do Get-Rptg-Companies                       ! Load TAXPA Data to Staging Table for Selected Rptg Companies
      Break
  End-Evaluate

FROM PS_RC_RSITAXPA_TBL FF
WHERE FF.OPRID       = $Prcs_OprID
  AND FF.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
END-SELECT

End-Procedure Get-Rptg-Mode

!***********************************************************************
! Procedure Process-Rptg-Period
!***********************************************************************
Begin-Procedure Process-Rptg-Period

  show 'Procedure = Process-Rptg-Period'      !ISDVMZA

  Evaluate $Rptg_Period
    When = 'A'
      let $Balance_Period = '12'
      let $Beg_Bal_Period = '01'
      let $Bal_Period_XA  = '13'
      let $Bal_Period_XB  = '5'
      let $Bal_Period_XC  = '4'
      let $TaxType        = 'W'
      let $Bal_Month      = 'SPACE'
      let $Period_Type    = 'Y'
      let $Period_Type_A  = ' '
      let $ReportDescr    = 'Annual Report for ' || $Balance_Year
      let $Process_Agency_EE_Data_Where_Clause1 = ' AND (E.TXGRS_YTD <> 0 OR E.TAX_YTD <> 0)'
      let $Get_Local_Ee_Data_Where_Clause1 = ' AND (EX.TXGRS_YTD <> 0 OR EX.TAX_YTD <> 0)'
      let $Get_Local_Ee_Data_Where_Clause2 = ' AND EX.BALANCE_QTR = (SELECT MAX(EX1.BALANCE_QTR) '
                                                                 || 'FROM PS_TAX_BALANCE EX1 '
                                                                 || 'WHERE EX.EMPLID       = EX1.EMPLID '
                                                                 || '  AND EX.COMPANY      = EX1.COMPANY '
                                                                 || '  AND EX.BALANCE_ID   = EX1.BALANCE_ID '
                                                                 || '  AND EX.BALANCE_YEAR = EX1.BALANCE_YEAR '
                                                                 || '  AND EX.STATE        = EX1.STATE '
                                                                 || '  AND EX.LOCALITY     = EX1.LOCALITY '
                                                                 || '  AND EX.TAX_CLASS    = EX1.TAX_CLASS)'
      let $Get_Local_Ee_Data_Where_Clause3 = ' AND EX.BALANCE_PERIOD = (SELECT MAX(EX1.BALANCE_PERIOD) '
                                                                    || 'FROM PS_TAX_BALANCE EX1 '
                                                                    || 'WHERE EX.EMPLID       = EX1.EMPLID '
                                                                    || '  AND EX.COMPANY      = EX1.COMPANY '
                                                                    || '  AND EX.BALANCE_ID   = EX1.BALANCE_ID '
                                                                    || '  AND EX.BALANCE_YEAR = EX1.BALANCE_YEAR '
                                                                    || '  AND EX.BALANCE_QTR  = EX1.BALANCE_QTR '
                                                                    || '  AND EX.STATE        = EX1.STATE '
                                                                    || '  AND EX.LOCALITY     = EX1.LOCALITY '
                                                                    || '  AND EX.TAX_CLASS    = EX1.TAX_CLASS)'
      Break
    When = 'Q'
      move #Balance_Period to $Balance_Period 9
      let $Bal_Period_XA    = $Balance_Period
      let $Bal_Period_XB    = $Balance_Period
      let $Bal_Period_XC    = $Balance_Period
      let $Period_Type      = 'Q'
      let $Period_Type_A    = 'Q'
      let $TaxType          = 'E'
      let $Bal_Month        = 'SPACE'

      Evaluate #Balance_Period
        When = 1
          let $Bal_Period_X = '1'
          let $Balance_Period = '03'
          let $Beg_Bal_Period = '01'
          let $ReportDescr = '1st Quarter ' || $Balance_Year
          Break
        When = 2
          let $Bal_Period_X = '2'
          let $Balance_Period = '06'
          let $Beg_Bal_Period = '04'
          let $ReportDescr = '2nd Quarter ' || $Balance_Year
          Break
        When = 3
          let $Bal_Period_X = '3'
          let $Balance_Period = '09'
          let $Beg_Bal_Period = '07'
          let $ReportDescr = '3rd Quarter ' || $Balance_Year
          Break
        When = 4
          let $Bal_Period_X = '4'
          let $Balance_Period = '12'
          let $Beg_Bal_Period = '10'
          let $ReportDescr = '4th Quarter ' || $Balance_Year
          Break
      End-Evaluate
      let $ReportDescr = 'Quarterly Report for ' || $ReportDescr
      let $Process_Agency_EE_Data_Where_Clause1 = ' AND (E.TXGRS_QTD <> 0 OR E.TAX_QTD <> 0)'
      let $Get_Local_Ee_Data_Where_Clause1 = ' AND (EX.TXGRS_QTD <> 0 OR EX.TAX_QTD <> 0)'
      let $Get_Local_Ee_Data_Where_Clause2 = ' AND EX.BALANCE_QTR = (SELECT EF.BALANCE_PERIOD '
                                                                    || 'FROM PS_RC_RSITAXPA_TBL EF '
                                                                    || 'WHERE EF.OPRID       = ''' || $Prcs_OprID  || ''''
                                                                    || '  AND EF.RUN_CNTL_ID = ''' || $Prcs_Run_Cntl_ID  || ''')'
      let $Get_Local_Ee_Data_Where_Clause3 = ' AND EX.BALANCE_PERIOD = (SELECT MAX(EX1.BALANCE_PERIOD) '
                                                                    || 'FROM PS_TAX_BALANCE EX1 '
                                                                    || 'WHERE EX.EMPLID       = EX1.EMPLID '
                                                                    || '  AND EX.COMPANY      = EX1.COMPANY '
                                                                    || '  AND EX.BALANCE_ID   = EX1.BALANCE_ID '
                                                                    || '  AND EX.BALANCE_YEAR = EX1.BALANCE_YEAR '
                                                                    || '  AND EX.BALANCE_QTR  = EX1.BALANCE_QTR '
                                                                    || '  AND EX.STATE        = EX1.STATE '
                                                                    || '  AND EX.LOCALITY     = EX1.LOCALITY '
                                                                    || '  AND EX.TAX_CLASS    = EX1.TAX_CLASS)'
      Break
    When = 'M'
      move #Balance_Period to $Balance_Period 99
      move #Balance_Period to $Bal_Month 99

      let $Bal_Period_XA  = $Balance_Period
      let $Beg_Bal_Period = $Balance_Period
      let $Period_Type    = 'M'
      let $Period_Type_A  = 'M'
      let $TaxType        = 'E'

      Evaluate #Balance_Period
        When = 1
        When = 2
        When = 3
          let $Bal_Period_XB = '1'
          Break
        When = 4
        When = 5
        When = 6
          let $Bal_Period_XB = '2'
          Break
        When = 7
        When = 8
        When = 9
          let $Bal_Period_XB = '3'
          Break
        When = 10
        When = 11
        When = 12
          let $Bal_Period_XB = '4'
          Break
      End-Evaluate

      let $Bal_Period_XC = $Bal_Period_XB

      do Get-Month
      let $ReportDescr = 'Monthly Report for ' || $Month || ' ' || $Balance_Year
      let $Process_Agency_EE_Data_Where_Clause1 = ' AND (E.TXGRS_MTD <> 0 OR E.TAX_MTD <> 0)'
      let $Get_Local_Ee_Data_Where_Clause1 = ' AND (EX.TXGRS_MTD <> 0 OR EX.TAX_MTD <> 0)'
      let $Get_Local_Ee_Data_Where_Clause2 = ' AND EX.BALANCE_PERIOD = (SELECT EF.BALANCE_PERIOD '
                                                                    || 'FROM PS_RC_RSITAXPA_TBL EF '
                                                                    || 'WHERE EF.OPRID       = ''' || $Prcs_OprID  || ''''
                                                                    || '  AND EF.RUN_CNTL_ID = ''' || $Prcs_Run_Cntl_ID  || ''')'
      let $Get_Local_Ee_Data_Where_Clause3 = ''
      Break
  End-Evaluate

End-Procedure Process-Rptg-Period

!***********************************************************************
! Procedure Get-Period-End-Dt
!***********************************************************************
Begin-Procedure Get-Period-End-Dt

  move #Balance_Year   to $Period_End_Date xxxx
  move $Balance_Period to $Period_End_Month 09
  concat $Period_End_Month with $Period_End_Date -xx-31

  Evaluate $Period_End_Month
    When = '02'
      Evaluate $TaxYear2
        When = '12'
        When = '16'
        When = '20'
        When = '24'
        When = '28'
          let $Period_End_Date = rtrim($Period_End_Date,'31')
          let $Period_End_Date = rpad($Period_End_Date,10,'29')
          Break
        When-Other
          let $Period_End_Date = rtrim($Period_End_Date,'31')
          let $Period_End_Date = rpad($Period_End_Date,10,'28')
          Break
      End-Evaluate
      Break
    When = '04'
    When = '06'
    When = '09'
    When = '11'
      let $Period_End_Date = rtrim($Period_End_Date,'1')
      let $Period_End_Date = rpad($Period_End_Date,10,'0')
      Break
  End-Evaluate

  move '1' to $Year4
  move '-' to $DDelimiter

  do Format-DateTime($Period_End_Date, $Period_End_Date, {DEFYMD}, '', 'native')

End-Procedure Get-Period-End-Dt

!***********************************************************************
! Procedure Get-Period-Begin-Dt
!***********************************************************************
Begin-Procedure Get-Period-Begin-Dt

  move #Balance_Year   to $Period_Begin_Date xxxx
  move $Beg_Bal_Period to $Period_Begin_Month 09
  concat $Period_Begin_Month with $Period_Begin_Date -xx-1

  move '1' to $Year4
  move '-' to $DDelimiter

  do Format-DateTime($Period_Begin_Date, $Period_Begin_Date, {DEFYMD}, '', 'native')

End-Procedure Get-Period-Begin-Dt

!***********************************************************************
! Procedure Load-Tax-Collection-Agencies
!***********************************************************************
Begin-Procedure Load-Tax-Collection-Agencies

  let $Agency_Lookup_Where_Clause = 'TCA.EFFDT = (SELECT MAX(TCA1.EFFDT) FROM PS_RSI_ST_TX_AGNCS TCA1 '
                                 || 'WHERE TCA.RSI_TCD_PSD_CODE = TCA1.RSI_TCD_PSD_CODE AND TCA1.EFFDT <= ''' || $Period_End_Date  || ''')'
                                 || '  AND TCA.EFF_STATUS <> ''I'' '

  load-lookup
    name         = AGENCIES
    rows         = 75
    sort         = SC
    table        = 'PS_RSI_ST_TX_AGNCS TCA'
    where        = $Agency_Lookup_Where_Clause
    #IfDef MICROSOFT
       key          = RTRIM(TCA.RSI_TCD_PSD_CODE)
       return_value = 'RTRIM(TCA.RSI_RPTG_AGENCY) + ''~'' + RTRIM(TCA.RSI_COMBINE_FILE)'
    #EndIf
    #IfDef SYBASE
       key          = RTRIM(TCA.RSI_TCD_PSD_CODE)
       return_value = 'RTRIM(TCA.RSI_RPTG_AGENCY) + ''~'' + RTRIM(TCA.RSI_COMBINE_FILE)'
    #EndIf
    #IfDef ORACLE
       key          = RTRIM(TCA.RSI_TCD_PSD_CODE)
       return_value = 'RTRIM(TCA.RSI_RPTG_AGENCY) || ''~'' || RTRIM(TCA.RSI_COMBINE_FILE)'
    #EndIf
    #IfDef INFORMIX
       key          = RTRIM(TCA.RSI_TCD_PSD_CODE)
       return_value = 'RTRIM(TCA.RSI_RPTG_AGENCY) || ''~'' || RTRIM(TCA.RSI_COMBINE_FILE)'
    #EndIf
    #IfDef DB2
       key          = RTRIM(TCA.RSI_TCD_PSD_CODE)
       return_value = 'RTRIM(TCA.RSI_RPTG_AGENCY) || ''~'' || RTRIM(TCA.RSI_COMBINE_FILE)'
    #EndIf
    quiet

End-Procedure Load-Tax-Collection-Agencies

!***********************************************************************
! Procedure Load-Tax-Collection-Agencies-From-Run-Control
!***********************************************************************
Begin-Procedure Load-Tax-Collection-Agencies-From-Run-Control

  let $Run_Ctrl_Lookup_Where_Clause = ' RCA.OPRID     = ''' || $Prcs_OprID  || ''' '
                                   || ' AND RCA.RUN_CNTL_ID = ''' || $Prcs_Run_Cntl_ID  || ''' '

  load-lookup
    name         = RUNCTL_AGENCIES
    rows         = 25
    sort         = SC
    table        = 'PS_RC_RSITAXPA RCA'
    return_value = 'RTRIM(RCA.W2_RPTG_AGENCY)'
    where        = $Run_Ctrl_Lookup_Where_Clause
    key          = RTRIM(RCA.W2_RPTG_AGENCY)
    quiet

End-Procedure Load-Tax-Collection-Agencies-From-Run-Control

!***********************************************************************
! Procedure Load-Employer-Ids
!***********************************************************************
Begin-Procedure Load-Employer-Ids

  #IfDef ORACLE
     let $EID_Lookup_Where_Clause = 'AND RPAD(EID.LOCALITY,10,'' '') = RPAD(EID1.LOCALITY,10,'' '') '
  #Else
     let $EID_Lookup_Where_Clause = 'AND EID.LOCALITY = EID1.LOCALITY '
  #EndIf

  let $Employer_Id_Lwt_Lookup_Where_Clause = 'EID.STATE = ''PA'' '
                                          || 'AND EID.LOCALITY <> '' '' '
                                          || 'AND EID.COMPANY <> '' '' '
                                          || 'AND EID.EFFDT = (SELECT MAX(EID1.EFFDT) FROM PS_CO_LOCALTAX_TBL EID1 '
                                          || 'WHERE EID.COMPANY = EID1.COMPANY AND EID.STATE = EID1.STATE '
                                          || $EID_Lookup_Where_Clause
                                          || 'AND EID1.EFFDT <= ''' || $Period_End_Date  || ''') '

  load-lookup
    name         = EMPLOYER_IDS
    rows         = 3000
    sort         = SC
    table        = 'PS_CO_LOCALTAX_TBL EID'
    return_value = EID.EMPLOYER_ID_LWT
    where        = $Employer_Id_Lwt_Lookup_Where_Clause
    #IfDef MICROSOFT
       key       = 'RTRIM(EID.COMPANY) + RTRIM(EID.LOCALITY)'
    #EndIf
    #IfDef SYBASE
       key       = 'RTRIM(EID.COMPANY) + RTRIM(EID.LOCALITY)'
    #EndIf
    #IfDef ORACLE
       key       = 'RTRIM(EID.COMPANY) || RTRIM(EID.LOCALITY)'
    #EndIf
    #IfDef INFORMIX
       key       = 'RTRIM(EID.COMPANY) || RTRIM(EID.LOCALITY)'
    #EndIf
    #IfDef DB2
       key       = 'RTRIM(EID.COMPANY) || RTRIM(EID.LOCALITY)'
    #EndIf
    quiet

End-Procedure Load-Employer-Ids

!***********************************************************************
! Procedure Load-PSD-Codes
!***********************************************************************
Begin-Procedure Load-PSD-Codes

  #IfDef ORACLE
     let $PSD_Lkup_Where_Clause = 'AND RPAD(LT.LOCALITY,10,'' '') = RPAD(LT1.LOCALITY,10,'' '') '
  #Else
     let $PSD_Lkup_Where_Clause = 'AND LT.LOCALITY = LT1.LOCALITY '
  #EndIf

  let $PSD_Code_Lookup_Where_Clause = 'LT.STATE = ''PA'' AND LT.OTH_LOCALITY_ABBRV <> '' '' AND LT.TAX_CLASS = ''H'' '
                                   || 'AND LT.EFFDT = (SELECT MAX(LT1.EFFDT) FROM PS_LOCAL_TAX_TBL LT1 '
                                   || 'WHERE LT.STATE = LT1.STATE '
                                   || $PSD_Lkup_Where_Clause
                                   || 'AND LT1.EFFDT <= ''' || $Period_End_Date  || ''') '

  load-lookup
    name         = PSD_CODES
    rows         = 3000
    sort         = SC
    table        = 'PS_LOCAL_TAX_TBL LT'
    where        = $PSD_Code_Lookup_Where_Clause
    key          = RTRIM(LT.LOCALITY)
    return_value = RTRIM(LT.OTH_LOCALITY_ABBRV)
    quiet

End-Procedure Load-PSD-Codes

!***********************************************************************
! Procedure Load-Record-Types-Array
!***********************************************************************
Begin-Procedure Load-Record-Types-Array

  show 'Procedure = Load-Record-Types-Array'      !ISDVMZA

  let #i          = 0
  let #Array_Cnt1 = 0

BEGIN-SELECT
FLT.RSI_RECORD_TYPE
FLT.RSI_RECORD_NAME
FLT.COLUMNNUM
FLT.RSI_VARIABLE_NAME
FLT.RSI_START_POS
FLT.RSI_END_POS
FLT.RSI_LENGTH
FLT.RSI_FILL_VALUE
FLT.RSI_FILL_SIDE
FLT.RSI_CASE
FLT.RSI_JUSTIFY
FLT.RSI_FILE_TYPE

  Evaluate #i
    When = 0
      let RECORD_TYPES.RSI_RECORD_TYPE(#i)   = &FLT.RSI_RECORD_TYPE
      let RECORD_TYPES.RSI_RECORD_NAME(#i)   = &FLT.RSI_RECORD_NAME
      let RECORD_TYPES.COLUMNNUM(#i)         = &FLT.COLUMNNUM
      let RECORD_TYPES.RSI_VARIABLE_NAME(#i) = &FLT.RSI_VARIABLE_NAME
      let RECORD_TYPES.RSI_START_POS(#i)     = &FLT.RSI_START_POS
      let RECORD_TYPES.RSI_END_POS(#i)       = &FLT.RSI_END_POS
      let RECORD_TYPES.RSI_LENGTH(#i)        = &FLT.RSI_LENGTH
      let RECORD_TYPES.RSI_FILL_VALUE(#i)    = &FLT.RSI_FILL_VALUE
      let RECORD_TYPES.RSI_FILL_SIDE(#i)     = &FLT.RSI_FILL_SIDE
      let RECORD_TYPES.RSI_CASE(#i)          = &FLT.RSI_CASE
      let RECORD_TYPES.RSI_JUSTIFY(#i)       = &FLT.RSI_JUSTIFY
      let RECORD_TYPES.RSI_FILE_TYPE(#i)     = &FLT.RSI_FILE_TYPE
      Break
    When-Other
      If RECORD_TYPES.COLUMNNUM(#i) <> &FLT.COLUMNNUM

         If #i >= {Max_Rows}
            Show 'Error: There are more than {Max_Rows} rows in the RECORD_TYPES Array'
            stop
         End-If
         let RECORD_TYPES.RSI_RECORD_TYPE(#i)   = &FLT.RSI_RECORD_TYPE
         let RECORD_TYPES.RSI_RECORD_NAME(#i)   = &FLT.RSI_RECORD_NAME
         let RECORD_TYPES.COLUMNNUM(#i)         = &FLT.COLUMNNUM
         let RECORD_TYPES.RSI_VARIABLE_NAME(#i) = &FLT.RSI_VARIABLE_NAME
         let RECORD_TYPES.RSI_START_POS(#i)     = &FLT.RSI_START_POS
         let RECORD_TYPES.RSI_END_POS(#i)       = &FLT.RSI_END_POS
         let RECORD_TYPES.RSI_LENGTH(#i)        = &FLT.RSI_LENGTH
         let RECORD_TYPES.RSI_FILL_VALUE(#i)    = &FLT.RSI_FILL_VALUE
         let RECORD_TYPES.RSI_FILL_SIDE(#i)     = &FLT.RSI_FILL_SIDE
         let RECORD_TYPES.RSI_CASE(#i)          = &FLT.RSI_CASE
         let RECORD_TYPES.RSI_JUSTIFY(#i)       = &FLT.RSI_JUSTIFY
         let RECORD_TYPES.RSI_FILE_TYPE(#i)     = &FLT.RSI_FILE_TYPE
      End-If
      Break
  End-Evaluate

  #IfDef DebugA
     do Show-DebugA-Statements
  #EndIf

  let #i = #i + 1
  let #Array_Cnt1 = #Array_Cnt1 + 1

FROM PS_RSI_FILE_LAYOUT FLT
WHERE FLT.PROGRAM_NAME    = 'RSITAXPA'
  AND FLT.STATE           = 'PA'
  AND FLT.EFFDT           = (SELECT MAX(FLT1.EFFDT)
                               FROM PS_RSI_FILE_LAYOUT FLT1
                              WHERE FLT.PROGRAM_NAME    = FLT1.PROGRAM_NAME
                                AND FLT.RSI_RECORD_TYPE = FLT1.RSI_RECORD_TYPE
                                AND FLT.RSI_RECORD_NAME = FLT1.RSI_RECORD_NAME
                                AND FLT.STATE           = FLT1.STATE
                                AND FLT.RSI_FILE_TYPE   = FLT1.RSI_FILE_TYPE
                                AND FLT1.EFFDT         <= $Period_End_Date)
ORDER BY FLT.RSI_RECORD_TYPE, FLT.RSI_RECORD_NAME, FLT.COLUMNNUM
END-SELECT

End-Procedure Load-Record-Types-Array

!***********************************************************************
! Procedure Load-Agency-Record-Mapping-Array
!***********************************************************************
Begin-Procedure Load-Agency-Record-Mapping-Array

  show 'Procedure = Load-Agency-Record-Mapping-Array'      !ISDVMZA

  let #h          = 0
  let #Array_Cnt2 = 0

BEGIN-SELECT
RCD.RSI_RPTG_AGENCY
RCD.RSI_RECORD_TYPE
RCD.RSI_RECORD_NAME
RCD.RSI_LENGTH
RCD.RSI_FILE_EXTENSION
RCD.RSI_FILE_OVERRIDE
RCD.RSI_FILE_TYPE
RCD.RSI_IMAGE_NAME

  Evaluate #h
    When = 0
      let RECORD_MAPPING.RSI_RPTG_AGENCY(#h)    = &RCD.RSI_RPTG_AGENCY
      let RECORD_MAPPING.RSI_RECORD_TYPE(#h)    = &RCD.RSI_RECORD_TYPE
      let RECORD_MAPPING.RSI_RECORD_NAME(#h)    = &RCD.RSI_RECORD_NAME
      let RECORD_MAPPING.RSI_LENGTH(#h)         = &RCD.RSI_LENGTH
      let RECORD_MAPPING.RSI_FILE_EXTENSION(#h) = &RCD.RSI_FILE_EXTENSION
      let RECORD_MAPPING.RSI_FILE_OVERRIDE(#h)  = &RCD.RSI_FILE_OVERRIDE
      let RECORD_MAPPING.RSI_FILE_TYPE(#h)      = &RCD.RSI_FILE_TYPE
      let RECORD_MAPPING.RSI_IMAGE_NAME(#h)     = &RCD.RSI_IMAGE_NAME
      Break
    When-Other
      If RECORD_MAPPING.RSI_RECORD_NAME(#h) <> &RCD.RSI_RECORD_NAME

         If #h >= {Max_Rows}
            Show 'Error: There are more than {Max_Records} rows in the RECORD_MAPPING Array'
            stop
         End-If
         let RECORD_MAPPING.RSI_RPTG_AGENCY(#h)    = &RCD.RSI_RPTG_AGENCY
         let RECORD_MAPPING.RSI_RECORD_TYPE(#h)    = &RCD.RSI_RECORD_TYPE
         let RECORD_MAPPING.RSI_RECORD_NAME(#h)    = &RCD.RSI_RECORD_NAME
         let RECORD_MAPPING.RSI_LENGTH(#h)         = &RCD.RSI_LENGTH
         let RECORD_MAPPING.RSI_FILE_EXTENSION(#h) = &RCD.RSI_FILE_EXTENSION
         let RECORD_MAPPING.RSI_FILE_OVERRIDE(#h)  = &RCD.RSI_FILE_OVERRIDE
         let RECORD_MAPPING.RSI_FILE_TYPE(#h)      = &RCD.RSI_FILE_TYPE
         let RECORD_MAPPING.RSI_IMAGE_NAME(#h)     = &RCD.RSI_IMAGE_NAME
      End-If
      Break
  End-Evaluate

  #IfDef DebugB
     do Show-DebugB-Statements
  #EndIf

  let #h = #h + 1
  let #Array_Cnt2 = #Array_Cnt2 + 1

FROM PS_RSI_RECORD_MAP RCD
WHERE RCD.EFFDT           = (SELECT MAX(RCD1.EFFDT)
                             FROM PS_RSI_RECORD_MAP RCD1
                             WHERE RCD.RSI_RPTG_AGENCY = RCD1.RSI_RPTG_AGENCY
                               AND RCD1.EFFDT         <= $Period_End_Date)
ORDER BY RCD.RSI_RPTG_AGENCY, RCD.RSI_RECORD_TYPE, RCD.RSI_RECORD_NAME
END-SELECT

End-Procedure Load-Agency-Record-Mapping-Array

!***********************************************************************
! Procedure Get-Rptg-Companies
!***********************************************************************
Begin-Procedure Get-Rptg-Companies

  show 'Procedure = Get-Rptg-Companies'      !ISDVMZA

BEGIN-SELECT
FCO.SELECTED_COMPANY     &FCO.SELECTED_COMPANY
FCO.RSI_RPTG_AGENCY      &FCO.RSI_RPTG_AGENCY

  let $Company_Sel       = &FCO.SELECTED_COMPANY
  let $Designated_Agency = &FCO.RSI_RPTG_AGENCY
  let $Company_Sel       = rtrim(ltrim($Company_Sel, ' '), ' ')
  let $Designated_Agency = rtrim(ltrim($Designated_Agency, ' '), ' ')

  If $Designated_Agency <> ''
     let $Co_Des_Agency  = 'Y'
     let $Des_Agency     = 'Y'
     let $Process_Agency_EE_Data_Where_Clause2 = ''
  Else
     let $Des_Agency = 'N'
     let $Process_Agency_EE_Data_Where_Clause2 = '  AND E.RSI_TCD_PSD_CODE =  ''' || $TcdPSDCode || ''''
  End-If

  If $Reprocess = 'Y'
     move #Balance_Period to $Del_Bal_Period  09
     let $Del_Bal_Period = ltrim($Del_Bal_Period,'0')
     let $Delete_Where_Clause = ' WHERE BALANCE_YEAR           = ' || $Balance_Year   || ' '
                             || '   AND BALANCE_PERIOD         = ' || $Del_Bal_Period || ' '
                             || '   AND RPTG_PERIOD            = ''' || $Rptg_Period  || ''' '
                             || '   AND COMPANY                = ''' || $Company_Sel  || ''' '
                             || '   AND RSI_MIN_WORK_FLAG NOT IN (''I'',''U'') '
                             || '   AND RSI_RPTG_AGENCY IN (SELECT FF1.W2_RPTG_AGENCY '
                             || '                           FROM PS_RC_RSITAXPA FF1 '
                             || '                           WHERE FF1.OPRID       = ''' || $Prcs_OprID  || ''' '
                             || '                             AND FF1.RUN_CNTL_ID = ''' || $Prcs_Run_Cntl_ID  || ''')'
     do Delete-Staging-Table-Data             ! Clear TAXPA File Staging Table for Run Control Parms
  End-If

  let $Get_Local_Ee_Data_Where_Clause4 = ' AND EX.COMPANY = ''' || $Company_Sel || ''''
  do Get-Ees-to-Process                       ! Load TAXPA Data to Staging Table

FROM PS_RC_RSITAXPA_CO FCO
WHERE FCO.OPRID       = $Prcs_OprID
  AND FCO.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
ORDER BY FCO.SELECTED_COMPANY
END-SELECT

End-Procedure Get-Rptg-Companies

!***********************************************************************
! Procedure Load-Co-Des-Agency-Array
!***********************************************************************
Begin-Procedure Load-Co-Des-Agency-Array

  let #d = 0

BEGIN-SELECT
DA.SELECTED_COMPANY
DA.RSI_RPTG_AGENCY

  let $Ld_Array_Company    = rtrim(ltrim(&DA.SELECTED_COMPANY,' '),' ')
  let $Ld_Array_Des_Agency = rtrim(ltrim(&DA.RSI_RPTG_AGENCY,' '),' ')

  let DES_AGENCY.SELECTED_COMPANY(#d) = $Ld_Array_Company
  let DES_AGENCY.RSI_RPTG_AGENCY(#d)  = $Ld_Array_Des_Agency

  let #d = #d + 1

FROM PS_RC_RSITAXPA_CO DA
WHERE DA.OPRID            = $Prcs_OprID
  AND DA.RUN_CNTL_ID      = $Prcs_Run_Cntl_ID
  AND DA.RSI_RPTG_AGENCY <> ' '
END-SELECT

  let #Des_Agency_Cnt = #d

End-Procedure Load-Co-Des-Agency-Array

!***********************************************************************
! Procedure Get-Ees-to-Process
!***********************************************************************
Begin-Procedure Get-Ees-to-Process

  show 'Procedure = Get-Ees-to-Process'      !ISDVMZA

BEGIN-SELECT DISTINCT
EX.COMPANY
EX.EMPLID

  let $Ld_Company = rtrim(ltrim(&EX.COMPANY, ' '),' ')
  let $Ld_Emplid  = rtrim(ltrim(&EX.EMPLID, ' '),' ')

  do Get-Paycheck-Data
  do Sort-Paycheck-Data-Array
  do Get-Paycheck-Data-From-Array

FROM PS_TAX_BALANCE EX
WHERE EX.STATE        = 'PA'
  AND EX.BALANCE_YEAR = #Balance_Year
  AND EX.BALANCE_ID   = $Bal_id
  AND EX.TAX_CLASS    = 'H'
  AND EX.LOCALITY    <> ' '
{Dyn-S}$Get_Local_Ee_Data_Where_Clause1{Dyn-E}
{Dyn-S}$Get_Local_Ee_Data_Where_Clause2{Dyn-E}
{Dyn-S}$Get_Local_Ee_Data_Where_Clause3{Dyn-E}
{Dyn-S}$Get_Local_Ee_Data_Where_Clause4{Dyn-E}
ORDER BY EX.COMPANY, EX.EMPLID
END-SELECT

End-Procedure Get-Ees-to-Process

!***********************************************************************
! Procedure Get-Paycheck-Data
!***********************************************************************
Begin-Procedure Get-Paycheck-Data

  show 'Procedure = Get-Paycheck-Data'      !ISDVMZA

  #IfDef RSI_TOOLS_7.5
     let $Page_Num_WhereClause1  = ' AND PC.PAGE#  = PT1.PAGE# '
     let $Page_Line_WhereClause1 = ' AND PC.LINE#  = PT1.LINE# '
  #Else
     let $Page_Num_WhereClause1  = ' AND PC.PAGE_NUM  = PT1.PAGE_NUM '
     let $Page_Line_WhereClause1 = ' AND PC.LINE_NUM  = PT1.LINE_NUM '
  #EndIf

  let #p           = 0
  let #P_Array_Cnt = 0

BEGIN-SELECT
PT1.LOCALITY           &PT1.LOCALITY
PPC.CHECK_DT           &PPC.CHECK_DT
PT1.RESIDENT           &PT1.RESIDENT
Sum(PT1.TXGRS_CUR)     &PT1.TAX_GROSS
Sum(PT1.TAX_CUR)       &PT1.TAX_CURR

  let $Ld_Locality       = rtrim(ltrim(&PT1.LOCALITY, ' '), ' ')
  let $PT_Resident       = rtrim(ltrim(&PT1.RESIDENT, ' '), ' ')
  let $Ld_ResPSDCode     = '990000'
  let $Ld_WorkPSDCode    = '990000'
  let $LocalityIsPSDCode = 'N'

  move &PPC.CHECK_DT   to $Check_Date
  move &PT1.TAX_GROSS to #Ld_Tax_Gross
  move &PT1.TAX_CURR  to #Ld_Tax_Curr

  do Is-Locality-PSD-Code
  do Get-Res-PSD-Code
  do Get-Out-of-State-Resident-Status

  If $OutOfStateRes = 'Y'
     let $Ld_ResPSDCode = '880000'
  End-If

  do Get-Res-NRA-Status

  If $NRA_Status = 'A'
     let $Ld_ResPSDCode = '880000'
  End-If

  If $PT_Resident = 'Y'
     do Get-UI-Jurisdiction

     If $PA_UI_Jurisdiction = 'Y'
        let $Ld_WorkPSDCode = $Ld_ResPSDCode
        let $Ld_TcdPSDCode  = substr($Ld_WorkPSDCode,1,2)
        let $Eid_Locality   = $ResLocality
     Else
        let $Ld_WorkPSDCode = '880000'
        let $Ld_TcdPSDCode  = substr($Ld_ResPSDCode,1,2)
        let $Eid_Locality   = $ResLocality
     End-If
  Else
     If $LocalityIsPSDCode = 'Y'
        let $Ld_WorkPSDCode = $Ld_Locality
     Else
        do Lookup-Wrk-PSD-Code
     End-If
     let $Ld_TcdPSDCode = substr($Ld_WorkPSDCode,1,2)
     let $Eid_Locality  = $Ld_Locality
  End-If

  do Lookup-Tax-Collection-Agency

  If $Sel_Company = 'C'
     If $Rsi_Combine_File = 'Y'
        If $Co_Des_Agency = 'Y'
           do Get-Designated-TCD-From-Array
        End-If
     End-If
  Else
     If $Des_Agency = 'Y'
        If $Rsi_Combine_File = 'Y'
           let $Ld_TcdPSDCode = $Designated_Agency
           do Lookup-Tax-Collection-Agency
        End-If
     End-If
  End-If

  do Lookup-Tax-Collection-Agency-From-Run-Control

  If $Ld_Rsi_Rptg_Agency = $Runctl_Agency
     #IfDef RSI_TOOLS_7.5
        do Get-Ee-Address-v75
     #Else
        do Get-Ee-Address
     #EndIf

     If $EeAddress1 <> ' ' or $EeAddress2 <> ' '
        let $AddressFound = 'Y'
     End-If

     do Populate-EE-Address

     let $Ld_Res_Address1 = rtrim(ltrim(upper($EeAddress1),' '),' ')
     let $Ld_Res_Address2 = rtrim(ltrim(upper($EeAddress2),' '),' ')
     let $Ld_Res_City     = rtrim(ltrim(upper($EeCity),' '),' ')
     let $Ld_Res_State    = rtrim(ltrim(upper($EeState),' '),' ')
     let $Ld_Res_Postal   = rtrim(ltrim(upper($EeZip),' '),' ')

     do Get-Tax-Location-Cd
     do Get-Company-Address
     do Get-Work-Site-Address

     let $Ld_Wrk_Address1 = rtrim(ltrim(upper($ErAddress1),' '),' ')
     let $Ld_Wrk_Address2 = rtrim(ltrim(upper($ErAddress2),' '),' ')
     let $Ld_Wrk_City     = rtrim(ltrim(upper($ErCity),' '),' ')
     let $Ld_Wrk_County   = rtrim(ltrim(upper($ErCounty),' '),' ')
     let $Ld_Wrk_State    = rtrim(ltrim(upper($ErState),' '),' ')
     let $Ld_Wrk_Postal   = rtrim(ltrim(upper($ErZip),' '),' ')

     do Lookup-Employer-Id-Lwt
     let $Ld_Employer_Id_Lwt = rtrim(ltrim($Ld_Employer_Id_Lwt, ' '), ' ')
     do Check-Employer-Id-Lwt

     If $Ld_ResPSDCode = '990000' and $Ld_WorkPSDCode = '990000'
        do PSD-Code-Error
     Else
        If $Ld_ResPSDCode = '880000' and $Ld_WorkPSDCode = '990000'
           do PSD-Code-Error
        Else
           If $Ld_ResPSDCode = '990000' and $Ld_WorkPSDCode = '880000'
              do PSD-Code-Error
           Else
              If $Ld_ResPSDCode = '880000' and $Ld_WorkPSDCode = '880000'
                 ! Skip this row - Ee works and lives out of state
              Else
                 do Load-Paycheck-Data-Array
              End-If
           End-If
        End-If
     End-If
  End-If

FROM PS_PAY_CHECK PC, PS_PAY_TAX PT1, PS_PAY_CALENDAR PPC
WHERE PC.COMPANY          = PT1.COMPANY
  AND PC.PAYGROUP         = PT1.PAYGROUP
  AND PC.PAY_END_DT       = PT1.PAY_END_DT
  AND PC.OFF_CYCLE        = PT1.OFF_CYCLE
{Dyn-S}$Page_Num_WhereClause1{Dyn-E}
{Dyn-S}$Page_Line_WhereClause1{Dyn-E}
  AND PC.SEPCHK           = PT1.SEPCHK
  AND PPC.COMPANY         = PT1.COMPANY
  AND PPC.PAYGROUP        = PT1.PAYGROUP
  AND PPC.PAY_END_DT      = PT1.PAY_END_DT
  AND PC.PAYCHECK_STATUS IN ('F','A','R')
  AND PT1.STATE           = 'PA'
  AND PT1.LOCALITY       <> ' '
  AND PT1.TAX_CLASS       = 'H'
  AND PC.EMPLID           = $Ld_Emplid
  AND PC.COMPANY          = $Ld_Company
  AND PPC.CHECK_DT BETWEEN $Period_Begin_Date AND $Period_End_Date
GROUP BY PT1.LOCALITY, PPC.CHECK_DT, PT1.RESIDENT
ORDER BY PT1.LOCALITY, PPC.CHECK_DT, PT1.RESIDENT
END-SELECT

End-Procedure Get-Paycheck-Data

!***********************************************************************
! Procedure Is-Locality-PSD-Code
!***********************************************************************
Begin-Procedure Is-Locality-PSD-Code

  let $Check_Char = substr($Ld_Locality, 1, 1)

  If $Check_Char = 'I'
     let $LocalityIsPSDCode = 'N'
  Else
     let $LocalityIsPSDCode = 'Y'
  End-If

End-Procedure Is-Locality-PSD-Code

!***********************************************************************
! Procedure Get-Res-PSD-Code
!***********************************************************************
Begin-Procedure Get-Res-PSD-Code

  show 'Procedure = Get-Res-PSD-Code'      !ISDVMZA

BEGIN-SELECT
L.LOCALITY
L.OTH_LOCALITY_ABBRV

  If $LocalityIsPSDCode  = 'Y'
     let $Ld_ResPSDCode = rtrim(ltrim(&L.LOCALITY, ' '), ' ')
  Else
     let $Ld_ResPSDCode = rtrim(ltrim(&L.OTH_LOCALITY_ABBRV, ' '), ' ')
  End-If

  let $ResLocality = rtrim(ltrim(&L.LOCALITY, ' '), ' ')

FROM PS_LOCAL_TAX_TBL L, PS_LOCAL_TAX_DATA LTDD
WHERE L.STATE               = LTDD.STATE
  AND L.LOCALITY            = LTDD.LOCALITY
  AND L.STATE               = 'PA'
  AND LTDD.EMPLID           = $Ld_Emplid
  AND LTDD.COMPANY          = $Ld_Company
  AND LTDD.RESIDENT         = 'Y'
  AND L.OTH_LOCALITY_ABBRV <> ' '
  AND L.TAX_CLASS           = 'H'
  AND LTDD.EFFDT            = (SELECT MAX(LTDD1.EFFDT)
                               FROM PS_LOCAL_TAX_DATA LTDD1
                               WHERE LTDD.EMPLID  = LTDD1.EMPLID
                                 AND LTDD.COMPANY = LTDD1.COMPANY
                                 AND LTDD.STATE   = LTDD1.STATE
                                 AND LTDD1.EFFDT <= $Check_Date)
  AND L.EFFDT               = (SELECT MAX(L1.EFFDT)
                               FROM PS_LOCAL_TAX_TBL L1
                               WHERE L.STATE    = L1.STATE
                                 AND L.LOCALITY = L1.LOCALITY
                                 AND L1.EFFDT  <= $Check_Date)
END-SELECT

End-Procedure Get-Res-PSD-Code

!***********************************************************************
! Procedure Get-Out-of-State-Resident-Status
!***********************************************************************
Begin-Procedure Get-Out-of-State-Resident-Status

  show 'Procedure = Get-Out-of-State-Resident-Status'      !ISDVMZA

  let $OutOfStateRes = 'N'

BEGIN-SELECT
LTD2.STATE

  let $OutOfStateRes = 'Y'

FROM PS_STATE_TAX_DATA LTD2
WHERE LTD2.EMPLID   = $Ld_Emplid
  AND LTD2.COMPANY  = $Ld_Company
  AND LTD2.RESIDENT = 'Y'
  AND LTD2.STATE   <> 'PA'
  AND LTD2.EFFDT    = (SELECT MAX(LTD12.EFFDT)
                       FROM PS_STATE_TAX_DATA LTD12
                       WHERE LTD2.EMPLID  = LTD12.EMPLID
                         AND LTD2.COMPANY = LTD12.COMPANY
                         AND LTD12.EFFDT <= $Check_Date)
END-SELECT

End-Procedure Get-Out-of-State-Resident-Status

!***********************************************************************
! Procedure Get-Res-NRA-Status
!***********************************************************************
Begin-Procedure Get-Res-NRA-Status

  let $NRA_Status = ' '

BEGIN-SELECT
FTD.SPECIAL_FWT_STATUS

  let $NRA_Status = &FTD.SPECIAL_FWT_STATUS

FROM PS_FED_TAX_DATA FTD
WHERE FTD.EMPLID  = $Ld_Emplid
  AND FTD.COMPANY = $Ld_Company
  AND FTD.EFFDT   = (SELECT MAX(FTD1.EFFDT)
                     FROM PS_FED_TAX_DATA FTD1
                     WHERE FTD.EMPLID  = FTD1.EMPLID
                       AND FTD.COMPANY = FTD1.COMPANY
                       AND FTD1.EFFDT <= $Check_Date)
END-SELECT

End-Procedure Get-Res-NRA-Status

!***********************************************************************
! Procedure Get-UI-Jurisdiction
!***********************************************************************
Begin-Procedure Get-UI-Jurisdiction

  show 'Procedure = Get-UI-Jurisdiction'      !ISDVMZA

  let $PA_UI_Jurisdiction = 'N'

BEGIN-SELECT
'Y'          &PA_UI_Jurisdiction

  let $PA_UI_Jurisdiction = &PA_UI_Jurisdiction

FROM PS_STATE_TAX_DATA UI
WHERE UI.EMPLID          = $Ld_Emplid
  AND UI.COMPANY         = $Ld_Company
  AND UI.UI_JURISDICTION = 'Y'
  AND UI.RESIDENT        = 'Y'
  AND UI.STATE           = 'PA'
  AND UI.EFFDT           = (SELECT MAX(UI2.EFFDT)
                              FROM PS_STATE_TAX_DATA UI2
                              WHERE UI.EMPLID  = UI2.EMPLID
                                AND UI.COMPANY = UI2.COMPANY
                                AND UI2.EFFDT <= $Check_Date)
END-SELECT

End-Procedure Get-UI-Jurisdiction

!***********************************************************************
! Procedure Lookup-Wrk-PSD-Code
!***********************************************************************
Begin-Procedure Lookup-Wrk-PSD-Code

  let $LkUpLocality = rtrim($Ld_Locality,' ')

  lookup PSD_CODES $LkUpLocality $Lk_Oth_Locality_Abbrv

  let $Ld_WorkPSDCode = rtrim(ltrim($Lk_Oth_Locality_Abbrv, ' '), ' ')

End-Procedure Lookup-Wrk-PSD-Code

!***********************************************************************
! Procedure Get-Tax-Location-Cd
!***********************************************************************
Begin-Procedure Get-Tax-Location-Cd

  show 'Procedure = Get-Tax-Location-Cd'      !ISDVMZA

  #IfDef RSI_TOOLS_7.5
     let $Tax_Loc_WhereClause1  = ' AND JOB.EMPL_RCD# = JOB1.EMPL_RCD# '
     let $Tax_Loc_WhereClause2  = ' AND JOB.EMPL_RCD# = JOB2.EMPL_RCD# '
  #Else
     let $Tax_Loc_WhereClause1  = ' AND JOB.EMPL_RCD = JOB1.EMPL_RCD '
     let $Tax_Loc_WhereClause2  = ' AND JOB.EMPL_RCD = JOB2.EMPL_RCD '
  #EndIf

BEGIN-SELECT DISTINCT
JOB.TAX_LOCATION_CD

  let $Tax_Location_Cd = &JOB.TAX_LOCATION_CD

FROM PS_JOB JOB
WHERE JOB.EMPLID = $Ld_Emplid
  AND JOB.EFFDT  = (SELECT Max(JOB1.EFFDT)
                    FROM PS_JOB JOB1
                    WHERE JOB.EMPLID  = JOB1.EMPLID
                      {Dyn-S}$Tax_Loc_WhereClause1{Dyn-E}
                      AND JOB.EFFSEQ  = JOB1.EFFSEQ
                      AND JOB1.EFFDT <= $Check_Date)
  AND JOB.EFFSEQ = (SELECT Max(JOB2.EFFSEQ)
                    FROM PS_JOB JOB2
                    WHERE JOB.EMPLID  = JOB2.EMPLID
                      {Dyn-S}$Tax_Loc_WhereClause2{Dyn-E}
                      AND JOB2.EFFDT <= $Check_Date)
END-SELECT

End-Procedure Get-Tax-Location-Cd

!***********************************************************************
! Procedure Get-Company-Address
!***********************************************************************
Begin-Procedure Get-Company-Address

BEGIN-SELECT
A.ADDRESS1
A.ADDRESS2
A.CITY
A.COUNTY
A.STATE
A.POSTAL

  move &A.ADDRESS1 to $ErAddress1
  move &A.ADDRESS2 to $ErAddress2
  move &A.CITY     to $ErCity
  move &A.COUNTY   to $ErCounty
  move &A.STATE    to $ErState
  move &A.POSTAL   to $ErZip

FROM PS_COMPANY_TBL A
WHERE A.COMPANY = $Ld_Company
  AND A.EFFDT   = (SELECT MAX(AA.EFFDT)
                   FROM PS_COMPANY_TBL AA
                   WHERE A.COMPANY = AA.COMPANY
                     AND AA.EFFDT <= $Check_Date)
END-SELECT

End-Procedure Get-Company-Address

!***********************************************************************
! Procedure Get-Work-Site-Address
!***********************************************************************
Begin-Procedure Get-Work-Site-Address

  show 'Procedure = Get-Work-Site-Address'      !ISDVMZA

  let $Work_Address_Found = 'N'
  let $Job_Address_Found  = 'N'

BEGIN-SELECT
LOC.LOCATION
LOC.ADDRESS1
LOC.ADDRESS2
LOC.CITY
LOC.COUNTY
LOC.STATE
LOC.POSTAL

  let $Job_Location = &LOC.LOCATION
  let $Work_Address_Found = 'Y'

  If $Job_Location       = $Tax_Location_Cd
     move &LOC.ADDRESS1 to $ErAddress1
     move &LOC.ADDRESS2 to $ErAddress2
     move &LOC.CITY     to $ErCity
     move &LOC.COUNTY   to $ErCounty
     move &LOC.STATE    to $ErState
     move &LOC.POSTAL   to $ErZip
     let $Job_Address_Found = 'Y'
  End-If

FROM PS_LOCATION_TBL LOC
WHERE LOC.LOCALITY = $Ld_Locality
  AND LOC.EFFDT    = (SELECT MAX(LOC1.EFFDT)
                      FROM PS_LOCATION_TBL LOC1
                      WHERE LOC.SETID    = LOC1.SETID
                        AND LOC.LOCATION = LOC1.LOCATION
                        AND LOC1.EFFDT  <= $Check_Date)
END-SELECT

  If $Work_Address_Found = 'Y' and $Job_Address_Found = 'N'
     move &LOC.ADDRESS1 to $ErAddress1
     move &LOC.ADDRESS2 to $ErAddress2
     move &LOC.CITY     to $ErCity
     move &LOC.COUNTY   to $ErCounty
     move &LOC.STATE    to $ErState
     move &LOC.POSTAL   to $ErZip
  End-If

  If rtrim(ltrim($ErAddress2,' '),' ') = ''
     If rtrim(ltrim($ErAddress1,' '),' ') <> ''
        move $ErAddress1 to $ErAddress2
        move $Sp1        to $ErAddress1
     End-If
  End-If

  If rtrim($ErAddress1, ' ') = ''
     move $Sp1 to $ErAddress1
  End-If

End-Procedure Get-Work-Site-Address

!***********************************************************************
! Procedure PSD-Code-Error
!***********************************************************************
Begin-Procedure PSD-Code-Error

  let $Errors_Found = 'Y'

  If rtrim(ltrim($ResLocality, ' '), ' ') = ''
     let $ResLocality = 'INVALID LOCALITY FOUND'
  End-If

  let $Err_Msg7 = 'Please ensure the Resident Locality, ' || $ResLocality || ', and/or Work Locality, ' || $Ld_Locality
                   || ', for Emplid, ' || $Ld_Emplid || ' is valid and setup correctly within the Local Tax Table.'

  If $Err_Msg7 <> $Prev_Err_Msg7
     let $Err_Msg = $Err_Msg7
     do Open-ErrorFile
     let $Prev_Err_Msg7 = $Err_Msg7
  End-If
  let #Error_Count = #Error_Count + 1

  If #Error_Count = #Max_Errors
     let $Max_Errors = 'Y'
     Show 'Maximum number of Errors has been exceeded.'
     Show 'The Program has not finished successfully.'
     Show 'Please check the Error Log File.'
     do Error-Log
     Show ''
     STOP
  End-If

End-Procedure PSD-Code-Error

!***********************************************************************
! Procedure Lookup-Employer-Id-Lwt
!***********************************************************************
Begin-Procedure Lookup-Employer-Id-Lwt

  let $LkUpEmpIdLwt = rtrim($Ld_Company,' ') || rtrim($Eid_Locality,' ')

  lookup EMPLOYER_IDS $LkUpEmpIdLwt $Ld_Employer_Id_Lwt

End-Procedure Lookup-Employer-Id-Lwt

!***********************************************************************
! Procedure Check-Employer-Id-Lwt
!***********************************************************************
Begin-Procedure Check-Employer-Id-Lwt

  If rtrim(ltrim($Eid_Locality, ' '), ' ') = ''
     let $Eid_Locality = 'INVALID LOCALITY FOUND'
  End-If

  If $Ld_Employer_Id_Lwt = ''
     let $Ld_Employer_Id_Lwt = ' '
     let $Errors_Found = 'Y'
     let $Err_Msg1 = 'Employer ID LWT is not setup in the Company Local Tax table for Company, ' || $Ld_Company  ||
                     ', Emplid, ' || $Ld_Emplid || ' and Locality, ' || $Eid_Locality  || '.'

     If $Err_Msg1 <> $Prev_Err_Msg1
        let $Err_Msg = $Err_Msg1
        do Open-ErrorFile
        let $Prev_Err_Msg1 = $Err_Msg1
     End-If
     let #Error_Count = #Error_Count + 1

     If #Error_Count = #Max_Errors
        let $Max_Errors = 'Y'
        Show 'Maximum number of Errors has been exceeded.'
        Show 'The Program has not finished successfully.'
        Show 'Please check the Error Log File.'
        do Error-Log
        Show ''
        STOP
     End-If
  End-If

End-Procedure Check-Employer-Id-Lwt

!***********************************************************************
! Procedure Get-Designated-TCD-From-Array
!***********************************************************************
Begin-Procedure Get-Designated-TCD-From-Array

  let #c = 0

  While #c <= #Des_Agency_Cnt
     let $Array_Company    = DES_AGENCY.SELECTED_COMPANY(#c)
     let $Array_Des_Agency = DES_AGENCY.RSI_RPTG_AGENCY(#c)
     let $Array_Company    = rtrim(ltrim($Array_Company,' '),' ')
     let $Array_Des_Agency = rtrim(ltrim($Array_Des_Agency,' '),' ')

     If $Ld_Company = $Array_Company
        let $Ld_TcdPSDCode = $Array_Des_Agency
        do Lookup-Tax-Collection-Agency
        Break
     Else
        do Lookup-Tax-Collection-Agency
     End-If

     let #c = #c + 1
  End-While

End-Procedure Get-Designated-TCD-From-Array

!***********************************************************************
! Procedure Lookup-Tax-Collection-Agency
!***********************************************************************
Begin-Procedure Lookup-Tax-Collection-Agency

  let $LkUpTcdPSDCode = rtrim($Ld_TcdPSDCode,' ')

  lookup AGENCIES $LkUpTcdPSDCode $LkUpAgency

  unstring $LkUpAgency by '~' into $Ld_Rsi_Rptg_Agency $Rsi_Combine_File

End-Procedure Lookup-Tax-Collection-Agency

!***********************************************************************
! Procedure Lookup-Tax-Collection-Agency-From-Run-Control
!***********************************************************************
Begin-Procedure Lookup-Tax-Collection-Agency-From-Run-Control

  let $LkUpRunctlAgency = rtrim($Ld_Rsi_Rptg_Agency,' ')

  lookup RUNCTL_AGENCIES $LkUpRunctlAgency $Runctl_Agency

End-Procedure Lookup-Tax-Collection-Agency-From-Run-Control

!***********************************************************************
! Procedure Load-Paycheck-Data-Array
!***********************************************************************
Begin-Procedure Load-Paycheck-Data-Array

  If #p >= {Max_Rows}
     Show 'Error: There are more than {Max_Records} rows in the PAYCHECK_DATA Array'
     Stop
  End-If

  let PAYCHECK_DATA.LD_RSI_RPTG_AGENCY(#p) = nvl(rtrim(ltrim($Ld_Rsi_Rptg_Agency,' '),' '),' ')
  let PAYCHECK_DATA.LD_COMPANY(#p)         = nvl(rtrim(ltrim($Ld_Company,' '),' '),' ')
  let PAYCHECK_DATA.LD_WORKPSDCODE(#p)     = nvl(rtrim(ltrim($Ld_WorkPSDCode,' '),' '),' ')
  let PAYCHECK_DATA.LD_WRK_ADDRESS1(#p)    = nvl(rtrim(ltrim($Ld_Wrk_Address1,' '),' '),' ')
  let PAYCHECK_DATA.LD_WRK_ADDRESS2(#p)    = nvl(rtrim(ltrim($Ld_Wrk_Address2,' '),' '),' ')
  let PAYCHECK_DATA.LD_WRK_POSTAL(#p)      = nvl(rtrim(ltrim($Ld_Wrk_Postal,' '),' '),' ')
  let PAYCHECK_DATA.LD_RESPSDCODE(#p)      = nvl(rtrim(ltrim($Ld_ResPSDCode,' '),' '),' ')
  let PAYCHECK_DATA.LD_RES_ADDRESS1(#p)    = nvl(rtrim(ltrim($Ld_Res_Address1,' '),' '),' ')
  let PAYCHECK_DATA.LD_RES_ADDRESS2(#p)    = nvl(rtrim(ltrim($Ld_Res_Address2,' '),' '),' ')
  let PAYCHECK_DATA.LD_RES_POSTAL(#p)      = nvl(rtrim(ltrim($Ld_Res_Postal,' '),' '),' ')
  let PAYCHECK_DATA.LD_LOCALITY(#p)        = nvl(rtrim(ltrim($Ld_Locality,' '),' '),' ')
  let PAYCHECK_DATA.LD_TCDPSDCODE(#p)      = nvl(rtrim(ltrim($Ld_TcdPSDCode,' '),' '),' ')
  let PAYCHECK_DATA.LD_EMPLOYER_ID_LWT(#p) = nvl(rtrim(ltrim($Ld_Employer_Id_Lwt,' '),' '),' ')
  let PAYCHECK_DATA.LD_TAX_GROSS(#p)       = #Ld_Tax_Gross
  let PAYCHECK_DATA.LD_TAX_CURR(#p)        = #Ld_Tax_Curr
  let PAYCHECK_DATA.LD_WRK_CITY(#p)        = nvl(rtrim(ltrim($Ld_Wrk_City,' '),' '),' ')
  let PAYCHECK_DATA.LD_WRK_County(#p)      = nvl(rtrim(ltrim($Ld_Wrk_County,' '),' '),' ')
  let PAYCHECK_DATA.LD_WRK_STATE(#p)       = nvl(rtrim(ltrim($Ld_Wrk_State,' '),' '),' ')
  let PAYCHECK_DATA.LD_RES_CITY(#p)        = nvl(rtrim(ltrim($Ld_Res_City,' '),' '),' ')
  let PAYCHECK_DATA.LD_RES_STATE(#p)       = nvl(rtrim(ltrim($Ld_Res_State,' '),' '),' ')

  #IfDef DebugF
     do Show-DebugF-Statements
  #EndIf

  let #p = #p + 1
  let #P_Array_Cnt = #P_Array_Cnt + 1

End-Procedure Load-Paycheck-Data-Array

!***********************************************************************
! Procedure Sort-Paycheck-Data-Array
!***********************************************************************
Begin-Procedure Sort-Paycheck-Data-Array

  let #Last_Row = #P_Array_Cnt - 1
  do Sort-Array(0, 0, #Last_Row)

End-Procedure Sort-Paycheck-Data-Array

!***********************************************************************
! Procedure Sort-Array
!***********************************************************************
Begin-Procedure Sort-Array(#level, #m, #n)

  If #m < #n
     let #i = #m
     let #j = #n + 1
     let $Key1  = PAYCHECK_DATA.LD_RSI_RPTG_AGENCY(#m)
     let $Key2  = PAYCHECK_DATA.LD_COMPANY(#m)
     let $Key3  = PAYCHECK_DATA.LD_WORKPSDCODE(#m)
     let $Key4  = PAYCHECK_DATA.LD_WRK_ADDRESS1(#m)
     let $Key5  = PAYCHECK_DATA.LD_WRK_ADDRESS2(#m)
     let $Key6  = PAYCHECK_DATA.LD_WRK_POSTAL(#m)
     let $Key7  = PAYCHECK_DATA.LD_RESPSDCODE(#m)
     let $Key8  = PAYCHECK_DATA.LD_RES_ADDRESS1(#m)
     let $Key9  = PAYCHECK_DATA.LD_RES_ADDRESS2(#m)
     let $Key10 = PAYCHECK_DATA.LD_RES_POSTAL(#m)
     let $Key   = $Key1 || $Key2 || $Key3 || $Key4 || $Key5 || $Key6 || $Key7 || $Key8 || $Key9 || $Key10

     While 1
        add 1 to #i

        While #i <= #j and PAYCHECK_DATA.LD_RSI_RPTG_AGENCY(#i) || PAYCHECK_DATA.LD_COMPANY(#i) || PAYCHECK_DATA.LD_WORKPSDCODE(#i) || PAYCHECK_DATA.LD_WRK_ADDRESS1(#i) || PAYCHECK_DATA.LD_WRK_ADDRESS2(#i) || PAYCHECK_DATA.LD_WRK_POSTAL(#i) || PAYCHECK_DATA.LD_RESPSDCODE(#i) || PAYCHECK_DATA.LD_RES_ADDRESS1(#i) || PAYCHECK_DATA.LD_RES_ADDRESS2(#i) || PAYCHECK_DATA.LD_RES_POSTAL(#i) < $Key
           add 1 to #i
        End-While
        subtract 1 from #j

        While #j >= 0 and PAYCHECK_DATA.LD_RSI_RPTG_AGENCY(#j) || PAYCHECK_DATA.LD_COMPANY(#j) || PAYCHECK_DATA.LD_WORKPSDCODE(#j) || PAYCHECK_DATA.LD_WRK_ADDRESS1(#j) || PAYCHECK_DATA.LD_WRK_ADDRESS2(#j) || PAYCHECK_DATA.LD_WRK_POSTAL(#j) || PAYCHECK_DATA.LD_RESPSDCODE(#j) || PAYCHECK_DATA.LD_RES_ADDRESS1(#j) || PAYCHECK_DATA.LD_RES_ADDRESS2(#j) || PAYCHECK_DATA.LD_RES_POSTAL(#j) > $Key
           subtract 1 from #j
        End-While

        If #i < #j
           do Swap-Rows(#i, #j)
        Else
           Break
        End-If
     End-While

     do Swap-Rows(#m, #j)
     add 1 to #level

     let SORT_SWAP.J(#level - 1) = #j
     let SORT_SWAP.N(#level - 1) = #n
     subtract 1 from #j
     do Sort-Array(#level, #m, #j)

     let #j = SORT_SWAP.J(#level - 1)
     let #n = SORT_SWAP.N(#level - 1)
     add 1 to #j
     do Sort-Array(#level, #j, #n)
     subtract 1 from #level
  End-If

End-Procedure Sort-Array

!***********************************************************************
! Procedure Swap-Rows
!***********************************************************************
Begin-Procedure Swap-Rows(#i, #j)

  Get $Ld_Rsi_Rptg_Agency $Ld_Company $Ld_WorkPSDCode $Ld_Wrk_Address1 $Ld_Wrk_Address2 $Ld_Wrk_Postal $Ld_ResPSDCode $Ld_Res_Address1
      $Ld_Res_Address2 $Ld_Res_Postal $Ld_Locality $Ld_TcdPSDCode $Ld_Employer_Id_Lwt #Ld_Tax_Gross #Ld_Tax_Curr $Ld_Wrk_City
      $Ld_Wrk_County $Ld_Wrk_State $Ld_Res_City $Ld_Res_State
      From PAYCHECK_DATA(#i)

  let PAYCHECK_DATA.LD_RSI_RPTG_AGENCY(#i) = PAYCHECK_DATA.LD_RSI_RPTG_AGENCY(#j)
  let PAYCHECK_DATA.LD_COMPANY(#i)         = PAYCHECK_DATA.LD_COMPANY(#j)
  let PAYCHECK_DATA.LD_WORKPSDCODE(#i)     = PAYCHECK_DATA.LD_WORKPSDCODE(#j)
  let PAYCHECK_DATA.LD_WRK_ADDRESS1(#i)    = PAYCHECK_DATA.LD_WRK_ADDRESS1(#j)
  let PAYCHECK_DATA.LD_WRK_ADDRESS2(#i)    = PAYCHECK_DATA.LD_WRK_ADDRESS2(#j)
  let PAYCHECK_DATA.LD_WRK_POSTAL(#i)      = PAYCHECK_DATA.LD_WRK_POSTAL(#j)
  let PAYCHECK_DATA.LD_RESPSDCODE(#i)      = PAYCHECK_DATA.LD_RESPSDCODE(#j)
  let PAYCHECK_DATA.LD_RES_ADDRESS1(#i)    = PAYCHECK_DATA.LD_RES_ADDRESS1(#j)
  let PAYCHECK_DATA.LD_RES_ADDRESS2(#i)    = PAYCHECK_DATA.LD_RES_ADDRESS2(#j)
  let PAYCHECK_DATA.LD_RES_POSTAL(#i)      = PAYCHECK_DATA.LD_RES_POSTAL(#j)
  let PAYCHECK_DATA.LD_LOCALITY(#i)        = PAYCHECK_DATA.LD_LOCALITY(#j)
  let PAYCHECK_DATA.LD_TCDPSDCODE(#i)      = PAYCHECK_DATA.LD_TCDPSDCODE(#j)
  let PAYCHECK_DATA.LD_EMPLOYER_ID_LWT(#i) = PAYCHECK_DATA.LD_EMPLOYER_ID_LWT(#j)
  let PAYCHECK_DATA.LD_TAX_GROSS(#i)       = PAYCHECK_DATA.LD_TAX_GROSS(#j)
  let PAYCHECK_DATA.LD_TAX_CURR(#i)        = PAYCHECK_DATA.LD_TAX_CURR(#j)
  let PAYCHECK_DATA.LD_WRK_CITY(#i)        = PAYCHECK_DATA.LD_WRK_CITY(#j)
  let PAYCHECK_DATA.LD_WRK_COUNTY(#i)      = PAYCHECK_DATA.LD_WRK_COUNTY(#j)
  let PAYCHECK_DATA.LD_WRK_STATE(#i)       = PAYCHECK_DATA.LD_WRK_STATE(#j)
  let PAYCHECK_DATA.LD_RES_CITY(#i)        = PAYCHECK_DATA.LD_RES_CITY(#j)
  let PAYCHECK_DATA.LD_RES_STATE(#i)       = PAYCHECK_DATA.LD_RES_STATE(#j)

  Put $Ld_Rsi_Rptg_Agency $Ld_Company $Ld_WorkPSDCode $Ld_Wrk_Address1 $Ld_Wrk_Address2 $Ld_Wrk_Postal $Ld_ResPSDCode $Ld_Res_Address1
      $Ld_Res_Address2 $Ld_Res_Postal $Ld_Locality $Ld_TcdPSDCode $Ld_Employer_Id_Lwt #Ld_Tax_Gross #Ld_Tax_Curr $Ld_Wrk_City
      $Ld_Wrk_County $Ld_Wrk_State $Ld_Res_City $Ld_Res_State
      Into PAYCHECK_DATA(#j)

End-Procedure Swap-Rows

!***********************************************************************
! Procedure Get-Paycheck-Data-From-Array
!***********************************************************************
Begin-Procedure Get-Paycheck-Data-From-Array

  show 'Procedure = Get-Paycheck-Data-From-Array'      !ISDVMZA

  let #v = 0

  do Clear-Paycheck-Array-Variables

  While #v <= #Last_Row
     Get $Array_Ld_Rsi_Rptg_Agency $Array_Ld_Company $Array_Ld_WorkPSDCode $Array_Ld_Wrk_Address1 $Array_Ld_Wrk_Address2 $Array_Ld_Wrk_Postal
         $Array_Ld_ResPSDCode $Array_Ld_Res_Address1 $Array_Ld_Res_Address2 $Array_Ld_Res_Postal $Array_Ld_Locality $Array_Ld_TcdPSDCode
         $Array_Ld_Employer_Id_Lwt #Array_Tax_Gross #Array_Tax_Curr $Array_Ld_Wrk_City $Array_Ld_Wrk_County $Array_Ld_Wrk_State
         $Array_Ld_Res_City $Array_Ld_Res_State
         From PAYCHECK_DATA(#v)

     let $Array_Key = $Array_Ld_Rsi_Rptg_Agency || $Array_Ld_Company || $Array_Ld_WorkPSDCode || $Array_Ld_Wrk_Address1 || $Array_Ld_Wrk_Address2 || $Array_Ld_Wrk_Postal || $Array_Ld_ResPSDCode || $Array_Ld_Res_Address1 || $Array_Ld_Res_Address2 || $Array_Ld_Res_Postal

     If #v = #Last_Row
        If #v = 0
           let #Step               = 1
           let #Tax_Gross          = #Array_Tax_Gross
           let #Tax_Curr           = #Array_Tax_Curr
           let $Ld_RSI_Rptg_Agency = $Array_Ld_Rsi_Rptg_Agency
           let $Ld_Company         = $Array_Ld_Company
           let $Ld_WorkPSDCode     = $Array_Ld_WorkPSDCode
           let $Ld_TcdPSDCode      = $Array_Ld_TcdPSDCode
           let $Ld_Employer_Id_Lwt = $Array_Ld_Employer_Id_Lwt
           let $Ld_ResPSDCode      = $Array_Ld_ResPSDCode
           let $Ld_Wrk_Address1    = $Array_Ld_Wrk_Address1
           let $Ld_Wrk_Address2    = $Array_Ld_Wrk_Address2
           let $Ld_Wrk_City        = $Array_Ld_Wrk_City
           let $Ld_Wrk_County      = $Array_Ld_Wrk_County
           let $Ld_Wrk_State       = $Array_Ld_Wrk_State
           let $Ld_Wrk_Postal      = $Array_Ld_Wrk_Postal
           let $Ld_Res_Address1    = $Array_Ld_Res_Address1
           let $Ld_Res_Address2    = $Array_Ld_Res_Address2
           let $Ld_Res_City        = $Array_Ld_Res_City
           let $Ld_Res_State       = $Array_Ld_Res_State
           let $Ld_Res_Postal      = $Array_Ld_Res_Postal
           let $Save_Row_Init      = 'Y'
           let $Ld_Resident        = 'X'

           If $Array_Ld_WorkPSDCode = '880000'
              let $Ld_Locality = '880000'
           Else
              let $Ld_Locality = $Array_Ld_Locality
           End-If

           If $Array_Ld_ResPSDCode = '880000'
              let $Ld_LocalTaxType = 'ENR'
           Else
              let $Ld_LocalTaxType = 'EIT'
           End-If

           Evaluate $Rptg_Period
             When = 'A'
               move #Tax_Gross to #Ld_Txgrs_Ytd
               move #Tax_Curr  to #Ld_Tax_Ytd
               Break
             When = 'Q'
               move #Tax_Gross to #Ld_Txgrs_Qtd
               move #Tax_Curr  to #Ld_Tax_Qtd
               Break
             When = 'M'
               move #Tax_Gross to #Ld_Txgrs_Mtd
               move #Tax_Curr  to #Ld_Tax_Mtd
               Break
           End-Evaluate

           do Check-for-Existing-Rows

           If $Existing = 'N'
              do Load-Local-Ee-Data
           End-If

           do Clear-Paycheck-Array-Variables
        Else
           If $Array_Key <> $Prev_Array_Key
              let #Step               = 2
              let #Tax_Gross          = #Ttl_Tax_Gross
              let #Tax_Curr           = #Ttl_Tax_Curr
              let $Ld_RSI_Rptg_Agency = $Prev_Array_Ld_Rsi_Rptg_Agency
              let $Ld_Company         = $Prev_Array_Ld_Company
              let $Ld_WorkPSDCode     = $Prev_Array_Ld_WorkPSDCode
              let $Ld_TcdPSDCode      = $Prev_Array_Ld_TcdPSDCode
              let $Ld_Employer_Id_Lwt = $Prev_Array_Ld_Employer_Id_Lwt
              let $Ld_ResPSDCode      = $Prev_Array_Ld_ResPSDCode
              let $Ld_Wrk_Address1    = $Prev_Array_Ld_Wrk_Address1
              let $Ld_Wrk_Address2    = $Prev_Array_Ld_Wrk_Address2
              let $Ld_Wrk_City        = $Prev_Array_Ld_Wrk_City
              let $Ld_Wrk_County      = $Prev_Array_Ld_Wrk_County
              let $Ld_Wrk_State       = $Prev_Array_Ld_Wrk_State
              let $Ld_Wrk_Postal      = $Prev_Array_Ld_Wrk_Postal
              let $Ld_Res_Address1    = $Prev_Array_Ld_Res_Address1
              let $Ld_Res_Address2    = $Prev_Array_Ld_Res_Address2
              let $Ld_Res_City        = $Prev_Array_Ld_Res_City
              let $Ld_Res_State       = $Prev_Array_Ld_Res_State
              let $Ld_Res_Postal      = $Prev_Array_Ld_Res_Postal
              let $Save_Row_Init      = 'Y'
              let $Ld_Resident        = 'X'

              If $Prev_Array_Ld_WorkPSDCode = '880000'
                 let $Ld_Locality = '880000'
              Else
                 let $Ld_Locality = $Prev_Array_Ld_Locality
              End-If

              If $Prev_Array_Ld_ResPSDCode = '880000'
                 let $Ld_LocalTaxType = 'ENR'
              Else
                 let $Ld_LocalTaxType = 'EIT'
              End-If

              Evaluate $Rptg_Period
                When = 'A'
                  move #Tax_Gross to #Ld_Txgrs_Ytd
                  move #Tax_Curr  to #Ld_Tax_Ytd
                  Break
                When = 'Q'
                  move #Tax_Gross to #Ld_Txgrs_Qtd
                  move #Tax_Curr  to #Ld_Tax_Qtd
                  Break
                When = 'M'
                  move #Tax_Gross to #Ld_Txgrs_Mtd
                  move #Tax_Curr  to #Ld_Tax_Mtd
                  Break
              End-Evaluate

              do Check-for-Existing-Rows

              If $Existing = 'N'
                 do Load-Local-Ee-Data
              End-If

              let #Step               = 3
              let #Tax_Gross          = #Array_Tax_Gross
              let #Tax_Curr           = #Array_Tax_Curr
              let $Ld_RSI_Rptg_Agency = $Array_Ld_Rsi_Rptg_Agency
              let $Ld_Company         = $Array_Ld_Company
              let $Ld_WorkPSDCode     = $Array_Ld_WorkPSDCode
              let $Ld_TcdPSDCode      = $Array_Ld_TcdPSDCode
              let $Ld_Employer_Id_Lwt = $Array_Ld_Employer_Id_Lwt
              let $Ld_ResPSDCode      = $Array_Ld_ResPSDCode
              let $Ld_Wrk_Address1    = $Array_Ld_Wrk_Address1
              let $Ld_Wrk_Address2    = $Array_Ld_Wrk_Address2
              let $Ld_Wrk_City        = $Array_Ld_Wrk_City
              let $Ld_Wrk_County      = $Array_Ld_Wrk_County
              let $Ld_Wrk_State       = $Array_Ld_Wrk_State
              let $Ld_Wrk_Postal      = $Array_Ld_Wrk_Postal
              let $Ld_Res_Address1    = $Array_Ld_Res_Address1
              let $Ld_Res_Address2    = $Array_Ld_Res_Address2
              let $Ld_Res_City        = $Array_Ld_Res_City
              let $Ld_Res_State       = $Array_Ld_Res_State
              let $Ld_Res_Postal      = $Array_Ld_Res_Postal
              let $Save_Row_Init      = 'Y'
              let $Ld_Resident        = 'X'

              If $Array_Ld_WorkPSDCode = '880000'
                 let $Ld_Locality = '880000'
              Else
                 let $Ld_Locality = $Array_Ld_Locality
              End-If

              If $Array_Ld_ResPSDCode = '880000'
                 let $Ld_LocalTaxType = 'ENR'
              Else
                 let $Ld_LocalTaxType = 'EIT'
              End-If

              Evaluate $Rptg_Period
                When = 'A'
                  move #Tax_Gross to #Ld_Txgrs_Ytd
                  move #Tax_Curr  to #Ld_Tax_Ytd
                  Break
                When = 'Q'
                  move #Tax_Gross to #Ld_Txgrs_Qtd
                  move #Tax_Curr  to #Ld_Tax_Qtd
                  Break
                When = 'M'
                  move #Tax_Gross to #Ld_Txgrs_Mtd
                  move #Tax_Curr  to #Ld_Tax_Mtd
                  Break
              End-Evaluate

              do Check-for-Existing-Rows

              If $Existing = 'N'
                 do Load-Local-Ee-Data
              End-If

              do Clear-Paycheck-Array-Variables
           Else
              let #Step               = 4
              let #Tax_Gross          = #Ttl_Tax_Gross + #Array_Tax_Gross
              let #Tax_Curr           = #Ttl_Tax_Curr  + #Array_Tax_Curr
              let $Ld_RSI_Rptg_Agency = $Array_Ld_Rsi_Rptg_Agency
              let $Ld_Company         = $Array_Ld_Company
              let $Ld_WorkPSDCode     = $Array_Ld_WorkPSDCode
              let $Ld_TcdPSDCode      = $Array_Ld_TcdPSDCode
              let $Ld_Employer_Id_Lwt = $Array_Ld_Employer_Id_Lwt
              let $Ld_ResPSDCode      = $Array_Ld_ResPSDCode
              let $Ld_Wrk_Address1    = $Array_Ld_Wrk_Address1
              let $Ld_Wrk_Address2    = $Array_Ld_Wrk_Address2
              let $Ld_Wrk_City        = $Array_Ld_Wrk_City
              let $Ld_Wrk_County      = $Array_Ld_Wrk_County
              let $Ld_Wrk_State       = $Array_Ld_Wrk_State
              let $Ld_Wrk_Postal      = $Array_Ld_Wrk_Postal
              let $Ld_Res_Address1    = $Array_Ld_Res_Address1
              let $Ld_Res_Address2    = $Array_Ld_Res_Address2
              let $Ld_Res_City        = $Array_Ld_Res_City
              let $Ld_Res_State       = $Array_Ld_Res_State
              let $Ld_Res_Postal      = $Array_Ld_Res_Postal
              let $Save_Row_Init      = 'Y'
              let $Ld_Resident        = 'X'

              If $Array_Ld_WorkPSDCode = '880000'
                 let $Ld_Locality = '880000'
              Else
                 let $Ld_Locality = $Array_Ld_Locality
              End-If

              If $Array_Ld_ResPSDCode = '880000'
                 let $Ld_LocalTaxType = 'ENR'
              Else
                 let $Ld_LocalTaxType = 'EIT'
              End-If

              Evaluate $Rptg_Period
                When = 'A'
                  move #Tax_Gross to #Ld_Txgrs_Ytd
                  move #Tax_Curr  to #Ld_Tax_Ytd
                  Break
                When = 'Q'
                  move #Tax_Gross to #Ld_Txgrs_Qtd
                  move #Tax_Curr  to #Ld_Tax_Qtd
                  Break
                When = 'M'
                  move #Tax_Gross to #Ld_Txgrs_Mtd
                  move #Tax_Curr  to #Ld_Tax_Mtd
                  Break
              End-Evaluate

              do Check-for-Existing-Rows

              If $Existing = 'N'
                 do Load-Local-Ee-Data
              End-If

              do Clear-Paycheck-Array-Variables
           End-If
        End-If
     Else
        If #v = 0
           let #Ttl_Tax_Gross = #Array_Tax_Gross
           let #Ttl_Tax_Curr  = #Array_Tax_Curr
        Else
           If $Array_Key <> $Prev_Array_Key
              let #Step               = 5
              let #Tax_Gross          = #Ttl_Tax_Gross
              let #Tax_Curr           = #Ttl_Tax_Curr
              let $Ld_RSI_Rptg_Agency = $Prev_Array_Ld_Rsi_Rptg_Agency
              let $Ld_Company         = $Prev_Array_Ld_Company
              let $Ld_WorkPSDCode     = $Prev_Array_Ld_WorkPSDCode
              let $Ld_TcdPSDCode      = $Prev_Array_Ld_TcdPSDCode
              let $Ld_Employer_Id_Lwt = $Prev_Array_Ld_Employer_Id_Lwt
              let $Ld_ResPSDCode      = $Prev_Array_Ld_ResPSDCode
              let $Ld_Wrk_Address1    = $Prev_Array_Ld_Wrk_Address1
              let $Ld_Wrk_Address2    = $Prev_Array_Ld_Wrk_Address2
              let $Ld_Wrk_City        = $Prev_Array_Ld_Wrk_City
              let $Ld_Wrk_County      = $Prev_Array_Ld_Wrk_County
              let $Ld_Wrk_State       = $Prev_Array_Ld_Wrk_State
              let $Ld_Wrk_Postal      = $Prev_Array_Ld_Wrk_Postal
              let $Ld_Res_Address1    = $Prev_Array_Ld_Res_Address1
              let $Ld_Res_Address2    = $Prev_Array_Ld_Res_Address2
              let $Ld_Res_City        = $Prev_Array_Ld_Res_City
              let $Ld_Res_State       = $Prev_Array_Ld_Res_State
              let $Ld_Res_Postal      = $Prev_Array_Ld_Res_Postal
              let $Save_Row_Init      = 'Y'
              let $Ld_Resident        = 'X'

              If $Prev_Array_Ld_WorkPSDCode = '880000'
                 let $Ld_Locality = '880000'
              Else
                 let $Ld_Locality = $Prev_Array_Ld_Locality
              End-If

              If $Prev_Array_Ld_ResPSDCode = '880000'
                 let $Ld_LocalTaxType = 'ENR'
              Else
                 let $Ld_LocalTaxType = 'EIT'
              End-If

              Evaluate $Rptg_Period
                When = 'A'
                  move #Tax_Gross to #Ld_Txgrs_Ytd
                  move #Tax_Curr  to #Ld_Tax_Ytd
                  Break
                When = 'Q'
                  move #Tax_Gross to #Ld_Txgrs_Qtd
                  move #Tax_Curr  to #Ld_Tax_Qtd
                  Break
                When = 'M'
                  move #Tax_Gross to #Ld_Txgrs_Mtd
                  move #Tax_Curr  to #Ld_Tax_Mtd
                  Break
              End-Evaluate

              do Check-for-Existing-Rows

              If $Existing = 'N'
                 do Load-Local-Ee-Data
              End-If

              let #Ttl_Tax_Gross = #Array_Tax_Gross
              let #Ttl_Tax_Curr  = #Array_Tax_Curr
           Else
              let #Ttl_Tax_Gross = #Array_Tax_Gross + #Ttl_Tax_Gross
              let #Ttl_Tax_Curr  = #Array_Tax_Curr + #Ttl_Tax_Curr
           End-If
        End-If
     End-If

     let $Prev_Array_Key                = $Array_Key
     let $Prev_Array_Ld_Rsi_Rptg_Agency = $Array_Ld_Rsi_Rptg_Agency
     let $Prev_Array_Ld_Company         = $Array_Ld_Company
     let $Prev_Array_Ld_WorkPSDCode     = $Array_Ld_WorkPSDCode
     let $Prev_Array_Ld_Wrk_Address1    = $Array_Ld_Wrk_Address1
     let $Prev_Array_Ld_Wrk_Address2    = $Array_Ld_Wrk_Address2
     let $Prev_Array_Ld_Wrk_Postal      = $Array_Ld_Wrk_Postal
     let $Prev_Array_Ld_ResPSDCode      = $Array_Ld_ResPSDCode
     let $Prev_Array_Ld_Res_Address1    = $Array_Ld_Res_Address1
     let $Prev_Array_Ld_Res_Address2    = $Array_Ld_Res_Address2
     let $Prev_Array_Ld_Res_Postal      = $Array_Ld_Res_Postal
     let $Prev_Array_Ld_Locality        = $Array_Ld_Locality
     let $Prev_Array_Ld_TcdPSDCode      = $Array_Ld_TcdPSDCode
     let $Prev_Array_Ld_Employer_Id_Lwt = $Array_Ld_Employer_Id_Lwt
     let $Prev_Array_Ld_Wrk_City        = $Array_Ld_Wrk_City
     let $Prev_Array_Ld_Wrk_County      = $Array_Ld_Wrk_County
     let $Prev_Array_Ld_Wrk_State       = $Array_Ld_Wrk_State
     let $Prev_Array_Ld_Res_City        = $Array_Ld_Res_City
     let $Prev_Array_Ld_Res_State       = $Array_Ld_Res_State

     add 1 to #v

  End-While

  Clear-Array NAME=PAYCHECK_DATA

End-Procedure Get-Paycheck-Data-From-Array

!***********************************************************************
! Procedure Check-for-Existing-Rows
!***********************************************************************
Begin-Procedure Check-for-Existing-Rows

  let $Existing = 'N'

BEGIN-SELECT
'Y'

  let $Existing = 'Y'

FROM PS_RSI_TAXPA_LD LDD
WHERE LDD.BALANCE_YEAR     = #Balance_Year
  AND LDD.BALANCE_PERIOD   = #Balance_Period
  AND LDD.RPTG_PERIOD      = $Rptg_Period
  AND LDD.RSI_RPTG_AGENCY  = $Ld_RSI_Rptg_Agency
  AND LDD.COMPANY          = $Ld_Company
  AND LDD.EMPLID           = $Ld_Emplid
  AND LDD.LOCALITY         = $Ld_Locality
  AND LDD.WRK_PSD_CODE     = $Ld_WorkPSDCode
  AND LDD.RSI_WRK_ADDRESS1 = $Ld_Wrk_Address1
  AND LDD.RSI_WRK_ADDRESS2 = $Ld_Wrk_Address2
  AND LDD.RSI_WRK_POSTAL   = $Ld_Wrk_Postal
  AND LDD.RES_PSD_CODE     = $Ld_ResPSDCode
  AND LDD.RSI_RES_ADDRESS1 = $Ld_Res_Address1
  AND LDD.RSI_RES_ADDRESS2 = $Ld_Res_Address2
  AND LDD.RSI_RES_POSTAL   = $Ld_Res_Postal
END-SELECT

End-Procedure Check-for-Existing-Rows

!***********************************************************************
! Procedure Load-Local-Ee-Data
!***********************************************************************
Begin-Procedure Load-Local-Ee-Data

  show 'Procedure = Load-Local-Ee-Data'      !ISDVMZA

BEGIN-SQL on-error=Load-Local-Ee-Data-Error
INSERT INTO PS_RSI_TAXPA_LD (BALANCE_YEAR        ,
                             BALANCE_PERIOD      ,
                             RPTG_PERIOD         ,
                             RSI_RPTG_AGENCY     ,
                             COMPANY             ,
                             EMPLID              ,
                             LOCALITY            ,
                             WRK_PSD_CODE        ,
                             RSI_WRK_ADDRESS1    ,
                             RSI_WRK_ADDRESS2    ,
                             RSI_WRK_POSTAL      ,
                             RES_PSD_CODE        ,
                             RSI_RES_ADDRESS1    ,
                             RSI_RES_ADDRESS2    ,
                             RSI_RES_POSTAL      ,
                             RSI_WRK_CITY        ,
                             RSI_WRK_COUNTY      ,
                             RSI_WRK_STATE       ,
                             RSI_RES_CITY        ,
                             RSI_RES_STATE       ,
                             RSI_TCD_PSD_CODE    ,
                             EMPLOYER_ID_LWT     ,
                             RESIDENT            ,
                             TXGRS_YTD           ,
                             TXGRS_QTD           ,
                             TXGRS_MTD           ,
                             TAX_YTD             ,
                             TAX_QTD             ,
                             TAX_MTD             ,
                             LOCAL_TAX_TYPE      ,
                             RSI_MIN_WORK_FLAG   ,
                             SAVE_ROW            ,
                             DATETIME_STAMP      ,
                             OPRID)
                     VALUES (#Balance_Year       ,
                             #Balance_Period     ,
                             $Rptg_Period        ,
                             $Ld_RSI_Rptg_Agency ,
                             $Ld_Company         ,
                             $Ld_Emplid          ,
                             $Ld_Locality        ,
                             $Ld_WorkPSDCode     ,
                             $Ld_Wrk_Address1    ,
                             $Ld_Wrk_Address2    ,
                             $Ld_Wrk_Postal      ,
                             $Ld_ResPSDCode      ,
                             $Ld_Res_Address1    ,
                             $Ld_Res_Address2    ,
                             $Ld_Res_Postal      ,
                             $Ld_Wrk_City        ,
                             $Ld_Wrk_County      ,
                             $Ld_Wrk_State       ,
                             $Ld_Res_City        ,
                             $Ld_Res_State       ,
                             $Ld_TcdPSDCode      ,
                             $Ld_Employer_Id_Lwt ,
                             $Ld_Resident        ,
                             #Ld_Txgrs_Ytd       ,
                             #Ld_Txgrs_Qtd       ,
                             #Ld_Txgrs_Mtd       ,
                             #Ld_Tax_Ytd         ,
                             #Ld_Tax_Qtd         ,
                             #Ld_Tax_Mtd         ,
                             $Ld_LocalTaxType    ,
                             $Sp1                ,
                             $Save_Row_Init      ,
                             $Start              ,
                             $Prcs_OprID)
END-SQL

End-Procedure Load-Local-Ee-Data

!***********************************************************************
! Procedure Load-Local-Ee-Data-Error
!***********************************************************************
Begin-Procedure Load-Local-Ee-Data-Error

  let $Errors_Found = 'Y'
  let $Err_Msg2     = $sql-error

  #IfDef DebugG
     do Show-DebugG-Statements
  #EndIf

  If $Err_Msg2 <> $Prev_Err_Msg2
     let $Err_Msg = $Err_Msg2
     do Open-ErrorFile
     let $Prev_Err_Msg2 = $Err_Msg2
  End-If
  let #Error_Count = #Error_Count + 1

  If #Error_Count = #Max_Errors
     let $Max_Errors = 'Y'
     Show 'Maximum number of Errors has been exceeded.'
     Show 'The Program has not finished successfully.'
     Show 'Please check the Error Log File.'
     do Error-Log
     Show ''
     STOP
  End-If

End-Procedure Load-Local-Ee-Data-Error

!***********************************************************************
! Procedure Clear-Variables
!***********************************************************************
Begin-Procedure Clear-Variables

  let $Ld_RSI_Rptg_Agency = ' '
  let $Ld_Company         = ' '
  let $Ld_Emplid          = ' '
  let $Ld_Locality        = ' '
  let $Ld_WorkPSDCode     = ' '
  let $Ld_Wrk_Address1    = ' '
  let $Ld_Wrk_Address2    = ' '
  let $Ld_Wrk_Postal      = ' '
  let $Ld_ResPSDCode      = ' '
  let $Ld_Res_Address1    = ' '
  let $Ld_Res_Address2    = ' '
  let $Ld_Res_Postal      = ' '
  let $Ld_Wrk_City        = ' '
  let $Ld_Wrk_County      = ' '
  let $Ld_Wrk_State       = ' '
  let $Ld_Res_City        = ' '
  let $Ld_Res_State       = ' '
  let $Ld_TcdPSDCode      = ' '
  let $Ld_Employer_Id_Lwt = ' '
  let $Ld_Resident        = ' '
  let $Ld_LocalTaxType    = ' '
  let #Ld_Txgrs_Ytd       = 0
  let #Ld_Txgrs_Qtd       = 0
  let #Ld_Txgrs_Mtd       = 0
  let #Ld_Tax_Ytd         = 0
  let #Ld_Tax_Qtd         = 0
  let #Ld_Tax_Mtd         = 0

End-Procedure Clear-Variables

!***********************************************************************
! Procedure Clear-Paycheck-Array-Variables
!***********************************************************************
Begin-Procedure Clear-Paycheck-Array-Variables

  let #Tax_Gross                     = 0
  let #Tax_Curr                      = 0
  let #Ttl_Tax_Gross                 = 0
  let #Ttl_Tax_Curr                  = 0
  let $Array_Key                     = ''
  let $Prev_Array_Key                = ''
  let $Prev_Array_Ld_Rsi_Rptg_Agency = ''
  let $Prev_Array_Ld_Company         = ''
  let $Prev_Array_Ld_WorkPSDCode     = ''
  let $Prev_Array_Ld_Locality        = ''
  let $Prev_Array_Ld_TcdPSDCode      = ''
  let $Prev_Array_Ld_Employer_Id_Lwt = ''
  let $Prev_Array_Ld_ResPSDCode      = ''
  let $Prev_Array_Ld_Res_Address1    = ''
  let $Prev_Array_Ld_Res_Address2    = ''
  let $Prev_Array_Ld_Res_City        = ''
  let $Prev_Array_Ld_Res_State       = ''
  let $Prev_Array_Ld_Res_Postal      = ''
  let $Prev_Array_Ld_Wrk_Address1    = ''
  let $Prev_Array_Ld_Wrk_Address2    = ''
  let $Prev_Array_Ld_Wrk_City        = ''
  let $Prev_Array_Ld_Wrk_County      = ''
  let $Prev_Array_Ld_Wrk_State       = ''
  let $Prev_Array_Ld_Wrk_Postal      = ''

End-Procedure Clear-Paycheck-Array-Variables

!***********************************************************************
! Procedure Remove-Unreported-Rows
!***********************************************************************
Begin-Procedure Remove-Unreported-Rows

BEGIN-SQL on-error=Ignore-SQL-Error
DELETE FROM PS_RSI_TAXPA_LD
WHERE BALANCE_YEAR           = #Balance_Year
  AND BALANCE_PERIOD         = #Balance_Period
  AND RPTG_PERIOD            = $Rptg_Period
  AND SAVE_ROW          NOT IN ('F','I','U')
  AND RSI_MIN_WORK_FLAG NOT IN ('I','U')
END-SQL

End-Procedure Remove-Unreported-Rows

!***********************************************************************
! Procedure Get-Localities
!***********************************************************************
Begin-Procedure Get-Localities

  show 'Procedure = Get-Localities'      !ISDVMZA

  #IfDef MICROSOFT
     let $Lcl_Where_Clause = ' SUBSTRING(LX.OTH_LOCALITY_ABBRV,1,2) '
  #EndIf
  #IfDef SYBASE
     let $Lcl_Where_Clause = ' SUBSTRING(LX.OTH_LOCALITY_ABBRV,1,2) '
  #EndIf
  #IfDef ORACLE
     let $Lcl_Where_Clause = ' SUBSTR(LX.OTH_LOCALITY_ABBRV,1,2) '
  #EndIf
  #IfDef INFORMIX
     let $Lcl_Where_Clause = ' SUBSTR(LX.OTH_LOCALITY_ABBRV,1,2) '
  #EndIf
  #IfDef DB2
     let $Lcl_Where_Clause = ' SUBSTR(LX.OTH_LOCALITY_ABBRV,1,2) '
  #EndIf

  Evaluate $Rptg_Period
    When = 'A'
      let $Get_Localities_Where_Clause = ' AND (RX.TXGRS_YTD <> 0 AND RX.TAX_YTD <> 0) '
      Break
    When = 'Q'
      let $Get_Localities_Where_Clause = ' AND (RX.TXGRS_QTD <> 0 AND RX.TAX_QTD <> 0) '
      Break
    When = 'M'
      let $Get_Localities_Where_Clause = ' AND (RX.TXGRS_MTD <> 0 AND RX.TAX_MTD <> 0) '
      Break
  End-Evaluate

  let #Error_Count = 0

BEGIN-SELECT DISTINCT
RX.LOCALITY             &LOCALITY

  let $Location = rtrim(ltrim(&LOCALITY, ' '), ' ')
  let $Valid_Locality = 'N'

  Evaluate $Location
    When = '880000'
    When = '990000'
      ! Skip Validation
      Break
    When-Other
      do Validate-Locality
      Break
  End-Evaluate

FROM PS_RSI_TAXPA_LD RX
WHERE RX.BALANCE_YEAR   = #Balance_Year
  AND RX.BALANCE_PERIOD = #Balance_Period
  AND RX.RPTG_PERIOD    = $Rptg_Period
  AND RX.LOCALITY      IN (SELECT DISTINCT LX.LOCALITY
                           FROM PS_LOCAL_TAX_TBL LX
                           WHERE LX.STATE      = 'PA'
                             AND LX.LOCALITY   = RX.LOCALITY
                             AND LX.EFF_STATUS = 'A'
                             AND LX.EFFDT      = (SELECT Max(LX1.EFFDT)
                                                  FROM PS_LOCAL_TAX_TBL LX1
                                                  WHERE LX1.STATE    = LX.STATE
                                                    AND LX1.LOCALITY = LX.LOCALITY
                                                    AND LX1.EFFDT   <= $Period_End_Date)
                             AND {Dyn-S}$Lcl_Where_Clause{Dyn-E}    IN (SELECT DISTINCT EXA.RSI_TCD_PSD_CODE
                                                                        FROM PS_RSI_ST_TX_AGNCS EXA
                                                                        WHERE EXA.RSI_RPTG_AGENCY <> ' '
                                                                          AND EXA.EFF_STATUS      <> 'I'
                                                                          AND EXA.EFFDT            = (SELECT MAX(EXB.EFFDT)
                                                                                                      FROM PS_RSI_ST_TX_AGNCS EXB
                                                                                                      WHERE EXA.RSI_TCD_PSD_CODE = EXB.RSI_TCD_PSD_CODE
                                                                                                        AND EXB.EFFDT           <= $Period_End_Date)))
{Dyn-S}$Get_Localities_Where_Clause{Dyn-E}
ORDER BY LOCALITY
END-SELECT

End-Procedure Get-Localities

!***********************************************************************
! Procedure Validate-Locality
!***********************************************************************
Begin-Procedure Validate-Locality

BEGIN-SELECT
LF1.LOCALITY

  let $Valid_Locality = 'Y'

FROM PS_LOCATION_TBL LF1
WHERE LF1.LOCALITY = $Location
  AND LF1.EFFDT    = (SELECT MAX(LF2.EFFDT)
                      FROM PS_LOCATION_TBL LF2
                      WHERE LF1.SETID    = LF2.SETID
                        AND LF1.LOCATION = LF2.LOCATION
                        AND LF2.EFFDT   <= $Period_End_Date)
END-SELECT

  If $Valid_Locality = 'N'
     let $Errors_Found = 'Y'
     let $Err_Msg3 = 'Locality: ' || $Location  || ', doesn''t exist in the Location table.'

     If $Err_Msg3 <> $Prev_Err_Msg3
        let $Err_Msg = $Err_Msg3
        do Open-ErrorFile
        let $Prev_Err_Msg3 = $Err_Msg3
     End-If
     let #Error_Count = #Error_Count + 1

     If #Error_Count = #Max_Errors
        let $Max_Errors = 'Y'
        Show 'Maximum number of Errors has been exceeded.'
        Show 'The Program has not finished successfully.'
        Show 'Please check the Error Log File.'
        do Error-Log
        Show ''
        STOP
     End-If
  End-If

End-Procedure Validate-Locality

!***********************************************************************
! Procedure Validate-Transmitter-Co
!***********************************************************************
Begin-Procedure Validate-Transmitter-Co

  let $XmitterFound = 'N'

BEGIN-SELECT
CT.DESCR
CT.FEDERAL_EIN
CT.ADDRESS1
CT.ADDRESS2
CT.CITY
CT.STATE
CT.POSTAL

  move &CT.Federal_EIN to $Xmitr_FedEIN  099999999
  let $XmitterFound = 'Y'

FROM PS_COMPANY_TBL CT
WHERE CT.COMPANY = $Company_Data
  AND CT.EFFDT   = (SELECT MAX(CT1.EFFDT)
                    FROM PS_COMPANY_TBL CT1
                    WHERE CT.COMPANY  = CT1.COMPANY
                      AND CT1.EFFDT  <= $Period_End_Date)
END-SELECT

  If $XmitterFound = 'N'
     let $Errors_Found = 'Y'
     let $Err_Msg4 = 'Company data not setup for Company: ' || $Company_Data

     If $Err_Msg4 <> $Prev_Err_Msg4
        let $Err_Msg = $Err_Msg4
        do Open-ErrorFile
        let $Prev_Err_Msg4 = $Err_Msg4
     End-If
  End-If

End-Procedure Validate-Transmitter-Co

!***********************************************************************
! Procedure Get-Transmitter-Data
!***********************************************************************
Begin-Procedure Get-Transmitter-Data

BEGIN-SELECT
RC.CONTACT_NAME_SSA
RC.TELEPHONE_NBR
RC.PHONE_EXTN
RC.EMAIL_ADDR_MMREF
RC.CONTACT_FAX
RC.NOTIFY_METHOD

FROM PS_TAX960_PARM RC
END-SELECT

  If rtrim(ltrim(&RC.CONTACT_NAME_SSA, ' '), ' ') = ''
     let $Errors_Found = 'Y'
     let $Err_Msg5 = 'EF Parameters must be set up on SETUP Menu. Please reprocess ' ||
                     'file after setting up EF Parameters.'

     If $Err_Msg5 <> $Prev_Err_Msg5
        let $Err_Msg = $Err_Msg5
        do Open-ErrorFile
        let $Prev_Err_Msg5 = $Err_Msg5
     End-If
  End-If

  move &RC.TELEPHONE_NBR to $Telephone_Nbr

  let $ValueToClean = $Telephone_Nbr
  do Strip-Characters($ValueToClean, $CleanedValue)
  let $Telephone_Nbr = $CleanedValue

  move $Telephone_Nbr  to $Telephone_Nbr_Orig xxx-xxx-xxxx
  move &RC.CONTACT_FAX to $Contact_Fax

  let $ValueToClean = $Contact_Fax
  do Strip-Characters($ValueToClean, $CleanedValue)
  let $Contact_Fax = $CleanedValue

  move $Contact_Fax         to $Contact_Fax_Orig xxx-xxx-xxxx
  move &RC.NOTIFY_METHOD    to $Notify_Method
  move &RC.EMAIL_ADDR_MMREF to $Email_Addr
  let  $Contact_Name_SSA     = translate(&RC.CONTACT_NAME_SSA,',','')

End-Procedure Get-Transmitter-Data

!***********************************************************************
! Procedure Get-Agency-Parameters
!***********************************************************************
Begin-Procedure Get-Agency-Parameters

BEGIN-SELECT
F.W2_RPTG_AGENCY       &F.W2_RPTG_AGENCY
F.RSI_COMBINE_CO       &F.RSI_COMBINE_CO
F.RSI_COMBINE_TCD      &F.RSI_COMBINE_TCD

  let $Rptg_Agency     = rtrim(ltrim(&F.W2_RPTG_AGENCY, ' '), ' ')
  let $RSI_Combine_Co  = &F.RSI_COMBINE_CO
  let $RSI_Combine_Tcd = &F.RSI_COMBINE_TCD
  let $Print_Detail    = 'Y'
  let $Ld_Companies_Where_Clause = ''

  If $Rptg_Agency <> $PrevRptg_Agency
     do Close-File
  End-If

  let $TCD_PSD_Where_Clause = ''
  let $Process_Agency_EE_Data_Where_Clause2 = ''

  do Check-Agency-Data

  If $Agency_Data_Exists = 'Y'
     do Populate-Headings
     do Get-Combine-Files

     Evaluate $Combine_Files
       When = 'Y'
         let $Paper_Filers = 'N'
         Break
       When = 'N'
         let $Paper_Filers = 'Y'
         Break
     End-Evaluate

     let $Des_Agency           = 'N'
     let $Co_Designated_Agency = ''
     let $Designated_Agency    = ''

     Evaluate $Paper_Filers
       When = 'Y'
         Evaluate $RSI_Combine_Co
           When = 'Y'
             do File-Create
             do Process-Agency-EE-Data
             do After-Agency
             Break
           When = 'N'
             do Process-Agency-EE-Data
             Break
         End-Evaluate
         Break
       When = 'N'
         Evaluate $Sel_Company
           When = 'C'
             do Check-Company-Des-Agency

             If $Co_Designated_Agency <> ''
                let $Des_Agency  = 'Y'
                let $Rptg_Agency = rtrim(ltrim($Co_Designated_Agency, ' '), ' ')
             Else
                let $Des_Agency  = 'N'
             End-If
             Break
           When = 'R'
             do Check-Des-Agency

             If $Designated_Agency <> ''
                let $Des_Agency  = 'Y'
                let $Rptg_Agency = rtrim(ltrim($Designated_Agency, ' '), ' ')
             Else
                let $Des_Agency = 'N'
             End-If
             Break
         End-Evaluate

         Evaluate $Des_Agency
           When = 'Y'
             let $RSI_Combine_Tcd = 'Y'

             Evaluate $RSI_Combine_Co
               When = 'Y'
                 do File-Create
                 do Process-Agency-EE-Data
                 do After-Agency
                 Break
               When = 'N'
                 do Process-Agency-EE-Data
                 Break
             End-Evaluate
             Break
           When = 'N'
             Evaluate $RSI_Combine_Co
               When = 'Y'
                 Evaluate $RSI_Combine_Tcd
                   When = 'Y'
                     do File-Create
                     do Process-Agency-EE-Data
                     do After-Agency
                     Break
                   When = 'N'
                     do Get-TCDs
                     Break
                 End-Evaluate
                 Break
               When = 'N'
                 Evaluate $RSI_Combine_Tcd
                   When = 'Y'
                     do Process-Agency-EE-Data
                     Break
                   When = 'N'
                     do Get-TCDs
                     Break
                 End-Evaluate
                 Break
             End-Evaluate
             Break
         End-Evaluate
         Break
     End-Evaluate
  End-If

  let $PrevRptg_Agency = $Rptg_Agency

FROM PS_RC_RSITAXPA F
WHERE F.OPRID       = $Prcs_OprID
  AND F.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
ORDER BY F.W2_RPTG_AGENCY
END-SELECT

End-Procedure Get-Agency-Parameters

!***********************************************************************
! Procedure Get-Combine-Files
!***********************************************************************
Begin-Procedure Get-Combine-Files

BEGIN-SELECT DISTINCT
P1.RSI_COMBINE_FILE      &P1.RSI_COMBINE_FILE

  let $Combine_Files = &P1.RSI_COMBINE_FILE

FROM PS_RSI_ST_TX_AGNCS P1
WHERE P1.RSI_RPTG_AGENCY = $Rptg_Agency
  AND P1.EFFDT           = (SELECT MAX(P2.EFFDT)
                            FROM PS_RSI_ST_TX_AGNCS P2
                            WHERE P1.RSI_TCD_PSD_CODE = P2.RSI_TCD_PSD_CODE
                              AND P2.EFFDT           <= $Period_End_Date)
END-SELECT

End-Procedure Get-Combine-Files

!***********************************************************************
! Procedure Check-Company-Des-Agency
!***********************************************************************
Begin-Procedure Check-Company-Des-Agency

BEGIN-SELECT DISTINCT
FO.RSI_RPTG_AGENCY      &FO.RSI_RPTG_AGENCY

  let $Co_Designated_Agency = rtrim(ltrim(&FO.RSI_RPTG_AGENCY, ' '), ' ')

FROM PS_RC_RSITAXPA_CO FO
WHERE FO.OPRID           = $Prcs_OprID
  AND FO.RUN_CNTL_ID     = $Prcs_Run_Cntl_ID
  AND FO.RSI_RPTG_AGENCY = $Rptg_Agency
ORDER BY FO.RSI_RPTG_AGENCY
END-SELECT

End-Procedure Check-Company-Des-Agency

!***********************************************************************
! Procedure Check-Des-Agency
!***********************************************************************
Begin-Procedure Check-Des-Agency

BEGIN-SELECT
FE.RSI_RPTG_AGENCY       &FE.RSI_RPTG_AGENCY

  let $Ld_TcdPSDCode = rtrim(ltrim(&FE.RSI_RPTG_AGENCY, ' '), ' ')
  do Lookup-Tax-Collection-Agency
  let $Designated_Agency = $Ld_Rsi_Rptg_Agency

FROM PS_RC_RSITAXPA_TBL FE
WHERE FE.OPRID            = $Prcs_OprID
  AND FE.RUN_CNTL_ID      = $Prcs_Run_Cntl_ID
  AND FE.REG_SELECT_COMP <> 'C'
END-SELECT

End-Procedure Check-Des-Agency

!***********************************************************************
! Procedure Get-TCDs
!***********************************************************************
Begin-Procedure Get-TCDs

BEGIN-SELECT DISTINCT
P3.RSI_TCD_PSD_CODE      &P3.RSI_TCD_PSD_CODE

  let $TcdPSDCode           = rtrim(ltrim(&P3.RSI_TCD_PSD_CODE, ' '), ' ')
  let $TCD_PSD_Where_Clause = ' AND RSI_TCD_PSD_CODE =  ''' || $TcdPSDCode || ''''
  let $Process_Agency_EE_Data_Where_Clause2 = ' AND E.RSI_TCD_PSD_CODE =  ''' || $TcdPSDCode || ''''

  Evaluate $RSI_Combine_Co
    When = 'Y'
      do Close-File
      do Check-Agency-Data

      If $Agency_Data_Exists = 'Y'
         do File-Create
         do Process-Agency-EE-Data
         do After-Agency
      End-If
      Break
    When = 'N'
      do Get-Ld-Companies
      Break
  End-Evaluate


FROM PS_RSI_ST_TX_AGNCS P3
WHERE P3.RSI_RPTG_AGENCY = $Rptg_Agency
  AND P3.EFFDT           = (SELECT MAX(P4.EFFDT)
                            FROM PS_RSI_ST_TX_AGNCS P4
                            WHERE P3.RSI_TCD_PSD_CODE = P4.RSI_TCD_PSD_CODE
                              AND P4.EFFDT           <= $Period_End_Date)
ORDER BY P3.RSI_TCD_PSD_CODE
END-SELECT

End-Procedure Get-TCDs

!***********************************************************************
! Procedure Get-Ld-Companies
!***********************************************************************
Begin-Procedure Get-Ld-Companies

BEGIN-SELECT DISTINCT
T.COMPANY               &T.COMPANY

  let $LdCompany = rtrim(ltrim(&T.COMPANY, ' '), ' ')
  let $Ld_Companies_Where_Clause = ' AND E.COMPANY =  ''' || $LdCompany || ''''

      do Process-Agency-EE-Data

FROM PS_RSI_TAXPA_LD T
WHERE T.RSI_RPTG_AGENCY = $Rptg_Agency
ORDER BY T.COMPANY
END-SELECT

End-Procedure Get-Ld-Companies

!***********************************************************************
! Procedure Check-Agency-Data
!***********************************************************************
Begin-Procedure Check-Agency-Data

  let $Agency_Data_Exists = 'N'

BEGIN-SELECT DISTINCT
RSI_RPTG_AGENCY

  let $Agency_Data_Exists = 'Y'

FROM PS_RSI_TAXPA_LD
{Dyn-S}$Run_Parms_Where_Clause{Dyn-E}
  AND RSI_RPTG_AGENCY  = $Rptg_Agency
  AND (TXGRS_YTD <> 0
  OR TXGRS_QTD <> 0
  OR TXGRS_MTD <> 0
  OR TAX_YTD <> 0
  OR TAX_QTD <> 0
  OR TAX_MTD <> 0)
{Dyn-S}$TCD_PSD_Where_Clause{Dyn-E}
END-SELECT

End-Procedure Check-Agency-Data

!***********************************************************************
! Procedure Process-Agency-EE-Data
!***********************************************************************
Begin-Procedure Process-Agency-EE-Data

  show 'Procedure = Process-Agency-EE-Data'      !ISDVMZA

  let $Form_Open = 'N'

  If $Sel_Company = 'C'
      let $Selected_Companies_Where_Clause = ' AND E.COMPANY IN (SELECT E1.SELECTED_COMPANY FROM PS_RC_RSITAXPA_CO E1 '
                                          || ' WHERE E1.OPRID = ''' || $Prcs_OprID || ''''
                                          || ' AND E1.RUN_CNTL_ID = ''' || $Prcs_Run_Cntl_ID  || ''') '
  End-If

  #Define On_Break_Stmt () on-break print=never BEFORE=Before-Work-PSD-Chg level=2 AFTER=After-Work-PSD-Chg level=2

  #IfDef MICROSOFT
     let $Select_Fields = 'E.RSI_WRK_POSTAL + E.RSI_WRK_ADDRESS2 + E.RSI_WRK_ADDRESS1 '
  #EndIf
  #IfDef SYBASE
     let $Select_Fields = 'E.RSI_WRK_POSTAL + E.RSI_WRK_ADDRESS2 + E.RSI_WRK_ADDRESS1 '
  #EndIf
  #IfDef ORACLE
     let $Select_Fields = 'E.RSI_WRK_POSTAL || E.RSI_WRK_ADDRESS2 || E.RSI_WRK_ADDRESS1 '
  #EndIf
  #IfDef INFORMIX
     let $Select_Fields = 'E.RSI_WRK_POSTAL || E.RSI_WRK_ADDRESS2 || E.RSI_WRK_ADDRESS1 '
  #EndIf
  #IfDef DB2
     let $Select_Fields = 'E.RSI_WRK_POSTAL || E.RSI_WRK_ADDRESS2 || E.RSI_WRK_ADDRESS1 '
  #EndIf

BEGIN-SELECT
E.COMPANY                        () on-break print=never BEFORE=Before-Reporting-Co-Chg level=1
                                                         AFTER=After-Reporting-Co-Chg level=1
{Dyn-S}$Select_Fields{Dyn-E}     &ADDRESS_BREAK_LOGIC=Char {On_Break_Stmt}
E.EMPLID                         () on-break print=never BEFORE=Before-Emplid-Chg level=3
E.WRK_PSD_CODE
E.RSI_WRK_ADDRESS1
E.RSI_WRK_ADDRESS2
E.RSI_WRK_CITY
E.RSI_WRK_COUNTY
E.RSI_WRK_STATE
E.RSI_WRK_POSTAL
E.RES_PSD_CODE
E.RSI_RES_ADDRESS1
E.RSI_RES_ADDRESS2
E.RSI_RES_CITY
E.RSI_RES_STATE
E.RSI_RES_POSTAL
E.LOCALITY
E.TXGRS_YTD
E.TXGRS_QTD
E.TXGRS_MTD
E.TAX_YTD
E.TAX_QTD
E.TAX_MTD
E.LOCAL_TAX_TYPE
E.EMPLOYER_ID_LWT

  let $WorkPSDCode       = &E.WRK_PSD_CODE
  let $ResPSDCode        = &E.RES_PSD_CODE
  let $LocalTaxType      = &E.LOCAL_TAX_TYPE
  let $Locality          = &E.LOCALITY
  let $ErAddress1        = &E.RSI_WRK_ADDRESS1
  let $ErAddress2        = &E.RSI_WRK_ADDRESS2
  let $ErCity            = &E.RSI_WRK_CITY
  let $ErCounty          = &E.RSI_WRK_COUNTY
  let $ErState           = &E.RSI_WRK_STATE
  let $ErZip             = &E.RSI_WRK_POSTAL
  let $EeAddress1        = &E.RSI_RES_ADDRESS1
  let $EeAddress2        = &E.RSI_RES_ADDRESS2
  let $EeCity            = &E.RSI_RES_CITY
  let $EeState           = &E.RSI_RES_STATE
  let $EeZip             = &E.RSI_RES_POSTAL
  let $Employer_Id_Lwt   = &E.EMPLOYER_ID_LWT
  let $EeCompany         = &E.COMPANY

  If $E_Record_Written = 'N'
     let $NewPage = 'Y'
     do Write-E-Record
     let $E_Record_Written = 'Y'
  End-If

  Evaluate $Rptg_Period
    When = 'A'
      move &E.TXGRS_YTD     to #Txgrs_Ytd_Amount
      move &E.TAX_YTD       to #Tax_Ytd_Amount
      let #Txgrs_Ytd_Amount  = #Txgrs_Ytd_Amount * 100
      let #Tax_Ytd_Amount    = #Tax_Ytd_Amount * 100
      add #Txgrs_Ytd_Amount to #Local_Wages
      add #Tax_Ytd_Amount   to #Local_Tax
      Break
    When = 'Q'
      move &E.TXGRS_QTD     to #Txgrs_Qtd_Amount
      move &E.TAX_QTD       to #Tax_Qtd_Amount
      let #Txgrs_Qtd_Amount  = #Txgrs_Qtd_Amount * 100
      let #Tax_Qtd_Amount    = #Tax_Qtd_Amount * 100
      add #Txgrs_Qtd_Amount to #Local_Wages
      add #Tax_Qtd_Amount   to #Local_Tax
      Break
    When = 'M'
      move &E.TXGRS_MTD     to #Txgrs_Mtd_Amount
      move &E.TAX_MTD       to #Tax_Mtd_Amount
      let #Txgrs_Mtd_Amount  = #Txgrs_Mtd_Amount * 100
      let #Tax_Mtd_Amount    = #Tax_Mtd_Amount * 100
      add #Txgrs_Mtd_Amount to #Local_Wages
      add #Tax_Mtd_Amount   to #Local_Tax
      Break
  End-Evaluate

  add #Local_Wages to #Lclty_Local_Wages
  add #Local_Tax   to #Lclty_Local_Tax
  add #Local_Wages to #Co_Local_Wages
  add #Local_Tax   to #Co_Local_Tax

  If #Local_Tax < 0
     let $Negative_Tax = '-'
  Else
     let $Negative_Tax = ''
  End-If

  add 1 to #Co_Ee_Count
  add 1 to #Lclty_Ee_Count

  do Write-Print-Ee-Detail

FROM PS_RSI_TAXPA_LD E
WHERE E.RSI_RPTG_AGENCY = $Rptg_Agency
  AND E.BALANCE_YEAR    = #Balance_Year
  AND E.BALANCE_PERIOD  = #Balance_Period
  AND E.RPTG_PERIOD     = $Rptg_Period
  AND E.WRK_PSD_CODE   <> ' '
  {Dyn-S}$Process_Agency_EE_Data_Where_Clause1{Dyn-E}
  {Dyn-S}$Process_Agency_EE_Data_Where_Clause2{Dyn-E}
  {Dyn-S}$Ld_Companies_Where_Clause{Dyn-E}
  {Dyn-S}$Selected_Companies_Where_Clause{Dyn-E}
ORDER BY E.COMPANY, E.WRK_PSD_CODE, E.RSI_WRK_POSTAL, E.RSI_WRK_ADDRESS2, E.RSI_WRK_ADDRESS1, E.EMPLID
END-SELECT

End-Procedure Process-Agency-EE-Data

!***********************************************************************
! Procedure Before-Reporting-Co-Chg
!***********************************************************************
Begin-Procedure Before-Reporting-Co-Chg

  let $Company    = &E.COMPANY
  let $Filing_Ind = ''

  do Get-Filing-Indicator
  do Get-Company-Info
  do Get-Employer-Kind-Type

  If $RSI_Combine_Co = 'N'
     do File-Create
  End-If

End-Procedure Before-Reporting-Co-Chg

!***********************************************************************
! Procedure Get-Filing-Indicator
!***********************************************************************
Begin-Procedure Get-Filing-Indicator

BEGIN-SELECT DISTINCT
FI.RPTG_PERIOD

  let $Filing_Ind = rtrim(&FI.RPTG_PERIOD, ' ')
  If $Filing_Ind <> 'M'
     let $Filing_Ind = 'Q'
  End-If

FROM PS_RSI_TAXPA_LD FI
WHERE FI.COMPANY        = $Company
  AND FI.BALANCE_YEAR   = #Balance_Year
  AND FI.RPTG_PERIOD   <> 'W'
  AND FI.BALANCE_PERIOD = (SELECT MAX(FI1.BALANCE_PERIOD)
                           FROM PS_RSI_TAXPA_LD FI1
                           WHERE FI1.COMPANY      = FI.COMPANY
                             AND FI1.BALANCE_YEAR = FI.BALANCE_YEAR
                             AND FI1.RPTG_PERIOD  = FI.RPTG_PERIOD)
END-SELECT

End-Procedure Get-Filing-Indicator

!***********************************************************************
! Procedure Get-Company-Info
!***********************************************************************
Begin-Procedure Get-Company-Info

BEGIN-SELECT
AX.DESCR
AX.FEDERAL_EIN

FROM PS_COMPANY_TBL AX
WHERE AX.COMPANY = $Company
  AND AX.EFFDT   = (SELECT MAX(AAX.EFFDT)
                   FROM PS_COMPANY_TBL AAX
                   WHERE AX.COMPANY = AAX.COMPANY
                     AND AAX.EFFDT <= $Period_End_Date)
END-SELECT

End-Procedure Get-Company-Info

!***********************************************************************
! Procedure Get-Employer-Kind-Type
!***********************************************************************
Begin-Procedure Get-Employer-Kind-Type

BEGIN-SELECT
#If LAST_ORACLE_UPDATE > 2011.4
W2.EMPLOYMENT_TYPE     &EMPLOYMENT_TYPE
W2.EMPLOYER_KIND       &EMPLOYER_KIND
#Else
#IfDef CC
W2.CCI_KIND_OF_ER      &EMPLOYER_KIND
#Else
W2.RSI_ER_KIND         &EMPLOYER_KIND
#EndIf
#EndIf
W2.BUSI_TERM_IND       &BUSI_TERM_IND

  let $Er_Kind = rtrim(ltrim(&EMPLOYER_KIND,' '),' ')

  #If LAST_ORACLE_UPDATE > 2011.4
     let $Empl_Type = rtrim(ltrim(&EMPLOYMENT_TYPE,' '),' ')
  #Else
     let $Empl_Type = rtrim(ltrim(&TX.EMPLOYMENT_TYPE,' '),' ')
  #EndIf

  move &BUSI_TERM_IND to $Busi_Term_Ind

  If $Busi_Term_Ind = 'Y'
     let $Busi_Term_Ind = '1'
  Else
     let $Busi_Term_Ind = '0'
  End-If

FROM PS_W2_COMPANY W2
WHERE W2.COMPANY       = $Company
  AND W2.CALENDAR_YEAR = #Balance_Year
  AND W2.TAXFORM_ID    = 'W'
END-SELECT

End-Procedure Get-Employer-Kind-Type

!***********************************************************************
! Procedure After-Reporting-Co-Chg
!***********************************************************************
Begin-Procedure After-Reporting-Co-Chg

  do Print-Company-Totals

  If $RSI_Combine_Co = 'N'
     do After-Agency
  End-If

End-Procedure After-Reporting-Co-Chg

!***********************************************************************
! Procedure Print-Company-Totals
!***********************************************************************
Begin-Procedure Print-Company-Totals

  use-report DEFAULT

  let $Column_Hdr = 'Agency Company Totals'
  new-page
  do Print-Columns

  do Format-Number(#Co_Ee_Count, $Co_Ee_Count, 'B999,999')
  let #CoLocal_Wages = #Co_Local_Wages / 100
  do Format-Number(#CoLocal_Wages, $CoLocal_Wages, 'B9,999,999,999.99')
  let #CoLocal_Tax = #Co_Local_Tax / 100
  do Format-Number(#CoLocal_Tax, $CoLocal_Tax, 'B999,999,999.99')

  print $Co_Ee_Count      (+1,104)
  print $CoLocal_Wages    (,143)
  print $CoLocal_Tax      (,159)

  add #Co_Ee_Count to #AgencyRcdCnt_Ttl

  move $Sp1 to $Co_Ee_Count
  move $Sp1 to $CoLocal_Wages
  move $Sp1 to $CoLocal_Tax
  move 0    to #Co_Ee_Count
  move 0    to #Co_Local_Wages
  move 0    to #Co_Local_Tax

  let $NewPage_Written = 'N'

End-Procedure Print-Company-Totals

!***********************************************************************
! Procedure Before-Work-PSD-Chg
!***********************************************************************
Begin-Procedure Before-Work-PSD-Chg

  let #Error_Count     = 0
  let $Employer_Id_Lwt = &E.EMPLOYER_ID_LWT

  move &AX.FEDERAL_EIN to $FedEIN   099999999
  move &AX.DESCR       to $ErName

  move 0 to #Count_S
  move 0 to #Count_T

  let $E_Record_Written = 'N'
  let $Column_Hdr       = ' '

  If $Print_Detail = 'Y'

     If #CURRENT-LINE > #Page_Lines
        let $Column_Hdr = 'Employee Detail'
        new-page
        do Print-Columns
     Else
        do Print-Columns
     End-If
  End-If

End-Procedure Before-Work-PSD-Chg

!***********************************************************************
! Procedure After-Work-PSD-Chg
!***********************************************************************
Begin-Procedure After-Work-PSD-Chg

  If $Paper_Filers = 'Y'
     If $Create_File = 'Y'
        If $EndOfPage = 'N'
           use-report PRINTFORMS
           Print $Page_Total_Wages (679,43)
           Print $Page_Total_Taxes (679,57)
        End-If
           use-report PRINTFORMS
           let #Page_Count = #Page_Count + 1

           do Format-Number (#Page_Count, $Page_Count, '888,888')
           do Format-Number (#EE_Printed_Cnt, $EE_Printed_Cnt, '888,888')
           do Format-Number (#EE_Total_Taxes, $EE_Total_Taxes, '888,888,888.88')
           do Print-Worksite-Totals-Page

           let #EE_Page_Cnt      = 0
           let #Page_Total_Wages = 0
           let #Page_Total_Taxes = 0
           let #Ee_Wages         = 0
           let #Ee_Taxes         = 0
           let #EE_Total_Taxes   = 0
           let #EE_Printed_Cnt   = 0
           let $Page_Total_Wages = ''
           let $Page_Total_Taxes = ''
           let $EE_Total_Taxes   = ''
           let $Page_Count       = ''
     End-If
  End-If

  let $Column_Hdr = ' '

  If #Count_S <> 0
     let #Count_T = #Count_S
     do Write-T-Record
     add #Count_T to #Count_F
     add #Count_S to #AgencyRcdCnt
  End-If
  do Print-Local-Totals
  do Clear-T-Record

  move $Sp1 to $Lclty_Local_Wages
  move $Sp1 to $Lclty_Local_Tax
  move $Sp1 to $Lclty_Ee_Count
  move 0    to #Lclty_Local_Wages
  move 0    to #Lclty_Local_Tax
  move 0    to #Lclty_Ee_Count

End-Procedure After-Work-PSD-Chg

!***********************************************************************
! Procedure Print-Worksite-Totals-Page
!***********************************************************************
Begin-Procedure Print-Worksite-Totals-Page

  use-report PRINTFORMS
  new-page
  do Alter-Printer-P9

  let $WorksiteTitle = $Rptg_Agency || ' - PA Act 32 EIT File Summary Report'
  print 'PeopleSoft'                   (+1)          center
  print 'Report ID:'                   (+15,1)
  print $ReportID                      ()
  print $WorksiteTitle                 ()            center
  print 'Run Date:'                    (,65)
  print $ReportDate                    ()
  print $ReportDescr                   (+12,)        center
  print 'Run Time:'                    (,65)
  print $ReportTime                    ()
  let   $Separator = rpad('',107,'_')
  print $Separator                     (+20,1)

  print 'Municipal Taxing Authority: ' (+15,1)
  print  $ErCity                       (,35)
  print 'Employer Worksite PSD Code: ' (+15,1)
  print  $EmplrPSDCode                 (,35)
  print 'County:                     ' (+15,1)
  print  $ErCounty                     (,35)

  let $out = 'The Employer Quarterly Return is generated to report Pennsylvania local earned income tax to tax collection'
  print $out (+30,1)
  let $out = 'agencies that do not accept electronic files.  This report generates a separate Filing Summary for each '
  print $out (+12,1)
  let  $out = 'Worksite PSD, which must be completed by the employer.  The information below may be used to assist you in'
  print $out (+12,1)
  let  $out = 'completing the Filing Summary for the corresponding worksite.'
  print $out (+12,1)

  print 'Filing Summary:'              (+30,1)
  let   $Separator = rpad('',107,'-')
  print $Separator                     (+7,1)
  let   $Separator = rpad('',36,'. ')
  print 'Box 1 '                       (+15,1)
  print $Separator                     ()
  print '$'                            (,34)
  print  $EE_Total_Taxes               (,35)
  print 'Box 8 '                       (+15,1)
  print $Separator                     ()
  print  $Period_End_Date              (,35)
  print 'Box 9 '                       (+15,1)
  print $Separator                     ()
  print  $Page_Count                   (,35)
  print 'Box 10'                       (+15,1)
  print $Separator                     ()
  print  $EE_Printed_Cnt               (,35)

  let $WorkSiteTotals_Written = 'Y'

End-Procedure Print-Worksite-Totals-Page

!***********************************************************************
! Procedure Print-Local-Totals
!***********************************************************************
Begin-Procedure Print-Local-Totals

  use-report DEFAULT

  let $Column_Hdr = 'Local Totals'
  do Print-Columns

  let #Lclty_Local_Wages = #Lclty_Local_Wages / 100
  do Format-Number(#Lclty_Local_Wages, $Lclty_Local_Wages, 'B99,999,999.99')
  let #Lclty_Local_Tax = #Lclty_Local_Tax / 100
  do Format-Number(#Lclty_Local_Tax, $Lclty_Local_Tax, 'B9,999,999.99')
  do Format-Number(#Lclty_Ee_Count, $Lclty_Ee_Count, 'B999,999')

   print $Lclty_Ee_Count        (+1,104)
   print $Lclty_Local_Wages     (,146)
   print $Lclty_Local_Tax       (,161)
   let $Separator = rpad('',173,'_')
   print $Separator             (+1,1)
   print ' '                    (+2,0)

  let $NewPage_Written = 'N'
  let $Column_Hdr      = ' '

End-Procedure Print-Local-Totals

!***********************************************************************
! Procedure Before-Emplid-Chg
!***********************************************************************
Begin-Procedure Before-Emplid-Chg

  let $Emplid           = &E.EMPLID
  let $FirstTime        = 'Y'
  let $State_Reportable = 'N'

  do Get-Ee-NID

  #IfDef RSI_TOOLS_7.5
     do Get-Ee-Name-v75
  #Else
     do Get-Ee-Name
  #EndIf

  let $Employee_Name = rtrim(ltrim($LastName, ' '), ' ') || ', ' ||
                       rtrim(ltrim($FirstName, ' '), ' ') || ' ' ||
                       rtrim(ltrim($MiddleName, ' '), ' ')

  let $EmplName      = rtrim(ltrim($LastName, ' '), ' ') || ', ' ||
                       rtrim(ltrim($FirstName, ' '), ' ')

End-Procedure Before-Emplid-Chg

!***********************************************************************
! Procedure Get-Ee-NID
!***********************************************************************
Begin-Procedure Get-Ee-NID

BEGIN-SELECT Distinct
P4.NATIONAL_ID

  move &P4.NATIONAL_ID to $S123 xxx

  If $S123 = &TEMP_SSN_MASK or rtrim(&P4.NATIONAL_ID, ' ') = ''
     let $E_Ssn = rpad('',9,'0')
  Else
     move &P4.NATIONAL_ID to $E_Ssn
  End-If

  let $E_Ssn_Print = edit($E_Ssn,'xxx-xx-xxxx')

FROM PS_PERS_NID P4
WHERE P4.COUNTRY          = {NID_Country}
  AND P4.NATIONAL_ID_TYPE = 'PR'
  AND P4.EMPLID           = $Emplid
END-SELECT

End-Procedure Get-Ee-NID

!***********************************************************************
! Procedure Get-Ee-Name-v75
!***********************************************************************
Begin-Procedure Get-Ee-Name-v75

#IfDef RSI_TOOLS_7.5
BEGIN-SELECT
P6.LAST_NAME
P6.FIRST_NAME
P6.MIDDLE_NAME
P6.NAME_SUFFIX

  let $FirstName  = nvl(rtrim(ltrim(&P6.FIRST_NAME,' '),' '),' ')
  let $MiddleName = nvl(rtrim(ltrim(&P6.MIDDLE_NAME,' '),' '),' ')
  let $LastName   = nvl(rtrim(ltrim(&P6.LAST_NAME,' '),' '),' ')
  let $Suffix     = nvl(rtrim(ltrim(&P6.NAME_SUFFIX,' '),' '),' ')

FROM PS_PERS_DATA_EFFDT P6
WHERE P6.EMPLID = $Emplid
  AND P6.EFFDT  = (SELECT MAX(P7.EFFDT)
                   FROM PS_PERS_DATA_EFFDT P7
                   WHERE P6.EMPLID = P7.EMPLID
                     AND P7.EFFDT <= $Period_End_Date)
END-SELECT
#EndIf

End-Procedure Get-Ee-Name-v75

!***********************************************************************
! Procedure Get-Ee-Address-v75
!***********************************************************************
Begin-Procedure Get-Ee-Address-v75

  let $AddressFound = 'N'

#IfDef RSI_TOOLS_7.5
BEGIN-SELECT
PA2.ADDRESS1
PA2.ADDRESS2
PA2.CITY
PA2.STATE
PA2.POSTAL

  let $EeAddress1 = nvl(rtrim(ltrim(&PA2.ADDRESS1, ' '), ' '), ' ')
  let $EeAddress2 = nvl(rtrim(ltrim(&PA2.ADDRESS2, ' '), ' '), ' ')
  let $EeCity     = nvl(rtrim(ltrim(&PA2.CITY, ' '), ' '), ' ')
  let $EeState    = nvl(rtrim(ltrim(&PA2.STATE, ' '), ' '), ' ')
  let $EeZip      = nvl(rtrim(ltrim(&PA2.POSTAL, ' '), ' '), ' ')

FROM PS_PERSONAL_DATA PA2
WHERE PA2.EMPLID = $Ld_Emplid
END-SELECT
#EndIf

End-Procedure Get-Ee-Address-v75

!***********************************************************************
! Procedure Get-Ee-Name
!***********************************************************************
Begin-Procedure Get-Ee-Name

#IfnDef RSI_TOOLS_7.5
BEGIN-SELECT
P5.LAST_NAME
P5.FIRST_NAME
P5.MIDDLE_NAME
P5.NAME_SUFFIX

  let $FirstName  = nvl(rtrim(ltrim(&P5.FIRST_NAME, ' '), ' '), ' ')
  let $MiddleName = nvl(rtrim(ltrim(&P5.MIDDLE_NAME, ' '), ' '), ' ')
  let $LastName   = nvl(rtrim(ltrim(&P5.LAST_NAME, ' '), ' '), ' ')
  let $Suffix     = nvl(rtrim(ltrim(&P5.NAME_SUFFIX, ' '), ' '), ' ')

FROM PS_PERSON_NAME P5
WHERE P5.EMPLID = $Emplid
END-SELECT
#EndIf

End-Procedure Get-Ee-Name

!***********************************************************************
! Procedure Get-Ee-Address
!***********************************************************************
Begin-Procedure Get-Ee-Address

  let $AddressFound = 'N'

#IfnDef RSI_TOOLS_7.5
BEGIN-SELECT
PA.ADDRESS1
PA.ADDRESS2
PA.CITY
PA.STATE
PA.POSTAL

  let $EeAddress1 = nvl(rtrim(ltrim(&PA.ADDRESS1,' '),' '),' ')
  let $EeAddress2 = nvl(rtrim(ltrim(&PA.ADDRESS2,' '),' '),' ')
  let $EeCity     = nvl(rtrim(ltrim(&PA.CITY,' '),' '),' ')
  let $EeState    = nvl(rtrim(ltrim(&PA.STATE,' '),' '),' ')
  let $EeZip      = nvl(rtrim(ltrim(&PA.POSTAL,' '),' '),' ')

FROM PS_ADDRESSES PA
WHERE PA.EMPLID       = $Ld_Emplid
  AND PA.ADDRESS_TYPE = 'HOME'
  AND PA.EFF_STATUS   = 'A'
  AND PA.EFFDT        = (SELECT MAX(PA1.EFFDT)
                         FROM PS_ADDRESSES PA1
                         WHERE PA.EMPLID       = PA1.EMPLID
                           AND PA.ADDRESS_TYPE = PA1.ADDRESS_TYPE
                           AND PA1.EFFDT      <= $Check_Date)
END-SELECT
#EndIf

End-Procedure Get-Ee-Address

!***********************************************************************
! Procedure Populate-EE-Address
!***********************************************************************
Begin-Procedure Populate-EE-Address

  let #Error_Count = 0

  If $AddressFound = 'N'
     let $Errors_Found = 'Y'
     let $Err_Msg6 = 'Home address not found for employee, ' ||  $Emplid  || '. ' ||
                     'Please correct and reprocess the file again.'

     If $Err_Msg6 <> $Prev_Err_Msg6
        let $Err_Msg = $Err_Msg6
        do Open-ErrorFile
        let $Prev_Err_Msg6 = $Err_Msg6
     End-If
     let #Error_Count = #Error_Count + 1

     If #Error_Count = #Max_Errors
        let $Max_Errors = 'Y'
        Show 'Maximum number of Errors has been exceeded.'
        Show 'The Program has not finished successfully.'
        Show 'Please check the Error Log File.'
        do Error-Log
        Show ''
        STOP
     End-If
  End-If

  If $EeAddress2 = ' '
     move $EeAddress1 to $EeAddress2
     move $Sp1        to $EeAddress1
  End-If

End-Procedure Populate-EE-Address

!***********************************************************************
! Procedure Write-Print-Ee-Detail
!***********************************************************************
Begin-Procedure Write-Print-Ee-Detail

  do Write-S-Record
  do Print-Employee-Detail
  do Zero-S-Record

End-Procedure Write-Print-Ee-Detail

!***********************************************************************
! Procedure Update-Save-Row-File-Created
!***********************************************************************
Begin-Procedure Update-Save-Row-File-Created

  show 'Procedure = Update-Save-Row-File-Created'      !ISDVMZA

BEGIN-SQL
UPDATE PS_RSI_TAXPA_LD

SET SAVE_ROW = 'F'

WHERE BALANCE_YEAR     = #Balance_Year
  AND BALANCE_PERIOD   = #Balance_Period
  AND RPTG_PERIOD      = $Rptg_Period
  AND RSI_RPTG_AGENCY  = $Rptg_Agency
  AND COMPANY          = $EeCompany
  AND EMPLID           = $Emplid
  AND LOCALITY         = $Locality
  AND WRK_PSD_CODE     = $WorkPSDCode
  AND RSI_WRK_ADDRESS1 = $ErAddress1
  AND RSI_WRK_ADDRESS2 = $ErAddress2
  AND RSI_WRK_POSTAL   = $ErZip
  AND RES_PSD_CODE     = $ResPSDCode
  AND RSI_RES_ADDRESS1 = $EeAddress1
  AND RSI_RES_ADDRESS2 = $EeAddress2
  AND RSI_RES_POSTAL   = $EeZip
END-SQL

End-Procedure Update-Save-Row-File-Created

!***********************************************************************
! Procedure Write-A-Record
!***********************************************************************
Begin-Procedure Write-A-Record

  let #Error_Count = 0

  If &RC.PHONE_EXTN <> 0
     move &RC.PHONE_EXTN to $Phone_Extn
  Else
     let $Phone_Extn = rpad('',4,' ')
  End-If

  let $Xmitr_Name  = rtrim(&CT.DESCR, ' ')
  let $Co_Address1 = rtrim(&CT.ADDRESS1, ' ')
  let $Co_Address2 = rtrim(&CT.ADDRESS2, ' ')
  let $Co_City     = rtrim(&CT.CITY, ' ')
  let $Co_State    = rtrim(&CT.STATE, ' ')
  let $Co_Zip      = rtrim(&CT.POSTAL, ' ')

  If rtrim($Co_Address2,' ') = ''
     move $Co_Address1 to $Co_Address2
     move $Sp1         to $Co_Address1
  End-If

  let $RA_Record_Processed = 'N'

  If $Create_File = 'Y'
     let $RecordType = 'RA'
     do Get-Record-Type-Info
  End-If

  If $RA_Record_Processed = 'N'
     let $NewPage_Written = 'Y'
     let $Column_Hdr      = 'RE Record'
     do Print-Columns
  End-If

End-Procedure Write-A-Record

!***********************************************************************
! Procedure Get-File-Layout-Data
!***********************************************************************
Begin-Procedure Get-File-Layout-Data

  let $WriteValue  = ''
  let $WriteRecord = ''
  let #j = 0

  While #j <= #Array_Cnt1
     let $Rsi_Record_Type = RECORD_TYPES.RSI_RECORD_TYPE(#j)
     let $Rsi_Record_Name = RECORD_TYPES.RSI_RECORD_NAME(#j)
     let $Rsi_Record_Type = rtrim(ltrim($Rsi_Record_Type,' '),' ')
     let $Rsi_Record_Name = rtrim(ltrim($Rsi_Record_Name,' '),' ')

     If $Rsi_Record_Name = $Rec_Value
        let #Column_num     = RECORD_TYPES.COLUMNNUM(#j)
        let $Variable_Name  = RECORD_TYPES.RSI_VARIABLE_NAME(#j)
        let $Variable_Name  = rtrim(ltrim($Variable_Name,' '),' ')
        let #Print_Row      = RECORD_TYPES.RSI_START_POS(#j)
        let #Print_Column   = RECORD_TYPES.RSI_END_POS(#j)
        let #Field_Length   = RECORD_TYPES.RSI_LENGTH(#j)
        let $Fill_Value     = RECORD_TYPES.RSI_FILL_VALUE(#j)
        let $Fill_Side      = RECORD_TYPES.RSI_FILL_SIDE(#j)
        let $Case           = RECORD_TYPES.RSI_CASE(#j)
        let $Justify        = RECORD_TYPES.RSI_JUSTIFY(#j)
        let $File_Type      = RECORD_TYPES.RSI_FILE_TYPE(#j)

        #IfDef DebugC
           do Show-DebugC-Statements
        #EndIf

        Evaluate $Fill_Value
          When = 'S'
            let $Filler    = ' '
            Break
          When = 'Z'
            let $Filler    = '0'
            Break
          When = 'N'
            let $Filler    = ''
            Break
        End-Evaluate

        Evaluate $File_Type
          When = 'C'
            encode ',' into $Delimeter
            Break
          When = 'T'
            encode '<009>' into $Delimeter
            Break
          When = 'F'
            let $Delimeter = ''
            Break
          When = 'P'
            let $Delimeter = ''
            Break
        End-Evaluate

        let $FirstPos   = substr($Variable_Name,1,1)

        If $FirstPos = '"'
           let $CheckVariable = 'Specified Text'
        Else
           let $CheckVariable = $Variable_Name
        End-If

        Evaluate $CheckVariable
          When = ''
          When = 'FILL'
            let $FieldName = 'SPACE/ZERO FILL'
            let $FieldValue = ''
            Break
          When = 'Specified Text'
            let $FieldName = $Variable_Name
            let $FieldValue = rtrim(ltrim($Variable_Name,'"'),'"')
            Break
          When-Other
           let #ix = 0
           While #ix < {Max_Fields}
              If $Variable_Name  = FILE_FIELDS.FIELDNAME(#ix)
                 let $FieldName  = FILE_FIELDS.FIELDNAME(#ix)
                 let $FieldValue = FILE_FIELDS.FIELDVALUE(#ix)
                 let #ix         = {Max_Fields}
              End-If
              let #ix = #ix + 1
           End-While
        End-Evaluate

        If $File_Type = 'P'
           If $Rsi_Record_Type = 'RS'
              Evaluate #EE_Page_Cnt
                When = 0
                  Evaluate #Column_num
                    When = 15
                    When = 16
                      !Skip printing these rows
                      Break
                    When-Other
                      do Build-Write-Record
                      Break
                  End-Evaluate
                  Break
                When = 16
                  Evaluate #Column_num
                    When = 15
                      let #IncrementRows = 0
                      do Build-Write-Record
                      Break
                    When = 16
                      let #IncrementRows = 0
                      do Build-Write-Record
                      Break
                  End-Evaluate
                  Break
                When > 0
                When < 16
                  Evaluate #Column_num
                    When = 1
                    When = 2
                    When = 3
                    When = 4
                    When = 15
                    When = 16
                      !Skip printing these rows
                      Break
                    When-Other
                        let #IncrementRows = (#EE_Page_Cnt) * {SpacesForRows}
                        let #Print_Row     = #Print_Row     + #IncrementRows
                        do Build-Write-Record
                        let #Print_Row     = 0
                        let #IncrementRows = 0
                      Break
                  End-Evaluate
                  Break
              End-Evaluate
           Else
              do Build-Write-Record
           End-If
        Else
          do Build-Write-Record
        End-If
     End-If

     let #j = #j + 1
  End-While

End-Procedure Get-File-Layout-Data

!***********************************************************************
! Procedure Build-Write-Record
!***********************************************************************
Begin-Procedure Build-Write-Record

  If $FieldValue <> ''

     Evaluate $FieldValue
       When = 'SPACE'
         let $FieldValue = ' '
         let $Filler = ' '
         Break
       When = 'ZERO'
         let $FieldValue = '0'
         let $Filler = '0'
         Break
     End-Evaluate

     Evaluate $Fill_Side
       When = 'R'
         let $WriteValue = rpad(rtrim(ltrim($FieldValue,' '),' '),#Field_Length,$Filler)
         Break
       When = 'L'
         let $WriteValue = lpad(rtrim(ltrim($FieldValue,' '),' '),#Field_Length,$Filler)
         Break
       When = 'N'
         let $WriteValue = rtrim(ltrim($FieldValue,' '),' ')
         Break
     End-Evaluate

     Evaluate $Case
       When = 'U'
         uppercase $WriteValue
         Break
       When = 'L'
         lowercase $WriteValue
         Break
     End-Evaluate

     let #DataLength = Length($WriteValue)

     Evaluate $Justify
       When = 'R'
         If #DataLength > #Field_Length
            let #StartPos   = #DataLength - #Field_Length + 1
            let $WriteValue = substr($WriteValue,#StartPos,#Field_Length)
         End-If
         Break
       When = 'L'
         If #DataLength > #Field_Length
            let #StartPos   = 1
            let $WriteValue = substr($WriteValue,#StartPos,#Field_Length)
         End-If
         Break
     End-Evaluate
  Else

     let $WriteValue = rpad('',#Field_Length,$Filler)
  End-If

  If $File_Type = 'P'
     use-report PRINTFORMS
        Evaluate $Rsi_Record_Type
          When = 'RE'
            If $Form_Open1 = 'N'
               do Print-DCED-Form-RE
            End-If
            Break
          When = 'RS'
            If $Form_Open2 = 'N'
               do Print-DCED-Form-RS
            End-If
            do Alter-Printer-P8
        End-Evaluate

     Print $WriteValue (#Print_Row,#Print_Column,#Field_Length)
  Else
     If $WriteRecord = ''
        let $WriteRecord = $WriteValue
     Else
        let $WriteRecord = $WriteRecord || $Delimeter ||  $WriteValue
     End-If
  End-If

  If $Variable_Name <> 'FILL'
     If $FieldName = ''
        let $FieldName  = '"' || $Variable_Name || '" is not defined in RSIW2PA.SQC.'
        let $FieldValue = 'Check the SQC to make sure the variable is initialized'
        let $WriteValue = 'for the ' || $Rsi_Record_Type || ' Record Type.'
     End-If
  End-If

  #IfDef DebugD
     do Show-DebugD-Statements
  #EndIf

  let $FieldName  = ''
  let $FieldValue = ''
  let $WriteValue = ''

End-Procedure Build-Write-Record

!***********************************************************************
! Procedure Write-Record
!***********************************************************************
Begin-Procedure Write-Record

  If #FileOpen <> 0
     write 10 from $WriteRecord
     add 1 to #Tot_Record_Count
     let $WriteRecord = ''
     let $WriteValue  = ''
  End-If

End-Procedure Write-Record

!***********************************************************************
! Procedure Write-E-Record
!***********************************************************************
Begin-Procedure Write-E-Record

  let $EmplrPSDCode      = $WorkPSDCode
  let $RptPeriod_YYYY_MM = $Balance_Year || ' / ' || $Balance_Period

  let $ValueToClean = $Employer_Id_Lwt
  do Strip-Characters($ValueToClean, $CleanedValue)
  let $EmplrAcctNo = $CleanedValue

  If $Create_File = 'Y'
     let #EE_Page_Cnt      = 0
     let #Page_Total_Wages = 0
     let #Page_Total_Taxes = 0
     let #EE_Total_Taxes   = 0
     let #Page_Count       = 1
     let $Form_Open1       = 'N'

     let $RecordType = 'RE'
     do Get-Record-Type-Info
     let $Form_Open2 = 'N'
  End-If

  If $NewPage_Written = 'Y'
     let $NewPage = 'N'
  Else
     let $NewPage = 'Y'
  End-If
  do Print-RE-Record

End-Procedure Write-E-Record

!***********************************************************************
! Procedure Strip-Characters
!***********************************************************************
Begin-Procedure Strip-Characters($ValueToClean, :$CleanedValue)

  let $CleanedValue = translate($ValueToClean,'-','') ! Strip hyphens
  let $CleanedValue = translate($CleanedValue,' ','') ! Strip spaces

End-Procedure Strip-Characters

!***********************************************************************
! Procedure Write-F-Record
!***********************************************************************
Begin-Procedure Write-F-Record

  move #Local_Wages_F to $Local_Wages_F  099999999999999
  move #Local_Tax_F   to $Local_Tax_F    099999999999999
  move #Count_F       to $Count_F        0999999

  If $Create_File = 'Y'
     let $RecordType = 'RF'
     do Get-Record-Type-Info
  End-If

  move 0 to #Count_S

End-Procedure Write-F-Record

!***********************************************************************
! Procedure Write-S-Record
!***********************************************************************
Begin-Procedure Write-S-Record

  move #Local_Wages to $Local_Wages   09999999999
  move #Local_Tax   to $Local_Tax     09999999999

  let  #Local_Taxes_Dec  = #Local_Tax / 100
  move #Local_Taxes_Dec to $Local_Taxes_Dec 099999999.99
  let  $Local_Taxes_Dec  = ltrim($Local_Taxes_Dec,'0')

  let  #Local_Wages_Dec  = #Local_Wages / 100
  move #Local_Wages_Dec to $Local_Wages_Dec 099999999.99
  let  $Local_Wages_Dec  = ltrim($Local_Wages_Dec,'0')

  do Format-Number(#Local_Wages_Dec, $Local_Wages_Print, 'B999,999,999.99')
  let #LocalTxOut = #Local_Tax / 100
  do Format-Number(#Local_Taxes_Dec, $Local_Taxes_Print, 'B999,999,999.99')

  If $Create_File = 'Y'
     let $RecordType = 'RS'
     do Get-Record-Type-Info
  End-If

  add 1            to #Count_S
  add 1            to #S_Count_F
  add #Local_Wages to #Local_Wages_T
  add #Local_Tax   to #Local_Tax_T
  add #Local_Wages to #Local_Wages_F
  add #Local_Tax   to #Local_Tax_F

End-Procedure Write-S-Record

!***********************************************************************
! Procedure Write-T-Record
!***********************************************************************
Begin-Procedure Write-T-Record

  move #Count_T       to $Count_T         0999999
  move #Local_Wages_T to $Local_Wages_T   099999999999999
  move #Local_Tax_T   to $Local_Tax_T     099999999999999

  If $Create_File = 'Y'
     let $RecordType = 'RT'
     do Get-Record-Type-Info
  End-If

End-Procedure Write-T-Record

!***********************************************************************
! Procedure Get-Record-Type-Info
!***********************************************************************
Begin-Procedure Get-Record-Type-Info

  let #k = 0

  While #k <= #Array_Cnt2
     let $Map_Rptg_Agency = RECORD_MAPPING.RSI_RPTG_AGENCY(#k)
     let $Map_Record_Type = RECORD_MAPPING.RSI_RECORD_TYPE(#k)
     let $Map_Record_Name = RECORD_MAPPING.RSI_RECORD_NAME(#k)
     let $Map_File_Type   = RECORD_MAPPING.RSI_FILE_TYPE(#k)
     let $Map_Image_Name  = RECORD_MAPPING.RSI_IMAGE_NAME(#k)
     let $Map_Rptg_Agency = rtrim(ltrim($Map_Rptg_Agency,' '),' ')
     let $Map_Record_Type = rtrim(ltrim($Map_Record_Type,' '),' ')
     let $Map_Record_Name = rtrim(ltrim($Map_Record_Name,' '),' ')
     let $Map_File_Type   = rtrim(ltrim($Map_File_Type,' '),' ')
     let $Map_Image_Name  = rtrim(ltrim($Map_Image_Name,' '),' ')

     If $Map_Rptg_Agency = $Rptg_Agency
        If $Map_Record_Type = $RecordType
           let $Rec_Value = $Map_Record_Name
           let $ImageName = $Map_Image_Name

           #IfDef DebugE
              do Show-DebugE-Statements
           #EndIf

           do Set-Field-Values
           do Get-File-Layout-Data
           do Write-Record

           Evaluate $RecordType
             When = 'RA'
               do Print-RA-Record
               let $RA_Record_Processed = 'Y'
               Break
             When = 'RS'
               do Update-Save-Row-File-Created

               If $File_Type = 'P'
                  If #EE_Page_Cnt = 16
                     let $EndOfPage  = 'Y'
                     let #Page_Count = #Page_Count + 1
                     do Print-DCED-Form-RS
                     let #EE_Page_Cnt      = 0
                     let #Page_Total_Wages = 0
                     let #Page_Total_Taxes = 0
                     let #Ee_Wages         = 0
                     let #Ee_Taxes         = 0
                     let $Page_Total_Wages = ''
                     let $Page_Total_Taxes = ''
                  Else
                     let $EndOfPage = 'N'
                     let #EE_Page_Cnt        = #EE_Page_Cnt + 1
                     let #Ee_Wages           = (#Local_Wages / 100)
                     let #Ee_Taxes           = (#Local_Tax / 100)
                     let #Page_Total_Wages   = #Page_Total_Wages + #Ee_Wages
                     let #Page_Total_Taxes   = #Page_Total_Taxes + #Ee_Taxes
                     move #Page_Total_Wages to $Page_Total_Wages 888,888,888.88
                     move #Page_Total_Taxes to $Page_Total_Taxes 888,888,888.88
                  End-If
                  let #EE_Printed_Cnt = #EE_Printed_Cnt + 1
                  let #EE_Total_Taxes = #EE_Total_Taxes + #Ee_Wages
               End-If
               Break
           End-Evaluate
        End-If
     End-If
     let #k = #k + 1
  End-While

End-Procedure Get-Record-Type-Info

!***********************************************************************
! Procedure File-Create
!***********************************************************************
Begin-Procedure File-Create

  If $Create_File = 'Y'
     do Get-File-Length
     do Close-File
     let $ReportID2 = ''
     do Get-Output-File-Info

     If $Paper_Filers <> 'Y'
        do Open-Output-File
     End-If
  End-If

  do Write-A-Record

End-Procedure File-Create

!***********************************************************************
! Procedure Get-File-Length
!***********************************************************************
Begin-Procedure Get-File-Length

  let #i = 0

  While #i <= #Array_Cnt2
     let $Map_Rptg_Agency = RECORD_MAPPING.RSI_RPTG_AGENCY(#i)
     let $Map_Rptg_Agency = rtrim(ltrim($Map_Rptg_Agency,' '),' ')
     let #File_Rcd_Length = RECORD_MAPPING.RSI_LENGTH(#i)

     If $Map_Rptg_Agency = $Rptg_Agency
        If #File_Rcd_Length = 128
           #DEFINE Rcd_Length 128
        Else
           #DEFINE Rcd_Length 512
        End-If
        Break
     End-If
     let #i = #i + 1
  End-While

End-Procedure Get-File-Length

!***********************************************************************
! Procedure Close-File
!***********************************************************************
Begin-Procedure Close-File

  If #FileOpen <> 0
     close 10
     move 0 to #FileOpen
  End-If

End-Procedure Close-File

!***********************************************************************
! Procedure Get-Output-File-Info
!***********************************************************************
Begin-Procedure Get-Output-File-Info

  do Get-File-Extension
  do Get-File-Name-Override

  If $RSI_Combine_Co = 'Y'
     If $ReportID2 = ''
        let $ReportID2 = 'RSITAXPA_' || $Rptg_Agency
     End-If

     If $Des_Agency = 'N'
        If $RSI_Combine_Tcd = 'N'
           let $ReportID2 = $ReportID2 || '_' || $TcdPSDCode
        End-If
     End-If
  Else
     If $ReportID2 = ''
        let $ReportID2 = $Company || '_RSITAXPA_' || $Rptg_Agency
     Else
        let $ReportID2 = $ReportID2 || '_' || $Company
     End-If

     If $Des_Agency = 'N'
        If $RSI_Combine_Tcd = 'N'
           let $ReportID2 = $ReportID2 || '_' || $TcdPSDCode
        End-If
     End-If
  End-If


  #IfDef HAS
     let $FileID = $FileOutputPath || $ReportID2 || '.txt'
  #Else
     let $FileID = $FileOutputPath || $ReportID2 || $FileExt
     let $FileID = rtrim(ltrim($FileID,' '),' ')
  #EndIf

End-Procedure Get-Output-File-Info

!***********************************************************************
! Procedure Get-File-Name-Override
!***********************************************************************
Begin-Procedure Get-File-Name-Override

  let #i = 0

  While #i <= #Array_Cnt2
     let $Map_Rptg_Agency = RECORD_MAPPING.RSI_RPTG_AGENCY(#i)
     let $RecordType      = RECORD_MAPPING.RSI_RECORD_TYPE(#i)
     let $File_Override   = RECORD_MAPPING.RSI_FILE_OVERRIDE(#i)
     let $Map_Rptg_Agency = rtrim(ltrim($Map_Rptg_Agency,' '),' ')
     let $RecordType      = rtrim(ltrim($RecordType,' '),' ')
     let $File_Override   = rtrim(ltrim($File_Override,' '),' ')

     If $Map_Rptg_Agency = $Rptg_Agency

        let $FirstPos = substr($File_Override,1,1)

        If $FirstPos <> ''
           If $FirstPos = '"'
              let $CheckVariable = 'Specified Text'
           Else
              let $RecordType = 'RA'
              do Set-Field-Values
              let $CheckVariable = $File_Override
           End-If

           Evaluate $CheckVariable
             When = 'Specified Text'
               let $ReportID2 = rtrim(ltrim($File_Override,'"'),'"')
               let $ReportID2 = rtrim(ltrim($ReportID2,' '),' ')
               Break
             When-Other
              let #ix = 0

              While #ix < {Max_Fields}
                 let $FieldName  = FILE_FIELDS.FIELDNAME(#ix)
                 let $FieldValue = FILE_FIELDS.FIELDVALUE(#ix)

                 If $File_Override = $FieldName
                    let $ReportID2 = rtrim(ltrim($FieldValue,' '),' ')
                    let #ix = {Max_Fields}
                 End-If
                 let #ix = #ix + 1
              End-While
           End-Evaluate
        End-If
        Break
     End-If
     let #i = #i + 1
  End-While

End-Procedure Get-File-Name-Override

!***********************************************************************
! Procedure Get-File-Extension
!***********************************************************************
Begin-Procedure Get-File-Extension

  let #i = 0
  let $FileExt = ''

  While #i <= #Array_Cnt2
     let $Map_Rptg_Agency = RECORD_MAPPING.RSI_RPTG_AGENCY(#i)
     let $Map_Rptg_Agency = rtrim(ltrim($Map_Rptg_Agency,' '),' ')
     let $File_Extension  = RECORD_MAPPING.RSI_FILE_EXTENSION(#i)

     If $Map_Rptg_Agency = $Rptg_Agency
        let $FileExt = $File_Extension
        Break
     End-If
     let #i = #i + 1
  End-While

End-Procedure Get-File-Extension

!***********************************************************************
! Procedure Open-Output-File
!***********************************************************************
Begin-Procedure Open-Output-File

  open $FileID as 10 for-writing record={Rcd_Length}:fixed
  add 1 to #FileOpen

End-Procedure Open-Output-File

!***********************************************************************
! Procedure Close-ErrorFile
!***********************************************************************
Begin-Procedure Close-ErrorFile

  close 20

End-Procedure Close-ErrorFile

!***********************************************************************
! Procedure Open-ErrorFile
!***********************************************************************
Begin-Procedure Open-ErrorFile

  let $ErrorFileID = $FileOutputPath || $ReportID  || '_' || $Prcs_Process_Instance || '.err'

  open $ErrorFileID as 20 for-append record=512:vary

  do Write-Error
  do Print-Error
  do Close-ErrorFile

  let $Err_Msg = ''

End-Procedure Open-ErrorFile

!***********************************************************************
! Procedure Print-RA-Record
!***********************************************************************
Begin-Procedure Print-RA-Record

  use-report DEFAULT

  let $Column_Hdr = 'RA Record'
  do Print-Columns

  print 'Submitter EIN    : '  (+2,5)
  print  $FedEIN               ()
  let    $Separator = rpad('',57,'-')
  print  $Separator            (+1,5)
  print 'Company Name     : '  (+1,5)
  print  $Xmitr_Name           ()
  print 'Location Address : '  (+1,5)
  print  $Co_Address1          ()
  print 'Delivery Address : '  (+1,5)
  print  $Co_Address2          ()
  print 'City             : '  (+1,5)
  print  $Co_City              ()
  print 'State            : '  (+1,5)
  print  $Co_State                ()
  print 'Zip              : '  (+1,5)
  print  $Co_Zip               ()
  let    $Separator = rpad('',57,'-')
  print  $Separator            (+1,5)
  print 'Contact Name     : '  (+1,5)
  print  $Contact_name_ssa     ()
  print 'Contact Phone    : '  (+1,5)
  print  $Telephone_Nbr        ()
  print 'Contact Extension: '  (+1,5)
  print  $Phone_Extn           ()
  print 'Contact E-Mail   : '  (+1,5)
  print  $Email_addr           ()
  print 'Contact Fax      : '  (+1,5)
  print  $Contact_Fax          ()
  let    $Separator = rpad('',57,'-')
  print  $Separator            (+1,5)

  let $NewPage_Written = 'N'
  let $Column_Hdr      = ' '

End-Procedure Print-RA-Record

!***********************************************************************
! Procedure Print-RE-Record
!***********************************************************************
Begin-Procedure Print-RE-Record

  use-report DEFAULT

  If $NewPage = 'Y'
     let $Column_Hdr = 'RE Record'
     new-page
     do Print-Columns
     let $NewPage_Written = 'Y'
  End-If

  print 'Employer LWT Id  : ' (+2,5)
  print  $Employer_Id_Lwt     ()
  let    $Separator = rpad('',57,'-')
  print  $Separator           (+1,5)
  print 'Payment Year     : ' (+2,5)
  print  $Balance_Year        ()
  print 'Payment Period   : ' (+1,5)
  print  $Balance_Period      ()
  print 'Federal EIN      : ' (+1,5)
  print  $FedEIN              ()
  print 'Employer Name    : ' (+1,5)
  print  $ErName              ()
  print 'Location Address : ' (+1,5)
  print  $ErAddress1          ()
  print 'Delivery Address : ' (+1,5)
  print  $ErAddress2          ()
  print 'City             : ' (+1,5)
  print  $ErCity              ()
  print 'State            : ' (+1,5)
  print  $ErState             ()
  print 'Zip              : ' (+1,5)
  print  $ErZip               ()
  let    $Separator = rpad('',57,'-')
  print  $Separator           (+1,5)

  let $Column_Hdr = ' '
  If $Print_Detail = 'Y'
     new-page
  End-If

End-Procedure Print-RE-Record

!***********************************************************************
! Procedure Print-Employee-Detail
!***********************************************************************
Begin-Procedure Print-Employee-Detail

  use-report DEFAULT

  let $Column_Hdr = 'Employee Detail'

  If #CURRENT-LINE > #Page_Lines
     new-page
     do Print-Columns
  Else
     If #CURRENT-LINE < 9
        If #CURRENT-LINE > 6
           let #Hdrspace = #CURRENT-LINE - 10
           print ' ' (+#Hdrspace,0)
        End-If
        do Print-Columns
     End-If
  End-If

  move $Local_Wages to #Local_Wages
  move $Local_Tax   to #Local_Tax

  let #LocalWgsOut = #Local_Wages / 100
  do Format-Number(#LocalWgsOut, $LocalWgsOut, 'B99,999,999.99')
  let #LocalTxOut = #Local_Tax / 100
  do Format-Number(#LocalTxOut, $LocalTxOut, 'B9,999,999.99')

  print $EeCompany              (+1,1)
  print $Locality               (,10)
  print $Emplid                 (,22)
  print $Employee_Name          (,35)
  print $E_Ssn_Print            (,87)
  print $ResPSDCode             (,100)
  print $WorkPSDCode            (,117)
  print $LocalWgsOut            (,146)
  print $LocalTxOut             (,161)

  let $NewPage_Written = 'N'

End-Procedure Print-Employee-Detail

!***********************************************************************
! Procedure Print-Agency-Totals
!***********************************************************************
Begin-Procedure Print-Agency-Totals

  use-report DEFAULT

  let $Column_Hdr = 'Agency Totals'
  new-page
  do Print-Columns

  If $RSI_Combine_Co <> 'Y'
     print $Rptg_Agency                             (+2,1)
     print ' - '                                    (0,+1)
     print $Company                                 (0,+1)

     If $RSI_Combine_Tcd = 'N'
        print ' - '                                 (0,+1)
        print 'TCD: '                               (0,+1)
        print $TcdPSDCode                           (0,+1)
        print 'Agency/Company/TCD Record Count : '  (0,+1)
     Else
        print 'Agency/Company Record Count : '      (0,+1)
     End-If
  Else
     print $Rptg_Agency                             (+2,1)

     If $RSI_Combine_Tcd = 'N'
        print ' - '                                 (0,+1)
        print 'TCD: '                               (0,+1)
        print $TcdPSDCode                           (0,+1)
        print 'Agency/TCD Record Count : '          (0,+1)
     Else
        print 'Agency Record Count : '              (0,+1)
     End-If
  End-If

  do Format-Number (#AgencyRcdCnt_Ttl, $AgencyRcdCnt_Ttl, 'B999,999')
  print $AgencyRcdCnt_Ttl (,55)
  move 0 to #AgencyRcdCnt_Ttl
  let $AgencyRcdCnt_Ttl = ''

     do Format-Number (#Tot_Record_Count, $out, 'B999,999')
     print 'Total File Record Count: '(+1,1)
     print $out (,55)
     move 0 to #Tot_Record_Count

  let #AgencyLocal_Wages_F = #Local_Wages_F / 100
  do Format-Number(#AgencyLocal_Wages_F, $AgencyLocal_Wages_F, 'B9,999,999,999.99')
  let #AgencyLocal_Tax_F = #Local_Tax_F / 100
  do Format-Number(#AgencyLocal_Tax_F, $AgencyLocal_Tax_F, 'B999,999,999.99')

  print 'Total File Employer LWT ID Wages: '(+1,1)
  print $AgencyLocal_Wages_F (,46)
  move 0 to #AgencyLocal_Wages_F
  move 0 to #Local_Wages_F
  let $AgencyLocal_Wages_F = ''

  print 'Total File Employer LWT ID Taxes: '(+1,1)
  print $AgencyLocal_Tax_F (,48)
  move 0 to #AgencyLocal_Tax_F
  move 0 to #Local_Tax_F
  let $AgencyLocal_Tax_F = ''

End-Procedure Print-Agency-Totals

!***********************************************************************
! Procedure After-Agency
!***********************************************************************
Begin-Procedure After-Agency

  do Write-F-Record
  do Agency-End-File
  do Print-Agency-Totals
  do Clear-F-Record

  let $Column_Hdr = ' '
  new-page

End-Procedure After-Agency

!***********************************************************************
! Procedure Agency-End-File
!***********************************************************************
Begin-Procedure Agency-End-File


  If $Reprocess = 'Y'
     let $out  = ' (Reprocessed) '
     let $out1 = '* Historical file data in the RSI_TAXPA_LD table for the Period and Year above has been'

     If $Create_File = 'Y'
        let $out2 = '  UPDATED with the latest Pay Check data for the Agencies below.'
     Else
        let $out2 = '  REMOVED for the Agencies below.'
     End-If

     If $Shown <> 'Y'
        Show ''
        Show $out1
        Show $out2
        Show ''
        let $Shown = 'Y'
     End-If
  Else
     let $out  = ''
  End-If

  If $Paper_Filers = 'Y'
     If $Create_File = 'Y'
        If $Rptg_Agency <> $Prev_Rptg_Agency
           Show ''
           Show $Rptg_Agency ' EIT Paper Files' $out
           Show '*************************************************************************'
           Show 'The following EIT paper file(s) for the above Agency have been created:'
           Show 'RSITAXPA_' $Prcs_Process_Instance '_3.PDF'
           let $Show_FirstTime = 'N'
        End-If
     Else
        If $Rptg_Agency <> $Prev_Rptg_Agency
           Show ''
           Show $Rptg_Agency ' EIT File' $out
           Show '*************************************************************************'
           Show 'Program run in Report Only mode. No EIT paper file(s) have been created.'
           let $Show_FirstTime = 'N'
        End-If
     End-If
  Else

     If $Create_File = 'Y'
        If $Rptg_Agency <> $Prev_Rptg_Agency
           Show ''
           Show $Rptg_Agency ' EIT File' $out
           Show '*************************************************************************'
           Show 'The following EIT file(s) have been created:'
        End-If

        If $FileID <> $Prev_FileID
           Show $FileID
        End-If
     Else
        If $Rptg_Agency <> $Prev_Rptg_Agency
           Show ''
           Show $Rptg_Agency ' EIT File' $out
           Show '*************************************************************************'
           Show 'Program run in Report Only mode. No EIT file(s) have been created.'
        End-If
     End-If
  End-If

  let $Prev_Rptg_Agency = $Rptg_Agency
  let $Prev_FileID      = $FileID

End-Procedure Agency-End-File

!***********************************************************************
! Procedure Write-Error   !Record format for the RSITAXPA Error Log File
!***********************************************************************
Begin-Procedure Write-Error

  write 20 from $Err_Msg:512 ! 1 - 512

End-Procedure Write-Error

!***********************************************************************
! Procedure Error-Log
!***********************************************************************
Begin-Procedure Error-Log

  Show ''
  Show '*************************************************************************'
  Show ''
  Show 'Errors were found in the data. The Error Log File below has been created: '
  Show $ErrorFileID
  Show ''

  If $Max_Errors = 'N'
     Show 'The above Error Log File can also be found in the Process Monitor as: '
     Show 'RSITAXPA_' $Prcs_Process_Instance '_2.PDF'
     Show ''
  End-If

End-Procedure Error-Log

!***********************************************************************
! Procedure Clear-F-Record
!***********************************************************************
Begin-Procedure Clear-F-Record

  move 0    to #Local_Wages_F
  move 0    to #Local_Tax_F
  move 0    to #Count_F
  move $Sp1 to $Local_Wages_F
  move $Sp1 to $Local_Tax_F
  move $Sp1 to $S_Count_F

End-Procedure Clear-F-Record

!***********************************************************************
! Procedure Zero-S-Record
!***********************************************************************
Begin-Procedure Zero-S-Record

  move 0    to #Local_Wages
  move 0    to #Local_Tax
  move 0    to #Local_Taxes_Dec
  move 0    to #Local_Wages_Dec
  move $Sp1 to $Local_Wages
  move $Sp1 to $Local_Tax
  move $Sp1 to $Local_Wages_Dec
  move $Sp1 to $Local_Taxes_Dec
  move $Sp1 to $Local_Wages_Print
  move $Sp1 to $Local_Taxes_Print

End-Procedure Zero-S-Record

!***********************************************************************
! Procedure RS-CommonClear
!***********************************************************************
Begin-Procedure RS-CommonClear

  move $Sp1 to $Suffix
  move $Sp1 to $EeAddress1
  move $Sp1 to $EeAddress2
  move $Sp1 to $EeCity
  move $Sp1 to $EeState
  move $Sp1 to $EeZip

End-Procedure RS-CommonClear

!***********************************************************************
! Procedure Clear-T-Record
!***********************************************************************
Begin-Procedure Clear-T-Record

  move $Sp1 to $Count_T
  move $Sp1 to $Local_Wages_T
  move $Sp1 to $Local_Tax_T
  move 0    to #Count_T
  move 0    to #Local_Wages_T
  move 0    to #Local_Tax_T

End-Procedure Clear-T-Record

!***********************************************************************
! Procedure Populate-Headings
!***********************************************************************
Begin-Procedure Populate-Headings

  If $Print_Detail = 'Y'
     let $ReportTitle = $Rptg_Agency || ' - PA Act 32 EIT File Detail Report'
  End-If

End-Procedure Populate-Headings

!***********************************************************************
! Procedure Print-Columns
!***********************************************************************
Begin-Procedure Print-Columns

  use-report DEFAULT

  Evaluate $Column_Hdr
    When = 'RA Record'
      let $out = 'RA Record'
      print $out                  (0,1)
      let $Separator = rpad('',173,'=')
      print $Separator            (+1,1)
      Break
    When = 'RE Record'
      let $out = 'RE Record'
      print $out                  (0,1)
      let $Separator = rpad('',173,'=')
      print $Separator            (+1,1)
      Break
    When = 'Employee Detail'
      print 'Local Taxable'       (0,147)
      print 'Local'               (,166)
      print 'Company'             (+1,1)
      print 'Locality'            (,10)
      print 'Employee ID'         (,22)
      print 'Employee Name'       (,35)
      print 'National ID'         (,87)
      print 'Resident PSD'        (,100)
      print 'Work Location PSD'   (,117)
      print 'Gross'               (,151)
      print 'Tax'                 (,167)
      let $Separator = rpad('',173,'=')
      print $Separator            (+1,1)
      Break
    When = 'Local Totals'
      let $Separator = rpad('',173,'-')
      print $Separator            (+2,1)
      let $PrtLocalTxt = 'Report Totals for Employer LWT ID: ' || $Employer_Id_Lwt
      print $PrtLocalTxt          (+1,1) Bold
      print 'LWT ID Total'        (0,98)
      print 'Local Taxable'       (0,147)
      print 'Local'               (,166)
      print 'Employee Count'      (+1,98)
      print 'Gross'               (,151)
      print 'Tax'                 (,167)
      let $Separator = rpad('',76,'=')
      print $Separator            (+1,98)
      Break
    When = 'Agency Company Totals'
      let $PrtLocalTxt = 'Report Totals for Company: ' || $Company
      print 'Company Total'       (,98)
      print 'Local Taxable'       (,147)
      print 'Local'               (,166)
      print $PrtLocalTxt          (+1,1) Bold
      print 'Employee Count'      (,98)
      print 'Gross'               (,151)
      print 'Tax'                 (,167)
      let $Separator = rpad('',173,'=')
      print $Separator            (+1,1)
      Break
    When = 'Agency Totals'
      If $RSI_Combine_Co <> 'Y'
         let $out = 'File Totals for Agency: ' || $Rptg_Agency || ' - ' || 'Company: ' || $Company

          If $RSI_Combine_Tcd = 'N'
             let $out = 'File Totals for Agency: ' || $Rptg_Agency || ' - ' || 'Company: ' || $Company
                                                   || ' - ' || 'TCD: ' || $TcdPSDCode
         End-If
      Else
         let $out = 'File Totals for Agency: ' || $Rptg_Agency

         If $RSI_Combine_Tcd = 'N'
            let $out = 'File Totals for Agency: ' || $Rptg_Agency || ' - ' || 'TCD: ' || $TcdPSDCode
         End-If
      End-If
      print $out                  (0,1)
      let $Separator = rpad('',173,'=')
      print $Separator            (+1,1)
      Break
  End-Evaluate

End-Procedure Print-Columns

!***********************************************************************
! Procedure Get-Month
!***********************************************************************
Begin-Procedure Get-Month

  Evaluate #Balance_Period
    When = 1
      let $Month = 'January'
      Break
    When = 2
      let $Month = 'February'
      Break
    When = 3
      let $Month = 'March'
      Break
    When = 4
      let $Month = 'April'
      Break
    When = 5
      let $Month = 'May'
      Break
    When = 6
      let $Month = 'June'
      Break
    When = 7
      let $Month = 'July'
      Break
    When = 8
      let $Month = 'August'
      Break
    When = 9
      let $Month = 'September'
      Break
    When = 10
      let $Month = 'October'
      Break
    When = 11
      let $Month = 'November'
      Break
    When = 12
      let $Month = 'December'
      Break
  End-Evaluate

End-Procedure Get-Month

!***********************************************************************
! Procedure Heading 5
!***********************************************************************
Begin-Heading 5

  #Include 'stdhdg01.sqc'
  print 'Transmitter Company: '  (3,1)
  print $XCompany                (0,+2)
  print &CT.DESCR                (0,+2)
  print $ReportDescr             (3,)  center
  print 'Federal EIN: '          (4,1)
  move &CT.FEDERAL_EIN to $FederalEIN
  let #loc = length($FederalEIN)
  extract $Federal_EIN from $FederalEIN 0 #loc

  If #loc <> 9
     print '0'                   (0,+2)
     print $Federal_EIN          (0,0) edit X-XXXXXXX
  Else
     print $Federal_EIN          (0,+2) edit XX-XXXXXXX
  End-If

End-Heading

!***********************************************************************
! Procedure Heading 4
!***********************************************************************
Begin-Heading 4 for-reports=(PRINTERRORS)
  #Include 'stdhdg01.sqc'

  let   $ErrorReportDescr = 'ERROR REPORT'
  print $ReportDescr                  (3,)   center
  print $ErrorReportDescr             (+1,)  center
  let   $Separator = rpad('',173,'=')
  print $Separator                    (+1,1)

End-Heading

!***********************************************************************
! Procedure Heading 1
!***********************************************************************
Begin-Heading 1 for-reports=(PRINTFORMS)
  ! No Header
End-Heading

!***********************************************************************
! Procedure Footing
!***********************************************************************
Begin-Footing 1 for-reports=(PRINTERRORS)

  page-number (1,1) 'Page '
  last-page   ()    ' of '

End-Footing

!***********************************************************************
! Procedure Print-Error
!***********************************************************************
Begin-Procedure Print-Error

  use-report PRINTERRORS

  print $Err_Msg (+1,1)

End-Procedure Print-Error

!***********************************************************************
! Procedure Print-DCED-Form-RE
!***********************************************************************
Begin-Procedure Print-DCED-Form-RE

  use-report PRINTFORMS

  If $WorkSiteTotals_Written = 'Y'
     use-report PRINTFORMS
     new-page
  End-If

  do Alter-Printer-P11

  let $Src = $ImgPath || $ImageName

  Print-Image (1,2)
  Type       = jpeg-file
  Source     = $Src
  Image-Size = ({ImgWidth},{ImgHeight})

  let $Form_Open1 = 'Y'
  let $WorkSiteTotals_Written = 'N'

!  do Find-Field-Positions  !Used to determine field positions on Form 1

End-Procedure Print-DCED-Form-RE

!***********************************************************************
! Procedure Print-DCED-Form-RS
!***********************************************************************
Begin-Procedure Print-DCED-Form-RS

  use-report PRINTFORMS
  new-page
  do Alter-Printer-P8

  let $Src = $ImgPath || $ImageName

  Print-Image (1,2)
  Type       = jpeg-file
  Source     = $Src
  Image-Size = ({ImgWidth},{ImgHeight})

  let $Form_Open2 = 'Y'

!  do Find-Field-Positions  !Used to determine field positions on Form 2

End-Procedure Print-DCED-Form-RS

!***********************************************************************
! Procedure Alter-Printer-P11
!***********************************************************************
Begin-Procedure Alter-Printer-P11

  Alter-Printer
    symbol-set = 10J
    font       = 3
    point-size = 11

End-Procedure Alter-Printer-P11

!***********************************************************************
! Procedure Alter-Printer-P9
!***********************************************************************
Begin-Procedure Alter-Printer-P9

  Alter-Printer
    symbol-set = 10J
    font       = 3
    point-size = 9

End-Procedure Alter-Printer-P9

!***********************************************************************
! Procedure Alter-Printer-P8
!***********************************************************************
Begin-Procedure Alter-Printer-P8

  Alter-Printer
    symbol-set = 10J
    font       = 3
    point-size = 8

End-Procedure Alter-Printer-P8

!***********************************************************************
! Procedure Find-Field-Positions !Used to make changes to Form Layout
!***********************************************************************
Begin-Procedure Find-Field-Positions
  do Alter-Printer-P8
  let #row = 1
  let #col = 3

  While #row <= {Page_Max_Lines}
    move #row to $Print_Row 999
    Print $Print_Row    (#row,1)

    While #col <= {Page_Max_Cols}
      move #col to $Print_Col 99
      Print $Print_Col  (#row,#col)
      let #col = #col + 2
    End-While
    let #col = 3
    let #row = #row + 5
  End-While
  do Alter-Printer-P11

End-Procedure Find-Field-Positions

!***********************************************************************
! Procedure Show-DebugA-Statements
!***********************************************************************
Begin-Procedure Show-DebugA-Statements

  Show '#i                     = |' #i '|'
  Show '&FLT.RSI_RECORD_TYPE   = |' &FLT.RSI_RECORD_TYPE '|'
  Show '&FLT.RSI_RECORD_NAME   = |' &FLT.RSI_RECORD_NAME '|'
  Show '&FLT.COLUMNNUM         = |' &FLT.COLUMNNUM '|'
  Show '&FLT.RSI_VARIABLE_NAME = |' &FLT.RSI_VARIABLE_NAME '|'
  Show '&FLT.RSI_START_POS     = |' &FLT.RSI_START_POS '|'
  Show '&FLT.RSI_END_POS       = |' &FLT.RSI_END_POS '|'
  Show '&FLT.RSI_LENGTH        = |' &FLT.RSI_LENGTH '|'
  Show '&FLT.RSI_FILL_VALUE    = |' &FLT.RSI_FILL_VALUE '|'
  Show '&FLT.RSI_FILL_SIDE     = |' &FLT.RSI_FILL_SIDE '|'
  Show '&FLT.RSI_CASE          = |' &FLT.RSI_CASE '|'
  Show '&FLT.RSI_JUSTIFY       = |' &FLT.RSI_JUSTIFY '|'
  Show '&FLT.RSI_FILE_TYPE     = |' &FLT.RSI_FILE_TYPE '|'
  Show '**************************************************************'

End-Procedure Show-DebugA-Statements

!***********************************************************************
! Procedure Show-DebugB-Statements
!***********************************************************************
Begin-Procedure Show-DebugB-Statements

  Show '#h                      = |' #h '|'
  Show '&RCD.RSI_RPTG_AGENCY    = |' &RCD.RSI_RPTG_AGENCY '|'
  Show '&RCD.RSI_RECORD_TYPE    = |' &RCD.RSI_RECORD_TYPE '|'
  Show '&RCD.RSI_RECORD_NAME    = |' &RCD.RSI_RECORD_NAME '|'
  Show '&RCD.RSI_LENGTH         = |' &RCD.RSI_LENGTH '|'
  Show '&RCD.RSI_FILE_EXTENSION = |' &RCD.RSI_FILE_EXTENSION '|'
  Show '&RCD.RSI_FILE_OVERRIDE  = |' &RCD.RSI_FILE_OVERRIDE '|'
  Show '&RCD.RSI_FILE_TYPE      = |' &RCD.RSI_FILE_TYPE '|'
  Show '&RCD.RSI_IMAGE_NAME     = |' &RCD.RSI_IMAGE_NAME '|'

End-Procedure Show-DebugB-Statements

!***********************************************************************
! Procedure Show-DebugC-Statements
!***********************************************************************
Begin-Procedure Show-DebugC-Statements

  Show '#j              = |' #j '|'
  Show '#Column_num     = |' #Column_num '|'
  Show '$Variable_Name  = |' $Variable_Name '|'
  Show '$Variable_Name  = |' $Variable_Name '|'
  Show '#Print_Row      = |' #Print_Row '|'
  Show '#Print_Column   = |' #Print_Column '|'
  Show '#Field_Length   = |' #Field_Length '|'
  Show '$Fill_Value     = |' $Fill_Value '|'
  Show '$Fill_Side      = |' $Fill_Side '|'
  Show '$Case           = |' $Case '|'
  Show '$Justify        = |' $Justify '|'
  Show '$File_Type      = |' $File_Type '|'
  Show '**************************************************************'

End-Procedure Show-DebugC-Statements

!***********************************************************************
! Procedure Show-DebugD-Statements
!***********************************************************************
Begin-Procedure Show-DebugD-Statements

  Show '$Agency      = |' $Rptg_Agency '|'
  Show '$Record_Type = |' $Rsi_Record_Type '|'
  Show '$File_Layout = |' $Rsi_Record_Name '|'
  Show '#Column_num  = |' #Column_num  '|'
  Show '$FieldName   = |' $FieldName   '|'
  Show '$FieldValue  = |' $FieldValue  '|'
  Show '$WriteValue  = |' $WriteValue  '|'
  Show '$WriteRecord = |' $WriteRecord '|'
  Show '****************************************************************'

End-Procedure Show-DebugD-Statements

!***********************************************************************
! Procedure Show-DebugE-Statements
!***********************************************************************
Begin-Procedure Show-DebugE-Statements

  Show '#k                = |' #k '|'
  Show ' $Map_Rptg_Agency = |' $Map_Rptg_Agency '|'
  Show ' $Map_Record_Type = |' $Map_Record_Type '|'
  Show ' $Map_Record_Name = |' $Map_Record_Name '|'
  Show ' $Map_File_Type   = |' $Map_File_Type '|'
  Show ' $Map_Image_Name  = |' $Map_Image_Name '|'
  Show '****************************************************************'

End-Procedure Show-DebugE-Statements

!***********************************************************************
! Procedure Show-DebugF-Statements
!***********************************************************************
Begin-Procedure Show-DebugF-Statements

  Show '#p                  = |' #p '|'
  Show '$Ld_Emplid          = |' $Ld_Emplid '|'
  Show '$Ld_Rsi_Rptg_Agency = |' $Ld_Rsi_Rptg_Agency '|'
  Show '$Ld_Company         = |' $Ld_Company '|'
  Show '$Ld_Locality        = |' $Ld_Locality '|'
  Show '$Ld_WorkPSDCode     = |' $Ld_WorkPSDCode '|'
  Show '$Ld_Wrk_Address1    = |' $Ld_Wrk_Address1 '|'
  Show '$Ld_Wrk_Address2    = |' $Ld_Wrk_Address2 '|'
  Show '$Ld_Wrk_Postal      = |' $Ld_Wrk_Postal '|'
  Show '$Ld_ResPSDCode      = |' $Ld_ResPSDCode '|'
  Show '$Ld_Res_Address1    = |' $Ld_Res_Address1 '|'
  Show '$Ld_Res_Address2    = |' $Ld_Res_Address2 '|'
  Show '$Ld_Res_Postal      = |' $Ld_Res_Postal '|'
  Show '$Ld_Wrk_City        = |' $Ld_Wrk_City '|'
  Show '$Ld_Wrk_State       = |' $Ld_Wrk_State '|'
  Show '$Ld_Res_City        = |' $Ld_Res_City '|'
  Show '$Ld_Res_State       = |' $Ld_Res_State '|'
  Show '$Ld_TcdPSDCode      = |' $Ld_TcdPSDCode '|'
  Show '$Ld_Employer_Id_Lwt = |' $Ld_Employer_Id_Lwt '|'
  Show '#Ld_Tax_Gross       = |' #Ld_Tax_Gross '|'
  Show '#Ld_Tax_Curr        = |' #Ld_Tax_Curr '|'
  Show '$Check_Date         = |' $Check_Date '|'
  Show '****************************************************************'

End-Procedure Show-DebugF-Statements

!***********************************************************************
! Procedure Show-DebugG-Statements
!***********************************************************************
Begin-Procedure Show-DebugG-Statements

  Show ' '
  Show 'Step #' #Step
  Show '************************************************* '
  Show '#Balance_Year       = |' #Balance_Year '|'
  Show '#Balance_Period     = |' #Balance_Period '|'
  Show '$Rptg_Period        = |' $Rptg_Period '|'
  Show '$Ld_RSI_Rptg_Agency = |' $Ld_RSI_Rptg_Agency '|'
  Show '$Ld_Company         = |' $Ld_Company '|'
  Show '$Ld_Emplid          = |' $Ld_Emplid '|'
  Show '$Ld_Locality        = |' $Ld_Locality '|'
  Show '$Ld_WorkPSDCode     = |' $Ld_WorkPSDCode '|'
  Show '$Ld_Wrk_Address1    = |' $Ld_Wrk_Address1 '|'
  Show '$Ld_Wrk_Address2    = |' $Ld_Wrk_Address2 '|'
  Show '$Ld_Wrk_Postal      = |' $Ld_Wrk_Postal '|'
  Show '$Ld_ResPSDCode      = |' $Ld_ResPSDCode '|'
  Show '$Ld_Res_Address1    = |' $Ld_Res_Address1 '|'
  Show '$Ld_Res_Address2    = |' $Ld_Res_Address2 '|'
  Show '$Ld_Res_Postal      = |' $Ld_Res_Postal '|'
  Show '$Ld_Wrk_City        = |' $Ld_Wrk_City '|'
  Show '$Ld_Wrk_State       = |' $Ld_Wrk_State '|'
  Show '$Ld_Res_City        = |' $Ld_Res_City '|'
  Show '$Ld_Res_State       = |' $Ld_Res_State '|'
  Show '$Ld_TcdPSDCode      = |' $Ld_TcdPSDCode '|'
  Show '$Ld_Employer_Id_Lwt = |' $Ld_Employer_Id_Lwt '|'
  Show '$Ld_Resident        = |' $Ld_Resident '|'
  Show '#Ld_Txgrs_Ytd       = |' #Ld_Txgrs_Ytd '|'
  Show '#Ld_Txgrs_Qtd       = |' #Ld_Txgrs_Qtd '|'
  Show '#Ld_Txgrs_Mtd       = |' #Ld_Txgrs_Mtd '|'
  Show '#Ld_Tax_Ytd         = |' #Ld_Tax_Ytd '|'
  Show '#Ld_Tax_Qtd         = |' #Ld_Tax_Qtd '|'
  Show '#Ld_Tax_Mtd         = |' #Ld_Tax_Mtd '|'
  Show '$Ld_LocalTaxType    = |' $Ld_LocalTaxType '|'
  Show '$Sp1                = |' $Sp1 '|'
  Show '$Save_Row_Init      = |' $Save_Row_Init '|'
  Show '$Start              = |' $Start '|'
  Show '$Prcs_OprID         = |' $Prcs_OprID '|'
  Show '************************************************* '

End-Procedure Show-DebugG-Statements

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'rsiagcd.sqc'   !Agency Specific Code used by RSITAXPA.sqr
#Include 'rsiw2pa.sqc'   !Agency Specific Record Types used by RSIAGCD.sqc
