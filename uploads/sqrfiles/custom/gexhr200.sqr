!***********************************************************************
!  GEXHR200: Personnel Actions Report - Richmond Road Warehouse        *
!               (LOCAL 507 Reconciliation of Dues)                     *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved         *
!***********************************************************************
! GEXHR200:         Personnel Actions Report - Richmond Road Warehouse *
!                                                                      *
! Narrative:        This program lists Action,Action/Reason, Name, SSN,*
!                   Effdt, Status, hiredate, termdate, lastday worked, *
!                   LOA Return.  Sorted by Company/Paygroup/Unioncode. *
!                   Report is double-spaced.                           *
!                                                                      *
! #Debugx Used:         #debug9 paragraph trace                        *
!                       #debug8 key variable values                    *
!                       #debug7 data returned from sql calls           *
!                                                                      *
! SQL Tables:           PERSONAL_DATA                                  *
!                       EMPLOYMENT                                     *
!                       JOB                                            *
!                       JOB_LABOR                                      *
!                       PERS_NID                                       *
!                                                                      *
! Written by:           Susan Mahady                                   *
!                                                                      *
! Normally Run:         Monthly                                        *
!                                                                      *
! Control Parms:        Company(s)                                     *
!                       Paygroup(s                                     *
!                       Effdt (from, thru date)  default to            *
!                                 prior calendar month                 *               
!                       Action                                         *
!                       Union Code                                     *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  INITIALS     DATE         DESCRIPTION OF THE CHANGE                 *
!***********************************************************************
!  SCM         11/16/2000    Initial Creation                          *
!                                                                      *
!  SCM          1/09/2002    Changed effdt criteria on Job Labor       *
!                            Select was not picking up enough rows.    *
!                            Fixed date last worked select and added   *
!                            action <> DTA. (sys auto generated row and*
!                            does not carry over the date last worked) *
!                            Added fromdate/thrudate to heading        *
!  PSR          08/12/2002   Modified UNION_CD FROM JOB_LABOR TO JOB   * 
!                            - Upgrade 8.3                             *
!  GEX-MXT      04/24/2008   Change to print correct Action description*
!***********************************************************************


#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and Page-Size Initialization (Lanscape)

#define #column1     1
#define #column2     8
#define #column3    24
#define #column4    61
#define #column5    91
#define #column6   108
#define #column7   119
#define #column8   132
#define #column9   144
#define #column10  162

Begin-Heading 9
#debug9 Show 'Begin-Heading'
  #Include 'stdhdg01.sqc'
  
  print 'Company:'            (3,1)
  print $company              (,13)
  print 'Paygroup:'           (4,1)
  print $paygroup             (,13)
  print $PayGroupName         (,17)
  print 'Union Cd:'           (5,1)
  print $union_cd             (,13)
  print 'From Date '          (6,1)           	!SCM  1/9/2002
  print $Format_FromDate      (,+1)		!SCM  1/9/2002
  Print 'Thru Date'           (,+2)    	 !SCM  1/9/2002
  Print $Format_ThruDate      (,+1)		!SCM  1/9/2002 
 
  print 'ACTION'                          (8,{#column1})
  print 'DESCRIPTION    REASON       '    ( ,{#column2})
  print 'NAME'                            ( ,{#column4})
  print 'SSN'                             ( ,{#column5})
  print 'STATUS'                          ( ,{#column6})
  print 'HIREDATE'                        ( ,{#column7})
  print 'TERMDATE'                        ( ,{#column8})
  print 'LAST DAY WORKED'                 ( ,{#column9})
  print 'LOA RETURN'                      ( ,{#column10})

  Print '-'                   (9,{#column1} , 6)   Fill
  Print '-'                   ( ,{#column2} , 47)  Fill
  Print '-'                   ( ,{#column4} , 28)  Fill
  Print '-'                   ( ,{#column5} , 11)  Fill
  Print '-'                   ( ,{#column6} , 6)   Fill
  Print '-'                   ( ,{#column7} , 9)  Fill
  Print '-'                   ( ,{#column8} , 9)  Fill
  Print '-'                   ( ,{#column9} , 15)  Fill
  Print '-'                   ( ,{#column10} , 11) Fill
  
End-Heading

Begin-Report
#debug9 Show 'Begin-Report'
  Do P100-Initialization
  Do P200-Main-Process
  Do P300-Finalization
End-Report

Begin-Procedure P100-Initialization
#debug9 Show 'P100-Initialization'
  Do Init-DateTime           !datetime.sqc
  Do Init-Number             !number.sqc
  Do Get-Current-DateTime    !curdttim.sqc
  Do Stdapi-Init             !stdapi.sqc

  Let $ReportID      = 'GEXHR200'
  Let $ReportTitle   = 'PERSONNEL ACTIONS - RICHMOND ROAD WAREHOUSE'

  Show '$ReportID    = ' $ReportID
  Show '$ReportTitle = ' $ReportTitle

  Let $GEXXX901_Company_Alias  = 'J.COMPANY'
  Let $GEXXX901_Paygroup_Alias = 'J.PAYGROUP'
  Let $GEXXX913_UNION_CD_Alias = 'J.UNION_CD'

  If $prcs_process_instance = ''
    do Ask-From-Thru-Date
    let $Prcs_OPRID = 'SQRW/pssqr'
    let $PRCS_RUN_CNTL_ID = 'manual'
    Do P110-SQRW-Run-Controls
  Else
    do Select-Parameters            !hrrnctl1.sqc  selects values from PS_RUN_CNTL_HR
!                                       (also executes para Get-Values in this sqr)
    do Get-Actions                  !hrrnctl2.sqc 

    Do GEXXX901-Select-Company-Paygroup-Parameters
    Do GEXXX913-Select-UNION-CD-Parameters  

    If Rtrim($RUN_CNTL_HR.FROMDATE, ' ') = '' or
       Rtrim($RUN_CNTL_HR.THRUDATE, ' ') = ''
      Let $Date_Range_Criteria = '1=1'
      Let $Date_Range_Display_Criteria = 'ALL'
    Else
      Let $Date_Range_Criteria = 'NVL(J.EFFDT) BETWEEN ''' || $RUN_CNTL_HR.FROMDATE || ''' AND ''' || $RUN_CNTL_HR.THRUDATE || ''''
      Let $Date_Range_Display_Criteria = $Date_Range_Criteria
    End-If

   End-If

  date-time () HH:MI:SS &timeBegan
  date-time () MM/DD/YYYY &dateBegan
  show ' '
  show 'Report Began at ' &timeBegan ' on ' &dateBegan

  Let $X000_Order_By = 'Company, Paygroup, Union, Action, Name'
  do P130-Print-Cover-Page
End-Procedure

begin-procedure Get-Values
     display 'get-values paragraph'
     let $runctl_fromdate = &RUN_CNTL_HR.FROMDATE
     let $runctl_thrudate = &RUN_CNTL_HR.THRUDATE

     let $language_cd = $prcs_language_cd

     If Rtrim($runctl_fromdate, ' ') = '' or
       Rtrim($runctl_thrudate, ' ') = ''
         do Calc-Prior-Month-Beg-End
!         Do Convert-to-dtu-date($AsofToday,$Today)
!         do dtu-add-months($today,-1,$prev_dt_dtu)    !get prior month 
!         do convert-from-dtu-date($prev_dt_dtu,$prev_dt)

          let $FromDate = $DB_1st_day_priormth         
          let $ThruDate = $DB_last_day_priormth
     else
         Let $FromDate = $runctl_fromdate
         Let $ThruDate = $runctl_thrudate
     end-if
 
    display 'From Date: '
    display $FromDate
    display 'ThruDate: '
    display $ThruDate    
     
end-procedure

!*****************************************
begin-procedure Calc-Prior-Month-Beg-End
!*****************************************
Do Format-DateTime($SysDateTime, $Out, {DEFCMP}, '','')
let $SysDateTime_YYYY = Substr($Out,1,4)
let $SysDateTime_MM = Substr($Out,5,2)
let $SysDateTime_DD = Substr($Out,7,2)          

!*******   calculate the year  *************
if $SysDateTime_MM = '01'                           !if it is January, calc the prior year
  Do Convert-To-DTU-Date($AsOfToday, $BeginDate_DTU)
  Do Dtu-Add-Years($BeginDate_DTU, -1, $BeginDate_DTU)    !this date in the format yyyy-mm-dd
  let $PriorMth_YYYY = Substr($BeginDate_DTU,1,4)
else                                                !else just let the year = current year
  let $PriorMth_YYYY = $SysDateTime_YYYY
end-if

!**************************************************************
!**************  take today's date and calc the previous month
!**************************************************************
let #SysDateTime_MM = TO_NUMBER($SysDateTime_MM)                          !convert to numeric
if #SysDateTime_MM = 01
    let $Prior_month = '12'
else
    if #SysDateTime_MM = 12
      let $Prior_month = '11'
    else
        if #SysDateTime_MM = 11
           let $Prior_month = '10'
        else
            Subtract 1 from #SysDateTime_MM
            let #SysDateTime_MM_Round = ROUND(#SysDateTime_MM,0)
            let $SysDateTime_MM_Round = #SysDateTime_MM_Round             !convert to alpha for string 
            let $SysDateTime_MM_with0 = '0' || $SysDateTime_MM_Round  
            let $Prior_month = $SysDateTime_MM_with0           
       end-if
    end-if  
end-if
let $Prior_month_2char = Substr($Prior_month,1,2)         !get 2numeric identifier of prior month   
let $1st_day_prior_month = $PriorMth_YYYY || $Prior_month_2char  || '01'   !convert to database format
Do Format-DateTime($1st_day_prior_month, $DB_1st_day_priormth, {DEFCMP}, '','Native')  !convert date to dbase format for select stmt

!*********************************************************************************************
!****  convert 1st_day_prior_month to dtu format to do math for finding the last day of month
!****    dtu format:  2000-10-01       database format for sql select:  01-OCT-2000
!*********************************************************************************************
          
let $1st_day_prior_month_dtu = $PriorMth_YYYY || '-' || $Prior_month_2char || '-' || '01'   !dtu format
do dtu-month-end ($1st_day_prior_month_dtu,$dtu_date_out)          !calc last day of month
!**********  convert from dtu format:  2000-10-31   to dbase format:  31-OCT-2000
Do Convert-From-DTU-Date($dtu_date_out,$DB_last_day_priormth)     !convert back to native from dtu
 
end-procedure

Begin-Procedure P110-SQRW-Run-Controls
#debug9 Show 'P110-SQRW-Run-Controls'

  Display 'Enter Company/Paygroup or leave blank to exit.'
  While 1=1
    Input $In-Company Maxlen=3 'Company'
    Uppercase $In-Company
    If Rtrim($In-Company, ' ') = ''
      Break
    Else
      Input $In-Paygroup Maxlen=3 'Paygroup'
      Uppercase $In-Paygroup
      If Rtrim($In-Paygroup, ' ') = ''
        Let $Include_Condition = '(' || $GEXXX901_Company_Alias || ' = '''  || $In-Company || ''')'
      Else
        Let $Include_Condition = '(' || $GEXXX901_Company_Alias || ' = '''  || $In-Company || ''' And ' || $GEXXX901_Paygroup_Alias || ' = '''  || $In-Paygroup || ''')'
      End-If
      Add 1 To #GEX_RC_PAYGROUP_ROWS
      
      If #GEX_RC_PAYGROUP_ROWS = 1
        Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = '(' || $Include_Condition
      Else
        Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA || ' Or '  || $Include_Condition
      End-If
    End-If
  End-While 
  
 If #GEX_RC_PAYGROUP_ROWS = 0
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = '1=1'
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA || ')'
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
  End-If
  
 Display 'Enter Union Code or leave blank to exit.'
  While 1=1
    Input $In-Union-Cd Maxlen=3 'Union Code'
    Uppercase $In-Union-Cd
    If Rtrim($In-Union-Cd, ' ') = ''
      Break
    Else
        Let $Include_Condition = '(' || $GEXXX913_Union_cd_Alias || ' = '''  || $In-Union-cd || ''')'
      Add 1 To #GEX_RC_UNION_CD_ROWS
      If #GEX_RC_UNION_CD_ROWS = 1
        Let $GEXXX913_INCLUDE_UNION_CD_CRITERIA = '(' || $Include_Condition
      Else
        Let $GEXXX913_INCLUDE_UNION_CD_CRITERIA = $GEXXX913_INCLUDE_UNION_CD_CRITERIA || ' Or '  || $Include_Condition
      End-If
    End-If
  End-While 

 If #GEX_RC_UNION_CD_ROWS = 0
    Let $GEXXX913_INCLUDE_UNION_CD_CRITERIA = '1=1'
    Let $GEXXX913_INCLUDE_UNION_CD_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX913_INCLUDE_UNION_CD_CRITERIA = $GEXXX913_INCLUDE_UNION_CD_CRITERIA || ')'
    Let $GEXXX913_INCLUDE_UNION_CD_DISPLAY_CRITERIA = $GEXXX913_INCLUDE_UNION_CD_CRITERIA
  End-If


!  do Ask-Actions
  move '''' to $ActionString
  display 'Enter Action Code or leave blank to exit.'
  while 1 = 1
    input $Action_Code maxlen=3 'Action Code'
    let $Action_Code = upper($Action_Code)
    if RTRIM($Action_Code, ' ') = ''
      concat '''' with $ActionString
      break
    else
      if $ActionString <> ''''
         concat ''',''' with $ActionString
      end-if
      concat $Action_Code with $ActionString
      Let $Include_Condition = '(' || $GEXXX999_ACTION_CD_Alias || ' = '''  || $Action_Code || ''')'
      Add 1 To #GEX_RC_ACTION_ROWS
      If #GEX_RC_ACTION_ROWS = 1
        Let $GEXXX999_INCLUDE_ACTION_CD_CRITERIA = '(' || $Include_Condition
      Else
        Let $GEXXX999_INCLUDE_ACTION_CD_DISPLAY_CRITERIA = $GEXXX999_INCLUDE_ACTION_CD_CRITERIA || ' Or '  || $Include_Condition
      End-If
    end-if
  end-while

If #GEX_RC_ACTION_ROWS = 0
    Let $GEXXX999_INCLUDE_ACTION_CD_CRITERIA = '1=1'
    Let $GEXXX999_INCLUDE_ACTION_CD_DISPLAY_CRITERIA = 'ALL'
Else
    Let $GEXXX999_INCLUDE_ACTION_CD_CRITERIA = $GEXXX999_INCLUDE_ACTION_CD_CRITERIA || ')'
    Let $GEXXX999_INCLUDE_ACTION_CD_DISPLAY_CRITERIA = $GEXXX999_INCLUDE_ACTION_CD_CRITERIA
End-If
End-Procedure

begin-procedure P130-Print-Cover-Page
#debug9 Show 'P130-Print-Cover-Page'
  Print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'            (+5,1)
  Print '$Prcs_OprID          ='                                  (+2,5)
  Print $Prcs_OprID                                               (0,+2)
  Print '$Prcs_Run_Cntl_ID    ='                                  (+1,5)
  Print $Prcs_Run_Cntl_ID                                         (0,+2)

  Print 'SELECTION CRITERIA FOR THIS REPORT RUN:'                 (+5,2)
  Print '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA ='   (+1,5)
  Print $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA       (0,+2)
  Print '$GEXXX913_Include_Union_Cd_Display_Criteria         ='   (+1,5)
  Print $GEXXX913_Include_Union_Cd_Display_Criteria               (0,+2)
  Print 'ASKACTN.sqr $ActionString                           ='   (+1,5)
  Print $ActionString                                             (0,+2)

  
  Do Format-DateTime($FromDate, $Format_Fromdate, {DEFDATE}, '', '')
  Do Format-DateTime($ThruDate, $Format_Thrudate, {DEFDATE}, '', '')
  Print 'FromDate         ='                  (+2,5)
  Print $Format_FromDate                      (0,+2)
  Print 'ThruDate         ='                  (+1,5)
  Print $Format_ThruDate                      (0,+2)

  Print 'SORT ORDER FOR THIS REPORT RUN:'   (+5,2)
  Print $X000_Order_By                      (+2,5)

  Let #PAGE-COUNT = 0
  NEW-PAGE
End-Procedure


Begin-Procedure P200-Main-Process
#debug9 Show 'P200-Main-Process'
Begin-Select
 
J.COMPANY    ()  On-Break  Level=1
                           Print=Never
J.PAYGROUP   ()  On-Break  Level=2
                           Print=Never
J.UNION_CD  ()  On-Break  Level=3
                           Print=Never
J.ACTION     ()  On-Break  Level=4
                           Print=Never
                           After=P210-New-Page
  
J.ACTION_REASON
J.EMPL_STATUS
J.EMPLID
J.EMPL_RCD
J.EFFDT
J.LAST_DATE_WORKED
PD.NAME
E.HIRE_DT
E.TERMINATION_DT
N.NATIONAL_ID
  Let $SSN = &N.NATIONAL_ID 
  !GEX-MXT modified for getting Action Descr from setup table PS_ACTION_TBL instead of ps_xlatitem-Begin
  !move 'ACTION' to $FieldName
  !move &J.ACTION  to $FieldValue
  !do Read-Translate-Table
  move &J.ACTION  to $Action
  do Get-Action                            
  move $Action_DescrShort to $ActionName
  !GEX-MXT modified for getting Action Descr from setup table PS_ACTION_TBL instead of ps_xlatitem-End

  Let $Data-Found-Flag = 'Y'
  Let $Emplid      = &J.EMPLID
  Let $Empl_rcd    = &J.EMPL_RCD
  Let $Company     = &J.COMPANY
  Let $Paygroup    = &J.Paygroup
  Let $union_cd    = &J.UNION_CD	

!*****************************************
  move &J.Action         to $Action
  move &J.Action_Reason  to $Action_Reason
  move &J.EffDt          to $AsOfDate
  do Get-Action-Reason
!***************************************
 
  if $Action = 'RFL'             !if Return from LOA go look up prev 'LOA' record for LAST DATE WORKED
     do P205-Get-Last-Date-Worked
  end-if
     
  do P220-Print-Record

FROM   PS_PERSONAL_DATA PD,
       PS_EMPLOYMENT    E,
       PS_JOB           J,
       PS_PERS_NID      N	 

WHERE  PD.EMPLID              = J.EMPLID
AND    N.EMPLID               = PD.EMPLID
AND    J.ACTION IN ([$ACTIONSTRING])  

AND    E.EMPLID               = J.EMPLID
AND    E.EMPL_RCD            = J.EMPL_RCD
AND    J.EFFDT                =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID          = J.EMPLID
       AND    EMPL_RCD       = J.EMPL_RCD
       AND    EFFDT          between $FromDate and $ThruDate)

AND    J.EFFSEQ               =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID          = J.EMPLID
       AND    EMPL_RCD       = J.EMPL_RCD
       AND    EFFDT           = J.EFFDT)

AND [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA] 
AND [$GEXXX913_INCLUDE_UNION_CD_CRITERIA]

ORDER BY J.COMPANY, J.PAYGROUP, J.UNION_CD, J.ACTION, PD.NAME

End-Select
End-Procedure

Begin-Procedure P205-Get-Last-Date-Worked
#debug9 Show 'P205-Get-Last-Date-Worked'
Begin-Select
 
J1.ACTION
J1.EMPL_RCD     
J1.EMPL_STATUS
J1.EMPLID
J1.EFFDT
J1.LAST_DATE_WORKED
   
   let $Last_Date_Worked = &J1.LAST_DATE_WORKED
  
FROM   PS_JOB           J1 

WHERE  J1.EMPLID              = $EMPLID
AND    J1.EMPL_RCD           = $EMPL_RCD
AND    J1.EMPL_STATUS = 'P'
AND    J1.ACTION <> 'DTA'          !SCM  1/9/2002  last_date_worked not populated on DataChange row
AND    J1.EFFDT                =
      (SELECT MAX(J2.EFFDT)
       FROM   PS_JOB J2 
       WHERE  J2.EMPLID          = J1.EMPLID
       AND    J2.EMPL_RCD       = J1.EMPL_RCD
       AND    J2.EFFDT           <= J1.EFFDT)
AND    J1.EFFSEQ          =
      (SELECT MAX(J3.EFFSEQ)
       FROM   PS_JOB J3
       WHERE  J3.EMPLID       = J1.EMPLID
       AND    J3.EMPL_RCD    = J1.EMPL_RCD
       AND    J3.EFFDT        = J1.EFFDT)

End-Select

End-Procedure
 
Begin-Procedure P210-New-Page
#debug9 Show 'P210-New-Page'
  New-Page
End-Procedure

Begin-Procedure P220-Print-Record
#debug9 Show 'P220-Print-Record'
  Do Format-DateTime(&E.HIRE_DT, $hiredt, {DEFDATE}, '', '')
  Do Format-DateTime(&J.EFFDT, $effdt, {DEFDATE}, '', '')

  Print &J.ACTION                      (+2,{#column1})
  !gex-mxt modified to get action from action_tbl-Begin
  !print $XlatShortName                  (  ,{#column2})           !Action descrip from XLAT table         
  print $ActionName                      (  ,{#column2})
  !gex-mxt modified to get action from action_tbl-End
  Print &PD.NAME                       (  ,{#column4} , 30)
 
  Print $SSN                           (  ,{#column5})   
  Print &J.EMPL_STATUS                 (  ,{#column6})
  Print $hiredt                        (  ,{#column7})    
  Print $Action_Reason_Descr           (  ,{#column3})
 
!  show '$ACTION:  ' $ACTION
  if $ACTION = 'HIR' or $ACTION = 'REH'    !if new hire or rehire only print hire date
    goto end-check-action
  else                              
     if $ACTION = 'LOA' or $ACTION = 'PLA'              !if LOA (unpaid) or PLA (paid), print lastday worked           
        Do Format-DateTime(&J.LAST_DATE_WORKED, $ldaywkd, {DEFDATE}, '', '')  
        Print $ldaywkd               (  ,{#column9})
     else
        if $ACTION = 'RET' or $ACTION = 'RWP' or $ACTION = 'TWB' or $ACTION = 'TER' or $ACTION = 'TWP'
            Do Format-DateTime(&J.LAST_DATE_WORKED, $ldaywkd, {DEFDATE}, '', '')  
            Print $ldaywkd               (  ,{#column9})    
            Do Format-DateTime(&E.TERMINATION_DT, $termdt, {DEFDATE}, '', '')   
            Print $termdt           (  ,{#column8})			!if term or retire, print termdate 
        else
             if $ACTION = 'RFL'                                !if return from leave
                Do Format-DateTime(&J1.LAST_DATE_WORKED, $ldaywkd, {DEFDATE}, '', '') 
                Print $ldaywkd               (  ,{#column9})
                Print $effdt                 (  ,{#column10})
             else	
                Print '*Action Needs Added to Pgm'             ( ,{#column3})
             end-if
        end-if
     end-if
  end-if

end-check-action:
  
End-Procedure


Begin-Procedure P300-Finalization
#debug9 Show 'P300-Finalization'
  If $Data-Found-Flag <> 'Y'
    Print 'NO DATA SELECTED FOR THIS REPORT RUN'	(25,) Center
  End-If

  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded

  Do Stdapi-Term             !stdapi.sqc
  Show 'Successful end of report'
End-Procedure

!#Include 'askaod.sqc'    !Ask-As-Of-Date procedure
#include 'askftd.sqc'    !Ask From Thru Date input
#include 'askactn.sqc'   !Action input
#Include 'getactrs.sqc'  !Get-Action-Reason procedure
#Include 'gexxx900.sqc'  !Get multiple company run controls
#include 'gexxx901.sqc'  !Get company/paygroup multiple row table
#Include 'gexxx902.sqc'  !Get multiple deptid run controls
#Include 'gexxx913.sqc'  !Get multiple union_cd run controls
#Include 'gexxx921.sqc'  !Get GEX_RC_HR run control
#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrrnctl2.sqc'  !Get Action values
!#include 'smrnctl2.sqc'  !Get Action values                  TEMPORARY for TESTING
#include 'hrgetval.sqc'  !Get values mask routines
#Include 'stdapi.sqc'    !Process Scheduler Interface
#Include 'curdttim.sqc'  !Get-Current-DateTime Procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date math
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
