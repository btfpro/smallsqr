!********************************************************************** 
! SQR Name:           pbzpur.sqr  
! SQR Descr:          ADP Employment Tax, Periodic Purge. 
! Created by:         drmonroe 
! Create date:        03/03/2010 
! Last modified by:   drmonroe
! Last modified date: 03/27/2013 
!*********************************************************************** 

#define ADP_TAX_PURGE

#include 'probiz.sqc'


! *** IMPORTANT: Please set the SITE_ID (on line #9) according to the      !
!                "Client ID table" (starts on line #13)                      !
!                                                                            !
! **  Please search for your SITE_ID (MTI,CSX...) to verify that the       !
!     custom mods that have been made by you (or for you) are correct before !
!     testing.                                                               !
!--------------------------------------------------------------------------- !
#ifndef SITE_ID
  #define SITE_ID
#endif

!--------------------------------------------------------------------- !
! Version PBZPUR.SQR - ADP Tax - Periodic Purge                        !
! Report Name: PBZPUR Interface program - pbzpur.sqr                   !
! Property of  ADP Finance and Compliance Services                     ! 
! Author:  Dan Monroe                                                  !
!
! Purpose: This file is a SQR Report Program which purges           
!          a range of records from the clients' SENT PAYLINE
!          Table, which tracks paylines processed by the
!          standard periodic interface if the LOG_SENT_PAYLINES
!          definition is set.
!
!   9/25/98
!           version 5 takes into account external header
!
!   12/3/98 archived to archive\v005
!           created purge.75
!   3/23/04 added HISTORY_TABLE purge
!   4/6/05  allow for history purge with no LOG_SENT_PAYLINES
!   8/1/05  purge tax balance adjustment history too
!   4/30/08 No Garn purging
!   5/29/08 show statements include TableNames
!   2/16/09 remove Client_ID.. replace with SITE_ID's
!   4/12/11 FDC1 fix
!   6/1/12  MVS
!   6/5/12  use #prcs_process_instance = 0 to pull in params via input statements
!   3/27/13 CUSTOM_PURGE_TABLE_LOGIC (requires probiz.sqc procedure: purge-Custom-table) to cleanup anything unique.
!           and cleaned up 'display' procedures to use the #SQL-Count instead
!           eliminating the selects, this speeds up the SQR
! --------------------------------------------------------------------------------
 
 #define PURGE_VERSION     PBZPUR.July 30, 2015
 

 #ifdef LOG_SENT_PAYLINES
 ! #if {SITE_ID} = 'FDC1'
 !  #define SENT_TABLE           PS_FDC_PB2_OFFCYCL
 !  #define PROCESS_DT_FIELD     PROCESS_DT
 ! #endif
 #endif
 
 !Pharmacia (uses process scheduler for purge, but not periodic or quarterly)
 !------------
 #if {SITE_ID} = 'PUJ1'
   #define Process_Scheduler_enabled
 #endif
 
 !Normal (via front end install)
 !------------------------------
 #ifndef SENT_TABLE
   #define SENT_TABLE PS_{Client_Table_Prefix}PBZ_SENT{Client_Table_Suffix}
 #endif

 #ifndef PROCESS_DT_FIELD
   #define PROCESS_DT_FIELD {Client_Field_Prefix}PROCESS_DT{Client_Field_Suffix}
 #endif

#if {SITE_ID} = 'TRO1'
 Begin-Setup     
 #include 'setupdb.sqc'        !force 4digit year for ORACLE 
 End-Setup  
#endif

#if {SITE_ID} = 'AZU1'
 Begin-Setup     
 #include 'setupdb.sqc'        !force 4digit year for ORACLE 
 End-Setup  
#endif
 begin-report
 
  show 'Running ADP Employment Tax, Periodic Purge: {PURGE_VERSION}'
  
  show 'Site ID = {Site_ID}'
  let #site_id_len = length('{SITE_ID}')
  if #site_id_len <> 4
     show ''
     show ' ********************** Warning: invalid SITE_ID length.  It must be 4 chacters long. (defined in probiz.sqc).'
     show ''
     stop
  end-if

!garn

  #if {SITE_ID} = 'USB1'
    show 'Calling MVP-Track-SQR-Start...'
    do MVP-Track-SQR-Start 
  #endif

  do Init-DateTime
  do Init-Number

  #ifndef MVS
    show 'invoking Stdapi-Init'
    do Stdapi-Init
  #endif
  
  do Init-Report

  do Get-Current-DateTime
  display 'Report Began: ' noline
  display $AsOfToday       noline
  display ', Time '        noline
  display $AsOfNow

  display 'Program:  ' noline
  display $sqr-program
  display 'Database: ' noline
  display $sqr-database
  display 'Platform: ' noline
  display $sqr-platform
  display 'Username: ' noline
  display $username
  display 'Oprid:    ' noline
  display $Prcs_OprID
  display 'RunCtlID: ' noline
  display $Prcs_Run_Cntl_ID
  do Format-Number(#prcs_process_instance, $prcs_process_instance, '0999999')
  display 'Instance: ' noline
  display $prcs_process_instance
  
  do report

 
!4/30/08 commented out

!#ifdef VMS                                  
!    if #prcs_process_instance > 0           
!      do Update-Prcs-Run-Status             
!    end-if                                  
!#else                                       
!  if #Return-Status = {Good-OS-Status}      
!    if #prcs_process_instance > 0           
!      do Update-Prcs-Run-Status             
!    end-if                                  
!  end-if                                    
!#endif                                      

  #ifndef MVS
    show 'invoking Stdapi-Term'
    do stdAPI-Term
  #endif

  #if {SITE_ID} = 'USB1'
    show 'Calling MVP-Track-SQR-End...'
    do MVP-Track-SQR-End 
  #endif
  

end-report

begin-procedure input-prompts

 ! is the process scheduler running?
 ! ---------------------------------
 IF #PRCS_PROCESS_INSTANCE = 0

  input $SlctOffCycleDt1_DTU 'From Purge Date (YYYY-MM-DD) ' type=char

  show '$SlctOffCycleDt1_DTU ' $SlctOffCycleDt1_DTU

  if RTRIM($SlctOffCycleDt1_DTU, ' ') = ''
      move 'Y' to $Break_Prompt
      show 'Oops.  you must enter from date'
      stop
  end-if

  Do Convert-From-DTU-Date($SlctOffCycleDt1_DTU,$SlctOffCycleDt1)

  input $SlctOffCycleDt2_DTU 'Thru Purge Date (YYYY-MM-DD) ' type=char
    
  show '$SlctOffCycleDt2_DTU ' $SlctOffCycleDt2_DTU

  if RTRIM($SlctOffCycleDt2_DTU, ' ') = ''
      move 'Y' to $Break_Prompt
      show 'Oops.  you must enter thru date'
      stop
  end-if

  Do Convert-From-DTU-Date($SlctOffCycleDt2_DTU,$SlctOffCycleDt2)

 else
  ! Use the run control table to get the parameters
  ! -----------------------------------------------
  DO Select-Parameters-For-Scheduler
 end-if



  show ' '
  show 'Input Parameters:'
  show '-----------------'
  show 'Start Date: ' $SlctOffCycleDt1
  show 'End Date:   ' $SlctOffCycleDt2


end-procedure

!----------------------------------------
Begin-Procedure Select-Parameters-For-Scheduler

#ifdef Process_Scheduler_enabled
  
  show 'Select-Parameters-For-Scheduler, Process_Scheduler_enabled PRCS_OPRID = ' $PRCS_OPRID ', PRCS_RUN_CNTL_ID = ' $PRCS_RUN_CNTL_ID

Begin-Select
SP.FROMDATE
SP.THRUDATE

  show 'PS_RUN_CNTL_HR.FROMDATE: ' &SP.FROMDATE
  show 'PS_RUN_CNTL_HR.THRUDATE: ' &SP.THRUDATE

   
  Do Convert-to-DTU-Date(&SP.FROMDATE, $Fromdate_DTU)
  Do Convert-From-DTU-Date($Fromdate_DTU,$SlctOffCycleDt1)
  Do Convert-to-DTU-Date(&SP.THRUDATE, $Thrudate_DTU)
  Do Convert-From-DTU-Date($Thrudate_DTU,$SlctOffCycleDt2)


  ! let $SlctOffCycleDt1 = rtrim(&SP.FROMDATE,' ')
  ! let $SlctOffCycleDt2 = rtrim(&SP.THRUDATE,' ')

  show 'Run control $SlctOffCycleDt1 (FROM): ' $SlctOffCycleDt1
  show 'Run control $SlctOffCycleDt2 (THRU): ' $SlctOffCycleDt2

 From PS_RUN_CNTL_HR SP
 Where SP.OPRID       = $PRCS_OPRID
   and SP.RUN_CNTL_ID = $PRCS_RUN_CNTL_ID

End-Select




#endif

End-Procedure



begin-procedure report
    
     do input-prompts
     do Purge-records
     
     #ifdef HOLD_CREDITS
        display 'Purging Credit records...'
        do Purge-Credits
     #endif

     #ifdef COBRA_TABLE
       do Purge-Cobra
     #endif
     
     if #ErrorCnt = 0
        do Commit-Transaction
     Else
        Show 'Transactions Not Commited - Sent Lines Not Deleted' 
        let   $ErrorCnt = edit(#ErrorCnt, '999,999')              
        Show ' Error Count = ' $ErrorCnt                          
     end-if
    
     do Get-Current-DateTime

     #ifdef LOG_SENT_PAYLINES
      Show ' '                                                    
      let  $DeleteCount = edit(#DeleteCount, '9,999,999')         
      Show $DeleteCount ' PayLine Sent Records Deleted from {SENT_TABLE}'
      Show ' '                                                    
     #endif
     
     #ifdef HISTORY_TABLE
      Show ' '                                                     
      let  $DeleteHistoryCount = edit(#DeleteHistoryCount, '9,999,999') 
      Show $DeleteHistoryCount ' PayLine History Records Deleted from {HISTORY_TABLE}'          
      Show ' '                                                   
     #endif


     #ifdef WGPS_SENT_TABLE
      Show ' '                                                     
      let  $WGPSHistoryCount = edit(#WGPSHistoryCount, '9,999,999') 
      Show $WGPSHistoryCount ' Pay Garnish History Records Deleted from {WGPS_SENT_TABLE}'          
      Show ' '                                                   
     #endif
          
    
     #ifdef GET_BALANCE_ADJUSTMENTS
      Show ' '                                                     
      let  $BalAdjHistoryCount = edit(#BalAdjHistoryCount, '9,999,999') 
      Show $BalAdjHistoryCount ' BalAdj History Records Deleted from {LOG_ADJ_HISTORY_TABLE}'          
      Show ' '                                                   
     #endif
     
     
     !backout credits too....
     #ifdef HOLD_CREDITS
        Show ' '                                                 
        let  $DeleteCount = edit(#DeleteCreditCount '9,999,999') 
        Show $DeleteCount ' Credit Records Deleted'              
        Show ' '                                                 
     #endif
     
     #ifdef COBRA_TABLE
        Show ' '                                                 
        let  $UpdateCount = edit(#UpdateCobraCount '9,999,999') 
        Show $UpdateCount ' COBRA Records Updated'              
        Show ' '                                                 
     #endif

     display 'Program Version: {PURGE_VERSION}'     
     display 'Report Ended: ' noline
     display $AsOfNow

end-procedure

!********************************************************************** !
!---------------------------------------------------------------------- !
! Procedure: Init-Report                                                !
! Descr:     Report initialization procedure.  Prompt for filename.     !
!--------------------------------------------------------------------   !
begin-procedure Init-Report

  Move 0 to #DeleteCount                            ! RAR Added 9/27/00

end-procedure

begin-procedure Ignore
  !Dummy procedure to avoid error if no records to delete
  show 'Oops... error deleting records'
end-procedure


!********************************************************
!Procedure; Purge-Records
!********************************************************
begin-procedure Purge-Records

   show ' '
   show 'ADP-PBZPUR Deleting SENT Records...'
   show ' Dt1 ' $SlctOffCycleDt1
   show ' Dt2 ' $SlctOffCycleDt2

 #ifdef LOG_SENT_PAYLINES					

  begin-SQL  on-error=Ignore
      DELETE FROM {SENT_TABLE}
      WHERE  ( ({PROCESS_DT_FIELD} >= $SlctOffCycleDt1)
        AND    ({PROCESS_DT_FIELD} <= $SlctOffCycleDt2) )
  end-SQL

  let #DeleteCount = #SQL-Count
  
 #endif							

  #ifdef HISTORY_TABLE
    do Purge-history-table
  #endif

  #ifdef GET_BALANCE_ADJUSTMENTS                      !Include Tax Balance Adjustments in Periodic
    do Purge-BalAdj-table
  #endif

  #ifdef WGPS_SENT_TABLE
    do purge-WGPS-table
  #endif

  #ifdef CUSTOM_PURGE_TABLE_LOGIC
    do purge-Custom-table  !probiz.sqc
  #endif    

end-procedure

#ifdef HISTORY_TABLE
begin-procedure Purge-history-table

  begin-SQL  on-error=Ignore

      DELETE FROM {HISTORY_TABLE}
      WHERE  ( ({PROCESS_DT_FIELD} >= $SlctOffCycleDt1)
        AND    ({PROCESS_DT_FIELD} <= $SlctOffCycleDt2) )

  end-SQL

  let #DeleteHistoryCount = #SQL-Count
  
end-procedure
#endif


#ifdef GET_BALANCE_ADJUSTMENTS                      !Include Tax Balance Adjustments in Periodic
begin-procedure Purge-BalAdj-table

  begin-SQL  on-error=Ignore

      DELETE FROM {LOG_ADJ_HISTORY_TABLE}
      WHERE  ( (PROCESS_DT >= $SlctOffCycleDt1)
        AND    (PROCESS_DT <= $SlctOffCycleDt2) )

  end-SQL

  let #BalAdjHistoryCount = #SQL-Count

end-procedure
#endif


#ifdef HOLD_CREDITS
!*************************************************************************
!Procedure; Purge-Credits  - called from sent payline table PURGE program
!*************************************************************************
begin-procedure Purge-Credits
   show ' '
   show 'ADP Deleting Credit Records...'
   show ' Dt1 ' $SlctOffCycleDt1
   show ' Dt2 ' $SlctOffCycleDt2

  begin-SQL  

    DELETE FROM PS_{Client_Table_Prefix}PBZ_CREDITS{Client_Table_Suffix}
      WHERE  ( ({PROCESS_DT_FIELD} >= $SlctOffCycleDt1)
        AND    ({PROCESS_DT_FIELD} <= $SlctOffCycleDt2) )

  end-SQL

  let #DeleteCreditCount = #SQL-Count

end-procedure
#endif

#ifdef COBRA_TABLE
!*************************************************************************
!Procedure; Purge-Credits  - called from sent payline table PURGE program
!*************************************************************************
begin-procedure Purge-Cobra

  begin-SQL

  UPDATE {COBRA_TABLE} SET   PROCESS_DT = $AsOfToday,  POST_FLAG  = 'N'
  WHERE  ( (PROCESS_DT >= $SlctOffCycleDt1) AND (PROCESS_DT <= $SlctOffCycleDt2) )
    AND  POST_FLAG = 'P';
  
  end-sql

  let #UpdateCobraCount = #SQL-Count

end-procedure
#endif

#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !general date and time formatting procedures
#include 'datemath.sqc'  !Date Functions
#include 'number.sqc'    !general number formatting procedures
#include 'stdapi.sqc'    !StdAPI-Init procedure

#if {SITE_ID} = 'USB1'
 #include 'mtrcksqr.sqc'  ! Track SQR run 
#endif
