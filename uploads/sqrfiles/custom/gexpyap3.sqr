!***********************************************************************
!***********************************************************************
! GEXPYAP3:  This program populates GEX VOUCHER and DISTRIB table for  *
!            AP Interface for State Tax and Local Tax Data.            *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! PeopleSoft, Inc.; it is not to be copied, reproduced, or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of PeopleSoft.                        *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *        
!***********************************************************************
!  9.0 Upgrade    ISDVNPK   11/12/2007     INITIAL CREATION            *
!  9.0 GEX ISDVNPK 01/15/2008 Changed to fetch the overide DEPTID & Pay check COMPANY
!GEX-PY113974 Kundan kumar Yeedibilli  Changes done to PS_CO_LOCALTAX_TBL
!					as part of tax update 12B
!GEX-PY-SC00074444 Kundan kumar Yeedibilli Roll back the changes PS_CO_LOCALTAX_TBL
!					as part of tax update 12B 
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'usarpt.sqc' 

begin-setup
#include 'setup32a.sqc'

declare-report report-log
Printer-Type=HPLASERJET
 layout=default
end-declare

end-setup


!***************************************************************************
begin-report
#debug9 Show 'begin-report'
  do Init-DateTime
  do Init-Number
  do stdapi-init
  do Get-Calendar-Year-Id
  move 'GEXPYAP3' to $ReportID
  move 'Report Log' to $ReportTitle
  display $ReportTitle

  do Get-Current-DateTime
  let $orig_source = 'TAX'
  let #error_Count = 0
  do Report
  do Commit-Transaction
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  if #error_count = 0
     use-report report-log
     print 'NO ERRORS FOUND' (+1,1)
  end-if
  do stdapi-term
end-report
!***************************************************************************


!***************************************************************************
begin-procedure Report
#debug9 Show 'Report'
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan
  
  move 'N' to $Errorfound

  if $prcs_process_instance = ''
    do Ask-As-Of-Date
  else
    Do GEXXX922-Select-Parameters
    let $asofdate = $GEX_RC_PAY.ASOFDATE
    if rtrim($GEX_RC_PAY.ASOFDATE,' ') = ''
      let $asofdate = $asoftoday
    end-if
  end-if
 
  do Get-Last-Confirmed-Pay
  do Format-DateTime($Pay_End_Dt, $PayEndDt, {DEFDATE}, '', '')
  do Main-Process
  
end-procedure
!***************************************************************************

!***************************************************************************
Begin-Procedure Get-Last-Confirmed-Pay
#debug9 Show 'Get-Last-Confirmed-Pay'
Begin-Select
Max(pay_end_dt) &pay_end_dt

  Let $AsOfDate         = &pay_end_dt
  Let $pay_end_dt       = &pay_end_dt

  Show 'Last confirmed pay end date:  ' $pay_end_dt

  If Rtrim($pay_end_dt,' ') = ''
    Show 'No confirmed pay period found in calendar'
    Stop
  End-If

From   ps_pay_calendar
Where  pay_end_dt      <= $AsOfDate
And    pay_confirm_run  = 'Y'
End-Select
End-Procedure
!***************************************************************************

!***************************************************************************
begin-heading 9 for-reports=(report-log)
let $reportid = 'GEXPYAP3'
let $reporttitle = 'Report Log'
 #include 'stdhdg02.sqc'

 print 'Message ' (+3,1)
 print '-' (+1,1,160) fill

end-heading
!***************************************************************************

!***************************************************************************
Begin-Procedure Main-Process
#debug9 Show 'Main-Process'

Begin-Select
PK.COMPANY  
PT.STATE    
PT.LOCALITY 
PT.PAYGROUP  
DECODE((LTRIM(OVJ.GEX_DEPTID_OVR, ' ')),'',PAYERN3.DEPTID ,OVJ.GEX_DEPTID_OVR) &SPK.DEPTID   !  9.0 GEX ISDVNPK 01/15/2008
PT.TAX_CLASS
PT.PAY_END_DT 
PC.CHECK_DT 
Sum(PT.TAX_CUR) &PT.TAX_CUR



   let $Previous_Company = &PK.COMPANY 
   let $Previous_State = &PT.STATE
   let $Previous_Locality = &PT.LOCALITY
 
  do format-voucher-info


From   PS_PAY_CALENDAR        PC,
       PS_PAY_NA_TAX_LIAB     PT,
       PS_PAY_CHECK           PK,
       PS_PAY_EARNINGS     PAYERN3, !  9.0 GEX ISDVNPK 01/15/2008
       PS_JOB                 OVJ   !  9.0 GEX ISDVNPK 01/15/2008
WHERE  PK.PAY_END_DT     = $pay_end_dt
And    PT.COMPANY        = PK.COMPANY
And    PT.PAYGROUP       = PK.PAYGROUP
And    PT.PAY_END_DT     = PK.PAY_END_DT
And    PT.OFF_CYCLE      = PK.OFF_CYCLE
And    PT.PAGE_NUM       = PK.PAGE_NUM
And    PT.LINE_NUM       = PK.LINE_NUM
And    PT.SEPCHK         = PK.SEPCHK
And    PC.company        = PK.company
and    PC.paygroup       = PK.paygroup
and    PC.pay_end_dt     = PK.pay_end_Dt
!  9.0 GEX ISDVNPK 01/15/2008
AND   PAYERN3.COMPANY    = PT.COMPANY
AND   PAYERN3.PAYGROUP   = PT.PAYGROUP
AND   PAYERN3.PAY_END_DT = PT.PAY_END_DT
AND   PAYERN3.OFF_CYCLE  = PT.OFF_CYCLE
AND   PAYERN3.PAGE_NUM   = PT.PAGE_NUM
AND   PAYERN3.LINE_NUM   = PT.LINE_NUM
AND   PAYERN3.ADDL_NBR   = PT.ADDL_NBR
AND   PAYERN3.SEPCHK     = PT.SEPCHK
AND OVJ.EMPLID   = PK.Emplid
AND OVJ.EMPL_RCD = PK.Empl_Rcd
AND OVJ.EFFDT = (SELECT MAX(OVJ1.EFFDT) FROM PS_JOB OVJ1
      								WHERE OVJ1.EMPLID    = OVJ.EMPLID
												AND OVJ1.EMPL_RCD  = OVJ.EMPL_RCD
												AND OVJ1.EFFDT    <= $pay_end_dt)
AND OVJ.EFFSEQ = (SELECT MAX(OVJ2.EFFSEQ) FROM PS_JOB OVJ2
                      WHERE OVJ2.EMPLID    = OVJ.EMPLID
                        AND OVJ2.EMPL_RCD  = OVJ.EMPL_RCD
                        AND OVJ2.EFFDT     = OVJ.EFFDT)
!  9.0 GEX ISDVNPK 01/15/2008                        
Group By PK.COMPANY, PT.STATE, PT.LOCALITY, PT.PAYGROUP, DECODE((LTRIM(OVJ.GEX_DEPTID_OVR, ' ')),'',PAYERN3.DEPTID ,OVJ.GEX_DEPTID_OVR), PT.TAX_CLASS, PT.PAY_END_DT, PC.CHECK_DT 
Order By PK.COMPANY, PT.STATE, PT.LOCALITY, PT.PAYGROUP, DECODE((LTRIM(OVJ.GEX_DEPTID_OVR, ' ')),'',PAYERN3.DEPTID ,OVJ.GEX_DEPTID_OVR), PT.TAX_CLASS, PT.PAY_END_DT, PC.CHECK_DT 
End-Select
End-Procedure
!***************************************************************************


!***************************************************************************
begin-procedure format-voucher-info

  if rtrim($previous_locality,' ') <> ''
     if (&PT.TAX_CLASS = 'H')     !Withholding
       or (&PT.TAX_CLASS = 'P') !Occupational Tax
           do get-AP-vendor-info
           if rtrim(&ap.gex_ap_freq,' ') <> ''
           if $ap_info_found = 'Y' 
		if rtrim(&AP.AP_VENDOR_ID_10,' ') = ''		!GEX-PY113974 Kundan kumar Yeedibilli !GEX-PY-SC00074444 Kundan kumar Yeedibilli
		!if rtrim(&APs.AP_VENDOR_ID_10,' ') = ''		!GEX-PY113974 Kundan kumar Yeedibilli  !GEX-PY-SC00074444 Kundan kumar Yeedibilli
                   use-report report-log
                   add 1 to #error_count
	   	   print 'AP Vendor Id is blank for Deptid :' (+1,1)
		   print $prev_deptid ()
		   print '; No Voucher is created, please create it manually' ()
			             goto exit-voucher
		end-if

              let $V_AP_VENDOR_ID = &AP.AP_VENDOR_ID_10||substr(to_char(&AP.ADDRESS_SEQ_NUM),1,3)	!GEX-PY113974 Kundan kumar Yeedibilli  !GEX-PY-SC00074444 Kundan kumar Yeedibilli
              !let $V_AP_VENDOR_ID = &APs.AP_VENDOR_ID_10||substr(to_char(&APs.ADDRESS_SEQ_NUM),1,3)	!GEX-PY113974 Kundan kumar Yeedibilli  !GEX-PY-SC00074444 Kundan kumar Yeedibilli
              let $V_COMPANY = &PK.COMPANY   ! GEX ISDVNPK 01/15/2008
              let $V_DEPTID = &SPK.DEPTID
              let $V_INVOICE_DT = &PT.PAY_END_DT
              let #V_GROSS_AMT = &PT.TAX_CUR
              let $V_ENTERED_DT = $AsOfDate
              if &PT.TAX_CLASS = 'H'
                 let $V_ACCOUNT = &AP.GL_LWT
              else
                 let $V_ACCOUNT = '222070'
              end-if
              evaluate &AP.GEX_AP_FREQ
                  when = 'W'
                     do convert-to-dtu-date(&pt.pay_end_Dt,$friday_dtu)
                     do dtu-add-days($friday_Dtu,6,$friday_dtu_dt)
		     do convert-from-dtu-date($friday_dtu_dt,$v_due_dt)
                 when = 'S'
                     do convert-to-dtu-date(&pc.check_dt,$friday_dtu)
                     let #date_string = substr($friday_dtu,9,2)
 		     if #date_string <= 15
 		        let $friday_dtu_dt = substr($friday_dtu,1,8)||'15'
                     else
	                do dtu-add-months($friday_dtu,1,$friday_dtu)                     
 			let $friday_dtu_dt = substr($friday_dtu,1,8)||'01'
                     end-if
		     do convert-from-dtu-date($friday_dtu_dt,$v_due_dt)

 		  when = 'M'
                     do convert-to-dtu-date(&Pc.CHECK_DT,$check_Dt)
                     do dtu-add-months($check_Dt,1,$due_dt)                     
                     let $due_month_begin = substr($due_dt,1,8)||'07'
                     do convert-from-dtu-date($due_month_begin,$v_due_dt)
                     
                  when = 'Q'
                     do convert-to-dtu-date(&Pc.CHECK_DT,$check_Dt)
                     let #month_dtu = substr($check_dt,6,2)
		     evaluate #month_dtu
			when <= 3
        			let $due_month_begin = substr($check_dt,1,5)||'04-07'		
				break
			when <= 6
   				let $due_month_begin = substr($check_dt,1,5)||'07-07'
				break
			when <= 9
				let $due_month_begin = substr($check_dt,1,5)||'10-07'		
				break
			when-other
				do dtu-add-months($check_dt,4,$due_dt)
				let $due_month_begin = substr($due_dt,1,5)||'01-07'
		     end-evaluate							
	
                     do convert-from-dtu-date($due_month_begin,$v_due_dt)

             end-evaluate
             do create-AP-voucher
             if $bu_found = 'N' and #V_GROSS_AMT <> 0
		      use-report report-log
		      add 1 to #error_count
		      print 'AP Voucher Creation failed:' (+1,1)
		      print '$V_AP_VENDOR_ID ' (+1,5)
		      print $V_AP_VENDOR_ID    ()
		      print '$V_DEPTID '       (+1,5)
		      print $V_DEPTID          ()
		      print '$V_ACCOUNT '      (+1,5)
		      print $V_ACCOUNT         ()
		      print '#V_GROSS_AMT '    (+1,5) 
		      print #V_GROSS_AMT       ()
		      print '$V_ENTERED_DT '   (+1,5)
		      print $V_ENTERED_DT      ()
		      print '$V_INVOICE_DT '   (+1,5)
		      print $V_INVOICE_DT      ()
		      print '$V_DUE_DT '       (+1,5)
		      print $V_DUE_DT          ()
		      
	     end-if
          else
             use-report report-log
	     add 1 to #error_count
             print  'AP Information is not found' (+1,1)
             print  'Company ' (+1,5)
             print $previous_company ()
             print  'State ' (+1,5)
             print $previous_state ()
             print 'Locality ' (+1,5)
             print $previous_locality ()
             print 'vouchers are not created for this group; please create them manually' (+1,1)
		
          end-if
         end-if
      end-if
   else  !State Vouchers
     if (&PT.TAX_CLASS = 'H') or (&PT.TAX_CLASS = 'U') or (&PT.TAX_CLASS = 'V')     !Withholding, unemployment ee, unemployment er
         if $previous_state <> '$U'
           if ($previous_state <> 'OH') or 
            (($previous_state = 'OH') and (substr(&SPK.DEPTID,1,1) <> 'C'))

           do get-AP-vendor-info-state
           if rtrim(&aps.gex_ap_freq,' ') <> '' and &aps.eff_status = 'A'
           if $ap_info_found = 'Y'
		if rtrim(&APs.AP_VENDOR_ID_10,' ') = ''
			use-report report-log
			add 1 to #error_count
		   print 'AP Vendor Id is blank for Deptid :' (+1,1)
		   print $prev_deptid ()
		   print '; No Voucher is created, please create it manually' ()
			
                  goto exit-voucher
		end-if

              let $V_AP_VENDOR_ID = &APs.AP_VENDOR_ID_10||substr(to_char(&APs.ADDRESS_SEQ_NUM),1,3)
              let $V_COMPANY = &PK.COMPANY   ! GEX ISDVNPK 01/15/2008
              let $V_DEPTID = &SPK.DEPTID
              let $V_INVOICE_DT = &PT.PAY_END_DT
              let #V_GROSS_AMT = &PT.TAX_CUR
              let $V_ENTERED_DT = $AsOfDate
	      evaluate &PT.TAX_CLASS 
		WHEN = 'H'
                  let $V_ACCOUNT = &APs1.GL_SWT
                WHEN = 'V'
		   let $V_ACCOUNT = &aps1.gl_sut
		when = 'U'
		   let $V_ACCOUNT = &aps1.gl_sut_er
              end-evaluate
              evaluate &APs.GEX_AP_FREQ
                  when = 'W'
                     do convert-to-dtu-date(&pt.pay_end_Dt,$friday_dtu)
                     do dtu-add-days($friday_Dtu,6,$friday_dtu_dt)
		     do convert-from-dtu-date($friday_dtu_dt,$v_due_dt)
                 when = 'S'
                     do convert-to-dtu-date(&pc.check_dt,$friday_dtu)
                     let #date_string = substr($friday_dtu,9,2)
 		     if #date_string <= 15
 		        let $friday_dtu_dt = substr($friday_dtu,1,8)||'15'
                     else
	                do dtu-add-months($friday_dtu,1,$friday_dtu)                     
 			let $friday_dtu_dt = substr($friday_dtu,1,8)||'01'
                     end-if
		     do convert-from-dtu-date($friday_dtu_dt,$v_due_dt)

 		  when = 'M'
                     do convert-to-dtu-date(&Pc.CHECK_DT,$check_Dt)
                     do dtu-add-months($check_Dt,1,$due_dt)                     
                     let $due_month_begin = substr($due_dt,1,8)||'07'
                     do convert-from-dtu-date($due_month_begin,$v_due_dt)
                     
                  when = 'Q'
                     do convert-to-dtu-date(&Pc.CHECK_DT,$check_Dt)
                     let #month_dtu = substr($check_dt,6,2)
		     evaluate #month_dtu
			when <= 3
        			let $due_month_begin = substr($check_dt,1,5)||'04-07'
				break
			when <= 6
   				let $due_month_begin = substr($check_dt,1,5)||'07-07'
				break
			when <= 9
				let $due_month_begin = substr($check_dt,1,5)||'10-07'		
				break
			when-other
				do dtu-add-months($check_dt,4,$due_dt)
				let $due_month_begin = substr($due_dt,1,5)||'01-07'
		     end-evaluate							
	
                     do convert-from-dtu-date($due_month_begin,$v_due_dt)

             end-evaluate
             do create-AP-voucher
                          
             if $bu_found = 'N' and #V_GROSS_AMT <> 0
	      use-report report-log
	      add 1 to #error_Count
	      print 'AP Voucher Creation failed:' (+1,1)
	      print '$V_AP_VENDOR_ID ' (+1,5)
	      print $V_AP_VENDOR_ID    ()
	      print '$V_DEPTID '       (+1,5)
	      print $V_DEPTID          ()
	      print '$V_ACCOUNT '      (+1,5)
	      print $V_ACCOUNT         ()
	      print '#V_GROSS_AMT '    (+1,5) 
	      print #V_GROSS_AMT       ()
	      print '$V_ENTERED_DT '   (+1,5)
	      print $V_ENTERED_DT      ()
	      print '$V_INVOICE_DT '   (+1,5)
	      print $V_INVOICE_DT      ()
	      print '$V_DUE_DT '       (+1,5)
	      print $V_DUE_DT          ()
	      	  
	   end-if

         end-if
        end-if
       end-if
      end-if
      end-if
  end-if
exit-voucher:

   let $V_AP_VENDOR_ID = ' '
   let $V_COMPANY = ' '   ! GEX ISDVNPK 01/15/2008
   let $V_DEPTID = ' '
   let $V_INVOICE_DT = ' '
   let #GROSS_AMT = 0
   let $V_ENTERED_DT = ' '
   let $V_ACCOUNT = ' '
   let $V_DUE_DT = ' '

end-procedure
!***************************************************************************


!***************************************************************************
begin-procedure get-ap-vendor-info
let $aP_info_found = 'N'
let $ap_frequency = ' '
begin-select
AP.AP_VENDOR_ID_10	!GEX-PY113974 Kundan kumar Yeedibilli !GEX-PY-SC00074444 Kundan kumar Yeedibilli
AP.ADDRESS_SEQ_NUM	!GEX-PY113974 Kundan kumar Yeedibilli !GEX-PY-SC00074444 Kundan kumar Yeedibilli
AP.GEX_AP_FREQ
AP.GL_LWT
  let $ap_info_found = 'Y'
  move &ap.gex_ap_freq to $ap_frequency
FROM PS_CO_LOCALTAX_TBL AP
WHERE AP.COMPANY  = $Previous_Company
  AND AP.STATE    = $Previous_State
  AND AP.LOCALITY = $Previous_Locality
  AND AP.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_CO_LOCALTAX_TBL
       WHERE  COMPANY  = $previous_Company
         AND  STATE    = $previous_State
         AND  LOCALITY = $previous_Locality
         AND  EFFDT   <= $AsOfDate)
end-SELECT 
end-procedure
!***************************************************************************


!***************************************************************************
begin-procedure get-ap-vendor-info-state
let $aP_info_found = 'N'
let $ap_frequency = ' '
begin-select
APs.AP_VENDOR_ID_10
APs.ADDRESS_SEQ_NUM
APs.GEX_AP_FREQ
APs.TAX_CLASS
APs.eff_status
APs1.GL_SWT
APS1.GL_SUT
APS1.GL_SUT_ER

 if &APs.eff_status = 'A'
   let $ap_info_found = 'Y'
   move &aps.gex_ap_freq to $ap_frequency
 end-if

FROM PS_GEX_STATETAX_AP APs, PS_CO_STATETAX_TBL APS1
WHERE APS.COMPANY  = $Previous_Company
  AND APS.STATE    = $Previous_State
  AND APs.tax_class = &pt.tax_class
  AND APS.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_GEX_STATETAX_AP
       WHERE  COMPANY  = $previous_Company
         AND  STATE    = $previous_State
      	 and  tax_class = &pt.tax_class
         AND  EFFDT   <= $AsOfDate)
  AND APS.COMPANY  = APS1.COMPANY
  AND APS.STATE = aPS1.STATE
  AND APS1.EFFDT = (SELECT MAX(EFFDT)
			FROM PS_CO_STATETAX_TBL
			WHERE COMPANY = APS1.COMPANY
			AND STATE = APS1.STATE
			AND EFFDT <= $AsOfDate)
end-SELECT 
end-procedure
!***************************************************************************


!*********************************************************************
!Displays the error messages and stops execution
!*********************************************************************
 
begin-procedure SQL-Error-Found($Proc_Name) 

  display 'SQL Error in ' 
  display $Proc_Name 
  display $_sql-error
  display 'sql-status:' 
  display #_sql-status 

  STOP

end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'stdinit.sqc'   !Standard-Initialization procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'
#Include 'number.sqc'    !Routines to format numbers
#include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id

#Include 'stdapi.sqc'    !Update Process API
#Include 'payrctl2.sqc'  !Process Scheduler Run Controls
#include 'gexpyvhu.sqc'  !Creates AP Voucher information
#include 'sqrtrans.sqc'
#Include 'askaod.sqc'    !Ask-As-Of-Date procedure
#include 'gexxx922.sqc'  !Get pay single row run control