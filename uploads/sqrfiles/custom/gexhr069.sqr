!***********************************************************************
!  GEXHR069:  EMPLOYEE Gold membership                                 *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
! GEXHR069:             Employee Home Address Listing (with birthdays) *
!                                                                      *
! Narrative:            This program will generate a listing of        *
!                       employees' home addresses based on run-time    *
!                       select criteria.                               *
!                                                                      *
! #Debugx Used:         #debug9 paragraph trace                        *
!                       #debug8 key variable values                    *
!                       #debug7 data returned from sql calls           * 
!                                                                      *  
! SQL Tables:           PS_PERSONAL_DATA                               *
!                       PS_POSITION_DATA                               *
!                       PS_GEX_APRAIS_SCOR                             *
!                       job                                            *
!                       PS_PRIORWORK_EXPER                             *
!                                                                      *
! Written by:           Dilip Kallepalli                               *       
!                                                                      *
! Normally Run:	        Monthly                                        *
!                                                                      *
! Control Parms:        FOR WHERE CLAUSE:                              *
!                         Company  	                                   *
!                         Grade     	                               *
!                         Employee Status	                           *
!                         Jobcode                                      *
!                         Employee Id                                  *
!                         As Of Date                                   *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  INITIALS     DATE         DESCRIPTION OF THE CHANGE                 *
!***********************************************************************
!  ISDVDZK          11/05/2009     Initial Creation                    *
!VENDKXY 	    04/13/2010     Done the changes for prod issue.    *
!VENDKXY 	    05/26/2010     Done changes for ITG 76453
!***********************************************************************


#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization
!#include 'pysspxml.sqc'  !Self Service Paycheck (SSP) XML Data process
#include 'pyxmltag.sqc'  !Self Service Paycheck (SSP) XML Data process
begin-report
#debug9 Show 'begin-report'

  do Init-DateTime           !datetime.sqc
  do Init-Number             !number.sqc
  do Get-Current-DateTime    !curdttim.sqc
  do Init-Report
  do Init-SSP-XML-Variables
  do Open-XML-Data-For-Print
  do  start-xmlp1
  do P100-Process-Main-2
  do Reset                   !reset.sqc
  do Stdapi-Term             !stdapi.sqc
  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded
  Show 'Successful end of report'
end-report

begin-procedure Init-SSP-XML-Variables


   do Init-XML-Tags-Variables

   let $xmlssp_burst    = ''
   let $xmlssp_filenm   = ''
   let $xmlssp_filenm2  = ''
   let $xml_SSP_view_dt = ''
   let $SSP_sav_compny  = ''
   let $SSP_sav_paygrp  = ''

end-procedure

begin-heading 7
#debug9 Show 'begin-heading'

  #Include 'stdhdg02.sqc'

  Let $X000_temp_out = 'Report as of ' || $X000_REPORT_HEADING_ASOFDATE
  Print $X000_temp_out         (3,)  center

  let $ReportTitle2 = 'Paygroup    '||$Paygroup
  PRINT $ReportTitle2          (4,1)

  PRINT $DeptName              (4,)  center

  PRINT 'EMPLOYEE NAME'        (+2,1)
  PRINT 'ADDRESS'              (,34)
  PRINT 'CITY'                 (,83)
  PRINT 'STATE'                (,116)
  PRINT 'ZIP'                  (,124)
  PRINT 'BIRTHDATE'            (,137)
  PRINT 'HIRE DATE'            (,150)
  PRINT 'HOME PHONE'           (,163)

  PRINT '-'        (+1,1,30)  Fill
  PRINT '-'        (,34,46)   Fill
  PRINT '-'        (,83,30)   Fill
  PRINT '-'        (,116,5)   Fill
  PRINT '-'        (,124,10)  Fill
  PRINT '-'        (,137,10)  Fill
  PRINT '-'        (,150,10)  Fill
  PRINT '-'        (,163,12)  Fill

end-heading


begin-procedure Init-Report
#debug9 Show 'Init-Report'

  move 'GEXHR069' to $ReportID
  move 'EMPLOYEE HOME ADDRESS LISTING (WITH BIRTHDAYS)' to $ReportTitle

  do Stdapi-Init

  Show '$ReportID=' $ReportID
  Show '$ReportTitle=' $ReportTitle
  Show '$ReportDate=' $ReportDate
  Show '$ReportTime=' $ReportTime

  Let $GEXXX900_Company_Alias        = 'J.COMPANY'
  Let $GEXXX901_Company_Alias        = 'J.COMPANY'
  Let $GEXXX901_Paygroup_Alias       = 'J.PAYGROUP'
  Let $GEXXX902_Deptid_Alias         = 'J.DEPTID'
  Let $GEXXX903_Emp_Stat_Alias       = 'J.EMPL_STATUS'
  Let $GEXXX904_Grade_Alias          = 'J.GRADE'    
  Let $GEXXX904_Sal_Admin_Plan_Alias = 'J.SAL_ADMIN_PLAN'
  Let $GEXXX907_Div_CD_Alias         = 'GDT.GEX_COMPANY_DIV_CD'
  Let $GEXXX909_Acct_CD_Alias        = 'J.ACCT_CD'
  Let $GEXXX916_Jobcode_Alias        = 'j.jobcode'
  Let $GEXXX910_Emplid_Alias = 'J.Emplid'   
  Let $Gsind_Alias = 'A.GEX_GS_IND'  !vendkxy done changes for ITG 76453 on 05/20/2010
  Do Select-Gsindicator-Parameters !vendkxy done changes for ITG 76453 on 05/19/2010
  Do GEXXX910-Select-Emplid-Parameters
    Do GEXXX916-Select-Jobcode-Parameters
    Do GEXXX900-Select-Company-Parameters

    Do GEXXX903-Select-Emp-Stat-Parameters
    Do GEXXX904-Select-Grade-Parameters   

    
    
    Let $X000_WHERE_SELECT_ASOFDATE = $GEX_RC_PAY.AsOfDate
    If Rtrim ($GEX_RC_PAY.AsOfDate, ' ') = ''
      Let $X000_WHERE_SELECT_ASOFDATE = $AsOfToday
    End-If
    
    if  ($GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA= 'ALL')
     Let $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA= 'j.company = j.company'
    End-if
    If  ($GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA= 'ALL')
    Let $GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA= 'j.empl_status = j.empl_status'
    End-if
    
    !vendkxy  -- Begin
    
    !if ($GEXXX904_INCLUDE_GRADE_CRITERIA ='J.GRADE = J.GRADE')
    !let $GEXXX916_Include_Jobcode_Criteria=$GEXXX916_Include_Jobcode_Criteria
    !else 
    !let $GEXXX916_Include_Jobcode_Criteria=$GEXXX916_Include_Jobcode_Criteria || 'or' ||$GEXXX904_INCLUDE_GRADE_CRITERIA  
    !end-if
        
    if  (($GEXXX904_INCLUDE_GRADE_CRITERIA <> 'J.GRADE = J.GRADE') and ($GEXXX916_Include_Jobcode_Criteria <> 'j.jobcode = j.jobcode'))
    let $GEXXX916_Include_Jobcode_Criteria=$GEXXX916_Include_Jobcode_Criteria || ' or' ||$GEXXX904_INCLUDE_GRADE_CRITERIA
    Let $GEXXX904_INCLUDE_GRADE_CRITERIA = '1 = 1'
    end-if 
    
    !vendkxy-- End
    
  date-time () HH:MI:SS &timeBegan
  date-time () MM/DD/YYYY &dateBegan
  show 'Report Began at ' &timeBegan ' on ' &dateBegan
   
  show 'Asofdate ='$X000_WHERE_SELECT_ASOFDATE
  Show '$GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA          ='   $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA
  Show '$GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA         ='   $GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA
  Show '$GEXXX904_INCLUDE_GRADE_CRITERIA                    ='   $GEXXX904_INCLUDE_GRADE_CRITERIA		  
  show '$GEXXX910_INCLUDE_Emplid_CRITERIA           ='$GEXXX910_INCLUDE_Emplid_CRITERIA
  
  
  show '$GEXXX916_Include_Jobcode_Criteria  = '$GEXXX916_Include_Jobcode_Criteria
  show '$INCLUDE_GSIND_DISPLAY_CRITERIA  = '$INCLUDE_GSIND_DISPLAY_CRITERIA !vendkxy done changes for ITG 76453 on 05/19/2010
  show '$INCLUDE_SCORE_TYPE_CRITERIA = ' $INCLUDE_SCORE_TYPE_CRITERIA !vendkxy done changes for ITG 76453 on 05/19/2010
end-procedure



begin-procedure P050-Print-Cover-Page
#debug9 Show 'P050-Print-Cover-Page'

End-Procedure


begin-procedure P100-Process-Main
#debug9 Show 'P100-Process-Main'

  Let $Data-Found-Flag = 'N'
  Let $CURR_JOBCODE=''
  Let $CURR_GRADE=''
  Let $PREV_JOBCODE=''
  Let $PREV_GRADE=''
  let $CURR_EMPLID=''
  let $PREV_EMPLID=''
  let $PREV_EFFDT =''
  let $Prev_Position_nbr=''
  !do start-xmlp
  do Get-mineffdt
  
begin-SELECT
JOB.EMPLID
JOB.EFFDT
JOB.EFFSEQ
JOB.GRADE
JOB.jobcode 
JOB.Position_nbr

  Let $CURR_JOBCODE=&JOB.jobcode
  Let $CURR_GRADE=&JOB.GRADE
  let $CURR_EMPLID=&JOB.EMPLID
  let $EMPLID=&JOB.EMPLID
  
  

  
   IF ($CURR_JOBCODE <> $PREV_JOBCODE and $PREV_JOBCODE<> '')  or ($CURR_GRADE <> $PREV_GRADE and $PREV_GRADE <> '')
   let $Position_nbr=$Prev_Position_nbr 
   
   do get-PositionNbr 
   do Career-progression
   
   End-IF
 
    
   IF (&JOB.EFFDT=$MIN_EFFDT) and (&JOB.EFFSEQ = #MIN_EFFSEQ)
       Let $PREV_JOBCODE=&JOB.jobcode
       Let $PREV_GRADE=&JOB.GRADE
       let $PREV_EMPLID=&JOB.EMPLID
       let $PREV_EFFDT=&JOB.EFFDT
       let $Position_nbr=&JOB.Position_nbr
           
    
   do get-PositionNbr 
   do Career-progression
   
   END-IF
  
  
  Let $PREV_JOBCODE=&JOB.jobcode
  Let $PREV_GRADE=&JOB.GRADE
  let $PREV_EMPLID=&JOB.EMPLID
  let $PREV_EFFDT=&JOB.EFFDT
  let $Prev_Position_nbr=&JOB.Position_nbr
  




FROM   PS_JOB            JOB
where  JOB.EMPLID=&j.EMPLID

ORDER BY JOB.EMPLID,JOB.EFFDT desc
end-SELECT
end-procedure




begin-procedure Get-mineffdt
#debug9 Show 'Get-mineffdt'

  Let $MIN_EFFDT = ''
  Let #MIN_EFFSEQ = 0
  
begin-SELECT
MIN(JMIN.EFFDT)  &MIN_EFFDT
MIN(JMIN.EFFSEQ)  &MIN_EFFSEQ

  let $MIN_EFFDT=&MIN_EFFDT
  let #MIN_EFFSEQ=&MIN_EFFSEQ
 
FROM   PS_JOB            JMIN
where  JMIN.EMPLID=&j.EMPLID
end-SELECT
end-procedure



begin-procedure P100-Process-Main-2
let $POS-DESCR=''
begin-SELECT
j.EMPLID
j.EFFDT
j.GRADE
j.jobcode 
j.Position_nbr 

     let $Position_nbr =&j.Position_nbr 
    
     Let $EMPLID=&j.EMPLID
     do start-xmlp
     
     do get-EmployeeName
     do get-PositionNbr
     let $xmltag = 'EMPLOYEE_ID'
     
     let $xmlcontent =$EMP_NAME
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
      !show $POS-DESCR
       let $xmltag = 'DESIGNATION'
       let $xmlcontent =$POS-DESCR
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
     
     do P100-Process-Main
     
     do Career-Performance
     do PCI
     do Education
     do EMPLOYER
     
     let $xmltag = 'G_EMP_DATA'
     let $xmloutput_line = $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
     write #outputfile2 from $xmloutput_line

     
 
FROM          PS_JOB            j,ps_GEX_APRAIS_SCOR A !vendkxy done changes for ITG 76453 on 05/26/2010
WHERE    j.EFFDT             =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID       = j.EMPLID
       AND    EMPL_RCD    = j.EMPL_RCD
       AND    EFFDT       <= $X000_WHERE_SELECT_ASOFDATE)
AND    j.EFFSEQ            =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB
       WHERE  EMPLID       = j.EMPLID
       AND    EMPL_RCD    = J.EMPL_RCD
       AND    EFFDT        = j.EFFDT)
!vendkxy done changes for ITG 76453 on 05/26/2010-- Begin       
AND       A.effdt = ( SELECT MAX(EFFDT)
       FROM   PS_GEX_APRAIS_SCOR
       WHERE  EMPLID       = A.EMPLID      
       AND    EFFDT       <= $X000_WHERE_SELECT_ASOFDATE)
and j.emplid = a.emplid       
and [$INCLUDE_GSIND_CRITERIA]
AND [$INCLUDE_SCORE_TYPE_CRITERIA]       
!vendkxy done changes for ITG 76453 on 05/26/2010--End      
and [$GEXXX910_INCLUDE_Emplid_CRITERIA]
AND [$GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA]
AND [$GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA]
AND ([$GEXXX916_Include_Jobcode_Criteria])
and [$GEXXX904_INCLUDE_GRADE_CRITERIA] !vendkxy 

ORDER BY j.COMPANY, j.PAYGROUP, j.DEPTID
end-SELECT

          
      
     let $xmltag = 'US_CHECK'
     let $xmloutput_line = $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
     write #outputfile2 from $xmloutput_line
     
end-procedure





begin-procedure get-PositionNbr
 !show 'PositionNbr'
begin-select 
POS.DESCR
POS.DESCRSHORT
   Move &POS.DESCR to $POS-DESCR
   !show '$POS-DESCR' $POS-DESCR
   let $string      = $POS-DESCR
   let  $replace_str = 'and'
   let  $find_str    = '&'

    do replace-char-in-string($find_str, $replace_str, $string)
    let $POS-DESCR=$string
    
    Find '<' in $POS-DESCR  0  #Loc
    IF #Loc <> -1
     let $POS-DESCR=&POS.DESCRSHORT
     !let $POS-DESCR=''''||$POS-DESCR||''''
     
    END-IF
    Find '>' in $POS-DESCR  0  #Loc
    IF #Loc <> -1
     let $POS-DESCR=&POS.DESCRSHORT
      !let $POS-DESCR=''''||$POS-DESCR||''''
    END-IF
    

from PS_POSITION_DATA POS where POS.POSITION_NBR=$Position_nbr
  and EFFDT=(select max(POS1.EFFDT)from PS_POSITION_DATA POS1 where POS1.POSITION_NBR=POS.POSITION_NBR )
End-select 
end-procedure



begin-procedure get-EmployeeName
begin-select 
EMP.NAME
   Move &EMP.NAME to $EMP_NAME

   
from PS_NAMES EMP where EMP.EMPLID=$EMPLID
!vendkxy --Begin
and emp.eff_status ='A' 
and    emp.EFFDT             =
      (SELECT MAX(EFFDT)
       FROM   PS_NAMES
       WHERE  EMPLID       = emp.EMPLID
       and eff_status ='A' 
       AND    EFFDT       <= $X000_WHERE_SELECT_ASOFDATE) 
!vendkxy -- End       
End-select 
end-procedure


begin-procedure start-xmlp


     !let $xmltag = 'G_EMP_DATA'
     
     ! let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end
     ! write #outputfile2 from $xmloutput_line
     
      
   
   let $xmltag = 'G_EMP_DATA'
     
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
     
     
    let $xmltag = 'BATCH_ID'
     
     let $xmlcontent ='Batch0001'
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
      
       let $xmltag = 'BURST_VAL'
       let $xmlcontent =$EMPLID
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
      
      
end-procedure
      



begin-procedure start-xmlp1
if $FirstRecord = 'Y'

     let $FirstRecord = 'N'
     let $PY_PSLP_PROCNAME = 'PrtCheck'

         do Write-1st-SSP-XML-Data
       
  end-if
  
  let $xmlssp_burst   = rtrim(&J.EMPLID,' ') 
  let $burstfilename  ='gexhr069' || '.xml'
    ! show '$burstfilename' $burstfilename
     let $xmlssp_filenm2 = '{IMPORTPREFIX}' || $burstfilename || '{IMPORTSUFFIX}'
    ! show '$xmlssp_filenm2' $xmlssp_filenm2
     open $xmlssp_filenm2 as 20 for-writing record=150:vary
write #outputfile2 from '<?xml version="1.0" encoding="Windows-1252"?>'
   
    let $xmltag = 'US_CHECK'
     let $xmloutput_line = ''
     let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end
   ! show '$xmloutput_line' $xmloutput_line
     write #outputfile2  from $xmloutput_line
end-procedure

begin-procedure Career-progression
    let $xmltag = 'CAREER_PRG'
    let $xmloutput_line = ''
    let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end
    !show '$xmloutput_line' $xmloutput_line
    write #outputfile2  from $xmloutput_line
    

    
      let $xmltag = 'EFFDT'
     ! let $xmlcontent = rtrim($string_out,' ')
     !let $xmlcontent =&job.effdt
      let $xmlcontent = $PREV_EFFDT
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
     let $xmltag = 'Position-Descr'
     ! let $xmlcontent = rtrim($string_out,' ')
     let $xmlcontent =$POS-DESCR
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
    
     let $xmltag = 'GRADE'
     ! let $xmlcontent = rtrim($string_out,' ')
     ! let $xmlcontent =&job.GRADE
     let $xmlcontent = $PREV_GRADE
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
      
    let $xmltag = 'CAREER_PRG'
   let $xmloutput_line = $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
    write #outputfile2 from $xmloutput_line
    
           
end-procedure

begin-procedure Career-Performance
begin-select 
C.EFFDT
C.PFA_OPERATING_SCOR
C.PFA_LEADERSHP_SCOR

   Move &C.EFFDT to $CP.EFFDT
   Move &C.PFA_OPERATING_SCOR to $CP.PFA_OPERATING_SCOR
   Move &C.PFA_LEADERSHP_SCOR to $CP.PFA_LEADERSHP_SCOR
   Do Career-Performance-XML
  
from PS_GEX_APRAIS_SCOR C 
  where C.EMPLID=$EMPLID
  and C.SCORE_TYPE = 'PFA' 
End-select 
end-procedure

begin-procedure Career-Performance-XML

    let $xmltag = 'Career-Performance'
    let $xmloutput_line = ''
    let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end
    !show '$xmloutput_line' $xmloutput_line
    write #outputfile2  from $xmloutput_line
    
      let $xmltag = 'EFFDT'
     ! let $xmlcontent = rtrim($string_out,' ')
     let $xmlcontent =$CP.EFFDT
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
     let $xmltag = 'OPERATING_SCOR'
     ! let $xmlcontent = rtrim($string_out,' ')
     let $xmlcontent =$CP.PFA_OPERATING_SCOR
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
    
     let $xmltag = 'LEADERSHP_SCOR'
     ! let $xmlcontent = rtrim($string_out,' ')
     let $xmlcontent =$CP.PFA_LEADERSHP_SCOR
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
      
    let $xmltag = 'Career-Performance'
    let $xmloutput_line = $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
    write #outputfile2 from $xmloutput_line
    
           
end-procedure


begin-procedure PCI
begin-select 
D.EFFDT
D.PCI_INTELLECT_SCOR
D.PFA_LEADERSHP_SCOR
D.PCI_INTERPERS_SCOR
D.PCI_PERSEFF_SCOR


   Move &D.EFFDT to $PCI.EFFDT
   Move &D.PCI_INTELLECT_SCOR to $PCI.PCI_INTELLECT_SCOR
   Move &D.PFA_LEADERSHP_SCOR to $PCI.PCI_LEADERSHP_SCOR
   Move &D.PCI_INTERPERS_SCOR to $PCI.PCI_INTERPERS_SCOR
   Move &D.PCI_PERSEFF_SCOR to $PCI.PCI_PERSEFF_SCOR
   Do PCI-XML
  
from PS_GEX_APRAIS_SCOR D 
  where D.EMPLID=$EMPLID
    and D.SCORE_TYPE = 'PCI' 
End-select 
end-procedure

begin-procedure PCI-XML

    let $xmltag = 'PCI'
    let $xmloutput_line = ''
    let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end
    !show '$xmloutput_line' $xmloutput_line
    write #outputfile2  from $xmloutput_line
    
      let $xmltag = 'EFFDT'
     ! let $xmlcontent = rtrim($string_out,' ')
     let $xmlcontent = $PCI.EFFDT
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
     let $xmltag = 'PCI_INTELLECT_SCOR'
     ! let $xmlcontent = rtrim($string_out,' ')
     let $xmlcontent =$PCI.PCI_INTELLECT_SCOR
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
    
     let $xmltag = 'LEADERSHP_SCOR'
     ! let $xmlcontent = rtrim($string_out,' ')
     let $xmlcontent =$PCI.PCI_LEADERSHP_SCOR
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
      let $xmltag = 'PCI_INTERPERS_SCOR'
     ! let $xmlcontent = rtrim($string_out,' ')
     let $xmlcontent =$PCI.PCI_INTERPERS_SCOR
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
      let $xmltag = 'PCI_PERSEFF_SCOR'
     ! let $xmlcontent = rtrim($string_out,' ')
     let $xmlcontent =$PCI.PCI_PERSEFF_SCOR
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
      
    let $xmltag = 'PCI'
    let $xmloutput_line = $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
    write #outputfile2 from $xmloutput_line
    
           
end-procedure


begin-procedure Education 
begin-select 
E.HIGHEST_EDUC_LVL 
 move &E.HIGHEST_EDUC_LVL to $Educ_Level
  do get-EducDesc
from PS_PERSONAL_DATA E
  where E.EMPLID=$EMPLID
End-select 

begin-select 
H.DATE_ACQUIRED
H.SCHOOL 
 move &H.DATE_ACQUIRED to $DATE_ACQUIRED
 move &H.SCHOOL  to $SCHOOL

  let 	$string      = $SCHOOL
   let  $replace_str = 'and'
   let  $find_str    = '&'

    do replace-char-in-string($find_str, $replace_str, $string)
    let $SCHOOL=$string
    
    do get-AreaofStudy
    Do Education-XML
from PS_SCHOOL_EDUCAT H
  where H.EMPLID=$EMPLID
End-select 

end-procedure


begin-procedure get-AreaofStudy 
begin-select 
G.AREA_OF_STUDY 
 move &G.AREA_OF_STUDY to $AREA_OF_STUDY
 let 	$string      = $AREA_OF_STUDY
   let  $replace_str = 'and'
   let  $find_str    = '&'

    do replace-char-in-string($find_str, $replace_str, $string)
    let $AREA_OF_STUDY=$string
    
from PS_EDUC_AREA_STUDY G  where G.EMPLID= $EMPLID and G.DATE_ACQUIRED=$DATE_ACQUIRED
End-select 
end-procedure

begin-procedure get-EducDesc 
begin-select 
F.XLATLONGNAME 
 move &F.XLATLONGNAME to $EducLongName
 
    let 	$string      = $EducLongName
   let  $replace_str = 'and'
   let  $find_str    = '&'

    do replace-char-in-string($find_str, $replace_str, $string)
    let $EducLongName=$string
    
from PSXLATITEM F where F.FIELDNAME = 'HIGHEST_EDUC_LVL' and F.FIELDVALUE = $Educ_Level
End-select 
end-procedure


Begin-Procedure GEXXX904-Select-Grade-Parameters

  Let $OprID             = '''' || $Prcs_OprID       || ''''
  Let $Run_Cntl_ID       = '''' || $Prcs_Run_Cntl_ID || ''''
  Let #GEX_RC_GRADE_ROWS = 0
  Let $Include_Condition = ''
  Let $GEXXX904_INCLUDE_GRADE_CRITERIA = ''
  Let $GEXXX904_INCLUDE_GRADE_DISPLAY_CRITERIA = 'J.GRADE=J.GRADE'
Begin-Select
GEX_RC_GRADE.GRADE

  Add 1 To #GEX_RC_GRADE_ROWS
  Let $Include_Condition = '(' || $GEXXX904_Grade_Alias          || ' = '''  || &GEX_RC_GRADE.GRADE          || ''')'

  If #GEX_RC_GRADE_ROWS = 1
    Let $GEXXX904_INCLUDE_GRADE_CRITERIA = '(' || $Include_Condition
  
  Else
    Let $GEXXX904_INCLUDE_GRADE_CRITERIA =
        $GEXXX904_INCLUDE_GRADE_CRITERIA || ' Or '  || $Include_Condition
    
  End-If

From  PS_GEX_RC_GRADE_G GEX_RC_GRADE

Where GEX_RC_GRADE.OPRID                       = [$OprID]
And   GEX_RC_GRADE.RUN_CNTL_ID                 = [$Run_Cntl_ID]
And   Rtrim(GEX_RC_GRADE.GRADE, ' ')          != ' '


End-Select

  If #GEX_RC_GRADE_ROWS = 0
    Let $GEXXX904_INCLUDE_GRADE_CRITERIA = $GEXXX904_Grade_Alias || ' = ' || $GEXXX904_Grade_Alias 
   Else
    Let $GEXXX904_INCLUDE_GRADE_CRITERIA = $GEXXX904_INCLUDE_GRADE_CRITERIA || ')'
    Let $GEXXX904_INCLUDE_GRADE_DISPLAY_CRITERIA = $GEXXX904_INCLUDE_GRADE_CRITERIA
  End-If
End-Procedure

!!vendkxy done changes for ITG 76453 on 05/21/2010--Begin
!****************************************************

Begin-Procedure Select-Gsindicator-Parameters

  Let $OprID             = '''' || $Prcs_OprID       || ''''
  Let $Run_Cntl_ID       = '''' || $Prcs_Run_Cntl_ID || ''''
  Let #GEX_RC_GSIND_ROWS = 0
  Let $Include_Condition = ''
  Let $INCLUDE_GSIND_CRITERIA = ''
  Let $INCLUDE_GSIND_DISPLAY_CRITERIA = 'A.GEX_GS_IND=A.GEX_GS_IND'
Begin-Select
GEX_RC_GSIND.GEX_GS_IND

  Add 1 To #GEX_RC_GSIND_ROWS
  Let $Include_Condition = '(' || $Gsind_Alias          || ' = '''  || &GEX_RC_GSIND.GEX_GS_IND         || ''')'

  If #GEX_RC_GSIND_ROWS = 1
    Let $INCLUDE_GSIND_CRITERIA = '(' || $Include_Condition
  
  Else
    Let $INCLUDE_GSIND_CRITERIA =
        $INCLUDE_GSIND_CRITERIA || ' Or '  || $Include_Condition
    
  End-If

From  PS_GEX_RC_GSIND GEX_RC_GSIND

Where GEX_RC_GSIND.OPRID                       = [$OprID]
And   GEX_RC_GSIND.RUN_CNTL_ID                 = [$Run_Cntl_ID]
And   Rtrim(GEX_RC_GSIND.GEX_GS_IND, ' ')          != ' '


End-Select

  If #GEX_RC_GSIND_ROWS = 0
    Let $INCLUDE_GSIND_CRITERIA = $Gsind_Alias  || ' = ' || $Gsind_Alias  
    Let $INCLUDE_SCORE_TYPE_CRITERIA = 'A.SCORE_TYPE = A.SCORE_TYPE'
   Else
    Let $INCLUDE_GSIND_CRITERIA = $INCLUDE_GSIND_CRITERIA || ')'
    Let $INCLUDE_GSIND_DISPLAY_CRITERIA = $INCLUDE_GSIND_CRITERIA
    Let $INCLUDE_SCORE_TYPE_CRITERIA = 'A.SCORE_TYPE = ' ||'( ''' ||'TRN'|| ''')'
  End-If
End-Procedure

!vendkxy done changes for ITG 76453 on 05/21/2010--End
!****************************************************
!REPLACE_CHAR_IN_STR: Pass in string and find str and
!replace string
!This procedure finds all occurences of find string and
!substitutes the replace string
!****************************************************
begin-procedure Replace-Char-In-String ($find_str, $replace_str, :$str)

  let #i    = 1
  let #slen = length(rtrim($str, ' '))
  let $nstr = ''

  while (#i <= #slen)
    let $char = substr($str,#i,1)
    if $char = $find_str
      let $char = $replace_str
    end-if
    let $nstr = $nstr || $char
    add 1 to #i
  end-while

  let $str = $nstr

end-procedure Replace-Char-In-String


begin-procedure Education-XML

    let $xmltag = 'Education'
    let $xmloutput_line = ''
    let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end
    !show '$xmloutput_line' $xmloutput_line
    write #outputfile2  from $xmloutput_line
    
      let $xmltag = 'Level'
     ! let $xmlcontent = rtrim($string_out,' ')
     let $xmlcontent = $EducLongName
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
     let $xmltag = 'School'
     ! let $xmlcontent = rtrim($string_out,' ')
     let $xmlcontent =$SCHOOL
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
    
     let $xmltag = 'Area_of_Study'
     ! let $xmlcontent = rtrim($string_out,' ')
     let $xmlcontent =$AREA_OF_STUDY
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
      
 
      
    let $xmltag = 'Education'
    let $xmloutput_line = $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
    write #outputfile2 from $xmloutput_line
    
           
end-procedure

begin-procedure EMPLOYER
begin-select 
I.EMPLOYER
    Move &I.EMPLOYER to $EMPLOYER
   let 	$string      = $EMPLOYER
   let  $replace_str = 'and'
   let  $find_str    = '&'

    do replace-char-in-string($find_str, $replace_str, $string)
    let $EMPLOYER=$string

   Do EMPLOYER-XML 
from PS_PRIORWORK_EXPER I
  where I.EMPLID=$EMPLID
End-select 
end-procedure


begin-procedure EMPLOYER-XML

    let $xmltag = 'EMPLOYER-X'
    let $xmloutput_line = ''
    let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end
    !show '$xmloutput_line' $xmloutput_line
    write #outputfile2  from $xmloutput_line
    
      let $xmltag = 'EMPLOYER'
     ! let $xmlcontent = rtrim($string_out,' ')
     let $xmlcontent = $EMPLOYER
      let $xmloutput_line = $xmlcntrl_begin || $xmltag || $xmlcntrl_end  ||
                               $xmlcontent ||
                               $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
      write #outputfile2 from $xmloutput_line
 
      
    let $xmltag = 'EMPLOYER-X'
    let $xmloutput_line = $xmlcntrl_begin || $xmltag_end || $xmltag || $xmlcntrl_end
    write #outputfile2 from $xmloutput_line
    
           
end-procedure


begin-procedure Open-XML-Data-For-Print
#define XMLSSPFILEDMANLCHK GEXHR069.XML  ! Manual US Checks
 
 
            open '{IMPORTPREFIX}{XMLSSPFILEDMANLCHK}{IMPORTSUFFIX}' as 10 for-writing record=150:vary
            let $xmlssp_filenm =  '{IMPORTPREFIX}{XMLSSPFILEDMANLCHK}{IMPORTSUFFIX}'
      
            
            let $xmlp_report_defn = 'GEXHR069_G'    
            let $PY_SSP_PRINTRPT_ID = $xmlp_report_defn
            let $PRINT_TEMPLATE_ID ='GEXHR069_G_1'  
            let $PY_PSLP_PROCNAME = 'USCHECKS'
         let $xmlp_report_defn = 'GEXHR069_G'
         let $PY_SSP_BURSTRPT_ID = $xmlp_report_defn
         let $BURST_TEMPLATE_ID  = 'GEXHR069_G_1'
           
         
end-procedure




!----------------------------------------------------------------------!
! Procedure: Write-1st-SSP-XML-Data                                    !
! Descr:     Write XML data version & schema elements.                 !
!----------------------------------------------------------------------!
begin-Procedure Write-1st-SSP-XML-Data

 write #outputfile from '<?xml version="1.0" encoding="Windows-1252"?>'

end-procedure

#include 'gexxx900.sqc'  !Get company multiple row table
#include 'gexxx901.sqc'  !Get company/paygroup multiple row table
#include 'gexxx902.sqc'  !Get deptid multiple row table
#include 'gexxx903.sqc'  !Get employee status multiple row table
#include 'gexxx907.sqc'  !Get company/division code multiple row table
#include 'gexxx908.sqc'  !Get sal_admin_plan multiple row table
#include 'gexxx909.sqc'  !Get acct_cd code multiple row table
#include 'gexxx922.sqc'  !Get pay single row run control
#include 'gexxx950.sqc'  !Get SQRW run controls
#include 'gexxx910.sqc'
#include 'gexxx916.sqc'
#include 'askaod.sqc'    !Ask As Of Date input
#include 'getcodta.sqc'  !Get company data
#include 'getdptnm.sqc'  !Get department name
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date math
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
