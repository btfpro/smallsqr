!***********************************************************************
! Interface Name: GEXBN647                                             *
! GEXBN608: Beginning with the first pay period of March, 2012, Giant  *
!Eagle will report changes to 401k Beneficiary data to the Principal   *
!Financial Group (PFG) on a weekly basis.  Output will be a .dat format* 
!file which will be FTP’d to the vendor.  PFG will manually update 		 *
!their system with this information																		 *
!           																													 *
!                                                                      *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!  $Date:: 02/07/2012				    $                                      *
!  $Revision:: 01               $                                      *
!  $Workfile:: GEXBN647.SQR     $                                      *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  INITIALS    DATE           DESCRIPTION OF THE CHANGE                *
!***********************************************************************
!  GEX_ITG_113537 ISDVAKG     02/07/2012	     INITIAL CREATION        *
!                                                                      *
!***********************************************************************

!selection criteria
#define #x000_col_selection_criteria_a  02
#define #x000_col_selection_criteria_b  05

#include 'setenv.sqc' !Set environment
begin-setup
!#include 'setup32a.sqc'
#include 'ptset02.sqc'
declare-report Term-Report
Printer-Type=HPLASERJET
  layout=default
end-declare
declare-report Prev-Enroll-Report
Printer-Type=HPLASERJET
  layout=default
end-declare


end-setup

begin-report

  do Init-DateTime
  do Init-Number
  do stdapi-init

  do Get-Calendar-Year-Id
  move 'GEXBN647' to $ReportID
  move ' PFG Beneficiary data Changes '   to $ReportTitle     

  display $ReportTitle noline
  display '  ' noline

  do Get-Current-DateTime

  let $sev-error = 'N'

  let #tot_count = 0
  let #write_recs = 0

  do Report
  
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term
end-report

!***********************************************************************
begin-procedure Report
!***********************************************************************
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan

  move 'N' to $Errorfound

  Do check_run_controls  
  Do Select-Pay-End-Dt 
  Do Process-Data
  !Do Commit-Transaction

  date-time () hh:mi:ss &timeProcess
  display #total_new_enrol 99999 noline
  display '  Total TMs Processed'
  !display #total_changes_count 99999 noline
  !display ' Data changes Processed ' noline
  display &timeProcess
end-procedure

!***********************************************************************
begin-procedure check_run_controls
!***********************************************************************
#debug8 display 'Check-run-Controls'

  if $Prcs_Process_Instance = ''
    Do Ask-As-Of-Date
    Let $X000_WHERE_SELECT_ASOFDATE = $AsOfDate

  else
     
    DO GEXRCBN1-SELECT-PARAMETERS
    Let $X000_WHERE_SELECT_ASOFDATE = &GEX_RC_BEN.ASOFDATE
    if rtrim($X000_WHERE_SELECT_ASOFDATE,' ') = ''
      let $X000_WHERE_SELECT_ASOFDATE = $AsOfToday
    end-if

  end-if

  Do Format-DateTime($X000_WHERE_SELECT_ASOFDATE, $X000_REPORT_HEADING_ASOFDATE ,{DEFDATE}, '', '')

  show '$X000_WHERE_SELECT_ASOFDATE      = ' $X000_WHERE_SELECT_ASOFDATE 

  LET #PAGE-COUNT = 0
 
end-procedure        

!***********************************************************************
begin-procedure Process-Data
!***********************************************************************
#debug8 display 'Process-Data'
   
  let $filename = '{OUTFILE}'||'gexbn647.dat'
  
  open $filename as 1
     for-writing record=398 status=#writestat

  if #writestat != 0
    display 'Error Opening output file.  Program terminating.'
    stop
  end-if

  move 'N' to $rowfound
  
  let #inputtran = 0
  let $plan_type_String      = 'A.plan_type in ( '
  let $benefit_plan_string   = 'A.benefit_plan in ( '

  let $plan_type_String_1    = 'T.plan_type in ( '
  let $benefit_plan_string_1 = 'T.benefit_plan in ( '
  
  let #plan_count = 0
  let #total_new_enrol = 0
  
begin-select on-error=sql-error-found('Process-Data')
xx.gex_dreyfus_plan () on-break print=never level=1 after=dreyfus-plan-change
	save=$prev_dreyfus_plan
xx.plan_type
xx.benefit_plan
xx.gex_prof_shr

			Move &XX.GEX_DREYFUS_PLAN to $dreyfus_plan_number
		
  add 1 to #plan_count
  if #plan_count = 1
     let $plan_type_string = $plan_type_string || ''''||&xx.plan_type||''''
     let $benefit_plan_string = $benefit_plan_string || '''' ||&xx.benefit_plan||''''

		 let $plan_type_string_1 = $plan_type_string_1 || ''''||&xx.plan_type||''''
     let $benefit_plan_string_1 = $benefit_plan_string_1 || '''' ||&xx.benefit_plan||''''
		
  else

     let $plan_type_string = $plan_type_string||','||''''||&xx.plan_type||''''
     let $benefit_plan_string = $benefit_plan_String||','||''''||&xx.benefit_plan||''''

     let $plan_type_string_1 = $plan_type_string_1 ||','||''''||&xx.plan_type||''''
     let $benefit_plan_string_1 = $benefit_plan_string_1 ||','||'''' ||&xx.benefit_plan||''''

  end-if

from ps_gex_dreyfus_map xx, PS_GEX_RC_GEXBN646 RC646
where XX.gex_prof_shr = 'N'
AND XX.PLAN_TYPE = '40'
AND RC646.OPRID = $prcs_oprid
AND RC646.RUN_CNTL_ID = $prcs_run_cntl_id
AND XX.GEX_DREYFUS_PLAN = RC646.GEX_DREYFUS_PLAN
order by XX.gex_dreyfus_plan 
end-select

end-procedure

!***********************************************************************
begin-procedure dreyfus-plan-change
!***********************************************************************
#debug8 display 'dreyfus-plan-change'

if #plan_count > 0
   let $plan_type_string = $plan_type_String||')'
   let $benefit_plan_string = $benefit_plan_string||')'

   let $plan_type_string_1 = $plan_type_String_1||')'
   let $benefit_plan_string_1 = $benefit_plan_string_1||')'

   display $plan_type_String
   display $benefit_plan_string
   display $plan_type_String_1
   display $benefit_plan_string_1

   move $prev_dreyfus_plan to $gex_dreyfus_plan

   move 'Dreyfus Plan Number: ' to $Plan_number
   
   Do process-active-enrollments
         
   let $plan_type_String      = 'A.plan_type in ( '
   let $benefit_plan_string   = 'A.benefit_plan in ( '

   let $plan_type_String_1    = 'T.plan_type in ( '
   let $benefit_plan_string_1 = 'T.benefit_plan in ( '

   let #plan_count = 0

end-if

end-procedure

!***********************************************************************
begin-procedure Process-Active-Enrollments
!***********************************************************************
#debug8 display 'Process-Active-Enrollments'
     
	Let $emplid = ' '
	Let #add_no_change = 0

begin-select ON-ERROR=SQL-Error-Found('Process-Active-Enrollments')
A.EMPLID,
B.NAME,
N.NATIONAL_ID,
A.EMPL_RCD,
A.BENEFIT_NBR,
A.EFFDT,
A.PLAN_TYPE,
A.BENEFIT_PLAN
 
  move &A.EMPLID to $emplid
  move &B.NAME to $name
  move &N.NATIONAL_ID to $ssn
  move &A.EMPL_RCD to $empl_rcd
  move &A.BENEFIT_NBR to $benefit_nbr
  move &A.EFFDT to $effdt
  move &A.PLAN_TYPE to $plan_type
  move &A.BENEFIT_PLAN to $benefit_plan

	Do Get-Curr-Benefic-Data
	
	Add 1 to #add_no_change
      
FROM  PS_JOB J,PS_PERS_NID N, PS_PERSONAL_DATA B, PS_SAVINGS_PLAN A
WHERE  A.COVERAGE_ELECT = 'E'
and [$plan_type_string]
and [$benefit_plan_string]
AND J.EMPLID = N.EMPLID
AND J.EMPLID = B.EMPLID
AND J.EMPLID = A.EMPLID
AND J.EMPL_RCD = A.EMPL_RCD
AND N.COUNTRY = 'USA' 
AND N.NATIONAL_ID_TYPE = 'PR'
AND J.EMPL_STATUS IN ('A','L','P')
AND J.EFFDT = (SELECT MAX(J1.EFFDT) FROM PS_JOB J1
								WHERE J1.EMPLID = J.EMPLID
								AND J1.EMPL_RCD = J.EMPL_RCD
								AND J1.EFFDT <= $range_end_dt)
AND J.EFFSEQ = (SELECT MAX(J2.EFFSEQ) FROM PS_JOB J2
		  						WHERE J2.EMPLID = J.EMPLID
		  						AND J2.EMPL_RCD = J.EMPL_RCD
		  						AND J2.EFFDT = J.EFFDT)
AND A.EFFDT = (SELECT MAX(A1.EFFDT) FROM PS_SAVINGS_PLAN A1
			   				WHERE A1.EMPLID = A.EMPLID
			   				AND A1.EMPL_RCD = A.EMPL_RCD
			   				AND A1.PLAN_TYPE = A.PLAN_TYPE
			   				AND A1.BENEFIT_NBR = A.BENEFIT_NBR
			   				AND A1.EFFDT <= $range_end_dt)
ORDER BY A.EMPLID, A.EMPL_RCD, A.PLAN_TYPE					
End-Select

  show 'Processed TMs: ' #add_no_change

end-procedure

!***********************************************************************
Begin-Procedure Insert-Current-Change
!***********************************************************************
#debug8 display 'Insert-Current-Change'

begin-sql on-error=sql-error-found('Insert-Current-Change')
INSERT INTO PS_GEX_GEXBN647_SB values
($rec_emplid,$rec_empl_rcd,$rec_plan_type,$rec_benefit_nbr, 
$rec_dependent_benef,$file_benef_pct,$rec_contingent,$file_dep_name,$rec_relation_code)
  
end-sql

!***********************************************************************
End-Procedure Insert-Current-Change
!***********************************************************************

!***********************************************************************
Begin-Procedure Get-Curr-Benefic-Data
!***********************************************************************
	Let $benef_pct = ' '

Begin-Select ON-ERROR=SQL-Error-Found('Get-Curr-Benefic-Data')
SB.EMPLID,
SB.EMPL_RCD,
SB.PLAN_TYPE,
SB.BENEFIT_NBR,
SB.DEPENDENT_BENEF,
SB.BENEF_PCT,
SB.CONTINGENT,
DB.NAME,
DB.RELATIONSHIP

	Move &SB.EMPLID to $benef_emplid
	Move &SB.EMPL_RCD to $benef_empl_rcd
	Move &SB.PLAN_TYPE to $benef_plan_type
	Move &SB.BENEFIT_NBR to $benef_benefit_nbr
	Move &SB.DEPENDENT_BENEF to $dependent_benef
	Move &SB.BENEF_PCT  to $benef_pct
	Move &SB.CONTINGENT to $contingent
	move &DB.NAME to $dep_name
	move &DB.RELATIONSHIP to $relation_code
	
	!Let $dependent_benef = rtrim($dependent_benef,' ')
	Let $dep_name = rtrim($dep_name,' ') 			
  Let $relation_code = rtrim($relation_code,' ') 			
  Let $benef_pct = rtrim($benef_pct,' ') 
  Let $contingent = rtrim($contingent,' ')
  
  Show 'Get-Curr-Benefic-Data: ' $benef_emplid
  
    Do Delete-Existing-Row
   	Do Get-All-Rows 
  	Exit-Select
  		
	show 'Benef Data Found for Prev Term Row: ' $benef_emplid
						 		
FROM PS_SAVINGS_BENEFIC SB, PS_DEPENDENT_BENEF DB
WHERE SB.EMPLID = $emplid
AND SB.EMPL_RCD = $empl_rcd
AND SB.BENEFIT_NBR = $benefit_nbr
AND SB.PLAN_TYPE = $plan_type    
AND SB.EFFDT = $effdt
AND SB.EMPLID = DB.EMPLID
AND SB.DEPENDENT_BENEF = DB.DEPENDENT_BENEF
AND not EXISTS (SELECT 'X' FROM PS_GEX_GEXBN647_SB GE
								WHERE GE.EMPLID = SB.EMPLID
			   				AND GE.EMPL_RCD = SB.EMPL_RCD
			   				AND GE.PLAN_TYPE = SB.PLAN_TYPE
			   				AND GE.BENEFIT_NBR = SB.BENEFIT_NBR
			   				AND GE.DEPENDENT_BENEF = SB.DEPENDENT_BENEF
			   				AND GE.BENEF_PCT = SB.BENEF_PCT
			   				AND GE.CONTINGENT = SB.CONTINGENT
			   				AND GE.NAME = DB.NAME
			   				AND GE.RELATIONSHIP = DB.RELATIONSHIP)
End-Select								 
!***********************************************************************
End-Procedure Get-Curr-Benefic-Data
!***********************************************************************

!***********************************************************************
begin-procedure Get-All-Rows
!***********************************************************************
#debug8 display 'Get-All-Rows'
  
begin-select ON-ERROR=SQL-Error-Found('Get-All-Rows')
SB1.EMPLID,
SB1.EMPL_RCD,
SB1.PLAN_TYPE,
SB1.BENEFIT_NBR,
B1.NAME,
N1.NATIONAL_ID,
SB1.DEPENDENT_BENEF,
SB1.BENEF_PCT,
SB1.CONTINGENT,
DB1.NAME,
DB1.RELATIONSHIP,
(SELECT XLATSHORTNAME FROM PSXLATITEM I WHERE I.FIELDNAME = 'RELATIONSHIP' AND I.FIELDVALUE = DB1.RELATIONSHIP
AND I.EFFDT = (SELECT MAX(I1.EFFDT) FROM PSXLATITEM I1 WHERE I1.FIELDNAME = I.FIELDNAME
			   AND I1.FIELDVALUE = I.FIELDVALUE AND I1.EFFDT <= SYSDATE)) &RELATIONSHIP
 
  move &SB1.EMPLID to $rec_emplid
  move &SB1.EMPL_RCD to $rec_empl_rcd
  move &SB1.PLAN_TYPE to $rec_plan_type
  move &SB1.BENEFIT_NBR to $rec_benefit_nbr
  move &SB1.DEPENDENT_BENEF to $rec_dependent_benef
  move &B1.NAME to $file_name
  move &N1.NATIONAL_ID to $file_ssn
  move &DB1.NAME to $file_dep_name
  move &DB1.RELATIONSHIP to $rec_relation_code
  move &RELATIONSHIP to $file_relationship
  move &SB1.BENEF_PCT to $file_benef_pct
  move &SB1.CONTINGENT to $rec_contingent
  
  Let $file_dep_name = rtrim($file_dep_name,' ') 			
  Let $rec_relation_code = rtrim($rec_relation_code,' ') 			
  Let $file_benef_pct = rtrim($file_benef_pct,' ') 
  Let $rec_contingent = rtrim($rec_contingent,' ')
  
  If $rec_contingent = 'Y'
	  Move 'Contingent' to $file_contingent
	Else
		Move 'Primary' to $file_contingent
	End-If    
  	 
  	Do write-record
  	Do Insert-Current-Change
  	  
FROM  PS_JOB JJ,PS_PERS_NID N1, PS_PERSONAL_DATA B1, PS_SAVINGS_PLAN AA, PS_SAVINGS_BENEFIC SB1, PS_DEPENDENT_BENEF DB1
WHERE  AA.COVERAGE_ELECT = 'E'
AND JJ.EMPLID = $benef_emplid
AND JJ.EMPL_RCD = $benef_empl_rcd
AND JJ.EMPLID = N1.EMPLID
AND JJ.EMPLID = B1.EMPLID
AND JJ.EMPLID = AA.EMPLID
AND JJ.EMPL_RCD = AA.EMPL_RCD
AND N1.COUNTRY = 'USA' 
AND N1.NATIONAL_ID_TYPE = 'PR'
AND JJ.EMPL_STATUS IN ('A','L','P')
AND JJ.EFFDT = (SELECT MAX(JJ1.EFFDT) FROM PS_JOB JJ1
								WHERE JJ1.EMPLID = JJ.EMPLID
								AND JJ1.EMPL_RCD = JJ.EMPL_RCD
								AND JJ1.EFFDT <= $range_end_dt)
AND JJ.EFFSEQ = (SELECT MAX(JJ2.EFFSEQ) FROM PS_JOB JJ2
		  						WHERE JJ2.EMPLID = JJ.EMPLID
		  						AND JJ2.EMPL_RCD = JJ.EMPL_RCD
		  						AND JJ2.EFFDT = JJ.EFFDT)
AND AA.EFFDT = (SELECT MAX(AA1.EFFDT) FROM PS_SAVINGS_PLAN AA1
			   				WHERE AA1.EMPLID = AA.EMPLID
			   				AND AA1.EMPL_RCD = AA.EMPL_RCD
			   				AND AA1.PLAN_TYPE = AA.PLAN_TYPE
			   				AND AA1.BENEFIT_NBR = AA.BENEFIT_NBR
			   				AND AA1.EFFDT <= $range_end_dt)
AND AA.EMPLID  = SB1.EMPLID
AND AA.EMPL_RCD = SB1.EMPL_RCD
AND AA.PLAN_TYPE = $benef_plan_type
AND AA.BENEFIT_PLAN = $benefit_plan
AND AA.BENEFIT_NBR = $benef_benefit_nbr
AND AA.PLAN_TYPE = SB1.PLAN_TYPE
AND AA.BENEFIT_NBR = SB1.BENEFIT_NBR
AND AA.EFFDT = SB1.EFFDT
AND SB1.EMPLID = DB1.EMPLID
AND SB1.DEPENDENT_BENEF = DB1.DEPENDENT_BENEF
End-Select

  
!***********************************************************************  
End-Procedure  Get-All-Rows
!***********************************************************************

!***********************************************************************
Begin-Procedure Delete-Existing-Row
!***********************************************************************
#debug8 display 'Delete-Existing-Row'

begin-sql on-error=sql-error-found('Delete-Existing-Row')
DELETE from PS_GEX_GEXBN647_SB 
WHERE EMPLID = $benef_emplid AND EMPL_RCD = $benef_empl_rcd 
AND PLAN_TYPE = $plan_type AND BENEFIT_NBR = $benefit_nbr
end-sql

!***********************************************************************
End-Procedure Delete-Existing-Row
!***********************************************************************

!***********************************************************************
begin-procedure Select-Pay-End-Dt
!***********************************************************************
#debug8 display 'select-pay-end-dt'
begin-select
MAX(PC.PAY_END_DT)      &pay_end_dt
  
  move &pay_end_dt   to $pay_end_dt
  move &pay_end_dt   to $pay_end_dt_print
  Let $pay_end_dt_print = edit($pay_end_dt_print, 'MM/DD/YYYY')
  
FROM   PS_PAY_CALENDAR PC
WHERE  PC.PAY_END_DT <= $X000_WHERE_SELECT_ASOFDATE 
AND    PC.PAY_CONFIRM_RUN = 'Y'
end-select
  display 'Last Confirmed Pay End Date: ' noline
  display $pay_end_dt

if rtrim($pay_end_dt,' ') <> ''

   do convert-to-dtu-date($pay_end_dt,$pay_end_dt_dtu)
   do dtu-subtract-days($pay_end_dt_dtu,2,$range_begin_dt_dtu)
   do convert-from-dtu-date($range_begin_dt_dtu,$range_begin_dt)

   do dtu-add-days($pay_end_dt_dtu,4,$range_end_dt_dtu)
   do convert-from-dtu-date($range_end_dt_dtu,$range_end_dt)

   display 'Range Begin Dt: ' noline
   display $range_begin_dt
   display 'Range End Dt: ' noline
   display $range_end_dt

else

   display 'No Pay End Dt found prior to ' noline
   display $X000_WHERE_SELECT_ASOFDATE
   stop

end-if

end-procedure

!***********************************************************************
Begin-Procedure Write-Record
!***********************************************************************
     
  write 1 from $file_ssn:9
               $file_name:24
               $file_dep_name:24
               $file_contingent:10
               $file_relationship:10
               $file_benef_pct:3
               	       			 
!***********************************************************************
End-Procedure Write-Record
!***********************************************************************

!***********************************************************************
begin-procedure SQL-Error-Found($Proc_Name) 
!***********************************************************************
  display 'SQL Error in ' 
  display $Proc_Name 
  display $_sql-error
  display 'sql-status:' 
  display #_sql-status 
!  STOP
end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'rotname3.sqc'  !Rotate-Name
#Include 'askaod.sqc'    !Ask-As-Of-Date Routine
#include 'gexxx920.sqc'  !Get ASOFDATE from Run Control
