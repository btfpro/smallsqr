!***********************************************************************
!      GEXBN617.SQR -This program reads an Input file from InProc, the * 
!                    third party open enrollment firm, and loads into  *  
!                    Bas Tables. This program handles dependent data.  * 
!                    
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!***********************************************************************
!                                                                      *
! Tables:                                                              *
!           PS_BAS_PARTIC                                              *
!           PS_BAS_PARTIC_PLAN                                         *
!           PS_BAS_PARTIC_OPTN                                         *
!           PS_BAS_PARTIC_COST                                         *
!           PS_BAS_PARTIC_DPND                                         *
!                                                                      *
!***********************************************************************
! Written by:   Carl Buckrop                                           *
!                                                                      *
! Normally Run:                                                        *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#         INITIALS    DATE           DESCRIPTION OF THE CHANGE    *
!***********************************************************************
!CSR HR-10814  CWB         11/04/2004     INITIAL CREATION             *
!                                                                      *
!ITG-43851     vendsxn     09/24/2007     To accommodate changes for   *
!                                         OE08                         *
!***********************************************************************
!                                                                      *
!***********************************************************************


#include 'setenv.sqc'   !Set environment
#Include 'setup01.sqc'  !Printer and page-size initialization

!-----------------------------------------------------------------------
begin-setup
!-----------------------------------------------------------------------

#define col1 1
#define col2 5
#define col3 50
#define col4 62
#define col5 72

    declare-variable
        date    $wkDate1
        date    $wkDate2
    end-declare

End-Setup


!-----------------------------------------------------------------------
! HEADING FOR THE CHANGED DATA REPORT
!-----------------------------------------------------------------------
Begin-Heading 10
!-----------------------------------------------------------------------
#include 'stdhdg01.sqc'

    PRINT 'Comment'             (7,{col2})
    PRINT 'EmplID'              (  ,{col3})
    PRINT 'DpnID'		(  ,{col4})
    PRINT 'Name'		(  ,{col5})
end-heading


!-----------------------------------------------------------------------
begin-report
!-----------------------------------------------------------------------

  ! Set up Flag for 4 position year in date fields
  move '1' to $ReportYear4

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime

  do Init-Report

  #debuga show 'Doing Process-Main'
  do Process-Main

  close 1

   do Reset
  ! do Rollback-Transaction
   do Stdapi-Term

  date-time () hh:mi:ss &timeEnded
  display ' '
  display 'Process Ended: ' noline
  display &timeEnded

end-report


!-----------------------------------------------------------------------
begin-procedure Init-Report
!-----------------------------------------------------------------------

  let $Proced-Name = 'Init-Report'
  #debugA display $Proced-Name

  move 'GEXBN617.SQR'   to $ReportID
  display ' '
  display  $ReportID

  Move 'Open Enrollment data load to Dependent tables' to $ReportTitle
  display ' '
  display $ReportTitle
  display ' '

  date-time () hh:mi:ss &timeBegan
  display 'Process Began: ' noline
  display &timeBegan
  display ' '

  do Stdapi-Init

  if $prcs_process_instance = ''
	let $Prcs_OprID = 'ISDVDXS'
	let $Prcs_Run_Cntl_ID = 'gexbn616'
  end-if

   #debuga show 'Doing Select-Parameters'
   do Select-Parameters       

!  Any other variables to be initialized

  let $Sngl_Quote  = chr(39)
  let #Tot_Ctr      = 0
  let #Commit_After = 100
  let $Dbl_Quote  = chr(34)
 
end-procedure	!Init-Report


!-----------------------------------------------------------------------
begin-procedure select-parameters
!-----------------------------------------------------------------------
  let $Proced-Name = 'select-parameters'
  #debugA display $Proced-Name

  ! DXS, This procedure is common to gexbn616, 617 and 618.
  
	do select-gex_rc_gexbn616
	do select-gex_rc_bas_stat
	do select-gex_rc_evt_sts

end-procedure


!-----------------------------------------------------------------------
begin-procedure select-gex_rc_gexbn616
!-----------------------------------------------------------------------

begin-select
GEX_RC_GEXBN616.EVENT_DT
GEX_RC_GEXBN616.NUM_DAYS
GEX_RC_GEXBN616.EVENT_CLASS
GEX_RC_GEXBN616.PROCESS_IND

	let $event_dt = &GEX_RC_GEXBN616.EVENT_DT
	let #weeks = &GEX_RC_GEXBN616.NUM_DAYS
	let $class = &GEX_RC_GEXBN616.EVENT_CLASS
	let $prcs_ind = &GEX_RC_GEXBN616.PROCESS_IND

   #debugA show '$event_dt ' $event_dt 
   #debugA show '#weeks ' #weeks 
   #debugA show 'Class ' $class
   #debugA show '$prcs_ind ' $prcs_ind

from PS_GEX_RC_GEXBN616 GEX_RC_GEXBN616
where GEX_RC_GEXBN616.OPRID = $Prcs_OprID
  and GEX_RC_GEXBN616.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-select

end-procedure 


!-----------------------------------------------------------------------
begin-procedure select-gex_rc_bas_stat
!-----------------------------------------------------------------------

  Let $BAS_STAT_Alias = 'BAS_PROCESS_STATUS'
  Let $OprID         = '''' || $Prcs_OprID       || ''''
  Let $Run_Cntl_ID   = '''' || $Prcs_Run_Cntl_ID || ''''
  Let #GEX_RC_BAS_STAT_ROWS = 0
  Let $INCLUDE_BAS_STAT_CRITERIA = ''

Begin-Select

GEX_RC_BAS_STAT.BAS_PROCESS_STATUS

  Add 1 To #GEX_RC_BAS_STAT_ROWS

  If #GEX_RC_BAS_STAT_ROWS = 1
    Let $INCLUDE_BAS_STAT_CRITERIA = '(' || $BAS_STAT_Alias || ' In ('''     || &GEX_RC_BAS_STAT.BAS_PROCESS_STATUS || ''''
  Else
    Let $INCLUDE_BAS_STAT_CRITERIA = $INCLUDE_BAS_STAT_CRITERIA || ',''' || &GEX_RC_BAS_STAT.BAS_PROCESS_STATUS  || ''''
  End-If

From  PS_GEX_RC_BAS_STAT GEX_RC_BAS_STAT

Where GEX_RC_BAS_STAT.OPRID               = [$OprID]
And   GEX_RC_BAS_STAT.RUN_CNTL_ID         = [$Run_Cntl_ID]
End-Select

  If #GEX_RC_BAS_STAT_ROWS = 0
    Let $INCLUDE_BAS_STAT_CRITERIA = $BAS_STAT_Alias || ' = ' || $BAS_STAT_Alias
  Else
    Let $INCLUDE_BAS_STAT_CRITERIA = $INCLUDE_BAS_STAT_CRITERIA || '))'
  End-If

  #debugA show '$INCLUDE_BAS_STAT_CRITERIA ' $INCLUDE_BAS_STAT_CRITERIA

end-procedure   


!----------------------------------------------------------------
begin-procedure select-gex_rc_evt_sts
!----------------------------------------------------------------

  Let $EVT_STAT_Alias = 'EVENT_STATUS'
  Let $OprID         = '''' || $Prcs_OprID       || ''''
  Let $Run_Cntl_ID   = '''' || $Prcs_Run_Cntl_ID || ''''
  Let #GEX_RC_EVT_STAT_ROWS = 0
  Let $INCLUDE_EVT_STAT_CRITERIA = ''

Begin-Select

GEX_RC_EVT_STS.EVENT_STATUS

  Add 1 To #GEX_RC_EVT_STAT_ROWS

  If #GEX_RC_EVT_STAT_ROWS = 1
    Let $INCLUDE_EVT_STAT_CRITERIA = '(' || $EVT_STAT_Alias || ' In ('''     || &GEX_RC_EVT_STS.EVENT_STATUS || ''''
  Else
    Let $INCLUDE_EVT_STAT_CRITERIA = $INCLUDE_EVT_STAT_CRITERIA || ',''' || &GEX_RC_EVT_STS.EVENT_STATUS  || ''''
  End-If

From  PS_GEX_RC_EVT_STS GEX_RC_EVT_STS

Where GEX_RC_EVT_STS.OPRID               = [$OprID]
And   GEX_RC_EVT_STS.RUN_CNTL_ID         = [$Run_Cntl_ID]
End-Select

  If #GEX_RC_EVT_STAT_ROWS = 0
    Let $INCLUDE_EVT_STAT_CRITERIA = $EVT_STAT_Alias || ' = ' || $EVT_STAT_Alias
  Else
    Let $INCLUDE_EVT_STAT_CRITERIA = $INCLUDE_EVT_STAT_CRITERIA || '))'
  End-If

  #debugA show '$INCLUDE_EVT_STAT_CRITERIA ' $INCLUDE_EVT_STAT_CRITERIA

end-procedure


!----------------------------------------------------------------
begin-procedure Process-Main
!----------------------------------------------------------------

  let $Proced-Name = 'Process-Main'
  #debugA display $Proced-Name

 !  Let $filename = 'Z:\psoft\working\isdvdxs\' || 'DEP.txt' 
   Let $filename = '{INFILE}' || 'DEP.txt'  
  
    display 'Processing File  [' noline
    display $filename         noline
    display ']'
    display ' '

  open $filename as 1 for-reading record=143:vary status=#filestat
  if #filestat != 0
	show 'Error Opening File: ' $filename
	stop
  end-if

 let $Last_Pers_Id = ' '

 while 1 = 1

    let $Err_Relationship = 'N'
						! Starting position
    read 1 into $schedule_id:6 -		! 1
		$emplid:11 -			! 7
                $ssn:9 -			! 18
                $event_id:6 -			! 27
                $benefit_prg:3 -		! 33
		$dependentid:2 -		! 36
		$dependent_status:1 -		! 38
		$dp_name:50 -			! 39
		$dp_birth_date:8 -		! 89
		$dp_disabled:1 -		! 97
		$dp_sex:1 -			! 98
		$dp_relationship:2 -		! 99
		$dp_student:1 -			! 101
		$dp_ssn:9 -			! 102
		$dp_filler:6 -			! 111
		$dp_10:3 -			! 117
                $dp_11:3 -			! 120
		$dp_14:3 -			! 123
                $dp_25:3 -			! 126
		$dp_24:3 -			! 129
                $dp_23:3 -			! 132
		$dp_2W:3 -			! 135
		$dp_1Z:3 -			! 138
		$dp_2Z:2 -			! 141
                $benefit_rcd:1			! 143
						! 144

   #debuga Show 'Doing Get-Emplid-Map for ' $emplid
   do Get-Emplid-Map		! Added by DXS

if isblank($dp_disabled)
   let $dp_disabled = 'N'
end-if
if isblank($dp_student)
   let $dp_student = 'N'
end-if

let $birth_month = substr($dp_birth_date,1,2)
let $birth_day = substr($dp_birth_date,3,2)
let $birth_year = substr($dp_birth_date,5,4)
let $dp_birth_date = $birth_year || $birth_month || $birth_day
if not isblank($dp_birth_date)
      do Format-DateTime($dp_birth_date,$out,{DEFCMP},'','native')
      let $dp_birth_date = $out
   else
      let $dp_birth_date = ''
   end-if
let $dependentid = edit(to_number($dependentid),'09')

  if #end-file = 1
    !  show 'End File'
     ! show 'Doing EmplId-Changed-Process'
     ! do EmplId-Changed-Process
      break
   end-if
   
   #ifdef debuga 
   show 'Started Reading File'
   display '  $oe_emplid    [' noline
   display $oe_emplid          noline
   display ']' noline
   display '  $Last_Pers_Id  [' noline
   display $Last_Pers_Id        noline
   display ']' noline
   display '  $schedule_id  [' noline
   display $schedule_id       noline
   display ']' noline
   display '  $dp_name  [' noline
   display $dp_name        noline
   display ']'
   display ' '
   show 'Event Id ' $event_id
   show '$benefit_prg ' $benefit_prg
   #end-if

   ! DXS, only process emplids, which have been processed by gexbn616 
   #debuga show 'Doing Check-gexbn616'
   do Check-gexbn616
  
  #debuga show '$gexbn616_found ' $gexbn616_found

  if $gexbn616_found = 'Y'
	if $Last_Pers_Id <> $oe_emplid
		let $Empl_Err_Flag = 'N'
		let $Last_Pers_Id = $oe_emplid

		#debuga show 'Doing EmplId-Changed-Process'
		do EmplId-Changed-Process
      
		#debuga show 'Doing Process-Dependent-Benef'
		do Process-Dependent-Benef
      
		let $Empl_Err_Flag = 'N'
		let $Last_Pers_Id = $oe_emplid
		let $Get_Empl_Stat = 'Y'
		let $Inactive_Flag = 'N'
		let #Gross_Pct = 0
	 else
		#debuga show 'Same emplid'
		#debuga show 'Doing Process-Dependent-Benef'
		do Process-Dependent-Benef
	 end-if
    else
	add 1 to #Err_Ctr
	add 1 to #Bypass_Ctr
	#debug9 show 'Emplid ' $oe_emplid ' failed  Check-gexbn616'
    end-if

   add 1 to #Rec_Ctr

 end-while


  if #benef_Ctr = 0  and  #Err_Ctr = 0

     Display ' '
     Display '***  No Data found for criteria selected  ***'
     display ' '

  else

         display ' '
         Display  'RECORDS READ IN COUNT TOTAL :  ['   Noline
         Display  #Rec_Ctr Noline
         display ']'
         display ' '

         display ' '
         Display  'EMPLOYEES COUNT TOTAL       :  ['   Noline
         Display  #Empl_Ctr Noline
         display ']'
         display ' '

         display ' '
         Display  'RECORDS UPDATED COUNT TOTAL :  ['   Noline
         Display  #update_Ctr Noline
         display ']'
         display ' '

	 display ' '
         Display  'RECORDS INSERTED COUNT TOTAL :  ['   Noline
         Display  #insert_Ctr Noline
         display ']'
         display ' '

         display ' '
         Display  'RECORDS BYPASSES-INACTIVES  :  ['   Noline
         Display  #Inactive_Ctr Noline
         display ']'
         display ' '


         if #Err_Ctr > 0

             display ' '
             Display  'RECORDS BYPASSED-ERRORS     :  ['   Noline
             Display  #Bypass_Ctr Noline
             display ']'
             display ' '


            display ' '
            display ' '
            display  'EMPLOYEES W/ ERRORS/WARNINGS COUNT        :  [' noline
            display  #Empl_Err_Ctr  Noline
            display ']'
            display ' '

            display ' '
            display ' '
            display  'ERRORS WARNINGS FOUND IN THIS RUN         :  [' noline
            display  #Err_Ctr  Noline
            display ']'
            display ' '

            display ' '
            display ' '
            display  'WARNINGS FOUND IN THIS RUN                :  [' noline
            display  #Warn_Ctr  Noline
            display ']'
            display ' '

            display ' '
            display ' '
            display  'FSA Manual Setups Required                :  [' noline
            display  #FSA_Ctr  Noline
            display ']'
            display ' '

            display ' '
            display ' '
            display  'Employees with Beneficiaries Missing      :  [' noline
            display  #Benef_Miss  Noline
            display ']'
            display ' '

         end-if

  end-if

end-procedure  !Process-Main


!-----------------------------------------------------------------------
begin-procedure Get-Emplid-Map
!-----------------------------------------------------------------------
begin-select distinct
mapp.ssn

	move &mapp.ssn to $oe_emplid

from ps_gex_emplid_mapp mapp
where mapp.emplid = $emplid
end-select
end-procedure 


!-----------------------------------------------------------------------
begin-procedure Check-gexbn616
!-----------------------------------------------------------------------
	let $gexbn616_found = 'N'

begin-select
'Z'

	let $gexbn616_found = 'Y'

from PS_BAS_PARTIC
where EMPLID		= $oe_emplid		! comes from the file
and SCHED_ID		= $schedule_id		! comes from the file
and EVENT_ID		= $event_id		! comes from the file
and EVENT_CLASS		= $class		! comes from the run control page. 'OE'
and [$INCLUDE_EVT_STAT_CRITERIA]		! comes from the run control page. EVENT_STATUS	= 'O'
and [$INCLUDE_BAS_STAT_CRITERIA]		! comes from the run control page. BAS_PROCESS_STATUS in ('NT','PR','ET','RE')
and BENEFIT_PROGRAM	= $benefit_prg		! comes from the file
and PROCESS_IND		= $prcs_ind		! comes from the run control page. 'N'
and EVENT_DT		= $event_dt		! comes from the run control page.
end-select

end-procedure


!-----------------------------------------------------------------------
begin-procedure EmplId-Changed-Process
!-----------------------------------------------------------------------

  let $Proced-Name = 'EmplId-Changed-Process'
  #debugA display $Proced-Name

   add 1 to  #Empl_Ctr

!  Here could be a check to find the next available dependent Benef id
!  if the #new_dependent is ' ' .  Just search for the highest id and add 1
!  this would be to allow to enter the id's desired

   !let #new_dependent = 60   !
   !let #new_dependent = 70   !Per Kim changed from 60 to 70  !isdvsrc
   let #new_dependent = 80   !vendsxn
   
   let $new_dependent = TO_CHAR(#new_dependent)


! First Check if a dependent with an id higher than 70 (or whatever start value is) exists
! If a dependent exists delete all dependents > 70 for this employee

       let $new_dependent_records_exist = 'N'
       #debuga show 'Doing Check-For-Existing-New-Dependents'
       do Check-For-Existing-New-Dependents
       if $new_dependent_records_exist = 'Y'
	  #debuga show 'Doing Delete-Existing-New-Dependents'
          do Delete-Existing-New-Dependents
       end-if

! First Check if a dependent with an id higher than 70 has NID record
! If a dependent NID record exists delete all dependents > 70 for this employee

       let $new_dependent_nid_records_exist = 'N'
	#debuga show 'Doing Check-For-Existing-New-Dependents-NID-Record'
       do Check-For-Existing-New-Dependents-NID-Record
       if $new_dependent_nid_records_exist = 'Y'
		#debuga show 'Doing Delete-Existing-New-Dependents-NID-Record'
          do Delete-Existing-New-Dependents-NID-Record
       end-if

#DEBUGA display #new_dependent
end-procedure   !EmplId-Changed-Process



!-----------------------------------------------------------------------
begin-procedure Process-Dependent-Benef
!-----------------------------------------------------------------------

  let $Proced-Name = 'Process-Dependent-Benef'
  #debugA display $Proced-Name

  let $DB_NAME                = $dp_name
  let $DB_NAME_AC             = ' '
  let $DB_SAME_ADDRESS_EMPL   = 'Y'   !V001 Used to be N in 2001 OE
  let $DB_COUNTRY             = 'USA'
  let $DB_ADDRESS1            = ' '
  let $DB_ADDRESS2            = ' '
  let $DB_ADDRESS3            = ' '
  let $DB_ADDRESS4            = ' '
  let $DB_CITY                = ' '
  let $DB_NUM1                = ' '
  let $DB_NUM2                = ' '
  let $DB_HOUSE_TYPE          = ' '
  let $DB_COUNTY              = ' '
  let $DB_STATE               = ' '
  let $DB_POSTAL              = ' '
  let $DB_GEO_CODE            = ' '
  let $DB_IN_CITY_LIMIT       = ' '
  let $DB_COUNTRY_CODE        = ' '
  let $DB_PHONE               = ' '
  let $DB_RELATIONSHIP        = $dp_relationship
  let $DB_DEP_BENEF_TYPE      = 'O'
  if $DB_RELATIONSHIP = 'SP'
    let $DB_MAR_STATUS          = 'M'
  else
    let $DB_MAR_STATUS          = 'S'
  end-if
  let $DB_MAR_STATUS_DT       = ''
  let $DB_SEX                 = $dp_sex
  let $DB_BIRTHDATE           = $dp_birth_date
  let $DB_BIRTHPLACE          = ' '
  let $DB_BIRTHSTATE          = ' '
  let $DB_BIRTHCOUNTRY        = ' '
  let $DB_OCCUPATION          = ' '
  let $DB_DT_OF_DEATH         = ''
  let $DB_STUDENT             = $dp_student
  let $DB_DISABLED            = $dp_disabled
  let $DB_MEDICARE_ENTLD_DT   = ''
  let $DB_COBRA_EVENT_DT      = ''
  let $DB_CSB_ELIG            = 'N'
  let $DB_BIRTH_STATE_FRA     = ' '
  let $DB_BIRTH_COUNTRY_FRA   = ' '
  let $DB_COBRA_ACTION        = ' '
  let $DB_COBRA_EMPLID        = ' '
  let $DB_STUDENT_STATUS_DT   = ''
  let $DB_SMOKER              = 'N'

  let $DB_NATIONAL_ID_TYPE    = 'PR'
  let $DB_NATIONAL_ID         = $dp_ssn
  let $DB_SSN_KEY_FRA         = ' '
  
  let $DB_COUNTRY_NM_FORMAT   = 'USA'
  let $DB_NAME_Prefix = ' '
  let $DB_NAME_Suffix = ' '
  let $DB_NAME_Royal_Prefix = ' '
  let $DB_NAME_Royal_Suffix = ' '
  let $DB_NAME_title = ' '
  let $DB_PREF_FIRST_NAME = ' '
  let $DB_PARTNER_LAST_NAME = ' '
  let $DB_PARTNER_ROY_PREFIX = ' '
  let $DB_LAST_NAME_PREF_NLD = ' '
  let $DB_SECOND_LAST_NAME = ' '
  let $DB_SECOND_LAST_SRCH = ' '
  let #comma = instr($dp_name,',',1)
  if #comma = 0
    let $DB_NAME_INITIALS    = ' '
    let $DB_LAST_NAME_SRCH   = ' '
    let $DB_FIRST_NAME_SRCH  = ' '
    let $DB_LAST_NAME        = ' '
    let $DB_FIRST_NAME       = ' '
    let $DB_MIDDLE_NAME      = ' '
  else
    let $DB_NAME_INITIALS    = ' '
    let $DB_LAST_NAME_SRCH   = ' '
    let $DB_FIRST_NAME_SRCH  = ' '
    let $DB_LAST_NAME        = ' '
    let $DB_FIRST_NAME       = ' '
    let $DB_MIDDLE_NAME      = ' '
    let $DB_NAME_INITIALS = substr($dp_name,1,1)
    let $DB_NAME_INITIALS = $DB_NAME_INITIALS || substr($dp_name,#comma + 1,1)  
  
    let $DB_LAST_NAME     = substr($dp_name,1,#comma - 1)
    let #place = instr($DB_LAST_NAME,' ',1)
    if #place <> 0
      let $DB_LAST_NAME = substr($DB_LAST_NAME,1,#place - 1)
    end-if  
    
    let $DB_FIRST_NAME = substr($dp_name,#comma+1,30 - #comma)
    let $DB_FIRST_NAME_ALL = substr($dp_name,#comma+1,30 - #comma)
    let #place = instr($DB_FIRST_NAME_ALL,' ',1)
    if #place <> 0
      let $DB_FIRST_NAME = substr($DB_FIRST_NAME_ALL,1,#place - 1)
      let $DB_MIDDLE_NAME = substr($DB_FIRST_NAME_ALL,#place + 1,30 - #place)
    end-if  

    let $DB_LAST_NAME_SRCH  = upper($DB_LAST_NAME)
    let $DB_FIRST_NAME_SRCH = upper($DB_FIRST_NAME)
  end-if
  LET $DB_ADDR_FIELD1 = ' '
  LET $DB_ADDR_FIELD2 = ' '
  LET $DB_ADDR_FIELD3 = ' '
  LET $DB_DEPBEN_RIDER_FLG = 'N'
  LET $DB_GVT_FEHB_IND = 'N'
  LET $DB_GVT_DEP_BENEF_PLAN = ' '
  LET $DB_SAME_PHONE_EMPL = 'Y'
  LET $DB_PHONE_TYPE = 'HOME'
  LET $DB_ADDRESS_TYPE = 'HOME'
  LET $DB_DEP_ELIGIBLE_UK = 'N'
  LET $DB_DEP_ADOPTED_UK = 'N'
  LET $DB_DEP_ADOPTION_DT_UK = ''
  LET $DB_DEP_CERTIFICATE_UK = 'N'
  LET $DB_FP_DEPEND_EMPLID = ' '
  LET $DB_FP_STAT_FONC = 'N'
  LET $DB_FP_EMPLOYER_NAME = ' '
  LET $DB_FP_SAME_PUBL_SCE = 'N'
  LET $DB_LAST_UPDATE_DATE = datenow()
  


! If Dependent is not 19 set student and disabled flag to blanks
    do Convert-To-DTU-Date($DB_BIRTHDATE, $dtu_birthdate)
    do Convert-To-DTU-Date($event_dt, $dtu_event_dt)
    let $wkDate1    = strtodate($dtu_birthdate,{DTUDateFormat})
    let $wkDate2    = strtodate($dtu_event_dt,{DTUDateFormat})     ! DXS, had hard-coded date as '2005-01-01'.
    let #dtu_years  = round(datediff($wkDate2,$wkDate1,'year'),1)  ! using event_dt now
    #debuga show '$wkDate1 ' $wkDate1
    #debuga show '$wkDate2 ' $wkDate2
    #debuga show 'emplid ' $oe_emplid
    #debuga show '$dp_name ' $dp_name
    #debuga display 'DTU years : ' noline
    #debuga display #dtu_years
    if (#dtu_years < 19 and ($DB_STUDENT = 'Y' or $DB_DISABLED = 'Y'))
      let $DB_STUDENT             = 'N'
      let $DB_DISABLED            = 'N'
     print 'Flag removed since depndt < 19' (+1,{col2})
	 print $oe_emplid  (,{col3})
     evaluate $dependent_status
	 when = 'C'
	 print $dependentid  (,{col4})
	 break
	 when-other
	 print $new_dependent (,{col4})
	 end-evaluate
	 print $dp_name   (, {col5})
	end-if
	if (#dtu_years >= 19 and #dtu_years < 24 and $DB_STUDENT = 'N' and $DB_DISABLED = 'N')
      let $DB_STUDENT             = 'Y'
     print 'Student flag set, age between 19 and 23' (+1,{col2})
	 print $oe_emplid  (,{col3})
     evaluate $dependent_status
	 when = 'C'
	 print $dependentid  (,{col4})
	 break
	 when-other
	 print $new_dependent (,{col4})
	 end-evaluate
	 print $dp_name   (, {col5})
   	end-if
    #ifdef debuga
    display $dependentid
    display $new_dependent
   display 'Birth date: '
   display $dp_birth_date
   display 'Age:        '
   display #dtu_years
   display 'Student:'
   display $DB_STUDENT
   display 'Disabled:'
   display $DB_DISABLED
   #end-if

   #debuga show '$dependent_status ' $dependent_status

   if $dependent_status = 'C'
        let $DB_DEPENDENT_BENEF = $dependentid

	#debuga show 'Doing Update-Dependent-Benef-Record'
        do Update-Dependent-Benef-Record

	#debuga show 'Doing Get-National-ID'
        do Get-National-ID
        
	if $Found_NID = 'N'
             let $DB_NATIONAL_ID = ' '
	     #debuga show 'Doing Insert-Dep-Benef-NID-Record'
             do Insert-Dep-Benef-NID-Record
        end-if

        if $Found_NID = 'Y'
            #debuga show '&DB_NID : ' $DB_NATIONAL_ID
            if $DB_NATIONAL_ID = ''
              #debuga show '&DB_NID : ' $DB_NATIONAL_ID
              let $DB_NATIONAL_ID = ' '
            end-if
	    #debuga show 'Doing Update-Dep-Benef-NID-Record'
            do Update-Dep-Benef-NID-Record
        end-if
	#debugA display 'Record Changed: '
        #debugA do Display-Dependent-Benef-Fields
   end-if

   if $dependent_status = 'A'
      #debuga show 'Doing find-National-ID'
      do find-National-ID

      if $exist_dep = 'Y'
        let $DB_DEPENDENT_BENEF = $dependentid
	#debuga show 'Doing Update-Dependent-Benef-Record'
        do Update-Dependent-Benef-Record
	#debuga show 'Doing Get-National-ID'
        do Get-National-ID
        
	if $Found_NID = 'N'
             let $DB_NATIONAL_ID = ' '
	     #debuga show 'Doing Insert-Dep-Benef-NID-Record'
             do Insert-Dep-Benef-NID-Record
        end-if
        
	if $Found_NID = 'Y'
	     #debuga show 'Doing Update-Dep-Benef-NID-Record'
             do Update-Dep-Benef-NID-Record
        end-if
        
      else  
        let $new_dependent = TO_CHAR(#new_dependent)
        let $DB_DEPENDENT_BENEF = $new_dependent
	#debuga show 'Doing Insert-Dependent-Benef-Record'
        do Insert-Dependent-Benef-Record
	#debugA display 'Add NID ',$dp_ssn
          if $DB_NATIONAL_ID = ''
             let $DB_NATIONAL_ID = ' '
          else 
             let $DB_NATIONAL_ID = $dp_ssn
          end-if
	    #debuga show 'Doing Insert-Dep-Benef-NID-Record'
            do Insert-Dep-Benef-NID-Record
        add 1 to #new_dependent
        let $new_dependent = TO_CHAR(#new_dependent)
      end-if  
    end-if

    add 1 to #benef_ctr
end-procedure  !Process-Dependent-Benef


!-----------------------------------------------------------------------
begin-procedure Update-Dependent-Benef-Record
!-----------------------------------------------------------------------

  let $Proced-Name = 'Update-Dependent-Benef-Record'
  #debugA display $Proced-Name

  #debugA Display 'Record Image at update time : '
  #debugA display ' '
  #debugA do Display-Dependent-Benef-Fields

  let $sql-statement = 'GEXBN617.SQR,Update-Dependent-Benef-Record,UPDATE,PS_DEPENDENT_BENEF'

begin-SQL  on-error=SQL-Error-Update-Dependent-Benef

UPDATE PS_DEPENDENT_BENEF
SET RELATIONSHIP        = $dp_relationship,
    NAME                = $dp_name,
    SEX                 = $dp_sex,
    DEP_BENEF_TYPE      = $DB_DEP_BENEF_TYPE,
    BIRTHDATE           = $dp_birth_date,
    STUDENT             = $DB_student,
    DISABLED            = $DB_disabled,
    NAME_INITIALS       = $DB_NAME_INITIALS,
    LAST_NAME           = $DB_LAST_NAME, 
    FIRST_NAME          = $DB_FIRST_NAME, 
    MIDDLE_NAME         = $DB_MIDDLE_NAME, 
    LAST_NAME_SRCH      = $DB_LAST_NAME_SRCH,  
    FIRST_NAME_SRCH     = $DB_FIRST_NAME_SRCH 
Where     EMPLID            = $oe_emplid
  and     DEPENDENT_BENEF   = $dependentid

end-SQL
    add 1 to #update_ctr

end-procedure  !Update-Dependent-Benef-Record


!-----------------------------------------------------------------------
begin-procedure SQL-Error-Update-Dependent-Benef
!-----------------------------------------------------------------------

  let $Proced-Name = 'SQL-Error-Update-Dependent-Benef'
  #debugA display $Proced-Name

   Display 'Record Image at error time : '
   display ' '
   do Display-Dependent-Benef-Fields
   do SQL-Error

end-procedure  !SQL-Error-Update-Dependent-Benef


!-----------------------------------------------------------------------
begin-procedure Insert-Dependent-Benef-Record
!-----------------------------------------------------------------------

  let $Proced-Name = 'Insert-Dependent-Benef-Record'
  #debugA display $Proced-Name

  #debugA Display 'Record Image at insert time : '
  #debugA display ' '
  #debugA do Display-Dependent-Benef-Fields

  let $sql-statement = 'GEXBN617.SQR,Insert-Dependent-Benef-Record,INSERT,PS_DEPENDENT_BENEF'

begin-SQL  on-error=SQL-Error-Insert-Dependent-Benef
INSERT INTO PS_DEPENDENT_BENEF
          (
          EMPLID,                         ! 1
          DEPENDENT_BENEF,                ! 2
          COUNTRY_NM_FORMAT,
          NAME,                           ! 3
          NAME_INITIALS,
          NAME_PREFIX,
          NAME_SUFFIX,
          NAME_ROYAL_PREFIX,
          NAME_ROYAL_SUFFIX,
          NAME_TITLE,
          LAST_NAME_SRCH,
          FIRST_NAME_SRCH,
          LAST_NAME,
          FIRST_NAME,
          MIDDLE_NAME,
          SECOND_LAST_NAME,
          SECOND_LAST_SRCH,
          NAME_AC,                        ! 4
          PREF_FIRST_NAME,
          PARTNER_LAST_NAME,
          PARTNER_ROY_PREFIX,
          LAST_NAME_PREF_NLD,
          SAME_ADDRESS_EMPL,              ! 5
          COUNTRY,                        ! 6
          ADDRESS1,                       ! 7
          ADDRESS2,                       ! 8
          ADDRESS3,                       ! 9
          ADDRESS4,                       !10
          CITY,                           !11
          NUM1,                           !12
          NUM2,                           !13
          HOUSE_TYPE,                     !14
          ADDR_FIELD1,
          ADDR_FIELD2,
          ADDR_FIELD3,
          COUNTY,                         !15
          STATE,                          !16
          POSTAL,                         !17
          GEO_CODE,                       !18
          IN_CITY_LIMIT,                  !19
          COUNTRY_CODE,                   !20
          PHONE,                          !21
          RELATIONSHIP,                   !22
          DEP_BENEF_TYPE,                 !23
          MAR_STATUS,                     !24
          MAR_STATUS_DT,                  !25
          SEX,                            !26
          BIRTHDATE,                      !27
          BIRTHPLACE,                     !28
          BIRTHSTATE,                     !29
          BIRTHCOUNTRY,                   !30
          OCCUPATION,                     !31
          DT_OF_DEATH,                    !32
          STUDENT,                        !33
          DISABLED,                       !34
          MEDICARE_ENTLD_DT,              !35
          COBRA_EVENT_DT,                 !36
          CSB_ELIG,                       !37
!          BIRTH_STATE_FRA,                !38
!          BIRTH_COUNTRY_FRA,              !39
          COBRA_ACTION,                   !40
          COBRA_EMPLID,                   !41
          STUDENT_STATUS_DT,              !42
          SMOKER,                         !43,
          DEPBEN_RIDER_FLG,
          GVT_FEHB_IND,
          GVT_DEP_BENEF_PLAN,
          SAME_PHONE_EMPL,
          PHONE_TYPE,
          ADDRESS_TYPE,
          DEP_ELIGIBLE_UK,
          DEP_ADOPTED_UK,
          DEP_ADOPTION_DT_UK,
          DEP_CERTIFICATE_UK,
          FP_DEPEND_EMPLID,
          FP_STAT_FONC,
          FP_EMPLOYER_NAME,
          FP_SAME_PUBL_SCE,
          LAST_UPDATE_DATE
          )
values
          (
          $oe_emplid,                    ! 1
          $DB_DEPENDENT_BENEF,           ! 2
          $DB_COUNTRY_NM_FORMAT,
          $DB_NAME,                      ! 3
          $DB_NAME_INITIALS,
          $DB_NAME_PREFIX,
          $DB_NAME_SUFFIX,
          $DB_NAME_ROYAL_PREFIX,
          $DB_NAME_ROYAL_SUFFIX,
          $DB_NAME_TITLE,
          $DB_LAST_NAME_SRCH,
          $DB_FIRST_NAME_SRCH,
          $DB_LAST_NAME,
          $DB_FIRST_NAME,
          $DB_MIDDLE_NAME,
          $DB_SECOND_LAST_NAME,
          $DB_SECOND_LAST_SRCH,
          $DB_NAME_AC,                   ! 4
          $DB_PREF_FIRST_NAME,
          $DB_PARTNER_LAST_NAME,
          $DB_PARTNER_ROY_PREFIX,
          $DB_LAST_NAME_PREF_NLD,
          $DB_SAME_ADDRESS_EMPL,         ! 5
          $DB_COUNTRY,                   ! 6
          $DB_ADDRESS1,                  ! 7
          $DB_ADDRESS2,                  ! 8
          $DB_ADDRESS3,                  ! 9
          $DB_ADDRESS4,                  !10
          $DB_CITY,                      !11
          $DB_NUM1,                      !12
          $DB_NUM2,                      !13
          $DB_HOUSE_TYPE,                !14
          $DB_ADDR_FIELD1,
          $DB_ADDR_FIELD2,
          $DB_ADDR_FIELD3,
          $DB_COUNTY,                    !15
          $DB_STATE,                     !16
          $DB_POSTAL,                    !17
          $DB_GEO_CODE,                  !18
          $DB_IN_CITY_LIMIT,             !19
          $DB_COUNTRY_CODE,              !20
          $DB_PHONE,                     !21
          $DB_RELATIONSHIP,              !22
          $DB_DEP_BENEF_TYPE,            !23
          $DB_MAR_STATUS,                !24
          $DB_MAR_STATUS_DT,             !25
          $DB_SEX,                       !26
          $DB_BIRTHDATE,                 !27
          $DB_BIRTHPLACE,                !28
          $DB_BIRTHSTATE,                !29
          $DB_BIRTHCOUNTRY,              !30
          $DB_OCCUPATION,                !31
          $DB_DT_OF_DEATH,               !32
          $DB_STUDENT,                   !33
          $DB_DISABLED,                  !34
          $DB_MEDICARE_ENTLD_DT,         !35
          $DB_COBRA_EVENT_DT,            !36
          $DB_CSB_ELIG,                  !37
!          $DB_BIRTH_STATE_FRA,           !38
!          $DB_BIRTH_COUNTRY_FRA,         !39
          $DB_COBRA_ACTION,              !40
          $DB_COBRA_EMPLID,              !41
          $DB_STUDENT_STATUS_DT,         !42
          $DB_SMOKER,                    !43
          $DB_DEPBEN_RIDER_FLG,
          $DB_GVT_FEHB_IND,
          $DB_GVT_DEP_BENEF_PLAN,
          $DB_SAME_PHONE_EMPL,
          $DB_PHONE_TYPE,
          $DB_ADDRESS_TYPE,
          $DB_DEP_ELIGIBLE_UK,
          $DB_DEP_ADOPTED_UK,
          $DB_DEP_ADOPTION_DT_UK,
          $DB_DEP_CERTIFICATE_UK,
          $DB_FP_DEPEND_EMPLID,
          $DB_FP_STAT_FONC,
          $DB_FP_EMPLOYER_NAME,
          $DB_FP_SAME_PUBL_SCE,
          $DB_LAST_UPDATE_DATE
          )
end-SQL

   add 1 to #insert_Ctr

end-procedure  !Insert-Dependent-Benef-Record


!-----------------------------------------------------------------------
begin-procedure SQL-Error-Insert-Dependent-Benef
!-----------------------------------------------------------------------

  let $Proced-Name = 'SQL-Error-Insert-Dependent-Benef'
  #debugA display $Proced-Name

   Display 'Record Image at error time : '
   display ' '
   do Display-Dependent-Benef-Fields
   do SQL-Error

end-procedure  !SQL-Error-Insert-Dependent-Benef


!-----------------------------------------------------------------------
begin-procedure Display-Dependent-Benef-Fields
!-----------------------------------------------------------------------

  let $Proced-Name = 'Display-Dependent-Benef-Fields'
  #debugA display $Proced-Name

   display ' ' noline
   display '   Record # [' noline
   display  #Rec_Ctr  noline
   display ']'
   display ' '

   display 'EMPLID             [' noline
   display $oe_emplid             noline
   display ']'
   display 'DEPENDENT_BENEF    [' noline
   display $DB_DEPENDENT_BENEF    noline
   display ']'
   display 'NAME               [' noline
   display $DB_NAME               noline
   display ']'
   display 'NAME_AC            [' noline
   display $DB_NAME_AC            noline
   display ']'
   display 'SAME_ADDRESS_EMPL  [' noline
   display $DB_SAME_ADDRESS_EMPL  noline
   display ']'
   display 'COUNTRY            [' noline
   display $DB_COUNTRY            noline
   display ']'
   display 'ADDRESS1           [' noline
   display $DB_ADDRESS1           noline
   display ']'
   display 'ADDRESS2           [' noline
   display $DB_ADDRESS2           noline
   display ']'
   display 'ADDRESS3           [' noline
   display $DB_ADDRESS3           noline
   display ']'
   display 'ADDRESS4           [' noline
   display $DB_ADDRESS4           noline
   display ']'
   display 'CITY               [' noline
   display $DB_CITY               noline
   display ']'
   display 'NUM1               [' noline
   display $DB_NUM1               noline
   display ']'
   display 'NUM2               [' noline
   display $DB_NUM2               noline
   display ']'
   display 'HOUSE_TYPE         [' noline
   display $DB_HOUSE_TYPE         noline
   display ']'
   display 'COUNTY             [' noline
   display $DB_COUNTY             noline
   display ']'
   display 'STATE              [' noline
   display $DB_STATE              noline
   display ']'
   display 'POSTAL             [' noline
   display $DB_POSTAL             noline
   display ']'
   display 'GEO_CODE           [' noline
   display $DB_GEO_CODE           noline
   display ']'
   display 'IN_CITY_LIMIT      [' noline
   display $DB_IN_CITY_LIMIT      noline
   display ']'
   display 'COUNTRY_CODE       [' noline
   display $DB_COUNTRY_CODE       noline
   display ']'
   display 'PHONE              [' noline
   display $DB_PHONE              noline
   display ']'
   display 'RELATIONSHIP       [' noline
   display $DB_RELATIONSHIP       noline
   display ']'
   display 'DEP_BENEF_TYPE     [' noline
   display $DB_DEP_BENEF_TYPE     noline
   display ']'
   display 'MAR_STATUS         [' noline
   display $DB_MAR_STATUS         noline
   display ']'
   display 'MAR_STATUS_DT      [' noline
   display $DB_MAR_STATUS_DT      noline
   display ']'
   display 'SEX                [' noline
   display $DB_SEX                noline
   display ']'
   display 'BIRTHDATE          [' noline
   display $DB_BIRTHDATE          noline
   display ']'
   display 'BIRTHPLACE         [' noline
   display $DB_BIRTHPLACE         noline
   display ']'
   display 'BIRTHSTATE         [' noline
   display $DB_BIRTHSTATE         noline
   display ']'
   display 'BIRTHCOUNTRY       [' noline
   display $DB_BIRTHCOUNTRY       noline
   display ']'
   display 'OCCUPATION         [' noline
   display $DB_OCCUPATION         noline
   display ']'
   display 'DT_OF_DEATH        [' noline
   display $DB_DT_OF_DEATH        noline
   display ']'
   display 'STUDENT            [' noline
   display $DB_STUDENT            noline
   display ']'
   display 'DISABLED           [' noline
   display $DB_DISABLED           noline
   display ']'
   display 'MEDICARE_ENTLD_DT  [' noline
   display $DB_MEDICARE_ENTLD_DT  noline
   display ']'
   display 'COBRA_EVENT_DT     [' noline
   display $DB_COBRA_EVENT_DT     noline
   display ']'
   display 'CSB_ELIG           [' noline
   display $DB_CSB_ELIG           noline
   display ']'
   display 'BIRTH_STATE_FRA    [' noline
   display $DB_BIRTH_STATE_FRA    noline
   display ']'
   display 'BIRTH_COUNTRY_FRA  [' noline
   display $DB_BIRTH_COUNTRY_FRA  noline
   display ']'
   display 'COBRA_ACTION       [' noline
   display $DB_COBRA_ACTION       noline
   display ']'
   display 'COBRA_EMPLID       [' noline
   display $DB_COBRA_EMPLID       noline
   display ']'
   display 'STUDENT_STATUS_DT  [' noline
   display $DB_STUDENT_STATUS_DT  noline
   display ']'
   display 'SMOKER             [' noline
   display $DB_SMOKER             noline
   display ']'

   display ' '

end-procedure  !Display-Dependent-Benef-Fields


!-----------------------------------------------------------------------
begin-procedure Display-Update-Dep-Benef-Fields
!-----------------------------------------------------------------------

  let $Proced-Name = 'Display-Update-Dep-Benef-Fields'
  #debugA display $Proced-Name

   display ' '
   display '   Record # [' noline
   display  #Rec_Ctr  noline
   display ']'
   display ' '

   display 'EMPLID             [' noline
   display $oe_emplid             noline
   display ']'
   display 'DEPENDENT_BENEF    [' noline
   display $DB_DEPENDENT_BENEF    noline
   display ']'
   display 'NAME               [' noline
   display $DB_NAME               noline
   display ']' noline
   display '[' noline
   display $DB_NAME               noline
   display ']'
   display 'NAME_AC            [' noline
   display $DB_NAME_AC            noline
   display ']'
   display 'SAME_ADDRESS_EMPL  [' noline
   display $DB_SAME_ADDRESS_EMPL  noline
   display ']' noline
   display '[' noline
   display $DB_SAME_ADDRESS_EMPL  noline
   display ']'

   display 'COUNTRY            [' noline
   display $DB_COUNTRY            noline
   display ']' noline
   display '[' noline
   display $DB_COUNTRY            noline
   display ']'

   display 'ADDRESS1           [' noline
   display $DB_ADDRESS1           noline
   display ']' noline
   display '[' noline
   display $DB_ADDRESS1           noline
   display ']'

   display 'ADDRESS2           [' noline
   display $DB_ADDRESS2           noline
   display ']' noline
   display '[' noline
   display $DB_ADDRESS2           noline
   display ']'

   display 'ADDRESS3           [' noline
   display $DB_ADDRESS3           noline
   display ']'
   display 'ADDRESS4           [' noline
   display $DB_ADDRESS4           noline
   display ']'
   display 'CITY               [' noline
   display $DB_CITY               noline
   display ']' noline
   display '[' noline
   display $DB_CITY               noline
   display ']'

   display 'NUM1               [' noline
   display $DB_NUM1               noline
   display ']'
   display 'NUM2               [' noline
   display $DB_NUM2               noline
   display ']'
   display 'HOUSE_TYPE         [' noline
   display $DB_HOUSE_TYPE         noline
   display ']'
   display 'COUNTY             [' noline
   display $DB_COUNTY             noline
   display ']'
   display 'STATE              [' noline
   display $DB_STATE              noline
   display ']' noline
   display '[' noline
   display $DB_STATE              noline
   display ']'

   display 'POSTAL             [' noline
   display $DB_POSTAL             noline
   display ']' noline
   display '[' noline
   display $DB_POSTAL             noline
   display ']'

   display 'GEO_CODE           [' noline
   display $DB_GEO_CODE           noline
   display ']'
   display 'IN_CITY_LIMIT      [' noline
   display $DB_IN_CITY_LIMIT      noline
   display ']'
   display 'COUNTRY_CODE       [' noline
   display $DB_COUNTRY_CODE       noline
   display ']'
   display 'PHONE              [' noline
   display $DB_PHONE              noline
   display ']' noline
   display '[' noline
   display $DB_PHONE              noline
   display ']'

   display 'RELATIONSHIP       [' noline
   display $DB_RELATIONSHIP       noline
   display ']' noline
   display '[' noline
   display $DB_RELATIONSHIP       noline
   display ']'

   display 'DEP_BENEF_TYPE     [' noline
   display $DB_DEP_BENEF_TYPE     noline
   display ']' noline
   display '[' noline
   display $DB_DEP_BENEF_TYPE     noline
   display ']'

   display 'MAR_STATUS         [' noline
   display $DB_MAR_STATUS         noline
   display ']' noline
   display '[' noline
   display $DB_MAR_STATUS         noline
   display ']'

   display 'MAR_STATUS_DT      [' noline
   display $DB_MAR_STATUS_DT      noline
   display ']'
   display 'SEX                [' noline
   display $DB_SEX                noline
   display ']' noline
   display '[' noline
   display $DB_SEX                noline
   display ']'

   display 'BIRTHDATE          [' noline
   display $DB_BIRTHDATE          noline
   display ']' noline
   display '[' noline
   display $DB_BIRTHDATE_DSP      noline
   display ']'

   display 'BIRTHPLACE         [' noline
   display $DB_BIRTHPLACE         noline
   display ']'
   display 'BIRTHSTATE         [' noline
   display $DB_BIRTHSTATE         noline
   display ']'
   display 'BIRTHCOUNTRY       [' noline
   display $DB_BIRTHCOUNTRY       noline
   display ']'
   display 'OCCUPATION         [' noline
   display $DB_OCCUPATION         noline
   display ']'
   display 'DT_OF_DEATH        [' noline
   display $DB_DT_OF_DEATH        noline
   display ']'
   display 'STUDENT            [' noline
   display $DB_STUDENT            noline
   display ']'
   display 'DISABLED           [' noline
   display $DB_DISABLED           noline
   display ']'
   display 'MEDICARE_ENTLD_DT  [' noline
   display $DB_MEDICARE_ENTLD_DT  noline
   display ']'
   display 'COBRA_EVENT_DT     [' noline
   display $DB_COBRA_EVENT_DT     noline
   display ']'
   display 'CSB_ELIG           [' noline
   display $DB_CSB_ELIG           noline
   display ']'
   display 'BIRTH_STATE_FRA    [' noline
   display $DB_BIRTH_STATE_FRA    noline
   display ']'
   display 'BIRTH_COUNTRY_FRA  [' noline
   display $DB_BIRTH_COUNTRY_FRA  noline
   display ']'
   display 'COBRA_ACTION       [' noline
   display $DB_COBRA_ACTION       noline
   display ']'
   display 'COBRA_EMPLID       [' noline
   display $DB_COBRA_EMPLID       noline
   display ']'
   display 'STUDENT_STATUS_DT  [' noline
   display $DB_STUDENT_STATUS_DT  noline
   display ']'
   display 'SMOKER             [' noline
   display $DB_SMOKER             noline
   display ']'

   display ' '

end-procedure  !Display-Update-Dep-Benef-Fields


!-----------------------------------------------------------------------
begin-procedure Get-National-ID
!-----------------------------------------------------------------------

  let $Proced-Name = 'Get-National-ID'
  #debugA display $Proced-Name

  let $Found_NID = 'N'
  #debuga show '<' $oe_emplid '><' $dependentid '>'

begin-Select
DBNID.EMPLID
DBNID.DEPENDENT_BENEF
DBNID.National_ID

  let $Found_NID = 'Y'

from  PS_DEP_BENEF_NID  DBNID
Where     DBNID.EMPLID            = $oe_emplid
  and     DBNID.DEPENDENT_BENEF   = $dependentid
  
end-Select

end-procedure   !Get-National-ID


!-----------------------------------------------------------------------
begin-procedure Find-National-ID
!-----------------------------------------------------------------------

  let $Proced-Name = 'Find-National-ID'
  #debugA display $Proced-Name

  let $exist_dep = 'N'
  #debuga show '<' $oe_emplid '><' $DB_NATIONAL_ID '>'

begin-Select
DBNIDD.EMPLID
DBNIDD.DEPENDENT_BENEF
DBNIDD.National_ID

  let $dependentid = &DBNIDD.DEPENDENT_BENEF
  let $exist_dep = 'Y'

from  PS_DEP_BENEF_NID  DBNIDD
Where     DBNIDD.EMPLID            = $oe_emplid
   and DBNIDD.National_ID = $DB_NATIONAL_ID
end-Select

end-procedure   !find-National-ID


!-----------------------------------------------------------------------
begin-procedure Update-Dep-Benef-NID-Record
!-----------------------------------------------------------------------

  let $Proced-Name = 'Update-Dep-Benef-NID-Record'
  #debugA display $Proced-Name

  #debugA Display 'Record Image at update time : '
  #debugA display ' '
  #debugA do Display-Dep-Benef-NID-Fields

  let $sql-statement = 'GEXBN617.SQR,Update-Dep-Benef-NID-Record,UPDATE,PS_DEP_BENEF_NID'
  #debuga show '$oe_emplid : ' $oe_emplid
  #debuga show '$DB_DEPENDENT_BENEF : ' $DB_DEPENDENT_BENEF
  #debuga show '$DB_NATIONAL_ID :   ' $DB_NATIONAL_ID

begin-SQL  on-error=SQL-Error-Update-Dep-Benef-NID

UPDATE PS_DEP_BENEF_NID
SET NATIONAL_ID        =  $DB_NATIONAL_ID
Where     EMPLID            = $oe_emplid
  and     DEPENDENT_BENEF   = $DB_DEPENDENT_BENEF

end-SQL
    add 1 to #update_ctr
end-procedure  !Update-Dep-Benef-NID-Record


!-----------------------------------------------------------------------
begin-procedure SQL-Error-Update-Dep-Benef-NID
!-----------------------------------------------------------------------

  let $Proced-Name = 'SQL-Error-Update-Dep-Benef-NID'
  #debugA display $Proced-Name

   Display 'Record Image at error time : '
   display ' '
   do Display-Dep-Benef-NID-Fields
   do SQL-Error

end-procedure  !SQL-Error-Update-Dep-Benef-NID


!-----------------------------------------------------------------------
begin-procedure Insert-Dep-Benef-NID-Record
!-----------------------------------------------------------------------

  let $Proced-Name = 'Insert-Dep-Benef-NID-Record'
  #debugA display $Proced-Name

  #debugA Display 'Record Image at insert time : '
  #debugA display ' '
  #debugA do Display-Dep-Benef-NID-Fields

  let $sql-statement = 'GEXBN617.SQR,Insert-Dep-Benef-NID-Record,INSERT,PS_DEP_BENEF_NID'

begin-SQL  on-error=SQL-Error-Insert-Dep-Benef-NID
INSERT INTO PS_DEP_BENEF_NID
          (
          EMPLID,                        ! 1
          DEPENDENT_BENEF,               ! 2
          COUNTRY,                       ! 3
          NATIONAL_ID_TYPE,              ! 4
          NATIONAL_ID,                   ! 5
          SSN_KEY_FRA,                   ! 6
          PRIMARY_NID,
          TAX_REF_ID_SGP
          )
values
          (
          $oe_emplid,                    ! 1
          $DB_DEPENDENT_BENEF,           ! 2
          $DB_COUNTRY,                   ! 3
          $DB_NATIONAL_ID_TYPE,          ! 4
          $DB_NATIONAL_ID,               ! 5
          $DB_SSN_KEY_FRA,               ! 6
          'Y',
          'N'
          )
end-SQL

    add 1 to #insert_Ctr
end-procedure  !Insert-Dep-Benef-NID-Record


!-----------------------------------------------------------------------
begin-procedure SQL-Error-Insert-Dep-Benef-NID
!-----------------------------------------------------------------------

  let $Proced-Name = 'SQL-Error-Insert-Dep-Benef-NID'
  #debugA display $Proced-Name

   Display 'Record Image at error time : '
   display ' '
   do Display-Dep-Benef-NID-Fields
   do SQL-Error

end-procedure  !SQL-Error-Insert-Dep-Benef-NID


!-----------------------------------------------------------------------
begin-procedure Display-Dep-Benef-NID-Fields
!-----------------------------------------------------------------------

  let $Proced-Name = 'Display-Dep-Benef-NID-Fields'
  #debugA display $Proced-Name

   display ' ' noline
   display '   Record # [' noline
   display  #Rec_Ctr  noline
   display ']'
   display ' '

   display 'EMPLID             [' noline
   display $oe_emplid             noline
   display ']'
   display 'DEPENDENT_BENEF    [' noline
   display $DB_DEPENDENT_BENEF    noline
   display ']'
   display 'COUNTRY            [' noline
   display $DB_COUNTRY            noline
   display ']'
   display 'NATIONAL_ID_TYPE   [' noline
   display $DB_NATIONAL_ID_TYPE   noline
   display ']'
   display 'NATIONAL_ID        [' noline
   display $DB_NATIONAL_ID        noline
   display ']'
   display 'SSN_KEY_FRA        [' noline
   display $DB_SSN_KEY_FRA        noline
   display ']'

   display ' '

end-procedure  !Display-Dep-Benef-NID-Fields


!-----------------------------------------------------------------------
begin-procedure Check-For-Existing-New-Dependents
!-----------------------------------------------------------------------

  let $Proced-Name = 'Check-For-Existing-New-Dependents'
  #debugA display $Proced-Name

  #debuga show '<' $oe_emplid '><' #new_dependent '>'

begin-Select
'X'

       let $new_dependent_records_exist = 'Y'

from  PS_DEPENDENT_BENEF
Where     EMPLID            = $oe_emplid
  and     DEPENDENT_BENEF   >= #new_dependent
end-Select

end-procedure   !Check-For-Existing-New-Dependents


!-----------------------------------------------------------------------
begin-procedure Delete-Existing-New-Dependents
!-----------------------------------------------------------------------

  let $Proced-Name = 'Delete-Existing-New-Dependents'
  #debugA display $Proced-Name

  #debugA Display 'Dependents deleted for emplID : '
  #debugA display ' '
  #debugA display $oe_emplid

  #debuga show '#new_dependent' #new_dependent

  let $sql-statement = 'GEXBN617.SQR,Delete-Existing-New-Dependents,DELETE,PS_DEPENDENT_BENEF'

begin-SQL  on-error=SQL-Error-Delete-Existing-New-Dependents

DELETE FROM PS_DEPENDENT_BENEF
Where     EMPLID            = $oe_emplid
  and     DEPENDENT_BENEF   >= #new_dependent

end-SQL

end-procedure  !Delete-Existing-New-Dependents


!-----------------------------------------------------------------------
begin-procedure SQL-Error-Delete-Existing-New-Dependents
!-----------------------------------------------------------------------

  let $Proced-Name = 'SQL-Error-Delete-Existing-New-Dependents'
  #debugA display $Proced-Name

   do SQL-Error

end-procedure  !SQL-Error-Delete-Existing-New-Dependents


!-----------------------------------------------------------------------
begin-procedure Check-For-Existing-New-Dependents-NID-Record
!-----------------------------------------------------------------------
  let $Proced-Name = 'Check-For-Existing-New-Dependents-NID-Record'
  #debugA display $Proced-Name
   #debuga show '<' $oe_emplid '><' #new_dependent '>'

begin-Select
'Y'

       let $new_dependent_nid_records_exist = 'Y'

from  PS_DEP_BENEF_NID
Where     EMPLID            = $oe_emplid
  and     DEPENDENT_BENEF   >= #new_dependent
end-Select

end-procedure   !Check-For-Existing-New-Dependents-NID-Record


!-----------------------------------------------------------------------
begin-procedure Delete-Existing-New-Dependents-NID-Record
!-----------------------------------------------------------------------

  let $Proced-Name = 'Delete-Existing-New-Dependents-NID-Record'
  #debugA display $Proced-Name

  #debugA Display 'Dependents NID deleted for emplID : '
  #debugA display ' '
  #debugA display $oe_emplid

  #debuga show '#new_dependent '  #new_dependent

  let $sql-statement = 'GEXBN617.SQR,Delete-Existing-New-Dependents-NID-Record,DELETE,PS_DEP_BENEF_NID'

begin-SQL  on-error=SQL-Error-Delete-Existing-New-Dependents-NID-Record

DELETE FROM PS_DEP_BENEF_NID
Where     EMPLID            = $oe_emplid
  and     DEPENDENT_BENEF   >= #new_dependent

end-SQL

end-procedure  !Delete-Existing-New-Dependents-NID-Record


!-----------------------------------------------------------------------
begin-procedure SQL-Error-Delete-Existing-New-Dependents-NID-Record
!-----------------------------------------------------------------------

  let $Proced-Name = 'SQL-Error-Delete-Existing-New-Dependents-NID-Record'
  #debugA display $Proced-Name

   do SQL-Error

end-procedure  !SQL-Error-Delete-Existing-New-Dependents-NID-Record



!-----------------------------------------------------------------------

#Include 'stdapi.sqc'    !Update Process API
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date manipulation
#Include 'validdt.sqc'   !Routines for date Validations
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'tranctrl.sqc'  !Commit-Transaction procedure
