!***********************************************************************
! GEXPY660.SQR:                                                        *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 1997-2006 Giant Eagle,Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
! GEXPY660.SQR :                                                       *
!                                                                      *
! Narrative:            This program was cloned from the Query         *
!					      . ITG # 35668            *
!			The program will report FT-PT Measurement      *
!			totals in  an excel spreadsheet on a Monthly   *
!			basis and  email the results		       *
!								       *
!								       *
! #Debug Used:          x                                              *
!								       *
! SQL Tables:           PS_GRIEVANCE,PS_JOB,PS_PERSONAL_DATA,          *
!            		PS_EMPLOYMENT, PS_GRIEV_TYPE_TBL,              *
!            		PS_GEX_DEPT_TBL, PS_GRIEVANCE_STEP             *
!								       *
! Written by:           Rapidigm, Hemal, 04/21/06                      *
!			Modify - Generate 2nd report. Hemal 06/05/06   *	
!								       * 
! Normally Run:         This process need to run on a Monthly basis.   *			       
!                                                                      *
! Control Parms:        Reads the run control table PS_GEX_RUN_CNTL    *
!								       *
!                                                                      *
!***********************************************************************

!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
! INITIALS  DATE        DESCRIPTION OF THE CHANGE                      *
!***********************************************************************
! VENDKXY  07/04/2008  Changes done for SCT 10725793 in 9.0                                                                      *
!                                                                      *
!***********************************************************************
! TCSXRAS  09/05/2014  IS Req 1674: FT PT Measurement Report broken    *
! Ramesh Solai         - Report b.csv to be discontinued.              *
!                      - YTD Wages columns to be removed in a.csv.     *
!                      - Turnover details to be removed in a.csv.      *
!                      - Region-wise subtotals to be removed in a.csv. *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
!#include 'setup02.sqc'   !Printer and Page-Size Initialization (Landscape)

  #define 	#column1 	001
  #define 	#column2 	008
  #define 	#column3 	011
  #define 	#column4 	014
  #define 	#column5 	018
  #define 	#column6 	021
  #define 	#column7 	023
  #define 	#column8 	027
  #define 	#column9 	030
  #define 	#column10	033
  #define 	#column11	040
  #define 	#column12	050
  #define 	#column13	053
  #define 	#column14	056
  #define 	#column15	060
  #define 	#column16	067
  #define 	#column17	072
  #define	#column18	078
  #define	#column19	083
  #define	#column20	092
  #define	#column21	103
  #define	#column22	113  

!***********************************************************************
! Defines Heading of the report
!***********************************************************************
!Begin-Heading 5
!let $ReportID = 'GEXPY660'
!#include 'stdhdg01.sqc'

!***********************************************************************
! Start of Program
!***********************************************************************

Begin-Report

!	Print 'FT-PT Measurement'     (3,1) center			   
!End-Heading


  do Init-DateTime           !datetime.sqc
  do Init-Number             !number.sqc
  do Get-Current-DateTime    !curdttim.sqc
  do Stdapi-Init             !stdapi.sqc
  if isnull($prcs_process_instance)
	!let $Prcs_OprID = 'VENDHSP'
	let $Prcs_Run_Cntl_ID = 'gexpy660'
	let $Prcs_OprID = 'ISDVDXS'
	!let $Prcs_Run_Cntl_ID = '1'
	
  end-if
  
  do Get-Run-Control	     !gexrnctl.sqc  
  
  #debugx show '<' &cur_fy '><' &cur_cal '><' &cur_eom '>'
  #debugx show '<' &prev_fy '><' &prev_cal '><' &prev_eom '>'


  Let $rgn_cd_199_flag='N'	!initalization for printing Subtotals
  Let $rgn_cd_299_flag='N'
  Let $rgn_cd_399_flag='N'
  Let $union_cd_r2_old=' '
  Let #report_num=2

   do Get-FilePath
   do Get-Data 
   do stdapi-term

End-Report


!********************************************************
! Procedure used for getting the filepath from the 
! process scheduler table.
!********************************************************
begin-procedure Get-FilePath
	let $filepath = ''
begin-select
origoutdest	&origoutdest
prcsoutputdir	&prcsoutputdir

	move &origoutdest to $origoutdest
	move &prcsoutputdir to $prcsoutputdir
	

	if rtrim(ltrim($origoutdest,' '),' ') = '' or rtrim(ltrim($origoutdest,' '),' ')='%%Log/Output Directory%%' !VENDKXY Changes as Requested by Paticia Oakley   
	! Process run to web, will not have trailing slash, so add it
	
		let $first_char = substr($prcsoutputdir,1,1)

		if $first_char = '/'
			let $prcsoutputdir = $prcsoutputdir || '/'
		else
			let $prcsoutputdir = $prcsoutputdir || '\'
		end-if
	else
		! Process run to file, so first check if trailing slash is present, if not then add it
		let #len = length($origoutdest)
		let #start = #len - 1
		let $last_char = substr($origoutdest,#start,1)
		if $last_char != '/' or $last_char != '\' 
			let $first_char = substr($origoutdest,1,1)
			if $first_char = '/'
				let $origoutdest = $origoutdest || '/'
			else
				let $origoutdest = $origoutdest || '\'
			end-if
		end-if
	end-if
	!show '$origoutdest::::' $origoutdest !VENDKXY for Testing
	!show '$prcsoutputdir::' $prcsoutputdir !VENDKXY for Testing
	if isblank($origoutdest) or rtrim(ltrim($origoutdest,' '),' ')='%%Log/Output Directory%%' !VENDKXY Changes as Requested by Paticia Oakley
		let $filepath = $prcsoutputdir
	else
		let $filepath = $origoutdest
	end-if

	#debugx show $filepath

from psprcsparms
where prcsinstance = #prcs_process_instance
end-select

	if $filepath = ''
		 Let $filepath='c:\isdvdxs\'  ! DXS, Change this if running via SQRW
	end-if

end-procedure 


!***********************************************************************
!(Report-1/Report-2) Procedure which Creates multiple Reports.
!***********************************************************************
Begin-Procedure Get-Data

        show 'In Get-Data'
	Let $Report_Nm='GEXPY660'
	let #report_num = 2	

	while #report_num >0
		
		if #report_num=1
			let $report-name = $Report_Nm || 'a.csv'
			let $report-heading = $Report_Nm || 'a.csv'
		Else
			let $report-name = $Report_Nm || 'b.csv'	
			let $report-heading = $Report_Nm || 'b.csv'
		End-If		

		#debugx show $report-name 
		#debugx show $report-heading

		let $report-name = $filepath || $report-name  ! 'c:\temp\' 
		
		!Show '$report-name:'$report-name !VENDKXY for Testing

		#debugx show $report-name

		new-report  $report-name

		if #report_num=1
			show 'Doing Initialize-Where_R1_R2'
			do Initialize-Where_R1_R2
			show 'Doing Print-Column_Name'
			do Print-Column_Name
			show 'Doing Create-Temp-Table'
			do Create-Temp-Table
			let $temp_table = 'PS_GEXPY660'
			show 'Doing Control'
			do Control
			show 'Doing Show-Temp-Table'
			do Show-Temp-Table	
			show 'Doing Drop-Temp-Table'
  			do Drop-Temp-Table
		Else
      ! IS Req 1674 2014-09-05 Ramesh Solai BEGIN
      ! !* Report b.csv to be discontinued. *! 
      ! show 'Start of Report 2'
      ! show 'Doing Initialize-Where_R1_R2'
      ! do Initialize-Where_R1_R2
      ! show 'Doing Print-Column_Name2'
      ! do Print-Column_Name2
      ! show 'Doing Select-Data2'
      ! do Select-Data2
      ! IS Req 1674 2014-09-05 Ramesh Solai END
		End-if
		
		Let #report_num = #report_num - 1    !DXS, Sub 1 to #report_num
		
	End-while
	
End-Procedure


!***********************************************************************
! (Report-1/Report-2) Initialization of where clause for Run-cntl_param
!***********************************************************************

Begin-Procedure Initialize-Where_R1_R2

	Let $GEXXX916_Jobcode_Alias = 'A.JOBCODE'                           
		Do GEXXX916-Select-Jobcode-Parameters                          
	Let $GEXXX901_Company_Alias  = 'A.COMPANY'                           
	Let $GEXXX901_Paygroup_Alias = 'A.PAYGROUP'                     
		Do GEXXX901-Select-Company-Paygroup-Parameters
	Let $GEXXX938_Manager_Level_Alias = 'B.MANAGER_LEVEL'                
		Do GEXXX938-Select-Manager_Level-Parameters    
	Let $GEXXX903_Emp_Stat_Alias = 'A.EMPL_STATUS'                      
		Do GEXXX903-Select-Emp-Stat-Parameters
	
		create-array name=plan_types size=50                         
		field=pgroup:char:10                                          
		field=ptype:char:2
	Let $GEXXX917_Plan_Type_Alias = 'B.PLAN_TYPE'                       
		Do GEXXX917-Select-Pension-Plan-Type-Parameters
			CLEAR-ARRAY NAME =plan_types
			
!Code put by Hemal for checking empty setup for plan_type Dt:- 16-May-06

Let $x_917_plan_type=Ltrim(Rtrim(substr($GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA, length($GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA)-10,11),' '),' ')
  show '$x_917_plan_type ' $x_917_plan_type
  
if $x_917_plan_type='B.PLAN_TYPE'
	Let $X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA = $GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA
Else
	Let $X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA = '(X' || substr($GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA, 3, length($GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA)-2)	
end-if

	    #debugx show '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA ' $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
	    #debugx show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA ' $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
	    #debugx show '$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA ' $GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA
	    #debugx show '$GEXXX916_EXCLUDE_JOBCODE_CRITERIA ' $GEXXX916_EXCLUDE_JOBCODE_CRITERIA
	    #debugx show '$GEXXX916_EXCLUDE_JOBCODE_CRITERIA ' $GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA
	    #debugx show '$GEXXX916_EXCLUDE_JOBCODE_CRITERIA ' $X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA	

	!do Initialize-Data
! IS Req 1674 2014-09-05 Ramesh Solai BEGIN
! !* Region-wise subtotals to be removed in a.csv. *!   
! do Initialize-Subtotal	
! IS Req 1674 2014-09-05 Ramesh Solai END

End-Procedure

!***********************************************************************
!--- Initialization
Begin-Procedure  Initialize-Subtotal
!***********************************************************************

Let #subtot_prev_ft_count	=  0
Let #subtot_prev_pt_count	=  0
Let #subtot_prev_tot_ftpt_count	=  0
Let #subtot_curr_ft_count	=  0
Let #subtot_curr_pt_count	=  0
Let #subtot_curr_tot_ftpt_count	=  0
Let #subtot_prev_ytd_wages	=  0
Let #subtot_curr_ytd_wages	=  0
Let #subtot_prev_hw_ft_count	=  0
Let #subtot_prev_hw_ptne_count	=  0
Let #subtot_prev_hw_tot_count	=  0
Let #subtot_curr_hw_ft_count	=  0
Let #subtot_curr_hw_ptne_count	=  0
Let #subtot_curr_hw_tot_count	=  0
Let #subtot_prev_bgncnt_count	=  0
Let #subtot_prev_term_count	=  0
Let #subtot_prev_turnover_fiscal=  0
Let #subtot_curr_bgncnt_count	=  0
Let #subtot_curr_term_count	=  0
Let #subtot_curr_turnover_fiscal=  0

End-Procedure


!***********************************************************************
! Procedure which selects the Column Name & prints it
!***********************************************************************
Begin-Procedure Print-Column_Name


Let $db_date = &prev_eom
Let $db_mon_date=  edit ($db_date,'Mon')
Let $db_yyyy_date=  edit ($db_date,'YYYY')
Let $db_yy_date=  substr($db_yyyy_date,3,2)

  
Let 		$col_prev_ft		=	$db_mon_date||' '||$db_yy_date||' FT Count'		
Let 		$col_prev_pt		=	$db_mon_date||' '||$db_yy_date||' PT Count'		
Let 		$col_prev_tot_count	=	$db_mon_date||' '||$db_yy_date||' Total Count'
Let 		$col_prev_ytd_wages	=	$db_yyyy_date||' YTD Wages'	
Let 		$col_prev_hw_ft		=	$db_mon_date||' '||$db_yy_date||' H&W FT'		       	
Let 		$col_prev_hw_ptne	=	$db_mon_date||' '||$db_yy_date||' H&W PT/NE'		
Let 		$col_prev_hw_tot	=	$db_mon_date||' '||$db_yy_date||' H&W Totals'		
 
Let $db_date = &prev_fy
Let $db_month_date=  edit ($db_date,'Month')
Let $db_yyyy_date=  edit ($db_date,'YYYY')
Let $db_yy_date=  substr($db_yyyy_date,3,2)

Let 		$col_prev_bncnt		=	'Begin Count '      ||$db_month_date||' '||$db_yyyy_date
Let 		$col_prev_term_fis	=	'Terms Fiscal YTD ' || $db_yy_date		
Let 		$col_prev_turn_fis	=	'Turnover Fiscal '  || $db_yyyy_date		

Let $db_date = &cur_eom
Let $db_mon_date=  edit ($db_date,'Mon')
Let $db_yyyy_date=  edit ($db_date,'YYYY')
Let $db_yy_date=  substr($db_yyyy_date,3,2)
 
Let 		$col_curr_ft		=	$db_mon_date||' '||$db_yy_date||' FT Count'		
Let 		$col_curr_pt		=	$db_mon_date||' '||$db_yy_date||' PT Count'		
Let 		$col_curr_tot_count	=	$db_mon_date||' '||$db_yy_date||' Total Count'	       	       	
Let 		$col_curr_ytd_wages	=	$db_yyyy_date||' YTD Wages'		       	
Let 		$col_curr_hw_ft		=	$db_mon_date||' '||$db_yy_date||' H&W FT'			
Let 		$col_curr_hw_ptne	=	$db_mon_date||' '||$db_yy_date||' H&W PT/NE'		
Let 		$col_curr_hw_tot	=	$db_mon_date||' '||$db_yy_date||' H&W Totals'		
 
Let $db_date = &cur_fy
Let $db_month_date=  edit ($db_date,'Month')
Let $db_yyyy_date=  edit ($db_date,'YYYY')
Let $db_yy_date=  substr($db_yyyy_date,3,2)
Let 		$col_curr_bncnt		=	'Begin Count ' 		||$db_month_date||' '||$db_yyyy_date
Let 		$col_curr_term_fis	=	'Terms Fiscal YTD ' 	|| $db_yy_date		
Let 		$col_curr_turn_fis	=	'Turnover Fiscal ' 	|| $db_yyyy_date

!--- Printing the report
Let $report_title_r1= $Report_Nm || 'a'
let $report_title =  'FT-PT Measurement'

		print		$report_title_r1					(+1,1)
		print		$report_title						(0,10)
		print	      	'REGION'				       		(+4,{#column1})
		print	      	'STORE'				       			(+0,{#column2})
		print	      	$col_prev_ft				       		(+0,{#column3}) 
		print	      	$col_prev_pt				       		(+0,{#column4})
		print	      	$col_prev_tot_count		       			(+0,{#column5})
		print	      	$col_curr_ft				       		(+0,{#column6})
		print	      	$col_curr_pt				       		(+0,{#column7})
		print	      	$col_curr_tot_count		       			(+0,{#column8})
    ! IS Req 1674 2014-09-05 Ramesh Solai BEGIN 
    ! !* YTD Wages columns to be removed in a.csv. *!
    !		print	      	$col_prev_ytd_wages		       			(+0,{#column9})
    !		print	      	$col_curr_ytd_wages		       			(+0,{#column10})
    ! IS Req 1674 2014-09-05 Ramesh Solai END
		print	      	$col_prev_hw_ft						(+0,{#column11})
		print	      	$col_prev_hw_ptne					(+0,{#column12})
		print	      	$col_prev_hw_tot					(+0,{#column13})
		print	      	$col_curr_hw_ft			       			(+0,{#column14})
		print	      	$col_curr_hw_ptne					(+0,{#column15})
		print	      	$col_curr_hw_tot					(+0,{#column16})
    ! IS Req 1674 2014-09-05 Ramesh Solai BEGIN 
    ! !* Turnover details to be removed in a.csv. *!
    !		print		$col_prev_bncnt						(+0,{#column17})
    !		print		$col_prev_term_fis					(+0,{#column18})
    !		print		$col_prev_turn_fis					(+0,{#column19})	
    !		print	      	$col_curr_bncnt						(+0,{#column20})
    !		print		$col_curr_term_fis					(+0,{#column21})
    !		print		$col_curr_turn_fis					(+0,{#column22})
    ! IS Req 1674 2014-09-05 Ramesh Solai END

End-Procedure


!***********************************************************************
begin-procedure Create-Temp-Table
!***********************************************************************
begin-sql
create table PS_GEXPY660 (
region_cd varchar2(3),
deptid varchar2(10)
)
end-sql		
end-procedure 


!***********************************************************************
begin-procedure Control
!***********************************************************************

	let #k = 1
	while #k <= 2
	
		if #k = 1
			let $rundate = &cur_eom
			show 'Doing Select-Data'
			do Select-Data		
		else
			let $rundate = &prev_eom
			show 'Doing Select-Data'
			do Select-Data		
		end-if
		add 1 to #k
	end-while
	
end-procedure 

	
!***********************************************************************
! Procedure selects data
!***********************************************************************
Begin-Procedure Select-Data

	
	#ifdef debugx 
		do Get-Current-DateTime
		show 'Start Time Select-Data ' $SysDateTime
        #end-if

	show '$rundate ' $rundate


	
Begin-Select  Distinct
/*+ index(C PS_GEX_DEPT_TBL) */
C.GEX_RGN_CD		&C.rgn_cd
A.DEPTID		&A.deptid


	move &C.rgn_cd to $rgn_cd_db
	move &A.deptid to $deptid_db
	
	do Insert-Temp-Table
	
	
  FROM PS_JOB A
     , PS_JOBCODE_TBL B
     , PS_GEX_DEPT_TBL C
   WHERE A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_JOB A_ED
          WHERE A.EMPLID = A_ED.EMPLID
            AND A.EMPL_RCD = A_ED.EMPL_RCD
            AND A_ED.EFFDT <= $rundate)
     AND A.EFFSEQ =
        (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES
          WHERE A.EMPLID = A_ES.EMPLID
            AND A.EMPL_RCD = A_ES.EMPL_RCD
            AND A.EFFDT = A_ES.EFFDT)
     AND B.SETID = A.SETID_JOBCODE
     AND B.JOBCODE = A.JOBCODE
     AND B.EFFDT =
        (SELECT MAX(B_ED.EFFDT) FROM PS_JOBCODE_TBL B_ED
          WHERE B.SETID = B_ED.SETID
            AND B.JOBCODE = B_ED.JOBCODE
            AND B_ED.EFFDT <= SYSDATE)
     AND C.SETID = A.SETID_DEPT
     AND C.DEPTID = A.DEPTID
     AND C.EFFDT =
        (SELECT MAX(C_ED.EFFDT) FROM PS_GEX_DEPT_TBL C_ED
          WHERE C.SETID = C_ED.SETID
            AND C.DEPTID = C_ED.DEPTID
            AND C_ED.EFFDT <= SYSDATE)
            AND [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]
            AND [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA]
            AND [$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA]
            AND [$GEXXX916_EXCLUDE_JOBCODE_CRITERIA]
	    AND A.DEPTID NOT BETWEEN '3000' and '3999' ! Added by Deepak, as per changed spec
ORDER BY 1, 2
End-Select
End-Procedure


!***********************************************************************
begin-procedure Insert-Temp-Table
!***********************************************************************
begin-sql
insert into [$temp_table]
(region_cd,
deptid)
values
($rgn_cd_db,
$deptid_db)
end-sql
end-procedure 


!***********************************************************************
begin-procedure Show-Temp-Table
!***********************************************************************
begin-select distinct
region_cd &region_cd
deptid	  &deptid

	move &region_cd to $rgn_cd
	move &deptid to $deptid
	
	show '<' $rgn_cd '><' $deptid '>'	
	
	! DXS, added this for sub-totaling for blank region-codes
  ! IS Req 1674 2014-09-05 Ramesh Solai BEGIN
  ! !* Region-wise subtotals to be removed in a.csv. *!
  ! 	if rtrim(ltrim($rgn_cd,' '),' ') = ''
  ! 		let $flag_blank_rgn_cd = 'Y'
  !   end-if
	
  ! 	if rtrim(ltrim($rgn_cd,' '),' ') != '' and $flag_blank_rgn_cd = 'Y'
		! blank rgn_cd rows are complete, lets print a subotal for them
  ! 		Print 'Totals:'  (+1,1)
  ! 		show 'Printing sub-total for blank region code'
  ! 		do Print-Subtotal
  ! 		let $flag_blank_rgn_cd = 'N'
  ! 	end-if
  ! IS Req 1674 2014-09-05 Ramesh Solai END
	! End

	show 'Doing Initialize-Data'
	do Initialize-Data
	show 'Doing Select-Row'
	do Select-Row
	show 'Doing Print-Data'
	do Print-Data
	
from [$temp_table]
ORDER BY 1, 2
end-select

	#ifdef debugx 
		do Get-Current-DateTime
		show 'End Time Select-Data ' $SysDateTime
	#end-if

! IS Req 1674 2014-09-05 Ramesh Solai BEGIN
! !* Region-wise subtotals to be removed in a.csv. *!
!If RGN_CD less than the range
! 		if $rgn_cd_199_flag='N'
! 			Print 'POD Totals:'  (+1,1)
! 			do Print-Subtotal
! 			Let $rgn_cd_199_flag='Y'			
! 		end-if
		
		!For RGN_CD between 200 and 299
! 		if $rgn_cd_299_flag='N'
! 			Print 'COD Totals:'  (+1,1)
! 			do Print-Subtotal
! 			Let $rgn_cd_299_flag='Y'
! 		end-if
	
	!For RGN_CD between 300 and 399, code is called after last row of Select is fetched. 
! 		if $rgn_cd_399_flag='N'
! 			Print 'COL Totals:'  (+1,1)
! 			do Print-Subtotal
! 			Let $rgn_cd_399_flag='Y'
! 		end-if
! IS Req 1674 2014-09-05 Ramesh Solai END

end-procedure 


!***********************************************************************
begin-procedure Drop-Temp-Table
!***********************************************************************
begin-sql
drop table PS_GEXPY660
end-sql
end-procedure 


!***********************************************************************
! Initialization of Data
!***********************************************************************
Begin-Procedure Initialize-Data
	
	Let	#curr_ft_count	     =	0
	Let	#curr_pt_count	     =	0
	Let	#prev_ft_count	     =	0
	Let	#prev_pt_count	     =	0
	Let	#prev_tot_ftpt_count =	0
	Let	#curr_tot_ftpt_count =	0
	Let	#prev_ytd_wages	     =	0
	Let	#curr_ytd_wages	     =	0
	Let	#curr_hw_ft_count    =	0
	Let	#curr_hw_pt_count    =	0
	Let	#curr_hw_ptne_count  =	0
	Let	#prev_hw_ft_count    =	0
	Let	#prev_hw_pt_count    =	0
	Let	#prev_hw_ptne_count  =	0
	Let	#prev_hw_tot_count   =	0
	Let	#curr_hw_tot_count   =	0
	Let	#prev_turnover_fiscal=	0
	Let	#curr_turnover_fiscal=	0
	Let	#prev_bgncnt_count   =  0
	Let     #curr_bgncnt_count   =  0
	Let     #prev_term_count     =  0
	Let     #curr_term_count     =  0
	let     #curr_pt_ne_count_db =  0
	let     #curr_pt_hbw_count_db = 0
	Let     #curr_ftpt_count_db  =  0
	let     #curr_hw_ftpt_count_db = 0

End-Procedure


!***********************************************************************
! Main Procedure which selects the data.
!***********************************************************************
Begin-Procedure Select-Row
	#ifdef debugx 
		do Get-Current-DateTime
		show 'Start Select-Row ' $SysDateTime
		show   $rgn_cd
		show   $deptid
	#end-if
	
Let $GEXXX938_Manager_Level_Alias = 'B.MANAGER_LEVEL'                
		Do GEXXX938-Select-Manager_Level-Parameters  

        let $var_deptid = ' 1 = 1 '	! DXS, new conditon, initialize
	show '$var_deptid ' $var_deptid 

	show 'Doing Select-FT_PT_Count'
	do Select-FT_PT_Count
	show 'Doing Select-YTD_Wages'
  ! IS Req 1674 2014-09-05 Ramesh Solai BEGIN
  ! !* YTD Wages columns to be removed in a.csv. *!
  ! do Select-YTD_Wages
  ! IS Req 1674 2014-09-05 Ramesh Solai END
	show 'Doing Select-HW_FT'
	do Select-HW_FT
	show 'Doing Select-HW_PTNE'
	do Select-HW_PTNE
	show 'Doing Select-Begin-Jobs'
  ! IS Req 1674 2014-09-05 Ramesh Solai BEGIN
  ! !* Turnover details to be removed in a.csv. *!
  ! do Select-Begin-Jobs
	! show 'Doing Select-Terms-Fiscal'
  ! do Select-Terms-Fiscal
  ! IS Req 1674 2014-09-05 Ramesh Solai END
	
		Let #rgn_cd= TO_NUMBER(&region_cd)
		
		!For RGN_CD between 100 and 199
! IS Req 1674 2014-09-05 Ramesh Solai BEGIN
! !* Region-wise subtotals to be removed in a.csv. *!    
! 		if #rgn_cd >= 199  and $rgn_cd_199_flag='N'
! 			Print 'POD Totals:'  (+1,1)
! 			do Print-Subtotal
! 			Let $rgn_cd_199_flag='Y'
! 		end-if
		
		!For RGN_CD between 200 and 299
! 		if #rgn_cd >= 299 and $rgn_cd_299_flag='N'
! 			Print 'COD Totals:'  (+1,1)
! 			do Print-Subtotal
! 			Let $rgn_cd_299_flag='Y'
! 		end-if
	
	!For RGN_CD between 300 and 399, code is called after last row of Select is fetched. 
! 		if #rgn_cd >= 399 and $rgn_cd_399_flag='N'
! 			Print 'COL Totals:'  (+1,1)
! 			do Print-Subtotal
! 			Let $rgn_cd_399_flag='Y'
! 		end-if

! 		do Calculate_Subtotal
! IS Req 1674 2014-09-05 Ramesh Solai END

	#ifdef debugx 
		do Get-Current-DateTime
 		show 'End Select-Row ' $SysDateTime
	#end-if
End-Procedure

!***********************************************************************
! Procedure selects FT/PT Count
!***********************************************************************
Begin-Procedure Select-FT_PT_Count

 show 'Doing Select-FT_PT_Count_Curr'
 do Select-FT_PT_Count_Curr
 show 'Doing Select-FT_PT_Count_Prev'
 do Select-FT_PT_Count_Prev

 End-Procedure


!***********************************************************************
!(Curr) Mon Yy FT/PT Count Select total number of FT / PT employees within the Current Year. 
!***********************************************************************
Begin-Procedure Select-FT_PT_Count_Curr
	#ifdef debugx 
		do Get-Current-DateTime
		show 'Start Time Select-FT_PT_Count_Curr ' $SysDateTime
	#end-if

	Let $GEXXX_Jobcode_Alias = 'B.JOBCODE'
		do GEXXX-Select-Jobcode-Parameters_R2
	Let $GEXXX938_Manager_Level_Alias = 'B.MANAGER_LEVEL'                
	    Do GEXXX938-Select-Manager_Level-Parameters    

	do Build-Dynamic-Where		!For Report-1 & Report-2	
	
	show '$R2_FTPT_COUNT_SELECT_VAR1 ' $R2_FTPT_COUNT_SELECT_VAR1
	show '$R2_FTPT_COUNT_WHERE_UNION_RGN_DEPT ' $R2_FTPT_COUNT_WHERE_UNION_RGN_DEPT
	show '&cur_eom ' &cur_eom
	show '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA ' $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
	show '$R2_WHERE_VAL_COMP_PAY_UNION_CD ' $R2_WHERE_VAL_COMP_PAY_UNION_CD
	show '$R2_WHERE_VAL_DEPT_JOBCODE ' $R2_WHERE_VAL_DEPT_JOBCODE
	show '$var_deptid ' $var_deptid

	
Begin-Select Distinct
$R2_FTPT_COUNT_SELECT_VAR1		&curr_rgn_cd
A.DEPTID			&curr_deptid
A.FULL_PART_TIME		&curr_ftpt
COUNT (*)			&curr_ftpt_count

	Move &curr_ftpt_count to #curr_ftpt_count_db
	show '&curr_ftpt ' &curr_ftpt
	show '#report_num ' #report_num
	
	If &curr_ftpt='F' 
		If #report_num=1
			let #curr_ft_count = #curr_ft_count + #curr_ftpt_count_db	
			show 'Report 1, F' 
			show '#curr_ftpt_count_db ' #curr_ftpt_count_db
			show '#curr_ft_count ' #curr_ft_count

		Else
			show 'Before #curr_ft_count_r2 ' #curr_ft_count_r2
			show '#curr_ftpt_count_db ' #curr_ftpt_count_db
			let #curr_ft_count_r2 = #curr_ft_count_r2 + #curr_ftpt_count_db
			show 'After  #curr_ft_count_r2 ' #curr_ft_count_r2
		End-if
	Else
		If #report_num=1
			let #curr_pt_count = #curr_pt_count + #curr_ftpt_count_db	
			show 'Report 1, P' 
			show '#curr_ftpt_count_db ' #curr_ftpt_count_db
			show '#curr_pt_count ' #curr_pt_count
		Else
			show 'Before #curr_pt_count_r2 ' #curr_pt_count_r2
			show '#curr_ftpt_count_db ' #curr_ftpt_count_db
			let #curr_pt_count_r2 = #curr_pt_count_r2 + #curr_ftpt_count_db
			show 'After #curr_pt_count_r2 ' #curr_pt_count_r2
		End-if
	End-if

	
  FROM PS_JOB A, 
       PS_JOBCODE_TBL B, 
       PS_GEX_DEPT_TBL F
  WHERE [$R2_FTPT_COUNT_WHERE_UNION_RGN_DEPT]
        AND F.SETID = A.SETID_DEPT
     AND F.DEPTID = A.DEPTID
   AND A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_JOB A_ED
        WHERE A.EMPLID = A_ED.EMPLID
          AND A.EMPL_RCD = A_ED.EMPL_RCD
          AND A_ED.EFFDT <= &cur_eom)
    AND A.EFFSEQ =
        (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES
        WHERE A.EMPLID = A_ES.EMPLID
          AND A.EMPL_RCD = A_ES.EMPL_RCD
          AND A.EFFDT = A_ES.EFFDT)
     AND B.SETID = A.SETID_JOBCODE
     AND B.JOBCODE = A.JOBCODE
     AND B.EFFDT =
        (SELECT MAX(B_ED.EFFDT) FROM PS_JOBCODE_TBL B_ED
        WHERE B.SETID = B_ED.SETID
          AND B.JOBCODE = B_ED.JOBCODE
          AND B_ED.EFFDT <= SYSDATE)
     AND F.EFFDT =
        (SELECT MAX(F_ED.EFFDT) FROM PS_GEX_DEPT_TBL F_ED
        WHERE F.SETID = F_ED.SETID
          AND F.DEPTID = F_ED.DEPTID
          AND F_ED.EFFDT <= SYSDATE)
     AND [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]		!A.EMPL_STATUS IN (list from run control)
     AND [$R2_WHERE_VAL_COMP_PAY_UNION_CD]	!A.
     AND [$R2_WHERE_VAL_DEPT_JOBCODE]	
     AND [$var_deptid]			! DXS, New Condition
  GROUP BY  [$R2_FTPT_COUNT_SELECT_VAR1],  A.DEPTID,  A.FULL_PART_TIME
  ORDER BY 1, 2, 3

End-Select

If #report_num=1
	Let #curr_tot_ftpt_count = #curr_ft_count + #curr_pt_count				!#curr_tot_ftpt_count
Else
	Let #curr_tot_ftpt_count_r2 = #curr_ft_count_r2 + #curr_pt_count_r2
End-If

#debugx show '#curr_ft_count_r2: ' #curr_ft_count_r2
#debugx show '#curr_pt_count_r2: ' #curr_pt_count_r2
#debugx show '#curr_tot_ftpt_count_r2: ' #curr_tot_ftpt_count_r2

   	#ifdef debugx 
		do Get-Current-DateTime
		show 'End Time Select-FT_PT_Count_Curr ' $SysDateTime
	#end-if		
End-Procedure


!***********************************************************************
!(prev) Mon Yy  FT Count Select total number of FT / PT employees within the Previous Year. 
!***********************************************************************

Begin-Procedure Select-FT_PT_Count_Prev
	#ifdef debugx 
		do Get-Current-DateTime
		show 'Start Time Select-FT_PT_Count_Prev ' $SysDateTime
	#end-if

	show '$rgn_cd ' $rgn_cd
	show '$deptid ' $deptid
	show '&prev_eom ' &prev_eom
	show '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA ' $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
	show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA ' $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
	show '$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA ' $GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA
	show '$GEXXX916_EXCLUDE_JOBCODE_CRITERIA ' $GEXXX916_EXCLUDE_JOBCODE_CRITERIA

Begin-Select Distinct
F.GEX_RGN_CD			&prev_rgn_cd
A.DEPTID			&prev_deptid
A.FULL_PART_TIME		&prev_ftpt
COUNT (*)			&prev_ftpt_count
	
	If &prev_ftpt='F' 
		let #prev_ft_count = #prev_ft_count + &prev_ftpt_count		!#prev_ft_count
		show '&prev_ftpt_count ' &prev_ftpt_count
		show '#prev_ft_count ' #prev_ft_count
	Else
		let #prev_pt_count = #prev_pt_count + &prev_ftpt_count		!#prev_pt_count
		show '&prev_ftpt_count ' &prev_ftpt_count
		show '#prev_pt_count ' #prev_pt_count 
	End-if

  FROM PS_JOB A, 
       PS_JOBCODE_TBL B, 
       PS_GEX_DEPT_TBL F
  WHERE F.GEX_RGN_CD = $rgn_cd
   AND   A.DEPTID     = $deptid
        AND F.SETID = A.SETID_DEPT
     AND F.DEPTID = A.DEPTID
   AND A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_JOB A_ED
        WHERE A.EMPLID = A_ED.EMPLID
          AND A.EMPL_RCD = A_ED.EMPL_RCD
          AND A_ED.EFFDT <= &prev_eom)
    AND A.EFFSEQ =
        (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES
        WHERE A.EMPLID = A_ES.EMPLID
          AND A.EMPL_RCD = A_ES.EMPL_RCD
          AND A.EFFDT = A_ES.EFFDT)
     AND B.SETID = A.SETID_JOBCODE
     AND B.JOBCODE = A.JOBCODE
     AND B.EFFDT =
        (SELECT MAX(B_ED.EFFDT) FROM PS_JOBCODE_TBL B_ED
        WHERE B.SETID = B_ED.SETID
          AND B.JOBCODE = B_ED.JOBCODE
          AND B_ED.EFFDT <= SYSDATE)
     AND F.EFFDT =
        (SELECT MAX(F_ED.EFFDT) FROM PS_GEX_DEPT_TBL F_ED
        WHERE F.SETID = F_ED.SETID
          AND F.DEPTID = F_ED.DEPTID
          AND F_ED.EFFDT <= SYSDATE)
     AND [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]		!A.EMPL_STATUS IN (list from run control)
     AND [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA]	!A.
     AND [$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA]	!B
     AND [$GEXXX916_EXCLUDE_JOBCODE_CRITERIA]		!A.
     AND A.DEPTID NOT BETWEEN '3000' and '3999' ! Added by Deepak, as per changed spec
  GROUP BY  F.GEX_RGN_CD,  A.DEPTID,  A.FULL_PART_TIME
  ORDER BY 1, 2, 3

End-Select

Let #prev_tot_ftpt_count = #prev_ft_count + #prev_pt_count				!#prev_tot_ftpt_count
    	#ifdef debugx 
		do Get-Current-DateTime
		show 'End Time Select-FT_PT_Count_Prev ' $SysDateTime
	#end-if
End-Procedure


!***********************************************************************
! Procedure selects YTD Wages
!***********************************************************************
Begin-Procedure Select-YTD_Wages

! Builds the Where clause for JOBCODE, COMPANY_PAYGROUP, MANAGER_LEVEL	
Let $GEXXX916_Jobcode_Alias = 'D.JOBCODE'                           
Do GEXXX916-Select-Jobcode-Parameters                          
Let $GEXXX901_Company_Alias  = 'C.COMPANY'                           
Let $GEXXX901_Paygroup_Alias = 'C.PAYGROUP'                     
    Do GEXXX901-Select-Company-Paygroup-Parameters
Let $GEXXX938_Manager_Level_Alias = 'G.MANAGER_LEVEL'                
    Do GEXXX938-Select-Manager_Level-Parameters 
    
    show 'Doing Select-YTD_Wages_Curr'
    do Select-YTD_Wages_Curr
    show 'Doing Select-YTD_Wages_Prev'
    do Select-YTD_Wages_Prev
  
  End-Procedure


!***********************************************************************
!(Curr) Yyyy YTD Wages. Select total wages within the Current Year. *****************
!***********************************************************************

Begin-Procedure Select-YTD_Wages_Curr
	#ifdef debugx 
		do Get-Current-DateTime      
		show 'Start Time Select-YTD_Wages_Curr ' $SysDateTime
	#end-if

	show '$rgn_cd ' $rgn_cd
	show '$deptid ' $deptid
	show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA ' $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
	show '$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA ' $GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA
	show '$GEXXX916_EXCLUDE_JOBCODE_CRITERIA ' $GEXXX916_EXCLUDE_JOBCODE_CRITERIA
	show '&cur_cal ' &cur_cal
	show '&cur_eom ' &cur_eom 


Begin-Select Distinct
F.GEX_RGN_CD		&curr_ytd_wages_rgn_cd
D.DEPTID		&curr_ytd_wages_deptid
SUM(E.OTH_EARNS)	&curr_ytd_wages_brkup

	Let #curr_ytd_wages = #curr_ytd_wages + &curr_ytd_wages_brkup		!#curr_ytd_wages		
	show '&curr_ytd_wages_brkup ' &curr_ytd_wages_brkup
	show '#curr_ytd_wages ' #curr_ytd_wages

FROM PS_PAY_CHECK C, PS_PAY_EARNINGS D, PS_PAY_OTH_EARNS E, 
       PS_GEX_DEPT_TBL F,  PS_JOBCODE_TBL G
   WHERE F.GEX_RGN_CD = $rgn_cd
   AND   D.DEPTID     = $deptid
      AND F.SETID = 'COMMN'
   AND F.DEPTID = D.DEPTID
   AND C.COMPANY = D.COMPANY
   AND C.PAYGROUP = D.PAYGROUP
   AND C.PAY_END_DT = D.PAY_END_DT
   AND C.OFF_CYCLE = D.OFF_CYCLE
   AND C.PAGE_NUM = D.PAGE_NUM
   AND C.LINE_NUM = D.LINE_NUM
   AND C.SEPCHK = D.SEPCHK
   AND D.COMPANY = E.COMPANY
   AND D.PAYGROUP = E.PAYGROUP
   AND D.PAY_END_DT = E.PAY_END_DT
   AND D.OFF_CYCLE = E.OFF_CYCLE
   AND D.PAGE_NUM = E.PAGE_NUM
   AND D.LINE_NUM = E.LINE_NUM
   AND D.ADDL_NBR = E.ADDL_NBR
   AND F.EFFDT =
      (SELECT MAX(F_ED.EFFDT) FROM PS_GEX_DEPT_TBL F_ED
        WHERE F.SETID = F_ED.SETID
          AND F.DEPTID = F_ED.DEPTID
          AND F_ED.EFFDT <= SYSDATE)
   AND G.SETID = 'COMMN'
   AND G.JOBCODE = D.JOBCODE
   AND G.EFFDT =
      (SELECT MAX(G_ED.EFFDT) FROM PS_JOBCODE_TBL G_ED
        WHERE G.SETID = G_ED.SETID
          AND G.JOBCODE = G_ED.JOBCODE
          AND G_ED.EFFDT <= SYSDATE)
   AND [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA]				!C
   AND [$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA]				!G
   AND [$GEXXX916_EXCLUDE_JOBCODE_CRITERIA]					!D.JOBCODE
        AND D.PAY_END_DT BETWEEN &cur_cal and &cur_eom    !Used &cur_cal --Calendar Year Begins 
  GROUP BY F.GEX_RGN_CD, D.DEPTID
  ORDER BY 1, 2   
  
End-Select
	#ifdef debugx
		do Get-Current-DateTime
		show 'End Time Select-YTD_Wages_Curr ' $SysDateTime
	#end-if
End-Procedure


!***********************************************************************
!(prev) Yyyy YTD Wages. Select total wages within the Previous Year.  ***********
!***********************************************************************

Begin-Procedure Select-YTD_Wages_Prev
        #ifdef debugx 
		do Get-Current-DateTime
		show 'Start Time Select-YTD_Wages_Prev ' $SysDateTime
	#end-if

	show '$rgn_cd ' $rgn_cd
	show '$deptid ' $deptid
	show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA ' $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
	show '$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA ' $GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA
	show '$GEXXX916_EXCLUDE_JOBCODE_CRITERIA ' $GEXXX916_EXCLUDE_JOBCODE_CRITERIA
	show '&prev_cal ' &prev_cal 
	show '&prev_eom ' &prev_eom


Begin-Select Distinct
F.GEX_RGN_CD 		   &prev_ytd_wages_rgn_cd
D.DEPTID 		   &prev_ytd_wages_deptid
SUM(E.OTH_EARNS)	   &prev_ytd_wages_brkup

	Let #prev_ytd_wages = #prev_ytd_wages + &prev_ytd_wages_brkup			!#prev_ytd_wages
	show '&prev_ytd_wages_brkup ' &prev_ytd_wages_brkup
	show '#prev_ytd_wages ' #prev_ytd_wages


FROM PS_PAY_CHECK C, PS_PAY_EARNINGS D, PS_PAY_OTH_EARNS E, 
       PS_GEX_DEPT_TBL F,  PS_JOBCODE_TBL G
   WHERE F.GEX_RGN_CD = $rgn_cd
   AND   D.DEPTID     = $deptid
      AND F.SETID = 'COMMN'
   AND F.DEPTID = D.DEPTID
   AND C.COMPANY = D.COMPANY
   AND C.PAYGROUP = D.PAYGROUP
   AND C.PAY_END_DT = D.PAY_END_DT
   AND C.OFF_CYCLE = D.OFF_CYCLE
   AND C.PAGE_NUM = D.PAGE_NUM
   AND C.LINE_NUM = D.LINE_NUM
   AND C.SEPCHK = D.SEPCHK
   AND D.COMPANY = E.COMPANY
   AND D.PAYGROUP = E.PAYGROUP
   AND D.PAY_END_DT = E.PAY_END_DT
   AND D.OFF_CYCLE = E.OFF_CYCLE
   AND D.PAGE_NUM = E.PAGE_NUM
   AND D.LINE_NUM = E.LINE_NUM
   AND D.ADDL_NBR = E.ADDL_NBR
   AND F.EFFDT =
      (SELECT MAX(F_ED.EFFDT) FROM PS_GEX_DEPT_TBL F_ED
        WHERE F.SETID = F_ED.SETID
          AND F.DEPTID = F_ED.DEPTID
          AND F_ED.EFFDT <= SYSDATE)
   AND G.SETID = 'COMMN'
   AND G.JOBCODE = D.JOBCODE
   AND G.EFFDT =
      (SELECT MAX(G_ED.EFFDT) FROM PS_JOBCODE_TBL G_ED
        WHERE G.SETID = G_ED.SETID
          AND G.JOBCODE = G_ED.JOBCODE
          AND G_ED.EFFDT <= SYSDATE)
   AND [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA]			!C
   AND [$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA]			!G
   AND [$GEXXX916_EXCLUDE_JOBCODE_CRITERIA]				!D.JOBCODE
   AND D.PAY_END_DT BETWEEN &prev_cal AND &prev_eom      !Used  &prev_cal --> prev Calendar Year Begins
  GROUP BY F.GEX_RGN_CD, D.DEPTID
  ORDER BY 1, 2
End-Select
	#ifdef debugx 
		do Get-Current-DateTime      
		show 'End Time Select-YTD_Wages_Prev ' $SysDateTime
	#end-if
End-Procedure



!***********************************************************************
! Procedure selects total no. of employees with H&W FT
!***********************************************************************
Begin-Procedure Select-HW_FT

!***********Builds the Where clause for JOBCODE, COMPANY_PAYGROUP, MANAGER_LEVEL, EMPL_STATUS, PLAN_TYPE	
Let $GEXXX916_Jobcode_Alias = 'A.JOBCODE'                           
    Do GEXXX916-Select-Jobcode-Parameters                          
Let $GEXXX901_Company_Alias  = 'A.COMPANY'                           
Let $GEXXX901_Paygroup_Alias = 'A.PAYGROUP'                     
    Do GEXXX901-Select-Company-Paygroup-Parameters
Let $GEXXX938_Manager_Level_Alias = 'C.MANAGER_LEVEL'                
    Do GEXXX938-Select-Manager_Level-Parameters    

 show 'Doing Select-HW_FT_Curr'
do Select-HW_FT_Curr
show 'Doing Select-HW_FT_Prev'
do Select-HW_FT_Prev

End-Procedure


!***********************************************************************
!(curr) Mon Yy  H&W FT. Select total number of employees with H&W FT within the Current Year
!***********************************************************************

Begin-Procedure Select-HW_FT_Curr
	#ifdef debugx 
		do Get-Current-DateTime
		show 'Start Time Select-HW_FT_Curr ' $SysDateTime
	#end-if
	
Let $GEXXX_Jobcode_Alias = 'A.JOBCODE'
	do GEXXX-Select-Jobcode-Parameters_R2
Let $GEXXX938_Manager_Level_Alias = 'C.MANAGER_LEVEL'                
    Do GEXXX938-Select-Manager_Level-Parameters    

	do Build-Dynamic-Where		!For Report-1 & Report-2
	
  show '$R2_HW_FT_CURR_WHERE_UNION_RGN_DEPT ' $R2_HW_FT_CURR_WHERE_UNION_RGN_DEPT
  show '$R2_HW_FT_CURR_SELECT_VAR1 ' $R2_HW_FT_CURR_SELECT_VAR1
  show '&cur_eom ' &cur_eom
  show '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA ' $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
  show '$R2_WHERE_VAL_COMP_PAY_UNION_CD ' $R2_WHERE_VAL_COMP_PAY_UNION_CD
  show '$GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA ' $GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA
  show '$R2_WHERE_VAL_DEPT_JOBCODE ' $R2_WHERE_VAL_DEPT_JOBCODE
   
Begin-Select
$R2_HW_FT_CURR_SELECT_VAR1	&curr_hw_ft_rgn_cd 
a.deptid 			&curr_hw_ft_deptid
g.gex_ben_fp 			&curr_hw_ft_ben_fp
count(a.emplid)			&curr_hw_ftpt_count				
A.FULL_PART_TIME		&curr_hw_ftpt

	Let $curr_hw_ftpt = &curr_hw_ftpt
	let $curr_hw_ft_ben_fp = &curr_hw_ft_ben_fp
	Move &curr_hw_ftpt_count to #curr_hw_ftpt_count_db

     show 'In select ' #report_num
     show '$curr_hw_ft_ben_fp ' $curr_hw_ft_ben_fp
     
  if #report_num=1	
	If $curr_hw_ft_ben_fp = 'F' ! DXS, $curr_hw_ftpt='F' 
		let #curr_hw_ft_count = #curr_hw_ft_count + #curr_hw_ftpt_count_db		!#curr_hw_ft_count
		show '#curr_hw_ftpt_count_db ' #curr_hw_ftpt_count_db
		show '#curr_hw_ft_count ' #curr_hw_ft_count
	Else
		let #curr_hw_pt_count = #curr_hw_pt_count + #curr_hw_ftpt_count_db		!#curr_hw_pt_count
		show '#curr_hw_ftpt_count_db ' #curr_hw_ftpt_count_db
		show '#curr_hw_pt_count ' #curr_hw_pt_count
	End-if
  Else
	!If $curr_hw_ftpt='F' 
	If $curr_hw_ft_ben_fp ='F'
	        show 'Before #curr_hw_ft_count_r2  ' #curr_hw_ft_count_r2 
	        show '#curr_hw_ftpt_count_db ' #curr_hw_ftpt_count_db
		let #curr_hw_ft_count_r2 = #curr_hw_ft_count_r2 + #curr_hw_ftpt_count_db		!#curr_hw_ft_count
		show 'After #curr_hw_ft_count_r2  ' #curr_hw_ft_count_r2 
	Else
		show 'Before #curr_hw_pt_count_r2 ' #curr_hw_pt_count_r2 
		show '#curr_hw_ftpt_count_db ' #curr_hw_ftpt_count_db
		let #curr_hw_pt_count_r2 = #curr_hw_pt_count_r2 + #curr_hw_ftpt_count_db
		show 'After #curr_hw_pt_count_r2 ' #curr_hw_pt_count_r2 
	End-if
  End-if

from ps_job a,  ps_health_benefit b, ps_jobcode_tbl c,
       ps_gex_dept_tbl d, ps_ben_prog_partic e, ps_ben_defn_pgm f,
       ps_ben_defn_optn g
 where [$R2_HW_FT_CURR_WHERE_UNION_RGN_DEPT]
         and d.setid = 'COMMN'
      and d.deptid = a.deptid
   AND a.effdt =
     (select max(effdt) from ps_job  
       where emplid = a.emplid
         and empl_rcd = a.empl_rcd
	  and effdt <= &cur_eom)
   and a.effseq =
     (select max(effseq) from ps_job
       where emplid = a.emplid
         and empl_rcd = a.empl_rcd
	  and effdt = a.effdt)
   and a.emplid = b.emplid
   and a.empl_rcd = b.empl_rcd
   and b.effdt =
      (select max(effdt) from ps_health_benefit
        where emplid = b.emplid
  	   and empl_rcd = b.empl_rcd
	   and (plan_type = '10' or plan_type = '1Y')
	   and cobra_event_id = b.cobra_event_id
	   and benefit_nbr = b.benefit_nbr
	   and effdt <= &cur_eom)
   and c.setid = 'COMMN'
   and c.jobcode = a.jobcode
   and c.effdt =
      (select max(effdt) from ps_jobcode_tbl
	 where setid = c.setid
	   and jobcode = c.jobcode
	   and effdt <= &cur_eom)
   and d.effdt =
      (select max(effdt) from ps_gex_dept_tbl
        where setid = d.setid
          and deptid = d.deptid
	    and effdt <= &cur_eom)
   and e.emplid = b.emplid
   and e.empl_rcd = b.empl_rcd
   and e.cobra_event_id = b.cobra_event_id
   and e.effdt =
      (select max(effdt) from ps_ben_prog_partic
        where emplid = e.emplid
	    and empl_rcd = e.empl_rcd
	    and cobra_event_id = e.cobra_event_id
	    and effdt <= &cur_eom)
   and f.benefit_program = e.benefit_program
   and f.effdt =
      (select max(effdt) from ps_ben_defn_pgm
        where benefit_program = f.benefit_program
 	   and effdt <= &cur_eom)
   and g.benefit_program = f.benefit_program
   and g.effdt = f.effdt
   and g.plan_type = b.plan_type
   and g.covrg_cd = b.covrg_cd
   and g.benefit_plan = b.benefit_plan
   and [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]				!a.empl_status 
   and [$R2_WHERE_VAL_COMP_PAY_UNION_CD]			!a.
   and [$GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA] 			!b.
   and [$R2_WHERE_VAL_DEPT_JOBCODE]				
   and b.coverage_elect = 'E'
   !AND A.DEPTID NOT BETWEEN '3000' and '3999' ! Added by Deepak, as per changed spec
   and g.gex_ben_fp in ('F','P')	! DXS,09/30/06 added as now we see a row with N too.
   and [$var_deptid]			! DXS, New condition
group by [$R2_HW_FT_CURR_SELECT_VAR1], a.deptid, g.gex_ben_fp,a.full_part_time

End-Select

#debugx show '#curr_hw_ft_count_r2 ' #curr_hw_ft_count_r2

	#ifdef debugx 
		do Get-Current-DateTime
		show 'End Time Select-HW_FT_Curr ' $SysDateTime
	#end-if
End-Procedure


!***********************************************************************
!(prev) Mon Yy  H&W FT. Select total number of employees with H&W FT within the Previous Year
!***********************************************************************

Begin-Procedure Select-HW_FT_Prev
	#ifdef debugx 
		do Get-Current-DateTime
		show 'Start Time Select-HW_FT_Prev ' $SysDateTime
	#end-if

	show '$rgn_cd ' $rgn_cd
	show '$deptid ' $deptid
	show '&prev_eom ' &prev_eom
	show '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA ' $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
	show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA ' $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
	show '$GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA  ' $GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA
	show '$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA ' $GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA
	show '$GEXXX916_EXCLUDE_JOBCODE_CRITERIA ' $GEXXX916_EXCLUDE_JOBCODE_CRITERIA

Begin-Select
d.gex_rgn_cd			&prev_hw_ft_rgn_cd 
a.deptid 			&prev_hw_ft_deptid
g.gex_ben_fp 			&prev_hw_ft_ben_fp
count(a.emplid)			&prev_hw_ftpt_count			
A.FULL_PART_TIME		&prev_hw_ftpt

	
	If &prev_hw_ft_ben_fp = 'F'	! DXS, &prev_hw_ftpt='F' 
		let #prev_hw_ft_count = #prev_hw_ft_count + &prev_hw_ftpt_count		!#prev_hw_ft_count
		show '&prev_hw_ftpt_count ' &prev_hw_ftpt_count
		show '#prev_hw_ft_count ' #prev_hw_ft_count
	Else
		let #prev_hw_pt_count = #prev_hw_pt_count + &prev_hw_ftpt_count		!#prev_hw_pt_count
		show '&prev_hw_ftpt_count ' &prev_hw_ftpt_count
		show '#prev_hw_pt_count ' #prev_hw_pt_count
	End-if

  from ps_job a,  ps_health_benefit b, ps_jobcode_tbl c,
       ps_gex_dept_tbl d, ps_ben_prog_partic e, ps_ben_defn_pgm f,
       ps_ben_defn_optn g
 where D.GEX_RGN_CD = $rgn_cd
   AND   A.DEPTID     = $deptid
         and d.setid = 'COMMN'
      and d.deptid = a.deptid
   AND a.effdt =
     (select max(effdt) from ps_job  
       where emplid = a.emplid
         and empl_rcd = a.empl_rcd
	  and effdt <= &prev_eom)
   and a.effseq =
     (select max(effseq) from ps_job
       where emplid = a.emplid
         and empl_rcd = a.empl_rcd
	  and effdt = a.effdt)
   and a.emplid = b.emplid
   and a.empl_rcd = b.empl_rcd
   and b.effdt =
      (select max(effdt) from ps_health_benefit
        where emplid = b.emplid
  	   and empl_rcd = b.empl_rcd
	   and (plan_type = '10' or plan_type = '1Y')
	   and cobra_event_id = b.cobra_event_id
	   and benefit_nbr = b.benefit_nbr
	   and effdt <= &prev_eom)
   and c.setid = 'COMMN'
   and c.jobcode = a.jobcode
   and c.effdt =
      (select max(effdt) from ps_jobcode_tbl
	 where setid = c.setid
	   and jobcode = c.jobcode
	   and effdt <= &prev_eom)
   and d.effdt =
      (select max(effdt) from ps_gex_dept_tbl
        where setid = d.setid
          and deptid = d.deptid
	    and effdt <= &prev_eom)
   and e.emplid = b.emplid
   and e.empl_rcd = b.empl_rcd
   and e.cobra_event_id = b.cobra_event_id
   and e.effdt =
      (select max(effdt) from ps_ben_prog_partic
        where emplid = e.emplid
	    and empl_rcd = e.empl_rcd
	    and cobra_event_id = e.cobra_event_id
	    and effdt <= &prev_eom)
   and f.benefit_program = e.benefit_program
   and f.effdt =
      (select max(effdt) from ps_ben_defn_pgm
        where benefit_program = f.benefit_program
 	   and effdt <= &prev_eom)
   and g.benefit_program = f.benefit_program
   and g.effdt = f.effdt
   and g.plan_type = b.plan_type
   and g.covrg_cd = b.covrg_cd
   and g.benefit_plan = b.benefit_plan
   and [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]				!a.empl_status 
   and [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA]			!a.
   and [$GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA] 			!b.
   and [$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA]			!c.
   and [$GEXXX916_EXCLUDE_JOBCODE_CRITERIA]				!a.
   and b.coverage_elect = 'E'
   AND A.DEPTID NOT BETWEEN '3000' and '3999' ! Added by Deepak, as per changed spec
   and g.gex_ben_fp in ('F','P')	! DXS,09/30/06 added as now we see a row with N too.
group by d.gex_rgn_cd, a.deptid, g.gex_ben_fp,a.full_part_time

End-Select
	#ifdef debugx
		do Get-Current-DateTime
		show 'End Time Select-HW_FT_Prev ' $SysDateTime
	#end-if
End-Procedure


!***********************************************************************
! Procedure selects total no. of employees with H&W PT
!***********************************************************************
Begin-Procedure Select-HW_PTNE

!***********Builds the Where clause for JOBCODE, COMPANY_PAYGROUP, MANAGER_LEVEL, EMPL_STATUS, PLAN_TYPE	

Let $GEXXX938_Manager_Level_Alias = 'C.MANAGER_LEVEL'                
    Do GEXXX938-Select-Manager_Level-Parameters    

show 'Doing Select-HW_NE_Prev'
do Select-HW_NE_Prev
show 'Doing Select-HW_NE_Curr'
do Select-HW_NE_Curr
show 'Doing Select-HW_Waives_Prev'
do Select-HW_Waives_Prev
show 'Doing Select-HW_Waives_Curr'
do Select-HW_Waives_Curr


End-Procedure

!***********************************************************************
!(prev) (HB Non Exists) Mon Yy  H&W PT/NE 
!***********************************************************************

Begin-Procedure Select-HW_NE_Prev
	#ifdef debugx 
		do Get-Current-DateTime
		show 'Start Time Select-HW_NE_Prev ' $SysDateTime
	#end-if
	
	show '$rgn_cd ' $rgn_cd
	show '$deptid ' $deptid
	show '&prev_eom ' &prev_eom
	show '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA ' $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
	show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA ' $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
	show '$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA ' $GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA
	show '$GEXXX916_EXCLUDE_JOBCODE_CRITERIA ' $GEXXX916_EXCLUDE_JOBCODE_CRITERIA
	show '$GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA ' $GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA
	show '$X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA ' $X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA

Begin-Select
d.gex_rgn_cd			&prev_pt_ne_rgn_cd
a.deptid			&prev_pt_ne_deptid
count(a.emplid)			&prev_pt_ne_count			!&prev_pt_ne_count

	show '&prev_pt_ne_count ' &prev_pt_ne_count

  from ps_job a, ps_jobcode_tbl c, ps_gex_dept_tbl d
 where D.GEX_RGN_CD = $rgn_cd
   AND   A.DEPTID     = $deptid
   and d.setid = 'COMMN'
   and d.deptid = a.deptid
   AND a.effdt =
      (select max(effdt) from ps_job  
        where emplid = a.emplid
          and empl_rcd = a.empl_rcd
	   and effdt <= &prev_eom)
   and a.effseq =
      (select max(effseq) from ps_job
        where emplid = a.emplid
          and empl_rcd = a.empl_rcd
	   and effdt = a.effdt)
   and c.setid = 'COMMN'
   and c.jobcode = a.jobcode
   and c.effdt = 
      (select max(effdt) from ps_jobcode_tbl  
	  where setid = c.setid
	    and jobcode = c.jobcode
	    and effdt <= &prev_eom)
   and d.effdt =
      (select max(effdt) from ps_gex_dept_tbl 
	  where setid = d.setid
	    and deptid = d.deptid
	    and effdt <= &prev_eom)
  and [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]				!a.empl_status 
  and [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA]			!a.
  and [$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA]			!c.
  and [$GEXXX916_EXCLUDE_JOBCODE_CRITERIA]				!a.
  AND A.DEPTID NOT BETWEEN '3000' and '3999' ! Added by Deepak, as per changed spec
   and not exists 
      (select'X'
	  from ps_health_benefit b
	 where b.emplid = a.emplid
	   and b.empl_rcd = a.empl_rcd
	   and [$GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA]		!b.
	   and b.effdt <= &prev_eom
	   and b.effdt = 
   	      (select max(effdt)
		   from ps_health_benefit x
		  where x.emplid = b.emplid
		    and x.empl_rcd = b.empl_rcd
		    and [$X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA]
		    and x.cobra_event_id = b.cobra_event_id
		    and x.benefit_nbr = b.benefit_nbr
		    and x.effdt <= &prev_eom))
group by d.gex_rgn_cd, a.deptid

End-Select
	#ifdef debugx
		do Get-Current-DateTime
		show 'End Time Select-HW_NE_Prev ' $SysDateTime
	#end-if
End-Procedure

!***********************************************************************
!(Curr) (HB Non Exists) Mon Yy  H&W PT/NE 
!***********************************************************************

Begin-Procedure Select-HW_NE_Curr
	#ifdef debugx 
		do Get-Current-DateTime
		show 'Start Time Select-HW_NE_Curr ' $SysDateTime
	#end-if

	do Build-Dynamic-Where		!For Report-1 & Report-2

	show '$R2_HW_FT_CURR_WHERE_UNION_RGN_DEPT ' $R2_HW_FT_CURR_WHERE_UNION_RGN_DEPT
	show '$R2_HW_FT_CURR_SELECT_VAR1 ' $R2_HW_FT_CURR_SELECT_VAR1
	show '&cur_eom ' &cur_eom
	show '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA ' $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
	show '$R2_WHERE_VAL_COMP_PAY_UNION_CD ' $R2_WHERE_VAL_COMP_PAY_UNION_CD
	show '$R2_WHERE_VAL_DEPT_JOBCODE ' $R2_WHERE_VAL_DEPT_JOBCODE
	show '$var_deptid ' $var_deptid
	show '$GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA ' $GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA
	show '$X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA ' $X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA


Begin-Select
![$R2_HW_FT_CURR_SELECT_VAR1]	&curr_pt_ne_rgn_cd
a.deptid			&curr_pt_ne_deptid
count(a.emplid)			&curr_pt_ne_count				!&curr_pt_ne_count

	Move &curr_pt_ne_count to #curr_pt_ne_count_db
	show '#curr_pt_ne_count_db ' #curr_pt_ne_count_db
	
  from ps_job a, ps_jobcode_tbl c, ps_gex_dept_tbl d
 where [$R2_HW_FT_CURR_WHERE_UNION_RGN_DEPT]
      and d.setid = 'COMMN'
   and d.deptid = a.deptid
   AND a.effdt =
      (select max(effdt) from ps_job  
        where emplid = a.emplid
          and empl_rcd = a.empl_rcd
	   and effdt <= &cur_eom)
   and a.effseq =
      (select max(effseq) from ps_job
        where emplid = a.emplid
          and empl_rcd = a.empl_rcd
	   and effdt = a.effdt)
   and c.setid = 'COMMN'
   and c.jobcode = a.jobcode
   and c.effdt = 
      (select max(effdt) from ps_jobcode_tbl  
	  where setid = c.setid
	    and jobcode = c.jobcode
	    and effdt <= &cur_eom)
   and d.effdt =
      (select max(effdt) from ps_gex_dept_tbl 
	  where setid = d.setid
	    and deptid = d.deptid
	    and effdt <= &cur_eom)
  and [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]				!a.empl_status 
  and [$R2_WHERE_VAL_COMP_PAY_UNION_CD]			!a.
  and [$R2_WHERE_VAL_DEPT_JOBCODE]				!a.
  AND [$var_deptid]			! DXS, New Condition
   and not exists 
      (select'X'
	  from ps_health_benefit b
	 where b.emplid = a.emplid
	   and b.empl_rcd = a.empl_rcd
	   and  [$GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA]		!b.
	   and b.effdt <= &cur_eom
	   and b.effdt = 
   	      (select max(effdt)
		   from ps_health_benefit x
		  where x.emplid = b.emplid
		    and x.empl_rcd = b.empl_rcd
		    and [$X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA]
		    and x.cobra_event_id = b.cobra_event_id
		    and x.benefit_nbr = b.benefit_nbr
		    and x.effdt <= &cur_eom))
group by  a.deptid
! [$R2_HW_FT_CURR_SELECT_VAR1], a.deptid

End-Select
	#ifdef debugx 
		do Get-Current-DateTime
		show 'End Time Select-HW_NE_Curr ' $SysDateTime
	#end-if
End-Procedure

!***********************************************************************
!(prev) (HB Waives Terms) Mon Yy  H&W PT/NE 
!***********************************************************************

Begin-Procedure Select-HW_Waives_Prev
	#ifdef debugx
		do Get-Current-DateTime
		show 'Start Time Select-HW_Waives_Prev ' $SysDateTime
	#end-if

	show '$rgn_cd ' $rgn_cd
	show '$deptid ' $deptid
	show '&prev_eom ' &prev_eom
	show '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA ' $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
	show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA ' $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
	show '$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA ' $GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA
	show '$GEXXX916_EXCLUDE_JOBCODE_CRITERIA ' $GEXXX916_EXCLUDE_JOBCODE_CRITERIA
	show '$GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA ' $GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA
	show '$X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA ' $X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA


Begin-Select
d.gex_rgn_cd				   &prev_pt_hbw_rgn_cd
a.deptid				   &prev_pt_hbw_deptid
g.gex_ben_fp				   &prev_pt_hbw_ben_fp
count(a.emplid)				   &prev_pt_hbw_count			!&prev_pt_hbw_count
	
	show '&prev_pt_hbw_count ' &prev_pt_hbw_count

  from ps_job a, ps_health_benefit b, ps_jobcode_tbl c, ps_gex_dept_tbl d,
       ps_ben_prog_partic e, ps_ben_defn_pgm f, ps_ben_defn_optn g
 where D.GEX_RGN_CD = $rgn_cd
   AND   A.DEPTID     = $deptid
      and d.setid = 'COMMN'
   and d.deptid = a.deptid
   AND a.effdt =
      (select max(effdt) from ps_job  
        where emplid = a.emplid
          and empl_rcd = a.empl_rcd
	   and effdt <= &prev_eom)
   and a.effseq =
      (select max(effseq) from ps_job
        where emplid = a.emplid
	   and empl_rcd = a.empl_rcd
	   and effdt = a.effdt)
   and a.emplid = b.emplid
   and a.empl_rcd = b.empl_rcd
   and b.effdt =
      (select max(effdt) from ps_health_benefit x
        where x.emplid = b.emplid
   	   and x.empl_rcd = b.empl_rcd
	   and [$X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA]       !Need to check for(plan_type = (list from run control) or plan_type = (list from run control))
	   and x.cobra_event_id = b.cobra_event_id
	   and x.benefit_nbr = b.benefit_nbr
	   and x.effdt <= &prev_eom)
   and c.setid = 'COMMN'
   and c.jobcode = a.jobcode
   and c.effdt =
      (select max(effdt) from ps_jobcode_tbl
        where setid = c.setid
          and jobcode = c.jobcode
	   and effdt <= &prev_eom)
   and d.effdt =
      (select max(effdt) from ps_gex_dept_tbl
        where setid = d.setid
	   and deptid = d.deptid
	   and effdt <= &prev_eom)
   and e.emplid = b.emplid
   and e.empl_rcd = b.empl_rcd
   and e.cobra_event_id = b.cobra_event_id
   and e.effdt =
      (select max(effdt) from ps_ben_prog_partic
        where emplid = e.emplid
	   and empl_rcd = e.empl_rcd
	   and cobra_event_id = e.cobra_event_id
	   and effdt <= &prev_eom)
   and f.benefit_program = e.benefit_program
   and f.effdt =
      (select max(effdt) from ps_ben_defn_pgm
        where benefit_program = f.benefit_program
	   and effdt <= &prev_eom)
   and g.benefit_program = f.benefit_program
   and g.effdt = f.effdt
   and g.plan_type = b.plan_type
   and g.covrg_cd = b.covrg_cd
   and g.benefit_plan = b.benefit_plan
   and [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]				!a.empl_status 
   and [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA]			!a.
   and [$GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA] 			!b.
   and [$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA]			!c.
   and [$GEXXX916_EXCLUDE_JOBCODE_CRITERIA]				!a.
   and b.coverage_elect in ('W','T')
   AND A.DEPTID NOT BETWEEN '3000' and '3999' ! Added by Deepak, as per changed spec
group by d.gex_rgn_cd, a.deptid, g.gex_ben_fp

End-Select
	#ifdef debugx 
		do Get-Current-DateTime
		show 'End Time Select-HW_Waives_Prev ' $SysDateTime
	#end-if
End-Procedure

!***********************************************************************
!(Curr) (HB Waives Terms) Mon Yy  H&W PT/NE 
!***********************************************************************

Begin-Procedure Select-HW_Waives_Curr
	#ifdef debugx 
		do Get-Current-DateTime
		show 'Start Time Select-HW_Waives_Curr ' $SysDateTime
	#end-if

	do Build-Dynamic-Where		!For Report-1 & Report-2

    show '$R2_HW_FT_CURR_WHERE_UNION_RGN_DEPT ' $R2_HW_FT_CURR_WHERE_UNION_RGN_DEPT
    show '&cur_eom ' &cur_eom
    show '$X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA ' $X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA
    show '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA ' $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
    show '$R2_WHERE_VAL_COMP_PAY_UNION_CD ' $R2_WHERE_VAL_COMP_PAY_UNION_CD
    show '$GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA ' $GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA
    show '$R2_WHERE_VAL_DEPT_JOBCODE ' $R2_WHERE_VAL_DEPT_JOBCODE
    show '$var_deptid ' $var_deptid

Begin-Select
a.deptid				&curr_pt_hbw_deptid
g.gex_ben_fp				&curr_pt_hbw_ben_fp
count(a.emplid)				&curr_pt_hbw_count			  !&curr_pt_hbw_count

	Move &curr_pt_hbw_count to #curr_pt_hbw_count_db
	show '#curr_pt_hbw_count_db ' #curr_pt_hbw_count_db
	
  from ps_job a, ps_health_benefit b, ps_jobcode_tbl c, ps_gex_dept_tbl d,
       ps_ben_prog_partic e, ps_ben_defn_pgm f, ps_ben_defn_optn g
 where [$R2_HW_FT_CURR_WHERE_UNION_RGN_DEPT]
         and d.setid = 'COMMN'
      and d.deptid = a.deptid
   AND a.effdt =
      (select max(effdt) from ps_job  
        where emplid = a.emplid
          and empl_rcd = a.empl_rcd
	   and effdt <= &cur_eom)
   and a.effseq =
      (select max(effseq) from ps_job
        where emplid = a.emplid
	   and empl_rcd = a.empl_rcd
	   and effdt = a.effdt)
   and a.emplid = b.emplid
   and a.empl_rcd = b.empl_rcd
   and b.effdt =
      (select max(effdt) from ps_health_benefit x
        where x.emplid = b.emplid
   	   and x.empl_rcd = b.empl_rcd
	   and [$X_GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA]		!Need to check for(plan_type = (list from run control) or plan_type = (list from run control))	! Need to take care of 
	   and x.cobra_event_id = b.cobra_event_id
	   and x.benefit_nbr = b.benefit_nbr
	   and x.effdt <= &cur_eom)
   and c.setid = 'COMMN'
   and c.jobcode = a.jobcode
   and c.effdt =
      (select max(effdt) from ps_jobcode_tbl
        where setid = c.setid
          and jobcode = c.jobcode
	   and effdt <= &cur_eom)
   and d.effdt =
      (select max(effdt) from ps_gex_dept_tbl
        where setid = d.setid
	   and deptid = d.deptid
	   and effdt <= &cur_eom)
   and e.emplid = b.emplid
   and e.empl_rcd = b.empl_rcd
   and e.cobra_event_id = b.cobra_event_id
   and e.effdt =
      (select max(effdt) from ps_ben_prog_partic
        where emplid = e.emplid
	   and empl_rcd = e.empl_rcd
	   and cobra_event_id = e.cobra_event_id
	   and effdt <= &cur_eom)
   and f.benefit_program = e.benefit_program
   and f.effdt =
      (select max(effdt) from ps_ben_defn_pgm
        where benefit_program = f.benefit_program
	   and effdt <= &cur_eom)
   and g.benefit_program = f.benefit_program
   and g.effdt = f.effdt
   and g.plan_type = b.plan_type
   and g.covrg_cd = b.covrg_cd
   and g.benefit_plan = b.benefit_plan
   and [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]				!a.empl_status 
   and [$R2_WHERE_VAL_COMP_PAY_UNION_CD]			!a.
   and [$GEXXX917_INCLUDE_PENSION_PLAN_TYPE_CRITERIA] 			!b.
   and b.coverage_elect in ('W','T')			!c.
   and [$R2_WHERE_VAL_DEPT_JOBCODE]				!a.
   AND [$var_deptid]			! DXS, New condition
 group by  a.deptid, g.gex_ben_fp 

End-Select

if #report_num=1
	Let #prev_hw_ptne_count  =  #prev_hw_pt_count + &prev_pt_ne_count + &prev_pt_hbw_count
	show '#prev_hw_pt_count  ' #prev_hw_pt_count 
	show '&prev_pt_ne_count  ' &prev_pt_ne_count 
	show '&prev_pt_hbw_count ' &prev_pt_hbw_count
	show '#prev_hw_ptne_count ' #prev_hw_ptne_count

	Let #curr_hw_ptne_count  =  #curr_hw_pt_count + #curr_pt_ne_count_db + #curr_pt_hbw_count_db
	show '#curr_hw_pt_count ' #curr_hw_pt_count
	show '#curr_pt_ne_count_db ' #curr_pt_ne_count_db
	show '#curr_pt_hbw_count_db ' #curr_pt_hbw_count_db
	show '#curr_hw_ptne_count ' #curr_hw_ptne_count

	Let #prev_hw_tot_count = #prev_hw_ft_count + #prev_hw_ptne_count  
	Let #curr_hw_tot_count = #curr_hw_ft_count + #curr_hw_ptne_count
Else
	!Let #prev_hw_ptne_count_r2  =  #prev_hw_pt_count_r2 + &prev_pt_ne_count + &prev_pt_hbw_count
	show 'Before #curr_hw_ptne_count_r2  ' #curr_hw_ptne_count_r2  
	show '#curr_hw_pt_count_r2 ' #curr_hw_pt_count_r2
	show '#curr_pt_ne_count_db ' #curr_pt_ne_count_db
	show '#curr_pt_hbw_count_db ' #curr_pt_hbw_count_db
	Let #curr_hw_ptne_count_r2  =  #curr_hw_pt_count_r2 + #curr_pt_ne_count_db + #curr_pt_hbw_count_db ! DXS
	show 'After #curr_hw_ptne_count_r2  ' #curr_hw_ptne_count_r2  
	
	Let #curr_hw_tot_count_r2 = #curr_hw_ft_count_r2 + #curr_hw_ptne_count_r2
	!Let #prev_hw_tot_count_r2 = #prev_hw_ft_count_r2 + #prev_hw_ptne_count_r2  
End-if

	#debugx show '#curr_hw_ptne_count_r2 ' #curr_hw_ptne_count_r2
	#debugx show '#curr_hw_tot_count_r2 '  #curr_hw_tot_count_r2

	#ifdef debugx
		do Get-Current-DateTime
		show 'End Time Select-HW_Waives_Curr ' $SysDateTime
	#end-if
End-Procedure

!***********************************************************************
! Procedure selects Beginning total no. of employees 
!***********************************************************************
Begin-Procedure Select-Begin-Jobs

Let $GEXXX938_Manager_Level_Alias = 'B.MANAGER_LEVEL'                
    Do GEXXX938-Select-Manager_Level-Parameters    
    
 show 'Doing Select-Beg-Count-Curr'
 do Select-Beg-Count-Curr
 show 'Doing Select-Beg-Count-Prev'
  do Select-Beg-Count-Prev

End-Procedure


!***********************************************************************
!(curr) Begin Count (prev fiscal) Month Yyyy 
!***********************************************************************

Begin-Procedure Select-Beg-Count-Curr
	#ifdef debugx 
		do Get-Current-DateTime
		show 'Start Time Select-Beg-Count-Curr ' $SysDateTime	
		show '$rgn_cd ' $rgn_cd
		show '$deptid ' $deptid
		show '&cur_fy ' &cur_fy
		show '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA ' $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
		show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA ' $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
		show '$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA ' $GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA
		show '$GEXXX916_EXCLUDE_JOBCODE_CRITERIA ' $GEXXX916_EXCLUDE_JOBCODE_CRITERIA
	#end-if

Begin-Select
C.GEX_RGN_CD				   &curr_bgncnt_rgn_cd
A.DEPTID				   &curr_bgncnt_deptid
COUNT(*)				   &curr_bgncnt_count			!#curr_bgncnt_count

		Move &curr_bgncnt_count to #curr_bgncnt_count
		show '#curr_bgncnt_count ' #curr_bgncnt_count

  FROM PS_JOB A, PS_JOBCODE_TBL B, PS_GEX_DEPT_TBL C
 WHERE C.GEX_RGN_CD = $rgn_cd
   AND   A.DEPTID     = $deptid
      AND C.SETID = A.SETID_DEPT
      AND C.DEPTID = A.DEPTID
   AND A.EFFDT =
      (SELECT MAX(A_ED.EFFDT) FROM PS_JOB A_ED
        WHERE A.EMPLID = A_ED.EMPLID
          AND A.EMPL_RCD = A_ED.EMPL_RCD
          AND A_ED.EFFDT <= &cur_fy)		! DXS, old value &cur_eom)
   AND A.EFFSEQ =
      (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES
        WHERE A.EMPLID = A_ES.EMPLID
          AND A.EMPL_RCD = A_ES.EMPL_RCD
          AND A.EFFDT = A_ES.EFFDT)
   AND B.SETID = A.SETID_JOBCODE
   AND B.JOBCODE = A.JOBCODE
   AND B.EFFDT =
      (SELECT MAX(B_ED.EFFDT) FROM PS_JOBCODE_TBL B_ED
        WHERE B.SETID = B_ED.SETID
          AND B.JOBCODE = B_ED.JOBCODE
          AND B_ED.EFFDT <= SYSDATE)
   AND C.EFFDT =
      (SELECT MAX(C_ED.EFFDT) FROM PS_GEX_DEPT_TBL C_ED
        WHERE C.SETID = C_ED.SETID
          AND C.DEPTID = C_ED.DEPTID
          AND C_ED.EFFDT <= SYSDATE)
   AND [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]		!A.
   AND [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA]	!A.
   AND [$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA]	!B
   AND [$GEXXX916_EXCLUDE_JOBCODE_CRITERIA]		!A.
   AND A.DEPTID NOT BETWEEN '3000' and '3999' ! Added by Deepak, as per changed spec
GROUP BY C.GEX_RGN_CD, A.DEPTID
ORDER BY 1, 2
End-Select
    	#ifdef debugx
		do Get-Current-DateTime
		show 'End Time Select-Beg-Count-Curr ' $SysDateTime
	#end-if
End-Procedure


!***********************************************************************
!(prev) Begin Count (prev fiscal) Month Yyyy 
!***********************************************************************

Begin-Procedure Select-Beg-Count-Prev
	#ifdef debugx 
		do Get-Current-DateTime
		show 'Start Time Select-Beg-Count-Prev ' $SysDateTime
		show '$rgn_cd ' $rgn_cd
		show '$deptid ' $deptid
		show '&prev_fy ' &prev_fy
		show '$GEXXX903_INCLUDE_EMP_STAT_CRITERIA ' $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
		show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA ' $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
		show '$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA ' $GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA
		show '$GEXXX916_EXCLUDE_JOBCODE_CRITERIA ' $GEXXX916_EXCLUDE_JOBCODE_CRITERIA
	#end-if

Begin-Select
C.GEX_RGN_CD				&prev_bgncnt_rgn_cd
A.DEPTID				&prev_bgncnt_deptid
COUNT(*)				&prev_bgncnt_count			    

	move &prev_bgncnt_count to #prev_bgncnt_count					!#prev_bgncnt_count
	show '#prev_bgncnt_count ' #prev_bgncnt_count

  FROM PS_JOB A, PS_JOBCODE_TBL B, PS_GEX_DEPT_TBL C
 WHERE C.GEX_RGN_CD = $rgn_cd
   AND   A.DEPTID     = $deptid
      AND C.SETID = A.SETID_DEPT
   AND C.DEPTID = A.DEPTID
   AND A.EFFDT =
      (SELECT MAX(A_ED.EFFDT) FROM PS_JOB A_ED
        WHERE A.EMPLID = A_ED.EMPLID
          AND A.EMPL_RCD = A_ED.EMPL_RCD
          AND A_ED.EFFDT <= &prev_fy)			! DXS, old value &prev_eom)
   AND A.EFFSEQ =
      (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES
        WHERE A.EMPLID = A_ES.EMPLID
          AND A.EMPL_RCD = A_ES.EMPL_RCD
          AND A.EFFDT = A_ES.EFFDT)
   AND B.SETID = A.SETID_JOBCODE
   AND B.JOBCODE = A.JOBCODE
   AND B.EFFDT =
      (SELECT MAX(B_ED.EFFDT) FROM PS_JOBCODE_TBL B_ED
        WHERE B.SETID = B_ED.SETID
          AND B.JOBCODE = B_ED.JOBCODE
          AND B_ED.EFFDT <= SYSDATE)
   AND C.EFFDT =
      (SELECT MAX(C_ED.EFFDT) FROM PS_GEX_DEPT_TBL C_ED
        WHERE C.SETID = C_ED.SETID
          AND C.DEPTID = C_ED.DEPTID
          AND C_ED.EFFDT <= SYSDATE)
   AND [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]		!A.
   AND [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA]	!A.
   AND [$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA]	!B
   AND [$GEXXX916_EXCLUDE_JOBCODE_CRITERIA]		!A.
   AND A.DEPTID NOT BETWEEN '3000' and '3999' ! Added by Deepak, as per changed spec
GROUP BY C.GEX_RGN_CD, A.DEPTID
ORDER BY 1, 2
End-Select
	#ifdef debugx 
		do Get-Current-DateTime
		show 'End Time Select-Beg-Count-Prev ' $SysDateTime
	#end-if
End-Procedure


!***********************************************************************
! Procedure selects Beginning total no. of employees 
!***********************************************************************
Begin-Procedure Select-Terms-Fiscal

!***********Builds the Where clause for JOBCODE, COMPANY_PAYGROUP, MANAGER_LEVEL, EMPL_STATUS

Let $GEXXX938_Manager_Level_Alias = 'D.MANAGER_LEVEL'                
    Do GEXXX938-Select-Manager_Level-Parameters  

show 'Doing Select-Term-Prev'
do Select-Term-Prev
show 'Doing Select-Term-Curr'
do Select-Term-Curr

if #prev_bgncnt_count <> 0
	 Let #prev_turnover_fiscal= ( #prev_term_count / #prev_bgncnt_count ) * 100
end-if

show '#prev_turnover_fiscal' #prev_turnover_fiscal
show '#prev_term_count' #prev_term_count
show '#prev_bgncnt_count' #prev_bgncnt_count

if #curr_bgncnt_count <> 0
      Let #curr_turnover_fiscal= ( #curr_term_count / #curr_bgncnt_count ) * 100
end-if

End-Procedure

!***********************************************************************
!(prev) Term Fiscal YTD
!***********************************************************************

Begin-Procedure Select-Term-Prev
	#ifdef debugx
		do Get-Current-DateTime
		show 'Start Time Select-Term-Prev ' $SysDateTime
	#end-if

		show '$rgn_cd ' $rgn_cd
		show '$deptid ' $deptid
		show '&prev_fy ' &prev_fy
		show '&prev_eom ' &prev_eom
		show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA ' $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
		show '$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA ' $GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA
		show '$GEXXX916_EXCLUDE_JOBCODE_CRITERIA ' $GEXXX916_EXCLUDE_JOBCODE_CRITERIA


Begin-Select
C.GEX_RGN_CD				   &prev_term_rgn_cd
A.DEPTID				   &prev_term_deptid
COUNT(*)				   &prev_term_count		       !&prev_term_count

	Move &prev_term_count to #prev_term_count
	show '#prev_term_count ' #prev_term_count


  FROM PS_JOB A, PS_EMPLOYMENT B, PS_GEX_DEPT_TBL C, 
       PS_JOBCODE_TBL D
 WHERE C.GEX_RGN_CD = $rgn_cd
   AND   A.DEPTID     = $deptid
   AND C.SETID = A.SETID_DEPT
   AND C.DEPTID = A.DEPTID
   AND A.EFFDT =
      (SELECT MAX(A_ED.EFFDT) FROM PS_JOB A_ED
        WHERE A.EMPLID = A_ED.EMPLID
          AND A.EMPL_RCD = A_ED.EMPL_RCD
          AND A_ED.EFFDT <= SYSDATE)
   AND A.EFFSEQ =
      (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES
        WHERE A.EMPLID = A_ES.EMPLID
          AND A.EMPL_RCD = A_ES.EMPL_RCD
          AND A.EFFDT = A_ES.EFFDT)
   AND A.EMPLID = B.EMPLID
   AND A.EMPL_RCD = B.EMPL_RCD
   AND C.EFFDT =
      (SELECT MAX(C_ED.EFFDT) FROM PS_GEX_DEPT_TBL C_ED
        WHERE C.SETID = C_ED.SETID
          AND C.DEPTID = C_ED.DEPTID
          AND C_ED.EFFDT <= SYSDATE)
   AND D.SETID = A.SETID_JOBCODE
   AND D.JOBCODE = A.JOBCODE
   AND D.EFFDT =
      (SELECT MAX(D_ED.EFFDT) FROM PS_JOBCODE_TBL D_ED
        WHERE D.SETID = D_ED.SETID
          AND D.JOBCODE = D_ED.JOBCODE
          AND D_ED.EFFDT <= SYSDATE)
   AND [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA]	!A.
   AND [$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA]	!D
   AND [$GEXXX916_EXCLUDE_JOBCODE_CRITERIA]		!A.
   AND B.TERMINATION_DT BETWEEN &prev_fy AND &prev_eom
   AND A.DEPTID NOT BETWEEN '3000' and '3999' ! Added by Deepak, as per changed spec
GROUP BY C.GEX_RGN_CD, A.DEPTID
ORDER BY 1, 2

End-Select
	#ifdef debugx 
		do Get-Current-DateTime
		show 'End Time Select-Term-Prev ' $SysDateTime
	#end-if
End-Procedure

!***********************************************************************
!(curr) Term Fiscal YTD
!***********************************************************************

Begin-Procedure Select-Term-Curr
	#ifdef debugx 
		do Get-Current-DateTime
		show 'Start Time Select-Term-Curr ' $SysDateTime
	#end-if

	show '$rgn_cd ' $rgn_cd
	show '$deptid ' $deptid
	show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA ' $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
	show '$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA ' $GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA
	show '$GEXXX916_EXCLUDE_JOBCODE_CRITERIA ' $GEXXX916_EXCLUDE_JOBCODE_CRITERIA
        show '&cur_fy ' &cur_fy  
	show '&cur_eom ' &cur_eom

Begin-Select
C.GEX_RGN_CD				      &curr_term_rgn_cd
A.DEPTID				      &curr_term_deptid
COUNT(*)				      &curr_term_count			

	Move &curr_term_count to #curr_term_count				!#curr_term_count
	show '#curr_term_count ' #curr_term_count

  FROM PS_JOB A, PS_EMPLOYMENT B, PS_GEX_DEPT_TBL C, 
       PS_JOBCODE_TBL D
 WHERE C.GEX_RGN_CD = $rgn_cd
   AND   A.DEPTID     = $deptid
      AND C.SETID = A.SETID_DEPT
   AND C.DEPTID = A.DEPTID
   AND A.EFFDT =
      (SELECT MAX(A_ED.EFFDT) FROM PS_JOB A_ED
        WHERE A.EMPLID = A_ED.EMPLID
          AND A.EMPL_RCD = A_ED.EMPL_RCD
          AND A_ED.EFFDT <= SYSDATE)
   AND A.EFFSEQ =
      (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES
        WHERE A.EMPLID = A_ES.EMPLID
          AND A.EMPL_RCD = A_ES.EMPL_RCD
          AND A.EFFDT = A_ES.EFFDT)
   AND A.EMPLID = B.EMPLID
   AND A.EMPL_RCD = B.EMPL_RCD
   AND C.EFFDT =
      (SELECT MAX(C_ED.EFFDT) FROM PS_GEX_DEPT_TBL C_ED
        WHERE C.SETID = C_ED.SETID
          AND C.DEPTID = C_ED.DEPTID
          AND C_ED.EFFDT <= SYSDATE)
   AND D.SETID = A.SETID_JOBCODE
   AND D.JOBCODE = A.JOBCODE
   AND D.EFFDT =
      (SELECT MAX(D_ED.EFFDT) FROM PS_JOBCODE_TBL D_ED
        WHERE D.SETID = D_ED.SETID
          AND D.JOBCODE = D_ED.JOBCODE
          AND D_ED.EFFDT <= SYSDATE)
   AND [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA]	!A.
   AND [$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA]	!D
   AND [$GEXXX916_EXCLUDE_JOBCODE_CRITERIA]		!A.
   AND B.TERMINATION_DT BETWEEN &cur_fy  AND &cur_eom
   AND A.DEPTID NOT BETWEEN '3000' and '3999' ! Added by Deepak, as per changed spec
GROUP BY C.GEX_RGN_CD, A.DEPTID
ORDER BY 1, 2

End-Select

	#ifdef debugx
		do Get-Current-DateTime
		show 'End Time Select-Term-Curr ' $SysDateTime	
	#end-if
End-Procedure



!***********************************************************************
! Calcualtion of Subtoatals
!***********************************************************************
Begin-Procedure Calculate_Subtotal

Let #subtot_prev_ft_count	= #subtot_prev_ft_count		+  #prev_ft_count				
Let #subtot_prev_pt_count	= #subtot_prev_pt_count		+  #prev_pt_count				
Let #subtot_prev_tot_ftpt_count	= #subtot_prev_tot_ftpt_count	+  #prev_tot_ftpt_count			
Let #subtot_curr_ft_count	= #subtot_curr_ft_count		+  #curr_ft_count				
Let #subtot_curr_pt_count	= #subtot_curr_pt_count		+  #curr_pt_count				
Let #subtot_curr_tot_ftpt_count	= #subtot_curr_tot_ftpt_count	+  #curr_tot_ftpt_count			
Let #subtot_prev_ytd_wages	= #subtot_prev_ytd_wages	+  #prev_ytd_wages			
Let #subtot_curr_ytd_wages	= #subtot_curr_ytd_wages	+  #curr_ytd_wages			
Let #subtot_prev_hw_ft_count	= #subtot_prev_hw_ft_count	+  #prev_hw_ft_count			
Let #subtot_prev_hw_ptne_count	= #subtot_prev_hw_ptne_count	+  #prev_hw_ptne_count			
Let #subtot_prev_hw_tot_count	= #subtot_prev_hw_tot_count	+  #prev_hw_tot_count			
Let #subtot_curr_hw_ft_count	= #subtot_curr_hw_ft_count	+  #curr_hw_ft_count			
Let #subtot_curr_hw_ptne_count	= #subtot_curr_hw_ptne_count	+  #curr_hw_ptne_count			
Let #subtot_curr_hw_tot_count	= #subtot_curr_hw_tot_count	+  #curr_hw_tot_count			
Let #subtot_prev_bgncnt_count	= #subtot_prev_bgncnt_count	+  #prev_bgncnt_count			
Let #subtot_prev_term_count	= #subtot_prev_term_count	+  #prev_term_count			

if #subtot_prev_bgncnt_count <> 0
   Let #subtot_prev_turnover_fiscal= (#subtot_prev_term_count / #subtot_prev_bgncnt_count) * 100	
end-if

Let #subtot_curr_bgncnt_count	= #subtot_curr_bgncnt_count	+  #curr_bgncnt_count			
Let #subtot_curr_term_count	= #subtot_curr_term_count	+  #curr_term_count			

if #subtot_curr_bgncnt_count <> 0
   Let #subtot_curr_turnover_fiscal= (#subtot_curr_term_count / #subtot_curr_bgncnt_count) * 100
end-if

End-Procedure


!***********************************************************************
! Print & Initialization of Subtotal's to Zero
!***********************************************************************
Begin-Procedure Print-Subtotal

! ------------Print subtotals 

	!print	      	 &region_cd				(+0,{#column1})
    	!print	      	 $deptid				(+0,{#column2})
    	print	      	 #subtot_prev_ft_count			(+0,{#column3})
    	print	      	 #subtot_prev_pt_count			(+0,{#column4})
    	print	      	 #subtot_prev_tot_ftpt_count		(+0,{#column5})
    	print	      	 #subtot_curr_ft_count			(+0,{#column6}) 
    	print	      	 #subtot_curr_pt_count			(+0,{#column7})
    	print	      	 #subtot_curr_tot_ftpt_count		(+0,{#column8})
    	print	      	 #subtot_prev_ytd_wages			(+0,{#column9})
    	print	      	 #subtot_curr_ytd_wages			(+0,{#column10})
    	print	      	 #subtot_prev_hw_ft_count		(+0,{#column11})
    	print	      	 #subtot_prev_hw_ptne_count		(+0,{#column12})
    	print	      	 #subtot_prev_hw_tot_count		(+0,{#column13})
    	print	      	 #subtot_curr_hw_ft_count		(+0,{#column14})
    	print	      	 #subtot_curr_hw_ptne_count		(+0,{#column15})
    	print	      	 #subtot_curr_hw_tot_count		(+0,{#column16})
	print	      	 #subtot_prev_bgncnt_count		(+0,{#column17})
	print		 #subtot_prev_term_count		(+0,{#column18})
	print		 #subtot_prev_turnover_fiscal		(+0,{#column19})
	print		 #subtot_curr_bgncnt_count		(+0,{#column20})
	print		 #subtot_curr_term_count		(+0,{#column21})
	print		 #subtot_curr_turnover_fiscal		(+0,{#column22})

do Initialize-Subtotal

End-Procedure


!***********************************************************************
! Prints Data
!***********************************************************************
Begin-Procedure Print-Data
	!#debugx show $deptid		
	 move &deptid to $deptid
 let $deptid = '="' || $deptid || '"'

   	print	      	 &region_cd				(+4,{#column1})
    	print	      	 $deptid				(+0,{#column2})
    	print	      	 #prev_ft_count				(+0,{#column3})
    	print	      	 #prev_pt_count				(+0,{#column4})
    	print	      	 #prev_tot_ftpt_count			(+0,{#column5})
    	print	      	 #curr_ft_count				(+0,{#column6}) 
    	print	      	 #curr_pt_count				(+0,{#column7})
    	print	      	 #curr_tot_ftpt_count			(+0,{#column8})
      ! IS Req 1674 2014-09-05 Ramesh Solai BEGIN 
      ! !* YTD Wages columns to be removed in a.csv. *!
      ! print	      	 #prev_ytd_wages			(+0,{#column9})
      ! print	      	 #curr_ytd_wages			(+0,{#column10})
      ! IS Req 1674 2014-09-05 Ramesh Solai END
    	print	      	 #prev_hw_ft_count			(+0,{#column11})
    	print	      	 #prev_hw_ptne_count			(+0,{#column12})
    	print	      	 #prev_hw_tot_count			(+0,{#column13})
    	print	      	 #curr_hw_ft_count			(+0,{#column14})
    	print	      	 #curr_hw_ptne_count			(+0,{#column15})
    	print	      	 #curr_hw_tot_count			(+0,{#column16})
      ! IS Req 1674 2014-09-05 Ramesh Solai BEGIN 
      ! !* Turnover details to be removed in a.csv. *!
      ! print	      	 #prev_bgncnt_count			(+0,{#column17})
      ! print		 #prev_term_count			(+0,{#column18})
      ! print		 #prev_turnover_fiscal			(+0,{#column19})
      ! print		 #curr_bgncnt_count			(+0,{#column20})
      ! print		 #curr_term_count			(+0,{#column21})
      ! print		 #curr_turnover_fiscal			(+0,{#column22})
      ! IS Req 1674 2014-09-05 Ramesh Solai END

End-Procedure


!*****************************************************************************************
!(Report-2). Retrieve "Multiple" Jobcode Run Controls and return formatted where clause
!*****************************************************************************************
Begin-Procedure GEXXX-Select-Jobcode-Parameters_R2

  Let $OprID_R2               = '''' || $Prcs_OprID       || ''''
  Let $Run_Cntl_ID_R2         = '''' || $Prcs_Run_Cntl_ID || ''''
  Let #GEX_RC_JOBCODE_ROWS_R2 = 0
  Let $GEXXX_INCLUDE_JOBCODE_CRITERIA = ''
  Let $GEXXX_EXCLUDE_JOBCODE_CRITERIA = ''
  Let $GEXXX_INCLUDE_JOBCODE_DISPLAY_CRITERIA = 'ALL'
  Let $GEXXX_EXCLUDE_JOBCODE_DISPLAY_CRITERIA = 'NONE'

Begin-Select

GEX_RC_JOBCAT.JOBCODE

  Add 1 To #GEX_RC_JOBCODE_ROWS_R2

  If #GEX_RC_JOBCODE_ROWS_R2 = 1
    Let $GEXXX_INCLUDE_JOBCODE_CRITERIA = '(' || $GEXXX_Jobcode_Alias || ' In ('''     || &GEX_RC_JOBCAT.JOBCODE || ''''
    Let $GEXXX_EXCLUDE_JOBCODE_CRITERIA = '(' || $GEXXX_Jobcode_Alias || ' Not In (''' || &GEX_RC_JOBCAT.JOBCODE || ''''
  Else
    Let $GEXXX_INCLUDE_JOBCODE_CRITERIA = $GEXXX_INCLUDE_JOBCODE_CRITERIA || ',''' || &GEX_RC_JOBCAT.JOBCODE  || ''''
    Let $GEXXX_EXCLUDE_JOBCODE_CRITERIA = $GEXXX_EXCLUDE_JOBCODE_CRITERIA || ',''' || &GEX_RC_JOBCAT.JOBCODE  || ''''
  End-If

From  PS_GEX_RC_JOBCAT GEX_RC_JOBCAT

Where GEX_RC_JOBCAT.OPRID                = [$OprID_R2]
And   GEX_RC_JOBCAT.RUN_CNTL_ID          = [$Run_Cntl_ID_R2]
And   Rtrim(GEX_RC_JOBCAT.JOBCODE, ' ') != ' '

End-Select

  If #GEX_RC_JOBCODE_ROWS_R2 = 0
    Let $GEXXX_INCLUDE_JOBCODE_CRITERIA = $GEXXX_Jobcode_Alias || ' = ' || $GEXXX_Jobcode_Alias
    Let $GEXXX_EXCLUDE_JOBCODE_CRITERIA = $GEXXX_Jobcode_Alias || ' = ' || $GEXXX_Jobcode_Alias
  Else
    Let $GEXXX_INCLUDE_JOBCODE_CRITERIA = $GEXXX_INCLUDE_JOBCODE_CRITERIA || '))'
    Let $GEXXX_EXCLUDE_JOBCODE_CRITERIA = $GEXXX_EXCLUDE_JOBCODE_CRITERIA || '))'
    Let $GEXXX_INCLUDE_JOBCODE_DISPLAY_CRITERIA = $GEXXX_INCLUDE_JOBCODE_CRITERIA
    Let $GEXXX_EXCLUDE_JOBCODE_DISPLAY_CRITERIA = $GEXXX_EXCLUDE_JOBCODE_CRITERIA
  End-If

End-Procedure

!***********************************************************************
! (2nd-Report) Procedure selects data for COD 
!***********************************************************************

Begin-Procedure Select-Data2

Let $GEXXX_Jobcode_Alias = 'B.JOBCODE'
	do GEXXX-Select-Jobcode-Parameters_R2
Let $GEXXX913_UNION_CD_Alias = 'A.UNION_CD'                          
    Do GEXXX913-Select-UNION-CD-Parameters 

	Let $ce2_ce3_flg='F'
	
	do Initialize-Subtotal2



Begin-Select Distinct
/*+ index(C PS_GEX_DEPT_TBL) */
A.UNION_CD 		       &union_cd_r2
A.DEPTID			&deptid_r2			
COUNT (*)			&count_r2

	Move &union_cd_r2 to $union_cd_r2	
	Move &deptid_r2 to $deptid_r2
	show ' '
       show '************************************'
       show ' '
       show 'Doing Initialize-Data2'
       do Initialize-Data2
       show 'Doing Select-Row2'
       do Select-Row2
       show 'Doing Print-Data2'
       do Print-Data2
       
FROM PS_JOB A, 
       PS_JOBCODE_TBL B, 
       PS_GEX_DEPT_TBL F
  WHERE A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_JOB A_ED
        WHERE A.EMPLID = A_ED.EMPLID
          AND A.EMPL_RCD = A_ED.EMPL_RCD
         AND A_ED.EFFDT <= &cur_eom)
    AND A.EFFSEQ =
        (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES
        WHERE A.EMPLID = A_ES.EMPLID
          AND A.EMPL_RCD = A_ES.EMPL_RCD
          AND A.EFFDT = A_ES.EFFDT)
     AND B.SETID = A.SETID_JOBCODE
     AND B.JOBCODE = A.JOBCODE
     AND B.EFFDT =
        (SELECT MAX(B_ED.EFFDT) FROM PS_JOBCODE_TBL B_ED
        WHERE B.SETID = B_ED.SETID
          AND B.JOBCODE = B_ED.JOBCODE
          AND B_ED.EFFDT <= SYSDATE)
     AND F.SETID = A.SETID_DEPT
     AND F.DEPTID = A.DEPTID
     AND F.EFFDT =
        (SELECT MAX(F_ED.EFFDT) FROM PS_GEX_DEPT_TBL F_ED
        WHERE F.SETID = F_ED.SETID
          AND F.DEPTID = F_ED.DEPTID
          AND F_ED.EFFDT <= SYSDATE)
     AND [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]		!A.
     AND [$GEXXX913_INCLUDE_UNION_CD_CRITERIA]		!A.		
     AND (([$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA]		!B.
     		AND [$GEXXX916_EXCLUDE_JOBCODE_CRITERIA])	!A.
	  or [$GEXXX_INCLUDE_JOBCODE_CRITERIA])			!B.
   AND a.deptid not like 'C%'		! DXS, newly added condition only for b report.
  GROUP BY  A.UNION_CD,  A.DEPTID
  ORDER BY 1, 2
End-Select

!For condition of Printing Subtotal of CE2 & CE3 together
	if $ce2_ce3_flg='T'
		Let $print_union_cd_r2= 'CE2 + CE3 Totals:'
		Print $print_union_cd_r2  (+1,1)
	 	do Print-Subtotal2
		Let $ce2_ce3_flg='F'
	Else
		Let $print_union_cd_r2= $union_cd_r2_old || ' Totals:'
		Print $print_union_cd_r2  (+1,1)
	 	do Print-Subtotal2
	End-If

End-Procedure

!***********************************************************************
! (Report-2) Initialization of Data
!***********************************************************************
Begin-Procedure Initialize-Data2                          
	
Let	#curr_ft_count_r2 	= 0
Let	#curr_pt_count_r2	= 0
Let	#curr_tot_ftpt_count_r2 = 0
Let	#curr_hw_ft_count_r2	= 0
Let	#curr_hw_pt_count_r2	= 0
Let	#curr_hw_ptne_count_r2  = 0 
Let	#curr_hw_tot_count_r2   = 0
Let     #curr_ftpt_count_db     = 0
let     #curr_hw_ftpt_count_db  = 0				
let     #curr_pt_ne_count_db    = 0
let     #curr_pt_hbw_count_db   = 0

End-Procedure


!***********************************************************************
! (Report-2) Main Procedure which selects the data.
!***********************************************************************
Begin-Procedure Select-Row2

	let $var_deptid = ' a.deptid not like ''' || 'C%' || ''''	! DXS, new condition, initialize
	show '$var_deptid  ' $var_deptid 

	show 'Doing Select-FT_PT_Count_Curr'
	do Select-FT_PT_Count_Curr
	show 'Doing Select-HW_FT_Curr'
	do Select-HW_FT_Curr
	show 'Doing Select-HW_NE_Curr'
	do Select-HW_NE_Curr
	show 'Doing Select-HW_Waives_Curr'
	do Select-HW_Waives_Curr	!Note:- Calculation of all totals for H&W happens here
	
	
	 if $union_cd_r2_old<>' ' and $union_cd_r2_old <> $union_cd_r2
		show 'Doing sub-total printing ' 	
		!For condition of Printing Subtotal of CE2 & CE3 together
	 	if $union_cd_r2_old='CE2' and $union_cd_r2='CE3'
			Let $ce2_ce3_flg='T'
		else
			if $ce2_ce3_flg='T'
				Let $print_union_cd_r2= 'CE2 + CE3 Totals:'
				Print $print_union_cd_r2  (+1,1)
	 			do Print-Subtotal2
				Let $ce2_ce3_flg='F'
			else
				Let $print_union_cd_r2= $union_cd_r2_old || ' Totals:'
				Print $print_union_cd_r2  (+1,1)
	 			do Print-Subtotal2
			end-if			
		end-if
		
	 End-if
	 
	 Let $union_cd_r2_old = $union_cd_r2
	 
	 do Calculate_Subtotal2
	 
	 #ifdef debugx 
	 		do Get-Current-DateTime
	  		show 'End Select-Row2 ' $SysDateTime
	#end-if
	
End-Procedure

!***********************************************************************
! (Report-2)Calcualtion of Subtoatals
!***********************************************************************
Begin-Procedure Calculate_Subtotal2

Let #subtot_curr_ft_count_r2		= #subtot_curr_ft_count_r2       +  #curr_ft_count_r2				
Let #subtot_curr_pt_count_r2		= #subtot_curr_pt_count_r2	 +  #curr_pt_count_r2				
Let #subtot_curr_tot_ftpt_count_r2	= #subtot_curr_tot_ftpt_count_r2 +  #curr_tot_ftpt_count_r2			
Let #subtot_curr_hw_ft_count_r2		= #subtot_curr_hw_ft_count_r2	 +  #curr_hw_ft_count_r2			
Let #subtot_curr_hw_ptne_count_r2	= #subtot_curr_hw_ptne_count_r2	 +  #curr_hw_ptne_count_r2			
Let #subtot_curr_hw_tot_count_r2	= #subtot_curr_hw_tot_count_r2	 +  #curr_hw_tot_count_r2			


End-Procedure

!***********************************************************************
! (Report-2)Print of Subtotal's
!***********************************************************************
Begin-Procedure Print-Subtotal2

! ------------Print subtotals 
    	print	      	 #subtot_curr_ft_count_r2		(+0,{#column3}) 
    	print	      	 #subtot_curr_pt_count_r2		(+0,{#column4})
    	print	      	 #subtot_curr_tot_ftpt_count_r2		(+0,{#column5})
    	print	      	 #subtot_curr_hw_ft_count_r2		(+0,{#column6})
    	print	      	 #subtot_curr_hw_ptne_count_r2		(+0,{#column7})
    	print	      	 #subtot_curr_hw_tot_count_r2		(+0,{#column8})

do Initialize-Subtotal2

End-Procedure

!***********************************************************************
!(Report-2) Initialization of Subtotal's to Zero
!***********************************************************************

Begin-Procedure  Initialize-Subtotal2

Let	#subtot_curr_ft_count_r2	    =  0
Let	#subtot_curr_pt_count_r2	    =  0
Let	#subtot_curr_tot_ftpt_count_r2	    =  0
Let	#subtot_curr_hw_ft_count_r2	    =  0
Let	#subtot_curr_hw_ptne_count_r2	    =  0
Let	#subtot_curr_hw_tot_count_r2	    =  0

End-Procedure


!***********************************************************************
! Prints Data
!***********************************************************************
Begin-Procedure Print-Data2
	!#debugx show $deptid		
	 move &deptid_r2 to $deptid_r2
 let $deptid_r2 = '="' || $deptid_r2 || '"'
 
   	print	      	 $union_cd_r2				(+4,{#column1})
    	print	      	 $deptid_r2				(+0,{#column2})
    	print	      	 #curr_ft_count_r2			(+0,{#column3}) 
    	print	      	 #curr_pt_count_r2			(+0,{#column4})
    	print	      	 #curr_tot_ftpt_count_r2		(+0,{#column5})
    	print	      	 #curr_hw_ft_count_r2			(+0,{#column6})
    	print	      	 #curr_hw_ptne_count_r2			(+0,{#column7})
    	print	      	 #curr_hw_tot_count_r2			(+0,{#column8})
    	
 
End-Procedure

!***********************************************************************
! (Report-2)Procedure which selects the Column Name & prints it
!***********************************************************************
Begin-Procedure Print-Column_Name2


Let $db_date = &cur_eom
Let $db_mon_date=  edit ($db_date,'Mon')
Let $db_yyyy_date=  edit ($db_date,'YYYY')
Let $db_yy_date=  substr($db_yyyy_date,3,2)
 
Let 		$col_curr_ft_r2		=	$db_mon_date||' '||$db_yy_date||' FT Count'		
Let 		$col_curr_pt_r2		=	$db_mon_date||' '||$db_yy_date||' PT Count'		
Let 		$col_curr_tot_count_r2	=	$db_mon_date||' '||$db_yy_date||' Total Count'	       	       	
Let 		$col_curr_hw_ft_r2		=	$db_mon_date||' '||$db_yy_date||' H&W FT'			
Let 		$col_curr_hw_ptne_r2	=	$db_mon_date||' '||$db_yy_date||' H&W PT/NE'		
Let 		$col_curr_hw_tot_r2	=	$db_mon_date||' '||$db_yy_date||' H&W Totals'		
 

!--- Printing the report
Let $report_title_r2 = $Report_Nm || 'b'
let $report_title =  'FT-PT Measurement'
		print		$report_title_r2					(+1,1)
		print		$report_title						(0,10)
		print	      	'UNION'	         			       		(+4,{#column1})
		print	      	'STORE'				       			(+0,{#column2})
		print	      	$col_curr_ft_r2				       		(+0,{#column3})
		print	      	$col_curr_pt_r2				       		(+0,{#column4})
		print	      	$col_curr_tot_count_r2		       			(+0,{#column5})
		print	      	$col_curr_hw_ft_r2		       			(+0,{#column6})
		print	      	$col_curr_hw_ptne_r2					(+0,{#column7})
		print	      	$col_curr_hw_tot_r2					(+0,{#column8})

End-Procedure

!***********************************************************************
! (Report-1/Report-2) Building Dynamic Where
!***********************************************************************
Begin-Procedure Build-Dynamic-Where
if #report_num=1
	Let $R2_WHERE_VAL_COMP_PAY_UNION_CD = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA 
	Let $R2_WHERE_VAL_DEPT_JOBCODE='(' ||$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA || ' AND ' || $GEXXX916_EXCLUDE_JOBCODE_CRITERIA|| ') AND A.DEPTID NOT BETWEEN ''' || '3000' || '''' || ' and ' || '''' || '3999' || ''''
	
	Let $R2_FTPT_COUNT_WHERE_UNION_RGN_DEPT = 'F.GEX_RGN_CD = ''' || $rgn_cd || ''' AND A.DEPTID = ''' || $deptid || ''''
	Let $R2_HW_FT_CURR_WHERE_UNION_RGN_DEPT = 'D.GEX_RGN_CD = ''' || $rgn_cd || ''' AND A.DEPTID = ''' || $deptid || ''''
	
	Let $R2_FTPT_COUNT_SELECT_VAR1='F.GEX_RGN_CD'
	Let $R2_HW_FT_CURR_SELECT_VAR1='D.GEX_RGN_CD'
		
else
	Let $R2_WHERE_VAL_COMP_PAY_UNION_CD = $GEXXX913_INCLUDE_UNION_CD_CRITERIA
	Let $R2_WHERE_VAL_DEPT_JOBCODE= '((' ||$GEXXX938_INCLUDE_MANAGER_LEVEL_CRITERIA || ' AND ' || $GEXXX916_EXCLUDE_JOBCODE_CRITERIA|| ') OR ' || $GEXXX_INCLUDE_JOBCODE_CRITERIA ||')'
	
	Let $R2_FTPT_COUNT_WHERE_UNION_RGN_DEPT = 'A.UNION_CD = ''' || $union_cd_r2 || ''' AND A.DEPTID = ''' || $deptid_r2 || ''''
	Let $R2_HW_FT_CURR_WHERE_UNION_RGN_DEPT = 'A.UNION_CD = ''' || $union_cd_r2 || ''' AND A.DEPTID = ''' || $deptid_r2 || ''''
	
	Let $R2_FTPT_COUNT_SELECT_VAR1='A.UNION_CD'
	Let $R2_HW_FT_CURR_SELECT_VAR1='A.UNION_CD'
End-if

#debugx show $R2_FTPT_COUNT_WHERE_UNION_RGN_DEPT
#debugx show $R2_HW_FT_CURR_WHERE_UNION_RGN_DEPT
#debugx show $R2_WHERE_VAL_COMP_PAY_UNION_CD
#debugx show $R2_WHERE_VAL_DEPT_JOBCODE  

End-Procedure



#include 'stdapi.sqc'    !Process Scheduler Interface
#include 'reset.sqc'     !Reset Printer Procedure
#include 'curdttim.sqc'  !Get-Current-DateTime Procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'number.sqc'    !Routines to format numbers
#include 'datemath.sqc'  !Routines for date math
#include 'gexrnctl.sqc'  !Routine for Get-Run-Control
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
#include 'gexxx901.sqc'  !Get COMPANY_GROUP from Run Control Page
#include 'gexxx903.sqc'  !Get EMPL_STATUS from Run Control Page
#include 'gexxx916.sqc'	 !Get JOBCODE from Run Control Page
#include 'gexxx917.sqc'	 !Get PLAN_TYPE from Run Control Page
#include 'gexxx938.sqc'	 !Get MANAGER_LEVEL from Run Control Page
#include 'gexxx913.sqc'  !Get UNION_CD from Run Control Page