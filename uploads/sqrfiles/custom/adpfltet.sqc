!********************************************************************** 
! SQR Name:           adpfltet.sqc  
! SQR Descr:          ADP Employment Tax 
! Created by:         drmonroe 
! Create date:        03/04/2010 
! Last modified by:   drmonroe
! Last modified date: 05/12/2015
!*********************************************************************** 
!-------------------------------------------------------
!12/9/08   property of ADP Facs
!adpfilt.sqc, invoked by adp303.sqc or adp303q.sqc
!Dan Monroe
!Modification History
!
! 12/9/08 Created, included if #define USE_ADPFILT_SQC
! 1/23/08 filter other chars (non-tab) from name and address
!         only after Q3, 2008
! 1/6/10  add filter for quotes, dbl quotes, and warning for illegal addr1
! 2/2/10  add warning for address 1 or address 2 > 30 chars
! 7/8/10  remove address 1 warnings for 'P' (PO boxes)
! 10/8/10 PO Box Oregon... if $Emp_State = 'OR', warn if the address starts with P and the string doesn't start with
!         "PO BOX", per Jared Casper and Rhonda Shephard
!
! 11/3/10 HEP1 - add more logic to filter invalid characters (global names, addresses...)
! 11/3/14 updated print filter warnings to avoid overlap
! 5/12/15 eliminate address warnings SKIP_FILTER_WARNINGS
! 9/26/16 add resident address fields, change name to adpfltet.sqc to avoid ACA, EV.... requires change to adp303q.sqc too
!---------------------------------------------------------------------------------

#define ADPFLTET_VERSION adpfltet.sqc.Sep 26, 2016

#if {SITE_ID} = 'HEP1'
   #define EXPANDED_FILTER
#endif

begin-procedure filter-tabs-from-address-name
 
   encode <09> into $tab_char     ! 'tab'	
   move '('      to $lparen_char  
   move ')'      to $rparen_char 
   move '-'      to $dash_char  

   ! change ' - ' to '-' too  7/3/8  <20> <2d> <20>
   ! -------------------------------------------------
   !
   ! filter following fields
   ! ------------------------
   !     $FirstName
   !     $MiddleName
   !     $LastName
   !     $Emp_Personal_Address1
   !     $Emp_Personal_Address2
   !     $Emp_City

   move $FirstName to $s
   move 'FirstName' to $filter_type
   do filter-tab
   move $s to $FirstName

   move $MiddleName to $s
   move 'MiddleName' to $filter_type
   do filter-tab
   move $s to $MiddleName

   move $LastName to $s
   move 'LastName' to $filter_type
   do filter-tab
   move $s to $LastName

   move $NameSuffix to $s
   move 'Suffix' to $filter_type
   do filter-tab
   move $s to $NameSuffix

   move $Emp_Personal_Address1 to $s
   move 'Address1' to $filter_type
   do filter-tab
   move $s to $Emp_Personal_Address1

   move $Emp_Personal_Address2 to $s
   move 'Address2' to $filter_type
   do filter-tab
   move $s to $Emp_Personal_Address2

   move $Emp_City to $s
   move 'City' to $filter_type
   do filter-tab
   move $s to $Emp_City

!9/26/16 added filter to resident address fields addr1 addr2 city
   move $Employee_Residential_Address1 to $s
   move 'ResAddr1' to $filter_type
   do filter-tab
   move $s to $Employee_Residential_Address1

   move $Employee_Residential_Address2 to $s
   move 'ResAddr2' to $filter_type
   do filter-tab
   move $s to $Employee_Residential_Address2

   move $Employee_Residential_City to $s
   move 'ResCity' to $filter_type
   do filter-tab
   move $s to $Employee_Residential_City


end-procedure

begin-procedure filter-tab

move $s to $sold
     
!tab
!---
while 1 = 1
   let #tab_inx = instr($s,$tab_char, 1)
   if #tab_inx <> 0
     let #slen = length($s)
     let #t0 = #tab_inx - 1
     let #t1 = #tab_inx + 1
     let #tn = #slen - #tab_inx
     let $s = substr($s, 1, #t0) || ' ' || substr($s, #t1, #tn)
     let $ss = 'tab'
     do log-illegal-char
   else
    break
   end-if
 end-while

 if #RptYear >= 2009 or (#RptYear = 2008 and #RptQtr = 4)  ! we started this logic for in 2008, Q4
 
  !parenthesis
  !------------
   let $s0 = $s
   let $s = translate($s,'('  ,' ')   
   let $s = translate($s,')'  ,' ')   

   if $s0 <> $s
     #ifndef SKIP_FILTER_WARNINGS
       let $ss = '()'
       do log-illegal-char
     #endif
   end-if

!dashes with spaces
!------------------
   let $s0 = $s
   let #inx = instr($s,'-',1)   

   if #inx > 0

     let #slen = length($s)
     let #tn = #slen - #inx

     let #linx = #inx - 1
     if #linx > 0
      let $left_side = substr($s,1,#linx)
     else
      let $left_side = ''
     end-if
     
     let $left_side = rtrim($left_side,' ')

     let #rinx = #inx + 1
     if #rinx <= #slen
      let $right_side = substr($s,#rinx,#tn)
     else
      let $right_side = ''
     end-if
     let $right_side = ltrim($right_side,' ')
     let $s = $left_side || '-' || $right_side
   end-if

   if $s0 <> $s
     #ifndef SKIP_FILTER_WARNINGS
       let $ss = $dash_char 
       do log-illegal-char
     #endif
   end-if

 end-if
 
 !added 1/6/2010 - testing @Sedgwick
 !------------------------------------
 if #RptYear >= 2010                            ! we started this logic for in 2010
 
   !double quote
   let $s0 = $s
   let $s = translate($s,'"'  ,' ')             !double quote
   if $s0 <> $s
     #ifndef SKIP_FILTER_WARNINGS
       let $ss = '"'
       do log-illegal-char
     #endif
   end-if

   !accent mark to single quote
   let $s0 = $s
   let $s = translate($s,'`'  ,'''')            !accent mark to single quote 

   if $s0 <> $s
     #ifndef SKIP_FILTER_WARNINGS
       let $ss = '`'
       do log-illegal-char
     #endif
   end-if

   !warn if address1 - Oregon PO BOX format is not correct
   !--------------------------------------------------------
   #ifndef  SKIP_FILTER_WARNINGS
    if $filter_type =  'Address1' or  $filter_type =  'ResAddr1'
     let $s_ltrim = ltrim($s,' ')
     uppercase $s_ltrim
     if $Emp_State = 'OR' and substr($s_ltrim,1,1) = 'P'
       if substr($s_ltrim,1,7) <> 'PO BOX ' and substr($s_ltrim,1,9) <> 'P.O. BOX ' and substr($s_ltrim,1,8) <> 'P O BOX '
         let $ss = 'BadAddr-OR'
         do log-illegal-char
       end-if
       goto done_address1_check
     end-if
    end-if

    !warn if address1 doesn't start with '0'..'9'
    !--------------------------------------------
    if $filter_type =  'Address1' or  $filter_type =  'ResAddr1'
     let $s_ltrim = ltrim($s,' ')
     if (substr($s_ltrim,1,1) < '0' or substr($s_ltrim,1,1) > '9') and substr($s_ltrim,1,1) <> 'P' !PO Boxes ok 7/8/10
       let $ss = 'BadAddr'
       do log-illegal-char
       goto done_address1_check
     end-if
    end-if
   #endif

    
   !2/2/10 - look for address lines > 30 chars
   if $filter_type =  'Address1' or $filter_type =  'Address2' or  $filter_type =  'ResAddr1' or  $filter_type =  'ResAddr2'

     let $s_rtrim = rtrim($s,' ')
     let #s_len = length($s_rtrim)
     if $SelectEmplid <> ''
        show 'address lingth check ' $filter_type ' Addr:' $s ' len: ' #s_len
     end-if
     if (#s_len > 30)
       let $ss = 'Addr > 30'
       do log-illegal-char
     end-if
   end-if

done_address1_check:

   if $filter_type =  'City' or $filter_type =  'ResCity'
     let $s_rtrim = rtrim($s,' ')
     let #s_len = length($s_rtrim)
     if (#s_len > 30)
       let $ss = 'City > 30'
       do log-illegal-char
     end-if
   end-if
   if $filter_type =  'LastName'
     let $s_rtrim = rtrim($s,' ')
     let #s_len = length($s_rtrim)
     if (#s_len > 20)
       let $ss = 'LastName > 20'
       do log-illegal-char
     end-if
   end-if     

   #ifndef SKIP_FILTER_WARNINGS     
    if ($filter_type <>  'Address2' and $filter_type <>  'ResAddr2')  !no check on address2 starting with a blank
     let $s_rtrim = rtrim($s,' ')
     if $s_rtrim <> ''
      let $s0 = $s
      let $s = ltrim($s,' ')
      if $s0 <> $s
       let $ss = 'POS1_sp'
       do log-illegal-char
      end-if
     end-if
    end-if
   #endif 

  end-if

  #ifdef EXPANDED_FILTER
    do filter-illegal-chars-EXPANDED
  #endif
  
end-procedure

#ifdef EXPANDED_FILTER
begin-procedure filter-illegal-chars-EXPANDED

   move $s to $sold

!let's look for illegal chars
   let $s_rtrim  = rtrim($s,' ')
   let #s_length = length($s)
   
   !then let's look for ranges of legal chars
   let #inx = 1
   let #invalid_chars = 0
   while #inx <= #s_length
       let $s_char = substr($s,#inx,1)
       if ($s_char >= 'a' and $s_char <= 'z') or 
          ($s_char >= 'A' and $s_char <= 'Z') or
          ($s_char >= '0' and $s_char <= '9') or
           $s_char = ',' or $s_char = '.' or $s_char = '-' or $s_char = '''' or $s_char = '`' or 
           $s_char = '(' or $s_char = ')' or $s_char = ' '
        
         add 1 to #inx
       else        
         if #inx = 1
           let #tn = #s_length - 1
           let $s = ' ' || substr($s, 2, #tn)
         else
           let #t0 = #inx - 1   
           let #t1 = #inx + 1
           let #tn = #s_length - #inx
           let $s = substr($s, 1, #t0) || ' ' || substr($s, #t1, #tn)   !replace the char with a ' '
         end-if
         add 1 to #invalid_chars
         move $s_char to $invalid_char
         add 1 to #inx
       end-if
   end-while

   if $s <> $sold
    if #invalid_chars = 1
      let $ss = 'ch:' || $invalid_char
    else
      let $ss = 'Invalid'
    end-if
    do log-illegal-char
   end-if
   
   let $s = ltrim($s,' ')
   let $s = rtrim($s,' ')

end-procedure
#endif


begin-procedure log-illegal-char
 
 let $snew = $s
 if $ss = 'BadAddr' or $ss = 'Addr > 30' or $ss = 'City > 30' or $ss = 'LastName > 20'
    let $snew = '(Warning only)'  !no correct, just warning for these
 end-if

 #ifdef SKIP_FILTER_WARNINGS
   IF $snew = '(Warning only)'
     GOTO no_warnings
   END-IF
 #endif
 
 if #filtered_count < {FILTER_LIMIT}
   put $current_emplid         into filtered(#filtered_count) EMPLID
   put $filter_type            into filtered(#filtered_count) FILTER_TYPE
   put $ss                     into filtered(#filtered_count) FILTER_CHAR
   put $sold                   into filtered(#filtered_count) ORIG_STRING
   put $snew                   into filtered(#filtered_count) NEW_STRING
   add 1 to #filtered_count
 end-if

no_warnings:

end-procedure

begin-procedure print-filter-Warnings

 #debugd show 'print-illegal-char. #filtered_count = ' #filtered_count

 if #filtered_count > 0

  let $ReportTitle  = 'ADP Employment Tax, Name/Address Character Warnings:  ' || $AsOfDate

  print 'Following are the Associates with Invalid characters REMOVED from their Name/Address fields' (+2,4)
  print 'Emplid             Type                Char           Original-String                              Fixed-String'  (+2,1)
  print ' ' (+1,1)
 
  let #f = 0
  while #f < #filtered_count
  
   get $filter_emplid          from filtered(#f) EMPLID
   get $filter_type            from filtered(#f) FILTER_TYPE
   get $filter_char            from filtered(#f) FILTER_CHAR
   get $filter_orig            from filtered(#f) ORIG_STRING
   get $filter_new             from filtered(#f) NEW_STRING
   
   if #current-line > 56
     New-Page
     print 'Following are the Associates with Invalid characters REMOVED from their Name/Address fields' (+2,4)
     print 'Emplid             Type                Char           Original-String                              Fixed-String'  (+2,1)
     print ' ' (+1,1)
   end-if
   
   print $filter_emplid  (+1,1)
   print $filter_type    (,20,18)
   print $filter_char    (,40,13)
   print $filter_orig    (,55,30)
   print $filter_new     (,100,30)
   
   add 1 to #f
  
  end-while
  
  print 'Count of Warnings related to filtering strings with illegal characters = ' (+2,1)
  print #filtered_count                   () edit 9,999
  print ',  adpfltet.sqc version = {ADPFLTET_VERSION}' ()
  #ifdef EXPANDED_FILTER
  print '(With EXPANDED_FILTER)' (+1,1)
  #endif

  New-Page
  
 end-if

 let #filtered_count = 0

end-procedure




