!***********************************************************************
! GEXPY115    Dreyfus Loans Partial Deduction Report                   *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *
!***********************************************************************
!           KMW         5/26/2000     Initial Development              *
!                                                                      *
! HR70094   AXL         7/13/2000     Added a check for employees with *
!                                     deductions not equal to 1x or 2x *
!                                     the regular deduction amt.       *
!                                     Added display stmts for debug.   *
!                                     Added extra column showing genl  *
!                                     deduction amt.                   *
!                                                                      *
!           AXL         7/27/2000     Removed include for gexpyvhu.sqc *
!                                                                      *
!           AXL         8/15/2000     Adjusted select logic for pay    *
!                                     end date.                        *
!S3 11557477 KXY 			  10/20/2008    Added the code for not picking 	 *
!																			employees after pay confirm is done*
!***********************************************************************

#include 'setenv.sqc' !Set environment

#define #column1    10
#define #column2    23
#define #column3    56
#define #column4    100
#define #column5    115
#define #column6    130

begin-setup
  #include 'setup32a.sqc'
!  Begin-SQL
!    Alter Session Set OPTIMIZER_GOAL=RULE;
!  End-SQL
  declare-report deduction-report
Printer-Type=HPLASERJET
     layout=default
  end-declare
  declare-report report-log
Printer-Type=HPLASERJET
     layout=default
  end-declare
end-setup
begin-heading 8 for-reports=(report-log)
#debug9 show 'Begin-Heading'
move 'GEXPY115' to $ReportID
#include 'stdhdg01.sqc'


  print 'Pay End Date:'     (3,77)
  print $PayEndDt           (,+2)


end-heading

begin-heading 8 for-reports=(deduction-report)
#debug9 Show 'begin-heading'
  move 'GEXPY115' to $ReportID
  let $ReportTitle = 'Dreyfus Partial Deduction Report'
  #Include 'stdhdg01.sqc'

 
  print 'EMPLID'         (+1,{#column1})
  print 'NAME'           (,{#column2})
  print 'DEDUCTION'      (,{#column3})
  print 'CURRENT'        (,{#column4})
  print 'PAYBACK'        (,{#column5})
  print 'REGULAR'        (,{#column6})	 		!AXL-7/13/2000

  print '-'              (+1,{#column1},9) fill
  print '-'              (,{#column2},30)  fill
  print '-'              (,{#column3},40)  fill
  print '-'              (,{#column4},10)  fill
  print '-'              (,{#column5},10)  fill
  print '-'              (,{#column6},10)  fill		!AXL-7/13/2000

 print 'Employees on this report need an arrears override on the paysheet/Deduction One Time' (+2,20)

end-heading


begin-report
#debug9 Show 'begin-report'
  use-report deduction-report
  do Init-DateTime
  do Init-Number
  do stdapi-init
  do Get-Current-DateTime
  do Report
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term
end-report


begin-procedure Report
#debug9 Show 'Report'
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan
  do Get-Last-Calcd-Pay

  Let $X000_Order_By = 'No Sort for this report'
  Do Format-DateTime($Pay_End_Dt, $PayEndDt, {DEFDATE}, '', '')
  do Print-Cover-Page
  do Main-Process
end-procedure


begin-procedure Print-Cover-Page
#debug9 Show 'Print-Cover-Page'
  Print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'            (+5,1)
  Print '$Prcs_OprID          ='                                  (+2,5)
  Print $Prcs_OprID                                               (0,+2)
  Print '$Prcs_Run_Cntl_ID    ='                                  (+1,5)
  Print $Prcs_Run_Cntl_ID                                         (0,+2)

  Print 'SELECTION CRITERIA FOR THIS REPORT RUN:'                 (+5,2)
  Print 'As Of Date :'                                            (+2,5)
  Print $AsOfToday                                                 (0,+2)
  Print 'Last Calcd Pay End Date:'                                (+2,5)
  Print $pay_end_dt                                               (0,+2)

  Print 'SORT ORDER FOR THIS REPORT RUN:'                         (+5,2)
  Print $X000_Order_By                                            (+2,5)

  Let #PAGE-COUNT = 0
  New-page
End-Procedure


Begin-Procedure Get-Last-Calcd-Pay
#debug9 Show 'Get-Last-Calcd-Pay'
Begin-Select loops = 1
Max(pay_end_dt) &pay_end_dt

  Let $AsOfDate         = &pay_end_dt
  Let $pay_end_dt       = &pay_end_dt

  Show 'Pay end date:  ' $pay_end_dt

  If Rtrim($pay_end_dt,' ') = ''
    Show 'No calc only pay period found in calendar'
    Stop
  End-If

From   ps_pay_calendar

Where  pay_end_dt      <= $AsOfToday
!Where  pay_end_dt      <= '04-oct-2008'  !VENDKXY ADDED THE CODE FOR TESTING
And    pay_confirm_run  = 'N' 		!AXL - 8/15/2000 
and    pay_calc_run     = 'Y'
End-Select
End-Procedure


begin-procedure Main-Process
#debug9 Show 'Main-Process'

begin-select DISTINCT ON-ERROR=SQL-Error-Found('Main-Process')
C1.COMPANY  
C1.DEPTID
de.plan_type 		&de.plan_type  
DE.DEDCD 		&de.dedcd
PD.NAME  		&pd.name
C1.EMPLID 		&c1.emplid
DE.DED_CUR 		&de.ded_cur
DE.DED_CUR_PAYBK	&de.ded_cur_paybk 

  let #ded_cur 		= &DE.DED_CUR
  let #ded_cur_paybk 	= &DE.DED_CUR_PAYBK
  let $plantype 	= &de.plan_type
  let $dedcd 		= &de.dedcd

  do Get-Deduction-Name			

  let #REM 		= #ded_cur / #ded_cur_paybk
  move #REM to $REM 9999999.99

  !AXL-7/13/2000-New debug stmts-Begin
  #ifdef debug8
     display 'emplid ' noline
     display &c1.emplid
     display '#ded_cur ' noline
     display #ded_cur
     display '#ded_cur_paybk ' noline
     display #ded_cur_paybk
     display '$rem ' noline
     display $rem
  #endif  
  !AXL-7/13/2000-New debug stmts-End

  unstring $REM by '.' into $work2 $work3
  let #work3		=to_number($work3)

  !AXL-7/13/2000-New debug stmts-Begin
  #ifdef debug8
     display 'work2 ' noline
     display #work2
     display 'work3 ' noline
     display #work3
  #endif
  !AXL-7/13/2000-New debug stmts-End

  let $print_ok	 = 'N'
  do Check-Genl-Ded			!AXL-7/13/2000-New Procedure

  if  #work3 <> 0
    let $Data-Found-Flag = 'Y'
    let $print_ok	 = 'Y'
    do Print-Record
  end-if

  let #factor = #ded_cur / #target	!AXL-7/13/2000
  let #mod    = mod(#ded_cur,#target)	!AXL-7/13/2000

  !AXL-7/13/2000-New debug stmts-Begin
  #ifdef debug8
     display '#ded_cur ' noline
     display #ded_cur
     display '#target ' noline
     display #target
     display '#factor ' noline
     display #factor
     display '#mod ' noline
     display #mod
  #endif 
  !AXL-7/13/2000-New debug stmts-End
  
  !AXL-7/13/2000-New error trapping logic-Begin
  if #mod <> 0 
    if $print_ok = 'N'
      do Print-Record
      let $print_ok = 'Y'
    end-if
  end-if  

  if #factor < 1 or #factor > 2
    if $print_ok = 'N'
      do Print-Record
      let $print_ok = 'Y'
    end-if
  end-if
  !AXL-7/13/2000-New error trapping logic-End
  
  !AXL-7/13/2000-New debug stmts-Begin
  #ifdef debug8
     display '$Data-Found-Flag ' noline
     display $Data-Found-Flag 

     display '$print_ok ' noline
     display $print_ok
  #endif
  !AXL-7/13/2000-New debug stmts-End

FROM   PS_PERSONAL_DATA  PD,
       ps_pay_Earnings   C1,
       ps_pay_deduction  DE,
       ps_pay_calendar   PC     ! VENDKXY on 10/20/2008 added the code for not picking employees afer pay confirm is done.

WHERE  PD.EMPLID         = C1.EMPLID 
And    C1.PAY_END_DT     = $pay_end_dt
and    DE.COMPANY        = C1.COMPANY
And    DE.PAYGROUP       = C1.PAYGROUP
And    DE.PAY_END_DT     = C1.PAY_END_DT
And    DE.OFF_CYCLE      = C1.OFF_CYCLE
And    DE.PAGE_NUM          = C1.PAGE_NUM
And    DE.LINE_NUM          = C1.LINE_NUM
And    DE.SEPCHK         = C1.SEPCHK
and    DE.COMPANY        = PC.COMPANY			! VENDKXY on 10/20/2008 added the code for not picking employees afer pay confirm is done.
And    DE.PAYGROUP       = PC.PAYGROUP		! VENDKXY on 10/20/2008 added the code for not picking employees afer pay confirm is done.
And    DE.PAY_END_DT     = PC.PAY_END_DT	! VENDKXY on 10/20/2008 added the code for not picking employees afer pay confirm is done.
and    DE.dedcd like 'DRS%'
and    DE.plan_type = '00'
and    DE.ded_cur <> 0
and    PC.pay_confirm_run  = 'N' 					! VENDKXY on 10/20/2008 added the code for not picking employees afer pay confirm is done.
and    DE.ded_cur_paybk <> 0
end-select

  If $Data-Found-Flag <> 'Y'
   Print 'NO DATA SELECTED FOR THIS REPORT RUN'        (25,) Center
  End-If
end-procedure

!AXL-7/13/2000-New Procedure-Begin
begin-procedure Check-Genl-Ded
#debug9 Show 'Check-Genl-Ded'
      	let #target	= 0
begin-select ON-ERROR=SQL-Error-Found('Check-Genl-Ded')
GENL.DED_ADDL_AMT

	let #target	= &GENL.DED_ADDL_AMT

FROM PS_GENL_DEDUCTION GENL
  WHERE GENL.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_GENL_DEDUCTION 
        WHERE GENL.EMPLID 	= EMPLID
!          AND GENL.EMPL_RCD 	= EMPL_RCD
          AND GENL.DEDCD 	= DEDCD
          AND EFFDT 		<= $pay_end_dt)
     AND GENL.DEDCD 		= &DE.DEDCD
     AND GENL.EMPLID 		= &C1.EMPLID

end-select
end-procedure
!AXL-7/13/2000-New Procedure-End

begin-procedure Print-Record
 
#debug9 Show 'Print-Record'
  show 'printing'
  print &C1.EMPLID		(+1,{#column1})
  print &PD.NAME           	(,{#column2},30)
  print &DE.DEDCD          	(,{#column3},6)
  print $DeductionName     	(,+2,30)
  print &DE.DED_CUR          	(,{#column4})
  print &DE.DED_CUR_PAYBK  	(,{#column5})
  print #target			(,{#column6})	!AXL-7/13/2000	
end-procedure

begin-procedure SQL-Error-found ($Proc_Name) 

#debug9 Show 'SQL-Error-Found'

  display 'SQL Error in ' 
  display $Proc_Name 
  display $_sql-error
  display 'sql-status:' 
  display #_sql-status 
  STOP
end-procedure

#include 'getcodta.sqc'  !Get-Company-Data procedure
#include 'getdptnm.sqc'  !Get-Department-Name procedure
#include 'getactnm.sqc'  !Get-Acct-cd-descr procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#include 'gexxx922.sqc'  !Get pay single row run control
#Include 'askaod.sqc'    !Ask-As-Of-Date procedure
#include 'getdednm.sqc'  !Get-Deduction-Name procedure
