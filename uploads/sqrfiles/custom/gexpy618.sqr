!***********************************************************************
!  GEXPY618 :  Create MMREF W-2 Reports for Ohio                       *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of PeopleSoft.                        *
!                                                                      *
! Copyright (c) 1999-2001 PeopleSoft, Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2001/10/25:14:43:5                                  *
!       $Release:  HRMS751                                             *
!      $Revision:  101                                                 *
!                                                                      *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
! INITIALS	DATE		DESCRIPTION OF THE CHANGE              *
!***********************************************************************
! AXL           12/10/2001      Cloned TAX960ST                        *
!                               Re-applied modifications from current  *
!                               production version of GEXP618.         *
!                                                                      *
! AXl           01/18/2002      Altered the variables used to update   *
!                               a temp table used to store cummulative *
!                               wages & taxes for localities.          *
!                               Updated the join to STATE in the main  *
!                               select.                                *
!                                                                      *
! AXL           01/28/2003      Adjustments to local wage/tax logic to *
!                               accommodate people with more than one  *
!                               locality.                              *
!                                                                      *
! CWB           12/08/2003      Change to LTX.EFFDT logic.             *              
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'  !Set environment
#include 'setup02.sqc' !AXL 12/10/2001 changed from setup31.sqc

!**********************************************************************
Begin-Program
!**********************************************************************
  
  display ''
  !display 'Creating Selected States W-2 File in MMREF Format' - AXL 12/20/2001
  display 'Creating Ohio W-2 File in MMREF Format'

  Let $t1 = datenow()
  Show 'Report Started at : ' $t1

  Move 0 to $Zero_fill 099999999999999

  do Init-Report
  do Process-Main
  
  do Stdapi-Term

  Display ''
  Let $t2 = datenow()
  Show 'Report Ended at : ' $t2
End-Program

!***********************************************************************
Begin-Procedure Init-Report
!***********************************************************************
 
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Tax-Reporting-Run-Controls
  do Initialization
  do File-Create			!AXL 12/20/2001 Move stmt here

  !AXL 12/10/2001 - Gex Mods - Begin
  Create-Array Name=Locality-Array Size=50
    Field=state:Char:6
    Field=locality:Char:7
    Field=w2_mag_code:Char:5

  Clear-Array Name=Locality-Array

  Let $GEXXX915_Locality_Alias = 'DL.LOCALITY'
  !AXL 12/10/2001 - Gex Mods - End

  If $Prcs_Process_Instance = ''
    !AXL 12/10/2001 - Gex Mods - Begin
    !Display 'Report cannot be run outside of PeopleSoft, please use process scheduler.'
    !Stop
     Let $LocalityString = ''''
     Display 'Enter Locality or leave blank to exit.'
     While 1=1
       Input $In-Locality Maxlen=7 'Locality'
       Uppercase $In-Locality
       If Rtrim($In-Locality, ' ') = ''
         Concat '''' With $LocalityString
         Break
       Else
         Input $In-W2-Mag-Code Maxlen=5 'W2 Magnetic Media Code'
         Add 1 To #GRL_ROWS
         Put 'OH' $In-Locality $In-W2-Mag-Code Into Locality-Array(#GRL_ROWS)
       End-If
       If $LocalityString <> ''''
         Concat ''',''' With $LocalityString
       End-If
       Concat $In-Locality With $LocalityString
     End-While

     If $LocalityString = ''''''
       Let $GEXXX915_INCLUDE_LOCALITY_CRITERIA = '1=1'
       Let $GEXXX915_INCLUDE_LOCALITY_DISPLAY_CRITERIA = 'ALL'
     Else
       Let $GEXXX915_INCLUDE_LOCALITY_CRITERIA = $GEXXX915_Locality_Alias || ' In (' || $LocalityString || ')'
       Let $GEXXX915_INCLUDE_LOCALITY_DISPLAY_CRITERIA = $GEXXX915_INCLUDE_LOCALITY_CRITERIA
     End-If
  Else
     do GEXXX915-Select-Locality-Parameters 
     do Build-Array
  End-if
  show '$GEXXX915_Include_Locality_Criteria ' $GEXXX915_Include_Locality_Criteria
  !do Read-States			axl
  !AXL 12/10/2001 - Gex Mods - End
End-Procedure

!AXL 12/10/2001 - Gex Mods / Entire procedure being moved - Begin
!Begin-Procedure Populate-Headings
  !let $ReportID2 = 'TAX960' ||$E.W2_State
  !let $ReportID = 'TAX960ST'
  !let $ReportID2 = 'GEXPY618'	
  !let $ReportID  = 'GEXPY618'	
  !move $E.W2_State to $State
  !do Get-ee-State-Code
  !move &S.NUMERIC_CD to $StateNumCd
  !move &S.NUMERIC_CD to $StateNumCdA
  !let $StateName = rtrim(&S.DESCR, ' ')
  !let $ReportTitle = ' W-2 File Summary Report'
  !show $StateName ' W-2 File Records'
  !show ' '
  !do File-Create
!End-Procedure
!AXL 12/10/2001 - Gex Mods / Entire procedure being moved - End

!***********************************************************************
Begin-Procedure Initialization
!***********************************************************************

  !AXL 12/10/2001 - Gex Mods - Begin
  move 'OH' to $state			
  let $ReportID2 = 'GEXPY618'		
  let $ReportID  = 'GEXPY618'		
  do Get-ee-State-Code			
  move &S.NUMERIC_CD to $StateNumCd	
  move &S.NUMERIC_CD to $StateNumCdA	
  let $StateName = rtrim(&S.DESCR, ' ')	
  let $ReportTitle = 'Ohio W-2 File Summary Report'	
  move '   Wage & Tax Totals'  to $Col5Hdr1         !
  move '       By Localities'  to $Col5Hdr2         !
  move '           Local    '  to $Col6Hdr1         !See gexw2sry.sqc
  move '           Wages    '  to $Col6Hdr2         !for format of
  move '           Local    '  to $Col7Hdr1         !Column headings
  move '           Taxes    '  to $Col7Hdr2         !
  show $StateName ' W-2 File Records'	
  show ' '
  !AXL 12/10/2001 - Gex Mods - End

  do Get-Current-DateTime
  move '1' to $MMLZero
  move '1' to $year4	!AXL 12/10/2001 - Gex Mods
  do Format-DateTime($AsOfToday, $960Date, {DEFYMD},'','')
  !do Format-DateTime('15-JAN-2002', $960Date, {DEFYMD},'','')  Remove prior to migration
  move $960Date to $AsOfYear xxxx   !extract the current year
  move $AsOfYear  to #AsOfYear
  move #AsOfYear  to #saveAsOfYear
  subtract 1    from #AsOfYear

  If &TX.Balance_Year <> #AsOfYear
    display ''
    display 'Please note : Current Year is not one greater than Tax Reporting Year.'
    display 'Current Year is    ' noline
    display  #saveAsOfYear  9999
    display 'Tax Reporting Year ' noline
    display &TX.Balance_Year
    display ''
  End-if

Begin-Select
TEMP_SSN_MASK
FROM PS_INSTALLATION
End-Select
End-Procedure

!AXL 12/10/2001 - Gex Mods - Begin
!***********************************************************************
Begin-Procedure Build-Array
!***********************************************************************
Begin-Select
GRL.STATE
GRL.LOCALITY
GRL.W2_MAG_CODE

  Add 1 To #GRL_ROWS
  Put &GRL.STATE &GRL.LOCALITY &GRL.W2_MAG_CODE Into Locality-Array(#GRL_ROWS)

From  PS_GEX_RC_LOCALITY GRL

Where GRL.OPRID                 = [$OprID]
And   GRL.RUN_CNTL_ID           = [$Run_Cntl_ID]
And   Rtrim(GRL.LOCALITY, ' ') != ' '
End-Select
End-Procedure
!AXL 12/10/2001 - Gex Mods - End

!***********************************************************************
Begin-Procedure File-Create
!***********************************************************************

  do Close-File
  move &TX.Company       to $XCompany  !TX.Company is the Transmitter
  move &TX.Balance_Year to $CalYear 9999
  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')
  let $EffDate = $CalYear || '1231'
  do Format-DateTime($EffDate, $EffDate, {DEFCMP}, '', 'native')
  do Get-Transmitter-Data
  do Open-File
  do Write-Transmitter-Records

End-Procedure

!***********************************************************************
Begin-Procedure Get-Transmitter-Data
!***********************************************************************
  Let $XmitterFound = 'N'
Begin-Select
X.DESCR
X.FEDERAL_EIN
X.ADDRESS1
X.ADDRESS2
X.CITY
X.STATE
X.POSTAL
X.COUNTRY

  Let $XmitterFound = 'Y'

FROM  PS_W2_COMPANY X
WHERE COMPANY = $XCompany
  AND X.CALENDAR_YEAR = &TX.Balance_Year
End-Select

  If $XmitterFound = 'N'
    Show 'W2 COMPANY DATA NOT SETUP FOR COMPANY : ' $XCompany '  BALANCE YEAR : ' &TX.Balance_Year
    Stop
  End-if

Begin-Select
RC960.REPORTING_MEDIUM
RC960.DISKETTE_TYPE
RC960.EMPLR_PIN
RC960.RESUB_INDICATOR
RC960.RESUB_TLCN
RC960.CONTACT_NAME_SSA
RC960.TELEPHONE_NBR
RC960.PHONE_EXTN
RC960.EMAIL_ADDR_MMREF
RC960.CONTACT_FAX
RC960.NOTIFY_METHOD

FROM SYSADM.PS_TAX960_PARM RC960

End-Select

  if rtrim(&RC960.CONTACT_NAME_SSA, ' ') = ''
    Show 'MMREF Parameters must be set up on SETUP Menu.'
    Show 'Re-execute after establishing MMREF Parameters.'
    Stop
  End-if

  move &RC960.EMAIL_ADDR_MMREF to $RC960.EMAIL_ADDR
  uppercase $RC960.EMAIL_ADDR
  Let $RC960.CONTACT_NAME_SSA = translate(&RC960.CONTACT_NAME_SSA,',','')
  move &RC960.Reporting_Medium to $FileType
  move &RC960.Diskette_Type    to $DisketteType
  Let #RecordLength = 512
  do Calculate-Diskette-Capacity
  #ifdef TAXTEST
     move 5 to #MaxRecordsPerDiskette
  #endif

End-Procedure

!***********************************************************************
Begin-Procedure Write-Transmitter-Records
!***********************************************************************
  move &X.Federal_EIN       to $FedEIN  099999999
  move &RC960.EMPLR_PIN     to $EmprPIN ! 09999999999999999
!  let  $EmprPIN = rpad(rtrim(&RC960.EMPLR_PIN, ' '),17,'0')
  move '99'  to $SoftwareCd

  If &RC960.RESUB_INDICATOR = 'Y'
    Let $RS_Ind = '1'
  Else
    Let $RS_Ind = '0'
  End-if

  If &RC960.PHONE_EXTN <> 0
    move &RC960.PHONE_EXTN to $Phone_Extn
  Else
    move '    ' to $Phone_Extn
  End-if

  move &RC960.RESUB_TLCN      to $TLCN
  move &X.Descr        to $Xmitr_Name
  move &X.Address1     to $X.Address1
  move &X.Address2     to $X.Address2
  move &X.City         to $City
  let  $StateCd = rtrim(&X.State, ' ')
  move &X.Postal       to $Zip
  move &X.Country      to $Country
  do Foreign-Address-Test('Format 3',25)

  uppercase $Xmitr_Name
  uppercase $X.Address1
  uppercase $X.Address2

  If $ForeignAddrInd = 'X'
     Let $US_Zip      = ' '
     Let $US_ZipXtnsn = ' '
     Let $US_State    = ' '
     Let $Frgn_Zip    = $Zip
     Let $Frgn_State  = $StateName
  Else
     Let $US_Zip      = $Zip
     Let $US_ZipXtnsn = $ZipExtsn
     Let $US_State    = $StateCd
     Let $Frgn_Zip    = ' '
     Let $Frgn_State  = ' '
     Let $Country-2Char   = ' '
  End-if

  !Unique State Requirements - Different from MMREF
  ! Decide to write the RA record

  Evaluate $E.W2_State
    when = 'AL'
    when = 'NC'
      break
    when-other
      do Write-RA-Record
      do Check-Disk

      add 1 to #RecordCount
      add 1 to #Tot_Record_Count
      break
  end-evaluate

End-Procedure

!***********************************************************************
Begin-Procedure Process-Main
!***********************************************************************

Begin-Select
!AXL 12/10/2001 - Gex Mods - Begin
A.W2_REPORTING_CO  	() 	on-break	level=1
				print=never 
 				before=Before-W2-Reporting-Co-Chg		
				AFTER=After-W2-Reporting-Co-Chg

E.EMPLID           	() 	on-break 	level=2
				print=never
				before=Before-EmplID
                                AFTER=AFTER-EMPLID

E.W2_STATE
!AXL 12/10/2001 - Gex Mods - End
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.ADDRESS2
A.CITY
A.STATE
A.POSTAL
A.COUNTRY
A.OTHER_EIN
A.BUSI_TERM_IND
E.COMPANY
E.SEQUENCE_NUMBER
E.TAXFORM_ID
E.EMPLOYER_ID_SWT
E.SSN
E.YE_FNAME
E.YE_MIDDLE_NAME
E.YE_LNAME
E.YE_SUFFIX
E.ADDRESS1
E.ADDRESS2
E.CITY
E.STATE
E.POSTAL
E.COUNTRY
E.STATUTORY_EE
E.PENSION_PLAN
E.DECEASED
E.THIRDPARTY_SICKPAY
EE.PROCESS_FLAG

  move &E.W2_State        to $E.W2_State	!AXL 12/10/2001
  move &E.Company         to $E.Company
  move &E.TaxForm_ID      to $E.TaxForm_ID
  move &E.Sequence_Number to #E.Sequence_Number
  move &E.Employer_ID_SWT to $E.Employer_ID_SWT
  do Load-Fed-Amounts
  do Load-State-Amounts

  do Write-W-Record  !AXL 01/28/2003 Write RW sooner
  !AXL 12/10/2001 - Gex Mods / Force Local processing for Ohio - Begin
  !Unique State Requirements - Different from MMREF
  !    State requires local/county/district wages and taxes
  !evaluate $E.W2_State
  !  when = 'IN'

  do Load-Local-Amounts

  !   break
  !end-evaluate
  !AXL 12/10/2001 - Gex Mods - End

FROM  SYSADM.PS_W2_COMPANY A, 
      SYSADM.PS_YE_EE EE, 
      SYSADM.PS_YE_DATA E
WHERE A.CALENDAR_YEAR    = &TX.Balance_Year
!  AND A.W2_REPORTING_CO = A.COMPANY	AXL 12/10/2001 
  AND A.W2_REPORTING_CO <> ' '
  AND E.W2_STATE <> ' ' 		!AXL 12/10/2001
  AND E.EMPLOYER_ID_SWT <> ' '		!AXL 12/10/2001
  AND E.CITY <> ' '			!AXL 12/10/2001
  AND A.TAXFORM_ID      =  'W'
  AND A.COMPANY          = E.COMPANY
  AND A.CALENDAR_YEAR    = E.CALENDAR_YEAR
  AND A.TAXFORM_ID       = E.TAXFORM_ID
  AND E.W2_STATE            = $state		!AXL 01/18/2002
  ![$E.SelectedStates]	axl			!AXL 12/10/2001
  AND E.CALENDAR_YEAR    = A.CALENDAR_YEAR
  AND E.TAXFORM_ID       = 'W'
  AND E.COMPANY          = EE.COMPANY
  AND E.EMPLID           = EE.EMPLID
  AND E.TAXFORM_ID       = EE.TAXFORM_ID
  AND E.CALENDAR_YEAR    = EE.CALENDAR_YEAR
  AND EE.PROCESS_FLAG   <> 'V'
  !AXL 12/10/2001 - Gex Mods - Begin
  and EXISTS
  (SELECT distinct 'X'
   FROM  PS_LOCAL_TAX_DATA LTX, PS_YE_AMOUNTS LAX
   WHERE LAX.BOX IN ('18','19')
     AND LAX.COMPANY  = LTX.COMPANY
     AND LAX.EMPLID   = LTX.EMPLID
     AND LAX.STATE    = LTX.STATE
     AND LAX.LOCALITY = LTX.LOCALITY
     AND LTX.EMPLID   = E.EMPLID
     AND LTX.COMPANY  =  E.COMPANY
     AND LTX.STATE    =  E.W2_STATE
     AND LTX.LOCALITY In (select distinct DL.LOCALITY from PS_GEX_RC_LOCALITY DL 
                            where [$GEXXX915_INCLUDE_LOCALITY_CRITERIA])
     AND LTX.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_LOCAL_TAX_DATA 
        WHERE LTX.EMPLID  = EMPLID
          AND LTX.COMPANY = COMPANY
! CWB 12/08/2003 BEGIN
          AND LTX.LOCALITY = LOCALITY   
!          AND LOCALITY In (select distinct DL.LOCALITY from PS_GEX_RC_LOCALITY DL 
!                            where [$GEXXX915_INCLUDE_LOCALITY_CRITERIA])
! CWB 12/08/2003 END
          AND EFFDT <= $asofdate) )
  !AXL 12/10/2001 - Gex Mods - End

ORDER BY  E.W2_STATE, A.W2_REPORTING_CO, E.SSN, E.EMPLID

end-select

  If #Count-T <> 0
    do Write-T-Record
  End-if

  If #Count-U <> 0
    do Write-U-Record
  End-if

  Do After-State		!axl

End-Procedure

!***********************************************************************
Begin-Procedure  Before-W2-Reporting-Co-Chg
!***********************************************************************
  move '  ' to $RESp
  move &A.W2_Reporting_Co to $Company
  move &A.Descr           to $A.Descr
  move &A.Federal_EIN     to $A.Federal_EIN
  move &A.Address1        to $A.Address1
  move &A.Address2        to $A.Address2
  move &A.City            to $A.City
  let  $A.State = rtrim(&A.State, ' ')
  move &A.Postal          to $A.Zip
  move &A.Country         to $A.Country
  move &A.Other_EIN       to #A.Other_EIN
  move &A.W2_Reporting_Co to $A.W2_Reporting_Co
  move &A.Busi_Term_Ind   to $A.Busi_Term_Ind

  If $A.Busi_Term_Ind = 'Y'
     Let $A.Busi_Term_Ind = '1'
  Else
     Let $A.Busi_Term_Ind = '0'
  End-if

  do Get-Third-Party-Amount

  move 0 to #Count-S
  move 0 to #Count-T
  move 0 to #Count-U
  move 'N' to $E-Written

  If $E-Written = 'N'
    do Write-E-Record
  End-if

end-procedure

!***********************************************************************
Begin-Procedure  After-W2-Reporting-Co-Chg
!***********************************************************************

  If #Count-T <> 0
    do Write-T-Record
  End-if

  If #Count-U <> 0
    do Write-U-Record
  End-if

  !Unique State Requirements - For Report Purposes Only
  !  StateEIN has been cleared for the RS Record, but is
  !    required for the report.  Modifications to show on
  !       TAX960ST here.
  Evaluate  $E.W2_State
    when = 'DE'
      move $FedEIN to $StateEIN
      break
    when = 'IN'
      move $StateEmplIN to $StateEIN
      break

  end-evaluate

  !AXL 12/10/2001 - Gex Mods - Begin
  let $StateEIN_display = ltrim($StateEIN, ' ')
  let $StateEIN_display = $StateEIN_display || ' / '
  let $StateEIN_display = $StateEIN_display || $e.company
  !AXL 12/10/2001 - Gex Mods - End

  print $StateEIN_display   (+2,2)                        !State Tax ID

  do Format-Number(#Count-T, $out, 'B99,999')             !Count
  print $out  (,23)

  let #out = #State_Wages-T / 100
  do Format-Number(#out, $out, 'B99,999,999.99')          !State wages
  print $out  (,38)

  let #out = #State_Tax-T / 100
  do Format-Number(#out, $out, 'B9,999,999.99')           !State tax
  print $out  (,59)

  !if $E.W2_State = 'IN'	!AXL 12/10/2001
  if $E.W2_State = 'OH'		!AXL 12/10/2001
     do Print-IN-Local
  end-if

  do Zero-T-Record

End-Procedure

!***********************************************************************
Begin-Procedure Print-IN-Local
!***********************************************************************

  !let $Local_Desc = ' Total all counties:'	!AXL 12/10/2001
  let $Local_Desc = ' Total all localities:'	!AXL 12/10/2001
  print $Local_Desc (,74)

  let #out = #Local_Wages-T / 100                            !County Wages
  do Format-Number(#out, $out, 'B99,999,999.99')    !
  print $out  (,95)

  let #out = #Local_Tax-T / 100                            !County Taxes
  do Format-Number(#out, $out, 'B9,999,999.99')     !
  print $out  (,111)

  do Print-Temp-Table
  do Delete-Temp-Table

End-Procedure

Begin-Procedure Get-Third-Party-Amount
   Let #Third_party_tax = 0
Begin-Select
TRD_PTY.THIRD_PARTY_TAX

   add &TRD_PTY.THIRD_PARTY_TAX to #Third_party_tax

FROM  SYSADM.PS_RC_THIRD_PARTY   TRD_PTY,  SYSADM.PS_W2_COMPANY  TRD_W2_CPNY
WHERE TRD_PTY.OPRID               = $Prcs_OprID
  AND TRD_PTY.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID
  AND TRD_PTY.COMPANY             = TRD_W2_CPNY.COMPANY
  AND TRD_W2_CPNY.CALENDAR_YEAR   = &TX.Balance_Year
  AND TRD_W2_CPNY.TAXFORM_ID      = 'W'
  AND TRD_W2_CPNY.W2_REPORTING_CO = &A.W2_REPORTING_CO
End-Select

   Let #Third_party_tax = #Third_party_tax * 100
   Move #Third_party_tax to $Third_party_tax 099999999999999

End-Procedure

!***********************************************************************
Begin-Procedure Before-State
!***********************************************************************

  move &E.W2_State        to $E.W2_State
  !do Populate-Headings
  print 'State: ' (+2,1)
  print &S.DESCR   (,8)

End-Procedure

!***********************************************************************
Begin-Procedure Before-EmplID
!***********************************************************************

  #ifdef TAXDISPLAY
    Show 'Processing EMPLID : ' &E.EMPLID
  #endif

  Let $FirstTime = 'Y'
  let $State-Reportable = 'N'

  move &E.SSN to $S123 xxx
  If $S123 = &Temp_SSN_Mask or RTRIM(&E.SSN, ' ') = ''
    move '000000000' to $E.SSN
  else
    move &E.SSN to $E.SSN
  End-if

  move &E.YE_Fname  to $FirstName
  move &E.YE_Middle_name to $MiddleName
  move &E.YE_Lname  to $LastName
  move &E.YE_Suffix to $Suffix
  move '         '  to $Phila-SSN
  move '     '      to $TaxingEntityCd

  uppercase $FirstName
  uppercase $MiddleName
  uppercase $LastName
  uppercase $Suffix

  move &E.Emplid       to $E.Emplid
  move &E.City         to $E.City
  let  $E.StateCd = rtrim(&E.State, ' ')
  move &E.Postal       to $E.Zip
  move &E.Country      to $E.Country

  If &E.Statutory_Ee = 'Y'
    move '1' to $StatutoryEe
  else
    move '0' to $StatutoryEe
  End-if

  If &E.Pension_Plan = 'Y'
    move 1 to #RetirePlan
  else
    move 0 to #RetirePlan
  End-if

  If &E.Deceased = 'Y'
    move '1' to $DeceasedFlag
  else
    move '0' to $DeceasedFlag
  End-if

  if &E.THIRDPARTY_SICKPAY = 'Y'
     move 1 to #Third_Party_Sick_Ind
  else
     move 0 to #Third_Party_Sick_Ind
  end-if

  do Populate-EE-Address

  End-Procedure

  Begin-Procedure Populate-EE-Address

  If rtrim($E.City,' ') = ''
    Show 'City is blank in YE data for employee "' $E.Emplid '" in the personal data.'
    Show 'Fix it and run the load program (Tax910ld.sqr) again.'
    Stop
  End-if


  move $E.City         to $City
  move $E.StateCd      to $StateCd
  move $E.Zip          to $Zip
  move $E.Country      to $Country
  do Foreign-Address-Test('Format 3',25)
  If $ForeignAddrInd = 'X'
     Let $US_Zip      = ' '
     Let $US_ZipXtnsn = ' '
     Let $US_State    = ' '
     Let $Frgn_Zip    = $Zip
     Let $Frgn_State  = $StateName
  else
     Let $US_Zip      = $Zip
     Let $US_ZipXtnsn = $ZipExtsn
     Let $US_State    = $StateCd
     Let $Frgn_Zip    = ' '
     Let $Frgn_State  = ' '
     Let $Country-2Char   = ' '
  End-if

  if rtrim($E.Address1, ' ') = ''
      move '        ' to $E.Address1
  end-if

  if rtrim($E.Address2, ' ') = ''
      move '        ' to $E.Address2
  end-if

  move &E.Address1 to $E.Address1
  move &E.Address2 to $E.Address2
  uppercase $E.Address1
  uppercase $E.Address2
  uppercase $E.City
End-Procedure

!***********************************************************************
Begin-Procedure Load-Fed-Amounts
!***********************************************************************

  move 'N' to $WriteORec

Begin-Select
D.BOX
D.W2_AMOUNT

  do Assign-Year-End-Variables
  let $D.Box = RTRIM(&D.Box,' ')
  let #Amount = &D.W2_Amount * 100
  if #Amount < 0  and $D.Box <> $YE_Adv_EIC
    display 'EMPLID ' noline
    display $E.Emplid noline
    display '  W2 Box ID ' noline
    display &D.BOX noline
    display ' Amount ' noline
    display #Amount  noline
    display ' Amount set to Zero '
    move 0 to #Amount
  end-if

    Evaluate $D.Box
      when = $YE_Fed_Wages                          !Fed wages
        if $E.TaxForm_ID = 'W'
          add  #Amount to #Fed_Wages
        else
          add #Amount  to #Fed_Wages_TY
        end-if
        break
      when = $YE_Fed_Tax                            !Fed tax
        if $E.TaxForm_ID = 'W'
          add  #Amount to #Fed_Tax
        else
          add  #Amount to #Fed_Tax_TY
        end-if
        break
      when = $YE_SS_Wages                           !SS wages
        add  #Amount to #SS_Wages
        break
      when = $YE_SS_Tax                             !SS tax
        add  #Amount to #SS_Tax
        break
      when = $YE_Med_Wages                          !Medicare wages
        add  #Amount to #Med_Wages
        break
      when = $YE_Med_Tax                            !Medicare tax
        add  #Amount to #Med_Tax
        break
      when = $YE_SS_Tips                            !SS tips
        add  #Amount to #SS_Tips
        break
      when = $YE_Adv_EIC                            !EIC
        add  #Amount to #Adv_EIC
        break
      when = $YE_Dep_Care                           !Dep care benefits
        add  #Amount to #Dep_Care
        break
      when = $YE_Non_Qual_457_N                     !Non-qualified 457 plans
        add  #Amount to #Non_Qual_457_N
        break
      when = $YE_Non_Qual_457_Y                     !Non-qualified non-457 plans
        add  #Amount to #Non_Qual_457_Y
        break
      when = $YE_Alloc_Tips
        move 'Y' to  $WriteORec
        add  #Amount to #Alloc_TIPS
        break
      when = $YE_Uncoll_SS_Tax_On_Tips
      when = $YE_Uncoll_Med_Tax_On_Tips             !Uncoll Employee tax on tips
        move 'Y' to  $WriteORec
        add  #Amount to #Uncoll_Tax_On_Tips
        break
      when = $YE_Group_Term_Life                    !Employer Cost of Group Term Life Insurance over 50,000
        add  #Amount to #Group_Term_ER_Cost
        break
      when = $YE_401K                               !401(k)
        add  #Amount to #401K
        break
      when = $YE_403B                               !403(b)
        add  #Amount to #403B
        break
      when = $YE_408K6                              !408(k)(6)
        add  #Amount to #408K6
        break
      when = $YE_457B                               !457
        add  #Amount to #457B
        break
      when = $YE_501C18D                            !501(c)(18)(D)
        add #Amount to #501C18
        break
      when = $YE_Uncoll_SS_Tax_GTL
        move 'Y' to  $WriteORec
        add #Amount to #Uncoll_SS_Tax_GTL
        break
      when = $YE_Uncoll_Med_Tax_GTL
        move 'Y' to  $WriteORec
        add #Amount to #Uncoll_Med_Tax_GTL
        break
      when = $YE_Basic_Qtrs_and_Subsist             !Basic Quarters and Subsistence Pay
        add  #Amount to #Basic_Qtrs_and_Subsist
        break
      when = $YE_Med_Svgs_Acct
        move 'Y' to  $WriteORec
        add  #Amount to #Med_Svgs_Acct
        break
      when = $YE_408P_Simple_Retirement
        add  #Amount to #408P_Simple_Retirement
        move 'Y' to  $WriteORec
        break
      when = $Ye_Adoption_Exp
        add  #Amount to #Adoption_Exp
        move 'Y' to  $WriteORec
        break
      when = $YE_NonStatutory_Stock_Opt
        add  #Amount to #Nonstatutory_Stock_Options
        break

  End-evaluate

FROM  SYSADM.PS_YE_AMOUNTS D
WHERE D.COMPANY         = &E.Company
  AND D.CALENDAR_YEAR   = &TX.Balance_Year
  AND D.EMPLID          = &E.Emplid
  AND D.TAXFORM_ID      = &E.TaxForm_ID
  AND D.SEQUENCE_NUMBER = 1
  AND D.STATE           = '$U'
End-Select
End-Procedure

!***********************************************************************
begin-procedure Load-State-Amounts
!***********************************************************************

  do Assign-Year-End-Variables
  let $State-Reportable = 'N'
begin-SELECT
DS.BOX
DS.W2_AMOUNT
 
  let #Amount = &DS.W2_Amount * 100

  let $DS.Box = RTRIM(&DS.Box,' ')
  evaluate $DS.Box
    when = $YE_State_Wages                    	!State wages
      add  #Amount to #State_Wages
      break
    when = $YE_State_Tax                    	!State tax
      add  #Amount to #State_Tax
      break
  end-evaluate
  let $State-Reportable = 'Y'

FROM  SYSADM.PS_YE_AMOUNTS DS
WHERE DS.COMPANY         = $E.Company
  AND DS.CALENDAR_YEAR   = &TX.Balance_Year
  AND DS.EMPLID          = $E.Emplid
  AND DS.TAXFORM_ID      = $E.TaxForm_ID
  AND DS.SEQUENCE_NUMBER = #E.Sequence_Number
  AND DS.BOX    IN ('16','17')
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Load-Local-Amounts
!***********************************************************************

  !AXL 01/28/2003 Initialize amounts 
  let #Updt_Wages = 0
  let #Updt_Taxes = 0

begin-SELECT      !Local Data
DL.BOX
DL.W2_AMOUNT
DL.STATE
DL.LOCALITY       () on-break	level=3
                     print=never
                     after=Report-Local-Amounts
                     save=$prev_locality

  let $LocalReportable = 'Y'
  let $State-Reportable = 'Y'
  let $LCL_Status =  nvl (&DL.Locality,'none')
  if  $LCL_Status = 'none'
    display 'No Locality identified for local amount.'
    display 'Processing employee: ' noline
    display $E.EmplID               noline
    display '  In company: '        noline
    display $E.Company
    STOP
  end-if

  let #Amount = &DL.W2_Amount * 100
  let $DL.Locality = &DL.Locality
  let $DL.Box = RTRIM(&DL.Box,' ')

  evaluate $DL.Box
    when = $YE_Local_Wages         !Local wages
      let #Updt_Wages  = #Amount   !AXL 01/18/2002
      let #Local_Wages = #Amount   !AXL 01/28/2003
      #debug8 show $E.COMPANY ' ' &TX.Balance_Year ' ' &DL.LOCALITY ' ' $E.Emplid ' ' &DL.W2_Amount ' ' $E.TaxForm_ID ' ' #E.Sequence_Number ' ' &DL.BOX
      #debug8 show '$DL.Locality ' $DL.Locality ' $hold_locality ' $hold_locality ' $DL.BOX ' $dl.box ' $hold_box ' $hold_box '$E.EmplID ' $E.EmplID ' $hold_ssn ' $hold_ssn ' #Amount ' #amount ' #Local_Wages ' #local_wages ' #updt_wages ' #Updt_Wages 
      break
    when = $YE_Local_Tax           !Local withheld
      let  #Updt_taxes = #Amount   !AXL	01/18/2002
      let  #Local_tax  = #Amount   !AXL 01/28/2003
      #debug8 show $E.COMPANY ' ' &TX.Balance_Year ' ' &DL.LOCALITY ' ' $E.Emplid ' ' &DL.W2_Amount ' ' $E.TaxForm_ID ' ' #E.Sequence_Number ' ' &DL.BOX
      #debug8 show '$DL.Locality ' $DL.Locality ' $hold_locality ' $hold_locality ' $DL.BOX ' $dl.box ' $hold_box ' $hold_box ' $E.EmplID ' $E.EmplID ' $hold_ssn ' $hold_ssn ' #Amount ' #amount ' #Local_tax ' #local_tax ' #updt_taxes ' #Updt_taxes
      break
  end-evaluate

FROM  SYSADM.PS_YE_AMOUNTS DL
WHERE DL.COMPANY         = $E.COMPANY
  AND DL.CALENDAR_YEAR   = &TX.Balance_Year
  AND DL.EMPLID          = $E.Emplid
  AND DL.TAXFORM_ID      = $E.TaxForm_ID
  AND DL.SEQUENCE_NUMBER = #E.Sequence_Number
  AND DL.BOX    IN ('18','19')
  AND [$GEXXX915_Include_Locality_Criteria]	!AXL 12/10/2001
ORDER BY DL.LOCALITY
end-SELECT
end-procedure                      !Load-Local-Amounts

!***********************************************************************
begin-procedure  Report-Local-Amounts
!***********************************************************************
  #debug9 show 'In Report-Local-Amounts'
  #debug8 show 'DL.LOCALITY '    &DL.LOCALITY 
 
  let $Locality = RTRIM($DL.Locality,' ')
  do Get-Locality-Mag-CD
  #debug8 display '$Loc_Tax_Cd from Get Local Mag cd ' noline
  #debug8 display $Loc_Tax_Cd

  !AXL 12/10/2001 - Gex Mods - Begin
  do Check-Locality-Array
  #debug8 display '$Loc_Tax_Cd from check array ' noline
  #debug8 display $Loc_Tax_Cd

  let $Loc_Tax_Cd = ltrim ($Loc_Tax_Cd,' ')
 
  do get-res-ind	!axl
  !AXL 12/10/2001 - Gex Mods - End

  if $Loc_Tax_Cd <> ''
    do Update-Temp-Table
    #debug8 do sel-from-temp

    !AXL 12/10/2001 - Gex Mods - Begin
    if $res_ind = 'Y'
       move 'R' to $Tax_Type_Cd
    else
       move 'C' to $Tax_Type_Cd
    end-if
    !AXL 12/10/2001 - Gex Mods - End
    let $Local_Save = $Locality
    let $Loc_Mag_Cd = $Loc_Tax_Cd
    !do Write-S-Record-from-Local  AXL 1/28/2003 Not necessary. 
    do Write-S-Record	           !AXL 1/28/2003 Force RS rec after each locality
  else
    let $LocalReportable = 'N'
  end-if

  move ' ' to $Loc_Tax_Tp	
  move ' ' to $Loc_Mag_Cd
	
end-procedure                      !Report-Local-Amounts

!AXL 12/10/2001 - Gex Mods - Begin
!***********************************************************************
begin-procedure Get-Res-Ind
!***********************************************************************

  let $res_ind = ' '

begin-SELECT      
LT.RESIDENT

  let $res_ind = &lt.resident

FROM PS_LOCAL_TAX_DATA LT
  WHERE  LT.EMPLID   = &E.EMPLID
     AND LT.COMPANY  = &E.COMPANY
     AND LT.STATE    = &DL.STATE
     AND LT.LOCALITY = &DL.LOCALITY
     AND LT.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_LOCAL_TAX_DATA 
        WHERE LT.EMPLID  = EMPLID
          AND LT.COMPANY = COMPANY
          AND LOCALITY   = &DL.LOCALITY
          AND EFFDT <= $AsOfDate)
end-SELECT
end-procedure                      
!AXL 12/10/2001 - Gex Mods - End

!***********************************************************************
Begin-Procedure After-EmplID
!***********************************************************************

  !Unique State Requirements - Different from MMREF
  !  RS record requires specific changes
  !    Be advised - TAXMMREF contains some State Specific
  !        RS record code also.

  Move 0 to $Zero_fill 099999999999999

  evaluate $E.W2_State
    when = 'AL'
      do RS-CommonClear
      move #Fed_Tax  to $OtherStateData 0999999999
      move '     '   to $StateNumCdA
      move '      '  to $Zero_fill
      move #Local_Wages      to $Local_Wages    09999999999
      move #Local_Tax        to $Local_Taxes    09999999999
      break
    when = 'DE'
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      move '      '  to $Zero_fill
      break
    when = 'GA'
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      move '      '  to $Zero_fill
      move $StateEmplIN to $StateControlNumber
      move $StateEmplIN to $SupplData1 ~~~~~~~xx
      move '      '  to $StateEIN
      break
    when = 'IN'
      if $LocalReportable <> 'Y'
        do Indiana-Specific
      end-if
      break
    when = 'ME'
      move &TX.Balance_Year to $ReportingPeriod
      LET $ReportingPeriod = '12' || $ReportingPeriod
      let $SupplData1 = $StateAccountNumber
      move #Local_Wages      to $Local_Wages    09999999999
      move #Local_Tax        to $Local_Taxes    09999999999
      move '      '  to $Zero_fill
      break
    when = 'MT'
      move &TX.Balance_Year to $ReportingPeriod
      LET $ReportingPeriod = '12' || $ReportingPeriod
      move #Local_Wages      to $Local_Wages    09999999999
      move #Local_Tax        to $Local_Taxes    09999999999
      break
    when = 'NC'
      do RS-CommonClear
      move #Local_Wages      to $Local_Wages    09999999999
      move #Local_Tax        to $Local_Taxes    09999999999
      break
    when = 'ND'
      do Write-W-Record    ! North Dakota requires 'RW' record
                           ! but wants ee data cleared on 'RS'
                           ! record - write 'RW' before clear
      do RS-CommonClear
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      move '      '  to $Zero_fill
      move '      '  to $StateEIN
      break
    when = 'NE'
      move #Local_Wages      to $Local_Wages    09999999999
      move #Local_Tax        to $Local_Taxes    09999999999
      break
    !AXL 12/10/2001 - Gex Mods - Begin
    when = 'OH'
      move '      '  to $Zero_fill
      move &TX.Balance_Year to $ReportingPeriod
      LET $ReportingPeriod = '12' || $ReportingPeriod
      !AXL 1/28/2003 Handled elsewhere - Begin
      !move #Local_Wages      to $Local_Wages    09999999999
      !move #Local_Tax        to $Local_Taxes    09999999999
      !let $OtherStateData   =  lpad((rtrim($Loc_Tax_Cd,' ' )),10,' ')
      !move $Loc_Mag_CD       to $OtherStateData 
      !AXL 1/28/2003 Handled elsewhere - End
      break
    !AXL 12/10/2001 - Gex Mods - End
    when = 'UT'
      move '      '  to $Zero_fill
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when = 'WI'
      let $SupplData1 = rpad($SupplData1,75,'0')
      let $SupplData2 = rpad($SupplData2,75,'0')
      move '    '    to $Local_Wages
      move '    '    to $Local_Taxes
      break
    when-other
      break
  end-evaluate

  if $State-Reportable = 'Y'
    evaluate $E.W2_State
      when = 'AL'
      when = 'DE'
      when = 'IN'
      when = 'ME'
      when = 'NC'
      when = 'ND'
        if $LocalReportable <> 'Y'
          do Write-S-Record
        end-if
        break
      when = 'NE'
      when = 'UT'
      when = 'WI'
        do Write-W-Record
        do Write-S-Record
        break
      when-other
        !do Write-W-Record  AXL 1/28/2003 Handled elsewhere
        do Write-O-Record
        !do Write-S-Record  AXL 1/28/2003 Handled elsewhere
        break
    end-evaluate
  end-if

  do Zero-W-Record
  do Zero-O-Record
  do Zero-S-Record
  do Clear-Space-Fields

  Let $LocalReportable = 'N'

End-Procedure

!***********************************************************************
Begin-Procedure Clear-Space-Fields
!***********************************************************************

!  These fields are space filled  'RS' Record
  move '  '          to $WorkWeeks
  move '        '    to $EmployDate
  move '        '    to $SepDate
  move '  '          to $OtherStateData
  move ''   to $SupplData1
  move ''   to $SupplData2
  move ''      to $ReportingPeriod
  move ' '           to $Tax_Type_CD
  move '      '      to $StateControlNumber

End-Procedure

Begin-Procedure RS-CommonClear

      move '     '   to $Suffix
      move '     '   to $E.Address1
      move '     '   to $E.Address2
      move '     '   to $E.City
      move '     '   to $US_State
      move '     '   to $US_Zip
      move '     '   to $US_ZipXtnsn
      move '     '   to $Frgn_State
      move '     '   to $Frgn_Zip
      move '     '   to $Country-2Char
      move ' '       to $Tax_Type_Cd
      move 0         to $Zero_fill 099999999999999
End-Procedure

!***********************************************************************
Begin-Procedure Indiana-Specific
!***********************************************************************

  move #Local_Wages      to $Local_Wages    09999999999
  move #Local_Tax        to $Local_Taxes    09999999999
  move $StateEmplIN to $StateControlNumber
  move $StateEmplIN to $SupplData1 ~~~~~~~xxx
  move $Loc_Mag_CD to $OtherStateData x~
  let $OtherStateData = lpad($OtherStateData,10, ' ')
  move $Loc_Mag_CD to $Tax_Type_Cd ~x
  move '      '  to $Zero_fill
  move '      '  to $StateEIN
End-Procedure

!***********************************************************************
Begin-Procedure After-State
!***********************************************************************

!Unique State Requirements - Different from MMREF
!   State does not require RF record

  evaluate $E.W2_State
    when = 'AL'
    when = 'NC'
    when = 'ME'
      break
    when-other
      do Write-F-Record
      break
  end-evaluate
  do State-End-Totals
  do Process-Totals

End-Procedure

!***********************************************************************
Begin-Procedure Write-E-Record
!***********************************************************************

Begin-SELECT
CP.COMMON_PAY_ID

FROM SYSADM.PS_COMPANY_TBL CP
WHERE CP.COMPANY = &E.Company
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   SYSADM.PS_COMPANY_TBL
       WHERE  COMPANY = &E.Company
         AND  EFFDT  <= $EffDate)
end-SELECT
  move $A.Federal_EIN  to $FedEIN   099999999
  If #A.Other_EIN <> 0
    move #A.Other_EIN  to $OtherEIN 099999999
  else
    move ' '           to $OtherEIN
  End-if
  move $A.Descr        to $ErName
  if $E.W2_State = 'AL'
    if $A.Address1  > ''
       move $A.Address1     to $ErAddress2
       move '         '     to $ErAddress1
    end-if
  else
    move $A.Address1     to $ErAddress1
    move $A.Address2     to $ErAddress2
  end-if
  move $A.City         to $City
  move $A.State        to $StateCd
  move $A.Zip          to $Zip
  move $A.Country      to $Country
  do Foreign-Address-Test('Format 3',25)
  move &TX.Employment_Type to $Empl_Type
  let $Common_Pay_ID = RTRIM(&CP.Common_Pay_ID,' ')
!  If $Common_Pay_ID > ''
!    move '2' to $AgentID
!  else
    move '   ' to $AgentID
!  end-if

  if #Third_party_tax <>  0
    move '1' to $Thrd_Pty_Sick
  else
    move '0' to $Thrd_Pty_Sick
  end-if

  uppercase $ErName
  uppercase $ErAddress1
  uppercase $ErAddress2

  do  Validate-SWT-ID

  If $ForeignAddrInd = 'X'
     Let $US_Zip      = ' '
     Let $US_ZipXtnsn = ' '
     Let $US_State    = ' '
     Let $Frgn_Zip    = $Zip
     Let $Frgn_State  = $StateName
  else
     Let $US_Zip      = $Zip
     Let $US_ZipXtnsn = $ZipExtsn
     Let $US_State    = $StateCd
     Let $Frgn_Zip    = ' '
     Let $Frgn_State  = ' '
     Let $Country-2Char   = ' '
  End-if

  !Unique State Requirements - Different from MMREF
  !  State has specific requirements for RE record

  evaluate $E.W2_State
    when = 'AL'
      do RE-GroupClear
      move '    '    to $US_ZipXtnsn
      break
    when = 'GA'
      let $StateEmplIN = $StateEIN
      move $StateEmplIN to $StateEIN
      break
    when = 'IN'
      let $StateEmplIN = $StateEIN
      move $StateEmplIN to $StateEIN
      break
    when = 'NC'
      do RE-GroupClear
      move '       ' to $FedEIN
      break
  end-evaluate

  do Write-RE-Record
  do Check-Disk

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count
  move 'Y' to $E-Written
End-Procedure

!***********************************************************************
begin-Procedure RE-GroupClear
!***********************************************************************

      move '    '    to $A.Busi_Term_Ind
      move '     '   to $Frgn_State
      move '     '   to $Frgn_Zip
      move '     '   to $Country-2Char
      move '     '   to $Empl_Type
      move '     '   to $Tax_Jurisdiction
      move '     '   to $Thrd_Pty_Sick
end-procedure

!***********************************************************************
begin-Procedure Check-Disk
!***********************************************************************

if $FileType = 'T'
  if &E.W2_State = 'GA'
     close 10
       display &E.W2_State     noline
       display ' does not accept tape '  noline
       display 'submission' noline
       display ' must be on cartridge or diskette.'
       display ' '
       stop
   end-if
end-if

if $FileType = 'D'

  if &E.W2_State = 'DE'
     if #FileExtension > 1
       close 10
       display ' '
       display &E.W2_State           noline
       display ' does not accept multiple-volume diskettes.'
       display 'Submission for company ' noline
       display $Company                  noline
       display ' must be on tape.'
       display ' '
       stop
     end-if
  end-if
end-if

End-Procedure

!***********************************************************************
Begin-Procedure Write-W-Record
!***********************************************************************

  do Write-RW-Record
  do Check-Disk

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count
  add 1 to #Count-T
End-Procedure


Begin-Procedure Write-O-Record
  If $WriteORec ='Y'

    do Write-RO-Record
    do Check-Disk

    add 1 to #RecordCount
    add 1 to #Tot_Record_Count
    add 1 to #Count-U
  End-if
End-Procedure

!***********************************************************************
Begin-procedure Write-S-Record-from-Local
!***********************************************************************

  do Populate-EE-Address

  Evaluate $E.W2_State
    when = 'IN'
      do Indiana-Specific
      do Write-S-Record
      break
    when-other
      break
  end-evaluate
  !move 0 to #State_Wages     	AXL 12/10/2001
  !move 0 to #State_Tax		AXL 12/10/2001
end-procedure

!***********************************************************************
begin-procedure Write-S-Record
!***********************************************************************

  #debug9 show 'In Write S Rec step '  &DL.LOCALITY ' ' $E.Emplid  ' ' #Local_Wages ' ' #Local_Wages-T
  do Write-RS-Record
  #debug8 show &DL.LOCALITY ' ' $E.Emplid  ' ' #Local_Wages ' ' #Local_Wages-T
  do Check-Disk

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count

end-procedure

!***********************************************************************
Begin-Procedure Write-T-Record
!***********************************************************************
  move #Count-T           to $Count-T 0999999                     !Count

! Unique state requirements
!    State does not require RT Record

  Evaluate $E.W2_State
    when = 'NC'
    when = 'WI'
      break
    when-other
      do Write-RT-Record
      do Check-Disk
      break
  end-evaluate

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count
  add #Count-T  to    #Count-F !Company count

  !AXL 12/10/2001 - Gex Mods - Begin
  add #state_wages-T to #state_wages-f
  add #State_Tax-T   to #state_tax-f

  add #local_wages-t to #local_wages-f
  add #local_tax-T   to #local_tax-f
  !AXL 12/10/2001 - Gex Mods - End

End-Procedure

!***********************************************************************
Begin-Procedure Write-U-Record
!***********************************************************************

  do Write-RU-Record
  do Check-Disk

  add 1 to #RecordCount
  add 1 to #Tot_Record_Count
  do Zero-U-Record
End-Procedure

!***********************************************************************
Begin-Procedure Write-F-Record
!***********************************************************************

  if $E.W2_State <> 'IN'
     move  #Count-F to $Count-F  099999999
  else
     move #Count-S  to $Count-F  099999999
  end-if

  do Write-RF-Record
  do Check-Disk

  move 0         to #Count-S
  !move 0         to #Count-F  AXL 12/10/2001
  add 1 to #RecordCount
  add 1 to #Tot_Record_Count

End-Procedure

!***********************************************************************
Begin-Procedure Process-Totals
!***********************************************************************
  !AXL 12/10/2001 - Gex Mods - Begin
  print 'Totals'  (+3,1)

  do Format-Number(#Count-F, $out, 'B99,999')
  print $out  (,23)

  let #out = #state_wages-f / 100
  do Format-Number(#out, $out, 'B99,999,999.99')
  print $out  (,38)

  let #out = #state_tax-f / 100
  do Format-Number(#out, $out, 'B9,999,999.99')
  print $out  (,59)

  let #out = #local_wages-f / 100
  do Format-Number(#out, $out, 'B99,999,999.99')
  print $out  (,95)

  let #out = #local_tax-f / 100
  do Format-Number(#out, $out, 'B9,999,999.99')
  print $out  (,111)
  !
  do Format-Number (#Tot_Record_Count, $out, 'B99,999')
  !print 'Total File Record Count: '(+3,8)
  ! print $out (,33)
  !AXL 12/10/2001 - Gex Mods - End
  move 0 to #Tot_Record_Count

End-Procedure

!AXL 12/10/2001 - Gex Mods - Begin
!***********************************************************************
Begin-Procedure Check-Locality-Array
!***********************************************************************
  Let $mag_cd_found = 'N'
  Let #k = 1

  While $mag_cd_found = 'N'
    Get $GEXXX915_STATE $GEXXX915_LOCALITY $GEXXX915_W2_MAG_CODE From Locality-Array(#k)
    #debug8 show 'Chk Loc Array: $State ' $state ' $Locality ' $Locality '$GEXXX915_STATE ' $GEXXX915_STATE  '$GEXXX915_LOCALITY ' $GEXXX915_LOCALITY ' $GEXXX915_W2_MAG_CODE ' $GEXXX915_W2_MAG_CODE 
    If $State    = $GEXXX915_STATE    And
       $Locality = $GEXXX915_LOCALITY
      Let $Loc_Tax_Cd = $GEXXX915_W2_MAG_CODE
      Let $mag_cd_found = 'Y'
    Else
      Add 1 To #k
    End-If
  End-While
End-Procedure
!AXL 12/10/2001 - Gex Mods - End

!***********************************************************************
begin-procedure Get-Locality-Mag-CD
!***********************************************************************
  do Check-Temp-Table
  if $Code_Found = 'N'

    do Check-Master-Table
    move &L2.W2_Mag_Code   to $Loc_Tax_Cd
  else
    move &LL.W2_Mag_Code  to $Loc_Tax_Cd
  end-if
  
end-procedure

!***********************************************************************
begin-procedure Check-Temp-Table
!***********************************************************************
  let $Code_Found = 'N'
begin-SELECT
LL.W2_MAG_CODE
LL.LOCALITY
  let $Code_Found = 'Y'
FROM  SYSADM.PS_R_TAX960XX  LL
WHERE LL.STATE    = $State
  AND LL.LOCALITY = $Locality
end-select
end-procedure

!***********************************************************************
begin-procedure  Check-Master-Table
!***********************************************************************

  move 'N' to $LocalityNameFound

begin-SELECT
L2.W2_MAG_CODE

FROM  SYSADM.PS_LOCAL_TAX_TBL2 L2
WHERE L2.STATE     = $State
  AND L2.LOCALITY  = $Locality
  AND L2.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   SYSADM.PS_LOCAL_TAX_TBL2
       WHERE  STATE    = L2.STATE
         AND  LOCALITY = L2.LOCALITY
         AND  EFFDT   <= $AsOfDate)
end-SELECT

begin-SELECT
L.LOCALITY_NAME
L.LOCALITY

  do Build-Temp-Table

FROM  SYSADM.PS_LOCAL_TAX_TBL L
WHERE L.STATE    = $State
  AND L.LOCALITY = $Locality
  AND EFFDT =
      (SELECT MAX(EFFDT)
       FROM   SYSADM.PS_LOCAL_TAX_TBL
       WHERE  STATE    = L.STATE
         AND  LOCALITY = L.LOCALITY
         AND  EFFDT   <= $AsOfDate)
end-SELECT
end-procedure

!***********************************************************************
begin-procedure  Build-Temp-Table
!***********************************************************************
begin-SQL on-error=Insert-Error
  INSERT INTO SYSADM.PS_R_TAX960XX (STATE,
                             LOCALITY,
                             W2_MAG_CODE,
                             LOCALITY_NAME,
                             WAGES,
                             TAXES)
          VALUES ($State,
                  $Locality,
                  &L2.W2_Mag_Code,
                  &L.Locality_Name,
                  0,0)
end-SQL
end-procedure

!***********************************************************************
begin-procedure Insert-Error
!***********************************************************************
  display 'Error on insert to temporary local table '
end-procedure

begin-procedure Delete-Temp-Table
begin-SQL on-error=Ignore
  DELETE FROM SYSADM.PS_R_TAX960XX
end-SQL
end-procedure

!***********************************************************************
begin-procedure Ignore
!***********************************************************************
! dummy procedure to avoid SQL error message on delete of empty table
end-procedure

!***********************************************************************
begin-procedure  Update-Temp-Table
!***********************************************************************
 !AXL 01/18/2002 - Begin
 !    Helpful for debugging problems
 !    Save to Excel and compare to SQL results
 #ifdef debug7
   show 'update temp tbl - emplid ' $e.emplid
        ' loc tax cd  ' $loc_tax_cd
        ' state       ' $state
        ' locality    ' $Locality
        ' local wages ' #Updt_Wages
        ' local taxes ' #Updt_taxes
 #endif
 !AXL 01/18/2002 - End

begin-SQL on-error=Update-Error
  UPDATE  SYSADM.PS_R_TAX960XX
  !AXL 01/18/2002 - Begin
  !SET     WAGES = WAGES + #Local_Wages, TAXES = TAXES + #Local_Tax
  SET     WAGES = WAGES + #updt_wages,
          TAXES = TAXES + #updt_taxes
  !AXL 01/18/2002 - End
  WHERE   STATE    = $State     AND
          LOCALITY = $Locality

end-SQL
end-procedure

!***********************************************************************
begin-procedure  sel-from-temp
!***********************************************************************

begin-Select

temp.locality
temp.w2_mag_code
temp.locality_name
temp.wages
temp.taxes

  show &temp.locality ' ' &temp.w2_mag_code ' ' &temp.locality_name ' ' &temp.wages ' ' &temp.taxes

from ps_r_tax960xx temp

end-select
end-procedure

!***********************************************************************
begin-procedure Update-Error
!***********************************************************************
  display 'Error on update of temporary local table '
end-procedure

!***********************************************************************
begin-procedure  Print-Temp-Table
!***********************************************************************
  let #LnSp = 2
begin-SELECT
LCL.LOCALITY_NAME
LCL.WAGES
LCL.TAXES
LCL.W2_MAG_CODE

  let $LCL.W2_Mag_Code = ltrim (&LCL.W2_Mag_Code,' ')
  if &LCL.W2_Mag_Code <> ''

    let $Local_Desc = substr (&LCL.Locality_Name,1,18)
    print $Local_Desc (+#LnSp,74)
    let #LnSp = 1

    let #out = &LCL.Wages / 100                       !County Wages
    do Format-Number(#out, $out, 'B99,999,999.99')    !
    print $out  (,95)

    let #out = &LCL.Taxes / 100                       !County Taxes
    do Format-Number(#out, $out, 'B9,999,999.99')     !
    print $out  (,111)

  end-if

FROM SYSADM.PS_R_TAX960XX LCL

end-select
end-procedure

!***********************************************************************
begin-procedure Foreign-Address-Test($Format,#MaxLength)
!***********************************************************************
  Let $_StateName = ''

  If $_Country = 'USA'
    move ' ' to $_ForeignAddrInd
  else
    move 'X' to $_ForeignAddrInd

    If $_Country <> $priorCountry
      do Get-Country-Code
      move $_Country to $priorCountry
      move &_Descr   to $CountryName
      move &_COUNTRY_CD_1042 to $_Country-2Char
    End-if

    if $_StateCd = ''
      Show '      Note: No state code for this record.  Country - ' $_Country
    else
      do Get-State-Code
      move &_STATE.DESCR to $_StateName
      uppercase $_StateName
    End-if

    Evaluate $Format
      when = 'Format 1'
        let #Length = LENGTH(RTRIM($CountryName,' '))
        let $_City = SUBSTR(RTRIM($_City,' '),1,(#MaxLength - #Length - 4) )
        let $_City = $_City || ' ' || $_StateCd || ' ' || $CountryName
        move ' ' to $_StateCd
      when = 'Format 2'
        let $_StateCd = $_StateCd || ' ' || $CountryName
        uppercase $_StateCd
      when = 'Format 3'
        let $_StateCd = $_StateCd
        uppercase $_StateCd
    End-evaluate
  End-if
  uppercase $_City
  let $EditZip = RTRIM($_Zip, ' ')
  let #DashPosition = INSTR($EditZip,'-',1)
  if #DashPosition <> 6
    move $_Zip to $_ZipExtsn ~~~~~xxxx
  else
    move $_Zip to $_ZipExtsn ~~~~~~xxxx
  end-if
End-Procedure


!***********************************************************************
Begin-Procedure Get-Country-Code
!***********************************************************************
  Let $Record_found = 'N'
Begin-Select
COUNTRY_2CHAR
DESCR
  Let $Record_found = 'Y'
FROM  SYSADM.PS_COUNTRY_TBL
WHERE COUNTRY = $Country
End-Select

 If $Record_found = 'N'
   Show ' Two Character Country code for ' $Country ' doesn''t exist in Country table.'
   Stop
 End-if

  Let $Record_found = 'N'
Begin-Select
COUNTRY_CD_1042
  Let $Record_found = 'Y'
FROM  SYSADM.PS_CNTRY_1042_TBL
WHERE COUNTRY = $Country
End-Select

 If $Record_found = 'N'
   Show ' Two Character Country code for ' $Country ' doesn''t exist in Country 1042 table.'
   Stop
 End-if
End-Procedure

!***********************************************************************
Begin-Procedure Get-State-Code
!***********************************************************************
  Let $Record_found = 'N'
Begin-Select
STATE.NUMERIC_CD
STATE.DESCR
  Let $Record_found = 'Y'
FROM  SYSADM.PS_STATE_NAMES_TBL  STATE
WHERE STATE.COUNTRY = $Country
  AND STATE.STATE   = $StateCd
End-Select

 If $Record_found = 'N'
   Show ' State code State : ' $StateCd ', Country : ' $Country ' doesn''t exist in State table.'
   Stop
 End-if
End-Procedure

!***********************************************************************
Begin-Procedure Get-ee-State-Code
!***********************************************************************

  Let $Record_found = 'N'
  
Begin-Select
S.NUMERIC_CD
S.DESCR
  Let $Record_found = 'Y'
FROM  SYSADM.PS_STATE_NAMES_TBL  S
!WHERE  S.STATE   = $E.W2_State			axl
WHERE  S.STATE   = $State
   AND S.COUNTRY = 'USA'
End-Select

 If $Record_found = 'N'
   Show ' State code State : ' $E.W2_State ', Country : ' $Country ' doesn''t exist in State table.'
  !Stop !AXL 12/10/2001
 End-if
End-Procedure

!***********************************************************************
Begin-Procedure State-End-Totals
!***********************************************************************

  display ''
  If $FileType = 'D'
    display 'Upon successful conclusion of this program, following diskette'
    display 'file(s) will have been created:'
    move 1 to #i
    while #i <= #FileExtension
     move #i to $i 099
     #ifdef OS400
       let $FileExtension = '(D' || $i || ')'
       let $FileID = '{FILEPREFIX}' || $ReportID2 || $i
     #else
       let $FileID = '{FILEPREFIX}' || $ReportID2 || '.' || $i
     #endif
       display $FileID
       add 1 to #i
    end-while
  else
    display 'Upon successful conclusion of this program, one file will have'
    display 'been created:'
    display ''
    !axl
    !let $FileID =  '{FILEPREFIX}' || $ReportID2 || '{FILESUFFIX}'
    !display $FileID            noline
    let $FileID_display =  '{FILEPREFIX}' || 'gexpy618.dat'  
    !axl
    display $FileID_display      noline
    display ' contains W-2 file.'
  end-if
  display ''
  do Delete-Temp-Table

End-Procedure

!***********************************************************************
begin-procedure Is-String-Numeric ($Test_String, :#Return_Value)
!***********************************************************************
  let #Max_Lngth = length ($Test_String)
  let #Return_Value  =  1
  let #Char_Pos  =  1

  while #Char_Pos <= #Max_Lngth
    let $Test_Char = substr ($Test_String, #Char_Pos, 1)
    let #Which_Digit = instr ('0123456789', $Test_Char, 1)
    if  #Which_Digit = 0
      let #Return_Value  =  0
      break
    end-if
    add 1 to #Char_Pos
  end-while
end-procedure

!***********************************************************************
begin-procedure Validate-SWT-ID
!***********************************************************************

  if &E.W2_State <> 'DE'
    let $StateEIN = rtrim(&E.Employer_ID_SWT, ' ')
    if $StateEIN = ''
      do Invalid-SWT-ID
    end-if
  end-if

  Evaluate &E.W2_State
    when = 'AL'
      let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
      let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 6)
      do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
      if #Rtrn_Value = 0
        do Invalid-SWT-ID
      end-if
    when = 'DE'
       move '        '  to $StateEIN
    when = 'IN'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 10)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       break
    when = 'ME'
       move &E.Employer_ID_SWT  to  $StateEIN
       if '' = rtrim($StateEIN,' ')
          do Invalid-SWT-ID
       end-if
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 9)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       let $StateAccountNumber = $StateEIN
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 10, 2)
       if rtrim($SWT_ID_Numeric,' ') = ''
         let $StateAccountNumber = rtrim($StateAccountNumber, ' ') || '00'
       end-if
       break
    when = 'MT'
       move &E.Employer_ID_SWT to $StateEIN
       break
    when = 'NC'
       move &E.Employer_ID_SWT  to  $StateEIN
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 9)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       break
    when = 'NE'
       move &E.Employer_ID_SWT to $StateEIN
       let $StateEIN = RTRIM($StateEIN, ' ')
       do StripToDash
       break
    when = 'UT'
       move &E.Employer_ID_SWT  to  $StateEIN
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $First_Char   = substr ($SWT_ID_Ltrim, 1, 1)
       uppercase $First_Char
       let #Alpha_Char   = range ($First_Char, 'A', 'Z')
       if #Alpha_Char = 0
         do Invalid-SWT-ID
       end-if
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 2, 5)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-ID
       end-if
       let $SWT_ID_Space  = substr ($SWT_ID_Ltrim, 7, 1)
       if  $SWT_ID_Space <> ''
         if  $SWT_ID_Space <> ' '
           do Invalid-SWT-ID
         end-if
       end-if
       let  $StateEIN  =  substr ($SWT_ID_Ltrim, 1, 6)
       break
    when = 'WI'
      move &E.Employer_ID_SWT  to  $StateEIN
      let $SWT_ID_Test  = ltrim ($StateEIN, ' ')
      let $SWT_ID_Test  = rtrim ($StateEIN, ' ')
      let $Six_Char_ID  = substr ($SWT_ID_Test, 1, 6)
      do  Is-String-Numeric ($Six_Char_ID, #Rtrn_Value)
      if #Rtrn_Value = 0
        do Invalid-SWT-ID
      else
        if $Six_Char_ID = ''
          do Invalid-SWT-ID
        else
          move $Six_Char_ID to $SWT_ID_Edited  099999
        end-if
      end-if
    when-other
       move &E.Employer_ID_SWT  to  $StateEIN
       break
  end-evaluate
end-procedure

!  Unique editing requirements for StateEIN

!***********************************************************************
begin-procedure Invalid-SWT-ID
!***********************************************************************
  display ''
  display 'Invalid SWT ID number -- process terminating'
  display 'For Company: ' noline
  display  $ErName
  display 'State ID number is: ' noline
  display  &E.Employer_ID_SWT noline
  display ''
  Evaluate &E.W2_State
    when = 'AL'
      display 'Alabama ID should be entered as: 999999'
      break
    when = 'NC'
      display ' ID should be entered as: 999999999'
      break
    when = 'UT'
      display 'Utah Account number should be entered as: X99999'
      break
    when = 'WI'
      display 'Wisconsin ID should be entered as: 999999 or 999999-9'
      break
    when-other
      break
  end-evaluate
    display ''
    stop
end-procedure

!***********************************************************************
begin-procedure StripToDash
!***********************************************************************

  let #DashPosition = INSTR($StateEIN,'-',1)
  if #DashPosition <> 2 and #DashPosition <> 3
    let $State_ID_Ltrim = ltrim ($StateEIN, ' ')
  else
    let $State_ID_Ltrim = ltrim ($StateEIN, ' ')
    let $State_ID_Ltrim = ltrim ($State_ID_Ltrim, '0123456789')
    let $State_ID_Ltrim = ltrim ($State_ID_Ltrim, '-')
  end-if
  let $State_ID_Numeric  = $State_ID_Ltrim
  let #StateEIN = $State_ID_Numeric
  move  #StateEIN         to  $StateEIN    09999999999999999999
  do  Is-String-Numeric ($State_ID_Numeric, #Return_Value)
  if #Return_Value = 0
    do Invalid-SWT-ID
  end-if

end-procedure

!***********************************************************************
begin-procedure Read-States
!***********************************************************************

move 'AND E.W2_STATE IN (''' to $E.SelectedStates
move ' ' to $SelectedState

begin-SELECT
F.STATE

  move &F.STATE    to $SelectedState

  let $E.SelectedStates = $E.SelectedStates ||$SelectedState || ''','''
  move 'Y' to $State-Selected

FROM SYSADM.PS_RC_TAX960ST F
WHERE F.OPRID               = $Prcs_OprID
  AND F.RUN_CNTL_ID         = $Prcs_Run_Cntl_ID
end-SELECT

    let $E.SelectedStates = SUBSTR($E.SelectedStates,1,LENGTH($E.SelectedStates) - 2)
    let $E.SelectedStates = $E.SelectedStates || ')'

end-procedure


#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
!#include 'stw2smry.sqc'  !report page heading and column headings
#include 'gexw2sry.sqc'  !report page heading and column headings for Ohio W2 Filing
#Include 'getsufix.sqc'  !Move suffix from name
!#Include 'taxmmref.sqc'  !Format MMREF for Diskette or Tape
#Include 'gexmmref.sqc'  !Format MMREF for Ohio W2 Filing
#Include 'w2.sqc'        !Assign-Year-End-Variables
#include 'gexxx915.sqc'  !Get locality multiples table
