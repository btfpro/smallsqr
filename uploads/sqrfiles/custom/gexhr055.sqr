!***********************************************************************
! GEXHR055:  Yearly Merit Increase Table Laod                          *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
! GEXHR055 :            Yearly Merit Increase Table Load               *
!                                                                      *
! Narrative:            Process to load the Merit Increase Table with  *
!			employees matching run control parameters.     *
!                       Code added to prevent sqr from running again   *
!	 		if table not previously purged by running      *
!			GEXHR057                                       *
!                                                                      *                                                                      *
! SQL Tables:           gex_salinc_empl                                *
!			Persoanal_data				       *
!                       employment                                     *
!                       job                                            *
!                                                                      *
! Written by:           Tony Labra                                     *
!                                                                      *
! Normally Run:         Yearly                                         *
!                                                                      *
! Control Parms:        None                                           *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
! INITIALS      DATE            DESCRIPTION OF THE CHANGE              *
!***********************************************************************
! AXL           09/09/1999      Initial Creation                       *
!                                                                      *
! AXL           01/20/0000      Modified to get union_cd from job_labor*
! MXR           03/23/2007      ITG # 40842 - Process all union codes  *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup02.sqc'

!*********************************************************************
begin-report
!*********************************************************************
#debug9 show 'begin-report'

  do Initialization
  do Open-Files
  do Check-Table
  do Main
  do Stdapi-Term
  do EOJ

end-report

!***********************************************************************
begin-procedure Initialization
!***********************************************************************
#debug9 show 'Initialization'

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init
 
  Let $GEXXX900_Company_Alias  = 'J.COMPANY'
  Let $GEXXX901_Company_Alias  = 'J.COMPANY'
  Let $GEXXX901_Paygroup_Alias = 'J.PAYGROUP'
  Let $GEXXX902_Deptid_Alias   = 'J.DEPTID'
  Let $GEXXX903_Emp_Stat_Alias = 'J.EMPL_STATUS'
  Let $GEXXX907_Div_CD_Alias   = 'GDT.GEX_COMPANY_DIV_CD'                    
  Let $GEXXX913_Union_CD_Alias = 'J.UNION_CD' ! AXC union Code now on Job
  
  if $prcs_process_instance = ''
    do SQRW-Run-COntrols
  else
    do Process-Scheduler-Run-Controls
  end-if


  date-time () hh:mi:ss &TimeBegan
  date-time () MM/DD/YYYY  &DateBegan
  show 'Report Began at ' &TimeBegan ' on '  &DateBegan

  Let $ReportID    = 'GEXHR055'
  Let $ReportTitle = 'Load Merit Increase Population'

  Show '$ReportID='    $ReportID
  Show '$ReportTitle=' $ReportTitle

  Do Format-DateTime($WHERE_SELECT_ASOFDATE, $REPORT_HEADING_ASOFDATE, {DEFDATE}, '', '')
  Show '$WHERE_SELECT_ASOFDATE = '   $REPORT_HEADING_ASOFDATE
  
end-procedure

!***********************************************************************
Begin-Procedure SQRW-Run-Controls 
!***********************************************************************

  Let $GEXXX900_INCLUDE_COMPANY_CRITERIA = '1=1'
  Let $GEXXX900_INCLUDE_COMPANY_DISPLAY_CRITERIA = 'ALL'

  Display 'Enter Company/Paygroup or leave blank to exit.'
  While 1=1
    Input $In-Company Maxlen=3 'Company'
    Uppercase $In-Company
    If Rtrim($In-Company, ' ') = ''
      Break
    Else
      Input $In-Paygroup Maxlen=3 'Paygroup'
      Uppercase $In-Paygroup
      If Rtrim($In-Paygroup, ' ') = ''
        Let $Include_Condition = '(' || $GEXXX901_Company_Alias || ' = '''  || $In-Company || ''')'
      Else
        Let $Include_Condition = '(' || $GEXXX901_Company_Alias || ' = '''  || $In-Company || ''' And ' || $GEXXX901_Paygroup_Alias || ' = '''  || $In-Paygroup || ''')'
      End-If
      Add 1 To #GEX_RC_PAYGROUP_ROWS
      If #GEX_RC_PAYGROUP_ROWS = 1
        Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = '(' || $Include_Condition
      Else
        Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA || ' Or '  || $Include_Condition
      End-If
    End-If
  End-While

  If #GEX_RC_PAYGROUP_ROWS = 0
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = '1=1'
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA || ')'
    Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA = $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA
  End-If

  Let $DeptIDString = ''''
  Display 'Enter DeptID or leave blank to exit.'
  While 1=1
    Input $In-DeptID Maxlen=10 'DeptID'
    Uppercase $In-DeptID
    If Rtrim($In-DeptID, ' ') = ''
      Concat '''' With $DeptIDString
      Break
    End-If
    If $DeptIDString <> ''''
      Concat ''',''' With $DeptIDString
    End-If
    Concat $In-DeptID With $DeptIDString
  End-While

  If $DeptIDString = ''''''
    Let $GEXXX902_INCLUDE_DEPTID_CRITERIA = '1=1'
    Let $GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX902_INCLUDE_DEPTID_CRITERIA = $GEXXX902_Deptid_Alias || ' In (' || $DeptIDString || ')'
    Let $GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA = $GEXXX902_INCLUDE_DEPTID_CRITERIA
  End-If


  Let $EmplStatusString = ''''
  Display 'Enter Employee Status or leave blank to exit.'
  While 1=1
    Input $In-EmplStatus Maxlen=1 'Employee Status'
    Uppercase $In-EmplStatus
    If Rtrim($In-EmplStatus, ' ') = ''
      Concat '''' With $EmplStatusString
      Break
    End-If
    If $EmplStatusString <> ''''
      Concat ''',''' With $EmplStatusString
    End-If
    Concat $In-EmplStatus With $EmplStatusString
  End-While

  If $EmplStatusString = ''''''
    Let $GEXXX903_INCLUDE_EMP_STAT_CRITERIA = '1=1'
    Let $GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX903_INCLUDE_EMP_STAT_CRITERIA = $GEXXX903_Emp_Stat_Alias || ' In (' || $EmplStatusString || ')'
    Let $GEXXX903_INCLUDE_EMP_STAT_DISPLAY_CRITERIA = $GEXXX903_INCLUDE_EMP_STAT_CRITERIA
  End-If


  Let $DivCdString = ''''
  Display 'Enter Company Division Code or leave blank to exit.'
  While 1=1
    Input $In-DivCd Maxlen=3 'Company Division Code'
    Uppercase $In-DivCd
    If Rtrim($In-DivCd, ' ') = ''
      Concat '''' With $DivCdString
      Break
    End-If
    If $DivCdString <> ''''
      Concat ''',''' With $DivCdString
    End-If
    Concat $In-DivCd With $DivCdString
  End-While

  If $DivCdString = ''''''
    Let $GEXXX907_INCLUDE_DIV_CD_CRITERIA = '1=1'
    Let $GEXXX907_INCLUDE_DIV_CD_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX907_INCLUDE_DIV_CD_CRITERIA = $GEXXX907_Div_CD_Alias || ' In (' || $DivCdString || ')'
    Let $GEXXX907_INCLUDE_DIV_CD_DISPLAY_CRITERIA = $GEXXX907_INCLUDE_DIV_CD_CRITERIA
  End-If

   Let $UnionCdString = ''''
  Display 'Enter Union Code Code or leave blank to exit.'
  While 1=1
    Input $In-UnionCd Maxlen=3 'Union Code'
    Uppercase $In-UnionCd
    If Rtrim($In-UnionCd, ' ') = ''
      Concat '''' With $UnionCdString
      Break
    End-If
    If $UnionCdString <> ''''
      Concat ''',''' With $UnionCdString
    End-If
    Concat $In-UnionCd With $UnionCdString
  End-While

  If $UnionCdString = ''''''
    Let $GEXXX913_INCLUDE_UNION_CD_CRITERIA = '1=1'
    Let $GEXXX913_INCLUDE_UNION_CD_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX913_INCLUDE_UNION_CD_CRITERIA = $GEXXX913_Union_CD_Alias || ' In (' || $UnionCdString || ')'
    Let $GEXXX913_INCLUDE_UNION_CD_DISPLAY_CRITERIA = $GEXXX913_INCLUDE_UNION_CD_CRITERIA
  End-If

  Do Ask-As-Of-Date
  Let $WHERE_SELECT_ASOFDATE = $AsOfDate
 
End-Procedure

!***********************************************************************
Begin-Procedure Process-Scheduler-Run-Controls 
!***********************************************************************

  do GEXRCHR1-Select-Parameters  
  Do GEXXX900-Select-Company-Parameters
  Do GEXXX901-Select-Company-Paygroup-Parameters
  Do GEXXX902-Select-Deptid-Parameters
  Do GEXXX903-Select-Emp-Stat-Parameters
  Do GEXXX907-Select-DIV-CD-Parameters
  Do GEXXX913-Select-UNION-CD-Parameters
  
  Let $WHERE_SELECT_ASOFDATE = $GEX_RC_HR.ASOFDATE

  If Rtrim($GEX_RC_HR.ASOFDATE, ' ') = ''
    Let $WHERE_SELECT_ASOFDATE = $AsOfToday
  End-If
  
End-Procedure

!*******************************************************************
begin-procedure Open-Files
!*******************************************************************

  let $filenm= '{OUTFILE}' || lower($ReportId) || '.lis'

  open $filenm as 10 for-writing
      record=150:fixed
      status=#filests10
  if #filests10 <> 0
     display 'Open failed for file <' noline
     display $filenm noline
     display '>'
     stop
  end-if   
  write 10 from $ReportTitle
  write 10 from ' '
  write 10 from $ReportID
  write 10 from ' '
  write 10 from 'Merit Increase Population Table Insert:' $ReportDate ' ' $ReportTime
  write 10 from ' '
  write 10 from ' '
  write 10 from 'ERR MSG':30   '  EMPLID':10 	
  write 10 from '---------------------------------------':40 

end-procedure

!*********************************************************************
begin-procedure Check-Table
!*********************************************************************
let $sql-statement = 'Count from PS_GEX_SALINC_EMPL'
begin-Select
count(emplid) &num
from ps_gex_salinc_empl 

end-select

  if &num > 0
    Show ' '
    Show 'ERROR:  Merit Increase Table not empty. Verify and purge rows if necesary.'
    Show ' '
    Write 10 from ' '
    Write 10 from 'ERROR:  Merit Increase Table not empty. Verify and purge rows if necesary.'
    Write 10 from ' '
    Do End-SQR 
  end-if

end-procedure
!*********************************************************************
begin-procedure Main
!*********************************************************************
let $sql-statement = 'PS_GEX_SALINC_EMPL'
begin-SQL
insert into ps_gex_salinc_empl
select
j.deptid,
j.company,
j.emplid,
j.empl_rcd,
j.paygroup,
j.comp_frequency,
p.name,
j.empl_status,
e.hire_dt,
j.comprate,
J.sal_admin_plan,
j.grade,
j.step,
0
from ps_job j, ps_personal_data p,
     ps_employment e, ps_gex_dept_tbl gdt
!     ps_job_labor jl  AXC removed Job Labor from join. 8.3 Upgrade
where j.emplid	  = p.emplid
  and j.emplid	  = e.emplid 
  and j.empl_rcd = e.empl_rcd
!  and e.emplid    = jl.emplid
!  and e.empl_rcd = jl.empl_rcd
  and j.effdt=
	(select max(effdt) from ps_job
	 where j.emplid	    = emplid
	   and j.empl_rcd  = empl_rcd	
	   and effdt <= $WHERE_SELECT_ASOFDATE)
  and j.effseq=
	(select max(effseq) from ps_job
	 where j.emplid	    = emplid
	   and j.empl_rcd  = empl_rcd	
	   and j.effdt <= effdt)
  and  gdt.deptid             = j.deptid
  and  gdt.effdt              =
      (Select Max(effdt)
       From   ps_gex_dept_tbl
       Where  deptid          = gdt.deptid
       And    effdt          <= $WHERE_SELECT_ASOFDATE)
  and  gdt.sequence_number    =
      (Select Max(sequence_number)
       From   ps_gex_dept_tbl
       Where  deptid          = gdt.deptid
       And    effdt           = gdt.effdt)
!AXC Remove job_labor from join. 8.3 Upgrade
!  and  jl.effdt                   =
!      (Select Max(effdt)
!       From   ps_job_labor
!       Where  emplid             = jl.emplid
!       And    empl_rcd          = jl.empl_rcd
!       And    effdt             <= $WHERE_SELECT_ASOFDATE)
!  and  jl.effseq                  =
!      (Select Max(effseq)
!       From   ps_job_labor
!       Where  emplid             = jl.emplid
!       And    empl_rcd          = jl.empl_rcd
!       And    effdt              = jl.effdt)
and [$GEXXX900_INCLUDE_COMPANY_CRITERIA]
and [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA]
and [$GEXXX902_INCLUDE_DEPTID_CRITERIA]
and [$GEXXX903_INCLUDE_EMP_STAT_CRITERIA]
and [$GEXXX907_INCLUDE_DIV_CD_CRITERIA]
and [$GEXXX913_INCLUDE_UNION_CD_CRITERIA]  !ITG # 40842  ISDVMXR 03/23/2007
end-sql

    If #sql-error = 0
      let #insert_count = #insert_count + #sql-count
    else
      Show 'Insert failed - ' $EMPLID
      let #invalid_insert = #invalid_insert + 1
    End-if

end-procedure


!************************************************************************
begin-procedure SQL-Error-E
!************************************************************************
Let $Error_message= $sql-statement || ', EMPLOYEE=' || $EMPLID || ' Did not insert.'
show $Error_message

Let $SQL_Error_Msg1 = 'SQL Status: ' || to_char(#sql-status)
show $SQL_Error_Msg1

Let $SQL_Error_Msg2 = 'SQL Error: ' || $sql-error
show $SQL_Error_Msg2

Let $Reason = $sql-error

do Print-error('Sql Error',$Reason)

end-procedure

!********************************************************************
begin-procedure Print-error($Err_Field, $Err_Value)
!********************************************************************

 write 10 from $Err_Field:30 $Err_Value:15 $_emplid 
	
end-procedure

!***********************************************************************
Begin-procedure End-SQR 
!***********************************************************************
  let $tbl_name = 'GEX_SALINC_EMPL_ABORT'
begin-select              ! on-error=SQL-Error-Found('end-sqr')
x
from [$tbl_name]
End-select

End-procedure

!***********************************************************************
Begin-Procedure EOJ
!***********************************************************************
          
      let $insert_count   =   ltrim(edit(#insert_count,'999,999'), ' ')
      let $invalid_insert = ltrim(edit(#invalid_insert,'999,999'), ' ')

      
      write 10 from ' '
      write 10 from 'SUMMARY INFORMATION'
      write 10 from ' '
      write 10 from ' '
      write 10 from '# employess processed successfully: ' $insert_count
      write 10 from '# employees with errors           : ' $invalid_insert
      write 10 from ' '
      
      close 10
 
  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded

  Show 'Successful end of report'

End-Procedure

#Include 'askaod.sqc'    !Ask for As-Of-Date parameter
#include 'gexxx900.sqc'  !Get company multiple row table
#include 'gexxx901.sqc'  !Get company paygroup multiple row table
#include 'gexxx902.sqc'  !Get deptid multiple row table
#include 'gexxx903.sqc'  !Get employee status multiple row table
#include 'gexxx907.sqc'  !Get company division code multiple row table
#include 'gexxx913.sqc'  !Get union code multiple row table
#Include 'gexxx921.sqc'  !Get hr single row run control
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API



