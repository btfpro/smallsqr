!***********************************************************************
! GEXHR068:  Yearly Merit Increase                                     *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced,or transmitted *
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
! Copyright (c) 1997-1998 Giant Eagle,Inc. All Rights Reserved         *
!                                                                      *
!***********************************************************************
!                                                                      *
! GEXHR068 :            2009 Merit Increase Enhancement Process        *
!                                                                      *
! Narrative:            Process to administer the yearly merit         *
!                       increase.                                      *
!                                                                      *
! SQL Tables:           gex_merit_incr				       *
!                       personal_data                                  *
!                       employment                                     *
!                       job                                            *
!                                                                      *
! Written by:           Siva Pudi                                      *
!                                                                      *
! Normally Run:         Sept 2009                                      *
!                                                                      *
! Control Parms:        Deptid,Action,Action Reason,Change Percent     *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
! INITIALS      DATE            DESCRIPTION OF THE CHANGE              *
!***********************************************************************
!GEX-SXP  	09/08/2009 	Initial Development,Cloned Gexhr056            *
!ISDVRKK  	07/22/2010 	Cleaned up Initial Development, added new field*
!                       added to GEX_MERIT_INCR                        *
!ISDVRKK  	10/05/2010 	Correction for writing to GEX_APRAIS_SCOR      *
! GEX_SEC_REENG 2015-06-24 Vahini Katta                                *
! Changes related to gex_emplid_mapp/7 digit emplid                    *
!***********************************************************************

#include 'setenv.sqc' 		!Set environment

begin-setup
#Include 'setup32a.sqc'
   
#define #col_emp       1
#define #col_rec      13
#define #col_name     20
#define #col_pgp      45
#define #col_frq      52
#define #col_sal      60
#define #col_nsal     72
#define #col_ann_rt   85
#define #col_nann_rt 100
#define #col_dt      115
#define #col_seq     127 
#define #col_field   130	 

declare-report report1
  Printer-Type=HPLASERJET
  layout=DEFAULT
end-declare

declare-report report2
  Printer-Type=HPLASERJET
  layout=DEFAULT
end-declare

declare-report report3
  Printer-Type=HPLASERJET
  layout=DEFAULT
end-declare

end-setup

!*********************************************************************
begin-report
!*********************************************************************

  do Initialization
  do Main
  do Stdapi-Term
  do EOJ

end-report

!***********************************************************************
begin-procedure Initialization
!***********************************************************************
#debug9 SHOW 'Initialization'

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init

  Let $GEXXX902_Deptid_Alias   = 'GEX.DEPTID'

  if $prcs_process_instance = ''
    do SQRW-Run-COntrols
  else
    do Process-Scheduler-Run-Controls
  end-if

  date-time () hh:mi:ss &TimeBegan
  date-time () MM/DD/YYYY  &DateBegan
  show 'Report Began at ' &TimeBegan ' on '  &DateBegan
  
  let $year = datetostr(datenow(), 'YYYY' ) 

  Let $ReportID    = 'GEXHR068'
  Let $ReportTitle = $year || ' Merit Increase Enhancement Process'
!  Let $ReportTitle = '2009 Merit Increase Enhancement Process'

  Show '$ReportID='    $ReportID
  Show '$ReportTitle=' $ReportTitle

  Do Format-DateTime($WHERE_SELECT_ASOFDATE, $REPORT_HEADING_ASOFDATE, {DEFDATE}, '', '')
  Show '$WHERE_SELECT_ASOFDATE = '   $REPORT_HEADING_ASOFDATE

  Do Find-Bas-Action	!Get correct bas_action for JOB insert

  let $first_rec='Y'
 
  Do Print-Cover-Page

end-procedure

!***********************************************************************
Begin-Procedure SQRW-Run-Controls 
!***********************************************************************
#debug9 SHOW 'SQRW-Run-Controls'

  Do Ask-As-Of-Date
  Let $WHERE_SELECT_ASOFDATE = $AsOfDate
  LET $OPRID = 'SQRW'

  While 1=1
    Input $job_action Maxlen=3 'Input JOB Action'
    Uppercase $job_action
    If isblank($job_action) = 0
      Break
    End-If
  End-While
  display $job_action

  While 1=1
    Input $job_action_reason Maxlen=3 'Input JOB Action Reason'
    Uppercase $job_action_reason
    If isblank($job_action_reason) = 0
      Break
    End-If
  End-While

  display $job_action_reason

  Let $DeptIDString = ''''
  Display 'Enter DeptID or leave blank to exit.'
  While 1=1
    Input $In-DeptID Maxlen=10 'DeptID'
    Uppercase $In-DeptID
    If Rtrim($In-DeptID, ' ') = ''
      Concat '''' With $DeptIDString
      Break
    End-If
    If $DeptIDString <> ''''
      Concat ''',''' With $DeptIDString
    End-If
    Concat $In-DeptID With $DeptIDString
  End-While

  If $DeptIDString = ''''''
    Let $GEXXX902_INCLUDE_DEPTID_CRITERIA = '1=1'
    Let $GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA = 'ALL'
  Else
    Let $GEXXX902_INCLUDE_DEPTID_CRITERIA = $GEXXX902_Deptid_Alias || ' In (' || $DeptIDString || ')'
    Let $GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA = $GEXXX902_INCLUDE_DEPTID_CRITERIA
  End-If

  While 1=1
     Input $Gex_Process_Optn Maxlen=1 'Input Preview of Final (P or E)'
     Uppercase $Gex_Process_Optn
     If Rtrim($Gex_Process_Optn, ' ') ='P' or 
        Rtrim($Gex_Process_Optn, ' ') ='E' 
        Break
     End-if
  End-While
  display $Gex_Process_Optn
    
  Input #Change_pct Maxlen=4 'Input Max Change percent '
       
  display #Change_pct
 
End-Procedure

!***********************************************************************
Begin-Procedure Process-Scheduler-Run-Controls 
!***********************************************************************
#debug9 SHOW 'Process-Scheduler-Run-Controls'

  do GEXRCHR1-Select-Parameters     
  Do GEXXX902-Select-Deptid-Parameters
  
  Let $WHERE_SELECT_ASOFDATE = $GEX_RC_HR.ASOFDATE
  LET $OPRID = $GEX_RC_HR.OPRID

  If Rtrim($GEX_RC_HR.ASOFDATE, ' ') = ''
    Let $WHERE_SELECT_ASOFDATE = $AsOfToday
  End-If

  Let $Gex_Process_Optn  = $GEX_RC_HR.Gex_Process_Optn
  Let $job_action        = $GEX_RC_HR.Action
  Let $job_action_reason = $GEX_RC_HR.Action_Reason
  let #Change_pct        = $GEX_RC_HR.percentchg
  
  show '  #Change_pct        = $GEX_RC_HR.percentchg *********** ' #Change_pct
  
End-Procedure

!***********************************************************************
begin-procedure Print-Cover-Page
!***********************************************************************
#debug9 SHOW 'Print-Cover-Page'

  use-report Report1
  Print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'            (+5,1)
  Print '$Prcs_OprID          ='                                  (+2,5)
  Print $Prcs_OprID                                               (0,+2)
  Print '$Prcs_Run_Cntl_ID    ='                                  (+1,5)
  Print $Prcs_Run_Cntl_ID                                         (0,+2)

  Print 'SELECTION CRITERIA FOR THIS REPORT RUN:'                 (+5,2)

  Print '$Gex_Process_Optn                                    ='  (+1,5)
  Print $Gex_Process_Optn                 			  (0,+2)

  Print '$EFFECTIVE DATE                                      ='  (+1,5)
  Print  $WHERE_SELECT_ASOFDATE                                   (0,+2)

  Print '$job_action                                          ='  (+1,5)
  Print $job_action                 		         	  (0,+2)

  Print '$job_action_reason                                   ='  (+1,5)
  Print $job_action_reason             		         	  (0,+2)

  Print '$GEXXX902_Include_Deptid_Criteria                    ='  (+1,5)
  Print $GEXXX902_Include_Deptid_Display_Criteria                 (0,+2)
 
  Print 'SORT ORDER FOR THIS REPORT RUN:'                         (+3,2)
  Print '$Order_By                                            ='  (+1,5)
  Print 'GEX.COMPANY, GEX.DEPTID'   (0,+2)

  Let #PAGE-COUNT = 0
  New-Page
 
End-Procedure

!*********************************************************************
Begin-Heading 8 for-reports=(report1)
!*********************************************************************

  Let $ReportTitle = $year || ' Merit Increase Enhancement Process'
!  move '2009 Merit Increase Enhancement Process' to $ReportTitle
#Include 'stdhdg02.sqc'

  if $gex_process_optn = 'P'
    let $SubTitle = 'Preview of Increase Rows'
  else
    let $SubTitle = 'Audit of Increase Row'
  end-if

  print $SubTitle 	()  	center

  position (+1)
  
  if $Deptid <> $priorDeptid
    Do Get-Department-Name
    move $Deptid to $priorDeptid
  end-if

  Print 'Deptid'                (4,1)
  Print $Deptid                 (0,13)
  Print $DeptName               (0,+2)

  do Detail-Header-Current

end-heading

!*********************************************************************
Begin-Heading 8 for-reports=(report2)
!*********************************************************************

  Let $ReportTitle = $year || ' Merit Increase Enhancement Process'
!  move '2009 Merit Enhancement Process' to $ReportTitle
#Include 'stdhdg02.sqc'
  
  if $gex_process_optn = 'P'
    let $SubTitle = 'Preview Future Row(s) '
  else
    let $SubTitle = 'Audit of Future Row(s) '
  end-if

  print $SubTitle 	()  	center

  position (+1)
  
  if $Deptid <> $priorDeptid
    Do Get-Department-Name
    move $Deptid to $priorDeptid
  end-if

  Print 'Deptid'                (4,1)
  Print $Deptid                 (0,13)
  Print $DeptName               (0,+2)

  do Detail-Header-Future

end-heading

!*********************************************************************
Begin-Heading 8 for-reports=(report3)
!*********************************************************************

  Let $ReportTitle = $year || ' Merit Increase Enhancement Process'
!  move '2009 Merit Enhancement Process' to $ReportTitle
#Include 'stdhdg02.sqc'
  
  if $gex_process_optn = 'P'
    let $SubTitle = 'Preview Errors'
  else
    let $SubTitle = 'Audit of Errors'
  end-if

  print $SubTitle 	()  	center

  position (+1)
  
  if $Deptid <> $priorDeptid
    Do Get-Department-Name
    move $Deptid to $priorDeptid
  end-if

  Print 'Deptid'                (4,1)
  Print $Deptid                 (0,13)
  Print $DeptName               (0,+2)

  position (+2)

  print 'Empl'	    (+1,{#col_rec})
  print 'Emplid'	  (+1,{#col_emp})
  print 'Rcd #'		  (0,{#col_rec})
  print 'Name'		  (0,{#col_name})
  print 'Condition'	(0,{#col_pgp})
  print 'Field'     (0,{#col_nann_rt})
  Print 'Value'		  (0,{#col_field})	 
  print '-'         (+1,01,155) fill	 

end-heading

!*********************************************************************
Begin-Procedure Detail-Header-Current
!*********************************************************************
#debug9 SHOW 'Detail-Header-Current'

  position (+2)

  print 'Empl' 	   (+1,{#col_rec})
  print 'Pay' 	   (0,{#col_pgp})
  print 'Comp'     (0,{#col_frq})
  print 'Current'	 (0,{#col_sal})  
  print 'New'  		 (0,{#col_nsal}) 
  print 'Current'	 (0,{#col_ann_rt})  
  print 'New'  		 (0,{#col_nann_rt})    

  print 'Emplid'	 (+1,{#col_emp})
  print 'Rcd #'    (0,{#col_rec})
  Print 'Name'		 (0,{#col_name})
  print 'Group'    (0,{#col_pgp})
  print 'Freq'     (0,{#col_frq})
  print 'Comprate' (0,{#col_sal})  
  print 'Comprate' (0,{#col_nsal}) 
  print 'Salary'   (0,{#col_ann_rt})  
  print 'Salary'   (0,{#col_nann_rt}) 
  print 'Effdt'		 (0,{#col_dt})
  print 'Effseq'	 (0,{#col_seq})
  print '-'        (+1,01,132) fill

end-procedure

!*********************************************************************
Begin-Procedure Detail-Header-Future
!*********************************************************************
#debug9 SHOW 'Detail-Header-Future'

  position (+2)

  print 'Empl' 	   (+1,{#col_rec})
  print 'Pay' 	   (0,{#col_pgp})
  print 'Comp'     (0,{#col_frq})
 
  print 'Emplid'	 (+1,{#col_emp})
  print 'Rcd #'    (0,{#col_rec})
  Print 'Name'		 (0,{#col_name})
  print 'Group'    (0,{#col_pgp})
  print 'Freq'     (0,{#col_frq})
  print 'Comprate' (0,{#col_sal})  
  print 'Effdt'		 (0,{#col_nsal})
  print 'Effseq'	 (0,{#col_ann_rt})
  print '-'        (+1,01,90) fill

end-procedure

!*********************************************************************
begin-procedure Main
!*********************************************************************
#debug9 SHOW 'Main'

let $sql-statement = 'GEXHR068.SQR,Main'
 Let #old_annual_rt_tot = 0   
 Let #new_annual_rt_tot = 0   
 Let #EMP_IN_ERROR      = 0  !isdvsxp 09/25
 let #app_scor_cnt      = 0  !isdvsxp 09/25
 LET #EMP_IN_Fut        = 0  !isdvsxp 09/25
 LET #emp_in_nfut = 0
 LET #emp_in_nERR = 0
 let #errY_futY = 0
 
begin-SELECT On-Error=Sql-Diagnostic
GEX.COMPANY		()	On-Break Level = 1
				Print=Never
GEX.DEPTID		()	On-Break Level = 2
				Print=Never
        Before=Before-Deptid
				After=Deptid-Totals
GEX.JOBCODE
GEX.GRADE				
GEX.EMPLID
GEX.EMPL_RCD	
GEX.COMP_PCT
gex.annual_rt
GEX.GEX_HOURLY_RT
GEX.GEX_NEW_HOURLY_RT
GEX.GEX_NEW_WEEKLY_RT 
GEX.PFA_OPERATING_SCOR
GEX.PFA_LEADERSHP_SCOR

  let $emplid		= &gex.emplid
  let #EMPL_RCD_nbr 	= &GEX.EMPL_RCD
  let $company 		= &GEX.COMPANY	
  let $deptid		= &GEX.DEPTID
  let #comprate 	= &gex.GEX_HOURLY_RT
  let #pfa_opratng_scor = &GEX.PFA_OPERATING_SCOR
  let #pfa_leader_scor  = &GEX.PFA_LEADERSHP_SCOR
  
  add 1 to #record_count
  
  if &gex.comp_pct > 0            
  
    do Select-Job-Baseline
  
    let $error='N'
    let $future_rows_exists='N'
    
    do Validate-Current
    do Validate-Future
        
    if $future_rows_exists = 'Y' 
      LET #EMP_IN_Fut = #EMP_IN_Fut + 1      
      do Process-Future-Rpt
    end-if
  
    if $error ='Y'                         
      LET #EMP_IN_ERROR = #EMP_IN_ERROR +1    
    END-IF                                  
  
    if ($error ='Y' and $future_rows_exists='Y')  
      let #errY_futY = #errY_futY + 1               
    end-if                                        
  
    if $error ='N'                                
      let #emp_in_nerr =  #emp_in_nerr +1           
    end-if                                        
  
    if $future_rows_exists='N'                    
      let #emp_in_nfut =  #emp_in_nfut +1           
    end-if                                        
  
    if $error='N' and $future_rows_exists='N'
      do Process-Merit-Inc
    end-if
  
  end-if 
  
  if &GEX.PFA_OPERATING_SCOR > 0 or &GEX.PFA_LEADERSHP_SCOR > 0 
    if $gex_process_optn = 'E'            !RKK 10/05/2010
      do INSERT-APRAIS-SCOR
      If #sql-status = 0 
       let #app_scor_cnt = #app_scor_cnt + 1
      end-if
    end-if
  end-if

FROM PS_GEX_MERIT_INCR GEX
WHERE [$GEXXX902_INCLUDE_DEPTID_CRITERIA]
ORDER BY GEX.COMPANY, GEX.DEPTID

end-select
  
  use-report Report1
  let $old_annual_rt_gr_tot  = ltrim(edit(#old_annual_rt_gr_tot,'$,$$$,$$$,$$9.99'), ' ') 
  let $new_annual_rt_gr_tot  = ltrim(edit(#new_annual_rt_gr_tot,'$,$$$,$$$,$$9.99'), ' ') 
  
  new-page
  Print 'Grand Total: Employees'	(+2,13)
  Print #total_count		        (,35)  Edit 999,999
  Print $old_annual_rt_gr_tot		(0,{#col_ann_rt})  
  Print $new_annual_rt_gr_tot	       	(0,{#col_nann_rt})  

end-procedure

!************************************************************************
! This procedure selects all data from one row of the JOB table         *
! as the max effective date <=  a specified date. This is to evaluate   *
! current data values                                                   *
!************************************************************************
begin-procedure Select-Job-Baseline
!************************************************************************
#debug9 SHOW 'Select-Job-Baseline'

let $sql-statement = 'GEXHR068.SQR,Select-Job-Baseline'
begin-SELECT On-Error=Sql-Diagnostic
J.EMPLID 		
J.EMPL_RCD		
J.EFFDT 
  Do Format-DateTime(&J.EFFDT, $REPORT_EFFDT, {DEFDATE}, '', '')		
J.EFFSEQ 		
J.PER_ORG																											 
J.DEPTID 		
J.JOBCODE 		
J.POSITION_NBR
J.SUPERVISOR_ID
J.POSITION_OVERRIDE
J.POSN_CHANGE_RECORD 
J.EMPL_STATUS 	
J.ACTION 	
J.ACTION_DT																											 	
J.ACTION_REASON 
J.LOCATION 	
J.TAX_LOCATION_CD
J.JOB_ENTRY_DT 		
J.DEPT_ENTRY_DT 	
J.POSITION_ENTRY_DT
J.SHIFT 	
J.REG_TEMP 	
J.FULL_PART_TIME 
J.COMPANY 	
J.PAYGROUP 
J.BAS_GROUP_ID 	
J.ELIG_CONFIG1 	
J.ELIG_CONFIG2 	
J.ELIG_CONFIG3 	
J.ELIG_CONFIG4 		
J.ELIG_CONFIG5 		
J.ELIG_CONFIG6 		
J.ELIG_CONFIG7 		
J.ELIG_CONFIG8 		
J.ELIG_CONFIG9 		
J.BEN_STATUS 		
J.BAS_ACTION																																	 
J.COBRA_ACTION 		
J.EMPL_TYPE 	
J.HOLIDAY_SCHEDULE 
J.STD_HOURS 		
J.STD_HRS_FREQUENCY     
J.OFFICER_CD		
J.EMPL_CLASS 	
J.SAL_ADMIN_PLAN
J.GRADE 		
J.GRADE_ENTRY_DT 	
J.STEP 			
J.STEP_ENTRY_DT 	
J.GL_PAY_TYPE 		
J.ACCT_CD 		
J.EARNS_DIST_TYPE 	
J.COMP_FREQUENCY 	
J.COMPRATE 		
J.CHANGE_AMT 		
J.CHANGE_PCT 		
J.ANNUAL_RT 		
J.MONTHLY_RT 	
J.DAILY_RT	
J.HOURLY_RT 		
J.ANNL_BENEF_BASE_RT 	
J.SHIFT_RT 		
J.SHIFT_FACTOR 
J.CURRENCY_CD 
J.BUSINESS_UNIT  	 
J.SETID_DEPT     	 
J.SETID_JOBCODE  	 
J.SETID_LOCATION	 
J.SETID_SALARY		 
J.REG_REGION     	 
J.DIRECTLY_TIPPED	 	
J.FLSA_STATUS 		
J.EEO_CLASS 		
J.FUNCTION_CD 		
J.TARIFF_GER		 
J.TARIFF_AREA_GER	 
J.PERFORM_GROUP_GER	 
J.LABOR_TYPE_GER	 
J.SPK_COMM_ID_GER	 
J.HOURLY_RT_FRA 	
J.ACCDNT_CD_FRA 	
J.VALUE_1_FRA		 
J.VALUE_2_FRA		 
J.VALUE_3_FRA		 
J.VALUE_4_FRA		 
J.VALUE_5_FRA		 
J.CTG_RATE		 
J.PAID_HOURS		 
J.PAID_FTE		 
J.PAID_HRS_FREQUENCY	 	
J.UNION_FULL_PART	 
J.UNION_POS		 
J.MATRICULA_NBR		 
J.SOC_SEC_RISK_CODE	 
J.UNION_FEE_AMOUNT	 
J.UNION_FEE_START_DT	 
J.UNION_FEE_END_DT	 
J.EXEMPT_JOB_LBR	 
J.EXEMPT_HouRS_MONTH	 
J.WRKS_CNCL_FUNCTION	 
J.INTERCTR_WRKS_CNCL	 
J.CURRENCY_CD1		 
J.PAY_UNION_FEE		 
J.UNION_CD		 
J.BARG_UNIT		 
J.UNION_SENIORITY_DT	 
J.ENTRY_DATE		 
J.LABOR_AGREEMENT	 
J.EMPL_CTG		 
J.EMPL_CTG_L1		 
J.EMPL_CTG_L2		 
J.SETID_LBR_AGRMNT	 
J.WPP_STOP_FLAG																							 
J.LABOR_FACILITY_ID																					 
J.LBR_FAC_ENTRY_DT																					 
J.LAYOFF_EXEMPT_FLAG																				 
J.LAYOFF_EXEMPT_RSN																					 
J.GP_PAYGROUP		 
J.GP_DFLT_ELIG_GRP	 
J.GP_ELIG_GRP		 
J.GP_DFLT_CURRTTYP	 
J.CUR_RT_TYPE		 
J.GP_DFLT_EXRTDT	 
J.GP_ASOF_DT_EXG_RT	 
J.ADDS_TO_FTE_ACTUAL	 
J.CLASS_INDC		 
J.ENCUMB_OVERRIDE	 
J.FICA_STATUS_EE	 
J.FTE			 
J.PRORATE_CNT_AMT	 
J.PAY_SYSTEM_FLG	 
J.BORDER_WALKER		 
J.LUMP_SUM_PAY		 
J.CONTRACT_NUM		 
J.JOB_INDICATOR		 
J.WRKS_CNCL_ROLE_CHE     
J.BENEFIT_SYSTEM	 
J.WORK_DAY_HOURS	 
J.HR_STATUS																															 
J.APPT_TYPE																															 
J.MAIN_APPT_NUM_JPN																											 
J.REPORTS_TO		 
J.FORCE_PUBLISH		 
J.JOB_DATA_SRC_CD	 
J.ESTABID 	
J.SUPV_LVL_ID																							 
J.SETID_SUPV_LVL																					 
J.ABSENCE_SYSTEM_CD																				 
J.POI_TYPE																								 
J.HIRE_DT																									 	
J.LAST_HIRE_DT																						 
J.TERMINATION_DT																					 
J.ASGN_START_DT																						 		
J.LST_ASGN_START_DT																				 
J.ASGN_END_DT																							 
J.LDW_OVR		 
J.LAST_DATE_WORKED	
J.EXPECTED_RETURN_DT																			 
J.EXPECTED_END_DATE	 
J.AUTO_END_FLG	
J.LASTUPDDTTM		                             
J.LASTUPDOPRID 		 																				 
J.GEX_LIGHT_DUTY	
J.GEX_CHANGE_RECORD	
J.GEX_VOLUN_LOW_HRS	
J.GEX_STUDENT_IND	
J.GEX_MOON_IND		
J.GEX_DEPTID_OVR	
J.GEX_ACCT_CD_OVR	
J.GEX_GL_EXP_OVR	
J.GEX_STEWARD		
J.GEX_DUES_EXEMPT	
J.GEX_FINAN_CORE
J.GEX_INFLATED_HRS
J.GEX_FP_CODE	
J.GEX_SEASONAL_EMP		
PER.NAME

   #debug7 SHOW 'JOB.EMPLID = '  &j.emplid
    
   LET #J.COMPRATE 	 = &J.COMPRATE 	
   LET $J.COMPRATE = EDIT(#J.COMPRATE, '999999999.999')
   LET  #J.COMPRATE = $J.COMPRATE
    
FROM PS_JOB J, PS_EMPLOYMENT E,PS_PERSONAL_DATA	PER 
WHERE J.EMPLID  = $emplid
AND J.EMPL_RCD = #empl_rcd_nbr 
AND J.EMPLID	= E.EMPLID
AND J.EMPL_RCD	= E.EMPL_RCD
AND J.EMPLID    = PER.EMPLID
AND J.EFFDT =
        (SELECT MAX(EFFDT) FROM PS_JOB
          WHERE EMPLID    = J.EMPLID
            AND EMPL_RCD = J.EMPL_RCD
            AND EFFDT    <= $WHERE_SELECT_ASOFDATE)
AND J.EFFSEQ =
        (SELECT MAX(EFFSEQ) FROM PS_JOB
          WHERE EMPLID    = J.EMPLID
            AND EMPL_RCD = J.EMPL_RCD
            AND EFFDT    =  J.EFFDT)
End-Select

end-procedure
!*********************************************************************
begin-procedure Validate-Current
!*********************************************************************
#debug9 SHOW 'Validate-Current'
  move 'N' to $e_error
  
  Evaluate &j.empl_status
    When = 'A'
    When = 'L'
    When = 'P'
    When = 'S'
      move 'N' to $e_error
      break
    When-Other
      move 'Y' to $e_error
  End-Evaluate

  if $e_error = 'Y'
     let $error='Y'
     let $error_rsn   = 'Terminated team member error ' 
     let $error_field = 'Current Empl Status'	
     let $error_value = &j.empl_status
     #debug7 SHOW $error_rsn   '='  &j.empl_status
     do Print-Error-Log
     goto skip-match
   end-if
   if &gex.company <> &j.company 
     let $error='Y'
     let $error_rsn    = 'Error-Rejected for Cmpy not matched'
     let $error_field  = 'Merit Cmpy vs Job Cmpy'
     let $error_value  = &gex.company||' vs '||&j.company
     #debug7 SHOW $error_rsn   ' ' $error_field  ' ' $error_value 
     do Print-Error-Log
   end-if
   
   if &gex.jobcode <> &j.jobcode 
     let $error='Y'
     let $error_rsn    = 'Error-Rejected for JobCode not matched'
     let $error_field  = 'Merit JobCode vs Job JobCode'
     let $error_value  = &gex.JobCode||' vs '||&j.JobCode
     #debug7 SHOW $error_rsn   ' ' $error_field  ' ' $error_value 
     do Print-Error-Log
   end-if
   
   if &gex.grade <> &j.grade
     let $error='Y'
     let $error_rsn    = 'Error-Rejected for Grade not matched'
     let $error_field  = 'Merit Grade vs Job Grade'
     let $error_value  = &gex.grade||' vs '||&j.grade
     #debug7 SHOW $error_rsn   ' ' $error_field  ' ' $error_value 
     do Print-Error-Log
   end-if
   
   LET $J.hourly_rt = edit(&j.hourly_rt,'$$$,$$9.99')
   let $GEX_HOURLY_RT = edit(&gex.gex_hourly_rt,'$$$,$$9.99')
   
   if $GEX_HOURLY_RT <> $j.hourly_rt
     let $error='Y'
     let $error_rsn    = 'Error-Rejected for Hourly_rt not matched'
     let $error_field  = 'Merit Hrly_rt vs Job Hrly_rt'
     let $error_value  = edit(&gex.gex_hourly_rt,'$$$,$$9.99')||' vs '||edit(&j.hourly_rt,'$$$,$$9.99')
     #debug7 SHOW $error_rsn   ' ' $error_field  ' ' $error_value 
     do Print-Error-Log
   end-if
   
   if &gex.annual_rt <> &j.annual_rt
     let $error='Y'
     let $error_rsn    = 'Error-Rejected for Annual_rt not matched'
     let $error_field  = 'Merit Anl_rt vs Job Anl_rt'
     let $error_value  = edit(&gex.annual_rt,'$$$,$$9.99')||' vs '||edit(&j.annual_rt,'$$$,$$9.99')
     #debug7 SHOW $error_rsn   ' ' $error_field  ' ' $error_value 
     do Print-Error-Log
   end-if

!   if &gex.deptid <> &j.deptid                    !RKK 07/22/2010
!      let $error='Y'
!      let $error_rsn    = 'Error-Rejected for Deptid not matched'
!      let $error_field  = 'Merit Dpt vs Job Dpt'
!      let $error_value  = &gex.deptid||' vs '||&j.deptid
!      #debug7 SHOW $error_rsn   ' ' $error_field  ' ' $error_value 
!      do Print-Error-Log
!   end-if  
   
   if &gex.gex_new_hourly_rt < &j.hourly_rt
      let $error='Y'
      let $error_rsn    = 'Error-Rejected for new rate is less than curr rate'
      let $error_field  = 'Merit New Rate vs Job Rate'
      let $error_value  = edit(&gex.gex_new_hourly_rt,'$$$,$$9.99')||' vs '||edit(&j.hourly_rt,'$$$,$$9.99')
      #debug7 SHOW $error_rsn   ' ' $error_field  ' ' $error_value 
      do Print-Error-Log
   end-if  
   
    let #audit_job_change_amt  = 0
    let #audit_job_change_pct  = 0
    
#debug7 SHOW '&gex.gex_new_hourly_rt: '&gex.gex_new_hourly_rt
#debug7 SHOW '&GEX.GEX_NEW_WEEKLY_RT: '&GEX.GEX_NEW_WEEKLY_RT
#debug7 SHOW '&j.hourly_rt: '&j.hourly_rt
#debug7 SHOW '#j.comprate: '#j.comprate

    
   if &j.comprate > 0 OR &j.hourly_rt > 0 
     if &j.empl_type='H'
      let #audit_job_change_amt  = &gex.gex_new_hourly_rt - &j.hourly_rt
      let #audit_job_change_pct  = (#audit_job_change_amt / &j.hourly_rt) * 100
     else 
      let #audit_job_change_amt  = &GEX.GEX_NEW_WEEKLY_RT  - #j.comprate
      let #audit_job_change_pct  = (#audit_job_change_amt / #j.comprate) * 100
     end-if
     
     if #audit_job_change_amt < 0
        let $error='Y'
        let $error_rsn   = 'Error-Rejected new rate < existing rate'
        let $error_field = 'New Rate vs Curr Rate'
        if &j.empl_type='H'
           let $error_value = edit(&gex.gex_new_hourly_rt,'$$$,$$9.99')||' vs '||edit(&j.hourly_rt,'$$$,$$9.99')
        else
           let $error_value = edit(&GEX.GEX_NEW_WEEKLY_RT,'$$$,$$9.99')||' vs '||edit(&j.comprate,'$$$,$$9.99')
        end-if
        #debug7 SHOW $error_rsn   ' ' $error_field  ' ' $error_value 
        do Print-Error-Log
      end-if
      else 
           let $error='Y'
           let $error_rsn   = 'Error-Rejected Hourlyrt/Comprate is zero'
           let $error_field = 'Hourlyrt/Comprate'
           if &j.empl_type='H'
           let $error_value = edit(&j.hourly_rt,'$$$,$$9.99')
           else
           let $error_value = edit(&j.comprate,'$$$,$$9.99')
           end-if
        #debug7 SHOW $error_rsn   ' ' $error_field  ' ' $error_value 
        do Print-Error-Log
   end-if
     
   if #audit_job_change_pct  > #Change_pct 
     let $error='Y'
     let $error_rsn   = 'Error-Rejected Increase Amount > '  
     ! SHOW $error_rsn   '='  #Change_pct 
     let $error_field = 'Percent Increase'
     let $error_value =  edit(#audit_job_change_pct ,'9,999.99')||'%'
     #debug7 SHOW $error_rsn   ' ' $error_field  ' ' $error_value 
     do Print-Error-Log
   end-if

   skip-match:

end-procedure

!********************************************************************
Begin-Procedure Validate-Future
!********************************************************************
#debug9 SHOW 'Validate-Future'

  let $sql-statement = 'GEXHR068.SQR,Validate-Future'

begin-SELECT On-Error=Sql-Diagnostic
FUT.COMPANY
FUT.COMP_FREQUENCY
FUT.EFFDT
FUT.EFFSEQ
FUT.COMPRATE
FUT.DEPTID
FUT.HOURLY_RT
FUT.ANNUAL_RT
FUT.EMPL_STATUS
FUT.JOBCODE
FUT.GRADE
FUT.EMPL_TYPE

  move 'Y' to $future_rows_exists
   
FROM PS_JOB FUT
WHERE FUT.EMPLID = $emplid
  AND FUT.EMPL_RCD = #EMPL_RCD_NBR
  AND FUT.EFFDT > $WHERE_SELECT_ASOFDATE
end-select

end-procedure

!*********************************************************************
begin-procedure Process-Merit-Inc
!*********************************************************************
#debug9 SHOW 'Process-Merit-Inc'

  if $REPORT_HEADING_ASOFDATE <> $REPORT_EFFDT
    let #job_effseq = 0
  else
    let #job_effseq = &J.effseq + 1
  end-if
    
  let $job_action_dt = $AsOfToday
  
  if &J.empl_type = 'H'
     let #job_change_amt  = &gex.gex_new_hourly_rt - &j.hourly_rt
     let #new_comprate = &gex.gex_new_hourly_rt 
  else
     let #job_change_amt  = &GEX.GEX_NEW_WEEKLY_RT - &j.comprate
     let #new_comprate = &GEX.GEX_NEW_WEEKLY_RT
  end-if
      let #job_change_pct  = (#job_change_amt / &j.comprate) * 100

   if &J.COMP_FREQUENCY = 'H' 
     let #job_annual_rt  = &gex.gex_new_hourly_rt * &J.STD_HOURS * 52
     let #job_monthly_rt = #job_annual_rt / 12
     let #job_daily_rt   = #job_annual_rt / 260
     let #job_hourly_rt  = &gex.gex_new_hourly_rt
   else
     let #job_annual_rt  = &GEX.GEX_NEW_WEEKLY_RT * 52
     let #job_monthly_rt = #job_annual_rt / 12
     let #job_daily_rt   = #job_annual_rt / 260
     if &J.STD_HOURS <> 0 
       let #job_hourly_rt = (#job_annual_rt / 52) / &J.STD_HOURS
     else
       let #job_hourly_rt = 0
     end-if
     
   end-if
  if $gex_process_optn = 'P'
    add 1 to #deptid_count
    do Print-Curr-Rpt
  else
    if &gex.comp_pct > 0
    do Insert-To-Job
    do proc-job-junior
     If #sql-status = 0 
      add 1 to #deptid_count
      do Update-Employment  	!AXL 12/4/2003
      do process-compensation-rows
      do Print-Curr-Rpt
    end-if
  end-if 
  end-if
    
end-procedure

!********************************************************************
begin-procedure Insert-To-Job
!********************************************************************   
#debug9 SHOW 'Insert-To-Job'

  let $sql-statement = 'GEXHR068.SQR,Insert-To-Job,PS_JOB'
begin-SQL On-Error=Sql-Diagnostic
Insert into ps_job
       (EMPLID,
	EMPL_RCD,
	EFFDT,
	EFFSEQ,
	PER_ORG,														 																		
	DEPTID,
	JOBCODE,
	POSITION_NBR,
	SUPERVISOR_ID,
	POSITION_OVERRIDE,
	POSN_CHANGE_RECORD,
	EMPL_STATUS,
	ACTION,
	ACTION_DT,
	ACTION_REASON,
	LOCATION,
	TAX_LOCATION_CD,
	JOB_ENTRY_DT,
	DEPT_ENTRY_DT,
	POSITION_ENTRY_DT,
	SHIFT,
	REG_TEMP,
	FULL_PART_TIME,
	COMPANY,
	PAYGROUP,
	BAS_GROUP_ID,
	ELIG_CONFIG1,
	ELIG_CONFIG2,
	ELIG_CONFIG3,
	ELIG_CONFIG4,
	ELIG_CONFIG5,
	ELIG_CONFIG6,
	ELIG_CONFIG7,
	ELIG_CONFIG8,
	ELIG_CONFIG9,
	BEN_STATUS,
  BAS_ACTION,		 
	COBRA_ACTION,
	EMPL_TYPE,
	HOLIDAY_SCHEDULE,
	STD_HOURS,
  STD_HRS_FREQUENCY,       
  OFFICER_CD,
	EMPL_CLASS,
	SAL_ADMIN_PLAN,
	GRADE,
	GRADE_ENTRY_DT,
	STEP,
	STEP_ENTRY_DT,
	GL_PAY_TYPE,
	ACCT_CD,
	EARNS_DIST_TYPE,
	COMP_FREQUENCY,
	COMPRATE,
	CHANGE_AMT,
	CHANGE_PCT,
	ANNUAL_RT,
	MONTHLY_RT,
	DAILY_RT,		! AXC NEW DAILY RATE ADDED. 8.3 UPGRADE
	HOURLY_RT,
	ANNL_BENEF_BASE_RT,
	SHIFT_RT,
	SHIFT_FACTOR,
	CURRENCY_CD,
  BUSINESS_UNIT,  	 
  SETID_DEPT,     	 
  SETID_JOBCODE,  	 
	SETID_LOCATION,		 
	SETID_SALARY,		 
  REG_REGION,     	 
	DIRECTLY_TIPPED,	 
	FLSA_STATUS,
	EEO_CLASS,
	FUNCTION_CD,
	TARIFF_GER,		 
	TARIFF_AREA_GER,	 
	PERFORM_GROUP_GER,	 
	LABOR_TYPE_GER,		 
	SPK_COMM_ID_GER,	 	
	HOURLY_RT_FRA,
	ACCDNT_CD_FRA,
	VALUE_1_FRA,		 
	VALUE_2_FRA,		 
	VALUE_3_FRA,		 
	VALUE_4_FRA,		 
	VALUE_5_FRA,		 
	CTG_RATE,		 
	PAID_HOURS,		 
	PAID_FTE,		 
	PAID_HRS_FREQUENCY,	 
	UNION_FULL_PART,	 
	UNION_POS,		 
	MATRICULA_NBR,		 
	SOC_SEC_RISK_CODE,	 
	UNION_FEE_AMOUNT,	 
	UNION_FEE_START_DT,	 
	UNION_FEE_END_DT,	 
	EXEMPT_JOB_LBR,		 
	EXEMPT_HOURS_MONTH,	 
	WRKS_CNCL_FUNCTION,	 
	INTERCTR_WRKS_CNCL,	 
	CURRENCY_CD1,		 
	PAY_UNION_FEE,		 
	UNION_CD,		 
	BARG_UNIT,		 
	UNION_SENIORITY_DT,	 
	ENTRY_DATE,		 
	LABOR_AGREEMENT,	 
	EMPL_CTG,		 
	EMPL_CTG_L1,		 
	EMPL_CTG_L2,		 
	SETID_LBR_AGRMNT,	 
	WPP_STOP_FLAG,																			 
	LABOR_FACILITY_ID,																	 	
	LBR_FAC_ENTRY_DT,																		 
	LAYOFF_EXEMPT_FLAG,																	 
	LAYOFF_EXEMPT_RSN,																	 
	GP_PAYGROUP,		 
	GP_DFLT_ELIG_GRP,	 
	GP_ELIG_GRP,		 
	GP_DFLT_CURRTTYP,	 
	CUR_RT_TYPE,		 
	GP_DFLT_EXRTDT,		 
	GP_ASOF_DT_EXG_RT,	 
	ADDS_TO_FTE_ACTUAL,	 
	CLASS_INDC,		 
	ENCUMB_OVERRIDE,	 
	FICA_STATUS_EE,		 
	FTE,			 
	PRORATE_CNT_AMT,	 
	PAY_SYSTEM_FLG,		 
	BORDER_WALKER,		 
	LUMP_SUM_PAY,		 
	CONTRACT_NUM,		 
	JOB_INDICATOR,		 
  WRKS_CNCL_ROLE_CHE,      
	BENEFIT_SYSTEM,		 
	WORK_DAY_HOURS,		 
	HR_STATUS,																						 
	APPT_TYPE,																						 
	MAIN_APPT_NUM_JPN,																		 
	REPORTS_TO,		 
	FORCE_PUBLISH,		 
	JOB_DATA_SRC_CD,	 
	ESTABID,
	SUPV_LVL_ID,																					 
	SETID_SUPV_LVL,																				 
	ABSENCE_SYSTEM_CD,																		 
	POI_TYPE,																							 
	HIRE_DT,																							 
	LAST_HIRE_DT,																					 
	TERMINATION_DT,																				 
	ASGN_START_DT,																				 
	LST_ASGN_START_DT,																		 
	ASGN_END_DT,																					 
	LDW_OVR,																							 
	LAST_DATE_WORKED,       
	EXPECTED_RETURN_DT,																		 
	EXPECTED_END_DATE,	 
	AUTO_END_FLG,																				 
	LASTUPDDTTM,																					 
	LASTUPDOPRID,																					 
	GEX_LIGHT_DUTY,         
	GEX_CHANGE_RECORD,      
	GEX_VOLUN_LOW_HRS,      
	GEX_STUDENT_IND,        
	GEX_MOON_IND,           
	GEX_DEPTID_OVR,         
	GEX_ACCT_CD_OVR,        
	GEX_GL_EXP_OVR,        
	GEX_STEWARD,            
	GEX_DUES_EXEMPT,        
	GEX_FINAN_CORE,         
	GEX_INFLATED_HRS,       
	GEX_FP_CODE,
	GEX_SEASONAL_EMP)	!AXL 5/14/2001 New job field
VALUES
 ($EMPLID,
	#EMPL_RCD_nbr,
	$WHERE_SELECT_ASOFDATE,
	#JOB_EFFSEQ,
	&J.PER_ORG,		 
	&J.DEPTID,
	&J.JOBCODE,
	&J.POSITION_NBR,
	&J.SUPERVISOR_ID,	   
	&J.POSITION_OVERRIDE,
	'N',
	&J.EMPL_STATUS,
	$JOB_ACTION,
	$JOB_ACTION_DT,
	$JOB_ACTION_REASON,
	&J.LOCATION,
	&J.TAX_LOCATION_CD,
	&J.JOB_ENTRY_DT,
	&J.DEPT_ENTRY_DT,
	&J.POSITION_ENTRY_DT,
	&J.SHIFT,
	&J.REG_TEMP,
	&J.FULL_PART_TIME,
	&J.COMPANY,
	&J.PAYGROUP,
	&J.BAS_GROUP_ID,
	&J.ELIG_CONFIG1,
	&J.ELIG_CONFIG2,
	&J.ELIG_CONFIG3,
	&J.ELIG_CONFIG4,
	&J.ELIG_CONFIG5,
	&J.ELIG_CONFIG6,
	&J.ELIG_CONFIG7,
	&J.ELIG_CONFIG8,
	&J.ELIG_CONFIG9,
	&J.BEN_STATUS,
  $bas_action,		 
	&J.COBRA_ACTION,
	&J.EMPL_TYPE,
	&J.HOLIDAY_SCHEDULE,
	&J.STD_HOURS,
  &J.STD_HRS_FREQUENCY,    
	&J.OFFICER_CD,
	&J.EMPL_CLASS,
	&J.SAL_ADMIN_PLAN,
	&J.GRADE,	
	&J.GRADE_ENTRY_DT,
	&J.STEP,
	&J.STEP_ENTRY_DT,
	&J.GL_PAY_TYPE,
	&J.ACCT_CD,
	&J.EARNS_DIST_TYPE,
	&J.COMP_FREQUENCY,
	#new_comprate,
	#JOB_CHANGE_AMT,
	#JOB_CHANGE_PCT,
	#JOB_ANNUAL_RT,
	#JOB_MONTHLY_RT,
	#JOB_DAILY_RT,		! NEW DAILY RATE ADDED. 8.3 UPGRADE
	#JOB_HOURLY_RT,
	&J.ANNL_BENEF_BASE_RT,
	&J.SHIFT_RT,
	&J.SHIFT_FACTOR,
	&J.CURRENCY_CD,
	&J.BUSINESS_UNIT,  	 
	&J.SETID_DEPT,     	 
	&J.SETID_JOBCODE,  	 
	&J.SETID_LOCATION,	 
	&J.SETID_SALARY,	 
	&J.REG_REGION,     	 
	&J.DIRECTLY_TIPPED,	 
	&J.FLSA_STATUS,
	&J.EEO_CLASS,
	&J.FUNCTION_CD,
	&J.TARIFF_GER,		 
	&J.TARIFF_AREA_GER,	 
	&J.PERFORM_GROUP_GER,	 
	&J.LABOR_TYPE_GER,	 
	&J.SPK_COMM_ID_GER,	 
	&J.HOURLY_RT_FRA,
	&J.ACCDNT_CD_FRA,
	&J.VALUE_1_FRA,		 
	&J.VALUE_2_FRA,		 
	&J.VALUE_3_FRA,		 
	&J.VALUE_4_FRA,		 
	&J.VALUE_5_FRA,		 
	&J.CTG_RATE,		 
	&J.PAID_HOURS,		 
	&J.PAID_FTE,		 
	&J.PAID_HRS_FREQUENCY,	 
	&J.UNION_FULL_PART,	 
	&J.UNION_POS,		 
	&J.MATRICULA_NBR,	 
	&J.SOC_SEC_RISK_CODE,	 
	&J.UNION_FEE_AMOUNT,	 
	&J.UNION_FEE_START_DT,	 
	&J.UNION_FEE_END_DT,	 
	&J.EXEMPT_JOB_LBR,	 
	&J.EXEMPT_HOURS_MONTH,	 
	&J.WRKS_CNCL_FUNCTION,	 
	&J.INTERCTR_WRKS_CNCL,	 
	&J.CURRENCY_CD1,	 
	&J.PAY_UNION_FEE,	 
	&J.UNION_CD,		 
	&J.BARG_UNIT,		 
	&J.UNION_SENIORITY_DT,	 
	&J.ENTRY_DATE,		 
	&J.LABOR_AGREEMENT,	 
	&J.EMPL_CTG,		 
	&J.EMPL_CTG_L1,		 
	&J.EMPL_CTG_L2,		 
	&J.SETID_LBR_AGRMNT,	 
	&J.WPP_STOP_FLAG,                          
	&J.LABOR_FACILITY_ID,                      
	&J.LBR_FAC_ENTRY_DT,                       
	&J.LAYOFF_EXEMPT_FLAG,                     
	&J.LAYOFF_EXEMPT_RSN,                      
	&J.GP_PAYGROUP,		 
	&J.GP_DFLT_ELIG_GRP,	 
	&J.GP_ELIG_GRP,		 
	&J.GP_DFLT_CURRTTYP,	 
	&J.CUR_RT_TYPE,		 
	&J.GP_DFLT_EXRTDT,	 
	&J.GP_ASOF_DT_EXG_RT,	 
	&J.ADDS_TO_FTE_ACTUAL,	 
	&J.CLASS_INDC,		 
	&J.ENCUMB_OVERRIDE,	 
	&J.FICA_STATUS_EE,	 
	&J.FTE,			 
	&J.PRORATE_CNT_AMT,	 
	&J.PAY_SYSTEM_FLG,	 
	&J.BORDER_WALKER,	 
	&J.LUMP_SUM_PAY,	 
	&J.CONTRACT_NUM,	 
	&J.JOB_INDICATOR,	 
  &J.WRKS_CNCL_ROLE_CHE,   
	&J.BENEFIT_SYSTEM,	 
	&J.WORK_DAY_HOURS,	 
	&J.HR_STATUS,                              
	&J.APPT_TYPE,                              
	&J.MAIN_APPT_NUM_JPN ,
	&J.REPORTS_TO,		 
	&J.FORCE_PUBLISH,	 
	&J.JOB_DATA_SRC_CD,	 
	&J.ESTABID,
  &J.SUPV_LVL_ID,
	&J.SETID_SUPV_LVL,                     
	&J.ABSENCE_SYSTEM_CD,
	&J.POI_TYPE,                           
	&J.HIRE_DT ,                               
	&J.LAST_HIRE_DT,                           
	&J.TERMINATION_DT ,                        
	&J.ASGN_START_DT,                          
	&J.LST_ASGN_START_DT ,                     
	&J.ASGN_END_DT ,                           
	&J.LDW_OVR,     
  &J.LAST_DATE_WORKED,                                                 
	&J.EXPECTED_RETURN_DT,                     
	&J.EXPECTED_END_DATE,                      
	&J.AUTO_END_FLG ,                          
	&J.LASTUPDDTTM ,                           
	&J.LASTUPDOPRID ,
	&J.GEX_LIGHT_DUTY,         
	'Y',      
	&J.GEX_VOLUN_LOW_HRS,      
	&J.GEX_STUDENT_IND,        
	&J.GEX_MOON_IND,           
	&J.GEX_DEPTID_OVR,         
	&J.GEX_ACCT_CD_OVR,        
	&J.GEX_GL_EXP_OVR,        
	&J.GEX_STEWARD,            
	&J.GEX_DUES_EXEMPT,        
	&J.GEX_FINAN_CORE,         
	&J.GEX_INFLATED_HRS,       
	&J.GEX_FP_CODE,
	&J.GEX_SEASONAL_EMP)	!AXL 5/14/2001 New job field

end-sql
  
    If #sql-status = 0
      let #job_inserts = #job_inserts + #sql-count
    else
      let #invalid_insert = #invalid_insert + 1
    End-if

end-procedure

!***********************************************************************
! Procedure: PROC-JOB-JUNIOR                                           *
! Descr:     Reads the PS_JOB_JUNIOR rows associated with a PS_JOB row *
!            Inserts rows into PS_JOB_JUNIOR for new PS_JOB record.    *
!                                                                      *
! Called by: PROCESS-EMPS                                              *
!***********************************************************************
begin-procedure Proc-Job-Junior
#debug9 SHOW 'Proc-Job-Junior'

begin-SELECT
JJR.EMPLID
JJR.EMPL_RCD
JJR.EFFDT
JJR.EFFSEQ
JJR.LASTUPDDTTM
JJR.LASTUPDOPRID
JJR.TAXCODE_UK
JJR.TAX_BASIS_UK
JJR.WORKER_TYPE_MEX
JJR.REDUCED_WEEK_MEX
JJR.LOCATED_CD_MEX
JJR.SALARY_TYPE_MEX
JJR.IMS_TERM_DT_MEX
JJR.BALANCE_GRP_NUM
JJR.FP_ACTION_2
JJR.CTG_RATE
JJR.FP_LEGALSTAT_CD
JJR.FP_SCNDMT_CD
JJR.FP_SCND_TYP
JJR.FP_CIVIL_PENSION
JJR.FP_SOURCE_ORG
JJR.FP_RECEP_ORG
JJR.FP_RETURN_CD
JJR.FP_PR_LEGSTA
JJR.FP_FOREND_DT
JJR.FP_END_DT
JJR.FP_CAREFRZPCT
JJR.FP_HIR_DOS_SIT
JJR.FP_PT_PCT_DET
JJR.FP_TITLE_NUM
JJR.FP_DURATION_PCT
JJR.FP_RATING_PRS_FLG
JJR.FP_BUDGET_NBR
JJR.FP_HDCNT_NBR
JJR.FP_POTENT_NBR
JJR.FP_RANK_CD
JJR.FP_STEP_CD
JJR.FP_RK_ENT_DT
JJR.FP_CORPS_CD
JJR.FP_CHG_COR_DT
JJR.FP_CATG_FP
JJR.FP_CATG_LEVEL
JJR.FP_RK_TRIALPD
JJR.FP_STEP_END_DT
JJR.FP_FOR_PROM_DT
JJR.FP_NOMINATION_DT
JJR.FP_TRAINEE
JJR.FP_TRNE_POSN
JJR.FP_RK_PD_END_DT
JJR.FP_SANCTION
JJR.FP_DOWN_GRA
JJR.FP_APPL_SAL_DT
JJR.FP_CHG_IND
JJR.FP_CLD_INST
JJR.FP_SETID_RANK
JJR.FP_INSTALL_DT
JJR.FP_EQUIV_STEP
JJR.FP_STEP_CD2
JJR.FP_BUSINESS_CD
JJR.FP_APPL_DT
JJR.FP_CHG_SAL
JJR.FP_POINTYP_CD
JJR.FP_GROSS_IND
JJR.FP_INCS_IND
JJR.FP_INCS_IND2
JJR.FP_PT_PCT
JJR.FP_PT_END_DT
JJR.FP_PT_FOREND_DT
JJR.FP_COMPRATE
JJR.FP_INST_STAT
JJR.FP_RETROSPECT
JJR.FP_ROW_END_DT
JJR.LAST_UPDATE_DATE
JJR.OTHER_ID_JPN
JJR.INTCP_XFR_FLG
JJR.INTCP_XFR_START_DT
JJR.INTCP_XFR_END_DT
JJR.INTCP_BUS_UNIT
JJR.INTCP_DEPTID
JJR.INTCP_DEPTID2
JJR.INTCP_SETID_DEPT
JJR.INTCP_COMPANY
JJR.INTCP_COMPANY2
JJR.INTCP_SUPV_LVL_ID
JJR.INTCP_SUPV_LVL_ID2
JJR.START_DATE_JPN                          
JJR.EXP_END_DATE_JPN                        
JJR.END_DATE_JPN 
JJR.DUTIES_TYPE
JJR.ASSIGNMENT_ID
JJR.TARGET_COMPRATE
JJR.CMP_DONT_ABSORB
JJR.SSN_EMPLOYER
JJR.UNITA_PROD_CD
JJR.ACTION_ITA
JJR.ACTION_REASON_ITA
JJR.SPECIAL_HIRCTG_ITA
JJR.PART_TIME_TYPE_ITA
JJR.PART_TIME_PERC_ITA
JJR.PARTTIME_ENDDT_ITA
JJR.WORKDAYS_NLD                            
JJR.CONT_SAL_TYPE_BRA                       
JJR.CBO_CD_BRA                              
JJR.SEFIP_CATEGORY_BRA                      
JJR.UNION_CD_ALT_BRA

  do Insert-New-JobJr-Rec

FROM PS_JOB_JR JJR
WHERE JJR.EMPLID    = &J.EMPLID
  AND JJR.EMPL_RCD  = &J.EMPL_RCD
  AND JJR.EFFDT     = &J.EFFDT
  AND JJR.EFFSEQ    = &J.EFFSEQ

end-SELECT

end-procedure

!***********************************************************************
! Procedure: INSERT-NEW-JOBJR-REC                                      *
! Descr:     Use insert a copy of the original JOB JR only the  one    *
!            is related to the JOB row we just inserted                *
!                                                                      *
! Called by: PROCESS-EMPS                                              *
!***********************************************************************
begin-procedure Insert-New-JobJr-Rec
#debug9 SHOW 'Insert-New-JobJr-Rec'
  !show 'insert into Job Jr ' &j.emplid
 let $sql-statement = 'GEXHR068.SQR,Insert-To-Job-Jr,PS_JOB_JR'

!*** Oracle database requires {DatetimeIn-Prefix} on insert statement

begin-SQL On-Error=Sql-Diagnostic

INSERT INTO PS_JOB_JR
(EMPLID,
 EMPL_RCD,
 EFFDT,
 EFFSEQ,
 LASTUPDDTTM,
 LASTUPDOPRID,
 TAXCODE_UK,
 TAX_BASIS_UK,
 WORKER_TYPE_MEX,
 REDUCED_WEEK_MEX,
 LOCATED_CD_MEX,
 SALARY_TYPE_MEX,
 IMS_TERM_DT_MEX,
 BALANCE_GRP_NUM,
 FP_ACTION_2,
 CTG_RATE,
 FP_LEGALSTAT_CD,
 FP_SCNDMT_CD,
 FP_SCND_TYP,
 FP_CIVIL_PENSION,
 FP_SOURCE_ORG,
 FP_RECEP_ORG,
 FP_RETURN_CD,
 FP_PR_LEGSTA,
 FP_FOREND_DT,
 FP_END_DT,
 FP_CAREFRZPCT,
 FP_HIR_DOS_SIT,
 FP_PT_PCT_DET,
 FP_TITLE_NUM,
 FP_DURATION_PCT,
 FP_RATING_PRS_FLG,
 FP_BUDGET_NBR,
 FP_HDCNT_NBR,
 FP_POTENT_NBR,
 FP_RANK_CD,
 FP_STEP_CD,
 FP_RK_ENT_DT,
 FP_CORPS_CD,
 FP_CHG_COR_DT,
 FP_CATG_FP,
 FP_CATG_LEVEL,
 FP_RK_TRIALPD,
 FP_STEP_END_DT,
 FP_FOR_PROM_DT,
 FP_NOMINATION_DT,
 FP_TRAINEE,
 FP_TRNE_POSN,
 FP_RK_PD_END_DT,
 FP_SANCTION,
 FP_DOWN_GRA,
 FP_APPL_SAL_DT,
 FP_CHG_IND,
 FP_CLD_INST,
 FP_SETID_RANK,
 FP_INSTALL_DT,
 FP_EQUIV_STEP,
 FP_STEP_CD2,
 FP_BUSINESS_CD,
 FP_APPL_DT,
 FP_CHG_SAL,
 FP_POINTYP_CD,
 FP_GROSS_IND,
 FP_INCS_IND,
 FP_INCS_IND2,
 FP_PT_PCT,
 FP_PT_END_DT,
 FP_PT_FOREND_DT,
 FP_COMPRATE,
 FP_INST_STAT,
 FP_RETROSPECT,
 FP_ROW_END_DT,
 LAST_UPDATE_DATE,
 OTHER_ID_JPN,
 INTCP_XFR_FLG,
 INTCP_XFR_START_DT,
 INTCP_XFR_END_DT,
 INTCP_BUS_UNIT,
 INTCP_DEPTID,
 INTCP_DEPTID2,
 INTCP_SETID_DEPT,
 INTCP_COMPANY,
 INTCP_COMPANY2,
 INTCP_SUPV_LVL_ID,
 INTCP_SUPV_LVL_ID2,
 START_DATE_JPN,                          
 EXP_END_DATE_JPN,                        
 END_DATE_JPN, 
 DUTIES_TYPE,
 ASSIGNMENT_ID,
 TARGET_COMPRATE,
 CMP_DONT_ABSORB,
 SSN_EMPLOYER,
 UNITA_PROD_CD,
 ACTION_ITA,
 ACTION_REASON_ITA,
 SPECIAL_HIRCTG_ITA,
 PART_TIME_TYPE_ITA,
 PART_TIME_PERC_ITA,
 PARTTIME_ENDDT_ITA 
 ,WORKDAYS_NLD,                            
 CONT_SAL_TYPE_BRA ,                      
 CBO_CD_BRA,                              
 SEFIP_CATEGORY_BRA,                      
 UNION_CD_ALT_BRA 
 )
VALUES
($EMPLID,
 #EMPL_RCD_nbr,
 $WHERE_SELECT_ASOFDATE,
 #JOB_EFFSEQ,
 {DatetimeIn-Prefix}$SysDateTime{DatetimeIn-Suffix},!From Curdttim routines
 $OPRID,                                       
 &JJR.TaxCode_UK,
 &JJR.Tax_Basis_UK,
 &JJR.WORKER_TYPE_MEX,
 &JJR.REDUCED_WEEK_MEX,
 &JJR.LOCATED_CD_MEX,
 &JJR.SALARY_TYPE_MEX,
 &JJR.IMS_TERM_DT_MEX,
 &JJR.BALANCE_GRP_NUM,
 &JJR.FP_ACTION_2,
 &JJR.CTG_RATE,
 &JJR.FP_LEGALSTAT_CD,
 &JJR.FP_SCNDMT_CD,
 &JJR.FP_SCND_TYP,
 &JJR.FP_CIVIL_PENSION,
 &JJR.FP_SOURCE_ORG,
 &JJR.FP_RECEP_ORG,
 &JJR.FP_RETURN_CD,
 &JJR.FP_PR_LEGSTA,
 &JJR.FP_FOREND_DT,
 &JJR.FP_END_DT,
 &JJR.FP_CAREFRZPCT,
 &JJR.FP_HIR_DOS_SIT,
 &JJR.FP_PT_PCT_DET,
 &JJR.FP_TITLE_NUM,
 &JJR.FP_DURATION_PCT,
 &JJR.FP_RATING_PRS_FLG,
 &JJR.FP_BUDGET_NBR,
 &JJR.FP_HDCNT_NBR,
 &JJR.FP_POTENT_NBR,
 &JJR.FP_RANK_CD,
 &JJR.FP_STEP_CD,
 &JJR.FP_RK_ENT_DT,
 &JJR.FP_CORPS_CD,
 &JJR.FP_CHG_COR_DT,
 &JJR.FP_CATG_FP,
 &JJR.FP_CATG_LEVEL,
 &JJR.FP_RK_TRIALPD,
 &JJR.FP_STEP_END_DT,
 &JJR.FP_FOR_PROM_DT,
 &JJR.FP_NOMINATION_DT,
 &JJR.FP_TRAINEE,
 &JJR.FP_TRNE_POSN,
 &JJR.FP_RK_PD_END_DT,
 &JJR.FP_SANCTION,
 &JJR.FP_DOWN_GRA,
 &JJR.FP_APPL_SAL_DT,
 &JJR.FP_CHG_IND,
 &JJR.FP_CLD_INST,
 &JJR.FP_SETID_RANK,
 &JJR.FP_INSTALL_DT,
 &JJR.FP_EQUIV_STEP,
 &JJR.FP_STEP_CD2,
 &JJR.FP_BUSINESS_CD,
 &JJR.FP_APPL_DT,
 &JJR.FP_CHG_SAL,
 &JJR.FP_POINTYP_CD,
 &JJR.FP_GROSS_IND,
 &JJR.FP_INCS_IND,
 &JJR.FP_INCS_IND2,
 &JJR.FP_PT_PCT,
 &JJR.FP_PT_END_DT,
 &JJR.FP_PT_FOREND_DT,
 &JJR.FP_COMPRATE,
 &JJR.FP_INST_STAT,
 &JJR.FP_RETROSPECT,
 &JJR.FP_ROW_END_DT,
 &JJR.LAST_UPDATE_DATE,
 &JJR.OTHER_ID_JPN,
 &JJR.INTCP_XFR_FLG,
 &JJR.INTCP_XFR_START_DT,
 &JJR.INTCP_XFR_END_DT,
 &JJR.INTCP_BUS_UNIT,
 &JJR.INTCP_DEPTID,
 &JJR.INTCP_DEPTID2,
 &JJR.INTCP_SETID_DEPT,
 &JJR.INTCP_COMPANY,
 &JJR.INTCP_COMPANY2,
 &JJR.INTCP_SUPV_LVL_ID,
 &JJR.INTCP_SUPV_LVL_ID2,
 &JJR.START_DATE_JPN,                          
 &JJR.EXP_END_DATE_JPN,                        
 &JJR.END_DATE_JPN, 
 &JJR.DUTIES_TYPE,
 &JJR.ASSIGNMENT_ID,
 &JJR.TARGET_COMPRATE,
 &JJR.CMP_DONT_ABSORB,
 &JJR.SSN_EMPLOYER,
 &JJR.UNITA_PROD_CD,
 &JJR.ACTION_ITA,
 &JJR.ACTION_REASON_ITA,
 &JJR.SPECIAL_HIRCTG_ITA,
 &JJR.PART_TIME_TYPE_ITA,
 &JJR.PART_TIME_PERC_ITA,
 &JJR.PARTTIME_ENDDT_ITA
 ,&JJR.WORKDAYS_NLD,                            
 &JJR.CONT_SAL_TYPE_BRA,                       
 &JJR.CBO_CD_BRA,                              
 &JJR.SEFIP_CATEGORY_BRA,                      
 &JJR.UNION_CD_ALT_BRA 
 )
end-SQL

end-procedure  Insert-New-JobJr-Rec


!********************************************************************
begin-procedure INSERT-APRAIS-SCOR
!********************************************************************   
#debug9 SHOW 'INSERT-APRAIS-SCOR'

  let $sql-statement = 'GEXHR068.SQR,INSERT-APRAIS-SCOR,PS_GEX_APRAIS_SCOR '
  
begin-SQL On-Error=Sql-Diagnostic
Insert into PS_GEX_APRAIS_SCOR
(EMPLID,
EFFDT,
SCORE_TYPE,
GEX_GS_IND,
PCI_INTELLECT_SCOR,
PCI_LEADERSHP_SCOR,
PCI_INTERPERS_SCOR,
PCI_PERSEFF_SCOR,
PFA_OPERATING_SCOR,
PFA_LEADERSHP_SCOR,
COMMENTS_256,
ENTRY_DT,
GEX_EXIT_DT,
CRV_RATING)
values
($EMPLID,
$WHERE_SELECT_ASOFDATE,
'PFA',
'GS',
0,
0,
0,
0,
#pfa_opratng_scor,
#pfa_leader_scor,
' ',
null,
null,
' '
)
end-sql
end-procedure

!*********************************************************************


!********************************************************************
begin-procedure process-compensation-rows
!********************************************************************
#debug9 SHOW 'process-compensation-rows'

let $sql-statement = 'GEXHR068.SQR,process-compensation-rows'
begin-SELECT On-Error=Sql-Diagnostic
SC.EMPLID                 
SC.EMPL_RCD
SC.EFFDT
SC.EFFSEQ                 
SC.COMP_EFFSEQ            
SC.COMP_RATECD            
SC.COMP_RATE_POINTS       
SC.COMPRATE               
SC.COMP_PCT               
SC.COMP_FREQUENCY         
SC.CURRENCY_CD            
SC.MANUAL_SW              
SC.CONVERT_COMPRT         
SC.RATE_CODE_GROUP        
SC.CHANGE_AMT             
SC.CHANGE_PCT             
SC.CHANGE_PTS             
SC.FTE_INDICATOR          
SC.CMP_SRC_IND       

   do insert-compensation	

from ps_compensation SC
where SC.emplid   = &J.EMPLID
and   SC.empl_rcd = &J.EMPL_RCD
and   SC.effdt    = &J.EFFDT
and   SC.EFFSEQ   = &J.EFFSEQ 
end-SELECT

end-procedure

!********************************************************************
begin-procedure insert-compensation
!********************************************************************
#debug9 SHOW 'insert-compensation'

  let $sql-statement = 'GEXHR068.SQR,Insert-compensation,PS_COMPENSATION'
begin-SQL On-Error=Sql-Diagnostic
Insert into ps_compensation
(EMPLID,
EMPL_RCD,
EFFDT,
EFFSEQ,
COMP_EFFSEQ,
COMP_RATECD,
COMP_RATE_POINTS,
COMPRATE,
COMP_PCT,
COMP_FREQUENCY,
CURRENCY_CD,
MANUAL_SW,
CONVERT_COMPRT,
RATE_CODE_GROUP,
CHANGE_AMT,
CHANGE_PCT,
CHANGE_PTS,
FTE_INDICATOR, 
CMP_SRC_IND)
values
(&SC.EMPLID,                 
&SC.EMPL_RCD,               
$WHERE_SELECT_ASOFDATE,
#job_effseq,
&SC.COMP_EFFSEQ,  
&SC.COMP_RATECD,            
&SC.COMP_RATE_POINTS,       
#new_comprate,      
&SC.COMP_PCT,               
&SC.COMP_FREQUENCY,         
&SC.CURRENCY_CD,            
&SC.MANUAL_SW,              
&SC.CONVERT_COMPRT,         
&SC.RATE_CODE_GROUP,        
#JOB_CHANGE_AMT,           
#JOB_CHANGE_PCT,           
&SC.CHANGE_PTS,             
&SC.FTE_INDICATOR,          
&SC.CMP_SRC_IND   
)

end-sql
end-procedure

!********************************************************************
begin-procedure Find-Bas-Action
!********************************************************************
#debug9 SHOW 'Find-Bas-Action'

  let $sql-statement = 'GEXHR068.SQR,Find-Bas-Action'

BEGIN-SELECT
AC.BAS_ACTION

  let $bas_action = &AC.BAS_ACTION   

FROM PS_ACT_RSN_TBL_NA AC	 
WHERE AC.ACTION        = $job_action and
      AC.ACTION_REASON = $job_action_reason and 
      AC.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_ACT_RSN_TBL_NA A_ED	 
        WHERE AC.ACTION = A_ED.ACTION
          AND AC.ACTION_REASON = A_ED.ACTION_REASON
          AND A_ED.EFFDT <= $WHERE_SELECT_ASOFDATE)

END-SELECT

END-PROCEDURE
!********************************************************************
begin-procedure Update-Employment
!********************************************************************
#debug9 SHOW 'Update-Employment'

  let $sql-statement = 'GEXHR068.SQR,Update-Employment,PS_PER_ORG_ASGN'

begin-sql On-Error=Sql-Diagnostic 

update PS_PER_ORG_ASGN			! DXS, 12/31/07, last_increase_dt is now in ps_per_org_asgn (9.0)
 set last_increase_dt = $WHERE_SELECT_ASOFDATE
 where emplid   = &J.EMPLID
   and empl_rcd = &J.EMPL_RCD

end-sql
end-procedure

!***********************************************************************
Begin-Procedure Print-Curr-Rpt
!***********************************************************************
#debug9 SHOW 'Print-Curr-Rpt'

  use-report Report1
  let $curr_comprate  = ltrim(edit(#comprate,'$,$$$,$$$,$$9.9999'), ' ')
  let $new_comprate   = ltrim(edit(&gex.gex_new_hourly_rt,'$,$$$,$$$,$$9.9999'), ' ')
  let $curr_salary    = ltrim(edit(&j.annual_rt,'$,$$$,$$$,$$9.99'), ' ')
  let $new_salary     = ltrim(edit(#job_annual_rt,'$,$$$,$$$,$$9.99'), ' ')
  let $empl_rcd_nbr   = ltrim(edit(#Empl_Rcd_Nbr,'9'), ' ')
  let $Year4 = '1'
  do format-datetime ($WHERE_SELECT_ASOFDATE,$Job_Insert_Dt_Prt,{DEFMDY},'','') 
  let $job_effseq   = ltrim(edit(#Job_Effseq,'9'), ' ')   

  print $Emplid		(+1,{#col_emp}) !edit xxx-xx-xxxx !GEX_SEC_REENG 2015-06-24 Vahini Katta
  print $empl_rcd_nbr   (0,{#col_rec})
  Print &PER.Name	(0,{#col_name})
  print &J.PayGroup   (0,{#col_pgp})
  print &J.Comp_Frequency (0,{#col_frq})
  print $curr_comprate  (0,{#col_sal})  
  print $new_comprate   (0,{#col_nsal}) 
  print $curr_salary    (0,{#col_ann_rt})  
  print $new_salary     (0,{#col_nann_rt}) 
  print $Job_Insert_Dt_Prt	(0,{#col_dt})
  print $Job_Effseq	(0,{#col_seq})

  add 1 to #rpt1_count
   add #job_annual_rt to #new_annual_rt_tot    
   add &j.annual_rt   to #old_annual_rt_tot   
  
  let $curr_salary = 0 
  let $new_salary = 0
  

end-procedure

!********************************************************************
begin-procedure Update-Future-Rows
!********************************************************************
#debug9 SHOW 'Update-Future-Rows'

  let $sql-statement = 'GEXHR068.SQR,Update-Future-Rows'

begin-sql On-Error=Sql-Diagnostic 
Update PS_JOB 
	SET comprate 	= #new_comprate,
	change_pct 	= 0.000000,
	change_amt 	= 0.000000,
	annual_rt 	= #JOB_ANNUAL_RT,
	monthly_rt 	= #JOB_MONTHLY_RT,
	DAILY_RT	= #JOB_DAILY_RT,	! AXC NEW DAILY RATE ADDED. 8.3 UPGRADE
	hourly_rt 	= #JOB_HOURLY_RT
 Where emplid = $emplid
       and empl_rcd 	= #EMPL_RCD_nbr 
       and effdt 	> $WHERE_SELECT_ASOFDATE
End-SQL
         If #sql-status = 0
            Let #update_count = #update_count + #sql-count
         else
             let #invalid_updts = #invalid_updts + 1
         End-if

begin-sql On-Error=Sql-Diagnostic 
Update PS_COMPENSATION
	SET COMPRATE 	= #new_comprate,
	CONVERT_COMPRT	= #new_comprate
 Where emplid = $emplid
       and empl_rcd 	= #EMPL_RCD_nbr 
       and effdt 	> $WHERE_SELECT_ASOFDATE
End-SQL

end-procedure

!*********************************************************************
begin-procedure Process-Future-Rpt
!*********************************************************************
#debug9 SHOW 'Process-Future-Rpt'

  let $sql-statement = 'GEXHR068.SQR,Process-Future-Rpt'

begin-select On-Error=Sql-Diagnostic 	
FUTR.EMPLID
FUTR.EMPL_RCD	
FUTR.EFFDT
FUTR.EFFSEQ
FUTR.COMPANY  
FUTR.PAYGROUP
FUTR.DEPTID
FUTR.COMP_FREQUENCY
FUTR.COMPRATE
FUTR.HOURLY_RT
FUTR.EMPL_TYPE
PD.NAME

  do Print-Future-Rpt

FROM PS_JOB FUTR, PS_PERSONAL_DATA PD
WHERE FUTR.EMPLID    = $EMPLID
AND   FUTR.EMPL_RCD = #EMPL_RCD_NBR
AND   FUTR.EMPLID    = PD.EMPLID
AND   FUTR.EFFDT > $WHERE_SELECT_ASOFDATE
end-select
end-procedure

!***********************************************************************
Begin-Procedure Print-Future-Rpt
!***********************************************************************
#debug9 SHOW 'Print-Future-Rpt'

  use-report Report2
  if &futr.empl_type = 'H'
  let $futr_salary  = ltrim(edit(&FUTR.HOURLY_RT,'$,$$$,$$$,$$9.99'), ' ')
  else 
  let $futr_salary  = ltrim(edit(&FUTR.COMPRATE,'$,$$$,$$$,$$9.99'), ' ')
  end-if
  let $empl_rcd_nbr = ltrim(edit(&Futr.Empl_Rcd,'9'), ' ')
  
  print $Emplid			(+1,{#col_emp}) !edit xxx-xx-xxxx !GEX_SEC_REENG 2015-06-24 Vahini Katta
  print $empl_rcd_nbr	 	(0,{#col_rec})
  Print &Pd.Name		(0,{#col_name})
  print &Futr.PayGroup 		(0,{#col_pgp})
  print &Futr.Comp_Frequency 	(0,{#col_frq})
  print $futr_salary	   	(0,{#col_sal})
  !print #new_comprate	   	(0,{#col_sal})  
  print &Futr.Effdt		(0,{#col_nsal})
  print &Futr.Effseq		(0,{#col_ann_rt})

  add 1 to #rpt2_count

end-procedure

!*********************************************************************
begin-procedure Before-Deptid
!*********************************************************************
#debug9 SHOW 'Before-Deptid'
  
  if $first_rec = 'Y'
    let $first_rec ='N'
  else
     use-report Report1   ! Lis
     new-page

     if #rpt2_count > 0
        use-report Report2   ! l01
        new-page
        let #rpt2_count = 0
     end-if

     if #rpt3_count > 0
         use-report Report3   ! l02
         new-page
         let #rpt3_count = 0
     end-if
  end-if
  
end-procedure

!***********************************************************************
Begin-Procedure Deptid-Totals
!***********************************************************************
#debug9 SHOW 'Deptid-Totals'
  
  use-report Report1

  let $old_annual_rt_tot  = ltrim(edit(#old_annual_rt_tot,'$,$$$,$$$,$$9.99'), ' ') 
  let $new_annual_rt_tot  = ltrim(edit(#new_annual_rt_tot,'$,$$$,$$$,$$9.99'), ' ')  
 
  Print 'Total Employees'		(+2,20)
  Print #deptid_count		        (,35)  Edit 999,999
  Print $old_annual_rt_tot		(0,{#col_ann_rt})  
  Print $new_annual_rt_tot	       	(0,{#col_nann_rt})  	
  
  add #deptid_count      to #total_count
  add #old_annual_rt_tot to #old_annual_rt_gr_tot
  add #new_annual_rt_tot to #new_annual_rt_gr_tot

  Let #deptid_count = 0
  Let #new_annual_rt_tot = 0
  Let #old_annual_rt_tot = 0

End-Procedure

!***********************************************************************
Begin-Procedure Print-Error-Log
!***********************************************************************
#debug9 SHOW 'Print-Error-Log'
 
  use-report Report3
  
  let $empl_rcd_nbr = ltrim(edit(#EMPL_RCD_nbr,'9'), ' ')

  print $Emplid		(+1,{#col_emp}) !edit xxx-xx-xxxx PITA for edit/copy
  print $empl_rcd_nbr	(0,{#col_rec})
  print &PER.Name	(0,{#col_name})
  print $Error_Rsn      (0,{#col_pgp})
  print $Error_Field    (0,{#col_nann_rt})
  print $Error_Value    (0,{#col_field})	 	
 
  add 1 to #rpt3_count

end-procedure

!*********************************************************************
begin-procedure Sql-Diagnostic
!*********************************************************************
#debug9 SHOW 'Sql-Diagnostic'

  display $sqr-program noline
  display ': ' noline
  display $ReportID noline
  display ' - SQL Statement = '
  display $SQL-STATEMENT
  display 'SQL Status =' noline
  display #sql-status 99999 noline
  display ' ' noline
  display 'SQL Error  = ' noline
  display $sql-error
end-procedure

!***********************************************************************
Begin-Procedure EOJ
!***********************************************************************
#debug9 SHOW 'EOJ'
  
  if #record_count = 0
    use-report Report1
    print 'No Data Selected This Run'   (25,) Center
  end-if

  if $gex_process_optn = 'E'      
   let $Job_inserts     = ltrim(edit(#job_inserts,'999,999'), ' ')
   let $invalid_inserts = ltrim(edit(#invalid_insert,'999,999'), ' ')
   let $Job_updates     = ltrim(edit(#update_count,'999,999'), ' ')
   let $invalid_updates = ltrim(edit(#invalid_updts,'999,999'), ' ')
  
   show 'SUMMARY INFORMATION'
   show ' '
   show '# job rows inserted successfully: 	' $job_inserts
   show '# employees with insert errors: 	' $invalid_inserts
   show ' '
   show '# future job rows updated successfully: ' $job_updates
   show '# future job row update errors:         ' $invalid_updates
   show '# rows inserted into ps_gex_aprais_scor ' #app_scor_cnt
   show '# Total Distinct Employees in Error     '  #Emp_in_error
   show '# Total Distinct Employees with Future Job rows     '  #Emp_in_FUT
   SHOW 'EMPL IN NO ERROR ' #emp_in_nERR
   SHOW 'EMPL IN NO FUTURE ' #emp_in_nfut
   show 'empl in error and having Future Job row '  #errY_futY
   
  end-if  
    
  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded

  Show 'Successful end of report'

  do Reset

End-Procedure
!***********************************************************************
!***********************************************************************
#Include 'askaod.sqc'    !Ask for As-Of-Date parameter
#include 'getcodta.sqc'  !Get-Company-Data
#include 'getdptnm.sqc'  !Get-Department-Name
#include 'gexxx902.sqc'  !Get deptid multiple row table
#Include 'gexxx921.sqc'  !Get hr single row run control
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'reset.sqc'     !Reset Printer procedure
#Include 'stdapi.sqc'    !Update Process API



