!***********************************************************************
! GEXPYPWW:  This daily vacation process for part-time employees will  *
!            calculate the correct amount of vacation dollars that the *
!            employee 'earned' in the last calendar year of employment *
!            or in the last 12 months of employment if the employee    *
!            completed first year of service that day.  The vacation   *
!            dollars are awarded at the time the employee meets their  *
!            service anniversary based on their date of service.       *
!                                                                      *
!            Special processing needs to occur for employees that      *
!            transfer from FT to PT. Since the employee is newly       *
!            statused as PT, the Part-Time Vacation process needs to   *
!            occur for the employee immediately to award the employee  *
!            with the correct vacation dollars.                        *
!                                                                      *
!            The vacation process will also process terminated and     *
!            retired employees that have an effective date equal to    *
!            the current date.  There are rules specific to each       *
!            union code for reporting on terminated and retired        *
!            employees.                                                *
!                                                                      *
!            This process must run daily to handle PT status           *
!            and terminated/retired employees for uninon code G06     *
!            This is a clone of GEXPYPTW                               *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *        
!***********************************************************************
!GEXHR_848_E2422_01  02/03/2015       Vahini Katta
! GEX_SEC_REENG 2015-04-29 Vahini Katta                                *
! Changes related to gex_emplid_mapp/7 digit emplid                    *
!************************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup32.sqc'

!***********************************************************************
begin-setup
!***********************************************************************

  declare-report Vacation-Payout-Report
Printer-Type=HPLASERJET
    layout=DEFAULT
  end-declare

  declare-report Report-log
Printer-Type=HPLASERJET
    layout=DEFAULT
  end-declare
   
  declare-report Balance-Report
Printer-Type=HPLASERJET
    layout=DEFAULT
  end-declare

end-setup


!***********************************************************************
begin-heading 6 for-reports=(report-log)
!***********************************************************************

  LET $REPORTID = 'PYPWWLOG'
  move 'Part Time Vacation Calculation - Report Log' to $ReportTitle

 #Include 'stdhdg01.sqc'

  position          (+2)
  print 'Trans#'    (,1)
  print 'Emplid'    (,18)
  print 'Message'   (,50)

  print '-'         (+1,1,174) fill
end-heading


!***********************************************************************
begin-heading 6 for-reports=(Vacation-Payout-Report)
!***********************************************************************

  LET $REPORTID = 'PYPWWPAY'
  move 'Vacation Payout Report' to $ReportTitle

 #Include 'stdhdg01.sqc'

  position                  (+2)
  print 'EmplID'            (,1)
  print 'Name'              (,20)
  print 'Action'            (,50)
  print 'Effective Date'    (,65)
  print 'Vacation Balance'  (,80)

  print '-'                 (+1,1,174) fill
end-heading


!***********************************************************************
begin-heading 6 for-reports=(Balance-Report)
!***********************************************************************

  LET $REPORTID = 'PYPWWBAL'
  move 'Payout Report' to $ReportTitle

  #Include 'stdhdg01.sqc'
  do Get-Company-Data
  do Get-Department-Name

  print 'Company'          (3,1)
  print $prev_cmpy         (0,13)
  print $CompanyName       (0,17)
  
  print 'DeptID:'           (4,1)
  print $prev_deptid        (,13)
  print $DeptName           (,+1)

  position                  (+2)
  print 'EmplID'            (,1)
  print 'Name'              (,20)
  print 'Action'            (,50)
  print 'Effective Date'    (,65)
  print 'Earnings'          (,85)
  print 'Balance Due'       (,100)

  print '-'                 (+1,1,174) fill
end-heading


!***********************************************************************
begin-report
!***********************************************************************

  use-report Report-log

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do stdapi-init

  move 'GEXPYPWW' to $ReportID
  move 'Part-Time Employee Vacation Calculation - Daily' to $ReportTitle
 
  Let $GEXXX970_Deptid_Alias  = 'A.Deptid'
  Let $GEXXX970_Jobcode_Alias = 'A.Jobcode'
 
  if isnull($prcs_process_instance)
	let $Prcs_OprID = 'ISDVDXS'
	let $Prcs_Run_Cntl_ID = 'GEXPYPWW'
  end-if

    Do GEXXX922-Select-Parameters
    
    Let $AsOfDate = $GEX_RC_PAY.ASOFDATE
    If Rtrim($AsOfDate,' ') = ''
      Let $AsOfDate = $AsOfToday
    End-If

!   show '$AsOfDate : ' $AsOfDate 
   Let $GEXXX913_UNION_CD_Alias = 'A.UNION_CD'
   Do GEXXX913-Select-UNION-CD-Parameters

  date-time () HH:MI:SS &timeBegan
  date-time () MM/DD/YYYY &dateBegan
  show 'Report Began at ' &timeBegan ' on ' &dateBegan
  show ' '

  Do Convert-To-DTU-Date($AsOfDate,$AsofDate_dtu)
  Do dtu-add-days($AsOfDate_dtu, 1, $AsOfDatePlus1_dtu)
  Do dtu-add-days($AsOfDate_dtu,-1, $AsOfDateMinus1_dtu)
  Do Convert-From-DTU-Date($AsOfDatePlus1_dtu,$AsOfDatePlus1)
  Do Convert-From-DTU-Date($AsOfDateMinus1_dtu,$AsOfDateMinus1)

  do GEXREGTP_init_strings
  do get-date-codes

  do Convert-To-DTU-Date($AsOfDate, $AsOfDate_dtu)

  move $AsOfYYYY to #AsOfYYYY

  let #prev_year = #AsOfYYYY - 1

  let $prev_year = to_char(floor(#prev_year))

  let $PrevYearEnd = $prev_year ||'1231'
  let $Prev_YearEndDt = '31-DEC-' || $PREV_YEAR		
  
  do GEXREGTP_init_strings

  move 'N' to $found
  let #inputtran = 0

  do select-employees

  show 'Doing select-retirees-terms'
  do select-retirees-terms
  
Report-Exit:

  date-time () HH:MI:SS &timeEnded
  date-time () MM/DD/YYYY &dateEnded

  show ' '
  show 'Report Ended at ' &timeEnded ' on ' &dateEnded
  show ' '

  display #InputTran 999,999 noline
  display ' Transactions Processed'

  Show 'End of report .. commiting'
   do Commit-Transaction
  ! do Rollback-Transaction  ! Uncomment this and comment the commit line above
			     ! if you want to run thsi sqr without commiting any data
  do stdapi-term
end-report


!***********************************************************************
Begin-Procedure Select-Employees
!***********************************************************************

#debug9 Show 'Select-Employees'
  move 'N' to $found
  move 'N' to $Empl_found
  move 'N' to $Bal_found	 

  let $var = 'AND ( (A.REG_TEMP '||$GEXREGTP_part_time_code_string || '))'
  show '$var     ' $var
  show 'Union_cd ' $GEXXX913_INCLUDE_UNION_CD_CRITERIA                        

begin-select ON-ERROR=SQL-Error-Found

A.COMPANY
A.DEPTID
A.PAYGROUP
A.EMPLID
A.EMPL_RCD
A.REG_TEMP
A.HOURLY_RT
A.UNION_CD  		
A.ACTION	 	
A.EFFDT		 	
A.JOBCODE		
B.GEX_VCN_SENIOR_DT
B.SERVICE_DT
PD.NAME			

  Let $company = &a.company	
  Let $deptid  = &a.deptid	
  Let $union_cd= &a.union_cd    

  move &A.EMPLID to $emplid
  move 'Y' to $Empl_found
  move 'N' to $skip_record

  show 'Emplid ================================================= ' $emplid
  show ' in main process '  &B.SERVICE_DT
 
   let $GEXJOB_REH_EMPLID = $emplid
   let #GEXJOB_REH_EMPLRCD = &A.EMPL_RCD
   let $GEXJOB_REH_ASOFDATE = $AsOfDate
   do Get-Job-Rehire-Dt
   do Determine-Service-Dt
   do check-transfer-FT-to-PT
 
  let #Prior_Vac_Amt = 0	
  show '$transfer ' $transfer
  show '$first_year_service ' $first_year_service
  if $transfer = 'Y'
        if $first_year_service = 'Y'
               if $transfer_dt_cmp <= $PrevYearEnd 
                  let $pay_end_criteria  = 'AND EE.PAY_END_DT >= ' || '''' || $service_dt || '''' || ' AND EE.PAY_END_DT <= ' || '''' ||  $transfer_dt ||'''' 
	                show '$pay_end_criteria : ' $pay_end_criteria  
	                  do get-FT-vac-amt-new
               else 
                  let $pay_end_criteria  = 'AND EE.PAY_END_DT > ' || '''' || $Prev_YearEndDt || '''' || ' AND EE.PAY_END_DT <= ' || '''' || $transfer_dt ||'''' 
	                 show '$pay_end_criteria : ' $pay_end_criteria  
                    do get-FT-vac-amt-new
               end-if
        else
              if #dtu_years < 1
                 move 'Y' to $skip_record
              else
                 let $balance_year_criteria = 'AND    C2.BALANCE_YEAR      = ' || $AsOfYYYY
	               show '$balance_year_criteria : ' $balance_year_criteria 
                 do get-FT-vac-amt
              end-if
        end-if
  end-if

  let #max_eligible_weeks = 0	
  let $curr_addl_found = 'N'	
  let #curr_wks_check = 0	

  show '$transfer flag        b4 calc vacn stmt ' $transfer 
  show '$service_anniversary  b4 calc vacn stmt ' $service_anniversary

  show '$service_anniversary ' $service_anniversary
  show '$transfer ' $transfer
  show '$skip_record ' $skip_record 
  show '$prev_year ' $prev_year
  if ($service_anniversary = 'Y' or $transfer = 'Y' or $transfer = 'N') and $skip_record = 'N'
     do calc-vacation-amount
        if ($transfer <> 'Y' and #max_eligible_weeks <> 0) 
            do select-curr-addl-pay
            if $curr_addl_found = 'Y'
	            show '$union_cd ' $union_cd	
	             evaluate $union_cd
	             when = 'G17'
	               if $first_year_service='Y' and  $service_anniversary='Y'
	                  move #max_eligible_weeks to #eligible_weeks
	               else
                           if #max_eligible_weeks <= #curr_wks_check
                                move 0 to #eligible_weeks
                           else
                                let #eligible_weeks = #max_eligible_weeks - #curr_wks_check
                           end-if
                 end-if 
	             when-other
	             end-evaluate
            end-if
        end-if
           if $skip_record = 'N'
              let #year_vac_amt = #week_vac_amt * #eligible_weeks
              multiply 1 times #year_vac_amt round=2
    	        show '#year_vac_amt ' #year_vac_amt 
              if #year_vac_amt <= 0
                move 'Y' to $skip_record
              end-if
          
              if $skip_record = 'N'
                add 1 to #inputtran
                let #year_vac_Amt = #year_vac_Amt - #Prior_Vac_Amt	
	              show '#year_vac_Amt ' #year_vac_Amt 
                let #hrs_worked = 0
	              show '$first_year_service ' $first_year_service 
	      
                if $first_year_service = 'Y'
	                 if $transfer = 'Y'
	                   if $transfer_dt_cmp <= $PrevYearEnd 
                           let $pay_end_criteria  = 'AND CC.PAY_END_DT >= ' || '''' || $service_dt || '''' || ' AND CC.PAY_END_DT <= ' || '''' || $max_pay_end_Dt || ''''
	           	             show '$pay_end_criteria  ' $pay_end_criteria 
	           	             show 'Hours-Worked-New 1' 
	           	             do Hours-Worked-New   !Use PS_PAY_EARNINGS rather than PS_EARNINGS_BAL
                     else !use prior year
                           let $balance_year_criteria = 'AND    J.BALANCE_YEAR      = ' || $prev_year
	           	             show '$balance_year_criteria ' $balance_year_criteria 
	           	             show 'Hours-Worked 2' 
	           	             do hours-worked  
                     end-if
                   else !transfer = No --- go ahead and establish criteria
                           let $pay_end_criteria  = 'AND CC.PAY_END_DT >= ' || '''' || $service_dt || '''' || ' AND CC.PAY_END_DT <= ' || '''' || $max_pay_end_Dt || ''''
	           	             show '$pay_end_criteria ' $pay_end_criteria
	           	             show 'Hours-Worked-New 3' 
	           	             do Hours-Worked-New   !Use PS_PAY_EARNINGS rather than PS_EARNINGS_BAL
                   end-if 
                else !first_year_service = 'N'
                      let $balance_year_criteria = 'AND    J.BALANCE_YEAR      = ' || $prev_year
                      show 'Hours-Worked 4' 
	                    do hours-worked  
                end-if
             
	               show '#hrs_worked ' #hrs_worked 
                 let #avg_weekly_hrs_worked = #hrs_worked / 52
	               show '#avg_weekly_hrs_worked ' #avg_weekly_hrs_worked
                 If #avg_weekly_hrs_worked = 0
                    let #vac_hourly_rt = 0
                 Else
                    let #vac_hourly_rt = #week_vac_amt/#avg_weekly_hrs_worked
                 End-If
	      
	               show '#week_vac_amt ' #week_vac_amt
	               show '#vac_hourly_rt ' #vac_hourly_rt 
          
	               do check-existing-vac-erncd		
                 do select-existing-addl-pay
                     
                 if $existing_addl_pay = 'N'
                    let #GOAL_BAL = 0
                 end-if
            
	               show 'Doing Insert-Addl-Pay-Data'
                 do Insert-Addl-Pay-Data
	      	       show '#week_vac_amt ' #week_vac_amt 
	      	       show '#year_vac_amt ' #year_vac_amt
	      	       show '$transfer ' $transfer
              
                 if (#week_vac_amt > #year_vac_amt AND $transfer = 'Y')
                    move 'Y' to $Bal_found
	                  if rtrim(&A.DEPTID,' ') <> rtrim($prev_deptid,' ')
                       and rtrim($prev_deptid,' ') <> ''
                       let $dept_changed='Y'
                    end-if  
	       
                    do Print-Balance-Report
                    move &A.DEPTID to $prev_deptid
                    move &A.Company to $prev_cmpy
                 end-if
              end-if !$skip_record <> 'N'
           end-if !$skip_record <> 'N'
  end-if
  

FROM  PS_JOB A,
      PS_EMPLOYMENT B, 
      PS_PERSONAL_DATA PD	
WHERE  A.EMPLID           = B.EMPLID
AND    A.EMPL_RCD        = B.EMPL_RCD  
AND    B.EMPLID           = PD.EMPLID
AND [$GEXXX913_INCLUDE_UNION_CD_CRITERIA]	
AND    A.EMPL_STATUS NOT IN ('T','R','U','Q','D')
AND    A.EFFDT            =
      (SELECT MAX(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID     = A.EMPLID
       AND    EMPL_RCD  = A.EMPL_RCD
       AND    EFFDT     <= $AsOfDate)
AND    A.EFFSEQ           =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB  
       WHERE  EMPLID      = A.EMPLID
       AND    EMPL_RCD   = A.EMPL_RCD
       AND    EFFDT       = A.EFFDT)
[$var] 
ORDER BY A.COMPANY, A.DEPTID, A.EMPLID	
end-select

  if $Empl_found = 'N'
    use-report report-log
    Print 'NO DATA SELECTED FOR THIS REPORT RUN'	(25,) Center
  end-if
  
  if $Bal_found = 'N'
    use-report Balance-Report
    Print 'NO DATA SELECTED FOR BALANCE DUE REPORT'	(25,) Center
    use-report report-log
  end-if

end-procedure


!***********************************************************************
!This procedure selects employees, who are retired or terminated 
!during the current pay period and belongs to union codes G01, or G02
!or G04.
!***********************************************************************
Begin-Procedure Select-Retirees-Terms
!***********************************************************************

#debug9 Show 'Select-Retirees-Terms'
  move 'N' to $R_Empl_found
  let $var = 'AND ( (A3.REG_TEMP '||$GEXREGTP_part_time_code_string || ') OR ( A3.DEPTID IN (''0062'',''0066'') ) )'
   show 'Select-Retirees-Terms $var ' $var
  
   Let $GEXXX913_UNION_CD_Alias = 'A3.UNION_CD'
   Do GEXXX913-Select-UNION-CD-Parameters
   show 'Union_cd ' $GEXXX913_INCLUDE_UNION_CD_CRITERIA

begin-select ON-ERROR=SQL-Error-Found
A3.EMPLID
A3.EMPL_RCD
A3.REG_TEMP
A3.HOURLY_RT
to_char(A3.EFFDT,'MM/DD/YYYY') &effdt
A3.EFFDT 
A3.ACTION
A3.EMPL_STATUS
A3.UNION_CD
P3.NAME

  move &A3.EMPLID to $emplid

  show 'Doing check-unused-vacation'
  do check-unused-vacation

  if #vac_bal > 0
    move 'Y' to $R_Empl_found
	show 'Doing print-payout-report'
    do print-payout-report
  end-if

FROM   PS_JOB        A3,
      PS_PERSONAL_DATA P3

WHERE A3.EMPLID         = P3.EMPLID 
AND [$GEXXX913_INCLUDE_UNION_CD_CRITERIA]		
AND    A3.EMPL_STATUS   IN ('R','T','U','Q')
AND    A3.EFFDT          = $AsOfDate
AND    A3.EFFSEQ         =
      (SELECT MAX(EFFSEQ)
       FROM   PS_JOB 
       WHERE  EMPLID     = A3.EMPLID
       AND    EMPL_RCD  = A3.EMPL_RCD
       AND    EFFDT      = A3.EFFDT)
     [$var]
      And   A3.deptid||A3.JOBCODE not in 
              (select distinct a.deptid||a.jobcode
               from ps_gex_rc_dptjc a
               where a.OPRID                 = [$OprID]
                and  a.RUN_CNTL_ID           = [$Run_Cntl_ID])
ORDER BY A3.EMPLID
end-select
  #debug8 show '$R_Empl_found ' $R_Empl_found 
  if $R_Empl_found = 'N'
    show 'No Retired/Terminated Employees found to calculate part time vacation amounts'
    use-report Vacation-Payout-Report
    Print 'NO DATA SELECTED FOR THIS REPORT RUN'	(25,) Center
    use-report report-log
  end-if
end-procedure


!***********************************************************************
!This procedure finds out the appropriate service date and finds out
!if the employee has met his/her service anniversary during the current
!pay period.
!***********************************************************************
begin-procedure Determine-Service-Dt
!***********************************************************************

  move 'N' to $service_anniversary
 
  show '&B.GEX_VCN_SENIOR_DT ' &B.GEX_VCN_SENIOR_DT

  if RTRIM(&B.GEX_VCN_SENIOR_DT,' ') <> ''
    move &B.GEX_VCN_SENIOR_DT to $service_dt
  else
    show 'Rehire Date : ' $GEXJOB_REH_REHIRE_DT  
    if RTRIM($GEXJOB_REH_REHIRE_DT,' ')	<> ''		
        do Select-REI-date			
        if $REI_date_found = 'Y'		
           move &B.SERVICE_DT to $service_dt	
        else	
           move $GEXJOB_REH_REHIRE_DT to $service_dt				
        end-if					
    else
        move &B.SERVICE_DT to $service_dt
    end-if
  end-if
  show '$service_dt '  $service_dt
  Let $Service_Cmp_Dt = strtodate($service_dt,'DD-MON-YYYY')	
  show '$Service_Cmp_Dt: '$Service_Cmp_Dt	
  do Convert-To-DTU-Date($service_dt, $service_dt_dtu)
  show ' $service_dt_dtu  ' $service_dt_dtu           ' $AsOfDate_dtu  ' $AsOfDate_dtu	'$AsOfDateMinus1_dtu ' $AsOfDateMinus1_dtu
  do dtu-diff-years($service_dt_dtu,$AsOfDate_dtu,#dtu_years)
  do dtu-diff-years($service_dt_dtu,$AsOfDateMinus1_dtu,#dtu_yearsMinus1)

  show '#dtu_years ' #dtu_years
  show '#dtu_yearsMinus1 ' #dtu_yearsMinus1
   
  if #dtu_years <> #dtu_yearsMinus1
    move 'Y' to $service_anniversary
    if #dtu_years = 1
      move 'Y' to $first_year_service
    else
      move 'N' to $first_year_service
    end-if
      show '$first_year_service ' $first_year_service
      show '$service_anniversary ' $service_anniversary
  else
     if #dtu_years = 1
       move 'Y' to $first_year_service
     else
       move 'N' to $first_year_service 
    end-if
	show '$first_year_service ' $first_year_service
	show '$service_anniversary ' $service_anniversary
  end-if

  if $first_year_service = 'Y'
     let $service_dt_plus_one = dateadd(strtodate($service_dt),'Year',1)
     show '$service_dt_plus_one ' $service_dt_plus_one 
     show 'Doing find-max-pay-end'
     do Find-Max-Pay-End
  end-if

end-procedure

!***********************************************************************
Begin-Procedure Find-Max-Pay-End
!***********************************************************************

move 'N' to $max_found

begin-select loops = 1 
PAY.PAY_END_DT

  move 'Y' to $max_found
  move &PAY.PAY_END_DT to $max_pay_end_Dt
  show '$max_pay_end_Dt ' $max_pay_end_Dt

FROM PS_PAY_CALENDAR PAY
WHERE PAY.PAY_END_DT = (SELECT DISTINCT(MIN(PAY_END_DT))
   		        FROM PS_PAY_CALENDAR
		        WHERE PAY_END_DT >= $service_dt_plus_one
                        AND PAY_SHEETS_RUN = 'Y')
end-select

 if $max_found = 'N'
    display 'No Pay Cycle as of:' noline
    display $service_dt_plus_one
    move $AsOfToday to $max_pay_end_Dt
    display 'Using today for max pay end dt for ' noline
    display $emplid
 end-if
 
end-procedure


!***********************************************************************
!This procedure selects an REHIRE row with REI reason
!***********************************************************************
begin-procedure Select-REI-Date
!***********************************************************************

#debug9 Show 'select-REI-date'
  move 'N' to $REI_date_found
Begin-Select on-error=sql-error-found
REI.EFFDT

  move 'Y' to $REI_date_found
  show '$REI_date_found ' $REI_date_found

FROM   PS_JOB REI
WHERE  REI.EMPLID           = &A.EMPLID
AND    REI.EMPL_RCD        = &A.EMPL_RCD
AND    REI.EFFDT            = (SELECT MAX(EFFDT) FROM PS_JOB
                               WHERE  EMPLID      = REI.EMPLID
                               AND    EMPL_RCD   = REI.EMPL_RCD
                               AND    ACTION_REASON = 'REI'
                               AND    EFFDT      <= $AsOfDate)
AND    REI.EFFSEQ           = (SELECT MAX(EFFSEQ) FROM PS_JOB
                               WHERE  EMPLID      = REI.EMPLID
                               AND    EMPL_RCD   = REI.EMPL_RCD
                               AND    EFFDT       = REI.EFFDT)
end-select
end-procedure   


!***********************************************************************
!This procedure checks if the current employee being processed, is
!transferred from FT to PT during the current pay period
!***********************************************************************
Begin-Procedure Check-Transfer-FT-to-PT
!***********************************************************************

#debug9 Show 'Check-Transfer-FT-to-PT'
  move 'N' to $Transfer
  let $var1 = 'AND REG_TEMP '||$GEXREGTP_full_time_code_string
  let $var2 = 'AND REG_TEMP '||$GEXREGTP_part_time_code_string
  let $var3 = 'AND A1.REG_TEMP '||$GEXREGTP_part_time_code_string

begin-select ON-ERROR=SQL-Error-Found
'A1'
a1.effdt  &a1.effdt
  Do format-datetime (&a1.effdt,$transfer_dt_cmp,{DEFCMP},'','') 

  let $transfer_dt = &a1.effdt

  move 'Y' to $Transfer
  
FROM   PS_JOB A1
WHERE  A1.EMPLID        = &A.EMPLID
AND    A1.EMPL_RCD     = &A.EMPL_RCD
AND  A1.EFFDT            =
      (SELECT Min(EFFDT)
       FROM   PS_JOB
       WHERE  EMPLID     = A1.EMPLID
       AND    EMPL_RCD  = A1.EMPL_RCD
       [$var2]
       AND    EFFDT     >=
                         (Select Max(effdt)
                          From   ps_job
                          Where  emplid     = a1.emplid
                          And    empl_rcd  = a1.empl_rcd
                          And    effdt     <= $asofdate
                          [$var1]) )
 AND    A1.EFFSEQ           =
      (SELECT Min(EFFSEQ)		
       FROM   PS_JOB 
       WHERE  EMPLID      = A1.EMPLID
       AND    EMPL_RCD   = A1.EMPL_RCD
       AND    EFFDT       = A1.EFFDT)
[$var3]
AND    A1.ACTION_DT     = $AsOfDateMinus1
end-select

end-procedure


!***********************************************************************
begin-procedure Get-FT-Vac-Amt-New
!***********************************************************************

#debug9 Show 'get-FT-vac-amt-new'
#debug8 Show '$pay_end_criteria used in get-FT-vac-amt-new ' $pay_end_criteria

 show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD ' ' &A.COMPANY

begin-select on-error=sql-error-found
FF.OTH_EARNS &OTH_EARNS

  add &OTH_EARNS to #Prior_Vac_Amt	

FROM  PS_PAY_EARNINGS EE, PS_PAY_OTH_EARNS FF
WHERE    EE.EMPLID	= &A.EMPLID
     and EE.EMPL_RCD    = &A.EMPL_RCD	
     AND EE.COMPANY     = &A.COMPANY
     AND EE.COMPANY 	= FF.COMPANY
     AND EE.PAYGROUP 	= FF.PAYGROUP
     AND EE.PAY_END_DT 	= FF.PAY_END_DT
     AND EE.OFF_CYCLE 	= FF.OFF_CYCLE
     AND EE.PAGE_NUM 	= FF.PAGE_NUM
     AND EE.LINE_NUM 	= FF.LINE_NUM
     AND EE.ADDL_NBR 	= FF.ADDL_NBR
     AND FF.ERNCD 	= '513'		!FT Vacation
     [$pay_end_criteria]

end-select
end-procedure

!***********************************************************************
begin-procedure get-FT-vac-amt
!***********************************************************************

#debug9 Show 'get-FT-vac-amt'

  show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD ' ' &A.COMPANY
  #debug8 show '$balance_year_criteria ' $balance_year_criteria

begin-select on-error=sql-error-found
C2.GRS_YTD &GRS_YTD

  add &GRS_YTD to #Prior_Vac_Amt	

FROM   PS_EARNINGS_BAL C2
WHERE  C2.EMPLID              = &A.EMPLID
AND    C2.EMPL_RCD            = &A.EMPL_RCD	
AND    C2.COMPANY             = &A.COMPANY
AND    C2.EMPL_RCD            = &A.EMPL_RCD
AND    C2.BALANCE_ID          = 'CY'
[$balance_year_criteria]
AND    C2.BALANCE_PERIOD      =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID          = C2.EMPLID
       AND    EMPL_RCD        = C2.EMPL_RCD	
       AND    COMPANY         = C2.COMPANY
       AND    BALANCE_ID      = C2.BALANCE_ID
       AND    BALANCE_YEAR    = C2.BALANCE_YEAR
       AND    SPCL_BALANCE    = C2.SPCL_BALANCE
       AND    ERNCD           = C2.ERNCD)
AND    C2.SPCL_BALANCE        = 'N'
AND    C2.ERNCD               = '513'    !FT Vacation
end-select
end-procedure


!***********************************************************************
begin-procedure calc-vacation-amount
!***********************************************************************

#debug9 Show '-- In Calc-Vacation-Amount Step --'

  let #total_gross = 0
  Let $Mstr_Cntrct_Nrml = 'N'		
  
  if $first_year_service = 'Y'
     if $transfer = 'Y' 
        if $transfer_dt_cmp <= $PrevYearEnd 
	   show '$first_year_service = Y $transfer = Y  $transfer_dt_cmp <= $PrevYearEnd'

	   let $pay_end_criteria  = 'AND AA.PAY_END_DT >= ' || '''' || $service_dt || '''' ||' AND AA.PAY_END_DT <= ' || '''' || $Prev_YearEndDt || ''''
	   show '$pay_end_criteria ' $pay_end_criteria
	   
	   do Get-Total-Gross-New   !Use Pay_Earnings rather than Earnings_Bal
	   
        else ! user prior yr & ytd up to anniversay date.
           let $pay_end_criteria  = 'AND AA.PAY_END_DT >= ' || '''' || $service_dt || '''' ||' AND AA.PAY_END_DT <= ' || '''' || $max_pay_end_Dt || ''''
           
           do Get-Total-Gross-New   !Use Pay_Earnings rather than Earnings_Bal
           
        end-if
     else  !transfer = NO use new criteria
        let $pay_end_criteria  = 'AND AA.PAY_END_DT >= ' || '''' || $service_dt || '''' || ' AND AA.PAY_END_DT <= ' || '''' || $max_pay_end_Dt || ''''
        
        do Get-Total-Gross-New   !Use Pay_Earnings rather than Earnings_Bal
     end-if
  else !1st year svc = No
     let $balance_year_criteria = 'AND    F.BALANCE_YEAR      = ' || $prev_year
	show 'Doing get-total-gross'
        do get-total-gross   
  end-if

  let #week_vac_amt = (#total_gross * 0.02)

  show '#week_vac_amt ' #week_vac_amt 
!Whenever employee meets the milestone anniversary, one more week 
!worth of vacation will be allowed.
 
  if $transfer = 'N'  !Must be a Service Ann or Transfer X
  !Evaluates are different when dealing with service milestones
    Evaluate $union_cd 
       When = 'G17'
       If strtodate($Service_Cmp_Dt) <= '29-MAY-2010' 
        evaluate #dtu_years 
            when = 12
              move 4 to #eligible_weeks 
              move 4 to #max_eligible_weeks
              break
            when = 7
              move 3 to #eligible_weeks 
              move 3 to #max_eligible_weeks
              break
            when = 3
              move 2 to #eligible_weeks
              move 2 to #max_eligible_weeks
              break
            when = 1
              move 1 to #eligible_weeks
              move 1 to #max_eligible_weeks
              break
            when-other
              move 0 to #eligible_weeks 
              break 
            end-evaluate
       else
          evaluate #dtu_years 
            when = 7
              move 3 to #eligible_weeks 
              move 3 to #max_eligible_weeks
              break
            when = 3
              move 2 to #eligible_weeks
              move 2 to #max_eligible_weeks
              break
            when = 1
              move 1 to #eligible_weeks
              move 1 to #max_eligible_weeks
              break
            when-other
            move 0 to #eligible_weeks 
            break 
            end-evaluate
       end-if
      break  	
     end-evaluate


  end-if
  show '#eligible_weeks ' #eligible_weeks
  show '#max_eligible_weeks ' #max_eligible_weeks

end-procedure   

   

!***********************************************************************
begin-procedure Get-Total-Gross-New
!***********************************************************************

   Let $GEXXX900_Company_Alias = 'AA.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA

Begin-SELECT 
sum(BB.OTH_EARNS) &BB.OTH_EARNS

   add &BB.OTH_EARNS to #total_gross
   show '#total_gross : ' #total_gross

FROM PS_PAY_EARNINGS AA, PS_PAY_OTH_EARNS BB
  WHERE  AA.EMPLID   = &A.EMPLID
     AND AA.EMPL_RCD = &A.EMPL_RCD	
     AND (AA.COMPANY > '999')!  or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] )  
     AND AA.COMPANY  = BB.COMPANY
     AND AA.PAYGROUP = BB.PAYGROUP
     AND AA.PAY_END_DT = BB.PAY_END_DT
     AND AA.OFF_CYCLE = BB.OFF_CYCLE
     AND AA.PAGE_NUM = BB.PAGE_NUM
     AND AA.LINE_NUM = BB.LINE_NUM
     AND AA.ADDL_NBR = BB.ADDL_NBR
     AND BB.ERNCD NOT IN ('ADJ','525','650','651','602','DDP')  
     [$pay_end_criteria]
end-select
end-procedure



!***********************************************************************
begin-procedure get-total-gross
!***********************************************************************

#debug9 Show '-- In Get-Total-Gross Step --'
   
   Let $GEXXX900_Company_Alias = 'F.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA
  

begin-select on-error=sql-error-found
SUM(F.GRS_YTD) &F.GRS_YTD

  add &F.GRS_YTD to #total_gross
  show '#total_gross : ' #total_gross

FROM   PS_EARNINGS_BAL F
WHERE  F.EMPLID         = &A.EMPLID
AND    F.EMPL_RCD       = &A.EMPL_RCD	
AND    (F.COMPANY 	> '999'	)! or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] )
AND    F.BALANCE_ID	= 'CY'
[$balance_year_criteria]
AND    F.BALANCE_PERIOD    =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID       = F.EMPLID
       AND    EMPL_RCD     = F.EMPL_RCD	
       AND    COMPANY      = F.COMPANY
       AND    BALANCE_ID   = F.BALANCE_ID
       AND    BALANCE_YEAR = F.BALANCE_YEAR
       AND    SPCL_BALANCE = F.SPCL_BALANCE
       AND    ERNCD        = F.ERNCD)
AND    F.SPCL_BALANCE      = 'N'
AND    F.ERNCD        NOT IN ('ADJ','525','602','650','651','DDP')  

end-select
end-procedure



!***********************************************************************
begin-procedure hours-worked-new
!***********************************************************************

#debug9 Show '-- In Hours-Worked-New Step --'
#debug8 show '$criteria used in hours-worked_NEW ' $pay_end_criteria
!	show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD
   Let $GEXXX900_Company_Alias = 'CC.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA
   show '&A.EMPLID :' &A.EMPLID
   show '&A.EMPL_RCD :' &A.EMPL_RCD
   show '$pay_end_criteria :' $pay_end_criteria
Begin-SELECT distinct 
CC.pay_end_dt 
CC.OFF_CYCLE
DD.SPCL_HRS

   add &DD.SPCL_HRS to #hrs_worked
   
FROM PS_PAY_EARNINGS CC, PS_PAY_SPCL_EARNS DD
  WHERE  CC.EMPLID     = &A.EMPLID
     AND CC.EMPL_RCD  =  &A.EMPL_RCD
     AND CC.COMPANY    = DD.COMPANY
     AND (CC.COMPANY    > '999')!  or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] ) 
     AND CC.PAYGROUP   = DD.PAYGROUP
     AND CC.PAY_END_DT = DD.PAY_END_DT
     AND CC.OFF_CYCLE  = DD.OFF_CYCLE
     AND CC.PAGE_NUM      = DD.PAGE_NUM
     AND CC.LINE_NUM      = DD.LINE_NUM
     AND CC.SEPCHK     = DD.SEPCHK	
     AND DD.ERNCD_SPCL = 'WK1'
     [$pay_end_criteria]
end-select
end-procedure


!***********************************************************************
begin-procedure hours-worked
!***********************************************************************

#debug9 Show '-- In Hours-Worked Step --'
!	show 'Parameters ' &A.EMPLID ' ' &A.EMPL_RCD ' ' &A.COMPANY
   Let $GEXXX900_Company_Alias = 'J.COMPANY'
   Do GEXXX900-Select-Company-Parameters
   show 'Company ' $GEXXX900_INCLUDE_COMPANY_CRITERIA
   show '&A.EMPLID :' &A.EMPLID
   show '&A.EMPL_RCD :' &A.EMPL_RCD
   show '&A.COMPANY :' &A.COMPANY
   show '$balance_year_criteria :' $balance_year_criteria
  
begin-select on-error=sql-error-found
SUM(J.HRS_YTD) &J.HRS_YTD

  add &J.HRS_YTD To #hrs_worked
  show '&J.HRS_YTD :' &J.HRS_YTD
  show '#hrs_worked :' #hrs_worked

FROM   PS_EARNINGS_BAL J
WHERE  J.EMPLID            = &A.EMPLID
AND    J.EMPL_RCD          = &A.EMPL_RCD  
AND    J.COMPANY           = &A.COMPANY
AND    (J.COMPANY       > '999')!  or [$GEXXX900_INCLUDE_COMPANY_CRITERIA] ) 
AND    J.BALANCE_ID        = 'CY'
[$balance_year_criteria]
AND    J.BALANCE_PERIOD    =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID       = J.EMPLID
       AND    EMPL_RCD     = J.EMPL_RCD	  
       AND    COMPANY      = J.COMPANY
       AND    BALANCE_ID   = J.BALANCE_ID
       AND    BALANCE_YEAR = J.BALANCE_YEAR
       AND    SPCL_BALANCE = J.SPCL_BALANCE
       AND    ERNCD        = J.ERNCD)
AND    J.SPCL_BALANCE      = 'Y'
AND    J.ERNCD             = 'WK1'
end-select
end-procedure


!*********************************************************************
!This procedure tries to find if the PT Vacation Earnings Code (515) is
!defined in ADDL_PAY_ERNCD table. If there is, inserts a row in 
!ADDL_PAY_EFFDT with next pay begin date as the effective date. Otherwise,
!inserts the earning code 515 in the ADDL_PAY_ERNCD and also a row with
!effective date equal to next pay begin date in ADDL_PAY_EFFDT.
!*********************************************************************
begin-procedure check-existing-vac-erncd
!***********************************************************************

#debug9 Show 'check-existing-vac-erncd'
  move 'N' to $found

begin-select on-error=sql-error-found
'K'
  move 'Y' to $found
  show 'Doing insert-new-effdt'
  do insert-new-effdt

FROM   PS_ADDL_PAY_ERNCD K
WHERE  K.EMPLID    = &A.EMPLID
AND    K.EMPL_RCD = &A.EMPL_RCD
AND    K.ERNCD     = '515'
end-select

  if $found = 'N'
    show 'Doing insert-Vac-erncd'
    do insert-Vac-erncd
    show 'Doing insert-new-effdt'
    do insert-new-effdt
  end-if
end-procedure


!***********************************************************************
Begin-Procedure Insert-Vac-Erncd
!***********************************************************************

#debug9 Show 'Insert-Vac-Erncd'
  begin-sql on-error=sql-error-found
    INSERT INTO PS_ADDL_PAY_ERNCD
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                RECORD_SOURCE)                   
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '515',
                'O')
  end-sql
end-procedure


!***********************************************************************
Begin-Procedure Insert-new-effdt
!***********************************************************************

#debug9 Show 'Insert-new-effdt'
  begin-sql on-error=sql-error-found
    INSERT INTO PS_ADDL_PAY_EFFDT
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                EFFDT,
                RECORD_SOURCE)                  
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '515',
                $AsOfDate,		
                'O')
  end-sql
end-procedure


!***********************************************************************
Begin-Procedure Select-Curr-Addl-Pay
!***********************************************************************

#debug9 Show '-- In Select-Curr-Addl-Pay Step --'
  
begin-select on-error=sql-error-found
XX.OTH_PAY
XX.GOAL_AMT

  #debug8 show 'XX.OTH_PAY and XX.GOAL_AMT ' &XX.OTH_PAY ' ' &XX.GOAL_AMT
 
  let $curr_addl_found = 'Y'
  if &XX.OTH_PAY > 0
     let #curr_wks_check = floor(&XX.GOAL_AMT / &XX.OTH_PAY)
  end-if

FROM PS_ADDL_PAY_DATA XX
WHERE  XX.EMPLID         = &A.EMPLID
AND    XX.EMPL_RCD       = &A.EMPL_RCD
AND    XX.EFFDT = 
       (SELECT MAX(EFFDT) FROM PS_ADDL_PAY_DATA
        WHERE XX.EMPLID = EMPLID
          AND XX.EMPL_RCD = EMPL_RCD
          AND XX.ERNCD = ERNCD
          AND EFFDT <= $AsOfDate)
AND    XX.ERNCD          = '515'
end-select
end-procedure


!***********************************************************************
Begin-Procedure Select-existing-Addl-Pay
!***********************************************************************

#debug9 Show 'Select-existing-Addl-Pay'
  let $year_begin_dt = '01-JAN-'
  concat $AsOfYYYY with $year_begin_Dt

  show '$year_begin_dt ' $year_begin_dt

  let $existing_addl_pay = 'N'

begin-select on-error=sql-error-found
I5.EMPLID
I5.EMPL_RCD
I5.ERNCD
I5.EFFDT
I5.ADDL_SEQ
I5.DEPTID
I5.JOBCODE
I5.POSITION_NBR
I5.ACCT_CD
I5.GL_PAY_TYPE
I5.ADDL_PAY_SHIFT
I5.OTH_HRS
I5.HOURLY_RT
I5.OTH_PAY
I5.ADDLPAY_REASON
I5.SEPCHK
I5.EARNINGS_END_DT
I5.GOAL_AMT
I5.GOAL_BAL
I5.OK_TO_PAY
I5.DISABLE_DIR_DEP
I5.PRORATE_ADDL_PAY
I5.PRORATE_CUI_WEEKS
I5.PAY_PERIOD1
I5.PAY_PERIOD2
I5.PAY_PERIOD3
I5.PAY_PERIOD4
I5.PAY_PERIOD5
I5.STATE
I5.LOCALITY
I5.TAX_PERIODS
I5.TAX_METHOD
I5.ADDL_PAY_FREQUENCY
I5.DED_TAKEN
I5.DED_SUBSET_ID
I5.DED_TAKEN_GENL
I5.DED_SUBSET_GENL
I5.PLAN_TYPE
I5.BUSINESS_UNIT
I5.COMP_RATECD

  let $existing_addl_pay = 'Y'
  let #goal_bal = &I5.GOAL_BAL
	
  If $Mstr_Cntrct_Nrml = 'N'		
        add &I5.GOAL_AMT to #year_Vac_amt
  End-If				
  
FROM   PS_ADDL_PAY_DATA I5
WHERE  I5.EMPLID         = &A.EMPLID
AND    I5.EMPL_RCD      = &A.EMPL_RCD
AND    I5.EFFDT          =
      (SELECT MAX(EFFDT)
       FROM   PS_ADDL_PAY_DATA
       WHERE  EMPLID     = I5.EMPLID
       AND    EMPL_RCD  = I5.EMPL_RCD
       AND    EFFDT     >= $year_begin_dt
       AND    ERNCD      = I5.ERNCD)
AND    I5.ERNCD          = '515'
end-select
end-procedure


!***********************************************************************
Begin-Procedure Insert-Addl-Pay-Data
!***********************************************************************
#debug9 Show 'Insert-Addl-Pay-Data'
 show '&A.EMPLID              :'  &A.EMPLID
 show '&A.EMPL_RCD            :' &A.EMPL_RCD
 show '$AsOfDate              :' $AsOfDate
 show '#avg_weekly_hrs_worked :' #avg_weekly_hrs_worked
 show '#vac_hourly_rt         :' #vac_hourly_rt
 show '#week_vac_amt          :' #week_vac_amt
 show '#year_vac_amt          :' #year_vac_amt
 show '#GOAL_BAL              :' #GOAL_BAL
  begin-sql on-error=sql-error-found
    INSERT INTO PS_ADDL_PAY_DATA
               (EMPLID,
                EMPL_RCD,
                ERNCD,
                EFFDT,
                ADDL_SEQ,
                DEPTID,
                JOBCODE,
                POSITION_NBR,
                ACCT_CD,
                GL_PAY_TYPE,
                ADDL_PAY_SHIFT,
                OTH_HRS,
                HOURLY_RT,
                OTH_PAY,
                ADDLPAY_REASON,
                SEPCHK,
                EARNINGS_END_DT,
                GOAL_AMT,
                GOAL_BAL,
                OK_TO_PAY,
                DISABLE_DIR_DEP,
                PRORATE_ADDL_PAY,
                PRORATE_CUI_WEEKS,
                PAY_PERIOD1,
                PAY_PERIOD2,
                PAY_PERIOD3,
                PAY_PERIOD4,
                PAY_PERIOD5,
                STATE,
                LOCALITY,
                TAX_PERIODS,
                TAX_METHOD,
                ADDL_PAY_FREQUENCY,
                DED_TAKEN,
                DED_SUBSET_ID,
                DED_TAKEN_GENL,
                DED_SUBSET_GENL,
                PLAN_TYPE,
		BUSINESS_UNIT,
		COMP_RATECD,
                RECORD_SOURCE)                   
        VALUES (&A.EMPLID,
                &A.EMPL_RCD,
                '515',
                $AsOfDate,		
                1,
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                #avg_weekly_hrs_worked,		!OTH_HRS
                #vac_hourly_rt,			!HOURLY_RT
                #week_vac_amt,                  !OTH_PAY
                ' ',
                0,                              !SEPCHK
                '',
                #year_vac_amt,			!GOAL_AMT
                #GOAL_BAL,                 
                'N',			  
                ' ',
                ' ',
                ' ',
                'N',
                'N',
                'N',
                'N',
                'N',
                ' ',
                ' ',
                0,
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
                ' ',
	        'STDBU',  
		' ',
                'O')                            
  end-sql
end-procedure


!*********************************************************************
!This procedure checks if there is any unused vacation in the current 
!year for the employees who are retired or terminated during the current
!pay period.
!*********************************************************************
Begin-Procedure check-unused-vacation
!*********************************************************************

#debug9 Show 'check-unused-vacation'
  let #vac_bal = 0

  move '31-DEC-' to $RFL_date
  concat $AsOfYYYY with $RFL_date
  move '01-JAN-' to $start_date
  concat $AsOfYYYY with $start_date

  show 'Parameters ' $Start_date ' ' $RFL_date

Begin-Select on-error=sql-error-found
I1.EMPLID 
I1.EMPL_RCD 
I1.EFFDT 
I1.ERNCD 
I1.GOAL_AMT
I1.GOAL_BAL
    
  move &I1.GOAL_AMT to #vac_awarded
  move &I1.GOAL_BAL to #vac_taken

  let #vac_bal = #vac_awarded - #vac_taken

FROM   PS_ADDL_PAY_DATA I1
WHERE  I1.EMPLID         = &A3.EMPLID
AND    I1.EMPL_RCD      = &A3.EMPL_RCD
AND    I1.EFFDT          =
      (SELECT MAX(EFFDT)
       FROM   PS_ADDL_PAY_DATA
       WHERE  EMPLID     = I1.EMPLID
       AND    EMPL_RCD  = I1.EMPL_RCD
       AND    EFFDT     >= $Start_date
       AND    EFFDT     <= $RFL_date
       AND    ERNCD      = I1.ERNCD)
AND    I1.ERNCD          = '515'
AND   (I1.GOAL_AMT - I1.GOAL_BAL) > 0
end-select
end-procedure

!*********************************************************************
!This procedure prints the employee's payout report who are retired
!or terminated during the current pay period.
!*********************************************************************
Begin-Procedure Print-Payout-Report
!*********************************************************************

#debug9 Show 'Print-Payout-Report'
	show 'printing Print-Payout-Report'
use-report Vacation-Payout-Report

  print &A3.EMPLID (+1,1) !edit xxx-xx-xxxx ! GEX_SEC_REENG 2015-06-24 Vahini Katta 
  print &P3.NAME   (,20) 
  print &A3.ACTION (,50)
  print &A3.EFFDT  (,65)
  print #vac_bal   (,80) 

use-report report-log
end-procedure



!*********************************************************************
Begin-Procedure Print-Balance-Report
!*********************************************************************

#debug9 Show 'Print-Balance-Report'
	Show 'Print-Balance-Report'
use-report Balance-Report
  if $dept_changed='Y'
     new-page
  else 
     let $dept_changed='N'
  end-if

  print &A.EMPLID  (+1,1) !edit xxx-xx-xxxx ! GEX_SEC_REENG 2015-06-24 Vahini Katta 
  print &PD.NAME   (,20) 
  print &A.ACTION  (,50)
  print &A.EFFDT   (,65)
  print #week_vac_amt (,85)
  print #year_vac_amt (,100)

use-report report-log
end-procedure


!*********************************************************************
begin-procedure SQL-Error-Found
!*********************************************************************

#debug9 Show 'SQL-Error-Found'
  show 'In SQL-Error-Found '  $EmplId
  let $EmplId_1st3 = substr($EmplId,1,3)
  let $EmplId_mid2 = substr($EmplId,4,2)
  let $EmplId_last4 = substr($EmplId,6,4)
 
  String $EmplId_1st3 $EmplID_mid2 $EmplId_last4 by '-' into $EmplId11

  move 'Y' to $ErrorFound
  do Format-Number(#InputTran, $out, '99999')
  print $out         (+1,1)
  !print $EmplID11    (,18) !GEX_SEC_REENG 2015-04-29 Vahini Katta
  print $EmplID      (,18)  !GEX_SEC_REENG 2015-04-29 Vahini Katta
  print $sql-error   (,35) 
end-procedure


!*********************************************************************
begin-procedure Get-Company-Data
!*********************************************************************

  if rtrim($prev_cmpy,' ') = ''
    move '' to $CompanyName
    goto GetCompanyExit
  end-if
  if $AsOfDate = ''  !if no As-Of-Date is specified, default to Today
    move $AsOfToday to $AsOfDate
  end-if
	show '$prev_cmpy ' $prev_cmpy
	show '$AsOfDate ' $AsOfDate

begin-SELECT
CT.DESCR

FROM  PS_COMPANY_TBL CT
WHERE CT.COMPANY = $prev_cmpy
  AND CT.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_COMPANY_TBL
       WHERE  COMPANY = $prev_cmpy
         AND  EFFDT  <= $AsOfDate)
end-SELECT

     let $CompanyName      = rtrim(&CT.Descr,' ')

GetCompanyExit:
    
end-procedure


!*********************************************************************
begin-procedure Get-Department-Name
!*********************************************************************

  move '' to $DeptName
  
  if Rtrim($prev_deptid,' ') = ''
    goto GetDptNmExit
  end-if

  if $AsOfDate = ''
    move $AsOfToday to $AsOfDate
  end-if

!	show 'Parameters ' $prev_deptid ' '  $AsOfDate

begin-SELECT
X.DESCR

  let $DeptName      = Rtrim(&X.DESCR,' ')
  
FROM  PS_DEPT_TBL X
WHERE X.DEPTID = $prev_deptid
 AND X.EFFDT <= $AsOfDate
 AND X.EFFDT  =
       (SELECT MAX(EFFDT)
        FROM   PS_DEPT_TBL
        WHERE  DEPTID = X.DEPTID
        AND  EFFDT <= $AsOfDate)
end-SELECT

GetDptNmExit:

end-procedure

!*********************************************************************
#Include 'gexxx922.sqc'  !Get GEX_RC_PAY run control parameters
!#include 'gexxx970.sqc'  !Get multiple deptid/jobcode row table
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getdatcd.sqc'  !Retrieves the asofyear, asofmonth etc.,
#Include 'datetime.sqc'  !Routines for date and time formatting
#include 'askaod.sqc'    !Ask-As-Of-Date routine
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#include 'gexregtp.sqc'  !Translates the REG_TEMP to Full_Part_time
#include 'gexxx913.sqc'  !Union_cd 
#include 'gexxx900.sqc'  !Company
#include 'gexrehdt.sqc'	 