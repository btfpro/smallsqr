!***********************************************************************
! GEXPYHBO: This program updates PS_GEX_HRS_BAL after the off-cycle    *
!           checks are confirmed.                                      *    
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *        
!***********************************************************************
!  T.45.0790          CJH       04/18/2001     INITIAL CREATION        * 
!                                     (based on hrs_bal logic in       *
!                                      gexpyoto)                       *
!  GEX-Chandra  09/11/2007  SQR retrofitted			       *
! Surya Sobha	       11/01/2015              Increased the array size*
!					       for BPinfo array        *
! GEX_SEC_REENG 2016-06-07 Vahini Katta                                 
! Changes related to gex_emplid_mapp/7 digit emplid                     
!***********************************************************************

#include 'setenv.sqc' !Set environment
begin-setup

!#include 'setupdb.sqc'
#include 'setup32a.sqc'


declare-report Report-log
Printer-Type=HPLASERJET
   layout=DEFAULT
end-declare

end-setup

!*********************************************************************
!Initial processing, retrieving current dates and calls the main 
!procedure to do the processing.                                     
!*********************************************************************
begin-report

  do Alter-Session   ! Set Session to RULE Optimizer
  use-report Report-log
  do Init-DateTime
  do Init-Number
  do stdapi-init
  
  move 'GEXPYHBO' to $ReportID
  move 'Giant Eagle Pension/Legal Aid Hours Balance Update for Off-Cycles' to $ReportTitle

  do Get-Current-DateTime
  do Report

  do Commit-Transaction
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term

end-report

!*********************************************************************
!If this Program is being executed through process scheduler, 
!the run control parameters and calls the main processing procedure.
!Otherwise, interrogates the user for the run control parameters and 
!validates them. If the run control parameters are invalid, stops the
!execution.
!*********************************************************************
begin-procedure Report
    let #InputTran = 0
  let #j = 1
  display $AsOfToday

  !let #array_size = 300
  let #array_size = 400 !Surya Sobha - 11012015 - changed from 300 to 400 Case number 01769716
  
  CREATE-ARRAY name=BPinfo size=400 !Surya Sobha - 11012015 - changed the array size from 300 to 400 Case number 01769716
      field=BP:char
      field=EFFDT:char
      field=PLAN_TYPE:char
      field=OPTION_ID:char
      field=BENEFIT_PLAN:char
      field=DEDCD:char
      field=COST_ID:char
      field=RATE_TYPE:char
      field=RATE_TBL_ID:char
      field=ERNCD_SPCL:char
      field=GEX_RATE_AMT:number
      field=GEX_WEEK_HRS_CAP:number
      field=GEX_YEAR_HRS_CAP:number
  Do Get-Pay-End
  do load-array
  display 'Benefit Program Array Load - complete'
  do edit-pay-calendar
  
  date-time () hh:mi:ss &timeProcess
  display #InputTran 99999 noline
  display ' Transactions Processed: ' noline
  display &timeProcess

end-procedure


!************************************************************************
!*
!************************************************************************
begin-procedure Edit-Pay-Calendar
  move 'N' to $Found_cal
begin-select 
Y1.COMPANY
Y1.PAYGROUP
Y1.PAY_END_DT 
Y1.pay_begin_dt 
Y1.CHECK_DT

  move 'Y' to $Found_cal

  move &Y1.PAY_END_DT to $pay_end_dt
  move &Y1.PAY_BEGIN_DT TO $pay_begin_dt
  move &Y1.company to $company
  move &y1.paygroup to $paygroup
  move &Y1.check_dt to $cal_check_dt

  display 'Company / Paygroup : ' noline
  display $company noline
  display ' / ' noline
  display $paygroup
  display 'Pay End Date: ' noline
  display $pay_end_dt noline
  display ' Begin at: ' noline
  display $asofnow

  do process-employee-data

  FROM PS_PAY_CALENDAR Y1
where Y1.PAY_SHEETS_RUN = 'Y'
  AND Y1.PAY_CONFIRM_RUN = 'N'
  AND Y1.PAY_END_DT = &Z1.PAY_END_DT
end-select

  if $Found_cal = 'N'
    display 'Error --  Pay Calendar not found or not setup for the Run ID.'
    move ' ' to $SlctCompany
  end-if

end-procedure


!*********************************************************************
!Gets the Pay End Date to process for
!*********************************************************************
begin-procedure Get-Pay-End
begin-select LOOPS=1
Z1.PAY_END_DT 

 display 'Pay End Date: ' noline
 display &Z1.PAY_END_DT

FROM PS_PAY_CALENDAR Z1
where Z1.PAY_SHEETS_RUN = 'Y' 
  AND Z1.PAY_CONFIRM_RUN = 'N'
  AND Z1.PAY_END_DT = (select max(z11.pay_end_dt) from ps_pay_calendar z11
                       where z11.company = z1.company
                         and z11.paygroup = z1.paygroup
                         and Z11.PAY_SHEETS_RUN = 'Y'
                         AND Z1.PAY_CONFIRM_RUN = 'N'
                         and z11.pay_end_dt <= SYSDATE)
end-select
end-procedure

!*********************************************************************
!Prints the header information in the report log.
!*********************************************************************
begin-heading 8 for-reports=(report-log)

 #Include 'stdhdg01.sqc'

  position (+1)
  print 'Report Log' () center bold

  position (+2)
  print 'Trans#' (,1) bold
  print 'Emplid' (,18) bold
  print 'Message' (,50) bold
  print '-' (+1,1,127) fill
 
end-heading


!*********************************************************************
!Prints the footer in the report log
!*********************************************************************

begin-footing 2 for-reports=(Report-log)
page-number (1,108) 'Page '  
last-page () ' of ' '.'

end-footing

!************************************************************************
Begin-Procedure Load-Array

begin-select on-error=sql-error-found('Load-Benefit-Info')
AA1.BENEFIT_PROGRAM
AA1.EFFDT
AA3.OPTION_ID
AA3.BENEFIT_PLAN
AA3.PLAN_TYPE
AA3.DEDCD
AA4.COST_ID
AA4.RATE_TYPE
AA4.RATE_TBL_ID
AA5.ERNCD_SPCL
AA5.GEX_RATE_AMT
AA5.GEX_WEEK_HRS_CAP
AA5.GEX_YEAR_HRS_CAP
AA5.EFFDT

   move &AA1.BENEFIT_PROGRAM to $BP
   move &AA1.EFFDT to $effdt
   move &AA3.OPTION_ID to $option_id
   move &AA3.BENEFIT_PLAN to $benefit_plan
   move &AA3.PLAN_TYPE to $plan_type
   move &AA3.DEDCD to $dedcd
   move &AA4.COST_ID to $cost_id
   move &AA4.RATE_TYPE to $rate_type
   move &AA4.RATE_TBL_ID to $rate_id
   move &AA5.ERNCD_SPCL to $erncd_spcl
   move &AA5.GEX_RATE_AMT to #gex_rate_amt
   move &AA5.GEX_WEEK_HRS_CAP to #in_week_cap
   move &AA5.GEX_YEAR_HRS_CAP to #in_year_cap

 #debug9 display 'BP / EFFDT : ' noline
 #debug9 display $BP noline
 #debug9 display ' / ' noline
 #debug9 display $effdt

 put $BP $effdt $option_id $benefit_plan $plan_type $dedcd $cost_id -
     $rate_type $rate_id $erncd_spcl #gex_rate_amt #in_week_cap #in_year_cap into BPinfo(#j)

 let #j = #j + 1
 
from PS_BEN_DEFN_PLAN AA1,
     PS_BEN_DEFN_OPTN AA3,
     PS_BEN_DEFN_COST AA4,
     PS_GEX_FLAT_RATE AA5
where AA1.EFFDT = (select max(BBB1.effdt) from ps_ben_defn_plan BBB1
                        where BBB1.benefit_program = AA1.benefit_program and
                              BBB1.effdt <= &Z1.PAY_END_DT) and
      AA1.BENEFIT_PROGRAM = AA3.BENEFIT_PROGRAM and
      AA1.EFFDT = AA3.EFFDT and
      AA1.PLAN_TYPE = AA3.PLAN_TYPE and
      AA3.BENEFIT_PROGRAM = AA4.BENEFIT_PROGRAM and
      AA3.EFFDT = AA4.EFFDT and
      AA3.PLAN_TYPE = AA4.PLAN_TYPE and
      AA3.OPTION_ID = AA4.OPTION_ID and
      AA5.EFFDT = (select max(aaa5.effdt) from ps_gex_flat_rate aaa5
      !GEX-Chandra    FCIL   09/11/07   Begin code
                          !where aaa5.flat_rate_id = AA5.FLAT_RATE_ID
                          where aaa5.RATE_TBL_ID = AA5.RATE_TBL_ID 
     !GEX-Chandra    FCIL   09/11/07   End code
                            and aaa5.sequence_number = AA5.SEQUENCE_NUMBER
                            and aaa5.effdt <= &Z1.PAY_END_DT) and
!GEX-Chandra    FCIL   09/11/07   Begin code                            
      !AA4.RATE_TBL_ID = AA5.FLAT_RATE_ID and
      AA4.RATE_TBL_ID = AA5.RATE_TBL_ID and
!GEX-Chandra    FCIL   09/11/07   End code      
      AA5.GEX_RATE_AMT <> 0 and
      AA4.RATE_TYPE = '2' 
end-SELECT
end-procedure
!************************************************************************
! Select EEs for Pay Period with Pay Lines that have been changed/created
!************************************************************************
Begin-Procedure Process-Employee-Data

move 'N' to $errorfound
move 'N' to $found
let $first = 'Y'
begin-SELECT on-error=sql-error-found('Process-Employee-Data')
L.COMPANY
L.PAYGROUP
L.PAY_END_DT
L.OFF_CYCLE
L.PAGE_NUM
L.LINE_NUM
L.EMPL_RCD
L.EMPLID
D.SEPCHK
D.PLAN_TYPE
D.BENEFIT_PLAN
D.DED_CLASS
D.DED_CUR
D.DEDCD

  let #contrib_hrs = 0

  if &D.DED_CLASS = 'N'
     do Get-Benefit-Info     
     if $plan_found = 'Y'
        move &D.DED_CUR to #ded_cur
        display 'GEX rate amount: ' noline
        display #array_gex_rate_amt
        let #contrib_hrs = #ded_cur / #array_gex_rate_amt
        display 'Contrib Hrs: '  noline
        display #contrib_hrs
        if $plan_type = '1X'
           if #ded_cur < 0
              do get-vac-hrs-neg
           else
              do get-vac-hrs-pos
           end-if
        else
           let #vac_hrs = 0   
        end-if  
        do check-hrs-bal
        do insert-hrs-bal
      end-if
   end-if        
 
from ps_pay_line L,
     ps_pay_deduction D
where L.COMPANY = $company
 and L.PAYGROUP = $paygroup
 and L.PAY_END_DT = $pay_end_dt 
 and L.OFF_CYCLE = 'Y'
 and L.CONFIRMED = 'Y'
 and L.Company = D.Company
 and L.Paygroup = D.Paygroup
 and L.Pay_End_dt = D.Pay_End_dt
 and L.Off_cycle = D.Off_cycle
 and L.PAGE_NUM = D.PAGE_NUM
 and L.LINE_NUM = D.LINE_NUM
 and D.ded_class = 'N'

order by L.EMPLID, L.EMPL_RCD
end-SELECT

move #InputTran to #co_count
display #co_count 99999 noline
display ' Employees Processed'
display ' '
let #co_count = 0

end-procedure

!************************************************************************
!Retrieves active benefit plan/option/cost for options w/flat rate costs
!************************************************************************ 

begin-procedure Get-Benefit-Info
move 'N' to $errorfound
move 'N' to $plan_found

 add +1 to #InputTran
 display '-- Process Employee : ' noline
 display &L.emplid noline
 display ' / ' noline
 display &L.empl_rcd noline
 display ' Start: ' noline
 date-time () hh:mi:ss &starttime
 display  &starttime 

 let #i = 1
 while 1

  get $BP $effdt $option_id $benefit_plan $plan_type $dedcd $cost_id -
      $rate_type $rate_id $erncd_spcl #array_gex_rate_amt #array_week_cap -
      #array_year_cap from BPinfo(#i)

   if (&D.BENEFIT_PLAN = $benefit_plan) and (&D.PLAN_TYPE = $plan_type) and (&D.DEDCD = $dedcd)
      move 'Y' to $plan_found
      break 
   end-if

   let #i = #i + 1
 
   if #i = #array_size

      move 'N' to $plan_found
      break
   end-if
 
 end-while

 
end-procedure

!*********************************************************************
!Inserts a row into the GEX_HRS_BAL table for EE
!*********************************************************************
begin-procedure insert-hrs-bal

  display 'Inserting Hours Bal'
begin-sql on-error=sql-error-found('insert-hrs-bal-row')
insert into PS_GEX_HRS_BAL
(COMPANY,
PAYGROUP,
PAY_END_DT,
OFF_CYCLE,
PAGE_NUM,
LINE_NUM,
ADDL_NBR,
SEPCHK,
EMPLID,
EMPL_RCD,
REQUEST_DT,
CHECK_DT,
PLAN_TYPE,
BENEFIT_PLAN,
TOTAL_HRS,     ! TOTAL HOURS are capped weekly/yearly + vacation
               ! CONTRIBUTION calculated using TOTAL HOURS
VACN_HOURS)    ! VACATION HOURS are ONLY vacation (capped w/yearly cap if applicable)
VALUES
(&L.COMPANY,
&L.PAYGROUP,
&L.PAY_END_DT,
&L.OFF_CYCLE,
&L.PAGE_NUM,
&L.LINE_NUM,
0,
&D.SEPCHK,
&L.EMPLID,
&L.EMPL_RCD,
$cal_check_dt,    !Request Dt and Check Dt will be equal for on-cycle 
$cal_check_dt,
$PLAN_TYPE,
$BENEFIT_PLAN,
#contrib_hrs,
#vac_hrs)
end-sql
end-procedure
!********************************************************************
begin-procedure get-vac-hrs-pos
 let #vac_hrs = 0
begin-SELECT
sum(PO.OTH_HRS) &vac1

  move &vac1 to #vac_hrs
  display 'Vacation hrs: ' noline
  display #vac_hrs
 
from ps_pay_oth_earns PO,
     ps_pay_earnings P1
where P1.COMPANY = $Company
and P1.PAYGROUP = $Paygroup
and P1.PAY_END_DT = $Pay_end_dt
and P1.OFF_CYCLE = 'Y'
and P1.PAGE_NUM = &L.PAGE_NUM
and P1.LINE_NUM = &L.LINE_NUM
and P1.EMPLID    = &L.EMPLID
and P1.EMPL_RCD = &L.EMPL_RCD
and P1.COMPANY = PO.COMPANY
and P1.PAYGROUP = PO.PAYGROUP
and P1.PAY_END_DT = PO.PAY_END_DT
and P1.OFF_CYCLE = PO.OFF_CYCLE
and P1.PAGE_NUM = PO.PAGE_NUM
and P1.LINE_NUM = PO.LINE_NUM
and P1.ADDL_NBR = PO.ADDL_NBR
and P1.OK_TO_PAY = 'Y'
and PO.ERNCD in ('513','515','519','522','523')
group by P1.COMPANY, P1.PAYGROUP, P1.PAY_END_DT, P1.OFF_CYCLE, P1.EMPLID, P1.EMPL_RCD
end-SELECT
end-procedure
!********************************************************************
begin-procedure check-hrs-bal

begin-SELECT
'X'

  let #vac_hrs = 0
  display 'Hrs Bal row already found for this vacn amount'

from ps_gex_hrs_bal GHB
where GHB.company = &L.COMPANY
  and GHB.paygroup = &L.paygroup
  and GHB.pay_end_Dt = &L.pay_end_dt
  and GHB.off_cycle = &l.off_cycle
  and GHB.emplid = &L.emplid
  and GHB.empl_rcd = &l.empl_rcd
  and GHB.plan_type = $plan_type
  and GHB.benefit_plan = $benefit_plan
  and GHB.vacn_hours = #vac_hrs

end-SELECT
end-procedure

!********************************************************************
begin-procedure get-vac-hrs-neg
 let #vac_hrs = 0
begin-SELECT
sum(PO.OTH_HRS) &vac

  move &vac to #vac_hrs
  display 'Vacation hrs: ' noline
  display #vac_hrs
 
from ps_pay_oth_earns PO,
     ps_pay_earnings P1
where P1.COMPANY = $Company
and P1.PAYGROUP = $Paygroup
and P1.PAY_END_DT = $Pay_end_dt
and P1.OFF_CYCLE = 'Y'
! get all vacation across all separate checks for posting pay period...otherwise, we would only
! be selecting from the original on-cycle check (which usually does not have vac on it).
!and P1.PAGE_NUM = &L.PAGE_NUM
!and P1.LINE_NUM = &L.LINE_NUM
and P1.EMPLID    = &L.EMPLID
and P1.EMPL_RCD = &L.EMPL_RCD
and P1.COMPANY = PO.COMPANY
and P1.PAYGROUP = PO.PAYGROUP
and P1.PAY_END_DT = PO.PAY_END_DT
and P1.OFF_CYCLE = PO.OFF_CYCLE
and P1.PAGE_NUM = PO.PAGE_NUM
and P1.LINE_NUM = PO.LINE_NUM
and P1.ADDL_NBR = PO.ADDL_NBR
and PO.OTH_HRS < 0
and P1.OK_TO_PAY = 'Y'
and PO.ERNCD in ('513','515','519','522','523')
group by P1.COMPANY, P1.PAYGROUP, P1.PAY_END_DT, P1.OFF_CYCLE, P1.EMPLID, P1.EMPL_RCD
end-SELECT
end-procedure

!********************************************************************
!This procedure displays in the error report if there are any sql erros
!happened in the program
!********************************************************************

begin-procedure SQL-Error-Found($Proc_Name) 
  do error-found
  display 'SQL Error in ' noline
  display $Proc_Name   
  display 'sql_error: ' noline
  display $_sql-error  
  display 'sql_status: ' noline
  display #_sql-status  
  stop

end-procedure

!*********************************************************************
!This procedure displays the error message for the records that are in
!progress
!*********************************************************************

begin-procedure Error-Found
  move 'Y' to $ErrorFound
  use-report report-log
  do Format-Number(#InputTran, $out, '99999')
  print $out (+1,1)
  ! GEX_SEC_REENG 2016-06-07 Vahini Katta Begins
  !let $EmplId_1st3 = substr($EmplId,1,3)
  !let $EmplId_mid2 = substr($EmplId,4,2)
  !let $EmplId_last4 = substr($EmplId,6,4)
 
  !String $EmplId_1st3 $EmplID_mid2 $EmplId_last4 by '-' into $EmplId11

  !print $EmplID11 (,16)
  print $EmplID   (,16)
  ! GEX_SEC_REENG 2016-06-07 Vahini Katta Ends
end-procedure

!**********************************************************************
#include 'gexaltse.sqc'  ! Alter session SQC
#include 'gexxx922.sqc'  ! Process Scheduler run control procedure
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Date Arithmetic functions
#Include 'number.sqc'    !Routines to format numbers
#Include 'payrnctl.sqc'  !Select-Parameters
#Include 'payinit.sqc'   !Pay init
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
