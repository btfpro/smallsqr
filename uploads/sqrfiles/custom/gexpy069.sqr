!************************************************************************
! GEXPYPEX:   This reports employees with professional experience months
!	(attached to service months to put them in a higher step than their 
!	eligible step in their salary plan) and due for their step increase
!	in next week. These employee's step should be handled manually by
!	stores, otherwise, salary admin will put these employees in their
!	corresponding eligible step as per their service in that grade
!	without considering their professional experience months.
!************************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *        
!***********************************************************************
!GPYC028    SXK        10/22/1998     INITIAL CREATION
!	    SXK        05/04/1999     Modified to convert pay begin and
!					pay end date to dtu format
!	    SXK        07/09/1999     Modified to pick only employees that
!					have their current step greater than
!					thier normal step would have been
!					
!	    SXK        07/28/1999     Modified to look for employees
!					that were hired after cut off date
!	    SXK        04/03/2000     Modified to look for service date
!					if rehire date is after cut off date
!           CJH        02/01/2001     add setid to join criteria for 
!                                       ps_sal_step_Tbl
! GEX ISDVNPK 03/25/2008 for rehire dt issue in 9.0
! GEX_SEC_REENG 2015-06-24 Vahini Katta                                *
! Changes related to gex_emplid_mapp/7 digit emplid                    *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup02.sqc'

begin-report

  do Init-DateTime
  do Init-Number
  do stdapi-init
  move 'GEXPYPEX' to $ReportID
  move 'Employees with professional experience and due for step increase' 
    to $ReportTitle
  display $ReportTitle

  do Get-Current-DateTime

  let $reportdate_mm = substr($reportdate,1,2)
  let $reportdate_dd = substr($reportdate,4,2)
  let $reportdate_yy = substr($reportdate,7,2)
  do MakeYear4Digits ($reportdate_yy)
  let $reportdate_ccyy = $reportdate_yy||'-'||$reportdate_mm||'-'||$reportdate_dd
  do Convert-From-DTU-Date($reportdate_ccyy, $reportdate_dbf)
  move $reportdate_dbf to $rnctl_date
  do report

  do Commit-Transaction
  do stdapi-term
  !*do Reset
!**********************************************************************************
end-report

!************************************************************************

begin-procedure Report

 move 'N' to $Errorfound
 move 'N' to $cal_error
 let #inputtran = 0
 let #dept_count = 0
 do select-pay-calendar 

  If $prcs_process_instance = ''
    do P110-Get-Parms
  Else

    Let $GEXXX901_Company_Alias  = 'E.COMPANY'
    Let $GEXXX901_Paygroup_Alias = 'E.PAYGROUP'
    Do GEXXX901-Select-Company-Paygroup-Parameters
    Let $GEXXX902_Deptid_Alias = 'E.DEPTID'
    Do GEXXX902-Select-Deptid-Parameters 

    Let $AsOfDate = $prev_pay_end_dt
    Let $X000_WHERE_SELECT_ASOFDATE = $prev_pay_end_Dt
  End-If

  Do Format-DateTime($X000_WHERE_SELECT_ASOFDATE, $X000_REPORT_HEADING_ASOFDATE, {DEFDATE}, '', '')

  Let $X000_ORDER_BY = 'Order by e.company, e.deptid, c.name '
  Let $Sort_Display = 'Company, DeptID, Name'

  Show '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA ='   $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA
  Show '$GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA ='   $GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA
  Show '$X000_WHERE_SELECT_ASOFDATE ='   $X000_WHERE_SELECT_ASOFDATE

!  Do P150-Print-Cover-Page

 if $errorfound = 'N'
   !SXK 07/28/1999 Begin
   let $cut_off_date = '1999-03-28'
  do convert-from-dtu-date($cut_off_date,$cut_off_date_dbf)
   !SXK 07/28/1999 End
   do process-employee-data
 end-if

Report-Exit:

  date-time () hh:mi:ss &timeProcess
  display #InputTran 99999 noline
  display ' Total Employees Processed'
!  display &timeProcess

end-procedure


Begin-Procedure P110-Get-Parms
#debug9 Show 'P110-Get-Parms'


  Let $GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA = '1=1' 
  Let $GEXXX902_INCLUDE_DEPTID_CRITERIA = '1=1' 
  Let $X000_WHERE_SELECT_ASOFDATE                 = $prev_pay_end_Dt
End-Procedure


begin-heading 8

 move 'Employees with professional experience and due for step increase' to $ReportTitle
 #Include 'stdhdg01.sqc'

 position (-1)
 move 'for pay week beginning' to $line2
 string $line2 $pay_begin_dt by ' ' into $line2_desc
 print $line2_desc () center bold
 position (+1)
  move $prev_company to $company
  do get-company-desc
  if rtrim($company_desc,' ') <> ''
   print $company_desc () center bold
  end-if
 
  position (+2)
  print 'EMPLID' (,1) bold
  print 'NAME' (,15) bold
  print 'DEPTID' (,50) bold
  print 'SALARY PLAN' (,60) bold
  print 'GRADE' (,75) bold
  print 'GRADE ENTRY DATE' (,85) bold
  print 'STEP' (,105) bold
  print 'SERVICE DATE' (,115) bold
  print 'HOURLY RATE' (,135) bold
  print '-' (+1,1,176) fill
 
end-heading

begin-procedure P150-Print-Cover-Page
#debug9 Show 'P150-Print-Cover-Page'

  Print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'            (+5,1)
  Print '$Prcs_OPRID          ='                                  (+2,5)
  Print $Prcs_OPRID                                               (0,+2)
  Print '$PRCS_RUN_CNTL_ID    ='                                  (+1,5)
  Print $PRCS_RUN_CNTL_ID                                         (0,+2)

  Print 'SELECTION CRITERIA FOR THIS REPORT RUN:'                 (+5,2)

  Print '$GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA ='   (+1,5)
  Print $GEXXX901_INCLUDE_COMPANY_PAYGROUP_DISPLAY_CRITERIA       (0,+2)

  Print '$GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA ='   (+1,5)
  Print $GEXXX902_INCLUDE_DEPTID_DISPLAY_CRITERIA       (0,+2)

  Print 'Pay End Dt :'                                        (+2,5)
  Print $X000_REPORT_HEADING_ASOFDATE                         (0,+2)
 
  Print 'SORT ORDER FOR THIS REPORT RUN:'                     (+5,2)
  Print $X000_ORDER_BY                                        (+2,5)

  Let #PAGE-COUNT = 0
  NEW-PAGE
  Let #PAGE-COUNT = 1
End-Procedure



!******************************************************************
!This procedure selects pay calendar details
!******************************************************************

begin-procedure select-pay-calendar

let $found = 'N'

begin-select on-error=sql-error-found('Select-Pay-Calendar')
A1.COMPANY
A1.PAYGROUP
A1.PAY_END_DT
A1.CHECK_DT

   move &A1.PAY_END_DT to $prev_pay_end_dt

   do get-next-pay-end-date
   let $found = 'Y'
   display 'Current Pay End Dt:' noline
   display $prev_pay_end_dt
   exit-select

FROM PS_PAY_CALENDAR A1
WHERE A1.PAY_END_DT = (SELECT MAX(PAY_END_DT)
			 FROM PS_PAY_CALENDAR
			WHERE PAY_END_DT <= $AsOfToday
			  AND PAY_SHEETS_RUN = 'Y'
                          AND PAY_CONFIRM_RUN = 'N')
end-select

if $found = 'N'
   let $errorfound = 'Y'
   display 'No Pay End Dt found as of today'
end-if

end-procedure

!******************************************************************
!This procedure selects next pay end date
!******************************************************************

begin-procedure get-next-pay-end-date

move 'N' to $found

begin-select on-error=sql-error-found('Get-Next-Pay-End-Date')
A.PAY_END_DT
A.PAY_BEGIN_DT

   move &A.PAY_END_DT to $pay_end_dt
   move &A.PAY_BEGIN_DT to $pay_begin_dt
   display 'Next PAy End Dt:' noline
   display $pay_end_dt
   !SXK 05/04/1999 Begin
   do convert-to-dtu-date($pay_begin_dt,$pay_begin_dt_dtu)
   do convert-to-dtu-date($pay_end_dt,$pay_end_dt_dtu)
   !SXK 05/04/1999 End
   move 'Y' to $found

FROM PS_PAY_CALENDAR A
WHERE A.COMPANY = &A1.COMPANY
  AND A.PAYGROUP = &A1.PAYGROUP
  AND A.PAY_SHEETS_RUN = 'N'
  AND A.PAY_END_DT = (SELECT MIN(PAY_END_DT)
			FROM PS_PAY_CALENDAR 
		       WHERE COMPANY = &A1.COMPANY
			 AND PAYGROUP = &A1.PAYGROUP
			 AND PAY_SHEETS_RUN = 'N'
                         AND PAY_END_DT > $prev_pay_end_dt)
   
end-select

if $found = 'N' 
  let $errorfound = 'Y'
  display 'No Pay Calendar next to ' noline
  display $prev_pay_end_dt
end-if

end-procedure

!******************************************************************
!This procedure processes employees with legal deductions
!******************************************************************

begin-procedure process-employee-data

 move 'N' to $found

 do select-employees1

end-procedure

!*********************************************************************

begin-procedure select-employees1

move 'N' to $found

begin-select on-error=sql-error-found('Select-Employees1')
E.COMPANY () on-break print=never level=1 save=$prev_company 
E.DEPTID () on-break print=never level=2 save=$prev_dept after=dept-change 
E.EMPLID
   move &E.EMPLID to $emplid
E.EMPL_RCD
   move &E.EMPL_RCD to #empl_rcd
   move 'Y' to $found
! 02/01/2001 - add setid 
E.SETID_DEPT
! 02/01/2001
E.SAL_ADMIN_PLAN
E.GRADE
E.STEP
E.GRADE_ENTRY_DT
E.HOURLY_RT
E1.SERVICE_DT
C.NAME 
  move &c.name to $name

  display $emplid
  do convert-to-dtu-date(&e.grade_entry_dt,$grade_entry_dt_dtu)
  do dtu-diff-months($GRADE_ENTRY_DT_dtu,$pay_end_dt_dtu,#service_months)
  do dtu-diff-months($GRADE_ENTRY_DT_dtu,$pay_begin_dt_dtu,#service_asofbegin_date)
  
  do process-empl-steps


FROM  PS_JOB E, PS_PERSONAL_DATA C, PS_EMPLOYMENT E1
WHERE E.EMPL_STATUS IN ('A','L','P')
  AND E.EMPLID = C.EMPLID
!SXK 07/28/1999 Begin
and ((e1.hire_Dt >= $cut_off_date_dbf)
!SXK 04/03/2000 check for service date if rehire date is after cut off date
! GEX ISDVNPK 03/25/2008 for rehire dt issue in 9.0    
    ! or ((e1.rehire_dt >= $cut_off_date_dbf) and (e1.service_dt >= $cut_off_date_dbf)))
    or (((SELECT JREH.EFFDT FROM PS_JOB JREH WHERE JREH.EMPLID = E.EMPLID AND JREH.EMPL_RCD  = E.EMPL_RCD  AND JREH.EFFDT =
        (SELECT MAX(JREH1.EFFDT) FROM PS_JOB JREH1 WHERE JREH.EMPLID = JREH1.EMPLID AND JREH.EMPL_RCD  = JREH1.EMPL_RCD
          AND JREH1.EFFDT <= $AsOfToday AND JREH1.ACTION = 'REH') 
    AND JREH.EFFSEQ = (SELECT MAX(JREH2.EFFSEQ) FROM PS_JOB JREH2 WHERE JREH.EMPLID = JREH2.EMPLID AND JREH.EMPL_RCD = JREH2.EMPL_RCD
          AND JREH.EFFDT     = JREH2.EFFDT AND JREH2.ACTION      = 'REH')
    AND JREH.EFFDT >=	NVL((SELECT JREHA.EFFDT FROM PS_JOB JREHA WHERE JREHA.EMPLID = JREH.EMPLID AND JREHA.EMPL_RCD  = JREH.EMPL_RCD
    	  AND JREHA.EFFDT = (SELECT MAX(JREHA1.EFFDT) FROM PS_JOB JREHA1 WHERE JREHA.EMPLID = JREHA1.EMPLID
          AND JREHA.EMPL_RCD  = JREHA1.EMPL_RCD AND JREHA1.EFFDT <= $AsOfToday AND JREHA1.ACTION = 'HIR') 
    	  AND JREHA.EFFSEQ = (SELECT MAX(JREHA2.EFFSEQ) FROM PS_JOB JREHA2 WHERE JREHA.EMPLID = JREHA2.EMPLID
          AND JREHA.EMPL_RCD  = JREHA2.EMPL_RCD AND JREHA.EFFDT = JREHA2.EFFDT AND JREHA2.ACTION = 'HIR')), '01-jan-1900')) >= $cut_off_date_dbf) and (e1.service_dt >= $cut_off_date_dbf)))
! GEX ISDVNPK 03/25/2008 for rehire dt issue in 9.0 End
!SXK 07/28/1999 End
  AND [$GEXXX901_INCLUDE_COMPANY_PAYGROUP_CRITERIA]
  AND [$GEXXX902_INCLUDE_DEPTID_CRITERIA]
  AND E.EMPLID = E1.EMPLID
  AND E.EMPL_RCD = E1.EMPL_RCD
  AND E.EFFDT = (select max(effdt)
                   from ps_job
                  where emplid = E.EMPLID
                    and empl_rcd = E.EMPL_RCD
                    and effdt <= $AsOfToday)
  AND E.EFFSEQ = (select max(effseq)
                    from ps_job
                   where emplid = E.EMPLID
                     and empl_rcd = E.EMPL_RCD
                     and effdt = E.EFFDT)
  AND E.GRADE IN (select e1.grade 
                    from ps_sal_step_tbl e1
                   where e1.setid = e.setid_dept
                     and e1.sal_admin_plan = E.SAL_ADMIN_PLAN
                     and e1.GEX_INCR_MNTHS > 0
                     and e1.effdt = (select max(effdt)
                                       from ps_sal_step_tbl
                                      where setid = e1.setid 
                                        and sal_admin_plan = e1.sal_admin_plan
                                        and grade = e1.grade
                                        and effdt <= $AsOfToday))
  AND E.STEP > (select (max(e2.step)+1)  !SXK 07/09/1999 Begin
                  from ps_sal_step_tbl e2
                 where e2.setid = e.setid_dept
                   and e2.sal_admin_plan = E.SAL_ADMIN_PLAN
                   and e2.grade = E.GRADE
                   and e2.step in (select e3.step
                                     from ps_sal_step_tbl e3
                                    where e3.setid = e.setid_dept
                                      and e3.sal_admin_plan = E.SAL_ADMIN_PLAN
                                      and e3.grade = E.GRADE
                                      and e3.gex_incr_mnths > 0
                                      and months_between($pay_end_dt,E.GRADE_ENTRY_DT)
                                          >= e3.GEX_INCR_MNTHS
                                      and e3.effdt = (select max(effdt)
                                                        from ps_sal_step_tbl
                                                       where setid = e3.setid
                                                         and sal_admin_plan = e3.sal_admin_plan                
                                                         and grade = e3.grade
                                                         and effdt <= $AsOfToday)))
ORDER BY E.COMPANY, E.DEPTID, C.NAME
end-select

if $found = 'N'
   let $errorfound = 'Y'
   display 'No Data Selected to report'
end-if

end-procedure

!*********************************************************************
begin-procedure process-empl-steps

begin-select on-error=sql-error-found('Process-Empl-Steps')
D.GEX_INCR_MNTHS
D.STEP

  let $GEX_INCR_MNTHS = &D.GEX_INCR_MNTHS
  unstring $GEX_INCR_MNTHS by '.' into $integer_portion $fraction_portion
  let #integer_portion = to_number($integer_portion)
  let #fraction_portion = to_number($fraction_portion)
  display #service_asofbegin_date
  display #service_months
  if #fraction_portion > 0
     display 'Fraction Found'
     display #fraction_portion
     display &d.step
     let $service_asofbegin_date = to_char(#service_asofbegin_date)
     let $service_months = to_char(#service_months)
     if #service_months = #service_asofbegin_date
        do dtu-add-months($grade_entry_dt_dtu,#service_asofbegin_date,$calc_date)
        do dtu-diff-days($calc_date,$pay_end_dt_dtu,#days_end_dt)
        do dtu-diff-days($calc_date,$pay_begin_dt_dtu,#days_begin_dt)
        if #days_end_dt >= 15 and #days_begin_dt < 15
           and #integer_portion = #service_months
           do print-employee-info
           exit-select
        end-if
     end-if
  else   
    if #service_months >= &D.GEX_INCR_MNTHS
       and #service_asofbegin_date < &D.GEX_INCR_MNTHS
       display &d.step
       
       do print-employee-info
       exit-select
    end-if
  end-if

FROM PS_SAL_STEP_TBL D
WHERE D.SETID = &E.SETID_DEPT
  AND D.SAL_ADMIN_PLAN = &E.SAL_ADMIN_PLAN
  AND D.GRADE = &E.GRADE
  AND D.EFFDT = (select max(effdt)
                   from ps_sal_step_tbl
                  where setid = d.setid
                    and sal_admin_plan = d.sal_admin_plan
                    and grade = d.grade
                    and effdt <= $AsOfToday)
ORDER BY D.STEP
end-select

end-procedure

!********************************************************************
!Prints Page Break
!********************************************************************

Begin-Procedure Dept-Change

if #dept_count > 0
   new-page
   let #dept_count = 0
end-if

end-procedure

!********************************************************************
!Prints employee information
!********************************************************************

Begin-Procedure Print-Employee-Info

  add 1 to #inputtran
  add 1 to #dept_count

print $emplid (+1,1) !edit xxx-xx-xxxx !GEX_SEC_REENG 2015-06-24 Vahini Katta
print $name   (,15)
print &E.DEPTID (,50)
print &E.SAL_ADMIN_PLAN (,64)
print &E.GRADE (,76)
print &E.GRADE_ENTRY_DT (,88) 
print &E.STEP (,106)
print &E1.SERVICE_DT (,115)
print &E.HOURLY_RT (,135) edit 99990.99
end-procedure

!*********************************************************************
!Retrieves the Company Description from the database
!*********************************************************************

begin-procedure get-company-desc

move ' ' to $company_desc

begin-select on-error=sql-error-found('get-company-desc')
J.DESCR

  move &J.DESCR to $company_Desc

from PS_COMPANY_TBL J

WHERE J.COMPANY = $COMPANY
  AND J.EFFDT =
      (SELECT MAX(EFFDT)
	 FROM PS_COMPANY_TBL
	WHERE COMPANY = $COMPANY)
end-select

end-procedure


!********************************************************************
!This procedure displays in the error report if there are any sql erros
!happened in the program
!********************************************************************

begin-procedure SQL-Error-Found($Proc_Name) 
  do error-found
  print 'SQL Error in ' (,21)
  print $Proc_Name (,35)  
  print $_sql-error (+1,1) 
  print 'sql-status:' (+1,1)
  print #_sql-status () edit 99999 
  show $emplid $DEPTID $company $paygroup noline
  display ' : SQL error ' noline
  display #_sql-status

end-procedure

!*********************************************************************
!This procedure displays the error message for the records that are in
!progress
!*********************************************************************

begin-procedure Error-Found
  move 'Y' to $ErrorFound
  do Format-Number(#InputTran, $out, '99999')
  print $out (+1,1)
  move &E.EMPLID to $emplid
  !GEX_SEC_REENG 2015-06-24 Vahini Katta Begins
  !let $EmplId_1st3 = substr($EmplId,1,3)
  !let $EmplId_mid2 = substr($EmplId,4,2)
  !let $EmplId_last4 = substr($EmplId,6,4)
 
  !String $EmplId_1st3 $EmplID_mid2 $EmplId_last4 by '-' into $EmplId11

  !print $EmplID11 (,16)
  PRINT $emplid (,16)
  !GEX_SEC_REENG 2015-06-24 Vahini Katta Ends
end-procedure

#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
!*#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'payrnctl.sqc'  !Select-Parameters
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions

#include 'gexxx901.sqc'  !Get company/paygroup multiple row table
#include 'gexxx902.sqc'  !Get Detptid multiple row table
