!***********************************************************************
!  TAX810PA:  Qtrly Wage List -  PENNSYLVANIA                          *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!   Copyright (C) 1988, 2012, Oracle and/or its affiliates.            *
!   All Rights Reserved.                                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2012/12/18:19:00:16                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  885414                                              !
!                                                                      *
!***********************************************************************
! 01/29/13  --  ISDVMZA  --  Modified program to conform with the PA   *
!                            UC Standards of reporting usin SSA format *
!                            Removed hyphen from Employer ID SUT and   *
!                            rename the file to FTP_UC2A_8218932.SSA   *
! 08/02/13  --  ISDVMZA  --  GEXHR_848_E155501_01                          *
!                            Additional changes to conform with PA UC  *
!                            Standards of reporting using SSA format.  *
!                            Create a new TAB file in addition to SSA  *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'N'
  Let $Prnt_CoExGrs = 'N'

  do Process-Main

 ! close 10

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, the following '
    display 'files will be created:'
    display ''
!    display '{IMPORTPREFIX}TAX810PA{IMPORTSUFFIX} '               ! ISDVMZA
    display '{IMPORTPREFIX}FTP_UC2A_8218932.SSA '                  ! ISDVMZA
    display '            containing 275-character records in the SSA format'
    display '            required for electronic submission to the Pennsylvania'
    display '            Department of Labor and Industry.'
    display ''
    display 'Follow the instructions from the department for preparing and'
    display 'submitting the file electronically.'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization
  move 'TAX810PA' to $ReportID

  move 'Pennsylvania Quarterly UI Wage Report ' to $ReportTitle
  display ''
  display 'Creating Electronic File for PA UI Wage Reporting'

end-procedure

begin-procedure Initialization

#ifdef TAXTEST
  move 'CA' to $State
#else
  move 'PA' to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 130 to #RecordLength
  add 2 to #RecordLength

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
     do Convert-Parameters
  end-if
  do Evaluate-File-Type
  do Calculate-Diskette-Capacity

  move &TX.Balance_Year to $QtrBeginDate xxxx
  let #QtrBeginMonth = #QtrEndMonth - 2
  move #QtrBeginMonth to $QtrBeginMonth 09

  let $QtrBeginDate = $QtrBeginDate || '-' || $QtrBeginMonth || '-01'

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($PeriodEndDate,$PeriodEndDate,{DEFYMD},'','')

  do DTU-DayOfWeek#($QtrBeginDate,#QtrBeginWeekday)
  if #QtrBeginWeekday <> 1
    let #BegOffsetDays = #QtrBeginWeekday - 1
    do DTU-Subtract-Days($QtrBeginDate,#BegOffsetDays,$EarnsBeginDate)
  else
    move $QtrBeginDate to $EarnsBeginDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsBeginDate,$SlctEarnsBeginDate,{DEFYMD},'','native')

  do DTU-DayOfWeek#($PeriodEndDate,#QtrEndWeekday)
  if #QtrEndWeekday <> 7
    let #EndOffsetDays = 7 - #QtrEndWeekday
    do DTU-Add-Days($PeriodEndDate,#EndOffsetDays,$EarnsEndDate)
  else
    move $PeriodEndDate to $EarnsEndDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsEndDate,$SlctEarnsEndDate,{DEFYMD},'','native')

  create-array name=QtrWeeks size=1  field=WeekWorked:char:15
  create-array name=QtrDays  size=10 field=PayGroup:char:1
                                     field=WkSched:char:1
                                     field=WeekDay:number:100
                                     field=Week#:number:100
                                     field=WorkDay:char:100
                                     field=Wages:number:100
  move 50 to #StateMinimum
  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display '*** Company field blank on Tax Run Control Record ***'
    display '***************** Processing stopped ****************'
    stop
  end-if
  do Get-Company-Data                 !Transmitter identifying data
  do Format-State-EIN

  do Save-Contact-Record-Data
  if $FileType <> 'D'
     do Open-File
     do Write-Contact-Record
  end-if

end-procedure

begin-procedure Open-File

!  open '{IMPORTPREFIX}TAX810PA{IMPORTSUFFIX}' as 10 for-writing record=275:fixed
  open '{IMPORTPREFIX}FTP_UC2A_8218932.SSA' as 10 for-writing record=275:fixed    !ISDVMZA

end-procedure

begin-procedure Process-Main

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
M.COMPANY
M.DESCR
M.FEDERAL_EIN
M.ADDRESS1
M.CITY
M.STATE
M.POSTAL
M.COUNTRY

  move &M.Company to $Company

  do Get-Company-Data

  move ''         to $priorEmplID
  do Read-Employee-Data
FROM  PS_COMPANY_TBL M
WHERE M.EFF_STATUS = 'A'
  AND M.TAX_REPORT_TYPE = '2'
  AND M.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = M.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT
  if #Count_F > 0
    do Print-Summary-Data('FileTotal')
  end-if
end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.STATE
C.TAX_CLASS
C.TXGRS_QTD
C.NLGRS_QTD
D1.NATIONAL_ID
D.NAME

  if &C.NlGrs_QTD > 0
    do Process-Employee
  else
    do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_NAMES D, PS_PERS_NID D1
WHERE C.COMPANY       = &M.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'PA'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND D.EMPLID            = D1.EMPLID
  AND D.NAME_TYPE = 'PRI'
  AND D.EFFDT =
      (SELECT MAX(DX.EFFDT)
       FROM   PS_NAMES DX
       WHERE  DX.EMPLID    = D.EMPLID
         AND  DX.NAME_TYPE = D.NAME_TYPE
         AND  DX.EFFDT    <= $AsOfDate)
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move 'I        '   to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID        to $NATIONAL_ID
  end-if

  move &D.Name         to $Name
  let $Remove_Blanks_From_Surname = 'Y'
  do Rotate-Name-for-Mag-Media

  uppercase $Name
  uppercase $Address1
  uppercase $City

  move &C.EmplID to $EmplID
  do Get-Weeks
  if #WeeksWorked > 13
    move 13 to #Weeks
  else
    move #WeeksWorked to #Weeks
  end-if
  do Format-Number(#Weeks, $Weeks, '09')

  move &C.NlGrs_QTD to #NlGrs_QTD
  add #NlGrs_QTD to #Co_NlGrs_QTD
  multiply 100 times #NlGrs_QTD
  let #max_amt_NLG = 999999999
  let #NLGrs_orig = #NlGrs_QTD
  add 1 to #Count_S
  let $done1 = 'N'

  while $done1 <> 'Y'
    do split-s-record (#NLGrs_orig,#NlGrs_QTD,#max_amt_NLG,$done1)
    do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '099999999999')
    do write-s-record
    add 1 to #Count_R
    add 1 to #Count_S1
  end-while

end-procedure

begin-procedure Before-Company
  do Get-Company-Data


  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display ' Company  ' noline
    display   $Company
    stop
  end-if

  if $FileType = 'D'
     do Open-File
     if $PriorCompany <> $Company
        do Write-Contact-Record
        move 1 to #RecordCount
     end-if
  end-if

  do Format-State-EIN

  do Write-E-Record
  move $Company to $PriorCompany
end-procedure

begin-procedure After-Company

  do Print-Summary-Data('CoTotal')

  if #Count_S > 0
    do Write-T-Record
  end-if

  add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
  add #Count_S to #Count_F
  add #Count_R to #Count_R_Total

  move 0 to #Co_NlGrs_QTD
  move 0 to #Count_S
  move 0 to #Count_S1
  move 0 to #Count_R
  new-page

end-procedure

begin-procedure Format-State-EIN
  #ifdef TAXTEST
    move 'CA' to $State
  #else
    move 'PA' to $State
  #endif
  do Get-State-Tax-Data

  !--- only include the State EIN upto the first blank character
  !--- trailing check digit is not included in the file
!  let $TempString   = &Employer_ID_SUT
!  let #DashPosition = INSTR($TempString, ' ',1)
!  if #DashPosition = 1
!     display 'Format error in State Unemployment ID for Company :' noline
!     display $Company
!     display 'Processing stopped'
!     stop
!  end-if

!  if #DashPosition > 0 and #DashPosition <= 10
!     let $StateEIN = substr($TempString,1,#DashPosition - 1)
!  else
!     let $StateEIN = substr($TempString,1,9)
!  end-if


  let $StateEIN = RTRIM(&Employer_ID_SUT,' ')

!  let $SWT_ID_Numeric = SUBSTR($StateEIN, 1, 7)
  let $SWT_ID_Numeric = SUBSTR(replace($StateEIN,'-',''), 1, 7)    !ISDVMZA -- Remove hyphen
  do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
  if #Rtrn_Value = 0
     display ' '
     display 'Format error in State Unemployment ID for company : ' noline
     display $Company
     display 'Pennsylvania State Unemployment ID in Company State Tax Table must be 7 digits: 9999999'
  else
     move $SWT_ID_Numeric to $StateEIN 9999999
     let $StateEIN = $StateEIN || '  '
  end-if

end-procedure

begin-procedure Is-String-Numeric ($Test_String, :#Return_Value)
  let #Return_Value  =  1
  let #Char_Pos  =  1

  while #Char_Pos <= 7
    let $Test_Char = substr ($Test_String, #Char_Pos, 1)
    let #Which_Digit = instr ('0123456789', $Test_Char, 1)
    if  #Which_Digit = 0
      let #Return_Value  =  0
      break
    end-if
    add 1 to #Char_Pos
  end-while
end-procedure


begin-procedure Save-Contact-Record-Data
  move $CompanyName    to $TapeReturnName
  move $CompnyAdd1     to $TapeReturnAddress
  move $CompnyCity     to $TapeReturnCity
  let $TapeReturnState = rtrim(&CT.State, ' ')
  move &CT.Postal      to $Zip
  move $Zip            to $ZipExtsn ~~~~~~xxxx
 if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip            to $TapeZip
  move $Zip            to $TapeZipExtsn ~~~~~xxxxx

  uppercase $TapeReturnName
  uppercase $TapeReturnAddress
  uppercase $TapeReturnCity

end-procedure

begin-procedure Write-Contact-Record

  move &CT.FEDERAL_EIN to $FedEIN 099999999

  if $FileType = 'D'
    do Write-Disk-1B
    do Write-Disk-2B
  else
    do Write-Tape-B
  end-if
end-procedure

begin-procedure Write-Tape-B

  write 10 from 'B':1
                $Sp:4
            $FedEIN:9
                $Sp:16
      $ContactPhone:24
     $ContactPerson:30
                $Sp:62
                $Sp:44
                $Sp:35
                $Sp:20
                $Sp:2
                $Sp:5
                $Sp:5
                $Sp:5
                $Sp:13
end-procedure

begin-procedure Write-Disk-1B

 write 10 from '1B':2
                $Sp:21
      $ContactPhone:12
     $ContactPerson:30
                $Sp:63

  add 1 to #RecordCount
end-procedure

begin-procedure Write-Disk-2B

 write 10 from '2B':2
                $Sp:14
    $TapeReturnName:44
  $TapeReturnAddress:35
    $TapeReturnCity:20
   $TapeReturnState:2
      $TapeZipExtsn:5
           $TapeZip:5
                $Sp:1
end-procedure

begin-procedure Write-E-Record

  move &M.Federal_EIN  to $FedEIN 099999999
  move &M.Descr        to $ErName
  move &M.Address1     to $ErAddress
  move &M.City         to $City
  let $StateCd = rtrim(&M.State, ' ')
  move &M.Postal       to $Zip
  move $Zip            to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip            to $ZipExtn  ~~~~~xxxxx

  uppercase $ErName
  uppercase $ErAddress
  uppercase $City

  if $FileType = 'D'
    do Write-Disk-1E
    do Write-Disk-2E
  else
    do Write-Tape-E
  end-if
  move 'Y' to $RecordWritten
end-procedure

begin-procedure Write-Tape-E

  write 10 from 'E':1
       $QtrEndMonth:2
           $RptYear:2
            $FedEIN:9
                $Sp:9
            $ErName:50
         $ErAddress:40
              $City:25
           $StateCd:10
                $Sp:5
               $Zip:5
                'S':1
                $Sp:1
                $Sp:2
                $Sp:5
                $Sp:1
               '42':2
                $Sp:5
          $StateEIN:9
                $Sp:1
                $Sp:2
                $Sp:88

end-procedure

begin-procedure Write-Disk-1E

 write 10 from '1E':2
       $QtrEndMonth:2
           $RptYear:2
            $FedEIN:9
                $Sp:9
            $ErName:50
         $ErAddress:40
                $Sp:14

   add 1 to #RecordCount
end-procedure

begin-procedure Write-Disk-2E

 write 10 from '2E':2
              $City:25
           $StateCd:2
                $Sp:8
           $ZipExtn:5
               $Zip:5
                'S':1
                $Sp:2
               '42':2
          $StateEIN:9
       $PlantNumber:2
                $Sp:65

  add 1 to #RecordCount
end-procedure

begin-procedure Write-S-Record

  if $FileType = 'D'
    do Write-Disk-1S
    do Write-Disk-2S
    if #RecordCount >= #MaxRecordsPerDiskette
       do Disk-Overflow
       stop
    end-if
  else
    do Write-Tape-S
  end-if


  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD

  move '00' to $Weeks
  move 0    to #Weeks
end-procedure

begin-procedure Write-Tape-S

!***********************************************************
!*** ISDVMZA  -  GEXHR_848_E155501_01 -- begin
!*   Change the name format to use hyphen instead of spaces.
!***********************************************************

  let $s_name = replace(replace(replace(rtrim($Name,' '),' - ','-'),'.',''), ' ', '-')
  let $s_name = replace($s_name,'.','')

!***********************************************************
!*** ISDVMZA --  GEXHR_848_E155501_01 --  end
!***********************************************************

  write 10 from 'S':1
       $NATIONAL_ID:9
            $s_name:27
!             $Name:27         ISDVMZA  -  GEXHR_848_E155501_01
                $Sp:86
               '42':2
                $Sp:2
       $QtrEndMonth:2
           $RptYear:2
         $NlGrs_QTD:12
                $Sp:9
             $Weeks:2
                $Sp:121

end-procedure

begin-procedure Write-Disk-1S
 write 10 from '1S':2
       $NATIONAL_ID:9
              $Name:27
                $Sp:90

  add 1 to #RecordCount
end-procedure

begin-procedure Write-Disk-2S
 write 10 from '2S':2
                $Sp:16
         $NlGrs_QTD:9
                $Sp:9
             $Weeks:2
                $Sp:90

  add 1 to #RecordCount
end-procedure

begin-procedure Write-T-Record

  move #Count_S1 to $Count_S 0999999
  let #T_NlGrs_QTD = 100 * #Co_NlGrs_QTD
  move #T_NlGrs_QTD to $T_NlGrs_QTD 09999999999999

  if $FileType = 'D'
    do Write-Disk-1T
    if #RecordCount >= #MaxRecordsPerDiskette
       do Open-File
    end-if
  else
    do Write-Tape-T
  end-if

  move '' to $T_NlGrs_QTD
  move '' to #T_NlGrs_QTD
end-procedure

begin-procedure Write-Tape-T

  write 10 from 'T':1
           $Count_S:7
               $Sp:253
       $T_NlGrs_QTD:14

end-procedure

begin-procedure Write-Disk-1T

 write 10 from '1T':2
           $Count_S:7
       $T_NlGrs_QTD:13
                $Sp:106

  add 1 to #RecordCount
end-procedure

begin-procedure Ignore
end-procedure

begin-procedure Prompts
    display '   '
    input $ContactPerson maxlen=30 'Enter Name of Contact Person'
    uppercase $ContactPerson
    input $ContactPhone maxlen=24 'Enter Phone Number of Contact Person'
    display '   '
  while $FileType = ''
    input $FileType 'Tape, cartridge or diskette file? (T, C, D or Q to quit)'
    uppercase $FileType
    if INSTR('TDCQ',$FileType,1) = 0
      display ' '
      display '***** Enter T, D, C or Q *****'
      display ' '
      move '' to $FileType
    end-if
  end-while
end-procedure

begin-procedure Convert-Parameters

Begin-Select
TY.CONTACT_NAME_SSA
TY.TELEPHONE_NBR

FROM PS_TAX960_PARM TY
End-Select

  move 'X' to $FileType
  move '0' to $DisketteType
  move &TY.CONTACT_NAME_SSA to $ContactPerson
  move &TY.TELEPHONE_NBR  to $ContactPhone

end-procedure

begin-procedure Evaluate-File-Type

  evaluate $FileType
    when = 'Q'
      stop

    when = 'D'
      if $Prcs_Process_Instance = ''
         do Get-Diskette-Format
      end-if
      move &TX.Recording_Cd to $Recording_Cd
      break

    when = 'T'
      move &TX.Tape_Density      to $Density
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MT'                  to $FilingType
      move '09'                  to $Tracks
      break

    when = 'C'
      move &TX.Recording_Cd      to $Recording_Cd
      move 'SL'                  to $Tape_Label
      move &TX.Computer_Mfr      to $Computer_Mfr
      move 'MC'                  to $FilingType

  end-evaluate
end-procedure

begin-procedure Disk-Overflow

  display '  PROGRAM  ABORTING  BECAUSE  OF  DISK  OVERFLOW         '
  display ''
  display 'There are too many records to report on one diskette.  PA will not'
  display 'allow multiple diskettes in reporting a single company.  You may '
  display 'wish to report your quarterly wage data via tape.'
  display ''
  display '  PROGRAM  ABORTING  BECAUSE  OF  DISK  OVERFLOW         '

end-procedure

#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'rotname6.sqc'  !Format name as First MI Last, remove suffix
#Include 'rotname8.sqc'  !Format name as First MI Last, remove suffix
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'number.sqc'    !Routines to format numbers
#Include 'getweeks.sqc'  !Get-Weeks procedure
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datemath.sqc'  !Date math procedures
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get-Run-Control procedure
#Include 'txovrflw.sqc'  !Split-S-Record
