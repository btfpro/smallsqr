!***********************************************************************
!GEXPYTA2:   This program sets the input file name and backup file name*
!            and calls the gexpyupd program to load the time sheets.   *
!            This program should run on Mondays and GEXPYTA1 should run*
!            on Sundays.                                               *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!**********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE	       *	
!***********************************************************************
!  P090	   SXK	       04/27/1998     INITIAL CREATION
!	   SXK         12/13/1998     Added a non critical report
!	   SXK         12/14/1998     Added unique report ids
!	   SXK         12/15/1998     Added Hire Report Report
!          CJH         12/23/1998     Alter ORACLE Session
!          CJH         07/06/1999     Mv Alter session to Begin-setup
!                                     add RULE hints to SQL
!          CWB         01/02/2001     Added logic to ignore year-end    
!                                     off cycle pay calendar.
! GEX-AXG 		08/10/2007    HCM 9.0 Upgrade				*
!***********************************************************************

#DEFINE Input_file1 'whse.'
#DEFINE Input_file2 'retail.'
#DEFINE FileID 'tarun2.dat'
#DEFINE Backup_FileID 'gexpyta2.'


#include 'setenv.sqc' !Set environment

begin-setup

#Include 'setup32a.sqc'
 
  DECLARE-REPORT ERROR-REPORT
Printer-Type=HPLASERJET
       layout=default
  END-DECLARE
  
  DECLARE-REPORT AUDIT-REPORT
Printer-Type=HPLASERJET
      layout=default
  END-DECLARE
  DECLARE-REPORT SNOPY-REPORT
Printer-Type=HPLASERJET
       layout=default
  END-DECLARE
  DECLARE-REPORT KRONO-REPORT
Printer-Type=HPLASERJET
       layout=default
  END-DECLARE
  DECLARE-REPORT PAPER-REPORT
Printer-Type=HPLASERJET
       layout=default
  END-DECLARE
  DECLARE-REPORT NONE-REPORT
Printer-Type=HPLASERJET
       layout=default
  END-DECLARE
  DECLARE-REPORT NCRP-REPORT
Printer-Type=HPLASERJET
       layout=default
  END-DECLARE
  DECLARE-REPORT SMRT-REPORT
Printer-Type=HPLASERJET
       layout=default
  END-DECLARE
  DECLARE-REPORT HIRE-REPORT
Printer-Type=HPLASERJET
       layout=default
  END-DECLARE

end-setup

begin-report

!  do Alter-Session
  do Init-DateTime
  do Init-Number
  do stdapi-init
  move 'GEXPYTA2' to $ReportID
  move 'Update PaySheets with Pay Input Data' to $ReportTitle
  display $ReportTitle
  do Get-Current-DateTime
  !SXK 12/14/1998 begin
  let $report_pre = 'PYTA2'
  !SXK 12/14/1998 End

  let $FileName = '{INFILE}' ||{FileID}
  do Get-Current-Pay-End-Dt
  do Validate-Input-Files	

  if $end_job = 'N'
    ! display $FileName
      do report
  
      do Commit-Transaction
      display 'COMMIT is completed successfully' 

      let $asofnow_noAMPM = substr($asofnow,1,8)
      let $Backup_FileName = '{INFILE}' ||{Backup_FileID} || $asoftoday ||'-' ||$asofnow_noAMPM 

       !  display $Backup_FileName
       do make-backup-copy

       do delete-original-file
  end-if
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term

end-report
!***********************************************************
! Get Current Pay End Date 
!***********************************************************
begin-procedure Get-Current-Pay-End-Dt
Let $Found = 'N'	
 display 'Determining Appropriate Input filenames...'
begin-select LOOPS=1
to_char(Y1.PAY_END_DT, 'yyyymmdd') &pay_end_yyyymmdd

  move 'Y' to $Found
  move &pay_end_yyyymmdd to $pay_end_yyyymmdd
  display '  Pay end: ' noline
  display $pay_end_yyyymmdd

FROM PS_PAY_CALENDAR Y1
where Y1.PAY_SHEETS_RUN = 'Y'
  AND Y1.PAY_CONFIRM_RUN = 'N'
  AND Y1.RUN_ID > ' '
  AND Y1.PAY_OFF_CYCLE_CAL = 'N'  ! CWB 01/02/2001
  AND Y1.PAY_END_DT = (SELECT MAX(PAY_END_DT)
			 FROM PS_PAY_CALENDAR
			WHERE PAY_SHEETS_RUN = 'Y'
			  AND PAY_CONFIRM_RUN = 'N'
                          AND PAY_OFF_CYCLE_CAL = 'N' ! CWB 01/02/2001
			  AND PAY_END_DT <= $AsOfToday)
end-select

  if $Found = 'N'
    display 'Error --  Pay Calendar not found or not setup for the Run ID.'
    move ' ' to $SlctCompany
  end-if
  Let $Input_name1 = {Input_file1} || $pay_end_yyyymmdd
  Let $Input_name2 = {Input_file2} || $pay_end_yyyymmdd

  display 'Input filename 1 : ' noline
  display $Input_name1
  display 'Input filename 2 : ' noline
  display $Input_name2 


end-procedure

!***********************************************************
! Validate Input Files - whse.yyymmdd and retail.yyyymmdd 
!***********************************************************
begin-procedure Validate-Input-Files

 display 'Searching for Warehouse and/or Retail files...'
 move 'Y' to $file1_found
 move 'Y' to $file2_found 
 move 'N' to $errorfound
 move 'N' to $end_job

 Let $Input_filename1 = '{INFILE}' || $Input_name1
 open $Input_filename1 as 1 for-reading record=91 status=#filestat1

   if #filestat1 <> 0
        move 'N' to $file1_found
        display 'Warehouse file not found'
   else
      close 1
  end-if        


 Let $Input_filename2 = '{INFILE}' || $Input_name2
 open $Input_filename2 as 2 for-reading record=91 status=#filestat2

  if #filestat2 <> 0
        move 'N' to $file2_found
        display 'Retail file not found'
  else
     close 2
  end-if        


  If $errorfound = 'N'
     If $file1_found = 'Y' and $file2_found = 'Y'
        let $UNIX_CAT_COMMAND = 'cat'||' '||$Input_filename1 ||' '||$Input_filename2 || ' > ' ||$FileName
     else
        If $file1_found = 'N' and $file2_found = 'Y'
           let $UNIX_CAT_COMMAND = 'cat'||' '||$Input_filename2 || ' > ' ||$FileName
        else
           If $file1_found = 'Y' and $file2_found = 'N'
              let $UNIX_CAT_COMMAND = 'cat'||' '||$Input_filename1 || ' > ' ||$FileName
           end-if   
        end-if
     end-if  
   CALL SYSTEM USING $UNIX_CAT_COMMAND #system_status

   if $file1_found = 'N' and $file2_found = 'N'
      let $end_job = 'Y'
      display 'No input files found.'
   else
   if #system_status <> 0
     add 1 to #errorcount
     do error-found
     print 'File Concatenation of Input files into an input file failed;' (,40)
     print 'Input Filename 1:' ()
     print $Input_filename1 ()
     print 'Input Filename 2:' ()
     print $Input_filename2 ()
     STOP
   else
     display 'Input file created successfully: ' noline
     display $FileName     
   end-if
  end-if
 end-if
end-procedure

!***********************************************************
begin-procedure make-backup-copy

display 'Making Backup copy of ' noline
display $FileName 

let $UNIX_COPY_COMMAND = 'cp'||' '||$FileName||' '||$Backup_FileName

CALL SYSTEM USING $UNIX_COPY_COMMAND #system_status

if #system_status <> 0
   add 1 to #errorcount
   do error-found
   display 'Copying input file into a backup file failed;'
   display 'Input file name:' noline
   display $filename
   display 'Backup file:' noline
   display $backup_filename
   print 'Copying Input file into a backup file failed;' (,21)
   print 'Input File:' ()
   print $FileName ()
   print 'Backup File:' ()
   print $Backup_FileName ()
   STOP
end-if
display 'Successful copy is done'
display 'Backup filename:' noline
display $backup_filename
end-procedure

begin-procedure delete-original-file
display 'Deleting input file:' noline
display $filename
let $UNIX_DELETE_COMMAND = 'rm'||' '||$FileName

CALL SYSTEM USING $UNIX_DELETE_COMMAND #system_status

if #system_status <> 0
   add 1 to #errorcount
   do error-found
   display 'Deleting input file failed'
   display 'Input file:' noline
   display $filename
   print 'Deleting Input file failed;' (,21)
   print 'Input File:' ()
   print $FileName ()

   STOP
end-if
display 'Successful delete is done'
display 'Filename:' noline
display $filename
!If exists, delete the warehouse input file

 If $file1_found = 'Y'
display 'Deleting input file:' noline
display $input_filename1

    let $UNIX_DELETE_COMMAND1 = 'rm'||' '||$Input_fileName1

    CALL SYSTEM USING $UNIX_DELETE_COMMAND1 #system_status

    if #system_status <> 0
       add 1 to #errorcount
       do error-found
   display 'Deleting input file failed'
   display 'Input file:' noline
   display $input_filename1
       print 'Deleting Warehouse Input file failed;' (,21)
       print 'Input File:' ()
       print $Input_fileName1 ()
       STOP
    end-if
display 'Successful delete is done'
display 'Filename:' noline
display $input_filename1
  end-if

!If exists, delete the retail input file

 If $file2_found = 'Y'
display 'Deleting input file:' noline
display $input_filename2

    let $UNIX_DELETE_COMMAND2 = 'rm'||' '||$Input_fileName2 

    CALL SYSTEM USING $UNIX_DELETE_COMMAND2 #system_status

    if #system_status <> 0
       add 1 to #errorcount
       do error-found
   display 'Deleting input file failed'
   display 'Input file:' noline
   display $input_filename2
       print 'Deleting Retail Input file failed;' (,21)
       print 'Input File:' ()
       print $Input_fileName2 ()
       STOP
    end-if
display 'Successful delete is done'
display 'Filename:' noline
display $input_filename2
 end-if

end-procedure

#include 'gexpyupd.sqc'  !Pay Sheet Load Program
#include 'gexaltse.sqc'  ! Alter ORACLE Session
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#include 'payrnctl.sqc'
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
