!**********************************************************************
! SQR Name:           adp303q.sqc
! SQR Descr:          ADP Employment Tax, Quarterly routines
! Created by:         drmonroe
! Create date:        03/04/2010
! Last modified by:   drmonroe
! Last modified date: 08/26/2015
!***********************************************************************

#define        adp303q_release     2015.09.26  ! yyyy.mm.dd.n  (sync this with pbzqtr.sqr's release version
#define        adp303q_version     ADP303Q.Sep 26, 2016 

#define EXTRACT_RELEASE          V3Q2016


!----------------------------------------------------------------------------
!  Author : Dan Monroe
! *************************  Q4_2015 ******************************
!
! Oct 28, 2015  Q4, 2014
!                   Hourly rate on all SUI records, GENERATE_HOURLY_RATE_ON_SUI
!                      $23.50 should be transmitted as       235000  (406-415)
!                   Louisiana
!                      LAU - $Gen_US_SOC_CD, Occupational code Standard Occupational Code (SOC) W 331-350 OR,       Gen_Occup_Title Job Title   - Client defined Job Title for this employee W 550-629  (new field)
!                   Wisconsin, flag for SUI and no SIT
!                      WIU           399	399	1	A	Employee W-2 Nil Indicator , positive W-2 wages in another state and no W-2 wages for Wisconsin.  
!
! Nov 13, 2015 Q4 update - only populate 'LA' / U Job Title for this employee W 550-629 if SOC is blank
!
!#define PA_PO_BOX_FIX
!---------------------------------
!As has been discussed on functional meetings regarding Pennsylvania Act 32 compliance, employee addresses indicated as PO Boxes are rejected by PA Tax Collectors.  This requirement satisfies both the reporting requirements, but also the validation performed by ADP which would result in Address Errors on the Quarterly Validation Report.
!
!The proposed solution is to apply the following logic in the Quarterly Extract:
!	If an employee has a HOME Address Type with Address Field 1 defined as a PO Box lookup the employee’s Work Location Address and send that in place of the Home Address.  Consider any potential iteration of PO Box (P.O. Box, PO Box, PO. Box, etc.)
!	If an employee has a PO  Box value in Address Field 2, make this value blank (null) on the extract file.
!
!#define PA_PHILLY_ADDRESS_FIX
!---------------------------------
!When an employee has multiple addresses during a quarter, only the current top of stack value is passed on the ADP Quarterly Extract.  If an employee moves to a Philadelphia address from an address in another Pennsylvania locality or another state, the Tax Collector in the PA 32 Tax Jurisdiction will reject the tax reporting for employees with a Philadelphia Address.
!
!The proposed solution is to apply the following logic in the Quarterly Extract:
!	If an employee has a HOME Address Type with a City like “Phila%” AND the employee has EIT Wages at a Pennsylvania PSD Code other than 510101, then select the maximum Effective Dated HOME Address where the City is not like “Phila%”.
!	If no previous address is found, list the employee of the Quarterly Validation Report Address Error List.
!
! Nov 17, 2015, remove JCP1 PR define's and insert them into the clients probiz.sqc
! Dec 01, 2015  Get-Fed-Gross-Wages-from-balances, add $tick to fix the error; (SQR 5528) ORACLE OCIStmtExecute error 904 in cursor 37:    ORA-00904: "AAL": invalid identifier
! Dec 22, 2015  #ifdef  REDUCE_PR_WAGES_BY_LIMIT_UNDER_27    40000  !add logic to produce the Box 165 record even if no Box 07 PR exists, even if no year-end data exists
! Jan  4, 2016  TIPS_DRIVE_BOX_12A_QTD and TIPS_DRIVE_BOX_12B_QTD
!               if YE_DATA Country <> 'USA'... adding logic to set the STATE to 'ZZ' keeps clients from having to manually do this
! Jan  7, 2016  added logic for MLN1 custom MWR Table
! Jan 11, 2016  CEI1 pull in NYC Box 18
!               New feature of the PR Box 16, adding Commissions allowances and wages into the PRH, then backing out PR_SUM_WAGES_ALLOW_COMMIS
! Jan 14, 2016  FSN1 - process Box 16E for PR  PROCESS_PR_BOX16E, NYC_WAGES_TAXES_FROM_YE_AMOUNTS, exempt wages already backed out of PRH.. just remap to B PR165 record
! Jan 18, 2016  Use Box 01 for YTD Taxable, USE_BOX01_for_YTD_FIT
! Feb 12, 2016  Changes to the PA_PO_BOX_FIX and PA_PHILLY_ADDRESS_FIX process to resolve issues.
! Mar  4, 2016  Correction for PA Address Fixes.
! Mar 15, 2016  #define FLAG_MD_LOCALS_WITH_NO_MD_SIT    N
! Mar 21, 2016  Add check for PA Locality and Employee State not = '' or ' '

! Q2, 2016   (Q2_2016)

! Apr 22, 2016   291 - 330    40	$Employee_Residential_Address1
!                331 - 370    40	$Employee_Residential_Address2
!                371 - 400    30	$Employee_Residential_City
!                401 - 402     2	$Employee_Residential_State
!                403 - 411     9	$Employee_Residential_zip   
!             
!                

 #define Q2_2016  ! Enable this when we deliver the Q2 release

            #ifdef Q2_2016
                 #if {PeopleSoft_Version} >= '8.8'
                   #define USE_MAIL_ADDRESS        !forces existing fields to be MAIL address 
                 #endif
            #endif
            
! Apr 25, 2016   GEN_WYOMING_LOCAL_WITH_TIPS SSDPE.ERNCD in (''TIP'') (gen W/C wage record based on SUI Nolimit gross - tips (QTD and YTD)
!                    New option is required for Wyoming W/C filing for RBS1.
!                    The pbzqtr.sqr will generate a new local wage record when it encounters the WY SUI.   It will calculate the QTD and YTD Taxable wages on this new Local W/C record based on the No limit SUI gross – Tips.
!                    This will allow for W/C reporting by ADP even though RBS1 does not have the ability to create the WY W/C Local record within PeopleSoft due to their limitations.
!                Added VTH Part time flag for Q2, 2016
! May 20, 2016   uppercase residential address fields to make consistent with home address fields
! Jun 15, 2016   PA_PO_BOX_FIX logic added to the resident fields to not pass the POBox address if it was fixed via the PA_PO_BOX_FIX option
! Jun 30, 2016   CONVERT_XXXXXXXXX_SSN_TO_EMPLID added option
! Jul 12, 2016   TIPS_DRIVE_BOX_12A_QTD and TIPS_DRIVE_BOX_12B_QTD fix for RBS1
! Jul 21, 2016   CUSTOM_PART_TIME_INDICATOR
! Jul 25, 2016   CONVERT_ZERO_SSN_TO_INVALID_WITH_COUNTER
! Aug  2, 2016   add INDIANA to the list of states for location, added option IN_UI_LOCATION_DFLT_FIXED  (eg.  #define IN_UI_LOCATION_DFLT_FIXED 01) to force this new field to a value (format :  nn)
!                write the output into 630-639 (new position)
! Aug 29, 2016   blank deceased 233 E rec to match specs
! Sep 23, 2016   rpad($deceased,' ') changed from rtrim see: 09/23/16, change adpfilt.sqc to adpfltet.sqc
!

#define Q3_2016  ! Enable this when we deliver the Q3, 2016 release

#define BLANK_deceased
!-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define Q4_2015

#ifndef TESTING_EMPLID
  #define TESTING_EMPLID
#endif


#ifdef Q4_2015
  #define GENERATE_HOURLY_RATE_ON_SUI
#endif

#if {SITE_ID} = 'SHA1'
   #define  UI_OVERRIDE                        
#endif

#if {SITE_ID} = 'UAL1'
  #define USE_BOX01_for_YTD_FIT
#endif

#ifndef RESIDENT_ADDRESS_TYPE
  #define RESIDENT_ADDRESS_TYPE HOME
#endif

#if {SITE_ID} = 'RBS1'
   #define NEVADA_TIPS                                         SSDPE.ERNCD in (''TIP'')
   #define GEN_WYOMING_LOCAL_WITH_TIPS                         SSDPE.ERNCD in (''TIP'')
   #define TIPS_DRIVE_BOX_12A_QTD
   #define TIPS_DRIVE_BOX_12B_QTD
#endif

#if {SITE_ID} = 'GE01'
   #define  PUERTO_RICO_BOX16_REMAPPING 165
#endif

#if {SITE_ID} = 'TGP1'
   #define  PUERTO_RICO_BOX16_REMAPPING 165
#endif

#ifndef PUERTO_RICO_BOX16_REMAPPING
   #define PUERTO_RICO_BOX16_REMAPPING  161                 ! Default Box 16 PR to map to 16A.  Clients would add this definition to their probiz.sqc if not 16A
#endif

#if {SITE_ID} = 'FSN1'
  #define PROCESS_PR_BOX16E
#endif

#if {SITE_ID} = 'CEI1'
  #define NYC_WAGES_TAXES_FROM_YE_AMOUNTS

#endif

#if {SITE_ID} = 'RRD1'
  #define NYC_WAGES_TAXES_FROM_YE_AMOUNTS
#endif

#ifdef ADP_TAX_DEV
  #define NYC_WAGES_TAXES_FROM_YE_AMOUNTS
  #define REDUCE_PR_WAGES_BY_LIMIT_UNDER_27 40000
  #define PROCESS_PR_BOX16E
#endif
#ifdef ADP_TAX_QA
  #define NYC_WAGES_TAXES_FROM_YE_AMOUNTS             !Testing in Q/A KU0004, 2013
  #define REDUCE_PR_WAGES_BY_LIMIT_UNDER_27 40000
  #define PROCESS_PR_BOX16E                           !Testing in Q/A KU0002, 2014
#endif

#ifdef REDUCE_PR_WAGES_BY_LIMIT_UNDER_27
   #define PR_SUM_WAGES_ALLOW_COMMIS
#endif

#ifndef PAACT_32_11F_LOGIC
  #define IGNORE_YE_AMOUNTS_PSD_CODES
#endif

#ifndef NM_UI_LOCATION_DFLT         
  #define NM_UI_LOCATION_DFLT 00001
#endif

#ifndef IN_UI_LOCATION_DFLT_FIXED         
  #define IN_UI_LOCATION_DFLT_FIXED 0000000000
#endif

#ifndef SSDP_CRITERIA !Allows for ADP_TAX_DEV testing
   #define SSDP_CRITERIA  ($state_trimmed = 'NY' AND $class_trimmed = 'H' and $local_trimmed = '') and ((#RptYear = 2011 and #RptQtr >= 3) or (#RptYear >= 2012))
#endif

#ifndef SSDP_BENEFIT_DED_CLASS 
   #define SSDP_BENEFIT_DED_CLASS  T
#endif

#ifndef FULL_PART_TIME_CRITERIA !Allows for ADP_TAX_DEV testing
  #ifdef Q2_2016
    #define FULL_PART_TIME_CRITERIA   rtrim($Output_TaxCode,' ') = 'PRU' or rtrim($Output_TaxCode,' ') = 'VTH'   !report the flag for these jurisdictions
  #else
    #define FULL_PART_TIME_CRITERIA   rtrim($Output_TaxCode,' ') = 'PRU'   !report the flag for these jurisdictions
  #endif
#endif


#if {SITE_ID} = 'TGP1'
  #define DEDUCTS_AND_EARNINGS_MODE    BALANCE_TO_BOX1
#endif
 
#if {SITE_ID} = 'HUM1'
  #define GENERATE_BOX14K
#endif

#if {SITE_ID} = 'CAF1'
  #define CONVERT_XXXXXXXXX_SSN 999999999
#endif

#if {SITE_ID} = 'USE1'
  #define CONVERT_XXXXXXXXX_SSN_TO_EMPLID
#endif

#if {SITE_ID} = 'TTP1'
  #define CONVERT_XXXXXXXXX_SSN 999999999
#endif

#if {SITE_ID} = 'MEM1'
  #define CONVERT_XXXXXXXXX_SSN 000000000
#endif

#if {SITE_ID} = 'CMB2'
  #define CONVERT_ZERO_SSN_TO_INVALID_WITH_COUNTER 987   ! 000000000 --> 987000001, 987000002,...
#endif

#ifndef NOLOCK_SQL
 #define NOLOCK_SQL
#endif

!7/3/2012
#if {SITE_ID} = 'RCC1'
  #define USE_END_OF_DEPTID_STRING
#endif
#if {SITE_ID} = 'PWH1'
  #define USE_END_OF_DEPTID_STRING
#endif

#if {SITE_ID} <> 'INT1'  
  #define PROCESS_NEW_HIRE_TAX_CLASSES_FOR_2010
#endif
    
!11/11/11
!---------------------------------------------------------------------
#if {SITE_ID} = 'BLK1'
  #define SET_QTD_12M_12N_to_YTD_BOX_AMOUNTS
#endif
#if {SITE_ID} = 'DCG1'
  #define LIMITED_BOX_SUMMARY_W2           ! BOX99_TOTAL_GROSS
#endif
#define SKIP_NY_OVERRIDE
#if {SITE_ID} = 'WCH1'
  #define BOX99_BALANCE_TO_BOX1_ROLLUP DCB !2009
#endif
#if {SITE_ID} = 'ITE1'
 #ifndef ADP_TAX_AMEND
  #define FULL_BOX_SUMMARY_W2
 #endif
#endif
#if {SITE_ID} = 'RAY1'
  #define ZIP_EXTENSION_SUPPRESION
  #define GENERATE_BOX14Y
  #define GENERATE_BOX14Z
#endif

#if {SITE_ID} = 'WHS1'
  #define GENERATE_BOX14Y
#endif

#if {SITE_ID} = 'DSG1'
  #define GENERATE_BOX14_NJFLI
#endif

#if {SITE_ID} = 'SHA1'
  #define GENERATE_BOX14Z
#endif
#if {SITE_ID} = 'NXT1'
  #define GENERATE_BOX14_NJVDI
#endif
#define STRING_US74_DESC_AND_PLAN_NBR

#if {SITE_ID} <> 'MRC1'
  #if {SITE_ID} <> 'TCN1'
     #define USE_04_05_06_BOX_AMOUNTS                !if clients have trouble with tips overreporting, this could need to be disabled 3/20/2012 TCN1
  #endif
#endif

#if {SITE_ID} = 'PBG1'
  #define GENERATE_BOX14_CAVDI
#endif
#if {SITE_ID} = 'ACL1'
  #define LIMITED_BOX_SUMMARY_W2           ! BOX99_TOTAL_GROSS
#endif
#if {SITE_ID} = 'PNC1'
  #define SDI_Exempt_Criteria   $class_trimmed = 'D' or $class_trimmed = 'E'
#endif
!----------------------------------------------------------------

#ifndef SDI_Exempt_Criteria
  #define SDI_Exempt_Criteria   $class_trimmed = 'D'
#endif

#ifndef BYPASS_STANDARD_FLI_STATUS_LOGIC
  #define FLI_STATUS_IF_BALANCES
#endif

#if {DEDUCTS_AND_EARNINGS_MODE} = 'BALANCE_TO_BOX1'                         ! 1/25/2010 was: #ifdef BALANCE_TO_BOX1
 #if {SITE_ID} <> 'TBN1'  !2/23/2012
  #define BOX99_BALANCE_TO_BOX1_ROLLUP DCB 
 #endif
#endif

#ifndef GENERAL_SUI_LOCATION_CODE
  #ifdef Q3_2016
    #define GENERAL_SUI_LOCATION_CODE   (($state_trimmed = 'MA') or ($state_trimmed = 'IA') OR ($state_trimmed = 'MN') or ($state_trimmed = 'MI') or ($state_trimmed = 'NM') or ($state_trimmed = 'IN'))
  #else
    #define GENERAL_SUI_LOCATION_CODE   (($state_trimmed = 'MA') or ($state_trimmed = 'IA') OR ($state_trimmed = 'MN') or ($state_trimmed = 'MI') or ($state_trimmed = 'NM'))
  #endif
#endif

#ifndef VALID_SUI_LOCATION_CODE_CRITERIA
  #ifdef Q3_2016
    #define VALID_SUI_LOCATION_CODE_CRITERIA (($state_trimmed = 'MA') or ($state_trimmed = 'IA') OR ($state_trimmed = 'MN') or ($state_trimmed = 'MI') or ($state_trimmed = 'NM') or ($state_trimmed = 'IN')) and $class_trimmed = 'U'
  #else
    #define VALID_SUI_LOCATION_CODE_CRITERIA (($state_trimmed = 'MA') or ($state_trimmed = 'IA') OR ($state_trimmed = 'MN') or ($state_trimmed = 'MI') or ($state_trimmed = 'NM')) and $class_trimmed = 'U'
  #endif
#endif

!20140109
!#ifdef WORKSITE_REPORTING
!   #define GENERAL_SUI_LOCATION_CODE   1=1
!   #define USE_UI_RPT_CODE_FOR_OTHER_STATES
!#endif

#if {SITE_ID} = 'RSS1'
  #define GENERATE_BOX12CC
 ! #define USE_NAICS_CODE   RSI
#endif

#ifdef AG_MIGRATION
  #define CALC_GROSS_FROM_BALANCES
  #define ADD_TAXABLE_BENEFITS_TO_GROSS
#endif

#ifdef FULL_BOX_SUMMARY_W2
   #define DEDUCTS_AND_EARNINGS_MODE NONE
   #define CALC_GROSS_FROM_BALANCES
   #define BALANCE_TO_BOX1_PRINT
#endif

#ifdef LIMITED_BOX_SUMMARY_W2
   #define DEDUCTS_AND_EARNINGS_MODE NONE
   #define BALANCE_TO_BOX1_PRINT
#endif

#ifdef BOX_01_03_05_SUMMARY
   #define DEDUCTS_AND_EARNINGS_MODE NONE
   #define CALC_GROSS_FROM_BALANCES
   #define BALANCE_TO_BOX1_PRINT
   #define TOTAL_OTHER_EARNINGS_DETAILS       !  or,  #define TOTAL_OTHER_EARNINGS_SUMMARY
#endif

!11/05/09 Dup this from adp303.sqc so we need only deliver adp303q.sqc for year-end 2009
!-------------------------------------------------------------------------------------------
#ifndef ADP_COMPID_EXTRACT_STRIPPED_REPORT
 #ifndef SUBTOTAL_COMPANY
  #ifndef SUBTOTAL_FEIN
   #ifndef SUBTOTAL_ADP_COMPID_EXTRACT
    #define SUBTOTAL_COMPANY
   #endif
  #endif
 #endif
#endif

#if {SITE_ID} = 'TGP1'
  #define SKIP_MD_SIT_ROLLUP
#endif

#if {SITE_ID} = 'MCK1'
  #define SPLIT_LONG_ADDRESSES
#endif


#ifndef USE_CUSTOM_SDI_STATUS_for_PRIVATE_PLAN
 #if {SITE_ID} = 'TGP1'
  #define USE_CUSTOM_SDI_STATUS_for_PRIVATE_PLAN       rtrim($SDI_Status,' ') = 'E' or rtrim($SDI_Status,' ') = 'V'
 #endif
 #if {SITE_ID} = 'MCK1'
  #define USE_CUSTOM_SDI_STATUS_for_PRIVATE_PLAN       rtrim($SDI_Status,' ') = 'E' or rtrim($SDI_Status,' ') = 'V'
 #endif
 #if {SITE_ID} = 'CSB1'
  #define USE_CUSTOM_SDI_STATUS_for_PRIVATE_PLAN       rtrim($SDI_Status,' ') = 'E' or rtrim($SDI_Status,' ') = 'V'
 #endif
#endif

#if {SITE_ID} = 'ADK1'
  #define MULTIPLE_WY_WC_CODES
#endif

  !Tax classes to use to set the subject to FLI flag  (default to just 'I' - FLI-EE) if 08-F is not in place
#ifdef 08F_PNA_FLI_STATUS
   !#define FLI_ON_ALL_NJ_RECS
   #ifndef PNA_FLI_STATUS_CRITERIA
    #define PNA_FLI_STATUS_CRITERIA                   $PNA_FLI_STATUS = 'Y'
   #endif
#else
   #ifndef FLI_STATUS_SUBJECT_TAX_CLASS_CRITERIA
     #define FLI_STATUS_SUBJECT_TAX_CLASS_CRITERIA    $class_trimmed = 'I'
   #endif
#endif

#if {DEDUCTS_AND_EARNINGS_MODE} = 'BALANCE_TO_BOX1'
  #define BALANCE_TO_BOX1_PRINT
  #define BALANCE_TO_BOX1_SUMMARY_LINE
  #define BALANCE_TO_BOX1_SORT_BY_AMOUNTS
#endif

#ifndef NM_WORKERS_COMP_LOCALITY
  #if {SITE_ID} = 'ADK1'
   #define NM_WORKERS_COMP_LOCALITY  000001
  #else
   #define NM_WORKERS_COMP_LOCALITY  NM0001
  #endif
#endif

#ifndef MAX_BOX99_CODES
  #define MAX_BOX99_CODES 100
#endif

#ifdef PROCESS_PR_BOX16E
  #define  PUERTO_RICO_BOX16_REMAPPING 165
#endif


#include 'adp303b.sqc'   !10/25/10
#ifdef QUARTERLY_HISTORY
  #include 'adpqhist.sqc'   !10/25/10
#endif
!***************************************************
begin-procedure init-quarterly-arrays

       show ' '
       show 'adp303q.sqc release: {adp303q_release}, Version: {adp303q_version} Release: {EXTRACT_RELEASE}'
      
      
      #ifdef WORKSITE_REPORTING
         show 'WORKSITE_REPORTING enabled'
         #ifdef LOG_MWR_SETUP_TBL
           show 'LOG_MWR_SETUP_TBL: {LOG_MWR_SETUP_TBL}  audit enabled'
         #endif
      #endif

      #ifdef QUARTERLY_HISTORY
        #debugd show 'QUARTERLY_HISTORY enabled'
      #endif
      
      #ifdef ALWAYS_USE_PERSONAL_DATA                           !20121221
       #debugd show 'ALWAYS_USE_PERSONAL_DATA enabled'                  !20121221
      #endif                                                    !20121221
      #ifdef ALWAYS_USE_PERSONAL_DATA_ADDRESSES                 !20121221
       #debugd show 'ALWAYS_USE_PERSONAL_DATA_ADDRESSES enabled'        !20121221
      #endif                                                    !20121221

      #ifdef REDUCE_PRH_WAGE_REC_BY_COMMISSIONS
       show 'REDUCE_PRH_WAGE_REC_BY_COMMISSIONS enabled'
      #endif

      #ifdef REDUCE_PRH_WAGE_REC_BY_TIPS
       show 'REDUCE_PRH_WAGE_REC_BY_TIPS enabled'
      #endif
      #ifdef REDUCE_PRH_WAGE_REC_BY_Box16
       show 'REDUCE_PRH_WAGE_REC_BY_Box16 enabled'
      #endif
      
      #ifdef USE_PR_BOX07_AMOUNT
       show 'USE_PR_BOX07_AMOUNT enabled'
      #endif
      
      #ifdef PR_TIPS_ON_PRH_from_Box10
       show 'PR_TIPS_ON_PRH_from_Box10 enabled'
      #endif
      
      #ifdef SECURE_DATA_MASKING
       #debugd show 'SECURE_DATA_MASKING enabled'
      #endif
      #ifdef ZIP_EXTENSION_SUPPRESION
       #debugd show 'ZIP_EXTENSION_SUPPRESION'
      #endif

      #ifdef SEVERENCE_PAY_SELECTION
       #debugd show 'SEVERENCE_PAY_SELECTION enabled = {SEVERENCE_PAY_SELECTION}'
      #else
       #debugd show 'No SEVERENCE_PAY_SELECTION'
      #endif

      #ifdef SSDP_BENEFITS
       #debugd show 'SSDP_BENEFITS enabled'
       #ifdef SSDP_WORK_BENEFITS
          #debugd show 'SSDP_WORK_BENEFITS = {SSDP_WORK_BENEFITS}'
       #endif
       #ifdef SSDP_RETIRE_BENEFITS
          #debugd show 'SSDP_RETIRE_BENEFITS = {SSDP_RETIRE_BENEFITS}'
       #endif
       #ifdef SSDP_WORK_BENEFITS_EARNINGS
          #debugd show 'SSDP_WORK_BENEFITS_EARNINGS = {SSDP_WORK_BENEFITS_EARNINGS}'
       #endif
       #ifdef SSDP_RETIRE_BENEFITS_EARNINGS
          #debugd show 'SSDP_RETIRE_BENEFITS_EARNINGS = {SSDP_RETIRE_BENEFITS_EARNINGS}'
       #endif
       #ifdef SSDP_BENEFIT_DED_CLASS
         #debugd show 'SSDP_BENEFIT_DED_CLASS = {SSDP_BENEFIT_DED_CLASS}'
       #endif
       #ifdef TAX_UPDATE_12D
          #debugd show 'TAX_UPDATE_12D enabled'
       #endif
      #else
          #debugd show 'SSDP_BENEFITS not enabled'
      #endif
      
      !11/05/09 - added.. duplicate of what is in adp303.sqc so we don't need to send both adp303.sqc and adp303q.sqc files for year-end 2009
      !---------------------------------------------------------------------------------------------------------------------------------------
      let #cur_tot = 0
      #ifndef SUBTOTAL_COMPANY
       #ifdef SUBTOTAL_FEIN
        let #cur_tot = 2
       #endif
       #ifdef SUBTOTAL_ADP_COMPID_EXTRACT
        let #cur_tot = 2
       #endif
       #ifdef SUBTOTAL_SRC_BANK_ID_EXTRACT
        let #cur_tot = 2
       #endif
      #endif

      !these are the specific boxes that we need to map

      #ifdef SET_QTD_12M_12N_to_YTD_BOX_AMOUNTS
        #debugd show 'SET_QTD_12M_12N_to_YTD_BOX_AMOUNTS enabled'
      #endif

      #ifdef Q2_2016
        show 'Q2_2016 enabled'
      #endif
      #ifdef Q3_2016
        show 'Q3_2016 enabled'
      #endif
      
      #ifdef SKIP_NY_OVERRIDE
       show 'SKIP_NY_OVERRIDE enabled.'
      #endif
      #ifdef CHOOSE_NY_YE_AMOUNTS_ALWAYS
       show 'CHOOSE_NY_YE_AMOUNTS_ALWAYS enabled.'
      #endif
      #ifdef CHOOSE_NY_LOCAL_YE_AMOUNTS_ALWAYS
       show 'CHOOSE_NY_LOCAL_YE_AMOUNTS_ALWAYS enabled.'
      #endif

      #ifdef USE_04_05_06_BOX_AMOUNTS
       #debugd show 'USE_04_05_06_BOX_AMOUNTS enabled.'
      #endif

      #ifdef LIMITED_BOX_SUMMARY_W2
        #debugd show 'LIMITED_BOX_SUMMARY_W2 enabled'
      #endif
      #ifdef FULL_BOX_SUMMARY_W2
        #debugd show 'FULL_BOX_SUMMARY_W2 enabled'
      #endif

      #ifdef BOX_01_03_05_SUMMARY
         #ifndef MAX_OTHER_EARNS_TOTAL
          #define MAX_OTHER_EARNS_TOTAL     100
         #endif
         #debugd show 'BOX_01_03_05_SUMMARY enabled.other_earn array size: {MAX_OTHER_EARNS_TOTAL}'

        create-array name=other_earn size={MAX_OTHER_EARNS_TOTAL}
         field=Erncd:char
         field=Amount:number
         field=ADD_GROSS:char
         field=SUBJECT_FWT:char
         field=SUBJECT_FICA:char
         field=DESCR:char

      #endif

      #ifdef PA_PULL_PO_BOX_ADDRESSES
        show 'PA_PULL_PO_BOX_ADDRESSES enabled.  Override address type {PA_PULL_PO_BOX_ADDRESSES}'
        let $PA_PULL_PO_BOX_ADDRESSES = rtrim('{PA_PULL_PO_BOX_ADDRESSES}',' ')
        if $PA_PULL_PO_BOX_ADDRESSES = ''
          show 'Error: PA_PULL_PO_BOX_ADDRESSES definition must have a value (eg. HOME, MAIL, OTH2)'
          show 'Stopping Program'
          #ifdef MVS
           Move 5 to #Return-Status
          #end-if
          stop
        end-if

        #ifndef PA_PULL_ADDRESS_LIMIT            !this can be set in probiz.sqc 
          #define PA_PULL_ADDRESS_LIMIT 1000
        #endif
        
        create-array name=PA_PULL_ADDR size={PA_PULL_ADDRESS_LIMIT}     -
           field=Emplid:char              -
           field=Addr1_Orig:char          -
           field=Addr1_New:char           -
           field=Name:char

      #endif
     
      #ifdef CUSTOM_BOX14_LOGIC
        #debugd show 'CUSTOM_BOX14_LOGIC enabled'
      #endif
      
      #ifdef STRING_NJ74_DESC_AND_PLAN_NBR
       #debugd show 'STRING_NJ74_DESC_AND_PLAN_NBR enabled'
      #endif

      #ifdef STRING_US74_DESC_AND_PLAN_NBR
       #debugd show 'STRING_US74_DESC_AND_PLAN_NBR enabled'
      #endif

      #ifdef USE_CUSTOM_SDI_STATUS_for_PRIVATE_PLAN
        #debugd show 'USE_CUSTOM_SDI_STATUS_for_PRIVATE_PLAN enabled'
      #endif

      #ifdef CALC_GROSS_FROM_BALANCES
       #debugd show 'CALC_GROSS_FROM_BALANCES enabled.'
      #endif

      #ifdef STRING_PRIVATE_PLAN
       #debugd show 'STRING_PRIVATE_PLAN enabled.'
      #endif

      #ifdef NJ_SDI_PRIVATE_PLAN_OVERRIDE
        #debugd show 'NJ_SDI_PRIVATE_PLAN_OVERRIDE = {NJ_SDI_PRIVATE_PLAN_OVERRIDE}'
      #endif

      #ifdef BOX99_BALANCE_TO_BOX1_ROLLUP
       #debugd show 'BOX99_BALANCE_TO_BOX1_ROLLUP enabled.  {BOX99_BALANCE_TO_BOX1_ROLLUP}'
      #endif

      #ifdef NLGRS_FROM_CHECK_YTD_AMOUNT
        #debugd show 'NLGRS_FROM_CHECK_YTD_AMOUNT enabled'
      #endif

      #ifdef 08F_PNA_FLI_STATUS
        #debugd show '08F_PNA_FLI_STATUS enabled.  FLI Status based on PNA_FLI_STATUS_CRITERIA.'
      #else
        #debugd show '08F_PNA_FLI_STATUS not enabled. FLI Status based on FLI_STATUS_SUBJECT_TAX_CLASS_CRITERIA.'
      #endif

      #ifdef FLI_STATUS_IF_BALANCES
        #debugd show 'FLI_STATUS_IF_BALANCES enabled'
      #endif

      #ifdef FLI_PLAN_NUMBER_OVERRIDE
        #debugd show 'FLI_PLAN_NUMBER_OVERRIDE = {FLI_PLAN_NUMBER_OVERRIDE}'
      #endif

      #ifdef NM_WORKERS_COMP_LOCALITY
        #debugd show 'NM_WORKERS_COMP_LOCALITY  = {NM_WORKERS_COMP_LOCALITY}'
      #endif

      #ifdef MULTIPLE_WY_WC_CODES
        #debugd show 'MULTIPLE_WY_WC_CODES enabled'
      #endif

      #ifdef CUSTOM_CORP_OFFICER
        #debugd show 'CUSTOM_CORP_OFFICER enabled (see probiz.sqc for logic)'
      #endif
      #ifdef USE_DEPTID_FOR_MN_MI_LOCATION
       #debugd show 'USE_DEPTID_FOR_MN_MI_LOCATION'
      #endif
      #ifdef USE_LOCATION_FOR_MN_MI_LOCATION
       #debugd show 'USE_LOCATION_FOR_MN_MI_LOCATION'
      #endif
      #ifdef USE_TAX_LOCATION_CD_FOR_MN_MI_LOCATION
       #debugd show 'USE_TAX_LOCATION_CD_FOR_MN_MI_LOCATION '
      #endif
      #ifdef USE_PAYGROUP_FOR_MN_MI_LOCATION
       #debugd show 'USE_PAYGROUP_FOR_MN_MI_LOCATION'
      #endif
      #ifdef USE_UI_RPT_CD_FOR_MN_MI_LOCATION
       #debugd show 'USE_UI_RPT_CD_FOR_MN_MI_LOCATION'
      #endif
      #ifdef GENERAL_SUI_LOCATION_CODE
       #debugd show 'GENERAL_SUI_LOCATION_CODE'
      #endif

      #if {SITE_ID} = 'RBT1'
       #ifdef RHI_CORP
         #debugd show 'RBT1: Corporate DB run'
       #else
         #debugd show 'RBT1: Field DB run'
       #endif
      #endif
      
      move '$$$,$$$,$$$,$$9.99mi' to $Fmt

      #define COMPANY_LIMIT 4               !0 - company totals, 1 - ex-pats, 2 - FEIN Totals, 3 - Hash totals
      #ifndef MAX_LOCALS_TOTAL
         #define MAX_LOCALS_TOTAL  5000     !in case we have it defined in probiz.sqc.(for less memory usage)
      #endif

      #define MAX_STATES_TOTAL     120      !10/14/09 from 60 to 120

      create-array name=Company_Totals size={COMPANY_LIMIT} ! <-- USA
      field=C_01:number
      field=C_01_GU:number
      field=C_01_AS:number
      field=C_01_VI:number
      field=C_02:number
      field=C_02_GU:number
      field=C_02_AS:number
      field=C_02_VI:number
      field=C_03:number
      field=C_03_GU:number
      field=C_03_AS:number
      field=C_03_VI:number
      field=C_04:number
      field=C_04_GU:number
      field=C_04_AS:number
      field=C_04_VI:number
      field=C_05:number
      field=C_05_GU:number
      field=C_05_AS:number
      field=C_05_VI:number
      field=C_06:number
      field=C_06_GU:number
      field=C_06_AS:number
      field=C_06_VI:number
      field=C_07:number
      field=C_08:number
      field=C_09:number
      field=C_10:number
      field=C_11A:number
      field=C_11B:number
      field=C_12A:number
      field=C_12B:number
      field=C_12C:number
      field=C_12D:number
      field=C_12E:number
      field=C_12F:number
      field=C_12G:number
      field=C_12H:number
      field=C_12J:number
      field=C_12K:number
      field=C_12L:number
      field=C_12M:number
      field=C_12N:number
      field=C_12P:number
      field=C_12Q:number
      field=C_12R:number
      field=C_12S:number
      field=C_12T:number
      field=C_12V:number
      field=C_12W:number
      field=C_12Y:number
      field=C_12Z:number
      field=C_12AA:number
      field=C_12BB:number
      field=C_12CC:number
      field=C_12DD:number
      field=C_12EE:number
      field=C_14:number   !added 11/9/99
      field=C_16:number
      field=C_17:number
      field=C_18:number
      field=C_19:number
      field=Local_State:char:{MAX_LOCALS_TOTAL}
      field=Locality:char:{MAX_LOCALS_TOTAL}
      field=Residence:char:{MAX_LOCALS_TOTAL}
      field=Local_TxGrs:number:{MAX_LOCALS_TOTAL}
      field=Local_Tax:number:{MAX_LOCALS_TOTAL}
      field=State:char:{MAX_STATES_TOTAL}
      field=State_TxGrs:number:{MAX_STATES_TOTAL}
      field=State_Tax:number:{MAX_STATES_TOTAL}

     create-array name=PR_Totals size={COMPANY_LIMIT}     ! <-- Puerto Rico
      field=C_05:number
      field=C_06:number
      field=C_06A:number
      field=C_06B:number
      field=C_07:number
      field=C_08:number
      field=C_09:number
      field=C_10:number
      field=C_11:number
      field=C_12:number
      field=C_13:number
      field=C_14:number
      field=C_15:number
      field=C_16:number
      field=C_16A:number
      field=C_16B:number
      field=C_17:number
      field=C_18:number
      field=C_19:number
      field=C_20:number
      field=C_21:number
      field=C_22:number
      field=C_23:number

#ifndef STRIPPED_PBZQTR_REPORT
  #ifndef MAX_SSN_ERRORS
    #define MAX_SSN_ERRORS 3000   !6/24/04 from 1000
  #endif
  create-array name=SSNErrors size={MAX_SSN_ERRORS}
      field=Company:char
      field=Emplid:char
      field=Name:char
      field=SSN:char
#endif

  #define BOX_BALANCE_LIMIT 500
  create-array name=Box_W2 size={BOX_BALANCE_LIMIT}     -
           field=BOX:char           -
           field=AMOUNT:number      -
           field=TAXFORM_ID:char    -
           field=STATE:char         -
           field=LOCALITY:char      -
           field=WORK_PSD_CD:char   -
           field=RES_PSD_CD:char    -
           field=RESIDENT:char      -
           field=LOAD_AMT_TYPE:char -
           field=W2C_ADJ_AMOUNT:number

    #define MAX_BOX14_CODES 100
    create-array name=Box14Names size={MAX_Box14_CODES}
      field=Box14_Lookup:char
      field=Box14_Name_Lookup:char

    create-array name=Box14 size=37  !complete list of box 14 entries (emplid)
      field=Box:char
      field=Desc:char
      field=Namt:number

    create-array name=Box14_totals size=37  !complete list of box 14 entries (company)
      field=Box:char
      field=Desc:char
      field=Namt:number

    create-array name=Box14_fein_totals size=37  !complete list of box 14 entries (company)
      field=Box:char
      field=Desc:char
      field=Namt:number

    create-array name=Box14_grand size=37  !complete list of box 14 entries (hash)
      field=Box:char
      field=Desc:char
      field=Namt:number

    create-array name=Box99 size={MAX_BOX99_CODES}  !Summary earnings and deductions
      field=Desc:char
      field=Namt:number
      field=Sum_Type:char

    #ifdef BALANCE_TO_BOX1_PRINT
     #debugd show 'BALANCE_TO_BOX1_PRINT enabled'
     create-array name=Box99_print size={MAX_BOX99_CODES}  !Summary earnings and deductions
      field=Desc:char
      field=amt:char
    #endif

  #ifndef MAX_EARNINGS_CODES
   #define MAX_EARNINGS_CODES 1800   !changed 1/9/03 for FirstUnion
  #endif
  create-array name=EarningsNames size={MAX_EARNINGS_CODES}
      field=Erncd_Lookup:char
      field=Erncd_Name_Lookup:char
      field=Erncd_Type:char

  #ifndef MAX_DEDUCTIONS_CODES
    #define MAX_DEDUCTIONS_CODES 1800 !changed 1/9/03 for FirstUnion
  #endif
  create-array name=DeductionNames size={MAX_DEDUCTIONS_CODES}
      field=Dedcd_Lookup:char
      field=Dedcd_Name_Lookup:char
      field=Ded_Class:char
      field=Plan_type:char  !2/21/06 added


end-procedure

!***************************************************
begin-procedure init-employer-data

 !init the $Taxform_ID for this company
 !-------------------------------------
 let $Taxform_id = ' '
 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

begin-select
CT.TAXFORM_ID
   let $Taxform_id = &CT.TAXFORM_ID
   FROM PS_W2_COMPANY CT {NOLOCK_SQL}
   where CT.COMPANY = $Current_Company
     and CT.CALENDAR_YEAR = (SELECT MAX(CALENDAR_YEAR)
       FROM   PS_W2_COMPANY {NOLOCK_SQL}
       WHERE  COMPANY               = CT.COMPANY
         AND  TAXFORM_ID            = CT.TAXFORM_ID
         #ifdef USE_INT_CRITERIA
          AND  CALENDAR_YEAR        <= int(\$RptYearZ\))
         #else
          AND  CALENDAR_YEAR        <= #RptYear )
         #endif
     
#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select
  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'init-employer-data' to $debug-proc1
     move 'PS_W2_COMPANY'    to $debug-table1
     do log-delta-time
  #endif

 IF rtrim($taxform_ID,' ') = ''
  move  $Year_Start_Date_Native to $max_effdt          !default
 else
   do Init-max_effdt
 end-if

 do Get-Tax-Reporting-Run-Controls-ADP

 !'A' AGRICULTURE, 'M' MILITARY, 'Q' MQGE, 'X' RAILROAD, 'H' HOUSEHOLD, 'R' REGULAR
 !------------------------------------------------------------------------------------
 if $Employ_Type <> 'A' AND $Employ_Type <> 'M' AND $Employ_Type <> 'Q' AND
    $Employ_Type <> 'X' AND $Employ_Type <> 'H'
     let $Employ_Type = 'R'
 end-if

!9/5/8 added  only perform the queries against these 12 items if they're mapped (save time)
!-----------
    let $12A_mapped = 'f'
    let $12B_mapped = 'f'
    let $12M_mapped = 'f'
    let $12N_mapped = 'f'

begin-select
DFTST.BOX

 evaluate &DFTST.BOX
  when = '12A'
    let $12A_mapped = 't'
    break
  when = '12B'
    let $12B_mapped = 't'
    break
  when = '12M'
    let $12M_mapped = 't'
    break
  when = '12N'
    let $12N_mapped = 't'
    break
  when-other
    break
  end-evaluate

 FROM  PS_TAXFORM_DED DFTST  {NOLOCK_SQL}
 WHERE DFTST.TAXFORM_ID     = 'W'
   AND DFTST.EFFDT          = $Max_Effdt
   AND DFTST.BOX            in ('12A', '12B', '12M', '12N')
end-select

  if $SelectEmplid <> ''
    #debugd show 'init-employer-data: Box 12 After Deduction mappings, A,B,M,N = ' $12A_mapped $12B_mapped $12M_mapped $12N_mapped ' for max effdt = ' $Max_Effdt
  end-if

begin-select
EFTST.BOX

 evaluate &EFTST.BOX
  when = '12A'
    let $12A_mapped = 't'
    break
  when = '12B'
    let $12B_mapped = 't'
    break
  when = '12M'
    let $12M_mapped = 't'
    break
  when = '12N'
    let $12N_mapped = 't'
    break
  when-other
    break
  end-evaluate

 FROM  PS_TAXFORM_ERN EFTST  {NOLOCK_SQL}
 WHERE EFTST.TAXFORM_ID     = 'W'
   AND EFTST.EFFDT          = $Max_Effdt
   AND EFTST.BOX            in ('12A', '12B', '12M', '12N')
end-select

  if $SelectEmplid <> ''
    #debugd show 'init-employer-data: Box 12 After Earnings mappings, A,B,M,N = ' $12A_mapped $12B_mapped $12M_mapped $12N_mapped ' for max effdt = ' $Max_Effdt
    #debugd show ' '
  end-if

end-procedure

!***************************************************
begin-procedure Init-max_effdt
 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

 if $SelectEmplid <> ''
   #debugd show 'Init-max-effdt default = ' $Year_Start_Date_Native
 end-if

Begin-SELECT
MAX(EFFDT)  &Max_effdt

 Move &Max_effdt to $Max_Effdt

FROM   PS_TAXFORM_TBL  {NOLOCK_SQL}
WHERE  TAXFORM_ID = $Taxform_id
  AND  EFFDT  <= $Qtr_end_native

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

   #if {SITE_ID} = 'IPG1'
    let $Max_Effdt = $Year_Start_Date_Native
   #endif
  
end-procedure

!***************************************************
begin-procedure Write-employee-rec    !called ONCE for each employee, before TAX records are processed

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

 if $SelectEmplid <> ''
    show 'Writing E rec for emplid ' $Emp_Emplid '. Extract Compid ' $Extract_compid  ' # of TaxBalances = ' #Last_TaxBalance_Cnt
 end-if

 #if {SITE_ID} = 'CZB1'
   if $RptQtr = '4'                   !even if we don't ask for W-2 data... pull it into the E record
     let $save_adp_w2_records = $adp_w2_records
     let $adp_w2_records = 't'
   end-if
 #endif

 let #Generated_Box165_amount = 0
 let $Generated_Box165_amount = ''
 
 let $prior_state_tax_data_state = ''
 let $SUT_Exempt_state_str = ''             !20130410
 let $NJ_FLI_EE_Taxes = ''
 let $FLI_Plan_Text = ''
 let $NM_WC_flag = ''
 
 let #Box_01 = 0     !10/4/2012 to handle non-U.S. citizens with no Box 1, but with other data to report


    #ifdef THIRD_PARTY_SICK_DED
      #ifdef EMPLID_LEVEL_3PSP
        do init-3PSP-balances
          if $SelectEmplid <> ''
            #debugd show 'Write-employee-rec: Count of 3PSP_Balances = '#3PSP_Balances
          end-if
      #endif
    #endif

    !-----------------------------------------------------------------------------
    !called before the first Q record for an employee, after getting the necessary
    !earnings and deduction ytd totals and other W-2 information
    !-----------------------------------------------------------------------------

    !for comparison of YE_AMOUNTS vs YE_TAX_BALANCES for YTD taxes for each employee
    !-------------------------------------------------------------------------------
    let #YE_AMOUNT_YTD_Emplid = 0
    let #TAX_BALANCE_YTD_Emplid = 0
    let $private_sdi_acct = ''

    do Get-Fed-Tax-info            !$FWT_ALLOWANCES ('99'), $FWT_Mar_Status ('9')
    do Get-Termination-Date
    let $Generated_Emplid = '******'

    #ifdef SUBTOTAL_FEIN_EXTRACT
      #if {SITE_ID} <> 'MDA1'  !added 4/18/07
       do build-company-list-fein
      #endif
    #else
     #ifdef SUBTOTAL_ADP_COMPID_EXTRACT
       do build-company-list-compid
     #endif
    #endif
    
    #if {Online_Posting_Indicator} = '+'
     do Custom-Online-Posting-Indicator
    #else
      Let $Online_Posting_Indicator = '{Online_Posting_Indicator}'
    #endif
    if $Online_Posting_Indicator <> 'Y'
      LET $Online_Posting_Indicator = 'N'
    end-if

    #if {PRINT_IPAY} = '+'
     do Custom-W2-Print-Flag
    #else
      LET $Ee_print_ipay = '{PRINT_IPAY}'
    #endif
    if $Ee_print_ipay = 'B'       !6/13/06 due to new specs
      LET $Ee_print_ipay = 'P'
    end-if
    if $Ee_print_ipay <> 'P'
      LET $Ee_print_ipay = 'N'
    end-if

    if rtrim($3psp_suppress_w2_print,' ') = 'y'
      let $Ee_print_ipay = 'N'
    end-if

    let $EE_Sort = ' '

    #if {SORT_OPTION} = '+'
     if $SelectEmplid <> ''
      show 'calling: Custom-Sort-Option '
     end-if
     do Custom-Sort-Option   
    #endif
    
    if rtrim($EE_Sort,' ') = ''
     #if {SORT_OPTION} = '+'                                  !Custom

       #if {SITE_ID} = 'ARR1'
        do ARR1-Sort !in proadp.sqc
       #endif

       #if {SITE_ID} = 'PRD1'
        do PRD1-Sort
       #endif

       #if {SITE_ID} = 'RTT1'
         !let $EE_Sort = 'A' || ' ' || $Location   !Pre 1/11/07
         let #startpos = length($Location) - 2
         let $EE_Sort = 'A' || ' ' || substr($Location,1,3) || substr($Location,#startpos,3)  !first and last 3 chars
       #endif

       #if {SITE_ID} = 'CWC1'
         let $EE_Sort = 'A' || '                       ' || $Current_Emplid
       #endif

       #if {SITE_ID} = 'MAC1'
         let $EE_Sort = 'A' || '                    '    || $Current_Emplid
       #endif

       #if {SITE_ID} = 'ITE1'
         let $EE_Sort = 'G' || '                    '    || $Current_Emplid
       #endif

       #ifdef SORT_OPTION_EMPLID
         let $EE_Sort = 'A' || ' '    || $Current_Emplid
       #endif

       #if {SITE_ID} = 'SCM1'
        !populate $Company, $Paygroup, $AsofDate first for following call to get Paygroup name
        !-------------------------------------------------------------------------------------
        let $AsOfDate = $Qtr_End_Native
        let $Company  = $Current_Company
        let $Paygroup = $Job_Paygroup
        let $PayGroupName = ''
        do Get-PayGroup-Data
        let $PayGroupName = translate($PayGroupName,'"',' ')             !remove double quote
        LET $Ee_Sort       =  'A Agent For '  || $PayGroupName
       #endif

       #if {SITE_ID} = 'KMT1'
        if substr($location,1,5) = '08500'
         let $Store = substr($deptid,1,5)  !JCP, use this for sort, but use 3 char lookup into M record w/address, and in SPEI record
        else
         let $Store = substr($location,1,5)
        end-if
        LET $Ee_Sort       =  'A' || $Store
       #endif

       !JRD1 wants to pass their Paygroup and Department number in the "Special Sort Field" -
       !E record pos 258-290, first position = A followed by Paygroup then Department.
       #if {SITE_ID} = 'JRD1'
        LET $Ee_Sort       =  'A' || ' ' || $Job_Paygroup || ' ' || $Deptid
       #endif

       #if {SITE_ID} = 'GEC1'
        LET $Ee_Sort       =  'A' || ' ' || $emp_ssn || ' ' || $Current_Company
       #endif

     #else
      LET $Ee_Sort       = '{SORT_OPTION}'
      #ifdef OPTIONAL_TEXT
       LET $Ee_Sort       =  $Ee_Sort || '{OPTIONAL_TEXT}'
      #endif
     #endif

    end-if
    
    #if {SITE_ID} = 'ATR1'                        !12/8/09
      LET $Ee_Sort       =  'A '  || $Deptid
    #endif

    #if {SITE_ID} = 'PWH1'
      LET $Ee_Sort       =  'A '  || $Emp_Emplid
    #endif

    #if {SITE_ID} = 'MAC1'
      LET $Ee_Sort       =  'A '  || $Emp_Emplid
    #endif

    !2/24/04 added to use the YE_DATA not PERSONAL_DATA if this is a W-2 run
    !        if no YE data is loaded as of this point... we'll use the personal datap
    !        as normal quarter runs always have
    !-----------------------------------------------------------------------

   #if {SITE_ID} = 'AMN1'
     do Get-W2-Address-AMN1   !in their probiz.sqc

     if $W2_ADDR_FOUND <> 'Y'
      if substr(&A1.COUNTRY,1,2) = 'US'
        if substr($Emp_Zip,6,1) = '-' or substr($Emp_Zip,6,1) = ' '
          let $Emp_Zip = substr($Emp_Zip,1,5) || substr($Emp_Zip,7,4)
        else
          let $Emp_Zip = substr($Emp_Zip,1,9)
        end-if
      else
        let $Emp_City = rtrim(&A1.CITY,' ') || ' ' || rtrim(&A1.STATE,' ') || ' ' || rtrim(&A1.{POSTAL},' ') || ' ' || rtrim(&A1.COUNTRY,' ')
        move '  '        to $Emp_State
        move '         ' to $Emp_Zip
      end-if
     end-if

   #else

    #ifndef ALWAYS_USE_PERSONAL_DATA
     if $adp_w2_records = 't'

      do Read-YE-Employee-Data
      move  '         '           to $Emp_SSN_change

      if $YE_Data_exists = 't'
       if rtrim($W2C_Data_included,' ') = 't'
        move  $W2C.YE_FNAME         to $FirstName
        move  $W2C.YE_MIDDLE_NAME   to $MiddleName
        move  $W2C.YE_LNAME         to $LastName
        move  $W2C.YE_SUFFIX        to $NameSuffix
        move  $W2C.SSN              to $Emp_SSN

        if $W2C.SSN <> $W2C.PRV
          if rtrim($W2C.PRV,' ') <> ''
           move  $W2C.PRV              to $Emp_SSN_change
           if $SelectEmplid <> ''
            let $ssn_new5 = substr($Emp_SSN,5,5)
            let $ssn_prv5 = substr($Emp_SSN_change,5,5)
            #debugd show 'SSN change: New xxxx' $ssn_new5 ', Prv xxxx' $ssn_prv5
           end-if
          end-if
        end-if

        move  $W2C.StatutoryEe      to $StatutoryEe
        move  $W2C.PensionPlanFlag  to $PensionPlanFlag
        move  $W2C.THIRDPARTY_SICK  to $Third_Party_Sick
       else
        move  $E.YE_FNAME         to $FirstName
        move  $E.YE_MIDDLE_NAME   to $MiddleName
        move  $E.YE_LNAME         to $LastName
        move  $E.YE_SUFFIX        to $NameSuffix
        move  $E.SSN              to $Emp_SSN
        move  $E.StatutoryEe      to $StatutoryEe
        move  $E.PensionPlanFlag  to $PensionPlanFlag
        move  $E.THIRDPARTY_SICKPAY to $Third_Party_Sick
       end-if
      
       #ifndef ALWAYS_USE_PERSONAL_DATA_ADDRESSES                   !20121221 section added
        move  $E.ADDRESS1         to $Emp_Personal_Address1
        move  $E.ADDRESS2         to $Emp_Personal_Address2
        move  $E.CITY             to $Emp_City
        move  $E.STATE            to $Emp_State
        move  $E.ZIP              to $Emp_Zip
       #endif                                                       !!20121221 end of section
       move  $E.deceased         to $deceased
       move  $E.Spouse_ssn       to $Spouse_ssn
      end-if

     end-if
    #endif
   #endif

   #ifdef APPEND_SUFFIX
     if $adp_w2_records = 't'
      do append-suffix  !  $LastName || ' ' || $NameSuffix (if resulting length is <= 20 chars)
      let $NameSuffix = ''
     else
      !if not year-end... we just started allowing the suffix to be appending for Q1, 2009
      !------------------------------------------------------------------------------------
      if #RptYear >= 2009
       do append-suffix  !  $LastName || ' ' || $NameSuffix (if resulting length is <= 20 chars)
       let $NameSuffix = ''
      end-if
     end-if
    #endif

    #ifdef THIRD_PARTY_SICK_DED
     if $adp_w2_records = 't'
      if $Third_Party_Sick <> 'Y'
        do Read-Earnings-Balances-for-3PSP-flag !double check the third party sick
      end-if
     end-if
    #endif

    do Custom-Direct-Mail-Employee-Level   !12/28 moved here from above for Univ-NBC

    LET $Ee_Pull_Mail  = $Direct_Mail   !6/13/06
    if $Ee_Pull_Mail = 'S'
      LET $Ee_Pull_Mail  = 'P'
    end-if

    #if {SITE_ID} = 'AVD1'
      if $Extract_Compid = 'WE23'
        LET $Ee_Pull_Mail  = 'P'
      end-if
    #endif

    if rtrim($PensionPlanFlag,' ') = 'Y' or rtrim($PensionPlanFlag,' ') = 'P'
     let $PensionPlanFlag = 'Y'
     add 1 to #PensionPlanFlag_Y
    else
     let $PensionPlanFlag = 'N'
     add 1 to #PensionPlanFlag_N
    end-if

    !4/1/05
    let $LastName = rtrim($LastName,',')
    let $FirstName = rtrim($FirstName,',')

    if rtrim($check-for-void-w2,' ') = 't'
        move ' '                                 to   $StatutoryEe
        move ' '                                 to   $PensionPlanFlag
        move ' '                                 to   $Third_Party_Sick
        move '      '                            to   $Deptid
        move ' '                                 to   $Ee_print_ipay
        move ' '                                 to   $Ee_Pull_Mail
        move '                                 ' to   $Ee_Sort
        move ' '                                 to   $Online_Posting_Indicator

        #debugd show 'Voiding E-recs for blank / void W-2.  Emplid ' $Current_Emplid

    end-if

    #ifdef USE_END_OF_DEPTID_STRING
       let $deptid_trm = rtrim($deptid,' ')
       let #strt = length($deptid_trm) - 5
       if #strt > 0
         LET $deptid = substr($deptid_trm, #strt, 6)
       else
         LET $deptid = substr($deptid_trm, 1, 6)
       end-if
       if $SelectEmpid <> ''
         #debugd show 'USE_END_OF_DEPTID_STRING logic. orig dept: ' $deptid_trm ' --> ' $deptid
       end-if
    #endif

    #if {SITE_ID} = 'RCC1'  !Employee Status        Company code       Location       Deptid
         LET $Ee_Sort       =  'A ' || $empl_status || ' ' || $Current_Company || ' ' || $Location || ' ' || $Deptid
         if $SelectEmpid <> ''
	    #debugd show 'RCC1 Sort logic. sort: ' $Ee_Sort
	 end-if
    #endif

    #if {SITE_ID} = 'ASL1'
      let $deptid = $Tax_Location_cd
    #endif

    #ifdef ZIP_EXTENSION_SUPPRESION
       let $Emp_Zip_temp = substr($Emp_Zip,1,5)
       let $Emp_Zip = $Emp_Zip_temp || '    '
    #endif

    #if {SITE_ID} = 'LAW1'
       if substr($deptid,5,1) = '-'
         let $deptidt = substr($deptid,1,4) || substr($deptid,6,2)
         let $deptid = $deptidt
         #debugd show 'LAW1: Deptid changed to ' $deptid
       end-if
    #endif

    #ifdef SECURE_DATA_MASKING  !this masks the SSN to xxxx12345, Lastname 'Grinch', Address1 to '100 Who Mountain', City to 'Whoville'
            let $Emp_SSN               = 'xxxx' || substr($Emp_SSN,5,5)
            if rtrim($Emp_SSN_change,' ') <> ''
              let $Emp_SSN_change        = 'xxxx' || substr($Emp_SSN_change,5,5)
            end-if
            let $LastName              = 'Grinch'
            let $Emp_Personal_Address1 = '100 Who Mountain'
            let $Emp_City              = 'Whoville'
    #endif

     #ifdef MASTER_TAX_HEADER
        let $Master_Tax_date_erec = '         ' || rpad($PA_PSD_Locality,6,' ')
     #else
        let $Master_Tax_date_erec = '               ' 
     #endif

    #ifdef QUARTERLY_HISTORY
       if rtrim($Emp_SSN_change,' ') = ''
         do extract_prior_qtr_data  !in adpqhist.sqc to get prior qtr SSN
       end-if
    #endif

    #ifdef CONVERT_XXXXXXXXX_SSN  ! #define CONVERT_XXXXXXXXX_SSN {CONVERT_XXXXXXXXX_SSN} 
      if rtrim($Emp_SSN,' ') = 'XXXXXXXXX'
        let $Emp_SSN = rtrim('{CONVERT_XXXXXXXXX_SSN}',' ')
         show ' Converted SSN       ' $Emp_SSN             
      end-if
      if rtrim($Emp_SSN_change,' ') = 'XXXXXXXXX'
        let $Emp_SSN_change = rtrim('{CONVERT_XXXXXXXXX_SSN}',' ')
         show ' Converted SSN chang ' $Emp_SSN_change             
      end-if
    #endif
    
    #ifdef CONVERT_XXXXXXXXX_SSN_TO_EMPLID
      if rtrim($Emp_SSN,' ') = 'XXXXXXXXX'
        let $Emp_SSN = lpad($Emp_Emplid,9,'0')
         show ' Converted SSN to emplid: ' $Emp_SSN             
      end-if
      if rtrim($Emp_SSN_change,' ') = 'XXXXXXXXX'
        let $Emp_SSN_change = lpad($Emp_Emplid,9,'0')
         show ' Converted SSN (change) to emplid: ' $Emp_SSN_change             
      end-if
    #endif

    #ifdef CONVERT_ZERO_SSN_TO_INVALID_WITH_COUNTER   ! 000000000 --> 987000001, 987000002,...
      if rtrim($Emp_SSN,' ') = '000000000'
        add 1 to #blank_ssn_counter      
        do Format-Number(#blank_ssn_counter,$blank_ssn_counter, '099999')
        let $Emp_SSN = rtrim('{CONVERT_ZERO_SSN_TO_INVALID_WITH_COUNTER}',' ') || $blank_ssn_counter
        show ' Converted 000000000 SSN to ' $Emp_SSN ' for emplid ' $Emp_Emplid             
      end-if
    #endif
    
        
    #ifdef PA_PULL_PO_BOX_ADDRESSES    
     do PA-PULL-PO-BOX-ADDRESSES 
    #endif
    
    #ifdef SPLIT_LONG_ADDRESSES 
      do SPLIT-LONG-ADDRESSES
    #endif

    #ifdef CUSTOM_QUARTERLY_LOGIC_ENABLED
     do custom-associate-level-logic-quarterly-E-rec
    #endif

    !rework the balances for Ohio locals if required for the associate
    #ifdef OHIO_COURTESY_WITHHOLDING                      ! 20121017.c
      do Ohio-Courtesy-withholding  !in adpohio.sqc       ! 20121017.c
    #endif     

    #ifdef ADP_W2_FLAGS_TABLE
      if $adp_w2_records = 't'
       do Get-Custom-W2-Flags
      end-if
    #endif

    #ifdef Q4_2015
        #ifdef PA_PO_BOX_FIX
           do PA-PO-Box-Fix
        #endif
        #ifdef PA_PHILLY_ADDRESS_FIX
           do PA-Philly-Address-Fix
        #endif
        #ifdef F1_VISA_PHILI_FIX
           if $Job_FICA_Status = 'E'
              do F1_VISA_PHILI_FIX
           end-if
        #endif
    #endif

    #ifdef Q2_2016
      do Extract-Resident-Address
    #endif

    #ifndef SKIP_FILTER
     do filter-tabs-from-address-name   !now in adpfilt.sqc moved here on 2/25/2015
    #endif
    
    if $SelectEmplid <> ''
         show 'Associate Name       ' $FirstName ' ' $MiddleName ' ' $LastName
         show ' Deptid  (E250-255)= ' $Deptid ', Post (E211)= ' $Online_Posting_Indicator ', Pens (E213)= ' $PensionPlanFlag ', Print (E256)= ' $Ee_print_ipay ', Mail (E257)= ' $Ee_Pull_Mail ' EE_Sort (E258-290) ' $EE_Sort
         show ' MasterTax data      ' $Master_Tax_date_erec
         show ' Mail Addr           ' $Emp_Personal_Address1 ', ' $Emp_Personal_Address2 ', ' $Emp_City ', ' $Emp_State ' ' $Emp_Zip
         #ifdef Q2_2016
         show ' Home Addr           ' $Employee_Residential_Address1 ', ' $Employee_Residential_Address2 ', ' $Employee_Residential_City ', ' $Employee_Residential_State ' ' $Employee_Residential_zip
         #endif
    end-if

    let $rectp = 'E'
 
    #ifdef USE_TEMP_TABLE_FOR_OUTPUT

     !clip any strings that might overflow

     !9/21/05
     if rtrim($MiddleName,' ') = ''
       let $MiddleName = ' '
     end-if
     if rtrim($FirstName,' ') = ''
       let $FirstName = '                 '
     end-if
     if rtrim($LastName,' ') = ''
       let $LastName = '                    '
     end-if

!  10/6/06 fixes    Third-Party Sick Pay, Deceased Employee. In the case of the Hire Date missing -
!                   only one position is populated when it should be 8. This pushes the remainder
!                   of the E record over by the length of the missing data.

     if rtrim($check-for-void-w2,' ') <> 't'
      if rtrim($PensionPlanFlag,' ') = ''
        let $PensionPlanFlag = 'N'
      end-if
      if rtrim($Third_Party_Sick,' ') = ''
        let $Third_Party_Sick = 'N'
      end-if
      if rtrim($StatutoryEe,' ') = ''
        let $StatutoryEe = 'N'
      end-if
     end-if

     if rtrim($deceased,' ') = ''
        let $deceased = 'N'
     end-if

     if rtrim($Emp_Hire_Yr,' ') = ''
        let $Emp_Hire_Yr = '    '
     end-if
     if rtrim($Emp_Hire_Mo,' ') = ''
        let $Emp_Hire_Mo = '  '  !fix on 10/14/05
     end-if
     if rtrim($Emp_Hire_Day,' ') = ''
        let $Emp_Hire_Day = '  '
     end-if
     !---------------

     if rtrim($Emp_Sex,' ') = ''
       let $Emp_Sex = 'M'
     end-if

     if rtrim($Empl_Type,' ') = ''
       let $Empl_Type = 'S'
     end-if

     let $FirstName  = substr($FirstName,1,17)
     let $MiddleName = substr($MiddleName,1,1)
     let $LastName   = substr($LastName,1,20)

     let $Emp_Personal_Address1  = substr($Emp_Personal_Address1,1,30)
     let $Emp_Personal_Address2  = substr($Emp_Personal_Address2,1,30)
     let $Emp_City               = substr($Emp_City,1,30)

     let $Emp_State = rtrim($Emp_State,' ')
     let #len = length($Emp_State)
     if #len > 2
       let $Emp_State = substr($Emp_State,1,2)
     else
       if #len = 0               !Foreign
          let $Emp_State = '  '
       else
          let $Emp_State = rpad($Emp_State,2,' ')
       end-if
     end-if

     let $Emp_Zip = rtrim($Emp_Zip,' ')
     let #len = length($Emp_Zip)
     if #len = 5
       let $Emp_Zip = $Emp_Zip || '    '
     else
       if #len = 0               !Foreign
          let $Emp_Zip = '         '
       else
          let $Emp_Zip = rpad($Emp_Zip,9,' ')
       end-if
     end-if

     !10/11/05
     let $Deptid = rtrim($Deptid,' ')
     let #len = length($Deptid)

     if #len < 6
          let $Deptid = rpad($Deptid,6,' ')
     end-if

     let $Deptid  = substr($Deptid,1,6)
     let $Ee_Sort = substr($Ee_Sort,1,33)
     let $Emp_State              = substr($Emp_State,1,2)  !added 9/20/05 per KPMG

     
     #if {SITE_ID} = 'UAZ1'
       do Custom-Sort-Option   
     #endif
     
     #ifdef BLANK_deceased
         let $deceased = ' '
     #endif
     
     !9/8/5 for Alcoa's problem sub rpad($blank,1,' ') with ' ' below
     !----------------------------------------------------------------

     let $qout_str = rtrim($rectp,' ') ||
                     ' ' ||
                     substr($Generated_Emplid,1,6) ||
                     rpad($Emp_Emplid,12,' ') ||
                     rpad($Emp_SSN,9,' ') ||
                     ' ' ||
                     rpad($Emp_SSN_change,9,' ') ||
                     ' ' ||
                     rpad($FirstName,17,' ') ||
                     substr($MiddleName,1,1) ||
                     '                ' ||
                     rpad($LastName,20,' ') ||
                     rpad($Emp_Personal_Address1,30,' ') ||
                     rpad($Emp_Personal_Address2,30,' ') ||
                     rpad($Emp_City,30,' ') ||
                     substr($Emp_State,1,2) ||
                     substr($Emp_Zip,1,9) ||
                     rpad($Master_Tax_date_erec,15,' ') ||
                     substr($Online_Posting_Indicator,1,1) ||
                     substr($StatutoryEe,1,1) ||             !new
                     substr($PensionPlanFlag,1,1) ||         !new
                     substr($Third_Party_Sick,1,1) ||        !new
                     rtrim($Emp_Sex,' ') ||                 !new
                     rtrim($Empl_Type,' ') ||               !Hourly (H),1, Salary (S)...
                     substr($Emp_Hire_Yr,1,4)  ||
                     substr($Emp_Hire_Mo,1,2)  ||
                     substr($Emp_Hire_Day,1,2) ||
                     substr($Trm_Hire_Yr,1,4)  ||            !6/11/04 fixed
                     substr($Trm_Hire_Mo,1,2)  ||
                     substr($Trm_Hire_Day,1,2) ||
                     rpad($deceased,1,' ') ||                !new - changed from rtrim to rpad 09/23/16
                     '                ' ||
                     rpad($Deptid,6,' ') ||                 !new
                     substr($Ee_print_ipay,1,1) ||           !new n/i
                     substr($Ee_Pull_Mail,1,1) ||            !new n/i
                     rpad($Ee_Sort,33,' ') ||               !new n/i
 		     rpad($Employee_Residential_Address1,40,' ') ||
                     rpad($Employee_Residential_Address2,40,' ') ||
                     rpad($Employee_Residential_City,30,' ')     ||
                     substr($Employee_Residential_State,1,2)     ||
                     substr($Employee_Residential_zip,1,9)   


     #ifdef debug_e_rec
        #debugd show 'Writing E rec to Table '
     #endif
     do Log-E-rec-data

   #else

    #ifdef debug_e_rec
        #debugd show 'Writing E rec to File ' $Filename
    #endif

    Write 1 FROM     $rectp:1
                     $blank:1
                     $Generated_Emplid:6
                     $Emp_Emplid:12
                     $Emp_SSN:9
                     $blank:1
                     $Emp_SSN_change:9
                     $blank:1
                     $FirstName:17
                     $MiddleName:1                 !1char middle init + rest of middle name
                     $blank:16                     !changed 9/22/04 from midname to midinit
                     $LastName:20
                     $Emp_Personal_Address1:30
                     $Emp_Personal_Address2:30
                     $Emp_City:30
                     $Emp_State:2
                     $Emp_Zip:9
                     $Master_Tax_date_erec:15
                     $Online_Posting_Indicator:1
                     $StatutoryEe:1            !new
                     $PensionPlanFlag:1        !new
                     $Third_Party_Sick:1       !new
                     $Emp_Sex:1                !new
                     $Empl_Type:1              !Hourly (H), Salary (S)...
                     $Emp_Hire_Yr:4
                     $Emp_Hire_Mo:2
                     $Emp_Hire_Day:2
                     $Trm_Hire_Yr:4            !6/11/04 fixed
                     $Trm_Hire_Mo:2
                     $Trm_Hire_Day:2
                     $deceased:1               !new
                     $blank:16
                     $Deptid:6                 !new
                     $Ee_print_ipay:1          !new n/i
                     $Ee_Pull_Mail:1           !new n/i
                     $Ee_Sort:33               !new n/i
 		     $Employee_Residential_Address1:40
                     $Employee_Residential_Address2:40
                     $Employee_Residential_City:30
                     $Employee_Residential_State:2
                     $Employee_Residential_zip:9   


      add 1 to #company_trailer_reccnt
      add 1 to #reccnt

    #endif

    #ifdef debug_e_rec
      #debugd show 'E rec completed'
    #endif

    !Get Box totals for employee before 'W' recs get written
    if rtrim($adp_w2_records,' ') = 't'
      #if {DEDUCTS_AND_EARNINGS_MODE} <> 'NONE'
           do Extract-Box99
      #endif
    end-if

 #if {SITE_ID} = 'CZB1'
   if $RptQtr = '4'                   !even if we don't ask for W-2 data... pull it into the E record
     let $adp_w2_records = $save_adp_w2_records
   end-if
 #endif

   #ifdef  enable_performance_monitor
      do Get-Current-Time
      move 'Write-employee-rec' to $debug-proc1
      move ' '    to $debug-table1
      do log-delta-time
   #endif

end-procedure


#ifdef PA_PULL_PO_BOX_ADDRESSES    

begin-procedure  PRINT-PA-PULL-PO-BOX-ADDRESSES    !This the HOME/OTH2 addresses for PA residents who have P.O. Box MAILING Address b. set the PULL flag to pull the W-2's
 if #PA_PULL_ADDR >  0
   let #Header_type = 80
   let $ReportTitle  = 'ADP Employment Tax, Pull PA P.O.Box Addresses, using address type: {PA_PULL_PO_BOX_ADDRESSES}'             
    
   let #PA_Pull = 0
   while (#PA_Pull < #PA_PULL_ADDR)
      get $Emp $Sav1 $New1 $n from PA_PULL_ADDR(#PA_Pull) Emplid Addr1_Orig Addr1_New Name
      if #current-line > 56
         New-Page
         print ' ' (+1,1)
      end-if
      add 1 to #PA_Pull
      Print #PA_Pull     (+1,1) edit 99,999
      print $Emp         (,11)
      print 'P'          (,27)
      print $Sav1        (,37,30)
      print $New1        (,68,30)
      print $n           (,99,30)
    end-while
    New-Page
  end-if
end-procedure


begin-procedure  check-for-PA-EIT-Balances

  let $PA_EIT_BALANCES = 'f'
  let #LPA1 = 0
  let $found = 'f'
  while #LPA1 < #LAST_TAXBALANCE_CNT
    Add 1 to #LPA1
    get $TEST_ST $TEST_LOCALITY $TEST_TAX_CLASS from TAXBALANCE(#LPA1) TaxBalance_State TaxBalance_Locality TaxBalance_Tax_Class
    if  $TEST_ST = 'PA' and $TEST_LOCALITY <> '' and $TEST_TAX_CLASS = 'H'   
      let $PA_EIT_BALANCES = 't'
      break 
    end-if
  end-while
    
end-procedure
   
begin-procedure  PA-PULL-PO-BOX-ADDRESSES    !This the HOME/OTH2 addresses for PA residents who have P.O. Box MAILING Address b. set the PULL flag to pull the W-2's
 
 let $A1 = translate($Emp_Personal_Address1,'.'  ,'')   
 let $A1 = upper(translate($A1,' '  ,'')  )
 if substr($A1,1,5) = 'POBOX'
   
  !20141002 - look for PA EIT Tax balances
  do check-for-PA-EIT-Balances
  if $PA_EIT_BALANCES = 't'

   let $Sav_Personal_Address1 = $Emp_Personal_Address1
   if $SelectEmplid <> ''
     show 'PA-PULL-PO-BOX-ADDRESSES: {PA_PULL_PO_BOX_ADDRESSES} Looking for Alternative address for original address 1 of: ' $Sav_Personal_Address1
   end-if

BEGIN-SELECT 
ADDR_OVR.ADDRESS1
ADDR_OVR.ADDRESS2
ADDR_OVR.CITY
ADDR_OVR.STATE 
ADDR_OVR.POSTAL 

     if $SelectEmplid <> ''
       show 'PA-PULL-PO-BOX-ADDRESSES: {PA_PULL_PO_BOX_ADDRESSES} retrived: ' &ADDR_OVR.ADDRESS1 ' ' &ADDR_OVR.ADDRESS2 ' ' &ADDR_OVR.CITY ' ' &ADDR_OVR.STATE ' ' &ADDR_OVR.POSTAL
     end-if
  
     let $Emp_Personal_Address1 = rtrim(&ADDR_OVR.ADDRESS1,' ')
     let $Emp_Personal_Address2 = rtrim(&ADDR_OVR.ADDRESS2,' ')
     let $Emp_City              = rtrim(&ADDR_OVR.CITY,' ')
     let $Emp_State             = rtrim(&ADDR_OVR.STATE ,' ')
     let #len = length($Emp_State)
     if #len > 2
       let $Emp_State = substr($Emp_State,1,2)
     else
       if #len = 0               !Foreign
          let $Emp_State = '  '
       else
          let $Emp_State = rpad($Emp_State,2,' ')
       end-if
     end-if

     let $Emp_Zip = rtrim(&ADDR_OVR.POSTAL,' ')
     let #len = length($Emp_Zip)
     if #len = 5
       let $Emp_Zip = $Emp_Zip || '    '
     else
       if #len = 0               !Foreign
          let $Emp_Zip = '         '
       else
          let $Emp_Zip = rpad($Emp_Zip,9,' ')
       end-if
     end-if

     let $Ee_Pull_Mail = 'P'  
     let $n = rtrim($FirstName, ' ') || ' ' || rtrim($MiddleName, ' ') || ' ' || rtrim($LastName, ' ') || ' ' 
     put $Current_Emplid $Sav_Personal_Address1 $Emp_Personal_Address1 $n into PA_PULL_ADDR(#PA_PULL_ADDR) Emplid Addr1_Orig Addr1_New Name
     add 1 to #PA_PULL_ADDR
  
  FROM PS_ADDRESSES ADDR_OVR {NOLOCK_SQL}
   WHERE ADDR_OVR.EMPLID      = $Current_Emplid
     AND   ADDR_OVR.ADDRESS_TYPE = $PA_PULL_PO_BOX_ADDRESSES
     AND   ADDR_OVR.EFF_STATUS = 'A'
     AND   ADDR_OVR.EFFDT = (SELECT MAX(EFFDT) FROM PS_ADDRESSES {NOLOCK_SQL}
      WHERE  EMPLID       = ADDR_OVR.EMPLID
        AND  ADDRESS_TYPE = ADDR_OVR.ADDRESS_TYPE
        AND  EFFDT <= $AsofDate)
      
#ifdef SELECT_WITH_UR
 {SELECT_WITH_UR} with ur
#endif
end-select

   end-if  !PA EIT balances
  end-if  !PO Box

end-procedure
#endif

#ifdef SPLIT_LONG_ADDRESSES
begin-procedure SPLIT-LONG-ADDRESSES

   let #lastspinx = 0
   let $Emp_Personal_Address1 = rtrim($Emp_Personal_Address1,' ')
   let $Emp_Personal_Address2 = rtrim($Emp_Personal_Address2,' ')
   let #Len1 = length($Emp_Personal_Address1)
   let #Len2 = length($Emp_Personal_Address2)
   
   if #Len1 > 30 and #Len2 = 0  !break it up at the last space in the first address line
     let #linx = 1
     while #linx <= 30
       if substr($Emp_Personal_Address1,#linx,1) = ' '
         let #lastspinx = #linx
       end-if
       add 1 to #linx
     end-while
   
     if #lastspinx > 0
       let $Emp_Personal_Address2 = substr($Emp_Personal_Address1,#lastspinx + 1, #Len1 - #lastspinx )
       let $Emp_Personal_Address1 = substr($Emp_Personal_Address1,1,#lastspinx - 1)
       show 'SPLIT_LONG_ADDRESS into Address1 and Address2: Emplid: ' $Current_Emplid 
       show    '1. ' $Emp_Personal_Address1 
       show    '2. ' $Emp_Personal_Address2  
     end-if
     
   end-if
      
end-procedure
#endif


#ifdef APPEND_SUFFIX
begin-procedure append-suffix

  if #rptyear >= 2007
   if rtrim($NameSuffix,' ') <> ''
    let $LastName_tmp = rtrim($LastName,' ') || ' ' || rtrim($NameSuffix,' ')
    if length($LastName_tmp) <= 20
      move $LastName_tmp to $LastName
    end-if
   end-if
  end-if

end-procedure

#endif

#if {SITE_ID} = 'PRD1'

!-----------------------------------------------------------------------------
! 12/5/7: W-2 Sort Criteria
!   1.  Active / Terminated - Terminated mailed to associates homes, Actives are further sorted as stated below:
!    Actives:
!      2.  Mail Drop  - 8 characters alphanumeric
!      3.  Account Code  - 8 characters numeric
!      4.  Last Name - 35 characters
!      5.  First Name - 20 characters
!-----------------------------------------------------------------------------

begin-procedure PRD1-Sort

 if $Empl_status = 'A'

  LET $pay_mail_drop      = ''

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
BEGIN-SELECT
PAY.MAIL_DROP

  !decode(Pay.paycheck_dist_optn,'I','B','X','A',pay.paycheck_dist_optn)

  Let $pay_mail_drop      = &PAY.MAIL_DROP

  From  PS_PAYROLL_DATA PAY
   Where PAY.EMPLID = $Current_Emplid
    and  PAY.COMPANY = $Current_Company !added 1/25/07

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  let $Ee_Sort = 'A ' || $empl_status || rtrim($pay_mail_drop,' ') || ' ' || rtrim($Job_Acct_Cd,' ') || ' ' || rtrim($LastName,' ') || ' ' || rtrim($FirstName,' ')
 else
   let $Ee_Sort = 'A ' || $empl_status
 end-if

end-procedure
#endif

#ifdef USE_NAICS_CODE
begin-procedure get-NAICS-Code

  LET $wc_code = ''

 ! if rtrim('{USE_NAICS_CODE}',' ') <> ''
 !   let $NAICS_Company = '{USE_NAICS_CODE}'
 ! else
 !   let $NAICS_Company = $Current_Company
 ! end-if
  
  
begin-select
ESTN.NAICS

   let $wc_code = rtrim(&ESTN.NAICS,' ')

   FROM PS_ESTAB_TBL_USA ESTN 
      WHERE ESTN.ESTABID    = $Location          AND
            ESTN.EFFDT      = (SELECT MAX(EFFDT)
            FROM PS_ESTAB_TBL_USA
             WHERE ESTABID    = ESTN.ESTABID     AND
                   EFFDT     <= $Qtr_End_Native)

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  if $SelectEmplid <> ''
     show 'get-NAICS-Code for ' $Location ' --> wc_code (NAICS) = ' $wc_code
  end-if

end-procedure
#endif
    
begin-procedure Get-Termination-Date

#if {PeopleSoft_Version} < '8.9'

  #ifdef show_selects_adp
    #debugd show 'Get-Termination-Date'
  #endif

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

 let $Personal_Orig_Trm_DTU = ''

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
begin-select
EE.TERMINATION_DT

  if rtrim(&EE.TERMINATION_DT,' ') <> ''
    Do Convert-to-DTU-Date(&EE.TERMINATION_DT, $Personal_Orig_Trm_DTU)
  end-if

  FROM PS_EMPLOYMENT EE {NOLOCK_SQL}
    WHERE EMPLID = $Current_emplid

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Get-Termination-Date' to $debug-proc1
     move ' '    to $debug-table1
     do log-delta-time
  #endif

#endif   !if 8.9+.... TERMINATION_DT comes from pbzqtr.sqr.. PS_JOB

    if ($Personal_Orig_Trm_DTU >= $Qtr_Start_DTU) AND
       ($Personal_Orig_Trm_DTU <= $Qtr_End_DTU)
      let $Trm_Hire_Mo           = substr($Personal_Orig_Trm_DTU,6,2)
      let $Trm_Hire_Day          = substr($Personal_Orig_Trm_DTU,9,2)
      let $Trm_Hire_Yr           = substr($Personal_Orig_Trm_DTU,1,4)
    else
      let $Trm_Hire_Mo           = '  '
      let $Trm_Hire_Day          = '  '
      let $Trm_Hire_Yr           = '    '
    end-if

end-procedure

#ifdef USE_UI_RPT_CD_FOR_MN_MI_LOCATION

begin-procedure Get-General-Rpt-Unit-Number       ! Called to get UI_RPT_CODE (5 chars) into extract

    if $SelectEmplid <> ''
      show 'Get-General-Rpt-Unit-Number ' $State_Trimmed ' ' $location ' ' $tax_location_cd ' ' $Current_Company
      #ifdef SUBTOTAL_FEIN_EXTRACT
         show 'FEIN: $FEIN_COMPANIES_TO_INCLUDE_UI ' $FEIN_COMPANIES_TO_INCLUDE_UI
      #endif
      #ifdef SUBTOTAL_ADP_COMPID_EXTRACT
         show 'ADPC: $FEIN_COMPANIES_TO_INCLUDE_UI ' $FEIN_COMPANIES_TO_INCLUDE_UI
      #endif
      #ifdef USE_LOCATION_CD
        show ' Using location:        ' $location
      #else
        show ' Usingtax location cd   ' $tax_location_cd 
      #endif
    end-if

    move ' ' to $UiRptCode
    move '00000'      to $UiRptCode5
    move '0000000000' to $UiRptCode10
    if $State_trimmed = 'NM'
     move '{NM_UI_LOCATION_DFLT}' to $UiRptCode5
    end-if
    if $State_trimmed = 'IN'
     move '{IN_UI_LOCATION_DFLT_FIXED}' to $UiRptCode10
    end-if

begin-SELECT
UX.COMPANY
UX.UI_RPT_CODE
#ifdef USE_EMPLOYER_ID_EXT_FOR_MN_MI
UX.EMPLOYER_ID_EXT
#endif

  #ifdef USE_EMPLOYER_ID_EXT_FOR_MN_MI
   move &UX.EMPLOYER_ID_EXT to $UiRptCode
  #else
   move &UX.UI_RPT_CODE to $UiRptCode
  #endif

  #ifdef USE_UI_RPT_CODE_FOR_OTHER_STATES
    #if {SITE_ID} <> 'SUR1'
      move &UX.UI_RPT_CODE to $UiRptCode
    #else
      if $State_trimmed <> 'MN'
        move &UX.UI_RPT_CODE to $UiRptCode
      end-if
    #endif
  #endif

!5  
  let $w = rtrim(translate($UiRptCode,'#&*-,./','       '),' ')
  unstring $w by ' ' into $w1 $w2 $w3 $w4 $w5
  string $w1 $w2 $w3 $w4 $w5 by '' into $w
  let #l = length($w)
  if #l < 5                           ! may have alpha
    let $UiRptCode5     = substr('00000',1,5 - #l) || $w
  else
    let $UiRptCode5     = substr($w,1,5)
  end-if

!10
 if $State_trimmed = 'IN'
  let $w = rtrim(translate($UiRptCode,'#&*-,./','       '),' ')
  unstring $w by ' ' into $w1 $w2 $w3 $w4 $w5 $w6 $w7 $w8 $w9 $w10
  string $w1 $w2 $w3 $w4 $w5 $w6 $w7 $w8 $w9 $w10 by '' into $w
  let #l = length($w)
  if #l < 10                           ! may have alpha
    let $UiRptCode10     = substr('0000000000',1,10 - #l) || $w
  else
    let $UiRptCode10     = substr($w,1,10)
  end-if
 end-if
 
 if $SelectEmplid <> ''
    show 'Get-General-Rpt-Unit-Number retrieved: UiRptCode5 = ' $UiRptCode5 ' for company ' &UX.COMPANY ' in state ' $state_trimmed ' UiRptCode10 = ' $UiRptCode10
 end-if
  
 #ifdef USE_LOCATION_CD
  FROM PS_CO_UI_RPTCD_TBL UX {NOLOCK_SQL}, PS_LOCATION_TBL UXI9 {NOLOCK_SQL}
 #else
  FROM PS_CO_UI_RPTCD_TBL UX {NOLOCK_SQL}, PS_TAX_LOCATION1 UXI9 {NOLOCK_SQL}
 #endif
    WHERE
    
!4/8/2014 - change to pull in UI code using the set of companies for FEIN or ADP Compid rollups, not just the current company
!----------------------------------------------------------------------------------------------------------------------------
   #ifdef SUBTOTAL_FEIN_EXTRACT
    #ifdef MVS
      \$FEIN_COMPANIES_TO_INCLUDE_UI\
    #else
      [$FEIN_COMPANIES_TO_INCLUDE_UI]
    #endif
   #else
     #ifdef SUBTOTAL_ADP_COMPID_EXTRACT
       #ifdef MVS
        \$FEIN_COMPANIES_TO_INCLUDE_UI\
       #else
        [$FEIN_COMPANIES_TO_INCLUDE_UI]
       #endif
     #else
        UX.COMPANY         = $Current_COMPANY
     #endif
   #endif
   
   #ifdef USE_LOCATION_CD
        AND UX.LOCATION = $location
   #else
        AND UX.LOCATION = $tax_location_cd 
   #endif
   #ifdef USE_LOCATION_CD
        AND UX.LOCATION = UXI9.LOCATION
   #else
        AND UX.LOCATION = UXI9.TAX_LOCATION_CD 
   #endif
   AND UXI9.STATE         = $state_trimmed
   AND UX.EFFDT  =  (SELECT MAX(EFFDT)
       FROM PS_CO_UI_RPTCD_TBL {NOLOCK_SQL}
       WHERE COMPANY    = UX.COMPANY
         AND LOCATION   = UX.LOCATION
         AND EFFDT     <= $Qtr_End_Native )
 
#ifdef SELECT_WITH_UR
 {SELECT_WITH_UR} with ur
#endif
end-select

end-procedure

#endif


!***************************************************
begin-procedure write-wage-rec  !called for each TAX for each employee

#ifndef TESTING_NO_WAGE_PROCESSING

  #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
  #endif

  if $SelectEmplid <> ''
    show 'Write-wage-rec... start.  taxcode --> ' $state_trimmed $class_trimmed $local_trimmed ', wc_rate = ' $wc_rate ', wc_code = ' $wc_code ', ui = ' $out_deptid
  end-if

  move '0 ' to $exemptions
  move ' ' to $Marital
  move ' ' to $SUT_Exempt_flag
  move ' ' to $SDI_Exempt_flag
  move 'N' to $FLI_Status_flag

  if $state_trimmed <> '$U' and $local_trimmed = ''

    if $prior_state_tax_data_state <> $state_trimmed
      do Get-State-Tax-info
      let $prior_state_tax_data_state = $state_trimmed

      if $class_trimmed = $state_futa_tax_class and $SUT_Exempt = 'Y' !20130410
       let #inx_sf = INSTR($SUT_Exempt_state_str, $state_trimmed, 1)  !20130410
       if #inx_sf > 0                                                 !20130410
         #debugd show 'Message: Bypassing State FUTA due to SUT_Exempt status, EMPLID ' $Current_Emplid ' ' $state_trimmed $class_trimmed  !20130410
         #debugd show '                       QTD Tax     State FUTA bypassed       = ' #TaxBalance_Tax_Qtd   edit 999,999,999.99          !20130410
         #debugd show '                       QTD Taxable State FUTA bypassed       = ' #TaxBalance_Txgrs_Qtd edit 999,999,999.99          !20130410
         #debugd show '                       YTD Taxable State FUTA bypassed       = ' #TaxBalance_Tax_Ytd   edit 999,999,999.99          !20130410
         #debugd show '                       YTD Tax     State FUTA bypassed       = ' #TaxBalance_Txgrs_Ytd edit 999,999,999.99          !20130410
         Add #TaxBalance_Tax_Qtd   to #Hash_Ignore_Tax_QTD            !20130410
         Add #TaxBalance_Tax_Ytd   to #Hash_Ignore_Tax_YTD            !20130410
         Add #TaxBalance_Txgrs_Qtd to #Hash_Ignore_Txgrs_QTD          !20130410
         Add #TaxBalance_Txgrs_Ytd to #Hash_Ignore_Txgrs_YTD          !20130410
         goto bypass_tax_balance_adp303q                              !20130410 
       end-if                                                         !20130410
      end-if
      
    end-if

    !if the PNA_FLI_STATUS field is not in the PS_STATE_TAX_DATA table.. we need to determine the fli_status flag
    !------------------------------------------------------------------------------------------------------------
    #ifndef 08F_PNA_FLI_STATUS
     if $state_trimmed = 'NJ' AND {FLI_STATUS_SUBJECT_TAX_CLASS_CRITERIA} AND (#TaxBalance_Tax_Ytd > 0 or #TaxBalance_Txgrs_Ytd > 0)
       let $NJ_FLI_EE_Taxes = 'Y'
       if $SelectEmplid <> ''
         #debugd show 'NJ_FLI_EE_Taxes Flag = ' $NJ_FLI_EE_Taxes ' due to taxcode NJ ' $Class_trimmed ', YTD taxes of ' #TaxBalance_Tax_Ytd
       end-if
     end-if
    #endif

    !Track the # of associates with the FLI status flag set
    !------------------------------------------------------
    #ifdef 08F_PNA_FLI_STATUS
      #ifdef FLI_ON_ALL_NJ_RECS
       if $state_trimmed = 'NJ'
        let $FLI_STATUS_flag = $FLI_STATUS
       end-if
      #else
       if $state_trimmed = 'NJ' and
         ($class_trimmed = 'I'  or $class_trimmed = 'O'  or $class_trimmed = 'Y'  or $class_trimmed = 'U')
        let $FLI_STATUS_flag = $FLI_STATUS
       end-if
      #endif
    #else
      if $SelectEmplid <> ''
        #debugd show 'FLI: not 08F_PNA_FLI_STATUS: ' $state_trimmed $class_trimmed ' $FLI_STATUS = ' $FLI_STATUS
      end-if
      if ($state_trimmed = 'NJ') and ($class_trimmed = 'I'  or $class_trimmed = 'O'  or $class_trimmed = 'Y'  or $class_trimmed = 'U') 
         or ({FLI_STATUS_SUBJECT_TAX_CLASS_CRITERIA} or $FLI_STATUS = 'Y' ) !20121017.b changed first criteria from 'and' to 'or'
         let $FLI_STATUS_flag = 'Y'
         if $SelectEmplid <> ''
           #debugd show 'FLI: not 08F_PNA_FLI_STATUS: FLI_STATUS_flag set to ' $FLI_STATUS_flag ' (due to FLI Criteria)'
         end-if           
      end-if
    #endif

    if $state_trimmed = 'NJ' and $class_trimmed = 'U'
      if $SelectEmplid <> ''
        #debugd show 'FLI_STATUS Flag on NJU = ' $FLI_STATUS_flag
      end-if
      if $FLI_STATUS_flag = 'Y'
          add 1 to #FLI_STATUS_Y
      else
          add 1 to #FLI_STATUS_N
      end-if
    end-if

    if $class_trimmed = 'H'
       let $exemptions = $SWT_Allowances
       let $marital    = $SWT_mar_status
    end-if
    if {SDI_Exempt_Criteria}
       move $SDI_Exempt to $SDI_Exempt_flag
    end-if
    if $class_trimmed = 'U' or $class_Trimmed = 'S'
       move $SUT_Exempt to $SUT_Exempt_flag
    end-if
  end-if

  !12/2/04 Added #Box_01 for ALL the Federal taxcodes for box 1 recon
  !-------------------------------------------------------------------
  if  ($class_trimmed = 'H'   AND $local_trimmed = '') AND
     ($state_trimmed = '$U'  OR
      $state_trimmed = 'PR'  OR
      $state_trimmed = 'GU'  OR
      $state_trimmed = 'VI'  OR
      $state_trimmed = 'AS')

    let #Box_01 = #TaxBalance_Txgrs_Ytd

 end-if

  if $state_trimmed = '$U' AND $class_trimmed = 'H'
    let $exemptions = $FWT_Allowances
    let $marital    = $FWT_mar_status
  end-if

  !Q4, 2010 logic to set the flag needs to be dependent on the person receiveing their last check of the quarter in NM and them still being active
  !------------------------------------------------------------------------------------------------------------------------------------------------
  if $state_trimmed = 'NM' and rtrim($NM_WC_flag,' ') = ''
      do get_NM_WC_flag  !in adpq210.sqc
      if $SelectEmplid <> ''
         show 'Write-wage-rec: New Mexico W/C Flag for Taxcode: ' $state_trimmed $class_trimmed ' NM_WC_flag --> ' $NM_WC_flag
      end-if
      !10/14/10 change to write to the NMx {NM_WORKERS_COMP_TAX_CLASS}
      !---------------------------------------------------------------------
  end-if
  if $state_trimmed = 'NM' and ($class_trimmed = 'H' or $class_trimmed = 'U') and $local_trimmed = ''
      if $NM_WC_flag = 'Y'
        let $FLI_STATUS_flag = 'Y'
      else
        let $FLI_STATUS_flag = 'N'  ! 20140724 added this line for associates with both NJ and NM records
      end-if
      if $SelectEmplid <> ''
         show 'Write-wage-rec: New Mexico W/C Flag for Taxcode: ' $state_trimmed $class_trimmed $local_trimmed ' FLI_STATUS_flag --> ' $FLI_STATUS_flag
      end-if
      if $class_trimmed = 'H' or $class_trimmed = 'U'  ! 20140721 - add 'H', clear it after the SUI record.. it's show up on the NMH and NMU recs as requested
        let $NM_WC_flag = ''
      end-if
  end-if
  !----------------------------------------------------------------------------------------------------------------
  !10/6/5 moved up here as $UD is first state record to process
  !12/28/2011 - Need to remove the Plan code for salaried employees so that the code no longer prints on the W-2 Form Box 14.
  !           - Leave Hourly code alone.
  !------------------------------------------------------------
    if ($state_trimmed <> '$U' AND ($class_trimmed = 'D' OR $class_trimmed = 'W') ) !SDI EE or VDI EE
     if rtrim($private_sdi_acct,' ') = ''  !added 12/29/04
      #if {SITE_ID} = 'MAC1'
       if $state_trimmed = 'NJ'   !1/15/2010 added this line
        !S        NJ salary employees to EMPL TYPE/VDI Plan                         DI P.P. 226
        !H        NJ hourly employees to EMPL TYPE/VDI Plan                         DI P.P. 227
        let $Empl_Type_MAC1 = rtrim(&JB.EMPL_TYPE,' ')
	if $Empl_Type_MAC1 = 'S' and (#RptYear < 2011 or (#RptYear = 2011 and #RptQtr < 4))
	 let $private_sdi_acct = '226'
	end-if
        if $Empl_Type_MAC1 = 'H'
	 let $private_sdi_acct = '227'
	end-if
	if $SelectEmplid <> ''
	  #debugd show 'MAC1: Custom private_sdi_acct = ' $private_sdi_acct ', for Empl Type = ' $Empl_Type_MAC1
	end-if
       end-if                     !1/15/2010 added this line
      #else
       if $state_trimmed = 'NJ'
         #ifdef NJ_SDI_PRIVATE_PLAN_OVERRIDE
           let $private_sdi_acct = '{NJ_SDI_PRIVATE_PLAN_OVERRIDE}'
           if $SelectEmplid <> ''
             #debugd show 'NJ_SDI_PRIVATE_PLAN_OVERRIDE: Custom private_sdi_acct = ' $private_sdi_acct
           end-if
         #endif
       end-if

       !1/8/10 = added the $SDI_Exempt = 'Y' clause below.. se we only pull private sdi acct if exempt from state plan
       !-------------------------------------------------------------------------------------------------------------------
       if $SelectEmplid <> ''
         show 'Write-wage-rec: private_sdi_acct = ' $private_sdi_acct ', SDI_Exempt = ' $SDI_Exempt
       end-if
       if rtrim($private_sdi_acct,' ') = '' and $SDI_Exempt = 'Y' ! <------------------------ this is the 'normal' call to get the private plan for SDI ---
         move $state_trimmed to $VDI_state_trimmed
         do get-private-sdi-acct
       end-if

      #endif
     end-if
    end-if

  if $local_trimmed <> ''
    do Get-Local-Tax-info        !$LWT_Allowances ('99')
    let $exemptions = $LWT_Allowances
    let $marital    = $LWT_mar_status
  end-if

       let $taxcode = rtrim($output_taxcode,' ')

       let $TaxBalance_Gross_Qtd = $TaxBalance_Nlgrs_Qtd  !Subject and Gross same for now...
       let $TaxBalance_Gross_Ytd = $TaxBalance_Nlgrs_Ytd  !Subject and Gross same for now...

       !12/3/03 - force invalid values to 'S'
       !-------------------------------------
       evaluate $marital
        when = 'S'
        when = 'M'
        when = 'H'
        when = ' ' !added 8/27/08 to leave ' ' in the file
          break
        when-other
          let $marital = 'S'
          break
       end-evaluate

  #ifndef BYPASS_12A_12B

       !Uncollected Tips  (on $UD and $UF tips records)
       !-------------------------------------------------
       let #12A_QTD = 0
       let #12B_QTD = 0
       let #t = 0
       do Format-Number(#t,$Uncol_tips_QTD, '999999999999999mi')

       if ($state_trimmed = '$U' AND $class_trimmed = 'D') 
       
        let #12A_QTD = 0
        #ifdef TIPS_DRIVE_BOX_12A_QTD
          do Tips-Box-12A-QTD  !set #12A_QTD 
        #else
         if $12A_mapped = 't'
          let $Box = '12A'
          do get-specific-box-deducts
          let #12A_QTD = #box_amt
          #ifdef SET_QTD_to_YTD_for_Box12
            if #box_amt = 0
              let #12A_QTD = #box_amt_ytd
            end-if
          #endif
         end-if
        #endif
        
        let #t = #12A_QTD * 100
        do Format-Number(#t,$Uncol_tips_QTD, '999999999999999mi')
        !add #12A_QTD to #12A_QTD_Company
       end-if

       if ($state_trimmed = '$U' AND $class_trimmed = 'F') 
        let #12B_QTD = 0
        #ifdef TIPS_DRIVE_BOX_12B_QTD
          do Tips-Box-12B-QTD  !set #12B_QTD 
        #else
         if $12B_mapped = 't' 
          let $Box = '12B'
          do get-specific-box-deducts
          let #12B_QTD = #box_amt
          #ifdef SET_QTD_to_YTD_for_Box12
            if #box_amt = 0
              let #12B_QTD = #box_amt_ytd
            end-if
          #endif
         end-if
        #endif
        let #t = #12B_QTD * 100
        do Format-Number(#t,$Uncol_tips_QTD, '999999999999999mi')
        !add #12B_QTD to #12B_QTD_Company
       end-if

  #else
       let #12A_QTD = 0
       let #12B_QTD = 0
       let #t = 0
       do Format-Number(#t,$Uncol_tips_QTD, '999999999999999mi')
  #endif

  #ifndef BYPASS_12M_12N

       !Uncollected GTL   (n/a)
       !-------------------------------------------------
       let #12M_QTD = 0
       let #12N_QTD = 0
       let #t = 0
       do Format-Number(#t,$Uncol_gtl_QTD, '999999999999999mi')

       #ifdef SET_QTD_12M_12N_to_YTD_BOX_AMOUNTS
       if ($state_trimmed = '$U' AND $class_trimmed = 'D')
       #else
       if ($state_trimmed = '$U' AND $class_trimmed = 'D') and $12M_mapped = 't' !Get 12M
       #endif

         let #12M_QTD = 0
         let $Box = '12M'
         #ifdef SET_QTD_12M_12N_to_YTD_BOX_AMOUNTS
           do set-qtd-to-year-end-box  !YTD amount for $Box becomes --> #box_amt
         #else
           do get-specific-box-deducts
         #endif

         let #12M_QTD = #box_amt

         #ifdef SET_QTD_to_YTD_for_Box12
           if #box_amt = 0
             let #12M_QTD = #box_amt_ytd
           end-if
         #endif

         let #t = #12M_QTD * 100
         do Format-Number(#t,$Uncol_gtl_QTD, '999999999999999mi')
         add #12M_QTD to #12M_QTD_Company
       end-if

       #ifdef SET_QTD_12M_12N_to_YTD_BOX_AMOUNTS
       if ($state_trimmed = '$U' AND $class_trimmed = 'F')
       #else
       if ($state_trimmed = '$U' AND $class_trimmed = 'F') and $12N_mapped = 't' !Get 12N
       #endif

         let #12N_QTD = 0
         let $Box = '12N'
         #ifdef SET_QTD_12M_12N_to_YTD_BOX_AMOUNTS
           do set-qtd-to-year-end-box  !YTD amount for $Box becomes --> #box_amt
         #else
           do get-specific-box-deducts
         #endif

         let #12N_QTD = #box_amt

         #ifdef SET_QTD_to_YTD_for_Box12
           if #box_amt = 0
             let #12N_QTD = #box_amt_ytd
           end-if
         #endif

         let #t = #12N_QTD * 100
         do Format-Number(#t,$Uncol_gtl_QTD, '999999999999999mi')
         add #12N_QTD to #12N_QTD_Company
       end-if

  #else
       let #12M_QTD = 0
       let #12N_QTD = 0
       let #t = 0
       do Format-Number(#t,$Uncol_gtl_QTD, '999999999999999mi')
  #endif

       let $Employee_Probationary_Status = 'N'                       !3.03  Y/N

       let $erncd_sel = '1=1'  !default

        !added 3/22/05
        !----------------
        let #Sick_Pay_Qtd_nt = 0
        let #Sick_Pay_Ytd_nt = 0
        #ifdef THIRD_PARTY_SICK_EMPLOYER                      !NY - SUI employer sick pay amounts
          if ($state_trimmed = 'NY' AND $class_trimmed = 'U')
           let $Erncd_Sel = '{THIRD_PARTY_SICK_EMPLOYER}'

           do Get-Misc-Earns                       !erncd_sel returns #Earn_QTD, #Earn_YTD from earnings details by state
           let #Sick_Pay_Qtd_nt = #Earn_QTD
           add #Sick_Pay_Qtd_nt to #Sick_Pay_amt_er_Qtd_Company
          end-if
        #endif

        !added 3/27/06
        !----------------
        #ifdef THIRD_PARTY_NON_TAXABLE                      !Federal non-taxable
          if ($state_trimmed = '$U' AND $class_trimmed = 'H')
           let $Erncd_Sel = '{THIRD_PARTY_NON_TAXABLE}'

           do Get-Misc-Earns                       !erncd_sel returns #Earn_QTD, #Earn_YTD from earnings details by state
           let #Sick_Pay_Ytd_nt = #Earn_YTD
           add #Sick_Pay_Ytd_nt to #Sick_Pay_amt_er_Ytd_Company
          end-if
        #endif

        let #t = #Sick_Pay_Qtd_nt * 100
        do Format-Number(#t,$Sick_Pay_Qtd_nt, '999999999999999mi')
        let #t = #Sick_Pay_Ytd_nt * 100
        do Format-Number(#t,$Sick_Pay_Ytd_nt, '999999999999999mi')

       !-------------------------------------------------------------------------
       !Stock option QTD and YTD for this STATE requires looking at PAY_EARNINGS...
       ! *** Note, this may take a long time ****
       !-------------------------------------------------------------------------
       let #Stock_Options_QTD = 0
       let #Stock_Options_YTD = 0
        #ifdef STOCK_OPTION_SELECTION
        if ($state_trimmed = 'WA' AND $class_trimmed = 'U') or
           ($state_trimmed = 'MO' AND $local_trimmed = '65000')      !Stock options required for WA SUI or St Louis

         let $Erncd_Sel = '{STOCK_OPTION_SELECTION}'

         #if {SITE_ID} = 'PFZ1'
           #ifdef Stock_option_category
             let $Erncd_Sel = $Stock_Option_Erncds
           #endif
         #endif

         do Get-Misc-Earns                       !erncd_sel returns #Earn_QTD, #Earn_YTD from earnings details by state
         let #Stock_Options_QTD = #Earn_QTD
         let #Stock_Options_YTD = #Earn_YTD
        end-if
       #endif
       let #t = #Stock_Options_QTD * 100
       do Format-Number(#t,$Stock_Options_QTD, '999999999999999mi')
       add #Stock_Options_QTD to #Stock_Options_QTD_Company
       let #t = #Stock_Options_YTD * 100
       do Format-Number(#t,$Stock_Options_YTD, '999999999999999mi')
       add #Stock_Options_YTD to #Stock_Options_YTD_Company

       let #Severence_pay_QTD = 0
       let #Severence_pay_YTD = 0
       #ifdef Severence_pay_selection
        if ($state_trimmed = 'NY' or $state_trimmed = 'MI') AND $class_trimmed = 'U' !Severence required for NYU or MIU
         let $Erncd_Sel = '{Severence_pay_selection}'

         #if {SITE_ID} = 'PFZ1'
           #ifdef Severence_pay_category
             let $Erncd_Sel = $Severence_Pay_Erncds
           #endif
         #endif

         #ifdef CUSTOM_SEVERENCE_LOGIC
            do custom-severence-logic !see probiz.sqc
         #else
            do Get-Misc-Earns                       !erncd_sel returns #Earn_QTD,#Earn_YTD from earnings details by state
         #endif

         let #Severence_pay_QTD = #Earn_QTD
         let #Severence_pay_YTD = #Earn_YTD

         if $state_trimmed = 'NY'
          add #Earn_QTD to #Severence_pay_QTD_Company_NY
          add #Earn_YTD to #Severence_pay_YTD_Company_NY
         end-if
         if $state_trimmed = 'MI'
          add #Earn_QTD to #Severence_pay_QTD_Company_MI
          add #Earn_YTD to #Severence_pay_YTD_Company_MI
         end-if

        end-if
       #endif

       let #t = #Severence_pay_QTD * 100
       do Format-Number(#t,$Severence_pay_QTD, '9999999999999mi')
       add #Severence_pay_QTD to #Severence_pay_QTD_Company
       let #t = #Severence_pay_YTD * 100
       do Format-Number(#t,$Severence_pay_YTD, '9999999999999mi')
       add #Severence_pay_YTD to #Severence_pay_YTD_Company

   if rtrim($adp_w2_records,' ') = 't'

       !Specific Earnings Balances pulled now (new for 3.03)
       !-----------------------------------------------------

       !--- FUTA Section
       let #Meals_employer_conv_QTD = 0
       let #Meals_employer_conv_YTD = 0
       if $state_trimmed = '$U' AND $class_trimmed = 'U'
        #ifdef Meals_employer_conv_selection
         let $Erncd_Sel = '{Meals_employer_conv_selection}'

         #if {SITE_ID} = 'PFZ1'
           #ifdef Meals_employer_conv_category
             let $Erncd_Sel = $Meals_Employer_Conv_Erncds
           #endif
         #endif
         do get-specific-earnings-bal        !erncd_sel returns #Earn_QTD, #Earn_YTD from earnings balances
         let #Meals_employer_conv_QTD = #Earn_QTD
         let #Meals_employer_conv_YTD = #Earn_YTD
        #endif
       end-if
       let #t = #Meals_employer_conv_QTD * 100
       do Format-Number(#t,$Meals_employer_conv_QTD, '9999999999999mi')
       add #Meals_employer_conv_QTD to #Meals_employer_conv_QTD_Company
       let #t = #Meals_employer_conv_YTD * 100
       do Format-Number(#t,$Meals_employer_conv_YTD, '9999999999999mi')
       add #Meals_employer_conv_YTD to #Meals_employer_conv_YTD_Company

       let #Moving_exp_3rdParty_QTD = 0
       let #Moving_exp_3rdParty_YTD = 0
       if $state_trimmed = '$U' AND $class_trimmed = 'U'
        #ifdef Moving_exp_3rdParty_selection
         let $Erncd_Sel = '{Moving_exp_3rdParty_selection}'

         #if {SITE_ID} = 'PFZ1'
           #ifdef Moving_exp_3rdParty_category
             let $Erncd_Sel = $Moving_Exp_3rdParty_Erncds
           #endif
         #endif

         do get-specific-earnings-bal        !erncd_sel returns #Earn_QTD, #Earn_YTD from earnings balances
         let #Moving_exp_3rdParty_QTD = #Earn_QTD
         let #Moving_exp_3rdParty_YTD = #Earn_YTD
        #endif
       end-if
       let #t = #Moving_exp_3rdParty_QTD * 100
       do Format-Number(#t,$Moving_exp_3rdParty_QTD, '9999999999999mi')
       add #Moving_exp_3rdParty_QTD to #Moving_exp_3rdParty_QTD_Company
       let #t = #Moving_exp_3rdParty_YTD * 100
       do Format-Number(#t,$Moving_exp_3rdParty_YTD, '9999999999999mi')
       add #Moving_exp_3rdParty_YTD to #Moving_exp_3rdParty_YTD_Company

       let #Qual_transportation_QTD = 0
       let #Qual_transportation_YTD = 0
       if $state_trimmed = '$U' AND $class_trimmed = 'U'
        #ifdef Qual_transportation_selection
         let $Erncd_Sel = '{Qual_transportation_selection}'

         #if {SITE_ID} = 'PFZ1'
           #ifdef Qual_transportation_category
             let $Erncd_Sel = $Qual_Transportation_Erncds
           #endif
         #endif

         do get-specific-earnings-bal        !erncd_sel returns #Earn_QTD, #Earn_YTD from earnings balances

         let #Qual_transportation_QTD = #Earn_QTD
         let #Qual_transportation_YTD = #Earn_YTD
        #endif
       end-if
       let #t = #Qual_transportation_QTD * 100
       do Format-Number(#t,$Qual_transportation_QTD, '9999999999999mi')
       add #Qual_transportation_QTD to #Qual_transportation_QTD_Company
       let #t = #Qual_transportation_YTD * 100
       do Format-Number(#t,$Qual_transportation_YTD, '9999999999999mi')
       add #Qual_transportation_YTD to #Qual_transportation_YTD_Company

       !--- end of FUTA section
    end-if

       let #Meal_Allowances_QTD = 0
       let #Meal_Allowances_YTD = 0
       if $state_trimmed = 'PR' AND $class_trimmed = 'H'

        #ifdef Meal_Allowances_selection
         let $Erncd_Sel = '{Meal_Allowances_selection}'

         #if {SITE_ID} = 'PFZ1'
           #ifdef Meal_Allowances_category
             let $Erncd_Sel = $Meal_Allowances_Erncds
           #endif
         #endif

         do get-specific-earnings-bal        !erncd_sel returns #Earn_QTD, #Earn_YTD from earnings balances
         let #Meal_Allowances_QTD = #Earn_QTD
         let #Meal_Allowances_YTD = #Earn_YTD
        #endif

        !1/14/09
        let #TaxBalance_Txgrs_Ytd = #TaxBalance_Txgrs_Ytd - #Meal_Allowances_YTD
        let #t = #TaxBalance_Txgrs_Ytd * 100
        do Format-Number(#t,$TaxBalance_Txgrs_Ytd, '999999999999999mi')

       end-if

       let #t = #Meal_Allowances_QTD * 100
       do Format-Number(#t,$Meal_Allowances_QTD, '9999999999999mi')
       add #Meal_Allowances_QTD to #Meal_Allowances_QTD_Company
       let #t = #Meal_Allowances_YTD * 100
       do Format-Number(#t,$Meal_Allowances_YTD, '9999999999999mi')
       add #Meal_Allowances_YTD to #Meal_Allowances_YTD_Company

       !defaults
       !--------
       do Format-Number(0,$weeks_worked_under_min,   '999')
       let $family_status = 'N'   !Y only if ee owns more than 50% of the business
       !---------------------------------------------------------------------------

       let $out_deptid = '00000'  !9/28/05 changed from ''
       if $State_trimmed = 'NM'
         let $out_deptid = '{NM_UI_LOCATION_DFLT}'
       end-if
       if (($state_trimmed = 'MN') OR ($state_trimmed = 'MI') OR ($state_trimmed = 'MA') OR ($state_trimmed = 'IA') OR ($state_trimmed = 'NM') OR ($state_trimmed = 'IN'))
          AND $class_trimmed = 'U' !Deptid for SUI 4/26/05 for MN and MI

         #ifdef USE_DEPTID_FOR_MN_MI_LOCATION
           let $out_deptid = $deptid
         #endif
         #ifdef USE_LOCATION_FOR_MN_MI_LOCATION
           let $out_deptid = $location
         #endif
         #ifdef USE_TAX_LOCATION_CD_FOR_MN_MI_LOCATION
           let $out_deptid = $tax_location_cd
           #if {SITE_ID} = 'AGN1'                     !AGN1 - YE06
            let $worksite_into_extract = rtrim($worksite_into_extract,' ')
            Evaluate $worksite_into_extract
            When = 'MN000'
               if rtrim($Extract_CompID,' ') = 'AUS' OR
                  rtrim($Extract_CompID,' ') = 'JCP' OR
                  rtrim($Extract_CompID,' ') = 'OLI' OR
                  rtrim($Extract_CompID,' ') = 'TCI'
                   let $out_deptid = '00000'
               end-if
            When = '341'
               if rtrim($Extract_CompID,' ') = 'TCI'
                   let $out_deptid = '00000'
               end-if
            When = '498'
               if rtrim($Extract_CompID,' ') = 'TCI'
                   let $out_deptid = '00001'
               end-if
            When-Other
               let $out_deptid = $tax_location_cd
            End-Evaluate
           #endif
         #endif
         #ifdef USE_PAYGROUP_FOR_MN_MI_LOCATION
           let $out_deptid = $job_paygroup
         #endif
         #ifdef USE_UI_RPT_CD_FOR_MN_MI_LOCATION
           let $out_deptid = $UiRptCode5
         #endif

       end-if

! 11/14/09 added for Mass. SUI-Location reporting
!--------------------------------------------------------------------
         #ifdef GENERAL_SUI_LOCATION_CODE         !#define GENERAL_SUI_LOCATION_CODE   ($state_trimmed = 'MA')
          if {GENERAL_SUI_LOCATION_CODE} AND $class_trimmed = 'U'
           let $out_deptid = '00000'
           if $State_trimmed = 'NM'
             let $out_deptid = '{NM_UI_LOCATION_DFLT}'
           end-if
           #ifdef USE_UI_RPT_CD_FOR_MN_MI_LOCATION
             do Get-General-Rpt-Unit-Number
             let $out_deptid = $UiRptCode5
             goto done_general_ui_location_code
           #endif
           #ifdef USE_DEPTID_FOR_MN_MI_LOCATION
             let $out_deptid = $deptid
             goto done_general_ui_location_code
           #endif
           #ifdef USE_LOCATION_FOR_MN_MI_LOCATION
             let $out_deptid = $location
             goto done_general_ui_location_code
           #endif
           #ifdef USE_TAX_LOCATION_CD_FOR_MN_MI_LOCATION
             let $out_deptid = $tax_location_cd
             goto done_general_ui_location_code
           #endif
          end-if
done_general_ui_location_code:

         #if {SITE_ID} = 'HWL1'
           if ($state_trimmed = 'MN' or $state_trimmed = 'MI'  or $state_trimmed = 'MA' or $state_trimmed = 'IA' or $state_trimmed = 'IN') AND $class_trimmed = 'U'  !2-117409224
              do get-Honeywell-location
           end-if
         #endif
         
         
!04012013
!-----------------------
          #if {SITE_ID} = 'SCR1'
           if $class_trimmed = 'U'
            do get-SCR1-MN-MI-location
            let $out_deptid = $SCR1_mn_mi_location
            if $SelectEmplid <> ''
              #debugd show 'SCR1: after get-SCR1-MN-MI-location ' $state_trimmed ' UI Location ' $out_deptid
            end-if
           end-if
          #endif

         #if {SITE_ID} = 'DSG1'
           if $class_trimmed = 'U'
            do get-DSG1-location
            let $out_deptid = $DSG1_location
            if $SelectEmplid <> ''
              #debugd show 'DSG1: after get-DSG1-location' $state_trimmed ' UI Location ' $out_deptid
            end-if
           end-if
         #endif
!-----------------------

          #ifdef CUSTOM_SUI_LOCATION_CODE
           if {GENERAL_SUI_LOCATION_CODE} AND $class_trimmed = 'U'
             let $out_deptid = '00000'
             if $state_trimmed = 'NM'
               let $out_deptid = '{NM_UI_LOCATION_DFLT}'  !9/28/05 changed from ''
             end-if
             do Get-Custom-Rpt-Unit-Number   !must be in probiz.sqc, and it must return $out_deptid
           end-if
          #endif
     
          #ifdef NM_UI_LOCATION_DFLT_FIXED
           if $State_trimmed = 'NM'
            let $out_deptid = '{NM_UI_LOCATION_DFLT_FIXED}'
           end-if
          #endif

          #ifdef MI_UI_LOCATION_DFLT_FIXED
           if $State_trimmed = 'MI'
            let $out_deptid = '{MI_UI_LOCATION_DFLT_FIXED}'
           end-if
          #endif

          #ifdef MN_UI_LOCATION_DFLT_FIXED
           if $State_trimmed = 'MN'
            let $out_deptid = '{MN_UI_LOCATION_DFLT_FIXED}'
           end-if
          #endif

          #ifdef MA_UI_LOCATION_DFLT_FIXED
           if $State_trimmed = 'MN'
            let $out_deptid = '{MA_UI_LOCATION_DFLT_FIXED}'
           end-if
          #endif

          #ifdef IA_UI_LOCATION_DFLT_FIXED
           if $State_trimmed = 'IA'
            let $out_deptid = '{IA_UI_LOCATION_DFLT_FIXED}'
           end-if
          #endif

          #ifdef IN_UI_LOCATION_DFLT_FIXED
           if $State_trimmed = 'IN'
            let $out_deptid = '{IN_UI_LOCATION_DFLT_FIXED}'
           end-if
          #endif
       
          !11/14/09 - rpad with zeros
          !--------------------------------------------
          if {GENERAL_SUI_LOCATION_CODE} AND $class_trimmed = 'U'
            let $out_deptid  = lpad($out_deptid,5,'0')
          end-if

         #endif

         #ifdef Q3_2016
          if $State_trimmed = 'IN' AND $class_trimmed = 'U'
             let $out_deptid = $UiRptCode10
             let $IN_DWD_Location_Code  = lpad($out_deptid,10,'0')
             let $out_deptid = '00000'
             if $SelectEmplid <> ''
               show 'Indiana: After getting Indiana location ' $IN_DWD_Location_Code
            end-if
         else
            let $IN_DWD_Location_Code  = '          '
          end-if
         #else
            let $IN_DWD_Location_Code  = '          '
         #endif
         
! state of Q2, 2010 additions
!-------------------------------------
       ! #ifdef CUSTOM_NEW_HIRE_ID_LOGIC
       !   let $HCompany = $Current_Company
       !   let $HEmplid  = $Current_Emplid
       !   let $HEffdt   = $AsOfDate
       !   do custom-new-hire-id-logic !in adpq210c.sqc........ needs to set the $JOB_FICA_STATUS and $Hire_EFFDT
       ! #endif

        let $New_Hire_Act_Termed = ''
  
   !5/13/2011 added
   #ifdef ADP_TAX_AMEND
     !if #RptYear = 2010 and $state_trimmed = '$U' and ($class_trimmed = 'E' or $class_trimmed = 'J')
     !      do get-new-hire-exempt-wages  !in adpq210.sqc
     !end-if
   #else
        #ifdef EXTRACT_HIRE_ACT_QUARTERLY_TERMED
         if #RptYear >= 2010 and $state_trimmed = '$U' and ($class_trimmed = 'E' or $class_trimmed = 'J') and $Job_FICA_Status = 'H'
           !do get-new-hire-exempt-wages  !in adpq210.sqc
         else
           if #RptYear >= 2010 and $state_trimmed = '$U' and ($class_trimmed = 'E' or $class_trimmed = 'J') and $Job_FICA_Status <> 'H'
            !let $HCompany = $Current_Company
            !let $HEmplid  = $Current_emplid
            !let $HEffdt   = $AsOfDate
            !do get-term-exempt-status !in adpq210.sqc
            !if $New_Hire_Act_Termed = 't'
            ! do get-new-hire-exempt-wages  !in adpq210.sqc
            !end-if
           end-if
         end-if
        #else
          !if #RptYear >= 2010 and ($state_trimmed = '$U' or $state_trimmed = '$E') and $Job_FICA_Status = 'H' and ($class_trimmed = 'E' or $class_trimmed = 'J')
          ! do get-new-hire-exempt-wages  !in adpq210.sqc
          !end-if
        #endif
    #endif


    #ifndef PROCESS_NEW_HIRE_TAX_CLASSES_FOR_2010
        if $class_trimmed = '{FICA_EXEMPT_ER_HIRE_ACT_CLASS}' or $class_trimmed = '{FICA_TIPS_EXEMPT_ER_HIRE_ACT_CLASS}'
         let #CT.FEDERAL_EIN      = #Current_Fein
         let $C.Company_bypass    = $Current_Company
         let $C.Trimmed_State     = $state_trimmed
         let $C.Trimmed_Tax_Class = $class_trimmed
         let $C.Trimmed_Locality  = $local_trimmed
         let $C.Trimmed_Taxcode   = $state_trimmed || $class_trimmed || $local_trimmed
         let #C.TAX_QTD   = #TaxBalance_Tax_Qtd
         let #C.TXGRS_QTD = #TaxBalance_Txgrs_Qtd
         let #C.NLGRS_QTD = #TaxBalance_Nlgrs_Qtd
         let #C.TAX_YTD   = #TaxBalance_Tax_Ytd
         let #C.TXGRS_YTD = #TaxBalance_Txgrs_Ytd
         let #C.NLGRS_YTD = #TaxBalance_Nlgrs_Ytd
         do insert-taxes-into-bypassed-totals               ! in pbzqtr.sqr
         Add #TaxBalance_Tax_Qtd to #Hash_Ignore_Tax_QTD
         Add #TaxBalance_Tax_Ytd to #Hash_Ignore_Tax_YTD
         goto bypass_tax_balance_adp303q
        end-if
    #endif
    
    #ifdef FLAG_MD_LOCALS_WITH_NO_MD_SIT  !#define FLAG_MD_LOCALS_WITH_NO_MD_SIT N
      if $state_trimmed = 'MD' AND $class_trimmed = 'H' and rtrim($local_trimmed,' ') <> '' 
          !Check for MDSIT wages
          let #md_cnt = 0
          let $md_sit = 'f'
          while #md_cnt < #Last_TaxBalance_Cnt
             Add 1 to #md_cnt
             get $TB_State_MD $TB_Class_MD $TB_Local_MD #TaxBalance_Txgrs_YTD_MDH 
              from TaxBalance(#md_cnt) TaxBalance_State  TaxBalance_Tax_Class TaxBalance_Locality TaxBalance_Txgrs_YTD 
              if $TB_State_MD = 'MD' and $TB_Class_MD = 'H' and rtrim($TB_Local_MD,' ') =  '' and #TaxBalance_Txgrs_YTD_MDH > 0
                let $md_sit = 't'
                break
              end-if
          end-while
          if $md_sit = 'f'
            let $local_trimmed  = $local_trimmed || '{FLAG_MD_LOCALS_WITH_NO_MD_SIT}'
            let $Taxcode = 'MDH' || $local_trimmed
            let $Taxcode = rpad ($Taxcode,14,' ') || substr($Output_TaxCode,15,1)
            move $Taxcode to $Output_Taxcode
          end-if
          if $SelectEmplid <> ''
           show 'FLAG_MD_LOCALS_WITH_NO_MD_SIT: ' $md_sit ' $Output_Taxcode: ' $Output_Taxcode 
          end-if
      end-if
    #endif
    
    #ifdef FORCE_WA_LOCAL_WAGES_TO_WA_SUI
      if $state_trimmed = 'WA' AND rtrim($local_trimmed,' ') <> ''
          !get WAU wages
          let #wa_cnt=0
          let $wa_sui = 'f'
          while #wa_cnt < #Last_TaxBalance_Cnt
             Add 1 to #wa_cnt
             get $TB_State_WA $TB_Class_WA  #TaxBalance_NLgrs_QTD_WAU #TaxBalance_Txgrs_QTD_WAU #TaxBalance_NLgrs_YTD_WAU #TaxBalance_Txgrs_YTD_WAU
              from TaxBalance(#wa_cnt) TaxBalance_State  TaxBalance_Tax_Class TaxBalance_NLgrs_QTD TaxBalance_Txgrs_QTD TaxBalance_NLgrs_YTD TaxBalance_Txgrs_YTD
              if $TB_State_WA = 'WA' and $TB_Class_WA = 'U'
                let $wa_sui = 't'
                break
              end-if
          end-while

          if $wa_sui = 't'
            let #TaxBalance_Txgrs_YTD = #TaxBalance_Txgrs_YTD_WAU
            let #TaxBalance_Nlgrs_YTD = #TaxBalance_NLgrs_YTD_WAU
            let #TaxBalance_Gross_YTD = #TaxBalance_NLgrs_YTD_WAU
            let #TaxBalance_Txgrs_QTD = #TaxBalance_Txgrs_QTD_WAU
            let #TaxBalance_Nlgrs_QTD = #TaxBalance_NLgrs_QTD_WAU
            let #TaxBalance_Gross_QTD = #TaxBalance_NLgrs_QTD_WAU
            let #t = #TaxBalance_Txgrs_YTD * 100
            do Format-Number(#t,$TaxBalance_Txgrs_YTD, '999999999999999mi')
            let #t = #TaxBalance_NLgrs_YTD * 100
            do Format-Number(#t,$TaxBalance_Nlgrs_YTD, '999999999999999mi')
            move $TaxBalance_Nlgrs_YTD to $TaxBalance_Gross_YTD 
            let #t = #TaxBalance_Txgrs_QTD * 100
            do Format-Number(#t,$TaxBalance_Txgrs_QTD, '999999999999999mi')
            let #t = #TaxBalance_NLgrs_QTD * 100
            do Format-Number(#t,$TaxBalance_Nlgrs_QTD, '999999999999999mi')
            move $TaxBalance_Nlgrs_QTD to $TaxBalance_Gross_QTD 
            
            if $SelectEmplid <> ''
              show 'FORCE_WA_LOCAL_WAGES_TO_WA_SUI: QTD Subject = ' #TaxBalance_NLgrs_QTD_WAU edit '999,999.99' ', QTD Taxable = ' #TaxBalance_Txgrs_QTD_WAU edit '999,999.99'
              show '                                YTD Subject = ' #TaxBalance_NLgrs_YTD_WAU edit '999,999.99' ', YTD Taxable = ' #TaxBalance_Txgrs_YTD_WAU edit '999,999.99'
            end-if
            
          end-if
       end-if
    #endif
    
    
    #ifdef SSDP_BENEFITS
        if {SSDP_CRITERIA}
         do process-domestic-partner-benefit-info  !in adp303.sqc, !CIS Tax - 3Q 2012 Release, Requirement: 2.2.1
        end-if
    #endif
    
    #ifdef HEALTHCARE_JURSIDICTION_CRITERIA   !for Nevada as of 2010 for the Spcl NVS Taxcode.. can be defined in probiz.sqc, otherwise it is defaulted in adpq10.sqc
      if #RptYear >= 2010
        if #RptYear < 2012
           if {HEALTHCARE_JURSIDICTION_CRITERIA}
              do get-ER-HealthCare-contributions
           end-if
        else  !starting in 2012 the determination of ER-Healthcare should be for all SUI jurisdictions
           if $state_trimmed <> '$U' and ($class_trimmed = 'S' or $class_trimmed = 'U')
              do get-ER-HealthCare-contributions
           end-if
        end-if
      end-if
    #endif

     #ifdef USE_PR_BOX07_AMOUNT
      if $state_trimmed = 'PR' AND $class_trimmed = 'H' AND rtrim($local_trimmed,' ') = ''                          
        let #TaxBalance_Txgrs_YTD_orig_PRH = #TaxBalance_Txgrs_YTD
        let #TaxBalance_Txgrs_YTD = #PR_YE_Box07
        let #TaxBalance_Nlgrs_YTD = #TaxBalance_Txgrs_YTD
        let #TaxBalance_Gross_YTD = #TaxBalance_Txgrs_YTD
        let #t = #TaxBalance_Txgrs_YTD * 100
        do Format-Number(#t,$TaxBalance_Txgrs_YTD, '999999999999999mi')
        move $TaxBalance_Txgrs_YTD to $TaxBalance_Nlgrs_YTD 
        move $TaxBalance_Txgrs_YTD to $TaxBalance_Gross_YTD 
              
        #ifdef REDUCE_PRH_WAGE_REC
            show 'write-wage-rec: setting  PRH Wages to Box 07 Wages of       ' #PR_YE_Box07 edit 999,999,999.99
            show '      Note, the original PRH Wages from Tax Balances was    ' #TaxBalance_Txgrs_YTD_orig_PRH edit 999,999,999.99 
        #endif
      end-if
     #endif

    
    #ifdef REDUCE_PRH_WAGE_REC_BY_COMMISSIONS
      if $state_trimmed = 'PR' AND $class_trimmed = 'H' AND rtrim($local_trimmed,' ') = '' and #PR_YE_Commissions <> 0 and #RptYear >= 2011
        
        let #TaxBalance_Txgrs_YTD = #TaxBalance_Txgrs_YTD - #PR_YE_Commissions
        let #TaxBalance_Nlgrs_YTD = #TaxBalance_Txgrs_YTD
        let #TaxBalance_Gross_YTD = #TaxBalance_Txgrs_YTD
        let #t = #TaxBalance_Txgrs_YTD * 100
        do Format-Number(#t,$TaxBalance_Txgrs_YTD, '999999999999999mi')
        move $TaxBalance_Txgrs_YTD to $TaxBalance_Nlgrs_YTD 
        move $TaxBalance_Txgrs_YTD to $TaxBalance_Gross_YTD 
              
          #ifdef REDUCE_PRH_WAGE_REC
            show 'write-wage-rec: reducing PRH Wages by Box 08 Commissions of ' #PR_YE_Commissions edit 999,999,999.99  ' to ' $TaxBalance_Txgrs_YTD
          #endif
      end-if
    #endif



    #ifdef REDUCE_PRH_WAGE_REC_BY_TIPS
      if $state_trimmed = 'PR' AND $class_trimmed = 'H' AND rtrim($local_trimmed,' ') = '' and #PR_YE_Tips <> 0 and #RptYear >= 2013
          let #TaxBalance_Txgrs_YTD = #TaxBalance_Txgrs_YTD - #PR_YE_Tips
          let #TaxBalance_Nlgrs_YTD = #TaxBalance_Txgrs_YTD
          let #TaxBalance_Gross_YTD = #TaxBalance_Txgrs_YTD
          let #t = #TaxBalance_Txgrs_YTD * 100
          do Format-Number(#t,$TaxBalance_Txgrs_YTD, '999999999999999mi')
          move $TaxBalance_Txgrs_YTD to $TaxBalance_Nlgrs_YTD 
          move $TaxBalance_Txgrs_YTD to $TaxBalance_Gross_YTD 
        
          let #TaxBalance_Tip_Wages_Ytd = #PR_YE_Tips                            !1/23/2014
          let #t = #TaxBalance_Tip_Wages_Ytd * 100                               !1/23/2014
          do Format-Number(#t,$TaxBalance_Tip_Wages_Ytd, '999999999999999mi')    !1/23/2014
          
          #ifdef REDUCE_PRH_WAGE_REC
            show 'write-wage-rec: reducing PRH Wages by Box 10 Tips of ' #PR_YE_Tips edit 999,999,999.99  ' to ' $TaxBalance_Txgrs_YTD
          #endif
       end-if
    #endif

    #ifdef PR_TIPS_ON_PRH_from_Box10
      if $state_trimmed = 'PR' AND $class_trimmed = 'H' AND rtrim($local_trimmed,' ') = '' and #PR_YE_Tips <> 0 and #RptYear >= 2014
          let #TaxBalance_Tip_Wages_Ytd = #PR_YE_Tips
          let #t = #TaxBalance_Tip_Wages_Ytd * 100
          do Format-Number(#t,$TaxBalance_Tip_Wages_Ytd, '999999999999999mi')
          
          #ifdef PR_TIPS_ON_PRH_from_Box10
            show 'write-wage-rec: Setting PRH YTD Tips Taxable Wages to ' #TaxBalance_Tip_Wages_Ytd edit 999,999,999.99  
          #endif
       end-if
    #endif
    

    #ifdef REDUCE_PRH_WAGE_REC_BY_Box16
      if $state_trimmed = 'PR' AND $class_trimmed = 'H' AND rtrim($local_trimmed,' ') = '' and #PR_YE_Box16 <> 0 and #RptYear >= 2014
          let #TaxBalance_Txgrs_YTD = #TaxBalance_Txgrs_YTD - #PR_YE_Box16
          let #TaxBalance_Nlgrs_YTD = #TaxBalance_Txgrs_YTD
          let #TaxBalance_Gross_YTD = #TaxBalance_Txgrs_YTD
          let #t = #TaxBalance_Txgrs_YTD * 100
          do Format-Number(#t,$TaxBalance_Txgrs_YTD, '999999999999999mi')
          move $TaxBalance_Txgrs_YTD to $TaxBalance_Nlgrs_YTD 
          move $TaxBalance_Txgrs_YTD to $TaxBalance_Gross_YTD 
                 
          #ifdef REDUCE_PRH_WAGE_REC
            show 'write-wage-rec: reducing PRH Wages by Box 16 Exempt of ' #PR_YE_Box16 edit 999,999,999.99  ' to ' $TaxBalance_Txgrs_YTD
          #endif
       end-if
    #endif


    #ifdef USE_BOX01_for_YTD_FIT
      if $state_trimmed = '$U' AND $class_trimmed = 'H' and #Box01_YTD_Taxable <> 0 and #RptYear >= 2015 and #RptQtr = 4
          let #TaxBalance_Txgrs_YTD = #Box01_YTD_Taxable
          let #TaxBalance_Nlgrs_YTD = #TaxBalance_Txgrs_YTD
          let #TaxBalance_Gross_YTD = #TaxBalance_Txgrs_YTD
          let #t = #TaxBalance_Txgrs_YTD * 100
          do Format-Number(#t,$TaxBalance_Txgrs_YTD, '999999999999999mi')
          move $TaxBalance_Txgrs_YTD to $TaxBalance_Nlgrs_YTD 
          move $TaxBalance_Txgrs_YTD to $TaxBalance_Gross_YTD 
                 
          #ifdef USE_BOX01_for_YTD_FIT
            show 'write-wage-rec: USE_BOX01_for_YTD_FIT Setting YTD FIT to Box 01 amount = ' $TaxBalance_Txgrs_YTD
          #endif
       end-if
    #endif
    
    #ifdef NYC_WAGES_TAXES_FROM_YE_AMOUNTS
      if $state_trimmed = 'NY' AND $class_trimmed = 'H' AND rtrim($local_trimmed,' ') = 'P0001'
       if #NYC_Wages > 0
        let #TaxBalance_Txgrs_YTD = #NYC_Wages
        let #TaxBalance_Nlgrs_YTD = #TaxBalance_Txgrs_YTD
        let #TaxBalance_Gross_YTD = #TaxBalance_Txgrs_YTD
        let #t = #TaxBalance_Txgrs_YTD * 100
        do Format-Number(#t,$TaxBalance_Txgrs_YTD, '999999999999999mi')
        move $TaxBalance_Txgrs_YTD to $TaxBalance_Nlgrs_YTD 
        move $TaxBalance_Txgrs_YTD to $TaxBalance_Gross_YTD 
       end-if
       if #NYC_Taxes > 0
        let #TaxBalance_Tax_YTD   = #NYC_Taxes
        let #t = #TaxBalance_Tax_YTD * 100
        do Format-Number(#t,$TaxBalance_Tax_YTD, '999999999999999mi')
       end-if
       if $SelectEmplid <> ''
         show 'NYC_WAGES_TAXES_FROM_YE_AMOUNTS: NYCity YTD Taxes ' $TaxBalance_Tax_YTD ', YTD wages ' $TaxBalance_Txgrs_YTD
       end-if
      end-if
    #endif
    
    !May 13, 2015 - If we have taxable wages and no Box 16, then we can calculate it and add in a box 16 record
    #ifdef REDUCE_PR_WAGES_BY_LIMIT_UNDER_27   !reduce the first 40,000 of PR Taxable for people under 27, and stick the remainder into a new Box 16 / E item
      if #RptYear >= 2014 and ($state_trimmed = 'PR' AND $class_trimmed = 'H' AND rtrim($local_trimmed,' ') = '')
          do Get-Associate-Age  !#Age 
          if #Age < 27
            
            let #TaxBalance_Txgrs_YTD_orig = #TaxBalance_Txgrs_YTD
            #ifdef PR_SUM_WAGES_ALLOW_COMMIS
             if #PR_Wages_Allow_Comm > 0
              let #TaxBalance_Txgrs_YTD    = #PR_Wages_Allow_Comm  !Box 07+08+09
             end-if
            #endif
            
            let #TaxBalance_Txgrs_YTD_Taxable = #TaxBalance_Txgrs_YTD - {REDUCE_PR_WAGES_BY_LIMIT_UNDER_27}
            
            if #TaxBalance_Txgrs_YTD_Taxable < 0
              let #Generated_Box165_amount = #TaxBalance_Txgrs_YTD
              let #TaxBalance_Txgrs_YTD = 0
            else
              let #Generated_Box165_amount = {REDUCE_PR_WAGES_BY_LIMIT_UNDER_27}
              let #TaxBalance_Txgrs_YTD = #TaxBalance_Txgrs_YTD_Taxable
            end-if

            #ifdef PR_SUM_WAGES_ALLOW_COMMIS
              show 'Puerto Rico, Taxable wage logic. Emplid:  ' $Current_Emplid ' Original PRH Taxable = ' #TaxBalance_Txgrs_YTD_orig ', setting PRH Taxable to ' #TaxBalance_Txgrs_YTD ' AGE ' $age ', Total PR_Wages_Allow_Comm = ' #PR_Wages_Allow_Comm
            #else
              show 'Puerto Rico, Taxable wage logic. Emplid:  ' $Current_Emplid ' Original PRH Taxable = ' #TaxBalance_Txgrs_YTD_orig ', setting PRH Taxable to ' #TaxBalance_Txgrs_YTD ' AGE ' $age
            #endif
            
            let #TaxBalance_Nlgrs_YTD = #TaxBalance_Txgrs_YTD
            let #TaxBalance_Gross_YTD = #TaxBalance_Txgrs_YTD
            let #t = #TaxBalance_Txgrs_YTD * 100
            do Format-Number(#t,$TaxBalance_Txgrs_YTD, '999999999999999mi')
            move $TaxBalance_Txgrs_YTD to $TaxBalance_Nlgrs_YTD 
            move $TaxBalance_Txgrs_YTD to $TaxBalance_Gross_YTD 

            if $Generated_Box165_amount = ''
               let $Box = '16'
               let $Trimmed_State = 'PR'
               let $Trimmed_Locality = ''
               let #amount = #Generated_Box165_amount
               let $Load_amt_type = 'W'
               let $E.TAXFORM_ID = 'P'
               let $WORK_PSD_CD_W2 = ''
	       let $RES_PSD_CD_W2  = ''
               show 'Puerto Rico, Creating Box 16 (No Box 07) Emplid:  ' $Current_Emplid ' Box 16 code E amount = ' #amount ' State ' $Trimmed_State ' Box ' $Box ' type ' $Load_amt_type
               do load-amt
            end-if
          end-if
      end-if
    #endif
    

    #ifdef REDUCE_PRH_WAGE_REC_BY_CUSTOM
      if $state_trimmed = 'PR' AND $class_trimmed = 'H' AND rtrim($local_trimmed,' ') = '' 
        do Reduce-PRH-Wage-Custom !Probiz.sqc
      end-if
    #endif
    

    #ifdef NEVADA_TIPS
       if $state_trimmed = 'NV' AND $class_trimmed = 'U'            
            let $erncd_sel = '{NEVADA_TIPS}'
            do Get-General-Earn-Balances
            let #TaxBalance_Tip_Wages_Qtd = #Earn_QTD
            let #TaxBalance_Tip_Wages_Ytd = #Earn_YTD
            let #t = #TaxBalance_Tip_Wages_Qtd * 100
            do Format-Number(#t,$TaxBalance_Tip_Wages_Qtd, '999999999999999mi')
            let #t = #TaxBalance_Tip_Wages_Ytd * 100
            do Format-Number(#t,$TaxBalance_Tip_Wages_Ytd, '999999999999999mi')
       end-if
    #endif

    #ifdef GEN_WYOMING_LOCAL_WITH_TIPS  !WYRWY0001
       if $state_trimmed = 'WY' AND $class_trimmed = 'U'            
            let $erncd_sel = '{GEN_WYOMING_LOCAL_WITH_TIPS}'
            do Get-General-Earn-Balances
            let #TaxBalance_Tip_Wages_Qtd = #Earn_QTD
            let #TaxBalance_Tip_Wages_Ytd = #Earn_YTD
            let #t = #TaxBalance_Tip_Wages_Qtd * 100
            do Format-Number(#t,$TaxBalance_Tip_Wages_Qtd, '999999999999999mi')
            let #t = #TaxBalance_Tip_Wages_Ytd * 100
            do Format-Number(#t,$TaxBalance_Tip_Wages_Ytd, '999999999999999mi')
       
            !and we need to generate the WYHWY0001 wage record (nolimit sui - tips for taxable wages on the new wage record)

            move $Output_TaxCode  to  $Output_TaxCode_Save
            let #TaxBalance_Txgrs_QTD_WYU = #TaxBalance_Txgrs_QTD
            let #TaxBalance_Txgrs_YTD_WYU = #TaxBalance_Txgrs_YTD
            let #TaxBalance_Tax_QTD_WYU   = #TaxBalance_Tax_QTD
            let #TaxBalance_Tax_YTD_WYU   = #TaxBalance_Tax_YTD
            
            let #TaxBalance_Txgrs_QTD = #TaxBalance_NLgrs_QTD - #Earn_QTD
            let #t = #TaxBalance_Txgrs_QTD * 100
            do Format-Number(#t,$TaxBalance_Txgrs_QTD, '999999999999999mi')
            let #TaxBalance_Txgrs_YTD = #TaxBalance_NLgrs_YTD - #Earn_YTD
            let #t = #TaxBalance_Txgrs_YTD * 100
            do Format-Number(#t,$TaxBalance_Txgrs_YTD, '999999999999999mi')
            
            let #TaxBalance_Tax_QTD = 0
            let #TaxBalance_Tax_YTD = 0
            do Format-Number(#TaxBalance_Tax_QTD,$TaxBalance_Tax_QTD, '999999999999999mi')
            do Format-Number(#TaxBalance_Tax_YTD,$TaxBalance_Tax_YTD, '999999999999999mi')
            
            let $Output_Taxcode = 'WYRWY0001'
            let #l= length($Output_TaxCode)
            if #l < 15
               let $Output_TaxCode = rpad($Output_TaxCode,15,' ')
            end-if
	    
	    if $SelectEmplid <> ''
              show 'GEN_WYOMING_LOCAL_WITH_TIPS: Adjusted QTD Taxable (Subject-tips) = ' $TaxBalance_Txgrs_QTD ' QTD tips = ' $TaxBalance_Tip_Wages_Qtd  ' Taxcode: ' $Output_Taxcode
              show '                             Adjusted YTD Taxable (Subject-tips) = ' $TaxBalance_Txgrs_YTD ' YTD tips = ' $TaxBalance_Tip_Wages_YTD
            end-if

            let $rectp = 'W'
            
            do Out-W-rec   ! <--------------- this is the Wyoming Local Wage record -------

            !Restore W record fields

            move $Output_TaxCode_Save       to     $Output_TaxCode     
            let #TaxBalance_Txgrs_QTD = #TaxBalance_Txgrs_QTD_WYU
            let #TaxBalance_Txgrs_YTD = #TaxBalance_Txgrs_YTD_WYU
            let #TaxBalance_Tax_QTD   = #TaxBalance_Tax_QTD_WYU
            let #TaxBalance_Tax_YTD   = #TaxBalance_Tax_YTD_WYU
            let #t = #TaxBalance_Txgrs_QTD * 100
            do Format-Number(#t,$TaxBalance_Txgrs_QTD, '999999999999999mi')
            let #t = #TaxBalance_Txgrs_YTD * 100
            do Format-Number(#t,$TaxBalance_Txgrs_YTD, '999999999999999mi')
            let #t = #TaxBalance_Tax_QTD * 100
            do Format-Number(#t,$TaxBalance_Tax_QTD, '999999999999999mi')
            let #t = #TaxBalance_Tax_YTD * 100
            do Format-Number(#t,$TaxBalance_Tax_YTD, '999999999999999mi')

       end-if
    #endif
    
    if rtrim($adp_w2_records,' ') = 't'

      do update-totals-from-wage-rec

      !state and local box totals moved to here on 10/11/06 for consistancy
      !---------------------------------------------------------------------
      if ($state_trimmed <> '$U' AND $class_trimmed = 'H' AND rtrim($local_trimmed,' ') = '')

      !State wage record
      !-----------------

      let #StateWg = #TaxBalance_Txgrs_Ytd
      let #StateWh = #TaxBalance_Tax_Ytd
      move $State_trimmed to $StateCd

      let #LocalWg = 0
      let #LocalWh = 0
      let $LocalStatecd = ''
      let $Locality = ''

      do Update-State-Local-Company-Totals  !added 9/26/03
      do Update-State-Local-Grand-Totals    !added 9/26/03

      #ifdef SUBTOTAL_FEIN
        do Update-State-Local-FEIN-Totals  !added 11/10/04
      #endif

      end-if

      if ($state_trimmed <> '$U' AND rtrim($local_trimmed,' ') <> '')

        !local wage record
        !-----------------

        let #StateWg = 0
        let #StateWh = 0
        let $Statecd = ''

        let #LocalWg = #TaxBalance_Txgrs_Ytd
        let #LocalWh = #TaxBalance_Tax_Ytd
        move $State_trimmed to $LocalStatecd
        move $local_trimmed to $Locality

        do Update-State-Local-Company-Totals
        do Update-State-Local-Grand-Totals  !added 9/26/03
        #ifdef SUBTOTAL_FEIN
          do Update-State-Local-FEIN-Totals  !added 11/10/04
        #endif

       end-if

    end-if

    #ifdef THIRD_PARTY_SICK_DED  !12/7/2010 - this section for 3rd party moved below totals calculated to get totals on report in sync with 915 and 916 reports

      if rtrim($local_trimmed,' ') = ''

        if ( ($state_trimmed = '$U') AND    !For now, just the Federal EE taxes
             (
           #ifndef THIRD_PARTY_SICK_DED_BLOCK_EE_FICA_MED
                $class_trimmed = 'D'  OR
                $class_trimmed = 'F'  OR
           #endif
                $class_trimmed = 'E'  OR  !added 3/30/6
                $class_trimmed = 'Q'  OR  !added 3/30/6
                $class_trimmed = 'H') )

                OR ($state_trimmed <> '$U' AND $class_trimmed = 'H')    !added 1/3/6
                OR ($state_trimmed = 'CA' AND $class_trimmed = 'U')     !added 8/11/08  (new specs, include CA-SUI)

           do get-3PSP-balances

           if (#Sick_Pay_Tax_Qtd <> 0) OR
             (#Sick_Pay_Txgrs_Qtd <> 0) OR
             (#Sick_Pay_Nlgrs_Qtd <> 0) OR
             (#Sick_Pay_Tax_Ytd <> 0) OR
             (#Sick_Pay_Txgrs_Ytd <> 0) OR
             (#Sick_Pay_Nlgrs_Ytd <> 0)

            add 1 to #Sick_Pay_Count_Company

            add #Sick_Pay_Tax_Qtd   to #Sick_Pay_Tax_Qtd_Company      !These need to be printed at company breaks
            add #Sick_Pay_Txgrs_Qtd to #Sick_Pay_Txgrs_Qtd_Company
            add #Sick_Pay_Nlgrs_Qtd to #Sick_Pay_Nlgrs_Qtd_Company
            add #Sick_Pay_Tax_YTD   to #Sick_Pay_Tax_YTD_Company
            add #Sick_Pay_Txgrs_YTD to #Sick_Pay_Txgrs_YTD_Company
            add #Sick_Pay_Nlgrs_YTD to #Sick_Pay_Nlgrs_YTD_Company

            !11/16/06 FICA, MED, FIT and SIT 3PSP totals
            !--------------------------------------------

            if $state_trimmed <> '$U'
             evaluate $class_trimmed
               when = 'H'
                add #Sick_Pay_Tax_Qtd   to #Sick_Pay_Tax_Qtd_SIT_Company
                add #Sick_Pay_Txgrs_Qtd to #Sick_Pay_Txgrs_Qtd_SIT_Company
                add #Sick_Pay_Nlgrs_Qtd to #Sick_Pay_Nlgrs_Qtd_SIT_Company
                add #Sick_Pay_Tax_YTD   to #Sick_Pay_Tax_YTD_SIT_Company
                add #Sick_Pay_Txgrs_YTD to #Sick_Pay_Txgrs_YTD_SIT_Company
                add #Sick_Pay_Nlgrs_YTD to #Sick_Pay_Nlgrs_YTD_SIT_Company
                break
               when = 'U'
                if $state_trimmed = 'CA'
                 add #Sick_Pay_Tax_Qtd   to #Sick_Pay_Tax_Qtd_SUI_Company
                 add #Sick_Pay_Txgrs_Qtd to #Sick_Pay_Txgrs_Qtd_SUI_Company
                 add #Sick_Pay_Nlgrs_Qtd to #Sick_Pay_Nlgrs_Qtd_SUI_Company
                 add #Sick_Pay_Tax_YTD   to #Sick_Pay_Tax_YTD_SUI_Company
                 add #Sick_Pay_Txgrs_YTD to #Sick_Pay_Txgrs_YTD_SUI_Company
                 add #Sick_Pay_Nlgrs_YTD to #Sick_Pay_Nlgrs_YTD_SUI_Company
                end-if
                break
               when-other
                break
              end-evaluate

            else
             evaluate $class_trimmed
               when = 'D'
                add #Sick_Pay_Tax_Qtd   to #Sick_Pay_Tax_Qtd_FICA_Company
                add #Sick_Pay_Txgrs_Qtd to #Sick_Pay_Txgrs_Qtd_FICA_Company
                add #Sick_Pay_Nlgrs_Qtd to #Sick_Pay_Nlgrs_Qtd_FICA_Company
                add #Sick_Pay_Tax_YTD   to #Sick_Pay_Tax_YTD_FICA_Company
                add #Sick_Pay_Txgrs_YTD to #Sick_Pay_Txgrs_YTD_FICA_Company
                add #Sick_Pay_Nlgrs_YTD to #Sick_Pay_Nlgrs_YTD_FICA_Company
                break
               when = 'E'
                add #Sick_Pay_Tax_Qtd   to #Sick_Pay_Tax_Qtd_FICAER_Company
                add #Sick_Pay_Txgrs_Qtd to #Sick_Pay_Txgrs_Qtd_FICAER_Company
                add #Sick_Pay_Nlgrs_Qtd to #Sick_Pay_Nlgrs_Qtd_FICAER_Company
                add #Sick_Pay_Tax_YTD   to #Sick_Pay_Tax_YTD_FICAER_Company
                add #Sick_Pay_Txgrs_YTD to #Sick_Pay_Txgrs_YTD_FICAER_Company
                add #Sick_Pay_Nlgrs_YTD to #Sick_Pay_Nlgrs_YTD_FICAER_Company
                break
               when = 'F'
                add #Sick_Pay_Tax_Qtd   to #Sick_Pay_Tax_Qtd_MED_Company
                add #Sick_Pay_Txgrs_Qtd to #Sick_Pay_Txgrs_Qtd_MED_Company
                add #Sick_Pay_Nlgrs_Qtd to #Sick_Pay_Nlgrs_Qtd_MED_Company
                add #Sick_Pay_Tax_YTD   to #Sick_Pay_Tax_YTD_MED_Company
                add #Sick_Pay_Txgrs_YTD to #Sick_Pay_Txgrs_YTD_MED_Company
                add #Sick_Pay_Nlgrs_YTD to #Sick_Pay_Nlgrs_YTD_MED_Company
                break
               when = 'Q'
                add #Sick_Pay_Tax_Qtd   to #Sick_Pay_Tax_Qtd_MEDER_Company
                add #Sick_Pay_Txgrs_Qtd to #Sick_Pay_Txgrs_Qtd_MEDER_Company
                add #Sick_Pay_Nlgrs_Qtd to #Sick_Pay_Nlgrs_Qtd_MEDER_Company
                add #Sick_Pay_Tax_YTD   to #Sick_Pay_Tax_YTD_MEDER_Company
                add #Sick_Pay_Txgrs_YTD to #Sick_Pay_Txgrs_YTD_MEDER_Company
                add #Sick_Pay_Nlgrs_YTD to #Sick_Pay_Nlgrs_YTD_MEDER_Company
                break
               when = 'H'
                add #Sick_Pay_Tax_Qtd   to #Sick_Pay_Tax_Qtd_FIT_Company
                add #Sick_Pay_Txgrs_Qtd to #Sick_Pay_Txgrs_Qtd_FIT_Company
                add #Sick_Pay_Nlgrs_Qtd to #Sick_Pay_Nlgrs_Qtd_FIT_Company
                add #Sick_Pay_Tax_YTD   to #Sick_Pay_Tax_YTD_FIT_Company
                add #Sick_Pay_Txgrs_YTD to #Sick_Pay_Txgrs_YTD_FIT_Company
                add #Sick_Pay_Nlgrs_YTD to #Sick_Pay_Nlgrs_YTD_FIT_Company
                break
               when-other
                break
              end-evaluate
            end-if
  
          
            !-----------------------------

            !Save any W record elements that we need to change to stuff the 3PSP in
            !----------------------------------------------------------------------
            move $Output_TaxCode       to $Saved_Output_TaxCode
            move $TaxBalance_Tax_Qtd   to $Saved_TaxBalance_Tax_Qtd
            move $TaxBalance_Txgrs_Qtd to $Saved_TaxBalance_Txgrs_Qtd
            move $TaxBalance_Nlgrs_Qtd to $Saved_TaxBalance_NLgrs_Qtd   !4/27/06 fix
            move $TaxBalance_Tax_Ytd   to $Saved_TaxBalance_Tax_Ytd
            move $TaxBalance_Txgrs_Ytd to $Saved_TaxBalance_Txgrs_Ytd
            move $TaxBalance_Nlgrs_Ytd to $Saved_TaxBalance_Nlgrs_Ytd
            move $TaxBalance_Gross_Qtd to $Saved_TaxBalance_Gross_Qtd
            move $TaxBalance_Gross_Ytd to $Saved_TaxBalance_Gross_Ytd

            move #TaxBalance_Tax_Qtd   to #Saved_TaxBalance_Tax_Qtd
            move #TaxBalance_Txgrs_Qtd to #Saved_TaxBalance_Txgrs_Qtd
            move #TaxBalance_Nlgrs_Qtd to #Saved_TaxBalance_NLgrs_Qtd   !4/27/06 fix
            move #TaxBalance_Tax_Ytd   to #Saved_TaxBalance_Tax_Ytd
            move #TaxBalance_Txgrs_Ytd to #Saved_TaxBalance_Txgrs_Ytd
            move #TaxBalance_Nlgrs_Ytd to #Saved_TaxBalance_Nlgrs_Ytd
            move #TaxBalance_Gross_Qtd to #Saved_TaxBalance_Gross_Qtd
            move #TaxBalance_Gross_Ytd to #Saved_TaxBalance_Gross_Ytd

            move $Sick_Pay_Qtd              to   $Saved_Sick_Pay_Qtd
            move $Sick_Pay_Ytd              to   $Saved_Sick_Pay_Ytd
            move $Uncol_tips_QTD            to   $Saved_Uncol_tips_QTD
            move $Uncol_gtl_QTD             to   $Saved_Uncol_gtl_QTD
            move $TaxBalance_Tip_Wages_Ytd  to	 $Saved_TaxBalance_Tip_Wages_Ytd
            move $Stock_Options_QTD         to	 $Saved_Stock_Options_QTD
            move $Meals_employer_conv_YTD   to	 $Saved_Meals_employer_conv_YTD
            move $Moving_exp_3rdParty_YTD   to	 $Saved_Moving_exp_3rdParty_YTD
            move $Qual_transportation_YTD   to	 $Saved_Qual_transportation_YTD
            move $Severence_pay_QTD         to	 $Saved_Severence_pay_QTD
            move $Meal_Allowances_YTD       to	 $Saved_Meal_Allowances_YTD

            let #t = 0
            do Format-Number(#t,$Sick_Pay_Qtd,             '999999999999999mi')
            do Format-Number(#t,$Sick_Pay_Ytd,             '999999999999999mi')
    	    do Format-Number(#t,$Uncol_tips_QTD,           '999999999999999mi')
	    do Format-Number(#t,$Uncol_gtl_QTD,            '999999999999999mi')
	    do Format-Number(#t,$TaxBalance_Tip_Wages_Ytd, '999999999999999mi')
	    do Format-Number(#t,$Stock_Options_QTD,        '999999999999999mi')
	    do Format-Number(#t,$Meals_employer_conv_YTD,  '9999999999999mi')
	    do Format-Number(#t,$Moving_exp_3rdParty_YTD,  '9999999999999mi')
	    do Format-Number(#t,$Qual_transportation_YTD,  '9999999999999mi')
	    do Format-Number(#t,$Severence_pay_QTD,        '9999999999999mi')
	    do Format-Number(#t,$Meal_Allowances_YTD,      '9999999999999mi')

            let #t = #Sick_Pay_Tax_Qtd * 100
            do Format-Number(#t,$TaxBalance_Tax_Qtd,   '999999999999999mi')
            let #t = #Sick_Pay_Txgrs_Qtd * 100
            do Format-Number(#t,$TaxBalance_Txgrs_Qtd, '999999999999999mi')
            let #t = #Sick_Pay_Nlgrs_Qtd * 100
            do Format-Number(#t,$TaxBalance_Nlgrs_Qtd, '999999999999999mi')
            let #t = #Sick_Pay_Tax_YTD * 100
            do Format-Number(#t,$TaxBalance_Tax_YTD,   '999999999999999mi')
            let #t = #Sick_Pay_Txgrs_YTD * 100
            do Format-Number(#t,$TaxBalance_Txgrs_YTD, '999999999999999mi')
            let #t = #Sick_Pay_Nlgrs_YTD * 100
            do Format-Number(#t,$TaxBalance_Nlgrs_YTD, '999999999999999mi')

            let $TaxBalance_Gross_Qtd = $TaxBalance_Nlgrs_Qtd  !Subject and Gross same for now...
            let $TaxBalance_Gross_Ytd = $TaxBalance_Nlgrs_Ytd  !Subject and Gross same for now...


	    !let $Output_TaxCode = rtrim($Output_TaxCode,' ') || '3PSP'
            let $Output_Taxcode = substr($Output_TaxCode,1,3) || '3PSP'   !always 3 chars STATE, TAX_CLASS and 3PSP string 12/3/8

            let #l= length($Output_TaxCode)
            if #l < 15
               let $Output_TaxCode = rpad($Output_TaxCode,15,' ')
            end-if
	    !-------------

            let $rectp = 'W'
            
            do Out-W-rec   ! <--------------- this is the 3PSP Wage record -------

            !Restore W record fields
            move $Saved_Output_TaxCode            to     $Output_TaxCode

            move $Saved_Sick_Pay_Qtd              to     $Sick_Pay_Qtd
            move $Saved_Sick_Pay_Ytd              to     $Sick_Pay_Ytd
            move $Saved_Uncol_tips_QTD            to     $Uncol_tips_QTD
            move $Saved_Uncol_gtl_QTD             to     $Uncol_gtl_QTD
            move $Saved_TaxBalance_Tip_Wages_Ytd  to	 $TaxBalance_Tip_Wages_Ytd
            move $Saved_Stock_Options_QTD         to	 $Stock_Options_QTD
            move $Saved_Meals_employer_conv_YTD   to	 $Meals_employer_conv_YTD
            move $Saved_Moving_exp_3rdParty_YTD   to	 $Moving_exp_3rdParty_YTD
            move $Saved_Qual_transportation_YTD   to	 $Qual_transportation_YTD
            move $Saved_Severence_pay_QTD         to	 $Severence_pay_QTD
            move $Saved_Meal_Allowances_YTD       to	 $Meal_Allowances_YTD

            !added 3/29/06 --- subtract out the 3PSP amount from the original amounts to not include it twice -----

            #ifdef SUBTRACT_3PSP   !AG method, via Avalon Bay's analysis

              let #TaxBalance_Tax_Qtd = #Saved_TaxBalance_Tax_Qtd - #Sick_Pay_Tax_Qtd
              let #t = #TaxBalance_Tax_Qtd * 100
              do Format-Number(#t,$TaxBalance_Tax_Qtd,   '999999999999999mi')

              let #TaxBalance_Txgrs_Qtd = #Saved_TaxBalance_Txgrs_Qtd - #Sick_Pay_Txgrs_Qtd
              let #t = #TaxBalance_Txgrs_Qtd * 100
              do Format-Number(#t,$TaxBalance_Txgrs_Qtd,   '999999999999999mi')

              let #TaxBalance_Nlgrs_Qtd = #Saved_TaxBalance_Nlgrs_Qtd - #Sick_Pay_Nlgrs_Qtd
              let #t = #TaxBalance_Nlgrs_Qtd * 100
              do Format-Number(#t,$TaxBalance_Nlgrs_Qtd,   '999999999999999mi')

              let #TaxBalance_Tax_Ytd = #Saved_TaxBalance_Tax_Ytd - #Sick_Pay_Tax_Ytd
              let #t = #TaxBalance_Tax_Ytd * 100
              do Format-Number(#t,$TaxBalance_Tax_Ytd,   '999999999999999mi')

              let #TaxBalance_Txgrs_Ytd = #Saved_TaxBalance_Txgrs_Ytd - #Sick_Pay_Txgrs_Ytd
              let #t = #TaxBalance_Txgrs_Ytd * 100
              do Format-Number(#t,$TaxBalance_Txgrs_Ytd,   '999999999999999mi')

              let #TaxBalance_Nlgrs_Ytd = #Saved_TaxBalance_Nlgrs_Ytd - #Sick_Pay_Nlgrs_Ytd
              let #t = #TaxBalance_Nlgrs_Ytd * 100
              do Format-Number(#t,$TaxBalance_Nlgrs_Ytd,   '999999999999999mi')

              let $TaxBalance_Gross_Qtd = $TaxBalance_Nlgrs_Qtd  !Subject and Gross same for now...
              let $TaxBalance_Gross_Ytd = $TaxBalance_Nlgrs_Ytd  !Subject and Gro

              if $SelectEmplid <> ''
                #debugd show 'Adjusted  W record: ' $Output_TaxCode     ', QTD Tax = '  $TaxBalance_Tax_Qtd ', QTD Taxable = ' $TaxBalance_Txgrs_Qtd ', QTD Nlgrs = ' $TaxBalance_Nlgrs_Qtd
              end-if

            #else
              move $Saved_TaxBalance_Tax_Qtd   to $TaxBalance_Tax_Qtd
              move $Saved_TaxBalance_Txgrs_Qtd to $TaxBalance_Txgrs_Qtd
              move $Saved_TaxBalance_Nlgrs_Qtd to $TaxBalance_Nlgrs_Qtd  !fixed, 9/8/8
              move $Saved_TaxBalance_Tax_Ytd   to $TaxBalance_Tax_Ytd
              move $Saved_TaxBalance_Txgrs_Ytd to $TaxBalance_Txgrs_Ytd
              move $Saved_TaxBalance_Nlgrs_Ytd to $TaxBalance_Nlgrs_Ytd
              move $Saved_TaxBalance_Gross_Qtd to $TaxBalance_Gross_Qtd
              move $Saved_TaxBalance_Gross_Ytd to $TaxBalance_Gross_Ytd

            #endif

          end-if !end-if from above moved to here on 12/25/05

       end-if !fed or state w/h
    end-if    !if not a local

   #endif   ! 3rd Party sick pay -------------------------------------------

           
   !output the original, 'non 3PSP taxcode' last
   !----------------------------------------------
   let $rectp = 'W'
   do Out-W-rec

bypass_tax_balance_adp303q:

   let #t = 0
   do Format-Number(#t,$Sick_Pay_Qtd,             '999999999999999mi')
   do Format-Number(#t,$Sick_Pay_Ytd,             '999999999999999mi')
   do Format-Number(#t,$Uncol_tips_QTD,           '999999999999999mi')
   do Format-Number(#t,$Uncol_gtl_QTD,            '999999999999999mi')
   do Format-Number(#t,$TaxBalance_Tip_Wages_Ytd, '999999999999999mi')
   do Format-Number(#t,$Stock_Options_QTD,        '999999999999999mi')
   do Format-Number(#t,$Meals_employer_conv_YTD,  '9999999999999mi')
   do Format-Number(#t,$Moving_exp_3rdParty_YTD,  '9999999999999mi')
   do Format-Number(#t,$Qual_transportation_YTD,  '9999999999999mi')
   do Format-Number(#t,$Severence_pay_QTD,        '9999999999999mi')
   do Format-Number(#t,$Meal_Allowances_YTD,      '9999999999999mi')

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'write-wage-rec' to $debug-proc1
     move ' '    to $debug-table1
     do log-delta-time
  #endif

#endif

end-procedure

begin-procedure Out-W-rec

#ifndef TESTING_NO_W_REC

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

 let $Save_Area_Code_AK = $Area_Code_AK
 let $Save_wc_Code      = $wc_code

    !Wyoming.... workers comp rate on any Wyoming local or WYU
    !----------------------------------------------------------
    if rtrim($Output_TaxCode,' ') = 'WYU' or (substr($Output_TaxCode,1,2) = 'WY' AND substr($Output_TaxCode,4,1) <> ' ')

       let $State_Trimmed = 'WY'

       if #wc_rate = 0  !this could be set in pbzqtr.sqr too... if so, don't override the rate logic there

         #ifdef MULTIPLE_WY_WC_CODES
           let $get_local_rate = rtrim($wc_code,' ')
         #else
           let $get_local_rate = rtrim('{WY_WORKERS_COMP_CD}',' ')
         #endif

         do get-local-rate-sui
       end-if

       !added 10/15/08
       !--------------
       if substr($wc_code,3,1) = '-'
         let $wc_code_fix  = substr($wc_code,1,2) || substr($wc_code,4,4)  !skip the '-'
       else
         let $wc_code_fix  = substr($wc_code,1,6)
       end-if

       let $wc_code_fix  = lpad($wc_code_fix,6,'0')  !wc_code comes in from pbzqtr.sqr already
     else
       let $wc_code_fix = '      '
     end-if

     !Oregon.... workers comp rate
     if rtrim($Output_TaxCode,' ') = 'ORU'
       let $State_Trimmed = 'OR'
       let $get_local_rate = 'OR0001'
       do get-local-rate-sui
     end-if

     !12/12/05 fix for rate
     if #wc_rate <> 0
       let #t = #wc_rate * {WC_RATE_FACTOR}
       do Format-Number(#t,$wc_rate,  '9999999999')
     else
       do Format-Number(0,$wc_rate,  '9999999999')
     end-if

     #if {SITE_ID} = 'OSM1'  !ADP company code: NT97 WY Class Code: 237110 Rate: 3.24, ADP company code: NT98 WY Class Code: 237990 Rate: 4.52
       if $State_trimmed = 'WY'
        let $wc_code = '      '
        let $wc_rate = '         0'
        if $Current_Company = 'OUS'
         let $wc_code = '237110'
         if #RptYear < 2010
           let $wc_rate = '0000032400'                ! 0000002200 for .22%,   so 0000032000 for 3.24%
         else
           let $wc_rate = '0000032000'                ! 0000002200 for .22%,   so 0000032000 for 3.20%
         end-if
        end-if
        if $Current_Company = 'ORS'
         let $wc_code = '237990'
         let $wc_rate = '0000045200'                ! 0000002200 for .22%,   so 0000045200 for 4.52%
        end-if
        let $wc_code_fix  = $wc_code
       end-if
     #endif

     !04112013
     !#if {SITE_ID} = 'SSG1'
     !   if $State_trimmed = 'WY'
     !    let $Input_Jobcode3 = substr($Input_Jobcode,1,3)
     !    evaluate $Input_Jobcode3
     !    when = '252'
     !     let $wc_rate = '0000000066'   !.0066
     !     let $wc_code = '621999'       
     !     let $wc_code_fix  = $wc_code
     !     break
     !    when-other
     !     break
     !    end-evaluate
     !   end-if
     !#endif
   
     #if {SITE_ID} = 'WNA1'
       if $State_trimmed = 'WY'
         if #RptYear < 2012
           let $wc_rate = '0000002800'  ! 42 employees in Willis of Wyoming (SXI0) - Rate is .0028 = .28%    0000002800 for 0.28%
         else
           let $wc_rate = '0000006700'  ! 42 employees in Willis of Wyoming (SXI0) - Rate is .0067 = .67%    0000006700 for 0.67%
         end-if
       end-if
     #endif
     
    #if {SITE_ID} = 'RRD1'
       if $State_trimmed = 'WY'
        let $wc_code = '541511'
        let $wc_rate = '0000010300'
        let $wc_code_fix = $wc_code
       end-if
    #endif

    if rtrim($Output_TaxCode,' ') = 'AKU'
      let $Area_Code_AK_fix = lpad($Area_Code_AK,4,'0')  !added 6/28/07
    else
      let $Area_Code_AK_fix = '    '  !clear unless AK
    end-if
    
    !enabled Q32011
    #ifdef WORKERS_COMP_ENABLE_TABLE
       let $wc_code     = $wc_code_table
       let $wc_code_fix = substr($wc_code,1,6)
       let #wc_rate     = #wc_rate_table  
       let $wc_rate     = $wc_rate_table    
    #else
      #ifdef WA_WORKERS_COMP_ENABLE    
        if $WA_WORKERS_COMP_ENABLE = 't' and 
           ($State_trimmed = '{WA_STATE}') and ($Local_Trimmed = '{WA_WORKERS_COMP_CD}' or $Local_Trimmed = '{WA_WORKERS_COMP_CD_ER}' or $WC_Locality = $Local_Trimmed)
          let $wc_code_fix = $wc_code
        end-if
      #endif
    #endif
    

    #if {SITE_ID} = 'USB1'
       if rtrim($Output_TaxCode,' ') = 'WYU'
        do custom-WY-USB1
        let $wc_code_fix = $wc_code
       end-if
       if rtrim($Output_TaxCode,' ') = 'AKU'
        do custom-AK-USB1
        let $Area_Code_AK_fix = lpad($Area_Code_AK,4,'0')  !added 6/28/07
       end-if
    #endif

    !12/8/2011
    #if {SITE_ID} = 'RBT1'
     #ifndef RHI_CORP
      if $State_trimmed = 'WY'
        Do Get-Workers-Comp-RHI  ! in rhiwkcmp.sqc: Input: $State_Trimmed, $Current_Company, $Current_Emplid, $Qtr_End_Native.  Output: $wc_code, #wc_rate
        let #t = #wc_rate * {WC_RATE_FACTOR}  
        do Format-Number(#t,$wc_rate,  '9999999999')     
        let $wc_code_fix = $wc_code
       end-if
     #endif
    #endif
    
    #ifdef USE_NAICS_CODE
      if $State_trimmed = 'WY'
        do get-NAICS-Code
        let $wc_code_fix = $wc_code
      end-if
    #endif

    #ifdef CUSTOM_WY_WORKERS_COMP
       do custom-WY-Workers-Comp
    #endif
    let $wc_code_fix = substr($wc_code_fix,1,6)

    #ifdef CUSTOM_CORP_OFFICER
       do custom-corp-officer
    #endif


    !CIS Tax - 3Q 2012 Release, Requirement: 2.2.2
    if {FULL_PART_TIME_CRITERIA}
      #ifdef CUSTOM_PART_TIME_INDICATOR
        do Custom-Part-Time-Flag  !set $full_part_time_flag
      #else
       if $full_part_time = 'P'
         let $full_part_time_flag = $full_part_time
       else
         let $full_part_time_flag = ' '
       end-if
      #endif
      
    else
      let $full_part_time_flag = ' '
    end-if   

    #ifndef SKIP_TAX_AND_WAGE_AUDITS
      #ifndef ADP_TAX_AMEND
        do log-multistate
      #endif
    #endif

    #ifdef WORKSITE_REPORTING
        let $worksite_into_extract_mwr = rpad($worksite_into_extract,21,' ')  !529-549
    #endif

    #ifdef UI_OVERRIDE
       if $state_trimmed <> '$U' and $class_trimmed = 'U'
        do Get-UI-Override
       end-if
    #endif

    #ifdef CUSTOM_QUARTERLY_LOGIC_ENABLED
     do custom-associate-level-logic-quarterly-W-rec
    #endif

    let $Out_Deptid  = substr($Out_Deptid,1,5) !added 5/24/05
    let $Out_Deptid  = lpad($Out_Deptid,5,'0') !added 9/28/05
    
    #ifdef WORKSITE_REPORTING
       ! if {VALID_SUI_LOCATION_CODE_CRITERIA}
       ! else
       !   let $Out_Deptid = '     '    !clear it for the non-state required states for MWR
       ! end-if
       #ifdef LOG_MWR_SETUP_TBL
        do Audit-MWR-Setup-Tbl
       #endif
    #endif

!Q4, 2015
!----------------------------------------------------
  let $Multi_state = ' '
  !let $Gen_US_SOC_CD = ''
  let $Gen_Occup_Title = ''
  let $WI_Nil_Indicator = ''
  
  #ifdef Q4_2015
    
        #ifdef GENERATE_HOURLY_RATE_ON_SUI
         if $State_Trimmed <> '$U' and $Class_Trimmed = 'U'
          let #Hourly_rt = &JB.HOURLY_RT
          #if {SITE_ID} = 'AMN1'
           if &JB.COMPRATE <> 0
             !Comprate is always a monthly frequency...
             let #Hourly_Rt = (&JB.COMPRATE * 12) / 2080
           end-if
          #endif
         else
          let #Hourly_rt = 0
         end-if
         let #t =  #Hourly_rt * 10000   !$112.345 / hr ---> 1123450
         do Format-Number(#t, $Hourly_rt,   '9999999999')
         
         if $SelectEmplid <> ''
           show 'GENERATE_HOURLY_RATE_ON_SUI formatted hourly rate.  SUI: ' $State_Trimmed $Class_Trimmed ' hourly rate = ' $Hourly_rt
         end-if
         
        #endif
        
         if $State_Trimmed = 'LA' and $Class_Trimmed = 'U'
          and rtrim($Occup_code,' ') = ''
           do Get-General-Job-Data   !LAU - $Gen_US_SOC_CD, Occupational code Standard Occupational Code (SOC) W 331-350 OR,       Gen_Occup_Title Job Title   - Client defined Job Title for this employee W 550-629  (new field)

           !if substr($Gen_US_SOC_CD,3,1) = '-'
           !  let $wc_code_fix  = substr($Gen_US_SOC_CD,1,2) || substr($Gen_US_SOC_CD,4,4)  !skip the '-'
           !else
           !  let $wc_code_fix  = $Gen_US_SOC_CD
           !end-if
           !let $wc_code_fix  = lpad($wc_code_fix,6,'0')  !wc_code comes in from pbzqtr.sqr already

         end-if
         
         if $State_Trimmed = 'WI' and $Class_Trimmed = 'U' and #TaxBalance_Nlgrs_Ytd > 0
          do Get-State-Withholding-Tax-Balances           ! 399	399	1	A	Employee W-2 Nil Indicator , positive W-2 wages in another state and no W-2 wages for Wisconsin.  
          let $multi_state = $WI_Nil_Indicator 
         end-if
         
         #ifdef CUSTOM_Q4_2015
            do Custom-Q4-2015   !LA:  $Gen_Occup_Title, $Hourly_rt (formatted into 10 chars as: eg. 112.345 / hr = "   1123450")         WI: $multi_state Y/N
         #endif
  #endif
!------------------------------------------------

      
    #ifdef Q3_2010_RUN_CONTROL
        if $ADP_QTR_MODE = 'A'
          do retrieve-quarterly-logging  ! <---- sets $QTD_Weeks_worked (2), and $QTD_Hours_Worked (4)
        end-if                           !       for SUI and LOCAL taxes (since we're only using weeks and hours)
        #ifndef USE_TEMP_TABLE_FOR_OUTPUT
         do build-qoutstr  !$qout_str has the full 'w' record string
        #endif
    #endif


    #ifdef USE_TEMP_TABLE_FOR_OUTPUT
     do build-qoutstr  !$qout_str has the full 'w' record string
    #endif

    #ifdef QUARTERLY_HISTORY
         do populate_ADP_QTR_HIST
    #endif

    #ifdef USE_TEMP_TABLE_FOR_OUTPUT
       do Log-W-rec-data
    #else

       Add #TaxBalance_Tax_qtd to #Company_trailer_Total_Tax
       Add #TaxBalance_Tax_qtd to #hash_qtd_Total_Tax

       !1/11/06 ADDED  for Quarterly too
       !------------------------------------------------
       #ifdef KJDA_PS_DELIVERED
         #if {SITE_ID} = 'HWL1'
           if (substr($Output_TaxCode,4,1) <> ' ') and (substr($Output_TaxCode,1,2) = 'KY') !KY local
            if rtrim($KJDA_Header_Company,' ') = 't'
              let $stmp = substr($Output_TaxCode,1,13) || 'K' || substr($Output_TaxCode,15,1)
              let $Output_TaxCode = rtrim($stmp,' ')
            end-if
           end-if
         #endif
        #endif

!         #ifdef KJDA
          #if {SITE_ID} = 'PJN1'
           if  (substr($Output_TaxCode,1,7) =  'KYH111 ') OR (substr($Output_TaxCode,1,9) = 'KYH40222 ')
            if rtrim($KJDA_Header_Company,' ') = 't'
              let $stmp = substr($Output_TaxCode,1,13) || 'K' || substr($Output_TaxCode,15,1)
              let $Output_TaxCode = rtrim($stmp,' ')
            end-if
           end-if
         #endif
!        #endif

        if $SelectEmplid <> ''
         show '** Writing Wage Rec ** ' $Output_TaxCode ', QTD Tax = ' $TaxBalance_Tax_Qtd ', QTD Txgrs = ' $TaxBalance_Txgrs_Qtd ', YTD Tax = ' $TaxBalance_Tax_Ytd ', YTD Txgrs = ' $TaxBalance_Txgrs_Ytd
         show '    WIC ' $worksite_into_extract ', UI Loc ' $Out_Deptid ', wc_code ' $wc_code_fix ', wc_rate ' $wc_rate ', Occ_code ' $Occup_code ', Area_Cd = ' $Area_Code_AK_fix
         #ifdef Q4_2015
         show '    Hourly rate ' $hourly_rt ', LA Occup_Title ' $Gen_Occup_Title ' , WI indicator = ' $WI_Nil_Indicator
         #endif         
         #ifdef Q3_2016
         show '    IN location ' $IN_DWD_Location_Code ' (630-639)'
         #endif
         if $state_trimmed = 'PA' and $class_trimmed = 'H' and $Local_trimmed <> ''
          show '   PA_Work_Locality ' $PA_Work_Locality ', PA_PSD_Locality ' $PA_PSD_Locality ', PA_RES_Locality ' $PA_RES_Locality
         end-if
        end-if
        
        let $State_edit       = substr($Output_TaxCode,1,2)
        let $Taxclass_local   = substr($Output_TaxCode,3,13)
        if $State_edit = 'YY'
         let $State_edit = 'XX'
        end-if

        #ifndef BYPASS_PA_WORK_EXTRACT
          if rtrim($PA_Work_Locality,' ') <> '' 
            if substr($PA_LocalityName,1,12) = 'PHILADELPHIA' and substr($Output_TaxCode,15,1) = 'Y'  !20121017 to not hardcode the Philly locals
              if $SelectEmplid <> ''
                show '    Philly Res $Taxclass_local      = ' $Taxclass_local ' for PA_Work_Locality ' $PA_Work_Locality ', PA_LocalityName = ' $PA_LocalityName
              end-if
            else
              let $Taxclass_local   = substr($Output_TaxCode,3,1) || substr($PA_Work_Locality,1,11) || ' '
              if $SelectEmplid <> ''
                show '    PA Local:  $Taxclass_local      = ' $Taxclass_local ' for PA_Work_Locality ' $PA_Work_Locality ', PA_LocalityName = ' $PA_LocalityName
              end-if
            end-if
         end-if
        #else
          let $PA_PSD_Locality = '      '
          let $PA_RES_Locality = '               '
        #endif

   
        Write 1 FROM  $rectp:1
                     $State_edit:2
                     $Taxclass_local:13
                     $worksite_into_extract:10
                     $TaxBalance_Tax_Qtd:16
                     $TaxBalance_Gross_Qtd:16 !new
                     $TaxBalance_Nlgrs_Qtd:16
                     $TaxBalance_Txgrs_Qtd:16
                     $TaxBalance_Tip_Wages_Qtd:16
                     $Sick_Pay_Qtd_nt:16                !added 3/21/05
                     $Uncol_tips_QTD:16              ! 12M -$Qtd_Uncollected_Tip_Qtd:16
                     $Uncol_gtl_QTD:16               ! 12N - $Qtd_Uncollected_GTL_Ded_Qtd:16
                     $blank:16                       ! blank
                     $blank:16                      ! blank
                     $TaxBalance_Tax_Ytd:16
                     $TaxBalance_Gross_Ytd:16 !new
                     $TaxBalance_Nlgrs_Ytd:16
                     $TaxBalance_Txgrs_Ytd:16
                     $Excess_YTD:16                  !<-------------- should this be blank now....?
                     $TaxBalance_Tip_Wages_Ytd:16
                     $Sick_Pay_Ytd_nt:16       ! added 3/21/05
                     $zero16:16             ! $Ytd_Other_Comp_Ytd:16
                     $Stock_Options_YTD:16  ! (Nonstatutory for the year)
                     $Occup_code:20
                     $Area_Code_AK_fix:4
                     $Statetax_Wage_Plan_CD:1
                     $Seasonal_Worker:1
                     $Corp_Officer:1
                     $wc_code_fix:6
                     $wc_rate:10
                     $exemptions:2
                     $blank:1
                     $Stock_Options_QTD:16   !3.03
                     $FLI_Status_flag:1
                     $marital:1
                     $Employee_Probationary_Status:1                       !3.03  Y/N
                     $Health_insurance_indicator:1
                     $full_part_time_flag:1                                     !8/6/2012
                     $SUT_Exempt_flag:1  !3.03  Y/N
                     $Multi_state:1                          !WI SIT Nil flag for Q4, 2015 position 399 of WIU record
                     $Out_Deptid:5                           !4/26/05 replaced (for MN and MI) $worksite_into_extract
                     $SDI_Exempt_flag:1             !3.03
                     $hourly_rt:10             !3.03
                     $Month1_Worked:1
                     $Month2_Worked:1
                     $Month3_Worked:1
                     $blank:1                                !prior to 8/28/08, $Worked_in_Qtr:1
                     $Qtd_Weeks_Worked:2
                     $blank:1                  !3.03 was Emp_Sex_M3:1
                     $Qtd_Hours_Worked:4       !4 chars will clip off the implied decimal position
                     $Meals_employer_conv_YTD:14   !new n/i FUTA related
                     $Moving_exp_3rdParty_YTD:14   !new n/i FUTA related
                     $Qual_transportation_YTD:14   !new n/i FUTA related
                     $Severence_pay_QTD:14     !3.03
                     $Meal_Allowances_YTD:14   !3.03
                     $weeks_worked_under_min:3 !3.03
                     $family_status:1          !3.03
                     $blank:2                     !501-502    Q3, 2011 
                     $PA_PSD_Locality:6           !503-508    Q3, 2011 PSD RESDIENT code
                     $blank:5                     !509-513    Q3, 2011 
                     $PA_RES_Locality:15          !514-528    Q3, 2011 PSD RESIDENT Locality (taxcode)
                     #ifdef WORKSITE_REPORTING
                     $worksite_into_extract_mwr:21  !529..549
                     #else
                     $blank:21
                     #endif
                     #ifdef Q4_2015
                     $Gen_Occup_Title:80            !550-629
                     #endif
                     #ifdef Q3_2016
                     $IN_DWD_Location_Code:10              !630-639
                     #endif
                     
            add 1 to #company_trailer_reccnt
            add 1 to #reccnt

            #ifdef EXCEL_FIXED_QUARTERLY_FILENAME
              let #qtd       = #TaxBalance_Tax_Qtd
              let #nlgrs_qtd = #TaxBalance_Nlgrs_Qtd
              let #txgrs_qtd = #TaxBalance_Txgrs_Qtd

              let #ytd       = #TaxBalance_Tax_ytd
              let #nlgrs_ytd = #TaxBalance_Nlgrs_ytd
              let #txgrs_ytd = #TaxBalance_Txgrs_ytd

              let $tc = rpad($State_edit,2,' ') || rpad($Taxclass_local,13,' ')
              do quarterly-excel-totals-update
            #endif

         #endif

     #ifdef Q3_2010_RUN_CONTROL
        if $ADP_QTR_MODE = 'N' and $Report_Only_Flag <> 'Y'
          do store-quarterly-logging
        end-if
     #endif

  let $Area_Code_AK = $Save_Area_Code_AK
  let $wc_code      = $Save_wc_code

  #ifdef WORKERS_COMP_ENABLE_TABLE
    let $wc_code_table = ''
    let #wc_rate_table = 0  
    let $wc_rate_table = '' 
  #endif 
  
  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Out-W-rec' to $debug-proc1
     move ' '    to $debug-table1
     do log-delta-time
  #endif

#endif

end-procedure

begin-procedure build-qoutstr

     let #l= length($Occup_code)
     if #l < 20
       let $Occup_code = rpad($Occup_code,20,' ')
     else
       let $Occup_code = substr($Occup_code,1,20)  !4/10/6 fix .. was 1,4
     end-if
     let #l= length($Area_Code_AK)
     if #l < 4
       let $Area_Code_AK_fix = lpad($Area_Code_AK_fix,4,'0')  !modified 6/28/07 from rpad to lpad
     else
       let $Area_Code_AK_fix = substr($Area_Code_AK_fix,1,4)
     end-if

     if rtrim($Private_sdi,' ') <> 'Y'
       let $Private_sdi = 'N'
     end-if

     if rtrim($Output_TaxCode,' ') = 'VTU'
      if rtrim($Health_insurance_indicator,' ') <> '3'                    !fixed June 13, 2007
       let $Health_insurance_indicator = '1'  !default to 1 for VT
      end-if
     else
      let $Health_insurance_indicator = ' '  !default to 1 for VT
     end-if

     #ifdef USE_TEMP_TABLE_FOR_OUTPUT
     if $SelectEmplid <> ''
      #debugd show 'USE_TEMP_TABLE_FOR_OUTPUT, logging W-rec'
      #debugd show ' in Out-W-rec routine, emplid       = ' $Current_emplid ', taxcode ' $Output_TaxCode
      #debugd show '                  $Out_Deptid       = ' $Out_Deptid
      #debugd show '                  $wc_code_fix      = ' $wc_code_fix
      #debugd show '                  $wc_rate          = ' $wc_rate
      #debugd show '                  $Occup_code       = ' $Occup_code
      #debugd show '                  $Area_Code_AK_fix = ' $Area_Code_AK_fix
      #debugd show '                  $Corp_Officer     = ' $Corp_officer ' (JOB.OFFICER_CD =   ' $officer_cd       ')'
      #debugd show '                  $Multi_state      = ' $Multi_state  ' (Multi_state_flag = ' $multi_state_flag ')'
      #debugd show '         $worksite_into_extract     = ' $worksite_into_extract
      #debugd show '              $PA_Work_Locality     = ' $PA_Work_Locality
      #debugd show '               $PA_PSD_Locality     = ' $PA_PSD_Locality
      #debugd show '               $PA_RES_Locality     = ' $PA_RES_Locality
      #ifdef WORKSITE_REPORTING
      #debugd show '        $worksite_into_extract_mwr  = ' $worksite_into_extract_mwr
      #endif
     end-if
     #endif

     let $State_edit       = substr($Output_TaxCode,1,2)
     let $Taxclass_local   = substr($Output_TaxCode,3,13)
     if $State_edit = 'YY'
       let $State_edit = 'XX'
     end-if
   
     #ifndef BYPASS_PA_WORK_EXTRACT
          if rtrim($PA_Work_Locality,' ') <> '' 
            if substr($PA_LocalityName,1,12) = 'PHILADELPHIA' and substr($Output_TaxCode,15,1) = 'Y'  !20121017 to not hardcode the Philly locals
              if $SelectEmplid <> ''
                show '    Philly Res $Taxclass_local      = ' $Taxclass_local ' for PA_Work_Locality ' $PA_Work_Locality ', PA_LocalityName = ' $PA_LocalityName
              end-if
            else
              let $Taxclass_local   = substr($Output_TaxCode,3,1) || substr($PA_Work_Locality,1,11) || ' '
              if $SelectEmplid <> ''
                 show '    PA Local:  $Taxclass_local      = ' $Taxclass_local ' for PA_Work_Locality ' $PA_Work_Locality ', PA_LocalityName = ' $PA_LocalityName
              end-if
            end-if
         end-if
     #else
          let $PA_PSD_Locality = '      '
          let $PA_RES_Locality = '               '
     #endif
        
     let $qout_str = rpad($rectp,1,' ') ||
                     rpad($State_edit,2,' ') ||
                     rpad($Taxclass_local,13,' ') ||
                     rpad($worksite_into_extract,10,' ') ||
                     rpad($TaxBalance_Tax_Qtd,16,' ') ||
                     rpad($TaxBalance_Gross_Qtd,16,' ') ||
                     rpad($TaxBalance_Nlgrs_Qtd,16,' ') ||
                     rpad($TaxBalance_Txgrs_Qtd,16,' ') ||
                     rpad($TaxBalance_Tip_Wages_Qtd,16,' ') ||
                     rpad($Sick_Pay_Qtd_nt,16,' ') ||
                     rpad($Uncol_tips_QTD,16,' ') ||
                     rpad($Uncol_gtl_QTD,16,' ') ||
                     '                ' ||
                     '                ' ||
                     rpad($TaxBalance_Tax_Ytd,16,' ') ||
                     rpad($TaxBalance_Gross_Ytd,16,' ') ||
                     rpad($TaxBalance_Nlgrs_Ytd,16,' ') ||
                     rpad($TaxBalance_Txgrs_Ytd,16,' ') ||
                     rpad($Excess_YTD,16,' ') ||
                     rpad($TaxBalance_Tip_Wages_Ytd,16,' ') ||
                     rpad($Sick_Pay_Ytd_nt,16,' ') ||
                     '                ' ||
                     rpad($Stock_Options_YTD,16,' ') ||
                     substr($Occup_code,1,20) ||
                     substr($Area_Code_AK_fix,1,4) ||
                     substr($Statetax_Wage_Plan_CD,1,1) ||
                     substr($Seasonal_Worker,1,1) ||
                     substr($Corp_Officer,1,1) ||
                     rpad($wc_code_fix,6,' ') ||
                     rpad($wc_rate,10,' ') ||
                     rpad($exemptions,2,' ') ||
                     ' ' ||
                     rpad($Stock_Options_QTD,16,' ') ||
                     substr($FLI_Status_flag,1,1) ||           !2/18/09 fix  (line #2467)  Change FLI_Status_flag to $FLI_Status_flag
                     rpad($marital,1,' ')                      !11/5/08  change from substr($marital,1,1) - due to shifting left

   !break this madness up so it will compile

                 let $qout_str = $qout_str ||
                     rpad($Employee_Probationary_Status,1,' ') ||
                     substr($Health_insurance_indicator,1,1) ||
                     substr($full_part_time_flag,1,1) ||
                     substr($SUT_Exempt_flag,1,1) ||
                     rpad($Multi_state,1,' ') ||
                     rpad($Out_Deptid,5,' ') ||
                     substr($SDI_Exempt_flag,1,1) ||
                     rpad($hourly_rt,10,' ') ||
                     rtrim($Month1_Worked,' ') ||
                     rtrim($Month2_Worked,' ') ||
                     rtrim($Month3_Worked,' ') ||
                     ' ' ||                                  !prior to 8/26/08, rtrim($Worked_in_Qtr,' ') ||
                     rpad($Qtd_Weeks_Worked,2,' ') ||
                     ' ' ||
                     rpad($Qtd_Hours_Worked,4,' ') ||
                     rpad($Meals_employer_conv_YTD,14,' ') ||
                     rpad($Moving_exp_3rdParty_YTD,14,' ') ||
                     rpad($Qual_transportation_YTD,14,' ') ||
                     rpad($Severence_pay_QTD,14,' ') ||
                     rpad($Meal_Allowances_YTD,14,' ') ||
                     rpad($weeks_worked_under_min,3,' ') ||
                     substr($family_status,1,1)  || 
                     '  ' ||                                          !501-502
                     rpad($PA_PSD_Locality,6,' ')  ||                 !503-508    Q3, 2011 PSD RESDIENT code
                     '     ' ||                                       !509-513    5 blanks
                     rpad($PA_RES_Locality,15,' ')                    !514-528    Q3, 2011 PSD RESIDENT Locality (taxcode)
                     #ifdef WORKSITE_REPORTING
                      || rpad($worksite_into_extract_mwr,21,' ')      !529-549
                     #else
                      || '                     '
                     #endif
                     #ifdef Q4_2015
                      || rpad($Gen_Occup_Title,80,' ')                !550-629
                     #endif
                     #ifdef Q3_2016
                      || rpad($IN_DWD_Location_Code,10,' ')           !630-639
                     #endif

                  
 end-procedure

!-------------------------------------------------------------------------------------------------------
!  Aug 18, 2010    Q3_2010_RUN_CONTROL  $ADP_QTR_MODE '' no change, 'N' Write to TF_ADP_QTR_LOG, 'A' read from it
!-------------------------------------------------------------------------------------------------------

#ifdef Q3_2010_RUN_CONTROL
begin-procedure store-quarterly-logging

   do Get-Current-DateTime
   move $AsOfToday to $Proc_dt
   let $update_log = 'f'

begin-SQL on-error=store-quarterly-logging-warn
   INSERT INTO PS_{Client_Table_Prefix}ADP_QTR_LOG{Client_Table_Suffix} (
      BALANCE_YEAR
     ,BALANCE_QTR
     ,COMPANY
     ,EMPLID
     ,{CLIENT_FIELD_PREFIX}TAXCODE{CLIENT_FIELD_SUFFIX}
     ,{CLIENT_FIELD_PREFIX}PBZQOUT_STR{CLIENT_FIELD_SUFFIX}
     ,{CLIENT_FIELD_PREFIX}PROCESS_DT{CLIENT_FIELD_SUFFIX}
      )
   VALUES (
     #RptYear
     ,#RptQtr
     ,$Current_Company
     ,$Current_Emplid
     ,$Output_TaxCode
     ,$qout_str
     ,$Proc_dt
      )

end-SQL

    if $update_log = 'f'
       add 1 to #insert_quarterly_logging_count
    else
       add 1 to #update_quarterly_logging_count
    end-if

    add 1 to #store_quarterly_logging_count

end-procedure

begin-procedure store-quarterly-logging-warn


begin-SQL on-error=store-quarterly-logging-err

   UPDATE PS_{Client_Table_Prefix}ADP_QTR_LOG{Client_Table_Suffix}
     SET {CLIENT_FIELD_PREFIX}PBZQOUT_STR{CLIENT_FIELD_SUFFIX}  = $qout_str
         ,{CLIENT_FIELD_PREFIX}PROCESS_DT{CLIENT_FIELD_SUFFIX}  = $proc_dt
     #ifdef USE_INT_CRITERIA
      WHERE BALANCE_YEAR  = int(\$RptYearZ\)
        AND BALANCE_QTR   = int(\$RptQtrZ\)
     #else
      WHERE BALANCE_YEAR  = #RptYear
        AND BALANCE_QTR   = #RptQtr
     #endif
         
       AND COMPANY       = $Current_Company
       AND EMPLID        = $Current_Emplid
       AND {CLIENT_FIELD_PREFIX}TAXCODE{CLIENT_FIELD_SUFFIX} = $Output_TaxCode

end-SQL

    let $update_log = 't'

end-procedure

begin-procedure store-quarterly-logging-err

   show 'Error inserting or updating  PS_{Client_Table_Prefix}ADP_QTR_LOG{Client_Table_Suffix}'
   stop

end-procedure

begin-procedure retrieve-quarterly-logging
 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

begin-select
QLOG.{CLIENT_FIELD_PREFIX}PBZQOUT_STR{CLIENT_FIELD_SUFFIX}
QLOG.{CLIENT_FIELD_PREFIX}PROCESS_DT{CLIENT_FIELD_SUFFIX}

   !weeks, 420-421, Hours, 423-426
   !--------------------------------
   let $Qtd_Weeks_Worked = substr(&QLOG.{CLIENT_FIELD_PREFIX}PBZQOUT_STR{CLIENT_FIELD_SUFFIX},420,2)
   let $Qtd_Hours_Worked = substr(&QLOG.{CLIENT_FIELD_PREFIX}PBZQOUT_STR{CLIENT_FIELD_SUFFIX},423,4)
   add 1 to #retrieve_quarterly_logging_count

 FROM PS_{Client_Table_Prefix}ADP_QTR_LOG{Client_Table_Suffix} QLOG {NOLOCK_SQL}
 #ifdef USE_INT_CRITERIA
  WHERE QLOG.BALANCE_YEAR      = int(\$RptYearZ\)
    AND QLOG.BALANCE_QTR       = int(\$RptQtrZ\)
 #else
  WHERE QLOG.BALANCE_YEAR      = #RptYear
    AND QLOG.BALANCE_QTR       = #RptQtr
 #endif
    AND QLOG.COMPANY           = $Current_Company
    AND QLOG.EMPLID            = $Current_Emplid
    AND QLOG.{CLIENT_FIELD_PREFIX}TAXCODE{CLIENT_FIELD_SUFFIX} = $Output_Taxcode

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'retrieve-quarterly-logging' to $debug-proc1
     move 'PS_TF_ADP_QTR_LOG'    to $debug-table1
     do log-delta-time
  #endif

end-procedure
#endif

begin-procedure update-totals-from-wage-rec

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

 if $E.TAXFORM_ID <> 'P'

  evaluate $taxcode

      when  = '$UH'
        array-add #TaxBalance_Txgrs_Ytd  #TaxBalance_Tax_Ytd  to Company_Totals(#cur_tot) C_01 C_02
        
        add #TaxBalance_Txgrs_Ytd to #Box01_Current
        add #TaxBalance_Tax_Ytd   to #Box02_Current
        break
      when  = '$UD'
        array-add #TaxBalance_Txgrs_Ytd #TaxBalance_Tax_Ytd to Company_Totals(#cur_tot) C_03 C_04

        add #TaxBalance_Txgrs_Ytd to #Box03_Current
        add #TaxBalance_Tax_Ytd   to #Box04_Current
        break
      when  = '$UG'
        array-add #TaxBalance_Txgrs_Ytd to Company_Totals(#cur_tot) C_07
        break
      when  = '$UF'
        array-add #TaxBalance_Txgrs_Ytd #TaxBalance_Tax_Ytd to Company_Totals(#cur_tot) C_05 C_06
        add #TaxBalance_Txgrs_Ytd to #Box05_Current
        add #TaxBalance_Tax_Ytd   to #Box06_Current
        break
      when  = '$U7'                                                            !20140106 added
        array-add #TaxBalance_Tax_Ytd to Company_Totals(#cur_tot) C_06         !20140106 added
        add #TaxBalance_Tax_Ytd   to #Box06_Current                            !20140106 added
        break                                                                  !20140106 added
      when  = '$UC'
        array-add #TaxBalance_Tax_Ytd to Company_Totals(#cur_tot) C_09
        break
      when  = '$UT'  !Med wages EE on tips
        array-add #TaxBalance_Txgrs_Ytd to Company_Totals(#cur_tot) C_05
        break
      when-other
    break
 end-evaluate

 if $state_trimmed <> '$U' AND $class_trimmed = 'H' AND $local_trimmed = ''
       array-add #TaxBalance_Txgrs_Ytd  #TaxBalance_Tax_Ytd to Company_Totals(#cur_tot) C_16 C_17

       add #TaxBalance_Txgrs_Ytd to #Box16_Current
       add #TaxBalance_Tax_Ytd   to #Box17_Current
 end-if

 if $local_trimmed <> ''
     array-add #TaxBalance_Txgrs_Ytd #TaxBalance_Tax_Ytd to Company_Totals(#cur_tot) C_18 C_19
     
     if $class_trimmed = 'R' or ($class_trimmed = 'B' and $state_trimmed = 'OR')  ! we don't want this showing on the Limited summary, 20121217
       if $SelectEmplid <> ''
         #debugd show 'Not writing to #Box18_Current and #Box19_Current for W-2 Summary ' $state_trimmed $class_trimmed $local_trimmed
       end-if
     else
       add #TaxBalance_Txgrs_Ytd to #Box18_Current         ! if it is an ER tax (1/18/2011)
       add #TaxBalance_Tax_Ytd   to #Box19_Current
     end-if     
 end-if

 if $state_trimmed <> '$U' AND $class_trimmed = 'D' AND $local_trimmed = ''
       add #TaxBalance_Tax_Ytd   to #Box14_Current
 end-if

else  !PR
   evaluate $taxcode

      when  = 'PRH'
        array-add #TaxBalance_Txgrs_Ytd to PR_Totals(#cur_tot) C_07
        array-add #TaxBalance_Tax_Ytd to PR_Totals(#cur_tot) C_13
        break
      when  = '$UD'
        array-add #TaxBalance_Txgrs_Ytd to PR_Totals(#cur_tot) C_17
        array-add #TaxBalance_Tax_Ytd to PR_Totals(#cur_tot) C_18
        break
      when  = '$UF'
        array-add #TaxBalance_Txgrs_Ytd to PR_Totals(#cur_tot) C_19
        array-add #TaxBalance_Tax_Ytd to PR_Totals(#cur_tot) C_20
        break
      when-other
    break
   end-evaluate
 

end-if

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'update-totals-from-wage-rec' to $debug-proc1
     move ' '    to $debug-table1
     do log-delta-time
  #endif

end-procedure



begin-procedure Get-Misc-Earns

    move 0 to #Earn_QTD
    move 0 to #Earn_YTD

 #ifndef SKIP_Get-Misc-Earn

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

begin-select
A1.BALANCE_QTR
EARNDTL.OTH_EARNS
EARNDTL.ERNCD
BB.COMPANY
BB.PAYGROUP
BB.PAY_END_DT
BB.{pg}
BB.{ln}
BB.OFF_CYCLE
BB.SEPCHK
CC.STATE
CC.LOCALITY

  if rtrim(&CC.STATE,' ') = $state_trimmed AND ( rtrim(&CC.LOCALITY,' ') = $local_trimmed or $local_trimmed = '' )
    or $state_trimmed = '$U'  !1/12/11 added to get the Federal non-taxable
    
     if &A1.BALANCE_QTR  = #RptQtr
      let #Earn_QTD = #Earn_QTD + &EARNDTL.OTH_EARNS
     end-if
     let #Earn_YTD = #Earn_YTD + &EARNDTL.OTH_EARNS

 end-if


 FROM  PS_PAY_CHECK{WAREHOUSE_SUFFIX} BB  {NOLOCK_SQL}, PS_PAY_EARNINGS{WAREHOUSE_SUFFIX} CC  {NOLOCK_SQL},
       PS_PAY_OTH_EARNS{WAREHOUSE_SUFFIX} EARNDTL  {NOLOCK_SQL}, PS_PAY_CALENDAR{WAREHOUSE_SUFFIX} LL {NOLOCK_SQL},
       PS_PAY_CAL_BAL_ID{WAREHOUSE_SUFFIX} A1 {NOLOCK_SQL}

 WHERE
      LL.COMPANY         = A1.COMPANY
  AND LL.PAYGROUP        = A1.PAYGROUP
  AND LL.PAY_END_DT      = A1.PAY_END_DT
  AND A1.BALANCE_ID      = $Calendar_Year_Id

  #ifdef USE_INT_CRITERIA
   AND A1.BALANCE_YEAR    = int(\$RptYearZ\)
  #else
   AND A1.BALANCE_YEAR    = #RptYear
  #endif
  
  AND EARNDTL.COMPANY    = LL.COMPANY
  AND EARNDTL.PAYGROUP   = LL.PAYGROUP
  AND EARNDTL.PAY_END_DT = LL.PAY_END_DT
  AND EARNDTL.OFF_CYCLE  = BB.OFF_CYCLE
  AND EARNDTL.{pg}       = BB.{pg}
  AND EARNDTL.{ln}       = BB.{ln}
  AND EARNDTL.{addl}   = CC.{addl}

  #if {PeopleSoft_Version} >= '8'      !10/12/07   use sepchk
     AND EARNDTL.SEPCHK     = BB.SEPCHK
  #endif

  AND CC.COMPANY    = LL.COMPANY
  AND CC.PAYGROUP   = LL.PAYGROUP
  AND CC.PAY_END_DT = LL.PAY_END_DT
  AND CC.OFF_CYCLE  = BB.OFF_CYCLE
  AND CC.{pg}       = BB.{pg}
  AND CC.{ln}       = BB.{ln}
  AND CC.SEPCHK     = BB.SEPCHK
  AND CC.EMPLID     = BB.EMPLID

  AND BB.COMPANY         = LL.COMPANY
  AND BB.PAYGROUP        = LL.PAYGROUP
  AND BB.PAY_END_DT      = LL.PAY_END_DT
  AND BB.{chk_num}       <> 0
  AND BB.PAYCHECK_STATUS IN ('F','R','A')
  AND BB.EMPLID          = $Current_EmplID
  AND BB.COMPANY         = $Current_Company

   #ifdef MVS
    AND \$erncd_sel\
   #else
    AND [$erncd_sel]
   #endif

 #ifdef SELECT_WITH_UR
  with ur
 #end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'get-misc-earns' to $debug-proc1
     move 'PS_PAY_CHECK'    to $debug-table1
     do log-delta-time
  #endif


#endif

end-procedure



begin-procedure get-specific-earnings-bal

  move 0 to #Earn_QTD                                                         ! TMG 12/21/04
  move 0 to #Earn_YTD

#ifndef SKIP_specific-earnings-bal

  let #earn_amt = 0

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

begin-select
EARNBAL.GRS_QTD
EARNBAL.GRS_YTD
EARNBAL.ERNCD
EARNBAL.BALANCE_QTR
EARNBAL.BALANCE_PERIOD

 add &EARNBAL.GRS_YTD to #earn_YTD

 if &EARNBAL.BALANCE_QTR  = #RptQtr
   add &EARNBAL.GRS_QTD to #earn_QTD
 end-if

 FROM PS_EARNINGS_BAL{WAREHOUSE_SUFFIX} EARNBAL {NOLOCK_SQL}
 WHERE EARNBAL.EMPLID            = $Current_Emplid
  AND EARNBAL.COMPANY            = $Current_Company
  AND EARNBAL.BALANCE_ID         = $Calendar_Year_Id
  #ifdef USE_INT_CRITERIA
   AND EARNBAL.BALANCE_YEAR       = int(\$RptYearZ\)
  #else
   AND EARNBAL.BALANCE_YEAR       = #RptYear
  #endif
    
  AND EARNBAL.SPCL_BALANCE       = 'N'

  #ifdef MVS
    AND \$erncd_sel\
  #else
    AND [$erncd_sel]
  #endif

  AND EARNBAL.GRS_QTD > 0
  AND EARNBAL.BALANCE_PERIOD     =  (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL{WAREHOUSE_SUFFIX} EB4 {NOLOCK_SQL}
       WHERE  EB4.EMPLID            = EARNBAL.EMPLID
         AND  EB4.COMPANY           = EARNBAL.COMPANY
         AND  EB4.BALANCE_ID        = EARNBAL.BALANCE_ID
         AND  EB4.BALANCE_YEAR      = EARNBAL.BALANCE_YEAR
         AND  EB4.SPCL_BALANCE      = EARNBAL.SPCL_BALANCE
         AND  EB4.ERNCD             = EARNBAL.ERNCD
        #ifdef USE_INT_CRITERIA
         AND  EB4.BALANCE_PERIOD    <= int(\$RptMonthZ\))
        #else
         AND  EB4.BALANCE_PERIOD    <= #RptMonth)
        #endif

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'get-specific-earnings-bal' to $debug-proc1
     move 'PS_EARNINGS_BAL'    to $debug-table1
     do log-delta-time
  #endif

#endif

end-procedure

begin-procedure get-specific-box-deducts !for extracting the uncollected taxable 12M and 12N quarterly...

  let #box_amt     = 0
  let #box_amt_ytd = 0

#ifndef SKIP_specific-box-deducts

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
begin-select
DB3.DED_QTD
DB3.DED_YTD
DB3.DEDCD


 add &DB3.DED_QTD to #box_amt
 add &DB3.DED_YTD to #box_amt_ytd

 !4/9/04 fixed
 FROM  PS_DEDUCTION_BAL{WAREHOUSE_SUFFIX} DB3 {NOLOCK_SQL}, PS_TAXFORM_DED DFORM3 {NOLOCK_SQL}
 WHERE DFORM3.TAXFORM_ID     = 'W'
   AND DFORM3.EFFDT          = $Max_Effdt
   AND DFORM3.BOX            = $BOX
   AND DB3.COMPANY           = $Current_Company
   AND DB3.EMPLID            = $Current_Emplid
   AND DB3.BALANCE_ID        = $Calendar_Year_Id

  #ifdef USE_INT_CRITERIA
   AND DB3.BALANCE_YEAR      = int(\$RptYearZ\)
   AND DB3.BALANCE_QTR       = int(\$RptQtrZ\)
  #else
   AND DB3.BALANCE_YEAR      = #RptYear
   AND DB3.BALANCE_QTR       = #RptQtr
  #endif

   #if SITE_ID <> 'NXT1'
     AND DB3.DED_CLASS         = 'T'
   #endif
   AND DB3.DED_CLASS         = DFORM3.DED_CLASS
   AND DB3.PLAN_TYPE         = DFORM3.PLAN_TYPE
   AND DB3.DEDCD             = DFORM3.DEDCD
   AND DB3.BALANCE_PERIOD  =   (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_DEDUCTION_BAL{WAREHOUSE_SUFFIX} {NOLOCK_SQL}
       WHERE  EMPLID          = DB3.EMPLID
         AND  COMPANY         = DB3.COMPANY
         AND  BALANCE_YEAR    = DB3.BALANCE_YEAR
         AND  BALANCE_ID      = DB3.BALANCE_ID
         AND  BENEFIT_PLAN    = DB3.BENEFIT_PLAN
         #if {Peoplesoft_Version} >= '8'
         AND  BENEFIT_RCD_NBR = DB3.BENEFIT_RCD_NBR
         #endif
         AND  PLAN_TYPE       = DB3.PLAN_TYPE
         AND  DEDCD           = DB3.DEDCD
         AND  DED_CLASS       = DB3.DED_CLASS
         #ifdef USE_INT_CRITERIA
          AND  BALANCE_PERIOD    <= int(\$RptMonthZ\))
         #else
          AND  BALANCE_PERIOD    <= #RptMonth)
         #endif

   AND DB3.DED_YTD <> 0

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'get-specific-box-deducts' to $debug-proc1
     move 'PS_DEDUCTION_BAL'    to $debug-table1
     do log-delta-time
  #endif

   if #box_amt = 0
     do get-specific-box-earns  ! (the GTL uncolleded can be from earnings or deductions)
   end-if

#endif  !SKIP_specific-box-deducts

end-procedure

begin-procedure get-specific-box-earns

  let #box_amt = 0
  let #box_amt_ytd = 0

#ifndef SKIP_specific-box-earns

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
begin-select
EDB3.ERNCD
EDB3.GRS_QTD
EDB3.GRS_YTD

 add &EDB3.GRS_QTD to #box_amt
 add &EDB3.GRS_YTD to #box_amt_ytd

 !4/9/04 fixed
 FROM  PS_EARNINGS_BAL{WAREHOUSE_SUFFIX} EDB3 {NOLOCK_SQL}, PS_TAXFORM_ERN EFORM3 {NOLOCK_SQL}
 WHERE EFORM3.TAXFORM_ID     = 'W'
   AND EFORM3.EFFDT          = $Max_Effdt
   AND EFORM3.BOX            = $BOX
   AND EDB3.COMPANY           = $Current_Company
   AND EDB3.EMPLID            = $Current_Emplid
   AND EDB3.BALANCE_ID        = $Calendar_Year_Id
  #ifdef USE_INT_CRITERIA
   AND EDB3.BALANCE_YEAR      = int(\$RptYearZ\)
   AND EDB3.BALANCE_QTR       = int(\$RptQtrZ\)
  #else
   AND EDB3.BALANCE_YEAR      = #RptYear
   AND EDB3.BALANCE_QTR       = #RptQtr
  #endif
   AND EDB3.SPCL_BALANCE      <> 'Y'
   AND EDB3.ERNCD             = EFORM3.ERNCD
   AND EDB3.BALANCE_PERIOD  =   (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL{WAREHOUSE_SUFFIX} {NOLOCK_SQL}
       WHERE  EMPLID          = EDB3.EMPLID
         AND  COMPANY         = EDB3.COMPANY
         AND  BALANCE_YEAR    = EDB3.BALANCE_YEAR
         AND  BALANCE_ID      = EDB3.BALANCE_ID
         #if {PeopleSoft_Version} >= '8'
         AND  {emp_rec}       = EDB3.{emp_rec}
         #endif
         AND  SPCL_BALANCE    = EDB3.SPCL_BALANCE
         AND  ERNCD           = EDB3.ERNCD
         #ifdef USE_INT_CRITERIA
          AND  BALANCE_PERIOD  <= int(\$RptMonthZ\))
         #else
          AND  BALANCE_PERIOD  <= #RptMonth)
         #endif

         AND EDB3.GRS_QTD <> 0

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select
  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'get-specific-box-earns' to $debug-proc1
     move 'PS_EARNINGS_BAL'    to $debug-table1
     do log-delta-time
  #endif

#endif  !SKIP_specific-box-earns

end-procedure



#if {Peoplesoft_Version} >= '7.5'

begin-procedure get-private-sdi-acct

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

  if $SelectEmplid <> ''
     show 'get-private-sdi-acct for ' $current_company ' ' $VDI_State_Trimmed
  end-if

begin-select
SDI.VDI_PLAN_NBR
SDI.VDI_ADMIN_CODE

   if $SelectEmplid <> ''
     show 'get-private-sdi-acct retrieved VDI_PLAN_NBR: ' &SDI.VDI_PLAN_NBR ' VDI_ADMIN_CODE: ' &SDI.VDI_ADMIN_CODE
   end-if

   #if {SITE_ID} = 'ETY1'
    if  rtrim(&SDI.VDI_PLAN_NBR,' ') <> '' and rtrim($private_sdi_acct,' ')  = ''
     let $private_sdi_acct  = rtrim(&SDI.VDI_PLAN_NBR,' ')
    end-if
   #else
    let $private_sdi_acct  = rtrim(&SDI.VDI_PLAN_NBR,' ')
   #endif

   #if {SITE_ID} = 'TGP1'
    let $private_sdi_admin = rtrim(&SDI.VDI_ADMIN_CODE,' ')
    let $private_sdi_acct  =  $private_sdi_admin || '-' || $private_sdi_acct
   #endif

   #ifdef STRING_PRIVATE_PLAN
    let $private_sdi_admin = rtrim(&SDI.VDI_ADMIN_CODE,' ')
    if $private_sdi_admin <> ''
     let $private_sdi_acct  =  $private_sdi_acct || '-' || $private_sdi_admin
    end-if
   #endif

FROM  PS_CO_STATETAX_TBL SDI {NOLOCK_SQL}
  WHERE SDI.COMPANY = $Current_Company
    AND SDI.STATE   = $VDI_State_Trimmed
    AND EFFDT = (SELECT MAX(EFFDT)
       FROM   PS_CO_STATETAX_TBL {NOLOCK_SQL}
       WHERE  COMPANY           = SDI.COMPANY
         AND  STATE             = SDI.STATE
         AND  EFFDT          <= $Qtr_end_native)

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #if {SITE_ID} = 'ETY1'
     if rtrim($14D_Present,' ') <> 't'
       let $private_sdi_acct = ''
       let $private_sdi_admin = ''
       if $SelectEmplid <> ''
         #debugd show 'get-private-sdi-acct ETY1: Cleared Private_sdi_acct #, as no Box 14D exists'
       end-if
     end-if
  #endif

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'get-private-sdi-acct' to $debug-proc1
     move 'PS_CO_STATETAX_TBL'    to $debug-table1
     do log-delta-time
  #endif

  if $SelectEmplid <> ''
     show 'get-private-sdi-acct  private_sdi_acct ' $private_sdi_acct
  end-if

end-procedure
#else

begin-procedure get-private-sdi-acct
  let $private_sdi_acct = ''
end-procedure

#endif


begin-procedure Update-State-Local-Company-Totals

  !inputs: $Statecd, #StateWg, #StateWh, #LocalWg, #LocalWh
  !        $LocalStatecd, $Locality, $Resident
  !        #cur_tot

  !States array update
  if rtrim($StateCd,' ') <> ''     ! 10/11/06 change from (#StateWg <> 0) OR (#StateWh <> 0)
   let #i = 0
   let $found_st = 'f'
   while #i < #Company_States
    get $StateCheck from Company_totals(#cur_tot)  State(#i)
    if rtrim($Statecd,' ') = rtrim($StateCheck,' ')
     let $found_st = 't'
     array-add #StateWg #StateWh TO Company_totals(#cur_tot) State_TxGrs(#i) State_Tax(#i)
     break
    end-if
    add 1 to #i
   end-while

   if rtrim($found_st,' ') <> 't'
       if #Company_States > {MAX_STATES_TOTAL}
         show 'Company Totals Array Size Exceeded - Processing Stopped'
         print 'Company Totals Array Size Exceeded - Processing Stopped' (+2,1)
         #ifdef MVS
           let #return-status = 5
         #endif
         #ifdef MVS
          Move 5 to #Return-Status
         #end-if
         STOP
       end-if

       PUT $Statecd   -
           #StateWg   -
           #StateWh   -
           INTO Company_totals(#cur_tot)   -
             State(#Company_States)        -
             State_TxGrs(#Company_States)  -
             State_Tax(#Company_States)

       add 1 to #Company_States

   end-if

  end-if

 !locals array update
 if rtrim($LocalStateCd,' ') <> ''   !10/11/06 change from (#LocalWg <> 0) OR (#LocalWh <> 0)
   let #i = 0
   let $found_st = 'f'
   while #i < #Company_Locals
    get $StateCheck -
        $LocalCheck -
        $ResCheck   -
       from Company_totals(#cur_tot)  -
         Local_State(#i)              -
         Locality(#i)                 -
         Residence(#i)

    if ($LocalStatecd = $StateCheck) AND ($LocalCheck = $Locality) AND ($ResCheck = $Resident)
     let $found_st = 't'
     array-add #LocalWg #LocalWh TO Company_totals(#cur_tot) Local_TxGrs(#i) Local_Tax(#i)
     break
    end-if
    add 1 to #i
   end-while

   if rtrim($found_st,' ') <> 't'
     if #Company_Locals > {MAX_LOCALS_TOTAL}
       show 'Company Totals Array Size Exceeded - Processing Stopped'
       print 'Company Totals Array Size Exceeded - Processing Stopped' (+2,1)
       #ifdef MVS
          let #return-status = 5
       #endif
       STOP
     end-if

     PUT $LocalStatecd  -
         $Locality      -
         $Resident      -
         #LocalWg       -
         #LocalWh       -
       INTO Company_totals(#cur_tot)   -
         Local_State(#Company_Locals)  -
         Locality(#Company_Locals)     -
         Residence(#Company_Locals)    -
         Local_TxGrs(#Company_Locals)  -
         Local_Tax(#Company_Locals)

     add 1 to #Company_Locals

  end-if
 end-if

end-procedure

begin-procedure Update-State-Local-Grand-Totals

  !inputs: $Statecd, #StateWg, #StateWh, #LocalWg, #LocalWh
  !        $LocalStatecd, $Locality, $Resident
  !        #cur_tot

  !States array update

  ! show 'Update-State-Local-Grand-Totals ' $Statecd
 
  if rtrim($StateCd,' ') <> ''     ! 10/11/06 change from (#StateWg <> 0) OR (#StateWh <> 0)
   let #i = 0
   let $found_st = 'f'
   while #i < #Grand_States
    get $StateCheck from Company_totals(#GrandInx)  State(#i)

  ! show 'Update-State-Local-Grand-Totals: StateCheck = ' $StateCheck ' StateCd ' $StateCd ' Grand_States = ' #Grand_States edit 999 ' #i = ' #i edit 999
 
    if rtrim($Statecd,' ') = rtrim($StateCheck,' ')
     let $found_st = 't'

     array-add #StateWg -
               #StateWh  -
           TO Company_totals(#GrandInx)    -
             State_TxGrs(#i)               -
             State_Tax(#i)

     break
    end-if
    add 1 to #i
   end-while

   ! show 'Update-State-Local-Grand-Totals: GrandInx = ' #GrandInx edit 999 ' StateCd ' $StateCd ' Grand_States = ' #Grand_States edit 999 ' found_st ' $found_st
   
   if rtrim($found_st,' ') <> 't'

       if #Grand_States > {MAX_STATES_TOTAL}
         show 'Grand Totals Array Size Exceeded - Processing Stopped'
         #ifdef MVS
           let #return-status = 5
         #endif
         #ifdef MVS
          Move 5 to #Return-Status
         #end-if
         STOP
       end-if

       PUT #StateWg -
           #StateWh -
           $Statecd -
         INTO Company_totals(#GrandInx)  -
           State_TxGrs(#Grand_States)    -
           State_Tax(#Grand_States)      -
           State(#Grand_States)
       add 1 to #Grand_States

   end-if

  end-if

 !locals array update
 if rtrim($LocalStateCd,' ') <> ''   !10/11/06 change from (#LocalWg <> 0) OR (#LocalWh <> 0)
   let #i = 0
   let $found_st = 'f'
   while #i < #Grand_Locals
    get $StateCheck -
        $LocalCheck -
        $ResCheck   -
       from Company_totals(#GrandInx)  -
        Local_State(#i) -
        Locality(#i)    -
        Residence(#i)

    if ($LocalStatecd = $StateCheck) AND ($LocalCheck = $Locality) AND ($ResCheck = $Resident)
     let $found_st = 't'
     array-add #LocalWg -
               #LocalWh -
               TO Company_totals(#GrandInx) -
               Local_TxGrs(#i) -
               Local_Tax(#i)

     break
    end-if
    add 1 to #i
   end-while

   if rtrim($found_st,' ') <> 't'
     if #Grand_Locals > {MAX_LOCALS_TOTAL}
       show 'Grand Totals Array Size Exceeded - Processing Stopped'
       #ifdef MVS
          let #return-status = 5
       #endif
       STOP
     end-if

     PUT $LocalStatecd  -
     	 $Locality -
     	 $Resident -
     	 #LocalWg  -
     	 #LocalWh  -
      INTO Company_totals(#GrandInx)   -
         Local_State(#Grand_Locals) -
         Locality(#Grand_Locals) -
         Residence(#Grand_Locals) -
         Local_TxGrs(#Grand_Locals) -
         Local_Tax(#Grand_Locals)

     add 1 to #Grand_Locals
  end-if
 end-if

end-procedure

#ifdef SUBTOTAL_FEIN

begin-procedure Update-State-Local-FEIN-Totals

  !inputs: $Statecd, #StateWg, #StateWh, #LocalWg, #LocalWh
  !        $LocalStatecd, $Locality, $Resident
  !        #cur_tot


  !States array update
  if rtrim($StateCd,' ') <> ''
   let #i = 0
   let #found_st = 0
   while #i < #FEIN_States
    get $StateCheck from Company_totals(#FEINInx)  State(#i)
    if rtrim($Statecd,' ') = rtrim($StateCheck,' ')
     let #found_st = 1
     array-add #StateWg -
               #StateWh -
           TO Company_totals(#FEINInx) -
               State_TxGrs(#i) -
               State_Tax(#i)

     break
    end-if
    add 1 to #i
   end-while

   if #found_st < 1
       if #FEIN_States > {MAX_STATES_TOTAL}
         show 'Company Totals Array Size Exceeded - Processing Stopped'
         print 'Company Totals Array Size Exceeded - Processing Stopped' (+2,1)
         #ifdef MVS
           let #return-status = 5
         #endif
         STOP
       end-if
       PUT $Statecd  INTO Company_totals(#FEINInx)  State(#FEIN_States)
       array-add #StateWg -
                 #StateWh -
         TO Company_totals(#FEINInx) -
           State_TxGrs(#FEIN_States) -
           State_Tax(#FEIN_States)

       add 1 to #FEIN_States
   end-if

  end-if

 !locals array update
 if rtrim($LocalStatecd,' ') <> ''
   let #i = 0
   let #found_st = 0
   while #i < #FEIN_Locals
    get $StateCheck -
        $LocalCheck -
        $ResCheck   -
      from Company_totals(#FEINInx)  -
        Local_State(#i) -
        Locality(#i) -
        Residence(#i)

    if ($LocalStatecd = $StateCheck) AND ($LocalCheck = $Locality) AND ($ResCheck = $Resident)
     let #found_st = 1
     array-add #LocalWg -
               #LocalWh -
         TO Company_totals(#FEINInx) -
            Local_TxGrs(#i) -
            Local_Tax(#i)

     break
    end-if
    add 1 to #i
   end-while

   if #found_st < 1
     if #FEIN_Locals > {MAX_LOCALS_TOTAL}
       show 'Company Totals Array Size Exceeded - Processing Stopped'
       print 'Company Totals Array Size Exceeded - Processing Stopped' (+2,1)
       #ifdef MVS
          let #return-status = 5
       #endif
       STOP
     end-if

     PUT $LocalStatecd  -
         $Locality      -
         $Resident      -
     INTO Company_totals(#FEINInx) -
         Local_State(#FEIN_Locals) -
         Locality(#FEIN_Locals)    -
         Residence(#FEIN_Locals)

     array-add #LocalWg -
               #LocalWh -
     TO Company_totals(#FEINInx) -
               Local_TxGrs(#FEIN_Locals) -
               Local_Tax(#FEIN_Locals)

     add 1 to #FEIN_Locals
  end-if
 end-if

end-procedure

#endif

!----------------- This is called to use the YE data vs the personal data if W-2 Select is 'on' --------

begin-procedure Read-YE-Employee-Data

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

  do Init-Emplid-Data

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

 #if {SITE_ID} = 'CSA1'
  DO GET-JOB-NAME2                    !162299 added 10/10/07 JNell
 #endif

begin-SELECT
YE.YE_FNAME
YE.YE_MIDDLE_NAME
YE.YE_LNAME
YE.YE_SUFFIX
#if {SITE_ID} <> 'CSA1'
YE.SSN
#else
YE2.NATIONAL_ID    !162299 Added
#endif
YE.ADDRESS1
YE.ADDRESS2
YE.CITY
YE.STATE
YE.COUNTRY
YE.{POSTAL}
YE.STATUTORY_EE
YE.PENSION_PLAN
YE.DECEASED
YE.THIRDPARTY_SICKPAY
YE.SPOUSE_SSN
YEE.PROCESS_FLAG

   if $SelectEmplid <> ''
     show 'Read-YE-Employee-Data: Name: ' &YE.YE_FNAME ' ' &YE.YE_LNAME ', Addr: ' &YE.ADDRESS1 ' ' &YE.CITY ' ' &YE.STATE ', Pens: ' &YE.PENSION_PLAN
   end-if

 let $YEE.PROCESS_FLAG = rtrim(&YEE.PROCESS_FLAG,' ')

 if $YEE.PROCESS_FLAG <> 'V'

   !validate the NAME, SSN..
   !----------------------
   if rtrim(&YE.YE_FNAME,' ') <> '' and rtrim(&YE.YE_LNAME,' ') <> '' and rtrim(&YE.ADDRESS1,' ') <> ''
      #if {SITE_ID} <> 'CSA1'
       and rtrim(&YE.SSN,' ') <> ''
      #else
       and rtrim(&YE2.NATIONAL_ID,' ') <> ''	!Mia 11/11/09
      #endif
     let $YE_Data_Exists = 't'
     do YE-Emplid-Data
   else
     #debugd show 'Note: Emplid: ' $Emp_Emplid ' has blank Name/SSN data in their W-2 record (PS_YE_DATA)'
   end-if

 else
   show 'Note: Emplid: ' $Emp_Emplid ' has a VOIDED W-2'
 end-if

#if {SITE_ID} <> 'CSA1'
 FROM PS_YE_EE YEE {NOLOCK_SQL}, PS_YE_DATA YE {NOLOCK_SQL}
 WHERE YE.COMPANY         = $Current_Company
  #ifdef USE_INT_CRITERIA
   AND YE.CALENDAR_YEAR   = int(\$RptYearZ\)
  #else
   AND YE.CALENDAR_YEAR   = #RptYear
  #endif
  AND YE.EMPLID          = $Emp_Emplid
  AND YEE.COMPANY        = YE.COMPANY
  AND YEE.EMPLID         = YE.EMPLID
  AND YEE.CALENDAR_YEAR  = YE.CALENDAR_YEAR
  AND YEE.TAXFORM_ID     = YE.TAXFORM_ID

#else
 FROM PS_YE_EE YEE, PS_YE_DATA YE, PS_CSAA_DCRPT_SSN YE2                           !162299 added 11/27/07 JNell
 WHERE YE.COMPANY         = $Current_Company
  #ifdef USE_INT_CRITERIA
   AND YE.CALENDAR_YEAR   = int(\$RptYearZ\)
  #else
   AND YE.CALENDAR_YEAR   = #RptYear
  #endif
  AND YE.EMPLID          = $Emp_Emplid
  AND YEE.COMPANY        = YE.COMPANY
  AND YEE.EMPLID         = YE.EMPLID
  AND YEE.CALENDAR_YEAR  = YE.CALENDAR_YEAR
  AND YEE.TAXFORM_ID     = YE.TAXFORM_ID
  AND YEE.EMPLID         = YE2.EMPLID          !162299 added 10/10/07 JNell
  AND YE2.MAINJOBNAME = $JobName               !162299 added 11/27/07 JNell
  AND YE2.DEPENDENT_BENEF = ' '                !162299 added 11/27/07 JNell
#endif

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Read-YE-Employee-Data' to $debug-proc1
     move 'PS_YE_EE,PS_YE_DATA'    to $debug-table1
     do log-delta-time
  #endif

end-procedure


begin-procedure YE-EmplID-Data

  move &YE.YE_FNAME       to $E.YE_FNAME
  move &YE.YE_MIDDLE_NAME to $E.YE_MIDDLE_NAME
  move &YE.YE_LNAME       to $E.YE_LNAME
  move &YE.YE_SUFFIX      to $E.YE_SUFFIX
  uppercase $E.YE_FNAME
  uppercase $E.YE_MIDDLE_NAME
  uppercase $E.YE_LNAME
  uppercase $E.YE_SUFFIX

  #ifdef STRIP_PERIODS_FROM_NAME 
   let $E.YE_FNAME = rtrim(translate($E.YE_FNAME,'.',' '),' ') 
   let $E.YE_LNAME = rtrim(translate($E.YE_LNAME,'.',' '),' ') 
   let $E.YE_MIDDLE_NAME = rtrim(translate($E.YE_MIDDLE_NAME,'.',' '),' ') 
   let $E.YE_SUFFIX = rtrim(translate($E.YE_SUFFIX,'.',' '),' ') 
  #else 
   let $E.YE_FNAME           = rtrim($E.YE_FNAME,' ') 
   let $E.YE_LNAME           = rtrim($E.YE_LNAME,' ') 
   let $E.YE_MIDDLE_NAME     = rtrim($E.YE_MIDDLE_NAME,' ') 
   let $E.YE_SUFFIX          = rtrim($E.YE_SUFFIX,' ') 
  #endif 

  !added 12/7/05
  let $E.YE_FNAME       = ltrim($E.YE_FNAME,' ')
  let $E.YE_MIDDLE_NAME = ltrim($E.YE_MIDDLE_NAME,' ')
  let $E.YE_LNAME       = ltrim($E.YE_LNAME,' ')
  let $E.YE_SUFFIX      = ltrim($E.YE_SUFFIX,' ')

  #if {SITE_ID} <> 'CSA1'
  let $E.SSN         = substr(&YE.SSN,1,3) ||
                       substr(&YE.SSN,4,2) ||
                       substr(&YE.SSN,6,4)

  #else
  let $E.SSN         = substr(&YE2.NATIONAL_ID,1,3) ||     !162299 added
                       substr(&YE2.NATIONAL_ID,4,2) ||     !162299 added
                       substr(&YE2.NATIONAL_ID,6,4)        !162299 added

  #endif

  move &YE.ADDRESS1 to $E.ADDRESS1
  move &YE.ADDRESS2 to $E.ADDRESS2
  uppercase $E.ADDRESS1
  uppercase $E.ADDRESS2

  !7/5/05
  let  $E.COUNTRY       = rtrim(&YE.COUNTRY, ' ')
  if substr($E.COUNTRY,1,2) = 'US'
    move &YE.CITY     to $E.CITY
    move &YE.STATE    to $E.STATE
    move &YE.{POSTAL} to $E.ZIP

    if substr($E.ZIP,6,1) = '-' or substr($E.ZIP,6,1) = ' '
    let $E.ZIP = substr($E.ZIP,1,5) || substr($E.ZIP,7,4)
    else
     let $E.ZIP = substr($E.ZIP,1,9)
    end-if

  else
    let $E.City = rtrim(&YE.CITY,' ') || ' ' || rtrim(&YE.STATE,' ') || ' ' || rtrim(&YE.{POSTAL},' ') || ' ' || rtrim(&YE.COUNTRY,' ')
    !#ifdef Q4_2015
    ! move 'ZZ'        to $E.STATE
    !#else
     move '  '        to $E.STATE
    !#endif
    move '         ' to $E.ZIP
  end-if

  uppercase $E.CITY

  if &YE.STATUTORY_EE = 'Y'
    move 'Y' to $E.StatutoryEe
  else
    move 'N' to $E.StatutoryEe
  end-if

  if rtrim(&YE.PENSION_PLAN,' ') = 'Y'
    move 'Y' to $E.PensionPlanFlag
  else
    move 'N' to $E.PensionPlanFlag
  end-if

  #ifdef debug_pension
     #debugd show 'interpreted: &YE.PENSION_PLAN ' $E.PensionPlanFlag
  #endif

  move  &YE.DECEASED           to $E.deceased
  move  &YE.THIRDPARTY_SICKPAY to $E.THIRDPARTY_SICKPAY
  move  &YE.SPOUSE_SSN         to $E.SPOUSE_SSN

  let $W2_Data_included = 't'

  #ifdef show_selects
   #debugd show 'Read-YE-Employee-Data done.'
  #endif

end-procedure


begin-procedure Init-EmplID-Data
  move '' to $YE_Data_exists
  move ''                 to $E.YE_FNAME
  move ''                 to $E.YE_MIDDLE_NAME
  move ''                 to $E.YE_LNAME
  move ''                 to $E.YE_SUFFIX
  move ''                 to $E.SSN
  move ''                 to $E.CITY
  move ''                 to $E.STATE
  move ''                 to $E.ZIP
  move ''                 to $E.COUNTRY
  move ''                 to $E.StatutoryEe
  move ''                 to $E.PensionPlanFlag
  move ''                 to $E.ADDRESS1
  move ''                 to $E.ADDRESS2
  move ''                 to $E.SPOUSE_SSN
  let $W2_Data_included = ''

end-procedure

begin-procedure Read-W-2-Employee-Boxes  !hook from pbzqtr

   let #box_w2_count = 0
   clear-array name=Box_W2
   let #Box14_count = 0
   clear-array name=Box14
   let #Box_99_rec_count = 0
   clear-array name=Box99

   let $E.TAXFORM_ID = ''

  #if {SITE_ID} = 'ETY1'
    let $14D_Present = 'f'
  #endif

  if $SelectEmplid <> ''
    show 'Read-W-2-Employee-Data -->: Company ' $Current_Company ', Emplid: ' $Current_Emplid ', Year: ' $RptYear
  end-if

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
 
 #if {SITE_ID} = 'MDA1'
  #ifdef SUBTOTAL_FEIN_EXTRACT
   do build-company-list-MG
  #endif
 #endif
 
begin-SELECT
E.TAXFORM_ID
E.SEQUENCE_NUMBER
EE.PROCESS_FLAG

 let $YEE.PROCESS_FLAG = rtrim(&EE.PROCESS_FLAG,' ')
 if $YEE.PROCESS_FLAG = 'V'
   show 'Note: Emplid: ' $Emp_Emplid ' has a VOIDED W-2'
 else

  if &E.TAXFORM_ID <> $E.TAXFORM_ID

    if rtrim(&E.TAXFORM_ID,' ') <> 'P'
      add 1 to #com_emp_count        !employee count per company
      add 1 to #FEIN_emp_count       !employee count per FEIN
      add 1 to #tot_emp_count        !employee count
     else
      add 1 to #com_PR_emp_count     !PR count per company
      add 1 to #FEIN_PR_emp_count    !employee count per FEIN
      add 1 to #tot_PR_emp_count     !PR count
     end-if

  end-if

  let $E.TAXFORM_ID = rtrim(&E.TAXFORM_ID,' ')
  let #E.SEQUENCE_NUMBER = &E.SEQUENCE_NUMBER
  move #E.SEQUENCE_NUMBER to $SEQUENCE_NUMBER
  let $Sequence_Number_Selection = 'D.SEQUENCE_NUMBER = ' || $SEQUENCE_NUMBER
  do Load-W-2-Amounts
 end-if

skip_w2_data:

 FROM PS_YE_DATA E {NOLOCK_SQL}, PS_YE_EE EE {NOLOCK_SQL}
 WHERE E.EMPLID           = $Current_Emplid
  AND E.COMPANY         = $Current_Company
  AND E.TAXFORM_ID       in ('P','W','M','I','S')               
  #ifdef USE_INT_CRITERIA
   AND E.CALENDAR_YEAR   = int(\$RptYearZ\)
  #else
   AND E.CALENDAR_YEAR   = #RptYear
  #endif
  AND E.COMPANY          = EE.COMPANY
  AND E.EMPLID           = EE.EMPLID
  AND E.CALENDAR_YEAR    = EE.CALENDAR_YEAR
  AND E.TAXFORM_ID       = EE.TAXFORM_ID

  
  ORDER BY E.TAXFORM_ID

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Read-W-2-Employee-Boxes' to $debug-proc1
     move 'PS_YE_DATA'    to $debug-table1
     do log-delta-time
  #endif

end-procedure


!---------------------------------------------------------------------------------------------------

#ifdef SUBTOTAL_FEIN_EXTRACT

#if {SITE_ID} <> 'MDA1'  !added 4/18/07

begin-procedure build-company-list-fein  !used for SUBTOTAL_FEIN_EXTRACT

    let $FEIN_COMPANIES_TO_INCLUDE = ''
    let $FEIN_COMPANIES_TO_INCLUDE_UI = ''
    do Get-W2_REPORTING_CO

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
begin-select
CL.COMPANY

   if $FEIN_COMPANIES_TO_INCLUDE = ''
       let $FEIN_COMPANIES_TO_INCLUDE    = ' AND D.COMPANY in (''' || &CL.COMPANY || ''''
       let $FEIN_COMPANIES_TO_INCLUDE_UI = ' UX.COMPANY in (''' || &CL.COMPANY || ''''
   else
       let $FEIN_COMPANIES_TO_INCLUDE    = $FEIN_COMPANIES_TO_INCLUDE    || ',''' || &CL.COMPANY || ''''
       let $FEIN_COMPANIES_TO_INCLUDE_UI = $FEIN_COMPANIES_TO_INCLUDE_UI || ',''' || &CL.COMPANY || ''''
   end-if

   FROM  PS_W2_COMPANY CL {NOLOCK_SQL}
   #ifdef USE_INT_CRITERIA
    WHERE CL.CALENDAR_YEAR  = int(\$RptYearZ\)
   #else
    WHERE CL.CALENDAR_YEAR   = #RptYear
   #endif
      AND CL.W2_REPORTING_CO = $A.W2_REPORTING_CO

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

    if $FEIN_COMPANIES_TO_INCLUDE <> ''
        let $FEIN_COMPANIES_TO_INCLUDE = $FEIN_COMPANIES_TO_INCLUDE || ')'
    end-if
    if $FEIN_COMPANIES_TO_INCLUDE_UI <> ''
        let $FEIN_COMPANIES_TO_INCLUDE_UI = $FEIN_COMPANIES_TO_INCLUDE_UI || ')'
    end-if
    
end-procedure

#else  !MDA1

!------------------------------------------------------------------------------------
!determine the FEIN of the current company
!and build the list of companies that share that FEIN, because the W-2 company table
!at media general will keep the W-2s separate for all companies
!(multiple W-2s, for employees in multiple companies within one FEIN)
!------------------------------------------------------------------------------------

begin-procedure build-company-list-MG

    let $FEIN_COMPANIES_TO_INCLUDE   = ''
    let $FEIN_COMPANIES_TO_INCLUDE_E = ''

begin-select
CLF.COMPANY

   if $FEIN_COMPANIES_TO_INCLUDE = ''
       let $FEIN_COMPANIES_TO_INCLUDE = ' AND D.COMPANY in (''' || &CLF.COMPANY || ''''
   else
       let $FEIN_COMPANIES_TO_INCLUDE = $FEIN_COMPANIES_TO_INCLUDE || ',''' || &CLF.COMPANY || ''''
   end-if
   if $FEIN_COMPANIES_TO_INCLUDE_E = ''
       let $FEIN_COMPANIES_TO_INCLUDE_E = ' AND E.COMPANY in (''' || &CLF.COMPANY || ''''
   else
       let $FEIN_COMPANIES_TO_INCLUDE_E = $FEIN_COMPANIES_TO_INCLUDE_E || ',''' || &CLF.COMPANY || ''''
   end-if

   FROM  PS_COMPANY_TBL CLF {NOLOCK_SQL}
   WHERE  CLF.FEDERAL_EIN = #Current_FEIN
      AND CLF.EFFDT       = (SELECT MAX(EFFDT)
         FROM   PS_COMPANY_TBL {NOLOCK_SQL}
         WHERE  COMPANY     = CLF.COMPANY
          ! AND  FEDERAL_EIN = CLF.FEDERAL_EIN   !removed 5/11/2012
           AND  EFFDT      <= $Qtr_End_Native)

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

    if $FEIN_COMPANIES_TO_INCLUDE <> ''
        let $FEIN_COMPANIES_TO_INCLUDE = $FEIN_COMPANIES_TO_INCLUDE || ')'
    end-if
    if $FEIN_COMPANIES_TO_INCLUDE_E <> ''
        let $FEIN_COMPANIES_TO_INCLUDE_E = $FEIN_COMPANIES_TO_INCLUDE_E || ')'
    end-if

    if $SelectEmplid <> ''
      #debugd show 'MDA1: In build-company-list-MG for current FEIN        ' #Current_FEIN
      #debugd show '      YE_AMOUNTS           FEIN_COMPANIES_TO_INCLUDE   ' $FEIN_COMPANIES_TO_INCLUDE
      #debugd show '      YE_DATA              FEIN_COMPANIES_TO_INCLUDE_E ' $FEIN_COMPANIES_TO_INCLUDE_E
    end-if
    
end-procedure

#endif !Media General specific
#endif !SUBTOTAL_FEIN_EXTRACT

!---------------------------------------------------------------------------------------------------

#ifdef SUBTOTAL_ADP_COMPID_EXTRACT

begin-procedure build-company-list-compid  !SUBTOTAL_ADP_COMPID_EXTRACT

 if $Current_ADP_Compid_prior <> $Current_ADP_Compid

    let $FEIN_COMPANIES_TO_INCLUDE = ''
    let $FEIN_COMPANIES_TO_INCLUDE_UI = ''
    let $prior_ps_company = ''

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

begin-select
CLC1.COMPANY
CLC1.EFFDT

  if $prior_ps_company <> rtrim(&CLC1.COMPANY,' ')

   let $prior_ps_company = rtrim(&CLC1.COMPANY,' ')
   if $FEIN_COMPANIES_TO_INCLUDE = ''
       let $FEIN_COMPANIES_TO_INCLUDE    = ' AND D.COMPANY in (''' || &CLC1.COMPANY || ''''
       let $FEIN_COMPANIES_TO_INCLUDE_UI = ' UX.COMPANY in (''' || &CLC1.COMPANY || ''''
   else
       let $FEIN_COMPANIES_TO_INCLUDE    = $FEIN_COMPANIES_TO_INCLUDE || ',''' || &CLC1.COMPANY || ''''
       let $FEIN_COMPANIES_TO_INCLUDE_UI = $FEIN_COMPANIES_TO_INCLUDE_UI || ',''' || &CLC1.COMPANY || ''''
   end-if

  end-if

 FROM PS_TF_COMPANY_XREF CLC1 {NOLOCK_SQL}

 WHERE CLC1.TF_COMPANY = $Current_ADP_Compid           !12/1/09 fix
   AND CLC1.EFFDT = (SELECT MAX(CLC2.EFFDT)
       FROM PS_TF_COMPANY_XREF CLC2
        WHERE CLC2.COMPANY = CLC1.COMPANY
          AND CLC2.EFFDT  <= $AsOfDate)

   ORDER by CLC1.COMPANY

#ifdef SELECT_WITH_UR
 with ur
#endif
end-SELECT

    let $Current_ADP_Compid_prior = $Current_ADP_Compid
    if $FEIN_COMPANIES_TO_INCLUDE <> ''
        let $FEIN_COMPANIES_TO_INCLUDE = $FEIN_COMPANIES_TO_INCLUDE || ')'
    end-if

    if $FEIN_COMPANIES_TO_INCLUDE_UI <> ''
        let $FEIN_COMPANIES_TO_INCLUDE_UI = $FEIN_COMPANIES_TO_INCLUDE_UI || ')'
    end-if

  end-if
  
  if $SelectEmplid <> ''
   show ''
   show ' FEIN_COMPANIES_TO_INCLUDE    ' $FEIN_COMPANIES_TO_INCLUDE
   show ' FEIN_COMPANIES_TO_INCLUDE_UI ' $FEIN_COMPANIES_TO_INCLUDE_UI
   show ''
  end-if
  
end-procedure
#endif

!---------------------------------------------------------------------------------------------------

begin-procedure Load-W-2-Amounts

  let #box01_current_for_ny = 0
  let $YE_Resident = ' '
  let $Taxform_ID = rtrim($E.TAXFORM_ID,' ')
  do assign-year-end-variables         !   (see w2.sqc for details)

  #ifdef REDUCE_PRH_WAGE_REC_BY_COMMISSIONS
    let #PR_YE_Commissions = 0
  #endif
  #ifdef REDUCE_PRH_WAGE_REC_BY_TIPS
    let #PR_YE_Tips = 0
  #endif
  #ifdef PR_TIPS_ON_PRH_from_Box10
    let #PR_YE_Tips = 0
  #endif
  #ifdef REDUCE_PRH_WAGE_REC_BY_Box16
    let #PR_YE_Box16 = 0
  #endif
  #ifdef USE_PR_BOX07_AMOUNT
    let #PR_YE_Box07 = 0
  #endif
  #ifdef USE_PR_BOX16_AMOUNT
    let #PR_YE_Box16 = 0
  #endif

  #ifdef REDUCE_PR_WAGES_BY_LIMIT_UNDER_27  !generate a Box 16 exempt amount for the under 27's based on the Box 07 amount (assumes no box 16 amount exists)
     let #PR_Wages_Allow_Comm = 0
  #endif
  
  let #NYC_Wages = 0
  let #NYC_Taxes = 0
  let #Box01_YTD_Taxable = 0
  
  
  
#ifdef SUBTOTAL_FEIN_EXTRACT
    #if {SITE_ID} <> 'MDA1'  !added 4/18/07
     do build-company-list-fein
    #endif
  #else
   #ifdef SUBTOTAL_ADP_COMPID_EXTRACT
     do build-company-list-compid
   #endif
  #endif
  
  #ifdef  enable_performance_monitor
      do Get-Current-Time
      let $display_dt0 = $display_dt
  #endif

  if $SelectEmplid <> ''
   show ''
   show 'Load-W-2-Amounts: For ' $Current_COMPANY ' ' $Current_Emplid ' ' $E.TAXFORM_ID
  end-if

  #ifdef PUERTO_RICO_BOX16A_STANDARD_REMAPPING
     let $BOX16A_CODE = ''
  #endif
  
begin-SELECT
D.BOX
D.W2_AMOUNT
D.STATE
D.LOCALITY
D.SEQUENCE_NUMBER
D.EMPLID
D.TAXFORM_ID
#ifndef IGNORE_YE_AMOUNTS_PSD_CODES
D.RES_PSD_CD
D.WORK_PSD_CD
#endif

  if $SelectEmplid <> ''
    show 'Load-W-2-Amounts: Box = ' &D.BOX ', ST  = ' &D.STATE ', LCL = ' &D.LOCALITY ', Amount = ' &D.W2_AMOUNT ', ID = ' &D.TAXFORM_ID ', Seq = ' &D.SEQUENCE_NUMBER
  end-if
  
  let $WORK_PSD_CD_W2 = ''
  let $RES_PSD_CD_W2   = ''

  #ifndef IGNORE_YE_AMOUNTS_PSD_CODES
       if &D.STATE = 'PA' and rtrim(&D.LOCALITY,' ') <> '' and (&D.BOX = '18' or &D.BOX = '19')
         !20150218
         !---------------------------
         #ifdef ADP_TAX_AMEND
           goto done_loading_amounts
         #endif
         !---------------------------
         let $WORK_PSD_CD_W2  = rtrim(&D.WORK_PSD_CD,' ')
         let $RES_PSD_CD_W2   = rtrim(&D.RES_PSD_CD,' ')
         if $SelectEmplid <> '' and ($WORK_PSD_CD_W2 <> '' or $RES_PSD_CD_W2 <> '')
          show 'WORK_PSD_CD : ' $WORK_PSD_CD_W2 ', RES_PSD_CD: '$RES_PSD_CD_W2
         end-if
         
         
       end-if
  #endif
  
  !1/12/2012
  #if {SITE_ID} = 'PSS1'
    if rtrim(&D.TAXFORM_ID,' ') = 'I' and rtrim(&D.BOX,' ') = '12D'   !skip 12D on VI for PSS1
      goto done_loading_amounts
    end-if
  #endif

  #if {SITE_ID} = 'DSG1'
    if rtrim(&D.TAXFORM_ID,' ') = 'W' and rtrim(&D.BOX,' ') = '14YL'   !skip 14YL / NJ-FLI already on Wage record, and conflicts with 14Y
      goto done_loading_amounts
    end-if
  #endif

  let #Amount = &D.W2_AMOUNT
  let #D.SEQUENCE_NUMBER = &D.SEQUENCE_NUMBER

  #if {SITE_ID} = 'ETY1'
     if rtrim(&D.BOX,' ') = '14D' and #Amount > 0
       let $14D_Present = 't'
     end-if
  #endif

  #if {SITE_ID} = 'AVD1'
     if (rtrim(&D.BOX,' ') = '12Y' or rtrim(&D.BOX,' ') = '14YN') and #Amount < 0
       let #Amount = #Amount * -1
     end-if
  #endif

  let $Trimmed_State = rtrim(&D.STATE,' ')         !11/12/01

  !added 10/10/05 for testing
  if $Trimmed_state = ''
    let $Trimmed_State = '$U'
  end-if

  let $Trimmed_Locality = rtrim(&D.LOCALITY,' ')   !11/12/01
  let $Box = RTRIM(&D.BOX,' ')
  let $taxform_id = rtrim(&D.TAXFORM_ID,' ')

  !remap the 12Dx Boxes to 12D rolling all 12Dx's to 12D - DM07262011  
  !------------------------------------------------------------------
  if length($Box) > 3 and substr($Box,1,3) = $YE_401K and $taxform_id = 'W' and rtrim($Box,' ') <> '12DD' ! 9/26/2011 added last criteria
    #debugd show 'Load-W-2-Amounts Note: Remapping ' $Box ' to ' $YE_401K ' for emplid ' $Current_Emplid ' amount = ' #amount
    let $Box = $YE_401K
  end-if
  
  move $Box to $Bx xx

  !2/6/9 update this logic... to not overwrite the box totals going forward - Box1 overwrite of NYH taxable wages always
  !----------------------------------------------------------------------------------------------------------------------
  #ifdef SKIP_NY_OVERRIDE
   if #RptYear < 2009                         !do it anyway as we didn't have this option until 2009
    if $Bx = $YE_Fed_Wages                    !Fed wages
     let #box01_current_for_ny = #Amount
    else
     if $Box = $YE_State_Wages AND $Trimmed_State = 'NY' AND #box01_current_for_ny <> 0
      let #Amount = #box01_current_for_ny
     end-if
    end-if
   end-if
  #else
    if $Bx = $YE_Fed_Wages                    !Fed wages
     let #box01_current_for_ny = #Amount
    else
     if $Box = $YE_State_Wages AND $Trimmed_State = 'NY' AND #box01_current_for_ny <> 0
      let #Amount = #box01_current_for_ny
     end-if
    end-if
  #endif
  !--------------------------------------------------------------------------------

  if rtrim($E.TAXFORM_ID,' ') = 'W'      
   #ifdef BOX_01_03_05_SUMMARY
     if $Bx = $YE_Fed_Wages
       let #BOX_01_SUMMARY_Wages = #amount
     end-if
     if $Bx = $YE_SS_Wages
       let #BOX_03_SUMMARY_Wages = #amount
     end-if
     if $Bx = $YE_Med_Wages
       let #BOX_05_SUMMARY_Wages = #amount
     end-if
   #endif

   if $Bx = $YE_Fed_Wages
    let #Box01_YTD_Taxable = #Amount
   end-if

  end-if

 
  !1/17/02 added
  !-------------
  #if {SITE_ID} = 'BCD1'
    if $Current_COMPANY = 'RR'
       if ($Box = $YE_Local_Wages) OR ($Box = $YE_Local_Tax)     !skip localities for RR company due to Tier2 mapping
         goto done_loading_amounts
       end-if
    end-if
  #endif

  #ifdef SKIP_MD_SIT_ROLLUP   !because the Tax910LD is adding MD local YTD Taxes to MD SIT YTD Taxes
   if (($Box = $YE_State_Wages) OR ($Box = $YE_State_Tax)) AND $trimmed_state = 'MD'
          goto done_loading_amounts
   end-if
  #endif

  #ifdef SKIP_KY_LOCAL_ROLLUP   !because the Tax910LD can handle KJDA uniquely..
   if (($Box = $YE_Local_Wages) OR ($Box = $YE_Local_Tax)) AND $trimmed_state = 'KY'
          goto done_loading_amounts
   end-if
  #endif

  if rtrim($E.TAXFORM_ID,' ') = 'P'      !11/21/04 from $Taxform_ID


     #ifdef PUERTO_RICO_BOX16A_STANDARD_REMAPPING
        if #RptYear >= 2014 and $Box = $Exempt_Salary_code
          move #Amount to $16A_code x         !     (1 --> '1')
          let $BOX16A_CODE = $16A_code
        end-if
        if $SelectEmplid <> ''
           show 'PR ' $Box ' code = ' $BOX16A_CODE
        end-if
     #endif

     #ifdef ADJUST_PR_BOX_BY_CUSTOM
        do Adjust-PR-Box-Amount !probiz.sqc
     #endif

     #ifdef USE_PR_BOX07_AMOUNT
      if $Box = $YE_Wages
       add #amount to #PR_YE_Box07
      end-if
     #endif

     #ifdef REDUCE_PR_WAGES_BY_LIMIT_UNDER_27  !generate a Box 16 exempt amount for the under 27's based on the Box 07 amount (assumes no box 16 amount exists)
      if #RptYear >= 2014 and ($Box = $YE_Wages or $Box = $YE_commissions or $Box = $YE_Allowance)
        do Get-Associate-Age  !#Age 
        #ifdef PR_SUM_WAGES_ALLOW_COMMIS
          if #Age < 27
           add #amount to #PR_Wages_Allow_Comm
           show 'Puerto Rico, adding wages ' #amount ' for Box ' $Box ' due to AGE of associate ' $age ', PR_Wages_Allow_Comm SUM = ' #PR_Wages_Allow_Comm
           goto done_loading_amounts
          end-if
        #endif
      end-if
     #endif
     
   
     #ifdef REDUCE_PRH_WAGE_REC_BY_COMMISSIONS
      if $Box = $YE_commissions
       let #PR_YE_Commissions = #amount
      end-if
     #endif
     
     #ifdef REDUCE_PRH_WAGE_REC_BY_TIPS
      if $Box = $YE_Tips
       let #PR_YE_Tips = #amount
      end-if
     #endif 
     
     #ifdef PR_TIPS_ON_PRH_from_Box10
      if $Box = $YE_Tips
       let #PR_YE_Tips = #amount
      end-if
     #endif
     
     #ifdef REDUCE_PRH_WAGE_REC_BY_Box16
      if $Box = $YE_Salary_Act_324
       let #PR_YE_Box16 = #amount
      end-if
     #endif 
     
     let $Load_amt_type = 'P'
     do load-amt
     
     goto done_loading_amounts
  end-if

  #if {SITE_ID} <> 'AVD1'
   if #D.SEQUENCE_NUMBER <> 1
    evaluate $Box            
      when  = $YE_State_Wages
      when  = $YE_State_Tax
      when  = $YE_Local_Wages
      when  = $YE_Local_Tax
        break
      when-other
         if $Bx <> $YE_Other
           let #Amount = 0
         end-if        
      end-evaluate
   end-if
  #endif
  
  let $YE_Resident = ' '
  if  ($Box = $YE_Local_Wages OR $Box = $YE_Local_Tax) and (#RptYear <= 2011 or $trimmed_state <> 'PA')  !04182013, don't set this for PA Act 32 asociates
    let $YE_Resident = ' '
    do Get-YE-Resident        !returns $YE_Resident for this person in this locality
    if $YE_Resident = 'N'
      let $YE_Resident = ' '
    end-if
  end-if

  let $Load_Amt_Type = 'W'                     ! standard for W-2 data
  evaluate $Bx
    when = $YE_SS_Tax
    when = $YE_Med_Wages
    when = $YE_Med_Tax
       #ifdef USE_04_05_06_BOX_AMOUNTS  !2/6/9 feature made standard
        !if #RptYear >= 2009
           do load-amt
        !end-if
       #endif
       break
    when = $YE_SS_Wages
    when = $YE_SS_Tips                  !Boxes 03 and 07 are still split out due to tips
       break

    when = $YE_Fed_Tax
       #ifdef USE_02_BOX_AMOUNTS        !4/20/09
         do load-amt
       #endif
       break
    when-other
      #ifdef NYC_WAGES_TAXES_FROM_YE_AMOUNTS
         if $Trimmed_Locality = 'P0001' and $Trimmed_State = 'NY'
             if  ($Box = $YE_Local_Wages)  
               add #Amount to #NYC_Wages
               if $SelectEmplid <> ''
                 show 'NYCity wages from YE_AMOUNTS, Box: ' $Box ' = ' #NYC_Wages
               end-if
             else
               add #Amount to #NYC_Taxes
               if $SelectEmplid <> ''
                 show 'NYCity taxes from YE_AMOUNTS, Box: ' $Box ' = ' #NYC_Taxes
               end-if
             end-if
         else
           do load-amt
         end-if      
      #else
       #ifndef LOCAL_RECIPROCITY
         do load-amt
       #else                                                        !8/8/07 fix
         if  ($Box = $YE_Local_Wages)  OR ($Box = $YE_Local_Tax)
           #if {SITE_ID} = 'FRB1'   !1/23/2012
             if $Trimmed_Locality = 'P0001' and $Trimmed_State = 'NY'
               do load-amt
             end-if
           #endif
           break
         else
           do load-amt
         end-if
       #endif
      #endif
     
   end-evaluate
  !-----------------------------------------------------------

  evaluate $Bx

   when = $YE_Fed_Wages                    !Fed wages
       evaluate $Trimmed_State
        add  #Amount to #01-T
        when = '$U'
          break
        when = 'GU'
          array-add #Amount to Company_Totals(#cur_tot) C_01_GU
          break
        when = 'AS'
          array-add #Amount to Company_Totals(#cur_tot) C_01_AS
          break
        when = 'VI'
          array-add #Amount to Company_Totals(#cur_tot) C_01_VI
          break
      end-evaluate
      break
    when = $YE_Fed_Tax                    !Fed tax
      add  #Amount to #02-T
      evaluate $Trimmed_State
        when = '$U'
          break
        when = 'GU'
          array-add #Amount to Company_Totals(#cur_tot) C_02_GU
          break
        when = 'AS'
          array-add #Amount to Company_Totals(#cur_tot) C_02_AS
          break
        when = 'VI'
          array-add #Amount to Company_Totals(#cur_tot) C_02_VI
          break
      end-evaluate
      break

    when = $YE_SS_Wages                    !SS wages
      evaluate $Trimmed_State
        when = '$U'
          break
        when = '$UGU'
          array-add #Amount to Company_Totals(#cur_tot) C_03_GU
          break
        when = '$UAS'
          array-add #Amount to Company_Totals(#cur_tot) C_03_AS
          break
        when = '$UVI'
          array-add #Amount to Company_Totals(#cur_tot) C_03_VI
          break
      end-evaluate
      break
    when = $YE_SS_Tax                    !SS tax
      evaluate $Trimmed_State
        when = '$U'
          break
        when = '$UGU'
          array-add #Amount to Company_Totals(#cur_tot) C_04_GU
          break
        when = '$UAS'
          array-add #Amount to Company_Totals(#cur_tot) C_04_AS
          break
        when = '$UVI'
          array-add #Amount to Company_Totals(#cur_tot) C_04_VI
          break
      end-evaluate
      break
    when = $YE_Med_Wages                    !Medicare wages
      evaluate $Trimmed_State
        when = '$U'
          break
        when = '$UGU'
          array-add #Amount to Company_Totals(#cur_tot) C_05_GU
          break
        when = '$UAS'
          array-add #Amount to Company_Totals(#cur_tot) C_05_AS
          break
        when = '$UVI'
          array-add #Amount to Company_Totals(#cur_tot) C_05_VI
          break
      end-evaluate
      break
    when = $YE_Med_Tax                    !Medicare tax
      evaluate $Trimmed_State
        when = '$U'
          break
        when = '$UGU'
          array-add #Amount to Company_Totals(#cur_tot) C_06_GU
          break
        when = '$UAS'
          array-add #Amount to Company_Totals(#cur_tot) C_06_AS
          break
        when = '$UVI'
          array-add #Amount to Company_Totals(#cur_tot) C_06_VI
          break
      end-evaluate
      break

    when-other
           if ($Bx = $YE_Other) and (#Amount <> 0)
             do load-Box14
           end-if     !Box 14
   end-evaluate

  let $RES_PSD_CD_W2  = ''    !20130509
  let $WORK_PSD_CD_W2 = ''    !20130509
  let $YE_Resident    = ' '   !20130509
  
done_loading_amounts:

FROM  PS_YE_AMOUNTS D {NOLOCK_SQL}

   #ifdef USE_INT_CRITERIA
    WHERE D.CALENDAR_YEAR  = int(\$RptYearZ\)
   #else
    WHERE D.CALENDAR_YEAR   = #RptYear
   #endif

   #ifdef SUBTOTAL_FEIN_EXTRACT
    #ifdef MVS
      \$FEIN_COMPANIES_TO_INCLUDE\
    #else
      [$FEIN_COMPANIES_TO_INCLUDE]
    #endif
   #else
     #ifdef SUBTOTAL_ADP_COMPID_EXTRACT
       #ifdef MVS
        \$FEIN_COMPANIES_TO_INCLUDE\
       #else
        [$FEIN_COMPANIES_TO_INCLUDE]
       #endif
     #else
        AND D.COMPANY         = $Current_COMPANY
     #endif
   #endif
  
  AND D.EMPLID          = $Current_Emplid
  AND D.TAXFORM_ID      = $E.TAXFORM_ID

  #ifdef ADP_TAX_AMEND
   #ifdef W2C_BOXES_TO_BYPASS_YE_AMOUNTS
    {W2C_BOXES_TO_BYPASS_YE_AMOUNTS}
   #endif
  #endif
  
  #ifdef MVS
    AND \$Sequence_Number_Selection\
  #else
    AND [$Sequence_Number_Selection]
  #endif

  ORDER by D.COMPANY, D.BOX

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

    
  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Load-W-2-Amounts' to $debug-proc1
     move 'PS_YE_AMOUNTS'    to $debug-table1
     do log-delta-time
  #endif

  #ifdef show_selects
    #debugd show '...done'
  #endif

end-procedure

begin-procedure Get-YE-Resident

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
BEGIN-SELECT         !Loops = 1
LD3.RESIDENT

  if $SelectEmplid <> ''
   #debugd show 'Get-YE-Resident: for ' $Trimmed_State ' ' $Trimmed_Locality ' --> ' &LD3.RESIDENT
  end-if
  
  let $YE_Resident = &LD3.RESIDENT

  FROM PS_LOCAL_TAX_DATA LD3 {NOLOCK_SQL}
    WHERE LD3.EMPLID       = $Current_Emplid
      AND LD3.COMPANY      = $Current_Company
      AND LD3.STATE        = $Trimmed_State
      AND LD3.LOCALITY     = $Trimmed_Locality
      AND LD3.EFFDT=(SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_DATA {NOLOCK_SQL}
       WHERE  EMPLID   = LD3.EMPLID
         AND  COMPANY  = LD3.COMPANY
         AND  STATE    = LD3.STATE
         AND  LOCALITY = LD3.LOCALITY
         AND  EFFDT   <= $Qtr_End_Native)

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Get-YE-Resident' to $debug-proc1
     move 'PS_LOCAL_TAX_DATA'    to $debug-table1
     do log-delta-time
  #endif

end-procedure

begin-procedure load-amt

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

  if $SelectEmplid <> '' or $Current_Emplid = '{TESTING_EMPLID}'
    show 'Load-Amt: ' $BOX ', ST  = ' $Trimmed_State ', LCL = ' $Trimmed_Locality ', Res = ' $YE_Resident ', ID = ' $E.TAXFORM_ID ', Load-Amt Type = ' $Load_Amt_Type ', WORK_PSD_CD = ' $WORK_PSD_CD_W2 ', Res_PSD_CD = ' $RES_PSD_CD_W2
  end-if

  !20130516
  if rtrim($WORK_PSD_CD_W2,' ') = '990000' and $Trimmed_State = 'PA' 
    show 'Load-Amt: resetting PA Work PSD code from: ' $WORK_PSD_CD_W2 ' to Locality: ' $Trimmed_Locality ' for Emplid ' $Current_Emplid
    let $WORK_PSD_CD_W2 = $Trimmed_Locality
  end-if
  !----------------------------------
  
  !04232013 added
  #ifdef ROLLUP_PHILLY_BALANCES
      !04122013 Philly rollup for RSI
      !------------------------------
      if rtrim($RES_PSD_CD_W2,' ') = '' and $Trimmed_State = 'PA' and ($Trimmed_Locality = '510101' or $Trimmed_Locality = 'I510012M')
         let $Resident = ' '
         let $TaxBalance_State = $Trimmed_State
         let $TaxBalance_Locality = $Trimmed_Locality
         do Extract-Resident-Code
         if $YE_Resident = 'Y'      
           let $RES_PSD_CD1 = $Trimmed_Locality
         end-if                    
         if $SelectEmplid <> '' or $Current_Emplid = '{TESTING_EMPLID}'
            show 'Load-Amt: rollup Philly Bal, blank RES_PSD_CD logic.  Resident ' $YE_Resident ' Clearing Resident PSD code ' $RES_PSD_CD_W2 
         end-if
      end-if
      !------------------------------
      if $Trimmed_State = 'PA' and ($Trimmed_Locality = '510101' or $Trimmed_Locality = 'I510012M') 
        !#ifndef LOCAL_RECIPROCITY
         if $RES_PSD_CD_W2 = '510101' or $RES_PSD_CD_W2 = 'I510012M'
           let $YE_Resident = 'Y'  
         else
           let $YE_Resident = 'N'
         end-if                  
        !#endif
        if $SelectEmplid <> '' or $Current_Emplid = '{TESTING_EMPLID}'
           show 'Load-Amt: rollup Philly Bal, RES_PSD_CD logic.  Resident ' $YE_Resident ' Clearing Resident PSD code ' $RES_PSD_CD_W2 
        end-if
        let $RES_PSD_CD_W2 = ''
        let $WORK_PSD_CD_W2 = $Trimmed_Locality  !20130507 added
      end-if
  #endif        

  if $SelectEmplid <> '' or $Current_Emplid = '{TESTING_EMPLID}'
    show 'Load-Amt: Insert ' $Box ', Res = ' $YE_Resident  ', WORK_PSD_CD = ' $WORK_PSD_CD_W2 ', Res_PSD_CD = ' $RES_PSD_CD_W2
  end-if

  !---------------------------------------
  
  MOVE '' TO $W2C_Included

  add 1 to #load_retrieved
  let #i=0
  let $found = 'f'
  while (#i < #Box_W2_count) and ($found = 'f')
     get $B                    -
         $S                    -
         $L                    -
         $WPC                  -
         $RPC                  -
         $R                    -
         $T                    -
         $Ld                   -
         from Box_W2(#i)        -
              BOX              -
              STATE            -
              LOCALITY         -
              WORK_PSD_CD      -
              RES_PSD_CD       -
              RESIDENT         -
              TAXFORM_ID       -
              LOAD_AMT_TYPE

       if rtrim($B,' ') = rtrim($box,' ')               AND
         rtrim($S,' ') = rtrim($Trimmed_State,' ')      AND
         rtrim($L,' ') = rtrim($Trimmed_Locality,' ')   AND
         rtrim($WPC,' ') = rtrim($WORK_PSD_CD_W2,' ')   AND
         rtrim($RPC,' ') = rtrim($RES_PSD_CD_W2,' ')    AND
         rtrim($R,' ') = rtrim($YE_Resident,' ')        AND
         rtrim($T,' ') = rtrim($E.TAXFORM_ID,' ')

       let $found = 't'
       break

      end-if

      add 1 to #i

  end-while

  !W-2s: #amount is actual W-2 amount     W-2C's: #amount is the difference and #cur_amount is the actual
  !--------------------------------------------------------------------------------------------------------
  if $Load_amt_type = 'C'   !if we don't already have a W-2 entry and this is a W-2C, set to new actual amuont
     let #amt            = #cur_amount
     let #W2C_ADJ_AMOUNT = #amount
  else
     let #amt            = #amount
     let #W2C_ADJ_AMOUNT = 0
  end-if

  if rtrim($found,' ') = 't'

   if $Load_amt_type = 'C'
     array-add #W2C_ADJ_AMOUNT to Box_W2(#i) AMOUNT               !update new corrected amount
     array-add #W2C_ADJ_AMOUNT to Box_W2(#i) W2C_ADJ_AMOUNT       !update total adjustment for this box
   else
     array-add #amt to Box_W2(#i) AMOUNT
   end-if

   !4/16/09 added
   !--------------------------------------------------------------------------
   let $Load_Amt_code = $load_amt_type
   if $Load_amt_type = 'C' and $Ld = 'W'
      let $Load_Amt_code = 'WC'   !if we had an original W-2 for this W-2C amount... stick WC in... otherwise stick a C in (No YE data for this W-2C)
   end-if
   put $Load_amt_code into Box_W2(#i) LOAD_AMT_TYPE             !pbzqtr.sqr to know this was a W-2C
   !--------------------------------------------------------------------------

  else

   if  #Box_W2_count < {BOX_BALANCE_LIMIT}

   Put   #amt                            -
         $BOX                            -
         $E.TAXFORM_ID                   -
         $Trimmed_State                  -
         $Trimmed_Locality               -
         $WORK_PSD_CD_W2                 -
         $RES_PSD_CD_W2                  -
         $YE_Resident                    -
         $Load_amt_type                  -
         #W2C_ADJ_AMOUNT                 -
         Into Box_W2(#Box_W2_count)      -
             AMOUNT                      -
             BOX                         -
             TAXFORM_ID                  -
             STATE                       -
             LOCALITY                    -
             WORK_PSD_CD                 -
             RES_PSD_CD                  -
             RESIDENT                    -
             LOAD_AMT_TYPE               -
             W2C_ADJ_AMOUNT

      add 1 to #Box_W2_count
    end-if
  end-if

   if $Load_amt_type = 'C'

     !only TAX/WAGE Boxes should set this flag, which determines if we should call the create-w2c-audit
     !-------------------------------------------------------------------------------------------------
     if $Box = '01' or $Box = '02' or
        $Box = '03' or $Box = '04' or
        $Box = '05' or $Box = '06' or
        $Box = '16' or $Box = '17' or
        $Box = '18' or $Box = '19'

       MOVE 't' TO $W2C_Included

     end-if
   end-if

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'load-amt' to $debug-proc1
     move ' '    to $debug-table1
     do log-delta-time
  #endif

  
end-procedure

!***************************************************
begin-procedure Process-W-2-Box-Details

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

 !#define debug_box_recs

  let #i = 0
  while (#i < #box_w2_count)

     Get #Amount                   -
         $box                      -
         $taxform_id               -
         $St                       -
         $Lc                       -
         $Rs                       -
         $Ld_type                  -
         From Box_W2(#i)           -
             AMOUNT                -
             BOX                   -
             TAXFORM_ID            -
             STATE                 -
             LOCALITY              -
             RESIDENT              -
             LOAD_AMT_TYPE

   do assign-year-end-variables         ! (see w2.sqc for details)

   if rtrim($Box,' ') = ''
       #debugd show 'Invalid Deduction. Emplid ' $current_emplid ', Box ' $box
   end-if

   !We only write B records for the following Box record values:
   !-------------------------------------------------------------
   !US :   Valide B recs: 8,10 ,11,12A-Z, 12AA, 12BB, and 14x
   !PR :   Valid  B recs  05,06, 7,9,13,15,16
   !-------------------------------------------------------------

   if $SelectEmplid <> ''
       show ' Process-W-2-Box-Details Box ' $box ', ID ' $taxform_id ', Amt = ' #Amount ', st = ' $st
   end-if

   !10/28/05 added for ee's with no or Zero tax balances, but with W-2 data from YE_Amounts.. need an E record
   if $first_tax_for_emplid = 't'
     do write-employee-rec
     let $first_tax_for_emplid = 'f'
   end-if

   let $valid_box_rec = 'F'

   if rtrim($TAXFORM_ID,' ') <> 'P'

     let $territory = 'US'

     evaluate $Box

       when  = $YE_Alloc_Tips
       when  = $YE_Dep_Care
       when  = $YE_Non_Qual_457
       when  = $YE_Non_Qual_457_Y
       when  = $YE_Non_Qual_457_N
       when  = $YE_Uncoll_SS_Tax_On_Tips
       when  = $YE_Uncoll_Med_Tax_On_Tips
       when  = $YE_Group_Term_Life
       when  = $YE_401K
       when  = $YE_403B
       when  = $YE_408K6
       when  = $YE_457B
       when  = $YE_501C18D
       when  = $YE_Sick_Pay
       when  = $YE_Excise_Tax
       when  = $YE_Business_Exp
       when  = $YE_Uncoll_SS_Tax_GTL
       when  = $YE_Uncoll_Med_Tax_GTL
       when  = $YE_Excl_Moving_Exp
       when  = $YE_Basic_Qtrs_and_Subsist
       when  = $YE_Med_Svgs_Acct
       when  = $YE_408P_Simple_Retirement
       when  = $YE_Adoption_Exp
       when  = $YE_NonStatutory_Stock_Opt
       when  = $YE_Health_Savings_Acct         !added 12/2/04
       when  = $YE_deferral_409a
       when  = $YE_income_409a
       when  = $YE_ROTH_401K
       when  = $YE_ROTH_403B
       when  = $YE_ER_HEALTH  !12DD
       when  = $YE_457B_ROTH  !12EE
       when  = $Hire_Exempt_Wages
          let $valid_box_rec = 'T'
       when-other
      break
     end-evaluate

   else

    
     let $territory = 'PR'

      evaluate $Box
     
      #ifdef GENERATE_PR_BOX07
       when  = $YE_Wages
      #endif
       when  = $YE_Cost_Pension_Annuity
       when  = $YE_Allowance                !1/7/9 added
       when  = $YE_Commissions
       when  = $YE_Retire_Fund
       when  = $YE_Reimbursed_Expense
       when  = $YE_CODA_Plans               !11/21/04 added @Siemens for 401K
       when  = $ER_Sponsored_Hlth_INS       !2011   6A, starting in 2014 05
       when  = $EE_Charitable_Contribution  !2011   6B  starting in 2014 06
       when  = $YE_Salary_Act_324           !16
       when  = $YE_Save_and_Dup             !2014   16B
          let $valid_box_rec = 'T'
        break
       when-other
      break
      end-evaluate
    
      #ifdef PROCESS_PR_BOX16E
       if $Box = '16E' and #RptYear >= 2014
          let $valid_box_rec = 'T'
       end-if
      #endif
      
  end-if

   if $SelectEmplid <> ''
      show ' Process-W-2-Box-Details Box check ' $box ', ID ' $taxform_id ', territory = ' $territory ', valid_box_rec = ' $valid_box_rec
   end-if

!  do assign-year-end-variables         ! (see w2.sqc for details)
  if rtrim($valid_box_rec,' ') = 'T'

   do Get-Box-Description-update-B-Rec-totals ! keys: $box, $taxform_id.... returns $desc

   let #t = #Amount * 100
   do Format-Number(#t,$Amount, '999999999999999mi')

   let $State_and_locality = ''

   if rtrim($taxform_id,' ') = 'W'
    if  ($Box = $YE_State_Wages)
     OR ($Box = $YE_State_Tax)
     OR ($Box = $YE_Local_Wages)
     OR ($Box = $YE_Local_Tax)
      let $State_and_locality = ' ' || $St || ' ' || $Lc
    end-if
   end-if

   let $res = ' '
   if rtrim($taxform_id,' ') = 'W'
    if  ($Box = $YE_Local_Wages) OR ($Box = $YE_Local_Tax)
      let $res = $rs
    end-if
   end-if

   let $debug_char = ' '

   let $rectp = 'B'

   !2006 new w-2 boxes... 12AA --> 121, and 12BB --> 122 12DD --> 124, 12EE --> 125
   if rtrim($taxform_id,' ') = 'P' and #RptYear >= 2014
 
      #ifdef PROCESS_PR_BOX16E
      if $Box = '16E' and #RptYear >= 2014
         let $Box = rtrim('{PUERTO_RICO_BOX16_REMAPPING}',' ')
         let $Desc = 'Exempt'
         if $SelectEmplid <> ''
           show 'PROCESS_PR_BOX16E: PR box 16E remapped to ' $Box ' ' $Desc
         end-if
      end-if
     #endif

     if $SelectEmplid <> ''
       show 'Checking PR mapping for Box ' $Box
     end-if
     
     evaluate $Box
       when  = $ER_Sponsored_Hlth_INS                           !2014 map 05 to  06A
         let $Box = '06A'
         break
       when  = $EE_Charitable_Contribution                      !2014 map 06 to  06B
         let $Box = '06B'
         break

       when = $YE_Salary_Act_324                                !2014 Box 16
         #ifdef PUERTO_RICO_BOX16A_STANDARD_REMAPPING
            let $Box = '16' || $BOX16A_CODE
         #else
          #ifdef PUERTO_RICO_BOX16_REMAPPING_CUSTOM
            do Custom-Puerto-Rico-Box-16-remapping   !in probiz.sqc
          #else
            let $Box = rtrim('{PUERTO_RICO_BOX16_REMAPPING}',' ')
          #endif
         #endif

         if $Box <> '161' and $Box <> '162' and $Box <> '163' and $Box <> '164' and $Box <> '165'
           show 'ERROR:   Illegal Box 16 mapping (' $Box ') for Puerto Rico associate.  Emplid ' $Current_Emplid '. stopping program'
           stop
         end-if
         
         if $SelectEmplid <> ''
           show 'PR box ' $YE_Salary_Act_324  ' remapped to ' $Box
         end-if
         let $desc = ''
        break

       when-other
      break
    end-evaluate
   else
     evaluate $Box
       when  = $YE_ROTH_401K
         let $Box = '121'
         break
       when  = $YE_ROTH_403B
         let $Box = '122'
         break
       #ifdef GENERATE_BOX12CC
       when  = $Hire_Exempt_Wages  !  (for 2010 only)
         let $Box = '123'  ! 123 --> 12CC
         break
       #endif
       when  = $YE_ER_HEALTH  !12DD
         let $Box = '124'
         break
       when  = $YE_457B_ROTH
         let $Box = '125'     !12EE
         break
       when-other
      break
    end-evaluate

   end-if
   let $desc = substr($desc,1,10)

   if $SelectEmplid <> ''
       show ' Process-W-2-Box-Details Writing, Box ' $box ', territory ' $territory ', Desc = ' $Desc ', Amount = ' $amount
   end-if

   #ifdef QUARTERLY_HISTORY
         let $BOX_str = 'B ' || rpad($territory,2,' ') || rpad($box,3,' ') || rpad($Desc,10,' ') || rpad($amount,16,' ')
                             || rpad($State_and_locality,15,' ') || substr($res,1,1)
         do populate_ADP_QTR_HIST
   #endif
     
   #ifdef USE_TEMP_TABLE_FOR_OUTPUT
       let $qout_str = 'B ' || rpad($territory,2,' ') || rpad($box,3,' ') || rpad($Desc,10,' ') || rpad($amount,16,' ')
                            || rpad($State_and_locality,15,' ') || substr($res,1,1)
       do Log-B-rec-data
   #else

    Write 1 FROM     $rectp:1
                    $debug_char:1
                    $territory:2
                    $Box:3
                    $Desc:10
                    $amount:16
                    $State_and_locality:15
                    $res:1
     add 1 to #reccnt
     add 1 to #company_trailer_reccnt

   #endif
   add 1 to #B_REC_Total_Count

  end-if
  add 1 to #i
 end-while

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Process-W-2-Box-Details' to $debug-proc1
     move ' '    to $debug-table1
     do log-delta-time
  #endif

end-procedure

!***************************************************
begin-procedure Get-Fed-Tax-info

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

  move 0    to #FWT_ALLOWANCES
  move ' '  to $FWT_ALLOWANCES
  move ' '  to $FWT_Mar_Status

  move ' '  to $StatutoryEe
  move ' '  to $PensionPlanFlag
  move ' '  to $Third_Party_Sick
  move ' '  to $deceased

begin-SELECT
F1.FWT_ALLOWANCES
F1.FWT_MAR_STATUS
F1.STATUTORY_EE
F1.PENSION_PLAN
F1.DECEASED
F1.THIRDPARTY_SICKPAY

  #ifndef BLANK_FED_EXEMPTIONS
    let #FWT_ALLOWANCES = &F1.FWT_ALLOWANCES
    do Format-Number(#FWT_ALLOWANCES, $FWT_ALLOWANCES, '99')
  #endif

  #ifndef BLANK_MARITAL
    move &F1.FWT_MAR_STATUS to $FWT_Mar_Status
  #endif

  #ifndef BLANK_StatutoryEe
    let $StatutoryEe = &F1.STATUTORY_EE
  #endif

  #ifndef BLANK_PensionPlanFlag
    let $PensionPlanFlag = &F1.PENSION_PLAN
  #endif

  #ifdef debug_pension
    #debugd show '  &F1.PENSION_PLAN ' &F1.PENSION_PLAN
  #endif

  #ifndef BLANK_Third_Party_Sick
    let $Third_Party_Sick = &F1.THIRDPARTY_SICKPAY
  #endif

  #ifndef BLANK_deceased
    let $deceased = &F1.DECEASED
  #endif

 FROM   PS_FED_TAX_DATA F1 {NOLOCK_SQL}
 WHERE  F1.EMPLID        = $Current_Emplid
    AND F1.COMPANY       = $Current_Company
    AND F1.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_FED_TAX_DATA {NOLOCK_SQL}
       WHERE  EMPLID  = F1.EMPLID
         AND  COMPANY = F1.COMPANY
         AND  EFFDT  <= $Qtr_End_Native)
#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Get-Fed-Tax-info' to $debug-proc1
     move 'PS_FED_TAX_DATA'    to $debug-table1
     do log-delta-time
  #endif

end-procedure

!***************************************************
begin-procedure Get-State-Tax-info

  if $SelectEmplid <> ''                                      
    show 'in State-Tax-data routine, emplid  ' $Current_emplid ', comp ' $Current_company ', st ' $state_trimmed 
  end-if
  
  
  move ' ' to $SWT_Mar_Status
  move 0   to #SWT_Allowances
  move ' ' to $SWT_Allowances
  move ' ' to $SDI_Exempt
  move ' ' to $SUT_Exempt
  move 'N' to $FLI_STATUS

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
begin-select
SD.SWT_ALLOWANCES
SD.SWT_MAR_STATUS
SD.SDI_STATUS
SD.SUT_EXEMPT
#ifdef 08F_PNA_FLI_STATUS
SD.PNA_FLI_STATUS
#endif

  #ifdef 08F_PNA_FLI_STATUS
   ! PNA_FLI_STATUS translate values (E-exempt, N-n/a, V-Voluntary, Y-Yes Subject to FLI).
   !    'N' for Exempt or n/a..... otherwise set it to a Y
   !--------------------------------------------------------------------------------------
   let $PNA_FLI_STATUS = &SD.PNA_FLI_STATUS
   if {PNA_FLI_STATUS_CRITERIA}
     let $FLI_STATUS = 'Y'
   end-if

   #ifdef FLI_STATUS_IF_BALANCES
    if $FLI_STATUS <> 'Y'
     do set-fli-status-if-balances
    end-if
   #endif

   #ifdef 08F_PNA_FLI_STATUS
     #ifdef TESTING_FLI_PLAN_NBR
      if $state_trimmed = 'NJ' and $FLI_STATUS = 'Y'
       do Get-NJ-FLI-PlanNumber
      end-if
     #else
      if $state_trimmed = 'NJ' and $FLI_STATUS = 'N'
       do Get-NJ-FLI-PlanNumber
      end-if
     #endif
   #endif

  #else  
   #ifdef FLI_STATUS_IF_BALANCES  !4/24/2011 copied here so we set the flag if their are FLI balances without the PNA_FLI_STATUS field
    if $FLI_STATUS <> 'Y'
     do set-fli-status-if-balances
    end-if
   #endif
  #endif

  #ifdef FLI_PLAN_NUMBER_OVERRIDE
    if $state_trimmed = 'NJ' and $FLI_STATUS = 'N'
      let $FLI_Plan_Text = '{FLI_PLAN_NUMBER_OVERRIDE}'
    end-if
    if $SelectEmplid <> ''
      #debugd show 'Get-State-Tax-info FLI_PLAN_NUMBER_OVERRIDE. FLI_Plan_Text' $FLI_Plan_Text
    end-if
  #endif

  let #SWT_Allowances = &SD.SWT_ALLOWANCES
  let $SWT_mar_status = &SD.SWT_MAR_STATUS
  let $SDI_Status     = &SD.SDI_STATUS
  let $SUT_Exempt     = &SD.SUT_EXEMPT

  if rtrim($SUT_Exempt,' ') <> 'Y'
    let $SUT_Exempt = 'N'
  else                                                                                  !20130410
    let $SUT_Exempt_state_str = $SUT_Exempt_state_str || $State_Trimmed || ','          !20130410
  end-if

  #ifdef USE_CUSTOM_SDI_STATUS_for_PRIVATE_PLAN
    if {USE_CUSTOM_SDI_STATUS_for_PRIVATE_PLAN}
  #else
    if rtrim($SDI_Status,' ') = 'E' or rtrim($SDI_Status,' ') = 'V'    !exempt or voluntary are the defaults
  #endif
    let $SDI_Exempt = 'Y'
    if $state_trimmed = 'NJ'               !only get the private plan if it's blank (NJ being overwritten by NY...) 20141231
      move $state_trimmed to $VDI_state_trimmed         !12/31/08 added
      do get-private-sdi-acct                           !12/31/08 added
    end-if
  else
    let $SDI_Exempt = 'N'
  end-if

  if $SelectEmplid <> ''                                         !12/31/08 added this section for debugging
    show 'in State-Tax-data routine, flags (SDI Status, SDI Status, SUT Exempt, FLI Status) ' $SDI_Status $SDI_Exempt $SUT_Exempt $FLI_STATUS ', private sdi acct ' $private_sdi_acct ', st ' $state_trimmed
  end-if
  
  do Format-Number(#SWT_Allowances, $SWT_Allowances, '99')

  FROM  PS_STATE_TAX_DATA SD {NOLOCK_SQL}
   WHERE  SD.EMPLID  = $Current_Emplid
      AND SD.COMPANY = $Current_Company
      AND SD.STATE    = $State_Trimmed
      AND SD.EFFDT = (SELECT MAX(EFFDT)
       FROM   PS_STATE_TAX_DATA {NOLOCK_SQL}
       WHERE  EMPLID  = SD.EMPLID
         AND  COMPANY = SD.COMPANY
         AND  STATE   = SD.STATE
         AND  EFFDT  <= $Qtr_end_native)

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Get-State-Tax-info' to $debug-proc1
     move 'PS_STATE_TAX_DATA'    to $debug-table1
     do log-delta-time
  #endif

  do Format-Number(#SWT_Allowances, $SWT_Allowances, '99')

end-procedure

#ifdef FLI_STATUS_IF_BALANCES
begin-procedure set-fli-status-if-balances
    !Cycle through balances...
    !------------------------
    let #fli_cnt = 0

    while #fli_cnt < #Last_TaxBalance_Cnt
       Add 1 to #fli_cnt
       get $FLI_State        -
           $FLI_Class        -
        from TaxBalance(#fli_cnt)  -
             TaxBalance_State
             TaxBalance_Tax_Class

       !if $FLI_State = 'NJ' and ($FLI_Class = 'I' or $FLI_Class = 'O' or $FLI_Class = 'Y')   !11/11/11 change
       if ($FLI_Class = 'I' or $FLI_Class = 'O' or $FLI_Class = 'Y')
         let $FLI_STATUS = 'Y'
         break
       end-if
    end-while

end-procedure
#endif

#ifdef 08F_PNA_FLI_STATUS
begin-procedure Get-NJ-FLI-PlanNumber

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

begin-SELECT
CS.PNA_FLI_PLAN_NBR

  let $FLI_Plan_Text = rtrim(&CS.PNA_FLI_PLAN_NBR,' ')

FROM  PS_CO_STATETAX_TBL CS {NOLOCK_SQL}
WHERE CS.COMPANY = $Current_company
  AND CS.STATE = $state_trimmed
  AND CS.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_CO_STATETAX_TBL {NOLOCK_SQL}
       WHERE  COMPANY = $Current_company
         AND  STATE   = $state_trimmed
         AND  EFFDT  <= $Qtr_end_native)

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

#ifdef TESTING_FLI_PLAN_NBR
  if rtrim($FLI_Plan_Text,' ') = ''
    let $FLI_Plan_Text = '{TESTING_FLI_PLAN_NBR}'
  end-if
#endif

   if $SelectEmplid <> ''                                         !12/31/08 added this section for debugging
     show 'Get-NJ-FLI-PlanNumber: company ' $Current_company ', $PNA_FLI_STATUS = ' $PNA_FLI_STATUS ', $FLI_Plan_Text = ' $FLI_Plan_Text
   end-if

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Get-NJ-FLI-PlanNumber' to $debug-proc1
     move 'PS_CO_STATETAX_TBL'    to $debug-table1
     do log-delta-time
  #endif

end-procedure
#endif

begin-procedure Get-Local-Tax-info

  #ifdef show_selects_adp
    #debugd show 'Get-Local-Tax-info'
  #endif

  move ' '  to $LWT_Mar_Status
  move 0  to #LWT_Allowances
  move ' ' to $LWT_Allowances

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
begin-select
LD.LWT_ALLOWANCES
#if {Peoplesoft_Version} >= '7.5'
LD.LWT_MAR_STATUS
#endif

  let #LWT_Allowances = &LD.LWT_Allowances

  #if {Peoplesoft_Version} >= '7.5'
   let $LWT_mar_status = &LD.LWT_MAR_STATUS
  #endif

  do Format-Number(#LWT_Allowances, $LWT_Allowances, '99')

  FROM  PS_LOCAL_TAX_DATA LD {NOLOCK_SQL}
   WHERE  LD.EMPLID  = $Current_Emplid
      AND LD.COMPANY = $Current_Company
      AND LD.STATE   = $State_Trimmed
      AND LD.LOCALITY= $local_Trimmed
      AND LD.EFFDT = (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_DATA {NOLOCK_SQL}
       WHERE  EMPLID  = LD.EMPLID
         AND  COMPANY = LD.COMPANY
         AND  STATE   = LD.STATE
         AND  LOCALITY= LD.LOCALITY
         AND  EFFDT  <= $Qtr_end_native)

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Get-Local-Tax-info' to $debug-proc1
     move 'PS_LOCAL_TAX_DATA'    to $debug-table1
     do log-delta-time
  #endif

  do Format-Number(&LD.LWT_Allowances, $LWT_Allowances, '99')

end-procedure

begin-procedure load-Box14        !pass in: Bx, Amount

  move ' ' to $Box_shortdescr
  move ' ' to $Box_longdescr
  let $Box14_loaded = 'f'
  let $Box14Letter  = SUBSTR($Box,3,1)
  let $Box14Letter2 = SUBSTR($Box,3,2)

  !Client specific Box 14 code.. if Box codes are longer than 3 chars
  !CEI1: 20121217: 14UA  UNION DUES,  14UB UNION PENSION,  14UC UNION INITITATION FEE,  14UD UNITED WAY 
  !                14YN PA NQDC DEFERRALS,  14YT PA NQDC DIST,  14ZN PA NQDC EARNINGS,
  !------------------------------------------------------------------
  #if {SITE_ID} = 'CEI1'
   if length($box) > 3
     evaluate $Box14Letter2
      when = 'UA'
        let $Box_shortdescr = 'UNION DUES'
        let $Box = '140'
        let $Box14_loaded = 't'
        break
      when = 'UB'
        let $Box_shortdescr = 'UNION PENS'
        let $Box = '141'
        let $Box14_loaded = 't'
        break
      when = 'UC'
        let $Box_shortdescr = 'UNION FEES'
        let $Box = '142'
        let $Box14_loaded = 't'
        break
      when = 'UD'
        let $Box_shortdescr = 'UNITED WAY'
        let $Box = '143'
        let $Box14_loaded = 't'
        break
      when = 'YN'
        let $Box_shortdescr = 'PA NQ DEFR'
        let $Box = '144'
        let $Box14_loaded = 't'
        break
      when = 'YT'
        let $Box_shortdescr = 'PA NQ DIST'
        let $Box = '145'
        let $Box14_loaded = 't'
        break
      when = 'ZN'
        let $Box_shortdescr = 'PA NQ EARN'
        let $Box = '146'
        let $Box14_loaded = 't'
        break
      when-other
       #debugd show 'Illegal Box 14 code, Box ' $box
       break
     end-evaluate

    if $Box14_loaded = 't'
     let $Box14Letter = SUBSTR($Box,3,1)
     let #inx14 = INSTR(' ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',$Box14Letter,1) - 1
     if ((#inx14 >=0) and (#inx14 < 37))
       array-add #Amount to Box14(#inx14) Namt
       put $Box_shortdescr -
           $Box        -
       into Box14(#inx14) -
            Desc -
            Box

       add 1 to #Box14_count
     else
       #debugd show 'Illegal Box14Ux code, Box ' $box
     end-if
    end-if
   end-if
  #endif
  
  #if {SITE_ID} = 'TDB2'
   if length($box) > 3
    if $Box14Letter = 'Y'
     let $Box14Letter4 = SUBSTR($Box,4,1)
     evaluate $Box14Letter4
      when = 'N'
        let $Box_shortdescr = 'NQDC DEFR'
        let $Box = '140'
        break
      when = 'T'
        let $Box_shortdescr = 'PA NQDC'
        let $Box = '141'
        break
      when-other
       #debugd show 'Illegal Box 14Yx code, Box ' $box
       break
     end-evaluate
    end-if
 
    if $Box14Letter = 'Z'
      let $Box14Letter4 = SUBSTR($Box,4,1)
      evaluate $Box14Letter4
       when = 'N'
         let $Box_shortdescr = 'PRIOR DEFR'
         let $Box = '142'
         break
       when-other
        #debugd show 'Illegal Box 14Zx code, Box ' $box
        break
      end-evaluate
     end-if

     let $Box14Letter = SUBSTR($Box,3,1)
     let #inx14 = INSTR(' ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',$Box14Letter,1) - 1
     if ((#inx14 >=0) and (#inx14 < 37))
       array-add #Amount to Box14(#inx14) Namt
       put $Box_shortdescr -
           $Box        -
       into Box14(#inx14) -
            Desc -
            Box

       add 1 to #Box14_count
       let $Box14_loaded = 't'
     else
        #debugd show 'Illegal Box14 code, Box ' $box
     end-if
    end-if
  #endif

  #if {SITE_ID} = 'ALT1'
    if $Box14Letter = 'U'
     let $Box14Letter4 = SUBSTR($Box,4,1)
     evaluate $Box14Letter4
      when = 'A'
        let $Box_shortdescr = 'TFB'
        let $Box = '140'
        break
      when = 'B'
        let $Box_shortdescr = 'TFBVHC'
        let $Box = '141'
        break
      when = 'C'
        let $Box_shortdescr = 'RELOC'
        let $Box = '142'
        break
      when = 'D'
        let $Box_shortdescr = 'COBRA'
        let $Box = '143'
        break
      when = 'G'
        let $Box_shortdescr = 'DFCNEX'
        let $Box = '144'
        break
      when = 'H'
        let $Box_shortdescr = 'NQD'
        let $Box = '145'
        break
      when = 'L'
        let $Box_shortdescr = 'BRLIFE'
        let $Box = '146'
        break
      when = 'V'
        let $Box_shortdescr = 'BRVIS'
        let $Box = '147'
        break
      when-other
       #debugd show 'Illegal Box 14Ux code, Box ' $box
       break
     end-evaluate

     let $Box14Letter = SUBSTR($Box,3,1)
     let #inx14 = INSTR(' ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',$Box14Letter,1) - 1
     if ((#inx14 >=0) and (#inx14 < 37))
       array-add #Amount to Box14(#inx14) Namt
       put $Box_shortdescr -
           $Box        -
       into Box14(#inx14) -
            Desc -
            Box

       add 1 to #Box14_count
       let $Box14_loaded = 't'
     else
        #debugd show 'Illegal Box14Ux code, Box ' $box
     end-if

    end-if  !if Box 14Ux

  #endif

  #if {SITE_ID} = 'CSB1'

    if $Box14Letter = 'X'

     ! B US14X    DD ESPP    maps to box 14X
     ! B US14XX   QD ESPP    maps to box 140

     let $Box_shortdescr = 'DD ESPP'
     let $Box = '14X'

     if length($box) > 3
      let $Box14Letter4 = substr($box, 4, 1)
      if $Box14Letter4 = 'X'
         let $Box_shortdescr = 'QD ESPP'
         let $Box = '141'
      end-if
     end-if

     let $Box14Letter = SUBSTR($Box,3,1)
     let #inx14 = INSTR(' ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',$Box14Letter,1) - 1
     if ((#inx14 >=0) and (#inx14 < 37))
       array-add #Amount to Box14(#inx14) Namt
       put $Box_shortdescr -
           $Box -
       into Box14(#inx14) -
            Desc -
            Box

       add 1 to #Box14_count
       let $Box14_loaded = 't'
     else
        #debugd show 'Illegal Box14X code, Box ' $box
     end-if

    end-if  !if Box 14X

  #endif

  !1/12/2012
  #if {SITE_ID} = 'CHS1'
     ! B US14YT   NQDC plan  maps to 14YT and into 141
     if length($box) > 3 and $Box14Letter = 'Y'
      let $Box14Letter4 = substr($box, 4, 1)
      if $Box14Letter4 = 'T'
         let $Box_shortdescr = 'NQDC'
         let $Box = '141'
 
         let $Box14Letter = SUBSTR($Box,3,1)
         let #inx14 = INSTR(' ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',$Box14Letter,1) - 1
         if ((#inx14 >=0) and (#inx14 < 37))
           array-add #Amount to Box14(#inx14) Namt
           put $Box_shortdescr -
               $Box -
           into Box14(#inx14) -
                Desc -
                Box
  
           add 1 to #Box14_count
           let $Box14_loaded = 't'
         end-if  !if Box 14YT
      end-if
    end-if
  #endif

  !1/13/2012
  #if {SITE_ID} = 'ASY1'
    ! B 14ZO   AHA (141), 14ZP CHRFD (142)
    if length($box) > 3 and $Box14Letter = 'Z'
      let $Box14Letter4 = substr($box, 4, 1)
      if $Box14Letter4 = 'O'
         let $Box_shortdescr = 'AHA'
         let $Box = '141'
         let $Box14_loaded = 't'
      end-if
      if $Box14Letter4 = 'P'
         let $Box_shortdescr = 'CHRFD'
         let $Box = '142'
         let $Box14_loaded = 't'
      end-if
      if $Box14_loaded = 't'
         let $Box14Letter = SUBSTR($Box,3,1)
         let #inx14 = INSTR(' ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',$Box14Letter,1) - 1
         if ((#inx14 >=0) and (#inx14 < 37))
           array-add #Amount to Box14(#inx14) Namt
           put $Box_shortdescr -
               $Box -
           into Box14(#inx14) -
                Desc -
                Box
  
           add 1 to #Box14_count
         end-if  !if Box 14ZO or 14ZP
      end-if
    end-if
  #endif

  !2/20/2012
  #if {SITE_ID} = 'WFG1'
    !14YN  PA NQDC Deferrals         14YN
    !14YT  PA NQDC Distributions     14YT
    !14ZN  PA NQDC Earnings          14ZN
    if length($box) > 3 
      let $Box14Letter34 = substr($box, 3, 2)
      if $Box14Letter34 = 'YN'
         let $Box_shortdescr = 'PA NQDC DEF'
         let $Box = '141'
         let $Box14_loaded = 't'
      end-if
      if $Box14Letter34 = 'YT'
         let $Box_shortdescr = 'PA NQDC DIS'
         let $Box = '142'
         let $Box14_loaded = 't'
      end-if
      if $Box14Letter34 = 'ZN'
         let $Box_shortdescr = 'PA NQDC ERN'
         let $Box = '143'
         let $Box14_loaded = 't'
      end-if

      if $Box14_loaded = 't'
         let $Box14Letter = SUBSTR($Box,3,1)
         let #inx14 = INSTR(' ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',$Box14Letter,1) - 1
         if ((#inx14 >=0) and (#inx14 < 37))
           array-add #Amount to Box14(#inx14) Namt
           put $Box_shortdescr -
               $Box -
           into Box14(#inx14) -
                Desc -
                Box
  
           add 1 to #Box14_count
         end-if
      end-if 
    end-if
  #endif



  ! end of custom 4 char Box 14 code
  ! --------------------------------

  if $Box14_loaded = 'f'

    let $Box14Letter = SUBSTR($Box,3,1)
    let #inx14 = INSTR(' ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',$Box14Letter,1) - 1

    if ((#inx14 >=0) and (#inx14 < 37))
      array-add #Amount to Box14(#inx14) Namt
      do Get-Box-Text
      put $Box_shortdescr -
          $Box -
      into Box14(#inx14) -
          Desc -
          Box

      add 1 to #Box14_count
    else
      #debugd show 'Illegal Box14 code, Box ' $box
    end-if

   end-if

end-procedure

#if {SITE_ID} = 'EQR1'  !12/28/04

begin-procedure  check-if-box14-state-tax

 let $box14-state-tax ='f'

 if substr($box, 1, 2) = '14'

#ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
begin-select
T11.STATE
T11.TAX_CLASS
T11.LOCALITY

  if rtrim(&T11.STATE,' ') <> '$U'
   if rtrim(&T11.STATE,' ') <> 'CO'
     let $box14-state-tax = 't'   !State taxes are already on W recs, so we'll need to skip them
   else
    if substr(&T11.LOCALITY,1,5) <> '04000' AND substr(&T11.LOCALITY,1,5) <> '20000' AND substr(&T11.LOCALITY,1,5) <> '30340'
     let $box14-state-tax = 't'   !State taxes are already on W recs, so we'll need to skip them
    end-if
   end-if
  end-if

 FROM  PS_TAXFORM_TAX T11 {NOLOCK_SQL}

 WHERE T11.TAXFORM_ID = 'W'
   AND T11.BOX        = $Box
   AND T11.EFFDT      = $Max_Effdt

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'check-if-box14-state-tax' to $debug-proc1
     move 'PS_TAXFORM_TAX'    to $debug-table1
     do log-delta-time
  #endif

 end-if

end-procedure

#else

begin-procedure  check-if-box14-state-tax

  let $box14-state-tax ='f'
   if $SelectEmplid <> ''
    #debugd show 'check-if-box14-state-tax: for ' $Box ' on ' $Max_Effdt
   end-if

  #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
begin-select
T11.STATE
T11.TAX_CLASS
T11.LOCALITY

   if $SelectEmplid <> ''
     show 'check-if-box14-state-tax: Record ' $Box ' ' &T11.STATE ' ' &T11.TAX_CLASS ' ' &T11.LOCALITY
   end-if
   if rtrim(&T11.STATE,' ') <> '$U' AND rtrim(&T11.STATE,' ') <> 'RR'   !if not fed and not a RR tax..
    let $box14-state-tax = 't'   !State taxes are already on W recs, so we'll need to skip them
   end-if
   if rtrim(&T11.STATE,' ') = 'HI' and rtrim(&T11.TAX_CLASS,' ') = 'D'
    #ifdef GENERATE_BOX14_HISDI
     let $box14-state-tax = 'f'    ! 'f' means go ahead and generate a box14 row in the extract
    #endif
   end-if
   if rtrim(&T11.STATE,' ') = 'NY' and rtrim(&T11.TAX_CLASS,' ') = 'D'
    #ifdef GENERATE_BOX14_NYSDI
     let $box14-state-tax = 'f'    ! 'f' means go ahead and generate a box14 row in the extract
    #endif
   end-if
   if rtrim(&T11.STATE,' ') = 'NJ' and rtrim(&T11.TAX_CLASS,' ') = 'D'
    #ifdef GENERATE_BOX14_NJSDI
     let $box14-state-tax = 'f'    ! 'f' means go ahead and generate a box14 row in the extract
    #endif
   end-if
   if rtrim(&T11.STATE,' ') = 'NJ' and (rtrim(&T11.TAX_CLASS,' ') = 'I' or rtrim(&T11.TAX_CLASS,' ') = 'O')
    #ifdef GENERATE_BOX14_NJFLI
     let $box14-state-tax = 'f'    ! 'f' means go ahead and generate a box14 row in the extract
    #endif
   end-if

   if rtrim(&T11.STATE,' ') = 'NJ' and rtrim(&T11.TAX_CLASS,' ') = 'W'
    #ifdef GENERATE_BOX14_NJVDI
     let $box14-state-tax = 'f'    ! 'f' means go ahead and generate a box14 row in the extract
    #endif
   end-if
   if rtrim(&T11.STATE,' ') = 'CA' and rtrim(&T11.TAX_CLASS,' ') = 'W'
    #ifdef GENERATE_BOX14_CAVDI
     let $box14-state-tax = 'f'    ! 'f' means go ahead and generate a box14 row in the extract
    #endif
   end-if

   #ifdef GENERATE_BOX14K
     if $box = '14K'
       let $box14-state-tax = 'f'    ! 'f' means go ahead and generate a box14 row in the extract
     end-if
   #endif  

   #ifdef GENERATE_BOX14J
     if $box = '14J'
       let $box14-state-tax = 'f'    ! 'f' means go ahead and generate a box14 row in the extract
     end-if
   #endif  
   
   #ifdef GENERATE_BOX14W
     if $box = '14W'
       let $box14-state-tax = 'f'    ! 'f' means go ahead and generate a box14 row in the extract
     end-if
   #endif
   
   #ifdef GENERATE_BOX14X
     if $box = '14X'
       let $box14-state-tax = 'f'    ! 'f' means go ahead and generate a box14 row in the extract
     end-if
   #endif

   #ifdef GENERATE_BOX14Y
     if $box = '14Y'
       let $box14-state-tax = 'f'    ! 'f' means go ahead and generate a box14 row in the extract
     end-if
   #endif

   #ifdef GENERATE_BOX14Z
     if $box = '14Z'
       let $box14-state-tax = 'f'    ! 'f' means go ahead and generate a box14 row in the extract
     end-if
   #endif

  !if clients have specific locals to get through the box 14 state clipping logic.. do it here
  !-------------------------------------------------------------------------------------------
  #if {SITE_ID} = 'TBN1'
    if $box14-state-tax = 't'
     if rtrim(&T11.STATE,' ') = 'PA' and rtrim(&T11.LOCALITY,' ') = '61000EE' !Pittsburgh local
       let $box14-state-tax = 'f'
     end-if
    end-if
  #endif

  #if {SITE_ID} = 'TCN1'   !yum 1/25/10
    if $box14-state-tax = 't'
     if rtrim(&T11.STATE,' ') = 'CA' and rtrim(&T11.TAX_CLASS,' ') = 'W' !CA - VPDI
       let $box14-state-tax = 'f'
     end-if
    end-if
  #endif

  #if {SITE_ID} = 'CEI1'                                                                 !12/21/2007
    if $box14-state-tax = 't'
     if $box = '14U' and rtrim(&T11.STATE,' ') = 'PA' and rtrim(&T11.TAX_CLASS,' ') = 'P' and rtrim(&T11.LOCALITY,' ') <> ''  !Any PAP, Box 14U locality
       let $box14-state-tax = 'f'
     end-if
    end-if
    if $box = '14UA' or $box = '14UD'
       let $box14-state-tax = 'f'
    end-if
  #endif

  #if {SITE_ID} = 'JCT1'
    if $box14-state-tax = 't'
     if rtrim(&T11.LOCALITY,' ') = 'MEXTAX' OR
        rtrim(&T11.LOCALITY,' ') = 'MS RED'       !Mexican taxes and wages setup as a local tax.  mapped to box 14 items
       let $box14-state-tax = 'f'
     end-if
    end-if
  #endif

  #ifdef CUSTOM_BOX14_LOGIC
    let $Box14_state = rtrim(&T11.STATE,' ')
    let $Box14_class = rtrim(&T11.TAX_CLASS,' ')
    let $Box14_local = rtrim(&T11.LOCALITY,' ')
    do Custom_Box14_logic  !in proadp.sqc, needs to set $box14-state-tax to 't' to NOT include it, 'f' to include it
  #endif                   !uses: $box, $Box14_state, $Box14_class, $Box14_local
  
 FROM  PS_TAXFORM_TAX T11 {NOLOCK_SQL}
 WHERE T11.TAXFORM_ID = 'W'
   AND T11.BOX        = $Box
   AND T11.EFFDT      = $Max_Effdt

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  if $SelectEmplid <> ''
    show 'check-if-box14-state-tax: ' $Box ' --> ' $box14-state-tax
  end-if
  
end-procedure
#endif

!***************************************************
begin-procedure Process-Box14

 move 0 to #m
 while #m < 37
  get $Box $Desc #Amt  from Box14(#m) Box Desc Namt

  if $SelectEmplid <> ''
    #debugd show 'Process-Box14: ' #m edit 999 '. ' $Box ' ' $Desc ' ' #amt edit 999,999,999.99
  end-if
  
  #ifdef BOX_14s_on_SUMMARY
    if {BOX_14s_on_SUMMARY}
       goto no_box14_output
    end-if
  #endif                     

  let $box14-state-tax = 'f'
  move $Box to $Bx xx
  if $Bx = '14'
   do check-if-box14-state-tax
  end-if


  if rtrim($box14-state-tax,' ') = 'f'     ! Box recs for everything EXCEPT the State taxes already on Wage recs

    if #Amt <> 0

     let #t = #amt * 100
     do Format-Number(#t,$amt, '999999999999999mi')

     let $desc10 = substr($desc,1,10)
     #ifdef QUARTERLY_HISTORY
         let $box_str = 'B US' || rpad($box,3,' ') || rpad($Desc10,10,' ') || rpad($amt,16,' ')
         do populate_ADP_QTR_HIST
     #endif
     
     let $rectp = 'B'
     #ifdef USE_TEMP_TABLE_FOR_OUTPUT
       let $qout_str = 'B US' || rpad($box,3,' ') || rpad($Desc10,10,' ') || rpad($amt,16,' ')
       do log-B-rec-data
     #else

     Write 1 FROM     $rectp:1
                    $blank:1
                    'US':2
                    $Box:3
                    $Desc:10
                    $amt:16

     add 1 to #reccnt
     add 1 to #company_trailer_reccnt

     #endif
     add 1 to #B_REC_Total_Count
     array-add #Amt to Company_Totals(#cur_tot) C_14         !added 11/9/99

     !3/20/06, sum into company box 14 breakdown  (company then grand totalling)
     !-----------------------------------------------------------------------------
     array-add #Amt to Box14_totals(#m) Namt
     put $Desc -
         $Box  -
     into Box14_totals(#m) -
         Desc -
         Box

     array-add #Amt to Box14_fein_totals(#m) Namt
     put $Desc -
         $Box -
     into Box14_fein_totals(#m) -
         Desc -
         Box

     array-add #Amt to Box14_grand(#m) Namt
     put $Desc -
         $Box -
     into Box14_grand(#m) -
         Desc -
         Box

     !-----------------------------------------------------------------------------

    end-if
  end-if

no_box14_output:

  add 1 to #m
 end-while

end-procedure

#ifdef BOX_14s_on_SUMMARY
begin-procedure Process-Box14-as-Box99

#ifdef BOX_14s_on_SUMMARY_HEADER

    !Blank line
    !----------
    add 1 to #Box99_count
    do Format-Number(#Box99_count, $Box99_count, '99')
    move  ' ' to $Desc                                  !Blank line to seperate before verbage

    #ifdef BALANCE_TO_BOX1_PRINT
     if $SelectEmplid <> ''
         if (#Box_99_print_count < {MAX_BOX99_CODES})
          let $verbage = $desc
          put $verbage into Box99_print(#Box_99_print_count) Desc
          add 1 to #Box_99_print_count
         end-if
     end-if
    #endif

     #ifdef USE_TEMP_TABLE_FOR_OUTPUT
       let $qout_str = 'B US99' || rpad($blank,27,' ') || rpad($Box99_count,2,' ') ||
                                   rpad($Desc,35,' ') || rpad($blank,16,' ') || rpad($blank,25,' ')
       do Log-B-rec-data
     #else
      Write 1 FROM     $rectp:1
                       $blank:1
                       'US':2
                       '99':2           
                       $blank:1
                       $blank:10
                       $blank:16
                       $Box99_count:2
                       $Desc:35
                       $blank:16
                       $blank:25

       add 1 to #reccnt
       add 1 to #company_trailer_reccnt
     #endif
     add 1 to #B_REC_Total_Count
      
      !Now the Header line
      !--------------------
      add 1 to #Box99_count
      do Format-Number(#Box99_count, $Box99_count, '99')
      move  ' {BOX_14s_on_SUMMARY_HEADER}' to $Desc

      #ifdef BALANCE_TO_BOX1_PRINT
       if $SelectEmplid <> ''
         if (#Box_99_print_count < {MAX_BOX99_CODES})
          let $verbage = $desc
          put $verbage into Box99_print(#Box_99_print_count) Desc
          add 1 to #Box_99_print_count
         end-if
       end-if
      #endif

      #ifdef USE_TEMP_TABLE_FOR_OUTPUT
       let $qout_str = 'B US99' || rpad($blank,27,' ') || rpad($Box99_count,2,' ') ||
                                   rpad($Desc,35,' ') || rpad($blank,16,' ') || rpad($blank,25,' ')
       do Log-B-rec-data
      #else

       Write 1 FROM     $rectp:1
                       $blank:1
                       'US':2
                       '99':2           
                       $blank:1
                       $blank:10
                       $blank:16
                       $Box99_count:2
                       $Desc:35
                       $blank:16
                       $blank:25

        add 1 to #reccnt
        add 1 to #company_trailer_reccnt
      
      #endif
      add 1 to #B_REC_Total_Count

#endif
  
  move 0 to #m
  while #m < 37
   get $Box $Desc #Amt  from Box14(#m) Box Desc Namt
   if {BOX_14s_on_SUMMARY}                                    ! <--- TGP1  this may need to change for other clients

    add 1 to #Box99_count
    do Format-Number(#Box99_count, $Box99_count, '99')
    do Format-Number(#amt,$amt,$Fmt99)

    let $desc = ' ' || $desc
    #ifdef BALANCE_TO_BOX1_PRINT
     if $SelectEmplid <> ''
         if (#Box_99_print_count < {MAX_BOX99_CODES})
          let $verbage = $desc || $amt
          put $verbage into Box99_print(#Box_99_print_count) Desc
          add 1 to #Box_99_print_count
         end-if
     end-if
    #endif

    let $desc = substr($desc,1,35)
    #ifdef QUARTERLY_HISTORY
        let $BOX_str = 'B US99' || rpad($blank,27,' ') || rpad($Box99_count,2,' ') ||
                                    rpad($Desc,35,' ') || rpad($amt,16,' ') || rpad($blank,25,' ')
        do populate_ADP_QTR_HIST
    #endif

    #ifdef USE_TEMP_TABLE_FOR_OUTPUT
       let $qout_str = 'B US99' || rpad($blank,27,' ') || rpad($Box99_count,2,' ') ||
                                   rpad($Desc,35,' ') || rpad($amt,16,' ') || rpad($blank,25,' ')
       do Log-B-rec-data
    #else

    Write 1 FROM     $rectp:1
                     $blank:1
                     'US':2
                     '99':2           ! prior to 11/21/04 was ERN or DED..
                     $blank:1
                     $blank:10
                     $blank:16
                     $Box99_count:2
                     $Desc:35
                     $Amt:16
                     $blank:25

     add 1 to #reccnt
     add 1 to #company_trailer_reccnt

    #endif
    add 1 to #B_REC_Total_Count
  end-if

  add 1 to #m
 end-while

end-procedure
#endif


#ifdef BOX99_BALANCE_TO_BOX1_ROLLUP

begin-procedure build-box99-rollup

    let $build_box99_rollup_ern = ''
    let $build_box99_rollup_ded = ''

begin-select
CL99.COMPANY

   if $build_box99_rollup_ern = ''
       let $build_box99_rollup_ern = ' AND EB.COMPANY in (''' || &CL99.COMPANY || ''''
       let $build_box99_rollup_ded = ' AND DB.COMPANY in (''' || &CL99.COMPANY || ''''
   else
       let $build_box99_rollup_ern = $build_box99_rollup_ern || ',''' || &CL99.COMPANY || ''''
       let $build_box99_rollup_ded = $build_box99_rollup_ded || ',''' || &CL99.COMPANY || ''''
   end-if

   FROM  PS_W2_COMPANY CL99 {NOLOCK_SQL}
   #ifdef USE_INT_CRITERIA
    WHERE CL99.CALENDAR_YEAR  = int(\$RptYearZ\)
   #else
    WHERE CL99.CALENDAR_YEAR   = #RptYear
   #endif

     AND CL99.W2_REPORTING_CO = $A.W2_REPORTING_CO

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

    if $build_box99_rollup_ern <> ''
        let $build_box99_rollup_ern = $build_box99_rollup_ern || ')'
        let $build_box99_rollup_ded = $build_box99_rollup_ded || ')'
    end-if

end-procedure
#endif

begin-procedure Extract-Box99 !Earnings and Deduction Summary

!rollup to a W-2 reporting company .. either for all or for one W-2 reporting company
!------------------------------------------------------------------------------------
#ifdef BOX99_BALANCE_TO_BOX1_ROLLUP

  let $build_box99_rollup_ern = ' AND EB.COMPANY in (''' || $Current_COMPANY || ''')'
  let $build_box99_rollup_ded = ' AND DB.COMPANY in (''' || $Current_COMPANY || ''')'

  if rtrim('{BOX99_BALANCE_TO_BOX1_ROLLUP}',' ') = ''
    do build-box99-rollup
  else
    if rtrim('{BOX99_BALANCE_TO_BOX1_ROLLUP}',' ') =  $A.W2_REPORTING_CO
      do build-box99-rollup
    end-if
  end-if

#endif

 !populate the Box99 array with summary section (detailed earnings and deds)
 !---------------------------------------------------------------------------
 do Process-Earnings-Details
 do Process-Deductions-Details

end-procedure

#if {DEDUCTS_AND_EARNINGS_MODE} = 'BALANCE_TO_BOX1'
!***************************************************
begin-procedure Process-Box99

 let #earn_total_for_box1 = 0
 let #Box99_count = 0

 move '$$$,$$$,$$9.99mi' to $Fmt99

 #ifdef BALANCE_TO_BOX1_SORT_BY_AMOUNTS
   let #i = 0
   while (#i < #Box_99_rec_count) AND (#i < #max_Box99_in_spec)
      let #j = 0
      let #Amt = -999999999
      while (#j < #Box_99_rec_count) AND (#j < #max_Box99_in_spec)
        get $SDesc #SAmt $Ssum_type from Box99(#j) DESC NAMT SUM_TYPE           ! <------ need sort logic added ------- 20130111 reworked
        if substr($SDesc,1,1) = '+'
          if #SAmt > #Amt
            let #Amt = #Samt
            let $Desc = $SDesc
            let #Jmax = #j
          end-if
        end-if
        add 1 to #j
      end-while
      if #Amt > -999999999
         let #earn_total_for_box1 = #earn_total_for_box1 + #Amt
         put -999999999 into Box99(#Jmax) NAMT
         do Print-Box99-Balance-To-Box1  
      end-if
      add 1 to #i
   end-while
   let #i = 0
   while (#i < #Box_99_rec_count) AND (#i < #max_Box99_in_spec)
      let #j = 0
      let #Amt = -999999999
      while (#j < #Box_99_rec_count) AND (#j < #max_Box99_in_spec)
        get $SDesc #SAmt $Ssum_type from Box99(#j) DESC NAMT SUM_TYPE           ! <------ need sort logic added -------
        if substr($SDesc,1,1) = '-'
          if #SAmt > #Amt
            let #Amt = #Samt
            let $Desc = $SDesc
            let #Jmax = #j
          end-if
        end-if
        add 1 to #j
      end-while
      if #Amt > -999999999
        let #earn_total_for_box1 = #earn_total_for_box1 - #Amt
        put -999999999 into Box99(#Jmax) NAMT
        do Print-Box99-Balance-To-Box1  
      end-if
      add 1 to #i
   end-while
 #else
  let #i = 0
  while (#i < #Box_99_rec_count) AND (#i < #max_Box99_in_spec)
   get $Desc #Amt $sum_type from Box99(#i) DESC NAMT SUM_TYPE
   if #Amt <> 0
    if substr($Desc,1,1) = '+'
        let #earn_total_for_box1 = #earn_total_for_box1 + #Amt
    end-if
    if substr($Desc,1,1) = '-'
        let #earn_total_for_box1 = #earn_total_for_box1 - #Amt
    end-if
    do Print-Box99-Balance-To-Box1
   end-if
   add 1 to #i
  end-while
 #endif
 
   !---------------------
   !Box 1 mismatch error
   !---------------------
   if #earn_total_for_box1 <> #Box_01
     if (#Box1_Errors < {MAX_BOX1_ERRORS})
       put $Current_Company           into Box1_Errors(#Box1_Errors) Company
       put $Current_Emplid            into Box1_Errors(#Box1_Errors) Emplid
       put #Box_01                    into Box1_Errors(#Box1_Errors) Box1
       put #earn_total_for_box1       into Box1_Errors(#Box1_Errors) Total_for_box1
       add 1 to #Box1_Errors

     end-if
   end-if

   #ifdef General_Box99_error_enabled
    if #Box_99_rec_count > 27
     if (#Box1_Errors < {MAX_BOX1_ERRORS})

       do Format-Number(#Box_99_rec_count, $Box_99_rec_count, '999')
       let $General_Box99_warning = 'Warning: More than 27 BALANCE_TO_BOX1 records: Count = ' || $Box_99_rec_count
       put $Current_Company           into Box1_Errors(#Box1_Errors) Company
       put $Current_Emplid            into Box1_Errors(#Box1_Errors) Emplid
       put #Box_01                    into Box1_Errors(#Box1_Errors) Box1
       put #earn_total_for_box1       into Box1_Errors(#Box1_Errors) Total_for_box1
       put $General_Box99_warning     into Box1_Errors(#Box1_Errors) General_Box99_error

       add 1 to #Box1_Errors
     end-if
    end-if
   #endif
   
   #ifdef BALANCE_TO_BOX1_SUMMARY_LINE !For Philips

     !Blank line first
     !----------------
      add 1 to #Box99_count
      do Format-Number(#Box99_count, $Box99_count, '99')

      move  '' to $Desc
      let $Desc = rpad($Desc,35,' ')

      #ifdef BALANCE_TO_BOX1_PRINT
        if $SelectEmplid <> ''
         if (#Box_99_print_count < {MAX_BOX99_CODES})
          put ' '  into Box99_print(#Box_99_print_count) amt
          put ' '  into Box99_print(#Box_99_print_count) Desc
          add 1 to #Box_99_print_count
         end-if
        end-if
      #endif

      let $rectp = 'B'

      let $desc = substr($desc,1,35)
      #ifdef QUARTERLY_HISTORY
          let $BOX_str = 'B US99' || rpad($blank,27,' ') || rpad($Box99_count,2,' ') ||
                                     rpad($Desc,35,' ') || rpad($amt,16,' ') || rpad($blank,25,' ')
          do populate_ADP_QTR_HIST
      #endif
   
      #ifdef USE_TEMP_TABLE_FOR_OUTPUT
        let $qout_str = 'B US99' || rpad($blank,27,' ') || rpad($Box99_count,2,' ') ||
                                    rpad($Desc,35,' ') || rpad($blank,16,' ') || rpad($blank,25,' ')
        do Log-B-rec-data
      #else

      Write 1 FROM     $rectp:1
                       $blank:1
                       'US':2
                       '99':2           ! prior to 11/21/04 was ERN or DED..
                       $blank:1
                       $blank:10
                       $blank:16
                       $Box99_count:2
                       $Desc:35
                       $blank:16
                       $blank:25

       add 1 to #reccnt
       add 1 to #company_trailer_reccnt

       #endif
       add 1 to #B_REC_Total_Count


      !Now the Total line
      !------------------
      do Format-Number(#earn_total_for_box1,$amt1,$Fmt99)   ! NET: earn_total_for_box1 changed 11/11/10
      do Format-Number(#Box_01,$amt2,$Fmt99)                ! ACTUAL Box 01: Box_01

      let $verbage = rpad(' Box 01 - Net Earn & Deds =',35,' ')   || $amt1                  ! || ', Box 01 = ' || $amt2 

      #if {SITE_ID} = 'CHB1'
       let $verbage = rpad(' Box 01 - Total Fed Wages =',35,' ') || $amt1                   ! || ', Box 01 = ' || $amt2 
      #else
       let $verbage = rpad(' Box 01 - Net Earn & Deds =',35,' ')  || $amt1                  ! || ', Box 01 = ' || $amt2 
      #endif

      #ifdef BALANCE_TO_BOX1_PRINT
        if $SelectEmplid <> ''
         if (#Box_99_print_count < {MAX_BOX99_CODES})
          put $verbage into Box99_print(#Box_99_print_count) Desc
          add 1 to #Box_99_print_count
         end-if
        end-if
      #endif

      add 1 to #Box99_count
      do Format-Number(#Box99_count, $Box99_count, '99')
      let $verbage = rpad($verbage,76,' ')
      let $rectp = 'B'

      let $verbage = substr($verbage,1,76)
      #ifdef QUARTERLY_HISTORY
        let $box_str = 'B US99' || rpad($blank,27,' ') || rpad($Box99_count,2,' ') ||
                                    rpad($verbage,76,' ') 
          do populate_ADP_QTR_HIST
      #endif

      #ifdef USE_TEMP_TABLE_FOR_OUTPUT
        let $qout_str = 'B US99' || rpad($blank,27,' ') || rpad($Box99_count,2,' ') ||
                                    rpad($verbage,76,' ') 
        do Log-B-rec-data
      #else

      Write 1 FROM     $rectp:1
                       $blank:1
                       'US':2
                       '99':2           ! prior to 11/21/04 was ERN or DED..
                       $blank:1
                       $blank:10
                       $blank:16
                       $Box99_count:2
                       $verbage:76

       add 1 to #reccnt
       add 1 to #company_trailer_reccnt

     #endif
     add 1 to #B_REC_Total_Count

  #endif

  #ifdef BOX_14s_on_SUMMARY
     do Process-Box14-as-Box99
  #endif

end-procedure

begin-procedure Print-Box99-Balance-To-Box1

   add 1 to #Box99_count
   do Format-Number(#Box99_count, $Box99_count, '99')
   do Format-Number(#amt,$amt,$Fmt99)

   let $rectp = 'B'

   #ifdef BALANCE_TO_BOX1_PRINT
     if $SelectEmplid <> ''
         if (#Box_99_print_count < {MAX_BOX99_CODES})
          let $verbage = rpad($desc,35,' ') || $amt
          put $verbage into Box99_print(#Box_99_print_count) Desc
          add 1 to #Box_99_print_count
         end-if
     end-if
   #endif

   let $desc = substr($desc,1,35)
   #ifdef QUARTERLY_HISTORY
        let $BOX_str = 'B US99' || rpad($blank,27,' ') || rpad($Box99_count,2,' ') ||
                                    rpad($Desc,35,' ') || rpad($amt,16,' ') || rpad($blank,25,' ')
         do populate_ADP_QTR_HIST
   #endif

   #ifdef USE_TEMP_TABLE_FOR_OUTPUT
       let $qout_str = 'B US99' || rpad($blank,27,' ') || rpad($Box99_count,2,' ') ||
                                   rpad($Desc,35,' ') || rpad($amt,16,' ') || rpad($blank,25,' ')
       do Log-B-rec-data
   #else

   Write 1 FROM     $rectp:1
                    $blank:1
                    'US':2
                    '99':2           ! prior to 11/21/04 was ERN or DED..
                    $blank:1
                    $blank:10
                    $blank:16
                    $Box99_count:2
                    $Desc:35
                    $Amt:16
                    $blank:25

    add 1 to #reccnt
    add 1 to #company_trailer_reccnt

   #endif
   add 1 to #B_REC_Total_Count

end-procedure
#endif

begin-procedure Process-Earnings-Details

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

begin-SELECT
EB.COMPANY
EB.EMPLID
EB.GRS_YTD
EB.ERNCD
EB.BALANCE_PERIOD
EB.BALANCE_QTR

  move &EB.COMPANY to $Company
  move &EB.EMPLID  to $EmplID
  move &EB.Grs_YTD to #Amount_Ern
  let $Erncd = rtrim(&EB.ERNCD,' ')   !11/7/00 fix

  #if {SITE_ID} = 'INT1'
    if $Erncd = 'DBP'
      let $Erncd = 'DBL'
    end-if
  #endif

  let #Amount_Ern = #Amount_Ern

  !only lookup the ERNCD if we have to
  !-----------------------------------
  let #i = 0
  let #earning_found = 0
  while (#i < #Earning_Lookup_Count)
    get $E from EarningsNames(#i) Erncd_Lookup
    let $E_Trimmed = rtrim($E,' ')
    if $E_Trimmed = $Erncd
      let #earning_found = 1
      get $EarningsName -
          $EarningsType -
        from EarningsNames(#i) -
          Erncd_Name_Lookup -
          Erncd_Type

      break
    end-if
    add 1 to #i
  end-while

  if #earning_found = 0

    #if {PeopleSoft_Version} >= '8.8'
      do Get-Earnings-Name      !Get the $EarningsName
    #endif
    
    #if {DEDUCTS_AND_EARNINGS_MODE} = 'BALANCE_TO_BOX1'
      do Get-Earnings-Type
    #else
      move ' ' to $EarningsType
    #endif

    if #Earning_Lookup_Count < {MAX_EARNINGS_CODES}
      put $EarningsName -
          $Erncd -
          $EarningsType -
        into EarningsNames(#Earning_Lookup_Count) -
           Erncd_Name_Lookup -
           Erncd_Lookup -
           Erncd_Type

      add 1 to #Earning_Lookup_Count
    else
       show  'Warning: EarningsNames Array is too small'
    end-if

  end-if

  let $Include_Earnings = 't'
  #if {DEDUCTS_AND_EARNINGS_MODE} = 'BALANCE_TO_BOX1'
     if $EarningsType <> 'S'         !S Means Subject to taxes, otherwise bail on this earnings
       let $Include_Earnings = 'f'
     else
       let $EarningsName = '+ ' || $EarningsName
     end-if
  #endif

  if $Include_Earnings = 't'

     if $SelectEmplid <> ''
      #debugd show 'Process-Earnings-Details code ' $Erncd ' type ' $EarningsType ' name ' $EarningsName ' period ' &EB.BALANCE_PERIOD ' amt ' #Amount_ern edit '999,999,999.99'
     end-if
     !---------------------------------------
     ! Custom grouping of earnings codes here
     !---------------------------------------
     #if {SITE_ID} = 'SCK1'
       evaluate $Erncd
        when = 'NPT'
        when = 'REG'
          let $EarningsName = '+ Regular'
          break
        when = 'PTH'
        when = 'PTS'
          let $EarningsName = '+ Personal Time Off'
          break
        when = 'STO'
        when = 'STS'
          let $EarningsName = '+ Sick Time Off'
          break
        when = 'VBH'
        when = 'VBP'
        when = 'VBS'
        when = 'VCH'
        when = 'VPO'
        when = 'VCS'
          let $EarningsName = '+ Vacation'
          break
        when-other
         break
       end-evaluate
     #endif
     !------------------------------------------
     let #ec = 0
     let $new_earnings = 't'
     while #ec < #Box_99_rec_count
       get $ec from Box99(#ec) Desc
       if rtrim($ec,' ') = rtrim($EarningsName,' ')
         let $new_earnings = 'f'
         ARRAY-ADD #Amount_ern   to Box99(#ec) Namt
         break
       end-if
       add 1 to #ec
     end-while
     if $new_earnings = 't'
      if (#Box_99_rec_count < {MAX_BOX99_CODES})
       put #Amount_ern   -
           $EarningsName  -
           'ERN' -
       into Box99(#Box_99_rec_count) -
           Namt -
           Desc -
           Sum_Type

       add 1 to #Box_99_rec_count
      else
       #debugd show 'Too many Box99 Entries  for emplid ' $Current_Emplid
      end-if
     end-if

  end-if     !end-if for $Include_Earnings or not

FROM  PS_EARNINGS_BAL{WAREHOUSE_SUFFIX} EB {NOLOCK_SQL}
WHERE EB.EMPLID            = $Current_Emplid
  #ifdef BOX99_BALANCE_TO_BOX1_ROLLUP
   #ifdef MVS
     \$build_box99_rollup_ern\
   #else
     [$build_box99_rollup_ern]
   #endif
  #else
   AND EB.COMPANY           = $Current_Company
  #endif
  AND EB.BALANCE_ID        = $Calendar_Year_Id
   #ifdef USE_INT_CRITERIA
     AND EB.BALANCE_YEAR   = int(\$RptYearZ\)
   #else
     AND EB.BALANCE_YEAR   = #RptYear
   #endif
  AND EB.SPCL_BALANCE      <> 'Y'
  AND EB.GRS_YTD           <> 0
  AND EB.BALANCE_PERIOD           =
       (SELECT MAX(BALANCE_PERIOD)
        FROM   PS_EARNINGS_BAL{WAREHOUSE_SUFFIX} {NOLOCK_SQL}
        WHERE  EMPLID            = EB.EMPLID
          AND  COMPANY           = EB.COMPANY
          AND  BALANCE_ID        = EB.BALANCE_ID
          #if {PeopleSoft_Version} >= '8'
           AND  {emp_rec}         = EB.{emp_rec}
          #endif
          AND  SPCL_BALANCE      = EB.SPCL_BALANCE
          AND  ERNCD             = EB.ERNCD
          AND  BALANCE_YEAR      = EB.BALANCE_YEAR
          #ifdef USE_INT_CRITERIA
            AND  BALANCE_PERIOD   <= int(\$RptMonthZ\))
          #else
           AND  BALANCE_PERIOD    <= #RptMonth)
          #endif

  ORDER BY EB.ERNCD

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Process-Earnings-Details' to $debug-proc1
     move 'PS_EARNINGS_BAL'    to $debug-table1
     do log-delta-time
  #endif

end-procedure

begin-procedure Get-Earnings-Type

  move ' ' to $EarningsType

  #ifdef show_selects
    #debugd show 'Get-Earnings-Type'
  #endif

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
begin-select
ET303.SUBJECT_FWT
ET303.SUBJECT_FICA
ET303.ADD_GROSS
ET303.DESCRSHORT

  let $Subject_FWT  = &ET303.SUBJECT_FWT
  let $Subject_FICA = &ET303.SUBJECT_FICA
  let $ADD_GROSS    = &ET303.ADD_GROSS
  let $EarningsDescr = &ET303.DESCRSHORT

  if &ET303.SUBJECT_FWT  = 'Y'          !Check on this: OR &ET303.SUBJECT_FICA = 'Y' OR &ET303.SUBJECT_FUT  = 'Y'
      move 'S' to $EarningsType
  end-if

FROM  PS_EARNINGS_TBL ET303 {NOLOCK_SQL}
  WHERE ET303.ERNCD      = $Erncd
    AND ET303.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_EARNINGS_TBL {NOLOCK_SQL}
       WHERE  ERNCD           = ET303.ERNCD
         AND  EFFDT          <= $AsOfDate)

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select
  #ifdef show_selects
    #debugd show '...done'
  #endif

end-procedure

begin-procedure Process-Deductions-Details

  #ifdef show_selects
    #debugd show 'Process-Deductions-Details'
  #endif
 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

begin-SELECT
DB.COMPANY
DB.EMPLID
DB.DED_YTD
DB.DEDCD
DB.DED_CLASS
DB.PLAN_TYPE
DB.BENEFIT_PLAN
DB.BALANCE_PERIOD

  move &DB.COMPANY to $Company
  move &DB.EMPLID  to $EmplID
  move &DB.DED_YTD to #Amount_Ded

  let  $Dedcd = rtrim(&DB.DEDCD,' ')           !11/7/00 fix (for MVS users)
  let  $Plan_Type = rtrim(&DB.PLAN_TYPE,' ')
  let  $ded_class = rtrim(&DB.DED_CLASS,' ')

  let #Amount_Ded = #Amount_Ded

  !only lookup the DEDCD if we have to
  !-----------------------------------
  let #i = 0
  let #Deduction_found = 0
  while (#i < #Deduction_Lookup_Count)
    get $D -
        $P -
        $C -
     from DeductionNames(#i) -
       Dedcd_Lookup -
       Plan_Type -
       Ded_Class

    let $D_Trimmed = rtrim($D,' ')
    let $P_Trimmed = rtrim($P,' ')
    let $C_Trimmed = rtrim($C,' ')
    if $D_Trimmed = $Dedcd and $P_trimmed = $Plan_Type and $c_trimmed = $Ded_Class
      let #Deduction_found = 1
      get $DeductionName from DeductionNames(#i) Dedcd_Name_Lookup
      break
    end-if
    add 1 to #i
  end-while

  if #deduction_found = 0
    do Get-Deduction-Name      !Get the $DeductionName
    if #Deduction_Lookup_Count < {MAX_DEDUCTIONS_CODES}
      put $DeductionName -
          $Dedcd -
          $Plan_Type -
          $Ded_Class -
      into DeductionNames(#Deduction_Lookup_Count) -
          Dedcd_Name_Lookup -
          Dedcd_Lookup -
          Plan_type -
          Ded_Class

      add 1 to #Deduction_Lookup_Count
    else
       show  'Warning: DeductionNames Array is too small'
    end-if
  end-if

   let $Include_Deduction = 't'

   #if {DEDUCTS_AND_EARNINGS_MODE} = 'BALANCE_TO_BOX1'

     let $Include_Deduction = 'f'
     if $Ded_Class = 'B'         !B Means Before Tax Deduction, otherwise bail on this Deduction
       let $Include_Deduction = 't'
       let $DeductionName = '- ' || $DeductionName
     end-if
     if $Ded_Class = 'T'         !T Means this deduction is actually an ADDITION to earnings
       let $Include_Deduction = 't'
       let $DeductionName = '+ ' || $DeductionName
     end-if
  #endif

  if $Include_Deduction = 't'

     let #ec = 0
     let $new_deducts = 't'
     while #ec < #Box_99_rec_count
       get $ec from Box99(#ec) Desc
       if rtrim($ec,' ') = rtrim($DeductionName,' ')
         let $new_deducts = 'f'
         ARRAY-ADD #Amount_ded   to Box99(#ec) Namt
         break
       end-if
       add 1 to #ec
     end-while

     if $new_deducts = 't'
      if (#Box_99_rec_count < {MAX_BOX99_CODES})
       put #Amount_ded -
           $DeductionName -
           'DED' -
       into Box99(#Box_99_rec_count) -
            Namt -
            Desc -
            Sum_Type

       add 1 to #Box_99_rec_count
      else
       #debugd show 'Too many Box99 Entries  for emplid ' $Current_Emplid
      end-if
     end-if

  end-if

FROM  PS_DEDUCTION_BAL{WAREHOUSE_SUFFIX} DB {NOLOCK_SQL}
  WHERE DB.EMPLID            = $Current_Emplid
  #ifdef BOX99_BALANCE_TO_BOX1_ROLLUP
   #ifdef MVS
     \$build_box99_rollup_ded\
   #else
     [$build_box99_rollup_ded]
   #endif
  #else
   AND DB.COMPANY           = $Current_Company
  #endif
  AND DB.BALANCE_ID        = $Calendar_Year_Id
  #if {DEDUCTS_AND_EARNINGS_MODE} = 'BALANCE_TO_BOX1'
    AND DB.DED_CLASS in ('B','T')
  #endif
   #ifdef USE_INT_CRITERIA
     AND DB.BALANCE_YEAR   = int(\$RptYearZ\)
   #else
     AND DB.BALANCE_YEAR   = #RptYear
   #endif
     AND DB.BALANCE_PERIOD           =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_DEDUCTION_BAL{WAREHOUSE_SUFFIX} {NOLOCK_SQL}
       WHERE  EMPLID            = DB.EMPLID
         AND  BALANCE_ID        = DB.BALANCE_ID
         AND  BALANCE_YEAR      = DB.BALANCE_YEAR
         #if {Peoplesoft_Version} >= '8'                 !12/3/04
         AND  BENEFIT_RCD_NBR   = DB.BENEFIT_RCD_NBR
         #endif
         AND  PLAN_TYPE         = DB.PLAN_TYPE
         AND  BENEFIT_PLAN      = DB.BENEFIT_PLAN
         AND  DED_CLASS         = DB.DED_CLASS
         AND  COMPANY           = DB.COMPANY
         AND  DEDCD             = DB.DEDCD
         #ifdef USE_INT_CRITERIA
           AND  BALANCE_PERIOD   <= int(\$RptMonthZ\))
         #else
          AND  BALANCE_PERIOD    <= #RptMonth)
         #endif
         
    AND DB.DED_YTD <> 0

    ORDER by DB.DEDCD

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Process-Deductions-Details' to $debug-proc1
     move 'PS_DEDUCTION_BAL'    to $debug-table1
     do log-delta-time
  #endif

  #ifdef show_selects
    #debugd show '...done'
  #endif

end-procedure

begin-procedure Get-Deduction-Name       !need to verify that DED_CLASS = 'B' means BEFORE_TAX Deduction
  
  move ' ' to $DeductionName
  move ' ' to $DeductionAbbrv

  #ifdef show_selects
    #debugd show 'Get-Deduction-Name'
  #endif

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
begin-SELECT
DT4.DESCRSHORT
DT4.DESCR

  let $DeductionAbbrv = rtrim(&DT4.DESCRSHORT,' ')
  let $DeductionName = rtrim(&DT4.DESCR,' ')

FROM  PS_DEDUCTION_TBL DT4 {NOLOCK_SQL}
WHERE PLAN_TYPE = $Plan_Type
  AND DEDCD     = $DedCd
  AND EFFDT     = (SELECT MAX(EFFDT)
    FROM   PS_DEDUCTION_TBL {NOLOCK_SQL}
    WHERE  PLAN_TYPE        = DT4.PLAN_TYPE
      AND  DEDCD            = DT4.DEDCD
      AND  EFFDT           <= $AsOfDate)
#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef show_selects
    #debugd show '...done'
  #endif

end-procedure

#ifdef BALANCE_TO_BOX1_PRINT
begin-procedure print-w2-summary

  let $ReportTitle  = 'ADP Employment Tax, W-2 Federal Taxable Wage Summary:  ' || $AsOfDate
  move '$$$,$$$,$$9.99mi' to $Fmtb1

  if #Box_99_print_count > 0
    let #Box1_cnt = 0
    print 'Box99 / IX: Summary section of W-2. Emplid: '  (+2,1)
    print $Current_Emplid ()
    print ' '                              (+1,1)
    while #Box1_cnt < #Box_99_print_count
      get $desc from Box99_print(#Box1_cnt) Desc
      add 1 to #Box1_cnt
      print #Box1_cnt (+1,1) edit 99
      print $Desc     (,10)
    end-while
  end-if

  let #Box_99_print_count = 0
  clear-array name=Box99_print
  New-Page

end-procedure
#endif

#if {DEDUCTS_AND_EARNINGS_MODE} = 'BALANCE_TO_BOX1'
begin-procedure Print-Box1-Errors

 let $ReportTitle  = 'W-2 Extract Federal Taxable Wage, Box 01, Data & Warnings:  ' || $AsOfDate
 move '$$$,$$$,$$9.99mi' to $Fmtb1

 #debugd show 'W-2 Extract Box 01 Data and Warnings: Box1_Errors = ' #Box1_Errors ', Box_99_print_count = ' #Box_99_print_count

 if #Box1_Errors >  0
   print 'Following are the Associates with Box1 Wages <> Earnings and Deductions Net...' (+2,4)
   print 'Company  Emplid            Box-1-Wages       Net-Earnings-&-Deductions     Delta(Box1-Net)'  (+2,1)
   print ' ' (+1,1)

   let #i=0
   while (#i < #Box1_Errors)

      get $C             from Box1_Errors(#i) Company
      get $E             from Box1_Errors(#i) Emplid
      get #b             from Box1_Errors(#i) Box1
      get #t             from Box1_Errors(#i) Total_for_box1
      #ifdef General_Box99_error_enabled
        get $gen_Box99_err from Box1_Errors(#i) General_Box99_error          !needs a new adp303.sqc as this table is created there
      #endif

      do Format-Number(#b, $b, $Fmtb1)
      do Format-Number(#t, $t, $Fmtb1)
      let #d = #b - #t
      do Format-Number(#d, $d, $Fmtb1)

      if #current-line > 56
        New-Page
        #ifdef General_Box99_error_enabled
         print 'Company  Emplid            Box-1-Wages       Net-Earnings-&-Deductions     Delta(Box1-Net)    General-Warning'  (+2,1)
        #else
         print 'Company  Emplid            Box-1-Wages       Net-Earnings-&-Deductions     Delta(Box1-Net)'  (+2,1)
        #endif
        print ' '                                             (+1,1)
      end-if

      print $C                 (+1,1)
      print $E                 (,10)
      print $b                 (,25)
      print $t                 (,46)
      print $d                 (,76)
      #ifdef General_Box99_error_enabled
      print $gen_Box99_err     (,95)
      #endif
      add 1 to #i

    end-while

  else
    print 'ALL Box 1 Totals balance to Earnings and Deductions Net.'  (+2,4)
    print '-------------------------------------------------------.'  (+1,4)
  end-if

  New-Page

end-procedure
#endif

!***************************************************
begin-procedure Get-Box-Text

  !only lookup the Box14 Text if we have to
  !----------------------------------------
  let #i = 0
  let #box14_found = 0
  while (#i < #Box14_Lookup_Count)
    get $B from Box14Names(#i) Box14_Lookup
    let $B_Trimmed = rtrim($B,' ')
    if $B_Trimmed = $Box
      let #Box14_found = 1
      get $Box_shortdescr from Box14Names(#i) Box14_Name_Lookup
      break
    end-if
    add 1 to #i
  end-while

  if #Box14_found = 0
    let $Taxform_lookup = 'W'
    do Lookup-Box-Text
    if #Box14_Lookup_Count < {MAX_BOX14_CODES}
      put $Box_shortdescr into Box14Names(#Box14_Lookup_Count) Box14_Name_Lookup
      put $Box into Box14Names(#Box14_Lookup_Count) Box14_Lookup
      add 1 to #Box14_Lookup_Count
    else
       show  'Warning: Box14Names Array is too small'
    end-if

  end-if

end-procedure

!***************************************************
begin-procedure Lookup-Box-Text

  let $Box_shortdescr = ' '
  let $Box_longdescr = ' '
 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
begin-SELECT
P.DESCRSHORT
P.DESCR

  let $Box_shortdescr = rtrim(&P.DESCRSHORT,' ')
  let $Box_longdescr = rtrim(&P.DESCR,' ')

FROM  PS_TAXFORM_BOX P {NOLOCK_SQL}
WHERE P.TAXFORM_ID = $Taxform_lookup
  AND P.BOX        = $Box
  AND P.EFFDT      =
      (SELECT MAX(EFFDT)
  FROM   PS_TAXFORM_BOX   {NOLOCK_SQL}                 !may be able to use $Max_effdt
    WHERE   TAXFORM_ID = P.TAXFORM_ID
       AND  BOX = P.BOX
       AND  EFFDT  <= $AsOfDate)

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

   if rtrim($Box_shortdescr,' ') = ''
     let $Box_shortdescr = 'Box: ' || $Box
     #debugd show 'No Box 14 Description, Box             '  $Box
     #debugd show 'See PS_TAXFORM_BOX Description for Box ' $Box
   end-if

end-procedure

!***************************************************
begin-procedure Get-Box-Description-update-B-rec-totals

  let $desc = ''

  let $Taxform_lookup = $TAXFORM_ID
  do Lookup-Box-Text  !returns $Box_longdescr, $Box_shortdescr
  let $Desc = $Box_shortdescr

  if $TAXFORM_ID <> 'P'

    evaluate $Box                 !Boxs 07, 08, 10..12V, 14x are valid ONLY for taxform W
      when  = $YE_SS_Tips
       array-add #Amount to Company_Totals(#cur_tot) C_07
       break
      when  = $YE_Alloc_Tips
       array-add #Amount to Company_Totals(#cur_tot) C_08
       break
      when  = $YE_Dep_Care
       array-add #Amount to Company_Totals(#cur_tot) C_10
       let #Current_10 = #amount
       break
      when  = $YE_Non_Qual_457
       array-add #Amount to Company_Totals(#cur_tot) C_11B
       break
      when  = $YE_Non_Qual_457_Y
       array-add #Amount to Company_Totals(#cur_tot) C_11A
       break
      when  = $YE_Non_Qual_457_N
       array-add #Amount to Company_Totals(#cur_tot) C_11B
       break
      when  = $YE_Uncoll_SS_Tax_On_Tips
       array-add #Amount to Company_Totals(#cur_tot) C_12A
       break
      when  = $YE_Uncoll_Med_Tax_On_Tips
       array-add #Amount to Company_Totals(#cur_tot) C_12B
       break
      when  = $YE_Group_Term_Life
       array-add #Amount to Company_Totals(#cur_tot) C_12C
       let #Current_12C = #amount
       break
      when  = $YE_401K
       array-add #Amount to Company_Totals(#cur_tot) C_12D
       let #Current_12D = #amount
       break
      when  = $YE_403B
       array-add #Amount to Company_Totals(#cur_tot) C_12E
       break
      when  = $YE_408K6
       array-add #Amount to Company_Totals(#cur_tot) C_12F
       break
      when  = $YE_457B
       array-add #Amount to Company_Totals(#cur_tot) C_12G
       break
      when  = $YE_501C18D
       array-add #Amount to Company_Totals(#cur_tot) C_12H
       break
      when  = $YE_Sick_Pay
       array-add #Amount to Company_Totals(#cur_tot) C_12J
       break
      when  = $YE_Excise_Tax
       array-add #Amount to Company_Totals(#cur_tot) C_12K
       break
      when  = $YE_Business_Exp
       array-add #Amount to Company_Totals(#cur_tot) C_12L
       let #Current_12L = #amount
       break
      when  = $YE_Uncoll_SS_Tax_GTL
       array-add #Amount to Company_Totals(#cur_tot) C_12M
       break
      when  = $YE_Uncoll_Med_Tax_GTL
       array-add #Amount to Company_Totals(#cur_tot) C_12N
       break
      when  = $YE_Excl_Moving_Exp
       array-add #Amount to Company_Totals(#cur_tot) C_12P
       break
      when  = $YE_Basic_Qtrs_and_Subsist
       array-add #Amount to Company_Totals(#cur_tot) C_12Q
       break
      when  = $YE_Med_Svgs_Acct
       array-add #Amount to Company_Totals(#cur_tot) C_12R
       let #Current_12R = #amount
       break
      when  = $YE_408P_Simple_Retirement
       array-add #Amount to Company_Totals(#cur_tot) C_12S
       break
      when  = $YE_Adoption_Exp
       array-add #Amount to Company_Totals(#cur_tot) C_12T
       break
      when  = $YE_NonStatutory_Stock_Opt
       array-add #Amount to Company_Totals(#cur_tot) C_12V
       break

      when  = $YE_Health_Savings_Acct
       array-add #Amount to Company_Totals(#cur_tot) C_12W
       break

      when  = $YE_deferral_409a
       array-add #Amount to Company_Totals(#cur_tot) C_12Y
       break

      when  = $YE_income_409a
       array-add #Amount to Company_Totals(#cur_tot) C_12Z
       break

      when  = $YE_ROTH_401K
       array-add #Amount to Company_Totals(#cur_tot) C_12AA
       break

      when  = $YE_ROTH_403B
       array-add #Amount to Company_Totals(#cur_tot) C_12BB
       break

      #ifdef GENERATE_BOX12CC
      when  = $Hire_Exempt_Wages
       array-add #Amount to Company_Totals(#cur_tot) C_12CC
       break
      #endif
      
      when  = $YE_ER_HEALTH  !12DD
       array-add #Amount to Company_Totals(#cur_tot) C_12DD
       break
      when  = $YE_457B_ROTH  !12EE
       array-add #Amount to Company_Totals(#cur_tot) C_12EE
       break

      when  = $YE_State_Wages
       array-add #Amount to Company_Totals(#cur_tot) C_16
       break
      when  = $YE_State_Tax
       array-add #Amount to Company_Totals(#cur_tot) C_17
       break
      when  = $YE_Local_Wages
       array-add #Amount to Company_Totals(#cur_tot) C_18
       break
      when  = $YE_Local_Tax
       array-add #Amount to Company_Totals(#cur_tot) C_19
       break
      when-other
     break
    end-evaluate

  else  !Puerto Rico

    evaluate $Box

      when  = $YE_Cost_Pension_Annuity
       if #RptYear <= 2013
        array-add #Amount to PR_Totals(#cur_tot) C_06
       end-if
       break
      when  = $ER_Sponsored_Hlth_INS
       if #RptYear <= 2013
         array-add #Amount to PR_Totals(#cur_tot) C_06A
       else
         array-add #Amount to PR_Totals(#cur_tot) C_05
       end-if
       break
      when  = $EE_Charitable_Contribution
       if #RptYear <= 2013
         array-add #Amount to PR_Totals(#cur_tot) C_06B
       else
         array-add #Amount to PR_Totals(#cur_tot) C_06
       end-if
       break

      when  = $YE_Wages                                       !<---- check this out
       array-add #Amount to PR_Totals(#cur_tot) C_07
       break
      when  = $YE_Commissions
       array-add #Amount to PR_Totals(#cur_tot) C_08
       break
      when  = $YE_Allowance
       array-add #Amount to PR_Totals(#cur_tot) C_09
       break
      when  = $YE_Tips
       array-add #Amount to PR_Totals(#cur_tot) C_10        !note PR Box12 = 8+9+10+11
       break
      when  = $YE_Total_PR_Wages                                       !<---- check this out
       array-add #Amount to PR_Totals(#cur_tot) C_11        !note PR Box12 = 8+9+10+11
       break
      when  = $YE_Reimbursed_Expense
       array-add #Amount to PR_Totals(#cur_tot) C_12
       break
      when  = $YE_Tax_Withheld                                       !<---- check this out
       array-add #Amount to PR_Totals(#cur_tot) C_13
       break
      when  = $YE_Retire_Fund
       array-add #Amount to PR_Totals(#cur_tot) C_14
       break
      when  = $YE_CODA_Plans
       array-add #Amount to PR_Totals(#cur_tot) C_15
       break
      when = $YE_Salary_Act_324
       array-add #Amount to PR_Totals(#cur_tot) C_16
       break
      when  = $YE_Save_and_Dup
       if #RptYear < 2014
         array-add #Amount to PR_Totals(#cur_tot) C_16A
       else
         array-add #Amount to PR_Totals(#cur_tot) C_16B
       end-if
       break
      when  = $YE_SS_Wages
       array-add #Amount to PR_Totals(#cur_tot) C_17
       break
      when  = $YE_SS_Tax
       array-add #Amount to PR_Totals(#cur_tot) C_18
       break
      when  = $YE_Med_Wages
       array-add #Amount to PR_Totals(#cur_tot) C_19
       break
      when  = $YE_Med_Tax
       array-add #Amount to PR_Totals(#cur_tot) C_20
       break
      when  = $YE_SS_Tips
       array-add #Amount to PR_Totals(#cur_tot) C_21
       break
      when  = $YE_SS_Tax_Tips
       array-add #Amount to PR_Totals(#cur_tot) C_22
       break
      when  = $YE_Med_Tax_Tips
       array-add #Amount to PR_Totals(#cur_tot) C_23
       break
      when-other
     break
    end-evaluate

    #ifdef PROCESS_PR_BOX16E
     if $Box = '16E' and #RptYear >= 2014
       array-add #Amount to PR_Totals(#cur_tot) C_16
     end-if
    #endif

 end-if

end-procedure

begin-procedure update-grand-totals

   array-add #C_01 #C_02  #C_03  #C_04  #C_05  #C_06  #C_07  #C_09  #C_08  #C_10  #C_11A #C_11B #C_12A #C_12B #C_12C #C_12D #C_12E #C_12F #C_12G 
   #C_12H #C_12J #C_12K #C_12L #C_12M #C_12N #C_12P #C_12Q #C_12R #C_12S #C_12T #C_12V #C_12W #C_12Y #C_12Z #C_12AA #C_12BB #C_12CC #C_12DD #C_12EE
   #C_14 #C_16  #C_17  #C_18  #C_19   
   TO Company_totals(#GrandInx)  
       C_01 C_02 C_03 C_04 C_05 C_06 C_07 C_09 C_08 C_10 C_11A C_11B C_12A C_12B C_12C C_12D C_12E C_12F C_12G 
       C_12H C_12J C_12K C_12L C_12M C_12N C_12P C_12Q C_12R C_12S C_12T C_12V C_12W C_12Y C_12Z C_12AA C_12BB C_12CC C_12DD C_12EE 
       C_14 C_16 C_17 C_18 C_19

end-procedure

begin-procedure update-fein-totals

     array-add #C_01 #C_02 #C_03 #C_04 #C_05 #C_06 #C_07 #C_09 #C_08 #C_10 #C_11A #C_11B #C_12A #C_12B #C_12C #C_12D #C_12E #C_12F #C_12G 
               #C_12H #C_12J #C_12K #C_12L #C_12M #C_12N #C_12P #C_12Q #C_12R #C_12S #C_12T #C_12V #C_12W #C_12Y #C_12Z #C_12AA
               #C_12BB #C_12CC #C_12DD #C_12EE #C_14 #C_16 #C_17 #C_18 #C_19 
    TO Company_totals(#FEINInx) -
       C_01 C_02 C_03 C_04 C_05 C_06 C_07 C_09 C_08 C_10 C_11A C_11B C_12A C_12B C_12C C_12D C_12E C_12F C_12G 
       C_12H C_12J C_12K C_12L C_12M C_12N C_12P C_12Q C_12R C_12S C_12T C_12V C_12W C_12Y C_12Z C_12AA C_12BB C_12CC C_12DD C_12EE C_14 C_16 C_17 C_18 C_19

end-procedure

! ***************** Report Section ***************************

begin-procedure Print-Company-Recap

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

     #debugd show ' '
     #debugd show ' *** Print-Company-Recap, for #tot = ' #Tot

    ! Totals indexes
    ! ---------------------
    !let #DomesticInx = 0
    !let #ExpatInx    = 1
    !let #FEINInx     = 2
    !let #GrandInx    = 3

    let #Current_count = 0

    !Get the totals requested
    !-------------------------

    get #C_01 #C_02 #C_03 #C_04 #C_05 #C_06 #C_07 #C_09 #C_08 #C_10 #C_11A #C_11B #C_12A #C_12B #C_12C #C_12D #C_12E #C_12F #C_12G #C_12H 
        #C_12J #C_12K #C_12L #C_12M #C_12N #C_12P #C_12Q #C_12R #C_12S #C_12T #C_12V #C_12W #C_12Y #C_12Z #C_12AA #C_12BB #C_12CC #C_12DD #C_12EE
        #C_14 #C_16 #C_17 #C_18 #C_19 
    from Company_Totals(#Tot)  C_01 C_02 C_03 C_04 C_05 C_06 C_07 C_09 C_08 C_10 C_11A C_11B C_12A C_12B C_12C C_12D C_12E C_12F C_12G C_12H 
        C_12J C_12K C_12L C_12M C_12N C_12P C_12Q C_12R C_12S C_12T C_12V C_12W C_12Y C_12Z C_12AA C_12BB C_12CC C_12DD C_12EE C_14 C_16 C_17 C_18 C_19

    !let #DomesticInx = 0
    !let #ExpatInx    = 1
    !let #FEINInx     = 2
    !let #GrandInx    = 3

    if (#Tot <> #GrandInx)
      #ifdef SUBTOTAL_COMPANY                                ! we update the grand box totals for each company total
         if (#Tot = #DomesticInx) or (#Tot = #ExpatInx)
           do update-fein-totals
           do update-grand-totals
         end-if
      #else
        if #Tot = #FEINInx
         do update-grand-totals                              ! without compay totals, we update grand totals for each level 2 total only
        end-if
      #endif
    end-if

    !---------------------------------------------------------------------------------------------------
    !if FEIN totals are requested from this routine either we have FEIN or ADP Compid totals ALREADY in
    !the #FEINinx (2) totals so we don't need to do anything other than report them.  The user can not
    !have Company AND FEIN or ADP Compid reporting
    !---------------------------------------------------------------------------------------------------

    if #Tot = #GrandInx

        let $ReportTitle  = 'ADP Employment Tax, Grand Totals, Year End: ' || $AsOfDate
        let $Company = 'ALL'
        let $CompanyName = ' '
        do Get-Current-DateTime
        #debugd show 'U.S. Associate Count all Companies = ' #tot_emp_count
        let #Current_count = #tot_emp_count

    end-if

    if #Tot = #DomesticInx

        let $sav_company = $company
        let $Company = $Current_Company
        do get-company-data

        let $ReportTitle  = 'ADP Employment Tax, Company Summary: ' || $Current_Company || ', Year End: ' || $AsOfDate
        do Get-Current-DateTime
        ! New-Page

        let #Current_count = #com_emp_count

        if #com_emp_count > 0
         print 'U.S. Associate Count in Company:   '  (+2,4)
         print $Current_Company                 ()
         print ' = '                            ()
         print #com_emp_count                   () edit 999,999
         print '   (Count of associates with W-2 Data loaded)'     ()

        end-if

        if round(#Total_Gross99_C,2) <> 0
           print 'Total Gross Wages (company total) in Box99 '  (+2,4)
           do Format-Number(#Total_Gross99_C, $out, $Fmt)
           print $out  (,65)
        end-if
        let #Total_Gross99_C = 0

    end-if

    if #Tot = #FEINInx

        #ifdef SUBTOTAL_FEIN

          let $sav_company = $company
          let $Company = ' '

          let $ReportTitle  = 'ADP Employment Tax, FEIN Summary: ' || $Current_FEIN || ', Year End: ' || $AsOfDate
          do Get-Current-DateTime
          ! New-Page

          #debugd show 'U.S. Associate count, FEIN: ' $Current_FEIN ' = ' #fein_emp_count

          let #Current_count = #fein_emp_count

          print 'U.S. Associate Count in FEIN:   ' (+2,4)
          print $Current_FEIN                      ()
          print ' = '                              ()
          print #fein_emp_count                    () edit 999,999
          print '   (Count of associates with W-2 Data loaded)'     ()

        #endif

        #ifdef SUBTOTAL_ADP_COMPID_EXTRACT

          let $sav_company = $company
          let $Company = ' '

          let $ReportTitle  = 'ADP Employment Tax, ADP Compid Summary: ' || $Current_ADP_Compid || ', Year End: ' || $AsOfDate
          do Get-Current-DateTime

          #if {SITE_ID} = 'GE01'

            if #GE_1099M_associate_count > 0
              #debugd show 'GE01 1099M Associate Count = ' #GE_1099M_associate_count ' for ' $Current_ADP_Compid
              let #Current_count = 0
              print 'U.S. 1099M Count in ADP Compid:   ' (+2,4)
              print $Current_ADP_Compid                     ()
              print ' = '                                   ()
              print #GE_1099M_associate_count               () edit 999,999
              print '   (Count of associates with 1099M Data loaded)'     ()
            end-if

            if #GE_1099R_associate_count > 0
              #debugd show 'GE01 1099R Associate Count = ' #GE_1099R_associate_count ' for ' $Current_ADP_Compid
              let #Current_count = 0
              print 'U.S. 1099R Count in ADP Compid:   ' (+2,4)
              print $Current_ADP_Compid                     ()
              print ' = '                                   ()
              print #GE_1099R_associate_count               () edit 999,999
              print '   (Count of associates with 1099R Data loaded)'     ()
            end-if

            if #fein_emp_count > 0
              #debugd show 'GE01 U.S. W-2 Associate Count = ' #fein_emp_count ' for ' $Current_ADP_Compid
              let #Current_count = #fein_emp_count
              print 'U.S. W-2 Count in ADP Compid:   ' (+2,4)
              print $Current_ADP_Compid                     ()
              print ' = '                                   ()
              print #fein_emp_count               () edit 999,999
              print '   (Count of associates with W-2 Data loaded)'     ()
            end-if

          #else

            #debugd show 'U.S. Associate count, ADP Compid: ' $Current_ADP_Compid ' = ' #fein_emp_count

            let #Current_count = #fein_emp_count

            print 'U.S. Associate Count in ADP Compid:   ' (+2,4)
            print $Current_ADP_Compid                     ()
            print ' = '                                   ()
            print #fein_emp_count                         () edit 999,999
            print '   (Count of associates with W-2 Data loaded)'     ()

          #endif

        #endif

   end-if

   if #current_count > 0

    if round(#C_01,2) <> 0
     print '(Box 01)    Federal Taxable Wages          '  (+3,4)
     do Format-Number(#C_01, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_02,2) <> 0
     print '(Box 02)    Federal income tax withheld    '  (+1,4)
     do Format-Number(#C_02, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_03,2) <> 0
     print '(Box 03)    Social security wages          '  (+1,4)
     do Format-Number(#C_03, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_04,2) <> 0
     print '(Box 04)    Social security tax withheld   '  (+1,4)
     do Format-Number(#C_04, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_05,2) <> 0
     print '(Box 05)    Medicare wages and tips        '  (+1,4)
     do Format-Number(#C_05, $out, $Fmt)
     print $out  (,65)
     print '   (Sum of Wages for Taxcodes $UF and $UT)'   ()
    end-if

    if round(#C_06,2) <> 0
     print '(Box 06)    Medicare tax withheld          '  (+1,4)
     do Format-Number(#C_06, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_07,2) <> 0
     print '(Box 07)    Soc Sec. wages and tips        '  (+1,4)
     do Format-Number(#C_07, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_08,2) <> 0
     print '(Box 08)    Allocat. wages and tips        '  (+1,4)
     do Format-Number(#C_08, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_09,2) <> 0
     print '(Box 09)    Advance EIC payments           '  (+1,4)
     do Format-Number(#C_09, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_10,2) <> 0
     print '(Box 10)    Dependent Care                 '  (+1,4)
     do Format-Number(#C_10, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_11A,2) <> 0
     print '(Box 11A)   Non-qualified 457 plan         '  (+1,4)
     do Format-Number(#C_11A, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_11B,2) <> 0
     print '(Box 11B)   Non-qualified non-457 plan     '  (+1,4)
     do Format-Number(#C_11B, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12A,2) <> 0
     print '(Box 12A)   Uncoll Soc Sec tax on tips     '  (+1,4)
     do Format-Number(#C_12A, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12B,2) <> 0
     print '(Box 12B)   Uncoll Medicare tax on tips    '  (+1,4)
     do Format-Number(#C_12B, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12C,2) <> 0
     print '(Box 12C)   Group Term Life                '  (+1,4)
     do Format-Number(#C_12C, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12D,2) <> 0
     print '(Box 12D)   Section 401(k) contributions   '  (+1,4)
     do Format-Number(#C_12D, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12E,2) <> 0
     print '(Box 12E)   Section 403(b) contributions   '  (+1,4)
     do Format-Number(#C_12E, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12F,2) <> 0
     print '(Box 12F)   Section 408(k) (6) contris     '  (+1,4)
     do Format-Number(#C_12F, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12G,2) <> 0
     print '(Box 12G)   Section 457(b) contributions   '  (+1,4)
     do Format-Number(#C_12G, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12H,2) <> 0
     print '(Box 12H)   Section 501(c)(18)(D) contribs ' (+1,4)
     do Format-Number(#C_12H, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12J,2) <> 0
     print '(Box 12J)   Nontaxable sick pay            '  (+1,4)
     do Format-Number(#C_12J, $out, $Fmt)                           !11/27/01 fix... was mapping it to 12K
     print $out  (,65)
    end-if

    if round(#C_12K,2) <> 0
     print '(Box 12K)   20% Excise tax on excess GPP   '  (+1,4)
     do Format-Number(#C_12K, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12L,2) <> 0
     print '(Box 12L)   (Non-taxable) EE Business Exp. '  (+1,4)
     do Format-Number(#C_12L, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12M,2) <> 0
     print '(Box 12M)   Uncoll SS or RRTA tax GTL>$50K '  (+1,4)
     do Format-Number(#C_12M, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12N,2) <> 0
     print '(Box 12N)   Uncoll Med tax on GTL>$50K     '  (+1,4)
     do Format-Number(#C_12N, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12P,2) <> 0
     print '(Box 12P)   Excludible moving expenses     '  (+1,4)
     do Format-Number(#C_12P, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12Q,2) <> 0
     print '(Box 12Q)   Nontaxable Combat Pay          '  (+1,4)
     do Format-Number(#C_12Q, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12R,2) <> 0
     print '(Box 12R)   ER contrib to a MSA            '  (+1,4)
     do Format-Number(#C_12R, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12S,2) <> 0
     print '(Box 12S)   EE salary reduction 408(p)     '  (+1,4)
     do Format-Number(#C_12S, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12T,2) <> 0
     print '(Box 12T)   Adoption benefits              '  (+1,4)
     do Format-Number(#C_12T, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12V,2) <> 0
     print '(Box 12V)   Income from nonstatutory stock '  (+1,4)
     do Format-Number(#C_12V, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12W,2) <> 0
     print '(Box 12W)   Health Savings Acct (HSA)      '  (+1,4)
     do Format-Number(#C_12W, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12Y,2) <> 0
     print '(Box 12Y)   Deferrals under a section 409A '  (+1,4)
     do Format-Number(#C_12Y, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12Z,2) <> 0
     print '(Box 12Z)   Income under section 409A      '  (+1,4)
     do Format-Number(#C_12Z, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12AA,2) <> 0
     print '(Box 12AA)  ROTH contributions 401K        '  (+1,4)
     do Format-Number(#C_12AA, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_12BB,2) <> 0
     print '(Box 12BB)  ROTH contributions 403B        '  (+1,4)
     do Format-Number(#C_12BB, $out, $Fmt)
     print $out  (,65)
    end-if

    #ifdef GENERATE_BOX12CC
    if round(#C_12CC,2) <> 0
     print '(Box 12CC)  Hire Act Exempt Wages          '  (+1,4)
     do Format-Number(#C_12CC, $out, $Fmt)
     print $out  (,65)
    end-if
    #endif
    
   if round(#C_12DD,2) <> 0
     print '(Box 12DD)  Employer Health Contributions  '  (+1,4)
     do Format-Number(#C_12DD, $out, $Fmt)
     print $out  (,65)
    end-if

   if round(#C_12EE,2) <> 0
     print '(Box 12EE)  ROTH contributions 457B        '  (+1,4)
     do Format-Number(#C_12EE, $out, $Fmt)
     print $out  (,65)
   end-if

   if round(#C_14,2) <> 0
     print '(Box 14)    Box 14 Amounts                 '  (+1,4)    !added 11/9/99
     do Format-Number(#C_14, $out, $Fmt)                            !added 11/9/99
     print $out  (,65)                                              !added 11/9/99
    end-if

    !3/20/06, sum into company box 14 breakdown
    !-------------------------------------------
    if #tot = #GrandInx

      let #m = 0
      while #m < 37
        get #amt14  from Box14_grand(#m) Namt
        if #amt14 <> 0
          get $desc14 from Box14_grand(#m) Desc
          get $Box14  from Box14_grand(#m) Box
          let $desc14 = '(Box ' || $Box14 || ')    ' ||  $desc14
          print $desc14                            (+1,6)
          do Format-Number(#amt14, $out, $Fmt)
          print $out                               (,65)
        end-if
        add 1 to #m
      end-while

    else

     if #tot = #FEINInx

      let #m = 0
      while #m < 37
        get #amt14  from Box14_fein_totals(#m) Namt
        if #amt14 <> 0
          get $desc14 from Box14_fein_totals(#m) Desc
          get $Box14  from Box14_fein_totals(#m) Box
          let $desc14 = '(Box ' || $Box14 || ')    ' ||  $desc14
          print $desc14                            (+1,6)
          do Format-Number(#amt14, $out, $Fmt)
          print $out                               (,65)
        end-if
        add 1 to #m
      end-while

      clear-array name=Box14_fein_totals

     else

      let #m = 0
      while #m < 37
        get #amt14  from Box14_totals(#m) Namt
        if #amt14 <> 0
          get $desc14 from Box14_totals(#m) Desc
          get $Box14  from Box14_totals(#m) Box
          let $desc14 = '(Box ' || $Box14 || ')    ' ||  $desc14
          print $desc14                            (+1,6)
          do Format-Number(#amt14, $out, $Fmt)
          print $out                               (,65)
        end-if
        add 1 to #m
      end-while

      clear-array name=Box14_totals

     end-if

    end-if

    !--------------------------------------------

    if round(#C_16,2) <> 0
     print '(Box 16)    State Wages                    '  (+1,4)
     do Format-Number(#C_16, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_17,2) <> 0
     print '(Box 17)    State Taxes Withheld           '  (+1,4)
     do Format-Number(#C_17, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_18,2) <> 0
     print '(Box 18)    Local Wages                    '  (+1,4)
     do Format-Number(#C_18, $out, $Fmt)
     print $out  (,65)
    end-if

    if round(#C_19,2) <> 0
     print '(Box 19)    Local Taxes Withheld           '  (+1,4)
     do Format-Number(#C_19, $out, $Fmt)
     print $out  (,65)
    end-if

    print 'To reconcile:  Balance Federal Tax and Wage amounts to TAX915 W-3 Transmittal year-end PeopleSoft report' (+2,1)

    New-Page

!    end-if   !moved to below 8/10/6

    if #Tot = #DomesticInx   !After Domestic..

      if #current_count > 0
        do Get-State-Local-Company-Totals
      end-if

      #ifdef INCLUDE_W2C
       #ifdef ADP_TAX_QUARTERLY
        do Print-W2c-Totals
       #endif
      #endif

!      do Print-Company-Recap-PR           !moved 2/14/08

      let $company = $sav_company
      do get-company-data

    end-if

    show 'Print-Company-Recap: Continuing... Printing State, Local and W-2C data, #Tot = ' #Tot

    #ifdef SUBTOTAL_ADP_COMPID_EXTRACT
     if #Tot = #FEINInx
       do Get-State-Local-FEIN-Totals
       !5/29/09 - we were not getting the W-2C totals on the .pdf for the ADP Compid folks - WHS1 testing
       !--------------------------------------------------------------------------------------------------
       #ifdef INCLUDE_W2C
        #ifdef ADP_TAX_QUARTERLY
         #debugd show 'Printing W-2C Totals (Compid/FEIN): ' $Current_ADP_Compid '/' $Current_FEIN
         do Print-W2c-Totals
        #endif
       #endif
     end-if
    #endif

    #ifdef SUBTOTAL_FEIN
     if #Tot = #FEINInx
       do Get-State-Local-FEIN-Totals
       !5/29/09 - we were not getting the W-2C totals on the .pdf for the ADP Compid folks - WHS1 testing
       !--------------------------------------------------------------------------------------------------
       #ifdef INCLUDE_W2C
        #ifdef ADP_TAX_QUARTERLY
         #debugd show 'Printing W-2C Totals (Compid/FEIN): ' $Current_ADP_Compid '/' $Current_FEIN
         do Print-W2c-Totals
        #endif
       #endif
     end-if
    #endif

    if #Tot = #GrandInx

      do Get-State-Local-Grand-Totals  !10/27/09 added

      if round(#Total_Gross99_Hash,2) <> 0
           print 'Total Gross Wages (all companies) in Box99 '  (+2,4)
           do Format-Number(#Total_Gross99_Hash, $out, $Fmt)
           print $out  (,65)
      end-if

      #if {DEDUCTS_AND_EARNINGS_MODE} = 'BALANCE_TO_BOX1'
        #ifdef BALANCE_TO_BOX1_PRINT
         if $SelectEmplid <> ''
           do print-w2-summary
         end-if
         #endif
         do Print-Box1-Errors
      #endif

     #ifdef FULL_BOX_SUMMARY_W2
      #ifdef BALANCE_TO_BOX1_PRINT
       if $SelectEmplid <> ''
         do print-w2-summary
       end-if
      #endif
     #endif

     #ifdef LIMITED_BOX_SUMMARY_W2
      #ifdef BALANCE_TO_BOX1_PRINT
       if $SelectEmplid <> ''
         do print-w2-summary
       end-if
      #endif
     #endif

     #ifdef BOX_01_03_05_SUMMARY
      #ifdef BALANCE_TO_BOX1_PRINT
       if $SelectEmplid <> ''
         do print-w2-summary
       end-if
      #endif
      !do Print-Box1-Errors   !clients can use the 'BOX_01_03_05_Warning_Details' definition to get the 01/03/05 warnings on the report for BOX_01_03_05_SUMMARY
     #endif

     #ifdef BOX_01_03_05_SUMMARY
        do Print-Box01-Box03-Box-05-Summary
     #endif
          
    end-if

  end-if   !moved from above 8/10/6 ... current_count = 0.. for New-Page problems

  if #Tot = #DomesticInx                !After Domestic..
    if #com_PR_emp_count > 0
      #debugd show 'Printing PR data for company ' $Current_Company ', count = ' #com_PR_emp_count
      do Print-Company-Recap-PR           !moved 2/14/08
    end-if
  end-if

  if #Tot = #GrandInx
   #ifndef SKIP_FILTER
    #ifdef ADP_TAX_QUARTERLY
     #debugd show 'Print-Company-Recap: calling print-filter-Warnings'
     do print-filter-Warnings
    #endif
   #endif
  end-if

  if #Tot = #GrandInx
   #ifdef BOX_01_03_05_SUMMARY
      #debugd show ' '
      #debugd show '********** BOX_01_03_05_SUMMARY ********'
      #debugd show ' BOX_01_03_05_SUMMARY Wage & Ded match count.   Net Taxable ok. (Pre-Tax plus Taxable Benefits match)     =  ' #recon_earns_success
      #debugd show ' BOX_01_03_05_SUMMARY Wage & Ded error count.   Net Taxable Difference (Net does not match)               =  ' #recon_earns_errors
      #debugd show ' BOX_01_03_05_SUMMARY Wage & Ded overrun count. More than 30 Box 99/IX records (too many earn/ded recs)   =  ' #recon_earns_overrun
      #debugd show ' '
   #endif
  end-if

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Print-Company-Recap' to $debug-proc1
     move ' '    to $debug-table1
     do log-delta-time
  #endif

end-procedure

! -------------------------------- !
!    Puerto Rico Company Totals    !
! -------------------------------- !

begin-procedure Print-Company-Recap-PR

 if #com_PR_emp_count > 0
    get #C_05 #C_06 #C_06A #C_06B #C_07 #C_08 #C_09 #C_10 #C_11 #C_12 #C_13 #C_14 #C_15 #C_16 #C_16A #C_16B #C_17 #C_18 #C_19 #C_20 #C_21 #C_22 #C_23 
    from PR_Totals(#Tot)
        C_05 C_06 C_06A C_06B C_07 C_08 C_09 C_10 C_11 C_12 C_13 C_14 C_15 C_16 C_16A C_16B C_17 C_18 C_19 C_20 C_21 C_22 C_23 

    let #C_11 = #C_07 + #C_08 + #C_09 + #C_10     !1/14/09
    
    print 'Puerto Rico Count in W-2 Reporting Company:         '  (+2,4)
    print $Current_Company                   ()
    print ' = '                ()
    print #com_PR_emp_count    () edit 999,999

  if #RptYear <= 2013
    if round(#C_06,2) <> 0
      print '(Box 06)    PR Cost Pension Annuity        '  (+2,4)
      do Format-Number(#C_06, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_06A,2) <> 0
       print '(Box 06A)    PR ER Sponsored Health Care    '  (+2,4)
       do Format-Number(#C_06A, $out, $Fmt)
       print $out  (,65)
    end-if

    if round(#C_06B,2) <> 0
       print '(Box 06B)    PR EE Charitable Contribution  '  (+2,4)
       do Format-Number(#C_06B, $out, $Fmt)
       print $out  (,65)
    end-if
  else
    if round(#C_05,2) <> 0
       print '(Box 05)    PR ER Sponsored Health Care     '  (+2,4)
       do Format-Number(#C_05, $out, $Fmt)
       print $out  (,65)
    end-if

    if round(#C_06,2) <> 0
       print '(Box 06)    PR EE Charitable Contribution   '  (+2,4)
       do Format-Number(#C_06, $out, $Fmt)
       print $out  (,65)
    end-if
  end-if
  
    if round(#C_07,2) <> 0
      print '(Box 07)    Puerto Rico Wages              '  (+1,4)
      do Format-Number(#C_07, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_08,2) <> 0
      print '(Box 08)    Commissions                    '  (+1,4)
      do Format-Number(#C_08, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_09,2) <> 0
      print '(Box 09)    Allowances                     '  (+1,4)
      do Format-Number(#C_09, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_10,2) <> 0
      print '(Box 10)    Tips                           '  (+1,4)
      do Format-Number(#C_10, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_11,2) <> 0
      print '(Box 11)    Total Boxes: 07 + 08 + 09 + 10 '  (+1,4)
      do Format-Number(#C_11, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_12,2) <> 0
      print '(Box 12)    Reimbursed Expenses            '  (+1,4)
      do Format-Number(#C_12, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_13,2) <> 0
      print '(Box 13)    Tax Withheld                   '  (+1,4)
      do Format-Number(#C_13, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_14,2) <> 0
      print '(Box 14)    Retirement Fund                '  (+1,4)
      do Format-Number(#C_14, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_15,2) <> 0
      print '(Box 15)    Contributions to CODA Plans    '  (+1,4)
      do Format-Number(#C_15, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_16,2) <> 0
      print '(Box 16)    Exempt Salaries                '(+1,4)
      do Format-Number(#C_16, $out, $Fmt)
      print $out  (,65)
    end-if

  if #RptYear <= 2013
    if round(#C_16A,2) <> 0
       print '(Box 16A)    Save and Duplicate program     '(+1,4)
       do Format-Number(#C_16A, $out, $Fmt)
       print $out  (,65)
    end-if
  else
    if round(#C_16B,2) <> 0
       print '(Box 16B)    Save and Duplicate program     '(+1,4)
       do Format-Number(#C_16B, $out, $Fmt)
       print $out  (,65)
    end-if
  end-if
  
    if round(#C_17,2) <> 0
      print '(Box 17)    Social Security Wages          '  (+1,4)
      do Format-Number(#C_17, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_18,2) <> 0
      print '(Box 18)    Social Security Tax Withheld   '  (+1,4)
      do Format-Number(#C_18, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_19,2) <> 0
      print '(Box 19)    Medicare Wages and Tips        '   (+1,4)
      do Format-Number(#C_19, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_20,2) <> 0
      print '(Box 20)    Medicare Tax Withheld          '   (+1,4)
      do Format-Number(#C_20, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_21,2) <> 0
      print '(Box 21)    Social Security Tips           '   (+1,4)
      do Format-Number(#C_21, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_22,2) <> 0
      print '(Box 22)    Uncollected SocSec Tax on Tips '   (+1,4)
      do Format-Number(#C_22, $out, $Fmt)
      print $out  (,65)
    end-if

    if round(#C_23,2) <> 0
      print '(Box 23)    Uncollected Med. Tax on Tips   '   (+1,4)
      do Format-Number(#C_23, $out, $Fmt)
      print $out  (,65)
    end-if
 
   New-Page

  end-if

end-procedure

begin-procedure Get-State-Local-Company-Totals

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

   !Local Totals first
   !------------------

   let #twg = 0
   let #twh = 0
   let $old_s = ' '
   let $old_l = ' '

   if (#Company_Locals > 0)
    print 'Local Count = ' (+1,1)
    print #Company_Locals  () edit 99999
    print 'Count   Local-State     Locality     Res    Locality-Name               Local-Wages            Local-Taxes'  (+2,1)
    print ' '                                                  (+1,1)
   end-if

   let #l = 0
   while (#l < #Company_Locals)

      let $next = 'ZZ'
      let #j = 0

      while (#j < #Company_Locals)

       get $s  from Company_Totals(#Tot) Local_State(#j)
       if rtrim($s,' ') <> 'ZZ'

        get $l -
            $r -
        from Company_Totals(#Tot) -
            Locality(#j) -
            Residence(#j)

        let $sl = rtrim($s,' ') || rtrim($l,' ') || rtrim($r,' ')

        if $sl < $next
          let #inx = #j
          move $sl to $next
        end-if
       end-if
       add 1 to #j
     end-while

     if rtrim($next,' ') <> 'ZZ'

      get $s  -
          $l  -
          $r  -
          #wg -
          #wh -
      from Company_Totals(#Tot)	-
        Local_State(#inx)	-
 	Locality(#inx)		-
	Residence(#inx)		-
	Local_TxGrs(#inx)	-
	Local_Tax(#inx)

      if #current-line > 56
          New-Page
          print 'Count   Local-State     Locality     Res    Locality-Name               Local-Wages            Local-Taxes'  (+1,1)
          print ' '                                                  (+1,1)
      end-if

      do Format-Number(#wg, $wg, $Fmt)
      do Format-Number(#wh, $wh, $Fmt)
      let #cnt = #l+1

      do Get-Locality-Abbrv

      print #cnt      (+1,1)  edit 99999
      print $s        (,9)
      print $l        (,25)
      print $r        (,38)
      print $LocalityPrintName (,45)
      print $wg       (,66)
      print $wh       (,89)

      add #wg to #twg
      add #wh to #twh

      !11/29/05 added ----------------------------------------------------------------------
      if rtrim($s,' ') = $old_s AND rtrim($l,' ') = $old_l          ! (Sum Res and Non-res)
        let #sum_wg = #old_wg + #wg
        let #sum_wh = #old_wh + #wh
        do Format-Number(#sum_wg, $sum_wg, $Fmt)
        do Format-Number(#sum_wh, $sum_wh, $Fmt)

        print '('           (,111)
        print $sum_wg       (,112)
        print ','           ()
        print $sum_wh       (,135)
        print ')'           ()

        let $old_s = rtrim($s,' ')
        let $old_l = rtrim($l,' ')
        let #old_wg = 0
        let #old_wh = 0
      end-if

      let $old_s = rtrim($s,' ')
      let $old_l = rtrim($l,' ')
      let #old_wg = #wg
      let #old_wh = #wh
      !11/29/05 added ----------------------------------------------------------------------

      put 'ZZ' into Company_Totals(#Tot) Local_State(#inx)
     end-if

     add 1 to #l

    end-while

    if (#Company_Locals > 0)
      do Format-Number(#twg, $wg, $Fmt)
      do Format-Number(#twh, $wh, $Fmt)
      print '   Totals ---> ' (+1,1)
      print $wg       (,66)
      print $wh       (,89)

      #ifdef SKIP_KY_LOCAL_ROLLUP   !because the Tax910LD can handle KJDA uniquely..
       print 'Note, SKIP_KY_LOCAL_ROLLUP forces the extract to report Tax Balances for KY Locals, not the rolled up KY Local data' (+2,1)
      #endif

      print 'To reconcile:  Balance Local Tax and Wage amounts to TAX916LC year-end PeopleSoft report' (+2,1)

      New-Page
    end-if

    !State totals
    !-------------
    let #twg = 0
    let #twh = 0

    if (#Company_States > 0)
     print 'State Count = ' (+1,1)
     print #Company_States  () edit 99999
     print 'Count   State            State-Wages            State-Taxes'  (+2,1)
     print ' '                                             (+1,1)
    end-if

    let #l = 0
    while (#l < #Company_States)

      let $next = 'ZZ'
      let #j = 0

      while (#j < #Company_States)
       get $s from Company_Totals(#Tot) State(#j)
       if rtrim($s,' ') <> 'ZZ'
        if $s < $next
          let #inx = #j
          move $s to $next
        end-if
       end-if
       add 1 to #j
      end-while

     if rtrim($next,' ') <> 'ZZ'

      get $s   -
          #wg  -
          #wh  -
      from Company_Totals(#Tot) -
          State(#inx) -
          State_TxGrs(#inx) -
          State_Tax(#inx)

      if #current-line > 56
        New-Page
        print 'Count   State            State-Wages            State-Taxes'  (+2,1)
        print ' '                                             (+1,1)
      end-if

      ! let #wg = #wg / 100
      ! let #wh = #wh / 100
      do Format-Number(#wg, $wg, $Fmt)
      do Format-Number(#wh, $wh, $Fmt)
      let #cnt = #l+1

      print #cnt      (+1,1)  edit 99999
      print $s        (,9)
      print $wg       (,19)
      print $wh       (,42)

      add #wg to #twg
      add #wh to #twh

      put 'ZZ' into Company_Totals(#Tot) State(#inx)
     end-if

    add 1 to #l

  end-while

  if (#Company_States > 0)
      do Format-Number(#twg, $wg, $Fmt)
      do Format-Number(#twh, $wh, $Fmt)
      print '   Totals ---> ' (+1,1)
      print $wg       (,19)
      print $wh       (,42)

      #ifdef SKIP_MD_SIT_ROLLUP   !because the Tax910LD is adding MD local YTD Taxes to MD SIT YTD Taxes
        print 'Note, SKIP_MD_SIT_ROLLUP forces the extract to report Tax Balances for MD SIT, not the rolled up MD SIT' (+2,1)
      #endif

      print 'To reconcile:  Balance State Tax and Wage amounts to TAX916ST year-end PeopleSoft report' (+2,1)

      New-Page
  end-if

  #ifdef  enable_performance_monitor
     do Get-Current-Time
     move 'Print-State-Local-Co-Totals' to $debug-proc1
     move ' '    to $debug-table1
     do log-delta-time
  #endif

end-procedure

! #ifdef SUBTOTAL_FEIN

begin-procedure Get-State-Local-FEIN-Totals

   !Local Totals first
   !------------------
   let $old_s = ' '
   let $old_l = ' '
   let #twg = 0
   let #twh = 0

   if (#FEIN_Locals > 0)
    print 'FEIN Local Count = ' (+1,1)
    print #FEIN_Locals  () edit 99999
    print 'Count   Local-State     Locality     Res    Locality-Name               Local-Wages            Local-Taxes'  (+2,1)
    print ' '                                                  (+1,1)
   end-if

   let #l = 0
   while (#l < #FEIN_Locals)

      let $next = 'ZZ'
      let #j = 0

      while (#j < #FEIN_Locals)

       get $s -
           $l -
           $r -
       from Company_Totals(#FEINInx) -
           Local_State(#j) -
           Locality(#j) -
           Residence(#j)

       if rtrim($s,' ') <> 'ZZ'
        let $sl = rtrim($s,' ') || rtrim($l,' ') || rtrim($r,' ')
        if $sl < $next
          let #inx = #j
          move $sl to $next
        end-if
       end-if
       add 1 to #j
     end-while

     if rtrim($next,' ') <> 'ZZ'

      get $s -
          $l -
          $r -
          #wg -
          #wh -
      from Company_Totals(#FEINInx) -
         Local_State(#inx) -
	 Locality(#inx) -
	 Residence(#inx) -
	 Local_TxGrs(#inx) -
	 Local_Tax(#inx)

      if #current-line > 56
          New-Page
          print 'Count   Local-State     Locality     Res    Locality-Name               Local-Wages            Local-Taxes'  (+1,1)
          print ' '                                                  (+1,1)
      end-if

      do Format-Number(#wg, $wg, $Fmt)
      do Format-Number(#wh, $wh, $Fmt)
      let #cnt = #l+1

      do Get-Locality-Abbrv

      print #cnt      (+1,1)  edit 99999
      print $s        (,9)
      print $l        (,25)
      print $r        (,38)
      print $LocalityPrintName (,45)
      print $wg       (,66)
      print $wh       (,89)

      add #wg to #twg
      add #wh to #twh

      !11/29/05 added ----------------------------------------------------------------------
      if rtrim($s,' ') = $old_s AND rtrim($l,' ') = $old_l          ! (Sum Res and Non-res)
        let #sum_wg = #old_wg + #wg
        let #sum_wh = #old_wh + #wh
        do Format-Number(#sum_wg, $sum_wg, $Fmt)
        do Format-Number(#sum_wh, $sum_wh, $Fmt)

        print '('           (,111)
        print $sum_wg       (,112)
        print ','           ()
        print $sum_wh       (,135)
        print ')'           ()

        let $old_s = rtrim($s,' ')
        let $old_l = rtrim($l,' ')
        let #old_wg = 0
        let #old_wh = 0
      end-if

      let $old_s = rtrim($s,' ')
      let $old_l = rtrim($l,' ')
      let #old_wg = #wg
      let #old_wh = #wh
      !11/29/05 added ----------------------------------------------------------------------

      put 'ZZ' into Company_Totals(#FEINInx) Local_State(#inx)
     end-if

     add 1 to #l

    end-while

    if (#FEIN_Locals > 0)
      do Format-Number(#twg, $wg, $Fmt)
      do Format-Number(#twh, $wh, $Fmt)
      print '   Totals ---> ' (+1,1)
      print $wg       (,66)
      print $wh       (,89)
      New-Page
    end-if

    !State totals
    !-------------
    let #twg = 0
    let #twh = 0

    if (#FEIN_States > 0)
     print 'FEIN State Count = ' (+1,1)
     print #FEIN_States  () edit 99999
     print 'Count   State            State-Wages            State-Taxes'  (+2,1)
     print ' '                                             (+1,1)
    end-if

    let #l = 0
    while (#l < #FEIN_States)

      let $next = 'ZZ'
      let #j = 0

      while (#j < #FEIN_States)

       get $s from Company_Totals(#FEINInx) State(#j)
       if rtrim($s,' ') <> 'ZZ'
        if $s < $next
          let #inx = #j
          move $s to $next
        end-if
       end-if
       add 1 to #j
      end-while

     if rtrim($next,' ') <> 'ZZ'

      get $s -
          #wg -
          #wh -
      from Company_Totals(#FEINInx) -
	  State(#inx)		    -
	  State_TxGrs(#inx)	    -
	  State_Tax(#inx)

      if #current-line > 56
        New-Page
        print 'Count   State            State-Wages            State-Taxes'  (+2,1)
        print ' '                                             (+1,1)
      end-if
      do Format-Number(#wg, $wg, $Fmt)
      do Format-Number(#wh, $wh, $Fmt)
      let #cnt = #l+1

      print #cnt      (+1,1)  edit 99999
      print $s        (,9)
      print $wg       (,19)
      print $wh       (,42)

      add #wg to #twg
      add #wh to #twh

      put 'ZZ' into Company_Totals(#FEINInx) State(#inx)
     end-if

    add 1 to #l

  end-while

  if (#FEIN_States > 0)
      do Format-Number(#twg, $wg, $Fmt)
      do Format-Number(#twh, $wh, $Fmt)
      print '   Totals ---> ' (+1,1)
      print $wg       (,19)
      print $wh       (,42)
      New-Page
  end-if

end-procedure

begin-procedure Get-State-Local-Grand-Totals        !these totals are created in the Get-State-Local-Company-Totals routine and printed here

   !show 'Get-State-Local-Grand-Totals, Tot ' #Tot
   !Local Totals first
   !------------------
   let $old_s = ' '
   let $old_l = ' '
   let #twg = 0
   let #twh = 0

   if (#Grand_Locals > 0)
    print 'Local Count = ' (+1,1)
    print #Grand_Locals  () edit 99999
    print 'Count   Local-State     Locality     Res    Locality-Name               Local-Wages            Local-Taxes'  (+2,1)
    print ' '                                                  (+1,1)
   end-if

   let #l = 0
   while (#l < #Grand_Locals)

      let $next = 'ZZZZ'
      let #j = 0

      while (#j < #Grand_Locals)

       get $s  -
       	   $l  -
       	   $r  -
       from Company_Totals(#GrandInx) -
          Local_State(#j) -
          Locality(#j) -
          Residence(#j)

       if rtrim($s,' ') <> 'ZZ' and rtrim($l,' ') <> 'Z' and rtrim($r,' ') <> 'Z'
        let $sl = rtrim($s,' ') || rtrim($l,' ') || rtrim($r,' ')
        if $sl < $next
          let #inx = #j
          move $sl to $next
        end-if
       end-if
       add 1 to #j
     end-while

     if rtrim($next,' ') <> 'ZZZZ'

      get $s  -
          $l  -
          $r  -
          #wg -
          #wh -
      from Company_Totals(#GrandInx) -
        Local_State(#inx)	     -
      	Locality(#inx)		     -
      	Residence(#inx)		     -
      	Local_TxGrs(#inx)     	     -
        Local_Tax(#inx)

      if #current-line > 56
          New-Page
          print 'Count   Local-State     Locality     Res    Locality-Name               Local-Wages            Local-Taxes'  (+1,1)
          print ' '                                                  (+1,1)
      end-if

      do Format-Number(#wg, $wg, $Fmt)
      do Format-Number(#wh, $wh, $Fmt)
      let #cnt = #l+1

      do Get-Locality-Abbrv

      print #cnt      (+1,1)  edit 99999
      print $s        (,9)
      print $l        (,25)
      print $r        (,38)
      print $LocalityPrintName (,45)
      print $wg       (,66)
      print $wh       (,89)

      add #wg to #twg
      add #wh to #twh

      !11/29/05 added ----------------------------------------------------------------------
      if rtrim($s,' ') = $old_s AND rtrim($l,' ') = $old_l          ! (Sum Res and Non-res)
        let #sum_wg = #old_wg + #wg
        let #sum_wh = #old_wh + #wh
        do Format-Number(#sum_wg, $sum_wg, $Fmt)
        do Format-Number(#sum_wh, $sum_wh, $Fmt)

        print '('           (,111)
        print $sum_wg       (,112)
        print ','           ()
        print $sum_wh       (,135)
        print ')'           ()

        let $old_s = rtrim($s,' ')
        let $old_l = rtrim($l,' ')
        let #old_wg = 0
        let #old_wh = 0
      end-if

      let $old_s = rtrim($s,' ')
      let $old_l = rtrim($l,' ')
      let #old_wg = #wg
      let #old_wh = #wh
      !11/29/05 added ----------------------------------------------------------------------

      put 'ZZ' into Company_Totals(#GrandInx) Local_State(#inx)
      put 'Z'  into Company_Totals(#GrandInx) Locality(#inx)
      put 'Z'  into Company_Totals(#GrandInx) Residence(#inx)
     end-if

     add 1 to #l

    end-while

    if (#Grand_Locals > 0)
      do Format-Number(#twg, $wg, $Fmt)
      do Format-Number(#twh, $wh, $Fmt)
      print '   Totals ---> ' (+1,1)
      print $wg       (,66)
      print $wh       (,89)
      New-Page
    end-if

    !State totals
    !-------------
    let #twg = 0
    let #twh = 0

    if (#Grand_States > 0)
     print 'FEIN State Count = ' (+1,1)
     print #Grand_States  () edit 99999
     print 'Count   State            State-Wages            State-Taxes'  (+2,1)
     print ' '                                             (+1,1)
    end-if

    let #l = 0
    while (#l < #Grand_States)

      let $next = 'ZZ'
      let #j = 0

      while (#j < #Grand_States)

       get $s from Company_Totals(#GrandInx) State(#j)

       !show 'Get-State-Local-Grand-Totals, $s ' $s ' GrandInx = ' #GrandInx edit 999 ' #j = ' #j edit 999

       if rtrim($s,' ') <> 'ZZ'
        if $s < $next
          let #inx = #j
          move $s to $next
        end-if
       end-if
       add 1 to #j
      end-while

     if rtrim($next,' ') <> 'ZZ'

      get $s  -
          #wg -
          #wh -
      from Company_Totals(#GrandInx) -
         State(#inx) -
         State_TxGrs(#inx) -
         State_Tax(#inx)

      if #current-line > 56
        New-Page
        print 'Count   State            State-Wages            State-Taxes'  (+2,1)
        print ' '                                             (+1,1)
      end-if
      do Format-Number(#wg, $wg, $Fmt)
      do Format-Number(#wh, $wh, $Fmt)
      let #cnt = #l+1

      print #cnt      (+1,1)  edit 99999
      print $s        (,9)
      print $wg       (,19)
      print $wh       (,42)

      add #wg to #twg
      add #wh to #twh

      put 'ZZ' into Company_Totals(#GrandInx) State(#inx)
     end-if

    add 1 to #l

  end-while

  if (#Grand_States > 0)
      do Format-Number(#twg, $wg, $Fmt)
      do Format-Number(#twh, $wh, $Fmt)
      print '   Totals ---> ' (+1,1)
      print $wg       (,19)
      print $wh       (,42)
      New-Page
  end-if

end-procedure


begin-procedure Get-Locality-Abbrv

 let $LocalityPrintName = $S || ' ' || $L             !Default

begin-SELECT
L.LOCALITY_NAME

  let $LocalityPrintName  = SUBSTR(&L.LOCALITY_NAME,1,16)

FROM  PS_LOCAL_TAX_TBL L {NOLOCK_SQL}
WHERE L.STATE      = $S
  AND L.LOCALITY   = $L
  AND L.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL {NOLOCK_SQL}
       WHERE  STATE    = L.STATE
         AND  LOCALITY = L.LOCALITY
         AND  EFFDT   <= $Qtr_End_Native)
#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

   let $LocalityPrintName  = SUBSTR($LocalityPrintName,1,16)

end-procedure

#ifndef STRIPPED_PBZQTR_REPORT
begin-procedure Print-SSN-Errors

 if #SSNErrorCount >  0

   let $ReportTitle  = 'ADP Employment Tax, W-2 SSN Warnings: ' || $AsOfDate
   print 'Following are the associates with questionable SSN numbers...'  (+2,4)
   print 'Company  Emplid         Name                                         SSN' (+2,1)
   print ' ' (+1,1)

   let #i=0
   while (#i < #SSNErrorCount)

      get $C           from SSNErrors(#i) Company
      get $E           from SSNErrors(#i) Emplid
      get $N           from SSNErrors(#i) Name
      get $S           from SSNErrors(#i) SSN

      if #current-line > 56
        New-Page
        print 'Company  Emplid         Name                                         SSN' (+2,1)
        print ' '                                             (+1,1)
      end-if

      print $C                 (+1,1)
      print $E                 (,10)
      print $N                 (,25)
      print $S                 (,70)

      add 1 to #i
    end-while
    New-Page
  end-if

end-procedure
#endif

begin-procedure Init-Company-Totals

    let #i = 0  !Reset the company (0) total fields, (1) are expats, (2) FEIN Totals, (3) are the grand totals...

    while (#i < #FEINInx)

     put 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     into Company_Totals(#i)
      C_01 C_02 C_03 C_04 C_05 C_06 C_07 C_08 C_09 C_10 C_11A C_11B C_12A C_12B C_12C C_12D C_12E C_12F C_12G C_12H C_12J 
      C_12K C_12L C_12M C_12N C_12P C_12Q C_12R C_12S C_12T C_12V C_12W C_12Y C_12Z C_12AA C_12BB C_12CC C_12DD C_12EE C_14
      C_16 C_17 C_18 C_19

     let #j = 0
     while (#j < {MAX_LOCALS_TOTAL})
        put ' ' into Company_Totals(#i) Local_State(#j)
        put ' ' into Company_Totals(#i) Locality(#j)
        put ' ' into Company_Totals(#i) Residence(#j)
        put 0   into Company_Totals(#i) Local_TxGrs(#j)
        put 0   into Company_Totals(#i) Local_Tax(#j)
        add 1 to #j
     end-while

     let #j = 0
     while (#j < {MAX_STATES_TOTAL})
        put ' ' into Company_Totals(#i) State(#j)
        put 0   into Company_Totals(#i) State_TxGrs(#j)
        put 0   into Company_Totals(#i) State_Tax(#j)
        add 1 to #j
     end-while

   add 1 to #i

  end-while

  move 0 to #Company_Locals
  move 0 to #Company_States
  move 0 to #com_emp_count

!  #if {DEDUCTS_AND_EARNINGS_MODE} = 'BALANCE_TO_BOX1'
!      clear-array name=Box1_Errors
!      move 0 to #Box1_Errors
!  #endif

end-procedure

begin-procedure Init-FEIN-Totals

      let #i = #FEINInx  !Reset the company (0) total fields, (1) are expats, (2) FEIN Totals, (3) are the grand totals...

      put 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
      into Company_Totals(#i)
       C_01 C_02 C_03 C_04 C_05 C_06 C_07 C_08 C_09 C_10 C_11A C_11B C_12A C_12B C_12C C_12D C_12E C_12F C_12G C_12H C_12J 
       C_12K C_12L C_12M C_12N C_12P C_12Q C_12R C_12S C_12T C_12V C_12W C_12Y C_12Z C_12AA C_12BB C_12CC C_12DD C_12EE C_14 C_16 C_17 C_18 C_19

     let #j = 0
     while (#j < #FEIN_Locals)
        put ' ' into Company_Totals(#i) Local_State(#j)
        put ' ' into Company_Totals(#i) Locality(#j)
        put ' ' into Company_Totals(#i) Residence(#j)
        put 0   into Company_Totals(#i) Local_TxGrs(#j)
        put 0   into Company_Totals(#i) Local_Tax(#j)
        add 1 to #j
     end-while

     let #j = 0
     while (#j < #FEIN_States)
        put ' ' into Company_Totals(#i) State(#j)
        put 0   into Company_Totals(#i) State_TxGrs(#j)
        put 0   into Company_Totals(#i) State_Tax(#j)
        add 1 to #j
     end-while

  move 0 to #FEIN_Locals
  move 0 to #FEIN_States
  move 0 to #FEIN_emp_count

end-procedure

begin-procedure Init-Company-Totals-PR

  move 0 to #C_05
  move 0 to #C_06
  move 0 to #C_06A
  move 0 to #C_06B
  move 0 to #C_07
  move 0 to #C_08
  move 0 to #C_09
  move 0 to #C_10
  move 0 to #C_11
  move 0 to #C_12
  move 0 to #C_13
  move 0 to #C_14
  move 0 to #C_15
  move 0 to #C_16
  move 0 to #C_16A
  move 0 to #C_16B
  move 0 to #C_17
  move 0 to #C_18
  move 0 to #C_19
  move 0 to #C_20
  move 0 to #C_21
  move 0 to #C_22
  move 0 to #C_23


  move 0 to #com_PR_emp_count

end-procedure

begin-procedure assign-year-end-variables  !mirror w2.sqc, but don't use it due to &tx.balance_year requirement

if $TAXFORM_ID <> 'P'
         let $YE_Fed_Wages               = '01'
         let $YE_Fed_Tax                 = '02'
         let $YE_SS_Wages                = '03'
         let $YE_SS_Tax                  = '04'
         let $YE_Med_Wages               = '05'
         let $YE_Med_Tax                 = '06'
         let $YE_SS_Tips                 = '07'
         let $YE_Alloc_Tips              = '08'
         let $YE_Adv_EIC                 = '09'
         let $YE_Dep_Care                = '10'
         let $YE_Non_Qual_457            = '11'
         let $YE_Non_Qual_457_Y          = '11A'
         let $YE_Non_Qual_457_N          = '11B'
         let $YE_Box12_StartPos          = '12'
         let $YE_Uncoll_SS_Tax_On_Tips   = '12A'
         let $YE_Uncoll_Med_Tax_On_Tips  = '12B'
         let $YE_Group_Term_Life         = '12C'
         let $YE_401K                    = '12D'
         let $YE_403B                    = '12E'
         let $YE_408K6                   = '12F'
         let $YE_457B                    = '12G'
         let $YE_501C18D                 = '12H'
         let $YE_Sick_Pay                = '12J'
         let $YE_Excise_Tax              = '12K'
         let $YE_Business_Exp            = '12L'
         let $YE_Uncoll_SS_Tax_GTL       = '12M'
         let $YE_Uncoll_Med_Tax_GTL      = '12N'
         let $YE_Excl_Moving_Exp         = '12P'
         let $YE_Basic_Qtrs_and_Subsist  = '12Q'
         let $YE_Med_Svgs_Acct           = '12R'
         let $YE_408P_Simple_Retirement  = '12S'
         let $YE_Adoption_Exp            = '12T'
         let $YE_NonStatutory_Stock_Opt  = '12V'
         let $YE_Health_Savings_Acct     = '12W'
         let $YE_deferral_409a           = '12Y'
         let $YE_income_409a             = '12Z'
         let $YE_Statut_EE               = '13A'
         let $YE_Retire_Plan             = '13B'
         let $YE_Third_Party_Sick_Pay    = '13C'
         let $YE_Other                   = '14'
         let $YE_OtherA                  = '14A'
         let $YE_OtherB                  = '14B'
         let $YE_OtherC                  = '14C'
         let $YE_OtherD                  = '14D'
         let $YE_OtherE                  = '14E'
         let $YE_OtherF                  = '14F'
         let $YE_OtherG                  = '14G'
         let $YE_OtherH                  = '14H'
         let $YE_OtherI                  = '14I'
         let $YE_OtherJ                  = '14J'
         let $YE_OtherK                  = '14K'
         let $YE_OtherL                  = '14L'
         let $YE_OtherM                  = '14M'
         let $YE_OtherN                  = '14N'
         let $YE_OtherO                  = '14O'
         let $YE_OtherP                  = '14P'
         let $YE_OtherQ                  = '14Q'
         let $YE_OtherR                  = '14R'
         let $YE_OtherS                  = '14S'
         let $YE_OtherT                  = '14T'
         let $YE_OtherU                  = '14U'
         let $YE_OtherV                  = '14V'
         let $YE_OtherW                  = '14W'
         let $YE_OtherX                  = '14X'
         let $YE_OtherY                  = '14Y'
         let $YE_OtherZ                  = '14Z'
         let $YE_State                   = '15'
         let $YE_State_ID                = '15A'
         let $YE_State_Wages             = '16'
         let $YE_State_Tax               = '17'
         let $YE_Local_Wages             = '18'
         let $YE_Local_Tax               = '19'
         let $YE_Locality                = '20'
         let $YE_Control_Nbr             = 'A'
         let $YE_ER_ID                   = 'B'
         let $YE_ER_Name                 = 'C1'
         let $YE_ER_Address1             = 'C2'
         let $YE_ER_Address2             = 'C3'
         let $YE_State_City_Zip          = 'C4'
         let $YE_EE_SSN                  = 'D'
         let $YE_EE_FullName             = 'E'
         let $YE_EE_FName                = 'E1'
         let $YE_EE_Init                 = 'E2'
         let $YE_EE_LName                = 'E3'
         let $YE_EE_Suffix               = 'E4'
         let $YE_EE_Address1             = 'F1'
         let $YE_EE_Address2             = 'F2'
         let $YE_EE_Country              = 'F3'
         let $YE_EE_City                 = 'F4'
         let $YE_EE_State                = 'F5'
         let $YE_EE_Zip                  = 'F6'
         let $YE_Roth_401K             = '12AA'
         let $YE_Roth_403B             = '12BB'

         let $YE_ER_HEALTH             = '12DD'
         let $YE_457B_ROTH             = '12EE'

        #ifdef GENERATE_BOX12CC
        if  #RptYear = 2010
          let $HIRE_exempt_wages        = '12CC'
        else
          let $HIRE_exempt_wages        = 'xxxx'
        end-if
        #endif
        
  !Puerto Rico Boxes W-2PR
  !-------------------------

  else
         let $YE_EE_FName                = '01A'
         let $YE_EE_LName                = '01B'
         let $YE_EE_Address1             = '01C'
         let $YE_EE_Address2             = '01D'
         let $YE_State_City_Zip          = '01E'
         let $YE_ER_Name                 = '02A'
         let $YE_ER_Address1             = '02B'
         let $YE_ER_Address2             = '02C'
         let $YE_ER_State_City_Zip       = '02D'
         let $YE_ER_Phone                = '02E'
         let $YE_ER_Closing              = '02F'
         let $YE_ER_Control_Number       = '02G'
         let $YE_EE_SSN                  = '03'
         let $YE_Civil_Status_Single     = '04A'
         let $YE_Civil_Status_Married    = '04B'
         if #RptYear <= 2013
          let $YE_Spouse_SSN              = '05'
          let $YE_Cost_Pension_Annuity    = '06'
          let $ER_Sponsored_Hlth_INS      = '06A'
          let $EE_Charitable_Contribution = '06B'
         else
          let $ER_Sponsored_Hlth_INS      = '05'  ! map it to 06A
          let $EE_Charitable_Contribution = '06'  ! map it to 06B
         end-if
         let $YE_Wages                   = '07'  !??
         let $YE_Commissions             = '08'
         let $YE_Allowance               = '09'
         let $YE_Tips                    = '10'
         let $YE_Total_PR_Wages          = '11'  !??
         let $YE_Reimbursed_Expense      = '12'
         let $YE_Tax_Withheld            = '13'  !??
         let $YE_Retire_Fund             = '14'
         let $YE_CODA_Plans              = '15'
         let $YE_Salary_Act_324          = '16'              !new for 2005
         if #RptYear < 2014
           let $YE_Save_and_Dup          = '16A'
         else
           let $Exempt_Salary_code       = '16A'
           let $YE_Save_and_Dup          = '16B'
         end-if
         let $YE_SS_Wages                = '17'
         let $YE_SS_Tax                  = '18'
         let $YE_Med_Wages               = '19'
         let $YE_Med_Tax                 = '20'
         let $YE_SS_Tips                 = '21'
         let $YE_SS_Tax_Tips             = '22'
         let $YE_Med_Tax_Tips            = '23'
         let $YE_Year                    = 'Y'
  end-if

end-procedure

#if {SITE_ID} = 'PFZ1'

begin-procedure Check-Company-Catagory

    if $PFE_Company = $Prior_PFE_Company
      goto skip_check
    else
      move $PFE_Company to $Prior_PFE_Company
    end-if

    move '' to $PFE_Catagory

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif
begin-SELECT
PFECC.Z_CATEGORY

   move 'A' to $PFE_Catagory

FROM  PS_Z_CATEGORY_TBL PFEC, PS_Z_CATG_COMP_TBL PFECC
WHERE PFECC.COMPANY = $PFE_Company
  AND PFEC.Z_CATEGORY  = '{ADP_CATEGORY}'
  AND PFEC.EFF_STATUS  = 'A'
  AND PFEC.EFFDT       = (SELECT MAX(EFFDT)
                          FROM   PS_Z_CATEGORY_TBL
                          WHERE  Z_CATEGORY = PFECC.Z_CATEGORY
                            AND  EFFDT     <= $PFE_SYSDATE)
  AND PFECC.Z_CATEGORY = PFEC.Z_CATEGORY
  AND PFECC.EFFDT      = PFEC.EFFDT

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

skip_check:

end-procedure

#endif

#if {SITE_ID} = 'DSG1'
----------------------------------------------------------------------     !
begin-procedure get-DSG1-location

     let $DSG1_location = '00000'
     if $State_trimmed = 'NM'
      let $DSG1_location = '{NM_UI_LOCATION_DFLT}'
     end-if

begin-select
DSG1.LOCATION

 let $DSG1_location = &DSG1.LOCATION

 from ps_location_tbl DSG1
 where setid = 'DICKS'
  and state = $state_trimmed
  and location = $location
  and effdt = (select max(effdt)
               from ps_location_tbl DSG11
               where DSG1.setid = DSG11.setid
                 and DSG1.location = DSG11.location)

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

end-procedure

#endif

#if {SITE_ID} = 'HWL1'
!----------------------------------------------------------------------     !
begin-procedure get-Honeywell-location

    let $out_deptid = '00002'

begin-select
HMT.TAX_LOCATION_CD

   let $out_deptid = substr(&HMT.TAX_LOCATION_CD,1,5)

#if {PeopleSoft_Version} = '8'
   FROM  PS_H_MN_TAX_LOC HMT
      WHERE HMT.{Client_Field_Prefix}SITE_LOC_ID{Client_Field_Suffix} = $h_location
#else
   FROM PS_{Client_Table_Prefix}MN_TAX_LOC{Client_Table_Suffix} HMT
      WHERE HMT.LOCATION = $h_location
#endif

end-select

   if $SelectEmplid <> ''
     show 'get-Honeywell-location: h_location ' $h_location ' out_deptid (UI Location) --> ' $out_deptid ' for ' $State_Trimmed
   end-if

end-procedure

#endif

#if {SITE_ID} = 'PFZ1'
begin-procedure init-PFZ1

     #ifdef Stock_option_category
       do Get-Category-Earnings ('{Stock_option_category}', $AsOfDate, $Erncd_List)
       if rtrim($Erncd_List,' ') <> ''
         let $Stock_Option_Erncds = 'EARNDTL.ERNCD in ' || $Erncd_List
         #debugd show 'Stock_option_selection          :  ' $Stock_Option_Erncds
         #define Stock_option_selection
       else
         show 'Stock_option_category ({Stock_option_category}) is defined, but no rows exist in ERNCD Category Table.'
         stop
       end-if
     #endif
     #ifdef Meals_employer_conv_category
       do Get-Category-Earnings ('{Meals_employer_conv_category}', $AsOfDate, $Erncd_List)
       if rtrim($Erncd_List,' ') <> ''
         let $Meals_Employer_Conv_Erncds = 'EARNBAL.ERNCD in ' || $Erncd_List
         #debugd show 'Meals_employer_conv_selection   :  ' $Meals_Employer_Conv_Erncds
         #define Meals_employer_conv_selection
       else
         show 'Meals_employer_conv_category ({Meals_employer_conv_category}) is defined, but no rows exist in ERNCD Category Table.'
         stop
       end-if
     #endif
     #ifdef Moving_exp_3rdParty_category
       do Get-Category-Earnings ('{Moving_exp_3rdParty_category}', $AsOfDate, $Erncd_List)
       if rtrim($Erncd_List,' ') <> ''
         let $Moving_Exp_3rdParty_Erncds = 'EARNBAL.ERNCD in ' || $Erncd_List
         #debugd show 'Moving_exp_3rdParty_selection   :  ' $Moving_Exp_3rdParty_Erncds
         #define Moving_exp_3rdParty_selection
       else
         show 'Moving_exp_3rdParty_category ({Moving_exp_3rdParty_category}) is defined, but no rows exist in ERNCD Category Table.'
         stop
       end-if
     #endif
     #ifdef Qual_transportation_category
       do Get-Category-Earnings ('{Qual_transportation_category}', $AsOfDate, $Erncd_List)
       if rtrim($Erncd_List,' ') <> ''
         let $Qual_Transportation_Erncds = 'EARNBAL.ERNCD in ' || $Erncd_List
         #debugd show 'Qual_transportation_selection   :  ' $Qual_Transportation_Erncds
         #define Qual_transportation_selection
       else
         show 'Qual_transportation_category ({Qual_transportation_category}) is defined, but no rows exist in ERNCD Category Table.'
         stop
       end-if
     #endif
     #ifdef Severence_pay_category
       do Get-Category-Earnings ('{Severence_pay_category}', $AsOfDate, $Erncd_List)
       if rtrim($Erncd_List,' ') <> ''
         let $Severence_Pay_Erncds = 'EARNDTL.ERNCD in ' || $Erncd_List
         #debugd show 'Severence_pay_selection         :  ' $Severence_Pay_Erncds
         #define Severence_pay_selection
       else
         show 'Severence_pay_category ({Severence_pay_category}) is defined, but no rows exist in ERNCD Category Table.'
         stop
       end-if
     #endif
     #ifdef Meal_Allowances_category
       do Get-Category-Earnings ('{Meal_Allowances_category}', $AsOfDate, $Erncd_List)
       if rtrim($Erncd_List,' ') <> ''
         let $Meal_Allowances_Erncds = 'EARNBAL.ERNCD in ' || $Erncd_List
         #debugd show 'Meal_Allowances_selection       :  ' $Meal_Allowances_Erncds
         #define Meal_Allowances_selection
       else
         show 'Meals_Allowances_category ({Meals_Allowances_category}) is defined, but no rows exist in ERNCD Category Table.'
         stop
       end-if
     #endif
end-procedure
#endif

!----------------------------------------------------------------------     !
begin-procedure get-local-rate-sui

     let #wc_rate = 0

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

begin-select
WCR1.RESIDENT_TAX_RT
WCR1.LOCALITY

      let #wc_rate = &WCR1.RESIDENT_TAX_RT

 FROM  PS_LOCAL_TAX_TBL WCR1 {NOLOCK_SQL}
 WHERE WCR1.STATE      = $State_Trimmed
  AND WCR1.LOCALITY    = $get_local_rate
  AND WCR1.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_LOCAL_TAX_TBL {NOLOCK_SQL}
       WHERE  STATE    = WCR1.STATE
         AND  LOCALITY = WCR1.LOCALITY
         AND  EFFDT   <= $Qtr_End_Native)

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    move 'get-local-rate-sui' to $debug-proc1
    move 'PS_LOCAL_TAX_TBL'    to $debug-table1
    do log-delta-time
 #endif

end-procedure

#ifdef SET_QTD_12M_12N_to_YTD_BOX_AMOUNTS
begin-procedure set-qtd-to-year-end-box  !YTD amount for $Box becomes --> #box_amt
   let #box_amt = 0
   let #jj = 0
   while #jj < #box_w2_count
     get $box_tst from Box_W2(#jj) BOX
     if rtrim($box_tst,' ') = rtrim($Box,' ')
       get #box_amt from Box_W2(#jj) AMOUNT
       break
     end-if
     add 1 to #jj
   end-while
end-procedure
#endif

begin-procedure calc-gross99 !called from pbzqtr.sqr too.... go get the QTD and YTD gross wages for situations where no no-limit wages are in balances

 #if {SITE_ID} = 'NXT1'
   if #RptYear >= 2010        !up through 2009, calc the gross... after that... they reporteded the Taxable amounts
         Let #Total_Gross_qtd = #TaxBalance_Txgrs_Qtd
         Let #Total_Gross_ytd = #TaxBalance_Txgrs_Ytd
         goto done_calc_gross99
   end-if
 #endif

#ifdef CALC_GROSS_FROM_BALANCES           !this gets the FIT, FICA and MED YTD's via earnings balances and taxable benefits
  do Get-Fed-Gross-Wages-from-balances
  #ifdef ADD_TAXABLE_BENEFITS_TO_GROSS
   do Get-Fed-Taxable-Benefits-AG
  #endif
#else

  let #Total_Gross_qtd  = 0
  let #Total_Gross_qtd1 = 0
  let #Total_Gross_qtd2 = 0
  let #Total_Gross_qtd3 = 0
  let #Total_Gross_qtd4 = 0
  let #Total_Gross_ytd = 0

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

#ifdef NLGRS_FROM_CHECK_YTD_AMOUNT
begin-select
#else
begin-select distinct
#endif
C99.BALANCE_PERIOD
C99.BALANCE_QTR
C99.TOTAL_GROSS_YTD

  let #Total_Gross_ytd = &C99.TOTAL_GROSS_YTD

  #ifdef NLGRS_FROM_CHECK_YTD_AMOUNT

   evaluate &C99.BALANCE_QTR
     when = 1
          let #Total_Gross_qtd1  = &C99.TOTAL_GROSS_YTD
          break
     when = 2
          let #Total_Gross_qtd2  = &C99.TOTAL_GROSS_YTD - #Total_Gross_qtd1
          break
     when = 3
          let #Total_Gross_qtd3  = &C99.TOTAL_GROSS_YTD - #Total_Gross_qtd1 - #Total_Gross_qtd2
          break
     when = 4
          let #Total_Gross_qtd4  = &C99.TOTAL_GROSS_YTD - #Total_Gross_qtd1 - #Total_Gross_qtd2 - #Total_Gross_qtd3
          break
     when-other
          break
    end-evaluate

   FROM PS_CHECK_YTD C99 {NOLOCK_SQL}
    #ifdef USE_INT_CRITERIA
     WHERE C99.BALANCE_YEAR   = int(\$RptYearZ\)
    #else
     WHERE C99.BALANCE_YEAR   = #RptYear
    #endif
       AND C99.BALANCE_ID     = $Calendar_Year_Id
       AND C99.COMPANY        = $Current_Company
       AND C99.EMPLID         = $Current_Emplid
   #ifdef USE_INT_CRITERIA
       AND C99.BALANCE_PERIOD <= int(\$RptMonthZ\)
   #else
       AND C99.BALANCE_PERIOD <= #RptMonth
   #endif

   Order by C99.BALANCE_PERIOD

  #else

    FROM PS_CHECK_YTD C99 {NOLOCK_SQL}
     #ifdef USE_INT_CRITERIA
      WHERE C99.BALANCE_YEAR   = int(\$RptYearZ\)
     #else
      WHERE C99.BALANCE_YEAR   = #RptYear
     #endif
        AND C99.BALANCE_ID     = $Calendar_Year_Id
        AND C99.COMPANY        = $Current_Company
        AND C99.EMPLID         = $Current_Emplid
        AND C99.BALANCE_PERIOD = (SELECT MAX(D99.BALANCE_PERIOD)
        FROM PS_CHECK_YTD D99 {NOLOCK_SQL}
        WHERE D99.EMPLID       = C99.EMPLID
          AND D99.BALANCE_YEAR = C99.BALANCE_YEAR
          AND D99.BALANCE_ID   = C99.BALANCE_ID
          AND D99.COMPANY      = C99.COMPANY
      #ifdef USE_INT_CRITERIA
          AND D99.BALANCE_PERIOD <= int(\$RptMonthZ\))
      #else
          AND D99.BALANCE_PERIOD <= #RptMonth)
      #endif
   
  #endif

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

  #ifdef NLGRS_FROM_CHECK_YTD_AMOUNT
    evaluate #RptQtr
     when = 1
        let #Total_Gross_qtd = #Total_Gross_qtd1
        break
     when = 2
        let #Total_Gross_qtd = #Total_Gross_qtd2
        break
     when = 3
        let #Total_Gross_qtd = #Total_Gross_qtd3
        break
     when = 4
        let #Total_Gross_qtd = #Total_Gross_qtd4
        break
     when-other
        break
    end-evaluate

  #endif

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    move 'calc-gross99' to $debug-proc1
    move 'PS_CHECK_YTD'    to $debug-table1
    do log-delta-time
 #endif

#endif

done_calc_gross99:

end-procedure

#ifdef CALC_GROSS_FROM_BALANCES

begin-PROCEDURE Get-Fed-Gross-Wages-from-balances

   if $SelectEmplid <> ''
     show 'Get-Fed-Gross-Wages-from-balances to calc gross'
   end-if
   
   let #Total_Gross_qtd                = 0
   let #Total_Gross_ytd                = 0
   let #Gross_Subj_Fed_Wages_QTD       = 0

   let #Total_Gross_ytd_fica           = 0
   let #Total_Gross_ytd_med            = 0

   let #Total_other_ytd = 0
   let #Total_other_ytd_fica = 0
   let #Total_other_ytd_med = 0

   let #Total_earnings_ytd = 0
   let #Total_earnings_ytd_fica = 0
   let #Total_earnings_ytd_med = 0

   #ifdef BOX_01_03_05_SUMMARY
     clear-array name=other_earn
     let #other_earn_count = 0

!old   < 10/7/15
   !  if rtrim($G1_Summary_Company_Selection,' ') <> ''
   !    let $G1_Summary_Company_Selection = 'AND G1.' || $Summary_Company_Selection
   !  else
   !    let $G1_Summary_Company_Selection    = 'AND G1.COMPANY IN ('  || $tick || $Current_Company || $tick || ')'
   !  end-if

!new
    encode <39> into $tick
    let $G1_Summary_Company_Selection    = 'AND G1.COMPANY IN ('  || $tick || $Current_Company || $tick || ')'
    !if $SelectEmplid <> ''
    !  show 'Get-Fed-Gross-Wages-from-balances BOX_01_03_05_SUMMARY for company select ' $G1_Summary_Company_Selection
    !end-if

   #endif

   if $SelectEmplid <> ''
     show 'Get-Fed-Gross-Wages-from-balances  for Company ' $Current_Company
   end-if
   
begin-SELECT
G1.BALANCE_QTR
G1.GRS_QTD
G1.GRS_YTD
G1.ERNCD

   if $SelectEmplid <> ''
     show 'Get-Fed-Gross-Wages-from-balances Q' &G1.BALANCE_QTR ' QTD = ' &G1.GRS_QTD ' YTD = ' &G1.GRS_YTD ' Erncd ' &G1.ERNCD
   end-if

 let $Erncd = &G1.ERNCD
 do Get-Earnings-Type      !$Subject_FWT, $Subject_FICA, $ADD_GROSS, $EarningsType
 #if {SITE_ID} = 'MCK1'
   if $erncd = 'TGA' or $erncd = 'TGF'
     show 'Skipping  ' $erncd ' earnings for Emplid: ' $Current_Emplid  ', GRS_YTD = ' &G1.GRS_YTD
     show ' Flags on ' $erncd ' (Sub_FWT, Sub_FICA, Add_to_Grs, ErnTyp) ' $Subject_FWT $Subject_FICA $ADD_GROSS $EarningsType
     goto skip_earnings_row
   end-if
 #endif

#if {SITE_ID} = 'NXT1'  !8/30/10 GROSS GROSS for NXT1 for 2009 amendments

  if #RptYear = 2009 
    if $Erncd <> 'EXP' and $Erncd <> 'NTT' and $Erncd <> 'NTG' and $Erncd <> 'PTD'   ! 10/19/10 added  NTT, NTG, and PTD
      add &G1.GRS_YTD to #Total_Gross_ytd
      if &G1.BALANCE_QTR = #RptQtr
        add &G1.GRS_QTD to #Total_Gross_qtd
      end-if
    end-if
  end-if

#else

 if $ADD_GROSS = 'Y'

   add &G1.GRS_YTD to #Total_Gross_ytd
   add &G1.GRS_YTD to #Total_Gross_ytd_med
   add &G1.GRS_YTD to #Total_Gross_ytd_fica

   if &G1.BALANCE_QTR = #RptQtr
     add &G1.GRS_QTD to #Total_Gross_qtd
     add &G1.GRS_QTD to #Gross_Subj_Fed_Wages_QTD
   end-if

  else

   !12/22/09 change for this
   if $Subject_FWT = 'Y'
     add &G1.GRS_YTD to #Total_other_ytd
   end-if

   if $Subject_FICA = 'Y'
    add &G1.GRS_YTD to #Total_other_ytd_fica
    add &G1.GRS_YTD to #Total_other_ytd_med
   end-if

 end-if

 if $Subject_FWT = 'Y'
   add &G1.GRS_YTD to #Total_Earnings_ytd
 end-if

 if $Subject_FICA = 'Y'
   add &G1.GRS_YTD to #Total_Earnings_ytd_med
   add &G1.GRS_YTD to #Total_Earnings_ytd_fica
 end-if

#endif

#ifdef BOX_01_03_05_SUMMARY

  let #othern = 0
  let $found_ern = 'f'
  while #othern < #other_earn_count
    get $Erncd_txt from other_earn(#othern) Erncd
    if rtrim($Erncd_txt,' ') = rtrim($Erncd,' ')
       let $found_ern = 't'
       break
    end-if
    add 1 to #othern
  end-while
  
  if $found_ern = 't'
    array-add &G1.GRS_YTD to other_earn(#othern) Amount
  else
   if #other_earn_count < {MAX_OTHER_EARNS_TOTAL}
     put $Erncd
        &G1.GRS_YTD
        $add_gross
        $Subject_FWT
        $Subject_FICA   
        $EarningsDescr
      into other_earn(#other_earn_count)
        Erncd
        Amount
        ADD_GROSS
        SUBJECT_FWT
        SUBJECT_FICA
        DESCR

     add 1 to #other_earn_count
   end-if  
  end-if
#endif

skip_earnings_row:

 FROM  PS_EARNINGS_BAL G1 {NOLOCK_SQL}

 WHERE G1.EMPLID = $Current_Emplid

  #ifdef BOX_01_03_05_SUMMARY
   #ifdef MVS                   !OS400 - /.../, NT - [...], MVS - \...\
     \$G1_Summary_Company_Selection\
   #else
     [$G1_Summary_Company_Selection]
   #endif
  #endif
  
  AND G1.BALANCE_ID = $Calendar_Year_Id
 #ifdef USE_INT_CRITERIA
  AND G1.BALANCE_YEAR = int(\$RptYearZ\) 
 #else
  AND G1.BALANCE_YEAR = #RptYear
 #endif
  AND G1.SPCL_BALANCE = 'N'
  AND G1.BALANCE_PERIOD =
      (SELECT MAX(G11.BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL G11 {NOLOCK_SQL}
       WHERE  G11.EMPLID          = G1.EMPLID
         AND  G11.COMPANY         = G1.COMPANY
         AND  G11.BALANCE_ID      = G1.BALANCE_ID
         AND  G11.BALANCE_YEAR    = G1.BALANCE_YEAR
         AND  G11.EMPL_RCD        = G1.EMPL_RCD
         AND  G11.SPCL_BALANCE    = G1.SPCL_BALANCE
         AND  G11.ERNCD           = G1.ERNCD
      #ifdef USE_INT_CRITERIA
          AND G11.BALANCE_PERIOD <= int(\$RptMonthZ\))
      #else
         AND  G11.BALANCE_PERIOD <= #RptMonth)
      #endif


#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

end-PROCEDURE

begin-PROCEDURE Get-Fed-Taxable-Benefits-AG

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    let $display_dt0 = $display_dt
 #endif

begin-SELECT on-error = SQL-Error
H1.BALANCE_QTR
sum(H1.DED_QTD)      &H1.DED_QTD
sum(H1.DED_YTD)      &H1.DED_YTD

   add &H1.DED_YTD to #Total_Gross_ytd

   if &H1.BALANCE_QTR = #RptQtr
      add &H1.DED_QTD to #Total_Gross_qtd
   end-if

   add &H1.DED_YTD to #Total_earnings_ytd

FROM  PS_DEDUCTION_BAL H1 {NOLOCK_SQL}

WHERE H1.EMPLID = $Current_Emplid
  AND H1.COMPANY = $Current_Company
  AND H1.BALANCE_ID = $Calendar_Year_Id
 #ifdef USE_INT_CRITERIA
  AND H1.BALANCE_YEAR = int(\$RptYearZ\) 
 #else
  AND H1.BALANCE_YEAR = #RptYear
 #endif
  AND H1.DED_CLASS = 'T'   !Taxable Benefit
  AND H1.BALANCE_PERIOD =
      (SELECT MAX(H11.BALANCE_PERIOD)
       FROM   PS_DEDUCTION_BAL H11 {NOLOCK_SQL}
       WHERE  H11.EMPLID          = H1.EMPLID
         AND  H11.COMPANY         = H1.COMPANY
         AND  H11.BALANCE_ID      = H1.BALANCE_ID
         AND  H11.BALANCE_YEAR    = H1.BALANCE_YEAR
         AND  H11.PLAN_TYPE       = H1.PLAN_TYPE
         AND  H11.BENEFIT_PLAN    = H1.BENEFIT_PLAN
         AND  H11.DEDCD           = H1.DEDCD
         AND  H11.DED_CLASS       = H1.DED_CLASS
        #ifdef USE_INT_CRITERIA
         AND  H11.BALANCE_PERIOD <= int(\$RptMonthZ\)) 
        #else
         AND  H11.BALANCE_PERIOD <= #RptMonth)
        #endif

  GROUP BY H1.BALANCE_QTR

end-SELECT

 #ifdef  enable_performance_monitor
    do Get-Current-Time
    move 'Get-Fed-Taxable-Benefits-AG' to $debug-proc1
    move 'PS_DEDUCTION_BAL'    to $debug-table1
    do log-delta-time
 #endif

end-PROCEDURE  !Get-Fed-Taxable-Benefits-AG
#endif

#ifdef SSDP_BENEFITS
begin-procedure process-domestic-partner-benefit-info  !CIS Tax - 3Q 2012 Release, Requirement: 2.2.1

   if $SelectEmplid <> ''
     #debugd show 'process-domestic-partner-benefit-info for taxcode : ' $output_taxcode
   end-if
   let #Earn_QTD = 0
   let #Earn_YTD = 0

#ifdef TAX_UPDATE_12D
         do Get-SSDP 
         if #Earn_YTD <> 0
           let $SSDP_Code = 'SSDP_WRK'
           let $Box = '14A'
           let #SSDP_Benefits_pay_QTD = #Earn_QTD
           let #SSDP_Benefits_pay_YTD = #Earn_YTD
           do insert-SSDP-Benefits
         end-if
#else

!Work Benefits
   #ifdef SSDP_WORK_BENEFITS
         let $Erncd_Sel = '1=1'
         let $Dedcd_Sel = '{SSDP_WORK_BENEFITS}'  ! eg.  #define SSDP_WORK_BENEFITS    SSDP.DEDCD in (''SSW'')
         do Get-SSDP 
   #else
    #ifdef SSDP_WORK_BENEFITS_EARNINGS
         let $Dedcd_Sel = '1=1'
         let $Erncd_Sel = '{SSDP_WORK_BENEFITS_EARNINGS}'  ! eg.  #define SSDP_WORK_BENEFITS_EARNINGS  SSDPE.ERNCD in (''SSW'')
         do Get-General-Earn-Balances
    #endif
   #endif
   if #Earn_YTD <> 0
      let $SSDP_Code = 'SSDP_WRK'
      let $Box = '14A'
      let #SSDP_Benefits_pay_QTD = #Earn_QTD
      let #SSDP_Benefits_pay_YTD = #Earn_YTD
      do insert-SSDP-Benefits
   end-if

   let #Earn_QTD = 0
   let #Earn_YTD = 0
!Retire Benefits   
   #ifdef SSDP_RETIRE_BENEFITS
         let $Erncd_Sel = '1=1'
         let $Dedcd_Sel = '{SSDP_RETIRE_BENEFITS}' ! eg.  #define SSDP_RETIRE_BENEFITS    SSDP.DEDCD in (''SSR'')
         do Get-SSDP 
   #else
    #ifdef SSDP_RETIRE_BENEFITS_EARNINGS
         let $Dedcd_Sel = '1=1'
         let $Erncd_Sel = '{SSDP_RETIRE_BENEFITS_EARNINGS}'  ! eg.  #define SSDP_WORK_BENEFITS_EARNINGS  SSDPE.ERNCD in (''SSW'')
         do Get-General-Earn-Balances
    #endif
   #endif
   if #Earn_YTD <> 0
      let $SSDP_Code = 'SSDP_RET'
      let $Box = '14B'
      let #SSDP_Benefits_pay_QTD = #Earn_QTD
      let #SSDP_Benefits_pay_YTD = #Earn_YTD
      do insert-SSDP-Benefits
   end-if
      
   
#endif

end-PROCEDURE  

#ifdef TAX_UPDATE_12D
begin-PROCEDURE Get-SSDP

  let #Earn_QTD = 0
  let #Earn_YTD = 0

   if $SelectEmplid <> ''
     #debugd show 'Get-SSDP 12D: ' $Current_Company ' ' $Current_Emplid 
   end-if

begin-Select
SSDP.DED_QTD
SSDP.DED_YTD
SSDP.BALANCE_QTR
SSDP.DEDCD
SSDP.BALANCE_PERIOD

   if $SelectEmplid <> ''
     #debugd show 'Get-SSDP 12D: QTD ' &SSDP.DED_QTD ' YTD ' &SSDP.DED_YTD ' DEDCD ' &SSDP.DEDCD ' PER ' &SSDP.BALANCE_PERIOD
   end-if

   add &SSDP.DED_YTD to #Earn_YTD
   if &SSDP.BALANCE_QTR = #RptQtr
      add &SSDP.DED_QTD to #Earn_QTD
   end-if

FROM  PS_DEDUCTION_BAL SSDP, PS_PY_NY_DPB_DED DED2
WHERE SSDP.EMPLID        = $Current_EMPLID
  AND SSDP.COMPANY       = $Current_COMPANY
  AND SSDP.BALANCE_ID    = $Calendar_Year_Id
 #ifdef USE_INT_CRITERIA
  AND SSDP.BALANCE_YEAR = int(\$RptYearZ\) 
 #else
  AND SSDP.BALANCE_YEAR = #RptYear
 #endif
  AND SSDP.DED_YTD      <> 0
  AND SSDP.PLAN_TYPE     = DED2.PLAN_TYPE
  AND SSDP.BENEFIT_PLAN  = DED2.BENEFIT_PLAN
  AND SSDP.DEDCD         = DED2.DEDCD
  AND SSDP.DED_CLASS     = DED2.DED_CLASS
  AND SSDP.BALANCE_PERIOD =
      (SELECT MAX(DED3.BALANCE_PERIOD)
       FROM   PS_DEDUCTION_BAL DED3
       WHERE  DED3.EMPLID      = SSDP.EMPLID
       AND  DED3.COMPANY       = SSDP.COMPANY
       AND  DED3.BALANCE_ID    = SSDP.BALANCE_ID
       AND  DED3.BALANCE_YEAR  = SSDP.BALANCE_YEAR
       #if {Peoplesoft_Version} >= '8'                 
       AND  DED3.BENEFIT_RCD_NBR = SSDP.BENEFIT_RCD_NBR
       #endif
       AND  DED3.PLAN_TYPE     = SSDP.PLAN_TYPE
       AND  DED3.BENEFIT_PLAN  = SSDP.BENEFIT_PLAN
       AND  DED3.DEDCD         = SSDP.DEDCD
       AND  DED3.DED_CLASS     = SSDP.DED_CLASS
      #ifdef USE_INT_CRITERIA
       AND  DED3.BALANCE_PERIOD <= int(\$RptMonthZ\)) 
      #else
       AND  DED3.BALANCE_PERIOD <= #RptMonth)
      #endif


end-SELECT
end-procedure

#else

begin-PROCEDURE Get-SSDP

  let #Earn_QTD = 0
  let #Earn_YTD = 0

   if $SelectEmplid <> ''
     #debugd show 'Get-SSDP: ' $Current_Company ' ' $Current_Emplid 
   end-if
  
begin-SELECT
SSDP.DED_QTD
SSDP.DED_YTD
SSDP.BALANCE_QTR
SSDP.DEDCD
SSDP.BALANCE_PERIOD

   if $SelectEmplid <> ''
     #debugd show 'Get-SSDP: QTD ' &SSDP.DED_QTD ' YTD ' &SSDP.DED_YTD ' DEDCD ' &SSDP.DEDCD ' PER ' &SSDP.BALANCE_PERIOD
   end-if

   add &SSDP.DED_YTD to #Earn_YTD
   if &SSDP.BALANCE_QTR = #RptQtr
      add &SSDP.DED_QTD to #Earn_QTD
   end-if

 FROM PS_DEDUCTION_BAL SSDP {NOLOCK_SQL}

 WHERE SSDP.EMPLID      = $Current_Emplid
  AND SSDP.COMPANY      = $Current_Company
  AND SSDP.BALANCE_ID   = $Calendar_Year_Id
 #ifdef USE_INT_CRITERIA
  AND SSDP.BALANCE_YEAR = int(\$RptYearZ\) 
 #else
  AND SSDP.BALANCE_YEAR = #RptYear
 #endif
  AND SSDP.DED_CLASS    = '{SSDP_BENEFIT_DED_CLASS}' 

  #ifdef MVS
    AND \$Dedcd_Sel\
  #else
    AND [$Dedcd_Sel]
  #endif

  AND SSDP.BALANCE_PERIOD =
      (SELECT MAX(SSDP1.BALANCE_PERIOD)
       FROM   PS_DEDUCTION_BAL SSDP1 {NOLOCK_SQL}
       WHERE  SSDP1.EMPLID          = SSDP.EMPLID
         AND  SSDP1.COMPANY         = SSDP.COMPANY
         AND  SSDP1.BALANCE_ID      = SSDP.BALANCE_ID
         AND  SSDP1.BALANCE_YEAR    = SSDP.BALANCE_YEAR
         #if {Peoplesoft_Version} >= '8'                 
         AND  SSDP1.BENEFIT_RCD_NBR = SSDP.BENEFIT_RCD_NBR
         #endif  
         AND  SSDP1.PLAN_TYPE       = SSDP.PLAN_TYPE
         AND  SSDP1.BENEFIT_PLAN    = SSDP.BENEFIT_PLAN
         AND  SSDP1.DEDCD           = SSDP.DEDCD
         AND  SSDP1.DED_CLASS       = SSDP.DED_CLASS
        #ifdef USE_INT_CRITERIA
         AND  SSDP1.BALANCE_PERIOD <= int(\$RptMonthZ\)) 
        #else
         AND  SSDP1.BALANCE_PERIOD <= #RptMonth)
        #endif

end-SELECT


end-PROCEDURE 
#endif

begin-procedure insert-SSDP-Benefits

  let #t = #SSDP_Benefits_pay_QTD * 100
  do Format-Number(#t,$SSDP_Benefits_pay_QTD, '999999999999999mi')
  let #t = #SSDP_Benefits_pay_YTD * 100
  do Format-Number(#t,$SSDP_Benefits_pay_YTD, '999999999999999mi')

  #debugd show $SSDP_Code ' ' $Current_Company ' ' $Current_Emplid ', QTD Benefits = ' $SSDP_Benefits_pay_QTD ', YTD Benefits = ' $SSDP_Benefits_pay_YTD

  if #Earn_QTD <> 0
    let $rectp = 'W'
    #ifdef QUARTERLY_HISTORY
         let #TaxBalance_Txgrs_qtd_save = #TaxBalance_Txgrs_qtd
         let $output_taxcode_save       = $output_taxcode
         let $output_taxcode            = $state_trimmed || $class_trimmed || $SSDP_Code
         let $SSDP = 't'
         let #TaxBalance_Txgrs_qtd      = #SSDP_Benefits_pay_QTD
         do populate_ADP_QTR_HIST
         let #TaxBalance_Txgrs_qtd      = #TaxBalance_Txgrs_qtd_save
         let $output_taxcode            = $output_taxcode_save
         let $SSDP = ''

    #endif
    
    #ifdef USE_TEMP_TABLE_FOR_OUTPUT
     let $qout_str_save = $qout_str
     let $qout_str = 'W' || rpad($state_trimmed,2,' ') || rpad($class_trimmed,1,' ') || rpad($SSDP_Code,12,' ') || rpad($blank,10,' ') || rpad($SSDP_Benefits_pay_QTD,16,' ') 
                         || rpad($blank,485,' ')
     do Log-W-rec-data
     let $qout_str = $qout_str_save
    #else
       Write 1 FROM             'W':1
                     $state_trimmed:2
                     $class_trimmed:1
                        $SSDP_Code:12
                            $blank:10
            $SSDP_Benefits_pay_QTD:16
                           $blank:485     !528-43 = 485 blanks
  
       add 1 to #reccnt
       add 1 to #company_trailer_reccnt

    #endif

   add #SSDP_Benefits_pay_QTD to #SSDP_Benefits_pay_QTD_hash
 end-if
 
 if rtrim($adp_w2_records,' ') = 't'

    let $rectp = 'B'
    let $Desc = $SSDP_Code
    #ifdef QUARTERLY_HISTORY
       let $BOX_str = 'B ' || rpad($state_trimmed,2,' ') || rpad($box,3,' ') || rpad($Blank,10,' ') || rpad($SSDP_Benefits_pay_YTD,16,' ')
       if $SelectEmplid <> ''
         #debugd show 'calling populate_ADP_QTR_HIST ' $BOX_str
       end-if
       do populate_ADP_QTR_HIST
    #endif

    #ifdef USE_TEMP_TABLE_FOR_OUTPUT
       let $qout_str = 'B ' || rpad($state_trimmed,2,' ') || rpad($box,3,' ') || rpad($Blank,10,' ') || rpad($SSDP_Benefits_pay_YTD,16,' ')
       do log-B-rec-data
    #else

       Write 1 FROM   $rectp:1
                      $blank:1
                      $state_trimmed:2
                      $Box:3
                      $Blank:10
                      $SSDP_Benefits_pay_YTD:16

       add 1 to #reccnt
       add 1 to #company_trailer_reccnt

    #endif
    
    add #SSDP_Benefits_pay_YTD to #SSDP_Benefits_pay_YTD_hash
 end-if
   
end-PROCEDURE  
#endif

begin-PROCEDURE Get-General-Earn-Balances

  let #Earn_QTD = 0
  let #Earn_YTD = 0

   if $SelectEmplid <> ''
     show 'Get-General-Earn-Balances: ' $Current_Company ' ' $Current_Emplid 
   end-if
  
begin-select
SSDPE.GRS_QTD
SSDPE.GRS_YTD
SSDPE.ERNCD
SSDPE.BALANCE_QTR
SSDPE.BALANCE_PERIOD

   if $SelectEmplid <> ''
      show 'Get-General-Earn-Balances: QTD ' &SSDPE.GRS_QTD ' YTD ' &SSDPE.GRS_YTD ' ERNCD ' &SSDPE.ERNCD ' PER ' &SSDPE.BALANCE_PERIOD
   end-if

   add &SSDPE.GRS_YTD to #Earn_YTD
   if &SSDPE.BALANCE_QTR = #RptQtr
      add &SSDPE.GRS_QTD to #Earn_QTD
   end-if

 FROM PS_EARNINGS_BAL{WAREHOUSE_SUFFIX} SSDPE {NOLOCK_SQL}
 WHERE SSDPE.EMPLID            = $Current_Emplid
  AND SSDPE.COMPANY            = $Current_Company
  AND SSDPE.BALANCE_ID         = $Calendar_Year_Id
 #ifdef USE_INT_CRITERIA
  AND SSDPE.BALANCE_YEAR = int(\$RptYearZ\) 
 #else
  AND SSDPE.BALANCE_YEAR = #RptYear
 #endif
  AND SSDPE.SPCL_BALANCE       = 'N'

  #ifdef MVS
    AND \$erncd_sel\
  #else
    AND [$erncd_sel]
  #endif

  AND SSDPE.GRS_QTD > 0
  AND SSDPE.BALANCE_PERIOD     =  (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL{WAREHOUSE_SUFFIX} EB5 {NOLOCK_SQL}
       WHERE  EB5.EMPLID            = SSDPE.EMPLID
         AND  EB5.COMPANY           = SSDPE.COMPANY
         AND  EB5.BALANCE_ID        = SSDPE.BALANCE_ID
         AND  EB5.BALANCE_YEAR      = SSDPE.BALANCE_YEAR
         AND  EB5.SPCL_BALANCE      = SSDPE.SPCL_BALANCE
         AND  EB5.ERNCD             = SSDPE.ERNCD
        #ifdef USE_INT_CRITERIA
         AND  EB5.BALANCE_PERIOD    <= int(\$RptMonthZ\)) 
        #else
         AND  EB5.BALANCE_PERIOD    <= #RptMonth)
        #endif



end-SELECT

end-PROCEDURE 


#ifdef WORKSITE_REPORTING
#ifdef LOG_MWR_SETUP_TBL
begin-procedure Audit-MWR-Setup-Tbl

  if $State_Trimmed <> '$U' and $Class_trimmed = 'U' and (#TaxBalance_Nlgrs_Qtd > 0 or #TaxBalance_Nlgrs_Qtd > 0 or #TaxBalance_Nlgrs_Qtd > 0)
   if #MWR_Audits < 1
     #ifndef MWR_AUDIT_LIMIT            !this can be set in probiz.sqc 
       #define MWR_AUDIT_LIMIT 5000
     #endif
     create-array name=MWR_audit size={MWR_AUDIT_LIMIT}     -
           field=Company:char             -
           field=Emplid:char              -
           field=Worksite:char            -
           field=State:char               -
           field=UI_Loc:char              -
           field=Address:char            -
           field=City:char                -
           field=Descr:char               -
           field=warning:char

     add 1 to #MWR_Audits
   end-if  
   let $found_MWR_Rec = ''

   let $MWR_audit_Extract_compid = rtrim($Extract_compid,' ')
   let $MWR_audit_worksite       = rtrim($worksite_into_extract_mwr,' ')

   if $state_trimmed = 'AK'
     let $Out_Deptid_save = $Out_Deptid
     let $Out_Deptid      = lpad($Area_Code_AK_fix,5,'0')
   end-if

  if $SelectEmplid <> ''
    show 'Audit-MWR-Setup-Tbl ' $MWR_audit_Extract_compid ' ' $MWR_audit_worksite ' ' $state_trimmed ' ' $Out_Deptid 
  end-if
  
#if {SITE_ID} <> 'MLN1'

begin-select
AMWR.{Client_Field_Prefix}CLIENT_ID{Client_Field_Suffix}
AMWR.{Client_Field_Prefix}WORKSITE{Client_Field_Suffix}
AMWR.STATE
AMWR.UI_RPT_CODE
AMWR.EMPLOYER_ID_SUT
AMWR.DESCR
AMWR.ADDRESS1
AMWR.CITY

  let $found_MWR_Rec = 't'
  let $AMWR.DESCR    = substr(&AMWR.DESCR,1,20)
  let $AMWR.ADDRESS  = substr(&AMWR.ADDRESS1,1,20)
  let $AMWR.CITY     = substr(&AMWR.CITY,1,20)
  let $AMWR.DESCR    = rtrim($AMWR.DESCR,' ')
  let $AMWR.ADDRESS  = rtrim($AMWR.ADDRESS,' ')
  let $AMWR.CITY     = rtrim($AMWR.CITY,' ')

  if $SelectEmplid <> ''
    show '  {LOG_MWR_SETUP_TBL}: ' $MWR_audit_Extract_compid ' ' $MWR_audit_worksite ' ' $state_trimmed ' ' $Out_Deptid ' --> ' $AMWR.ADDRESS ' ' $AMWR.CITY ' ' $AMWR.DESCR
  end-if

  FROM  {LOG_MWR_SETUP_TBL} AMWR
   WHERE AMWR.{Client_Field_Prefix}CLIENT_ID{Client_Field_Suffix} = $MWR_audit_Extract_compid
    AND  AMWR.{Client_Field_Prefix}WORKSITE{Client_Field_Suffix}  = $MWR_audit_worksite
    AND  AMWR.STATE       = $state_trimmed
    
#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

#else

begin-select
AMWR.TF_CLIENT_ID
AMWR.TF_WORKSITE
AMWR.STATE
AMWR.UI_RPT_CODE
AMWR.EMPLOYER_ID_SUT
AMWR.DESCR
AMWR.ADDRESS1
AMWR.CITY

  let $found_MWR_Rec = 't'
  let $AMWR.DESCR    = substr(&AMWR.DESCR,1,20)
  let $AMWR.ADDRESS  = substr(&AMWR.ADDRESS1,1,20)
  let $AMWR.CITY     = substr(&AMWR.CITY,1,20)
  let $AMWR.DESCR    = rtrim($AMWR.DESCR,' ')
  let $AMWR.ADDRESS  = rtrim($AMWR.ADDRESS,' ')
  let $AMWR.CITY     = rtrim($AMWR.CITY,' ')

  if $SelectEmplid <> ''
    show '  {LOG_MWR_SETUP_TBL}: ' $MWR_audit_Extract_compid ' ' $MWR_audit_worksite ' ' $state_trimmed ' ' $Out_Deptid ' --> ' $AMWR.ADDRESS ' ' $AMWR.CITY ' ' $AMWR.DESCR
  end-if

  FROM  {LOG_MWR_SETUP_TBL} AMWR
   WHERE AMWR.TF_CLIENT_ID = $MWR_audit_Extract_compid
    AND  AMWR.TF_WORKSITE  = $MWR_audit_worksite
    AND  AMWR.STATE       = $state_trimmed
    
#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select

#endif

  if $found_MWR_Rec <> 't'
    if (#MWR_Audit_Errors < {MWR_AUDIT_LIMIT})
        Put $Extract_compid $Current_Emplid $worksite_into_extract_mwr $state_trimmed $Out_Deptid 'Missing WIC'
           Into MWR_audit(#MWR_Audit_Errors)  Company Emplid Worksite State UI_Loc warning
        add 1 to #MWR_Audit_Errors
    end-if
   else
     add 1 to #found_MWR_TBL
   end-if

   !10/22/13 audit for blank address1 or city fields
   if $found_MWR_Rec = 't' 
    if ($AMWR.ADDRESS = '' and $AMWR.CITY <> '') or ($AMWR.ADDRESS <> '' and $AMWR.CITY = '')
      if (#MWR_Audit_Errors < {MWR_AUDIT_LIMIT})
        Put $Extract_compid $Current_Emplid $worksite_into_extract_mwr $state_trimmed $Out_Deptid $AMWR.ADDRESS $AMWR.CITY $AMWR.DESCR 'Invalid Address or City'
          Into MWR_audit(#MWR_Audit_Errors)  Company Emplid Worksite State UI_Loc Address City Descr warning
        add 1 to #MWR_Audit_Errors
      end-if
    end-if
   end-if

   !11/08/13 audit for RUN mismatch for the 5 states that require it.
   if $found_MWR_Rec = 't' 
    if rtrim(&AMWR.UI_RPT_CODE,' ') <> $Out_Deptid and 
            (($state_trimmed = 'MA') or ($state_trimmed = 'IA') OR ($state_trimmed = 'MN') or ($state_trimmed = 'MI') or ($state_trimmed = 'NM') or ($state_trimmed = 'AK') or ($state_trimmed = 'IN'))
      if (#MWR_Audit_Errors < {MWR_AUDIT_LIMIT})
          let $run_from_MWR_Setup = 'MWR Setup RUN# ' || rtrim(&AMWR.UI_RPT_CODE,' ')
          Put $Extract_compid $Current_Emplid $worksite_into_extract_mwr $state_trimmed $Out_Deptid $run_from_MWR_Setup 'UI Location Mismatch'
          Into MWR_audit(#MWR_Audit_Errors)  Company Emplid Worksite State UI_Loc Descr warning
        add 1 to #MWR_Audit_Errors
      end-if
    end-if
   end-if

   if $state_trimmed = 'AK'
     let $Out_Deptid      = $Out_Deptid_save
   end-if

 end-if

end-PROCEDURE  

begin-procedure print-MWR-Audit  !from pbzqtr.sqr

      show 'MWR_Audit_Errors = ' #MWR_Audit_Errors
      let $E_prior = ''
      let #header_type = 16
      let $ReportTitle  = 'ADP Employment Tax Quarterly. MWR Audit Errors (Missing MWR Setup Data)' 
      ! Company     Emplid        Worksite                  State    UI_Location    Address                   City                    Descr                     Warning
      let #mwr = 0
      while (#mwr < #MWR_Audit_Errors)
           if #current-line > 56
             New-Page
           end-if
           get $mwr_compid $mwr_Emplid $mwr_worksite $mwr_state $mwr_UI_Loc $mwr_addr $mwr_city $mwr_descr $mwr_warning
             from MWR_audit(#mwr)  Company Emplid Worksite State UI_Loc Address City Descr Warning
           print $mwr_compid      (+1,1)                           
           print $mwr_Emplid      (0,13)
           print $mwr_worksite    (0,27)
           print $mwr_state       (0,53)
           print $mwr_UI_Loc      (0,62)
           print $mwr_Address     (0,77)
           print $mwr_City        (0,103)
           print $mwr_Descr       (0,127)
           print $mwr_Warning     (0,153)
           add 1 to #mwr
      end-while
      print 'MWR Records matched    = '        (+2,10)
      print #found_MWR_TBL                     () edit 99999
      print ' (# of SUI wage records with MWR Setup data in {LOG_MWR_SETUP_TBL} Table)' ()
      print 'MWR Records not found  = '        (+1,10)
      print #MWR_Audit_Errors                  () edit 99999
      print ' (# of SUI wage records with missing MWR Setup data in {LOG_MWR_SETUP_TBL} Table)' ()
      New-Page

end-procedure

#endif
#endif
#ifdef ADP_W2_FLAGS_TABLE
begin-procedure Get-Custom-W2-Flags

 let $W2_Message = ''
 let $W2_Flags_override = ''
 
Begin-Select
CW2.{Client_Field_Prefix}W2_PRINT{Client_Field_Suffix}
CW2.{Client_Field_Prefix}W2_PULL{Client_Field_Suffix}
CW2.{Client_Field_Prefix}W2_POST{Client_Field_Suffix}
CW2.MESSAGE_PARM1

  let $Online_Posting_Indicator = rtrim(&CW2.{Client_Field_Prefix}W2_POST{Client_Field_Suffix},' ')
  let $Ee_Pull_Mail             = rtrim(&CW2.{Client_Field_Prefix}W2_PULL{Client_Field_Suffix},' ')
  let $Ee_print_ipay            = rtrim(&CW2.{Client_Field_Prefix}W2_PRINT{Client_Field_Suffix},' ')
  let $W2_Message               = rtrim(&CW2.MESSAGE_PARM1,' ')
  let $W2_Flags_override = 't'
  
  FROM {ADP_W2_FLAGS_TABLE}  CW2
    WHERE CW2.EMPLID = $Current_Emplid
     #ifdef USE_INT_CRITERIA
      AND CW2.CALENDAR_YEAR  = int(\$RptYearZ\) 
     #else
      AND CW2.CALENDAR_YEAR  = #RptYear
     #endif
     
#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select
  
  if $SelectEmplid <> ''
   show 'Get-Custom-W2-Flags: Post ' $Online_Posting_Indicator ', Pull ' $Ee_Pull_Mail ', Print ' $Ee_print_ipay ', override  ' $W2_Flags_override ' ' $W2_Message
  end-if
  
end-procedure
#endif    

! Mar 10, 2015  UI_OVERRIDE - uses PS_TF_UI_OVERRIDE table
#ifdef UI_OVERRIDE
begin-procedure Get-UI-Override

Begin-Select
UIV.UI_RPT_CODE

  let $out_deptid       = substr(&UIV.UI_RPT_CODE,1,5)
  if $SelectEmplid <> ''
   show 'Get-UI-Override: UI Code ' $out_deptid
  end-if
  
  FROM PS_{Client_Table_Prefix}UI_OVERRIDE{Client_Table_Suffix}  UIV
    WHERE  UIV.COMPANY = $Current_Company
      AND  UIV.EMPLID = $Current_Emplid
      AND  UIV.STATE  = $state_trimmed
      AND  UIV.EFF_STATUS = 'A'
      AND  UIV.EFFDT = (SELECT MAX(EFFDT) FROM PS_{Client_Table_Prefix}UI_OVERRIDE{Client_Table_Suffix}
      WHERE  COMPANY       = UIV.COMPANY
        AND  EMPLID        = UIV.EMPLID
        AND  STATE         = UIV.STATE
        AND  EFF_STATUS    = UIV.EFF_STATUS
        AND  EFFDT <= $AsofDate)

#ifdef SELECT_WITH_UR
 with ur
#end-if
end-select
  

  
end-procedure
#endif

#ifdef REDUCE_PR_WAGES_BY_LIMIT_UNDER_27

#if {PeopleSoft_Version} < '8.8'
begin-procedure Get-Associate-Age  !#Age 

 let #age = 99 !default
 
 if rtrim(&A1.BIRTHDATE,' ') <> ''
   do Convert-To-DTU-Date(&A1.BIRTHDATE, $Birth_dt_DTU)
   do dtu-diff-years($Birth_dt_DTU, $Qtr_End_DTU, #age)
   if $SelectEmplid <> ''
        show '$Birth_dt_DTU for PeopleSoft_Version: {PeopleSoft_Version} : ' $Birth_dt_DTU ', $Qtr_End_DTU : ' $Qtr_End_DTU
   end-if
   move #age to $Age   999
   if $SelectEmplid <> ''
        show 'Associate Age = ' $age 
   end-if
 end-if
 
end-procedure
#else

begin-procedure Get-Associate-Age  !#Age 

  let #age = 99 !default
 
BEGIN-SELECT   
BDT.BIRTHDATE
 
   do Convert-To-DTU-Date(&BDT.BIRTHDATE, $Birth_dt_DTU)
   do dtu-diff-years($Birth_dt_DTU, $Qtr_End_DTU, #age)
   if $SelectEmplid <> ''
        show '$Birth_dt_DTU : ' $Birth_dt_DTU ', $Qtr_End_DTU : ' $Qtr_End_DTU
   end-if
       
  FROM PS_PERSON BDT {NOLOCK_SQL}
  WHERE BDT.EMPLID  = $Current_Emplid
 
#ifdef SELECT_WITH_UR
 {SELECT_WITH_UR} with ur
#endif
end-select

   move #age to $Age   999
   if $SelectEmplid <> ''
        show 'Associate Age = ' $age 
   end-if
 
end-procedure
#endif
#endif


#ifdef Q4_2015
begin-procedure Get-General-Job-Data !	LAU - Occupational code Standard Occupational Code (SOC) W 331-350 OR       Job Title   - Client defined Job Title for this employee W 550-629  (new field)

  let $Gen_Occup_Title  = ''   
  !let $Gen_Occup_Code   = ''
  !let $Gen_Workers_comp = ''
  !let $Gen_US_SOC_CD    = ''

Begin-Select
GGJT.DESCR
!GGJT.JOBCODE
!GGJT.WORKERS_COMP_CD
!GGJT.US_SOC_CD

 
  let $Gen_Occup_Title  = rtrim(&GGJT.DESCR,' ')                            !550-629
!  let $Gen_Occup_Code   = rtrim(&GGJT.JOBCODE,' ')
!  let $Gen_Workers_comp = rtrim(&GGJT.WORKERS_COMP_CD,' ')
!  let $Gen_US_SOC_CD    = rtrim(&GGJT.US_SOC_CD,' ')                        !331-350
 
  FROM PS_JOBCODE_TBL GGJT {NOLOCK_SQL}
   WHERE GGJT.JOBCODE = $Input_Jobcode         AND
         GGJT.SETID   = $JOB_SETID             AND
         GGJT.EFFDT=(SELECT MAX(EFFDT)
     FROM PS_JOBCODE_TBL GGJT1 {NOLOCK_SQL}
      WHERE GGJT1.JOBCODE = GGJT.JOBCODE       AND
            GGJT1.SETID   = GGJT.SETID         AND
            GGJT1.EFFDT <= $Qtr_End_Native)
 
#ifdef SELECT_WITH_UR
 {SELECT_WITH_UR} with ur
#endif
end-select

end-procedure

begin-procedure Get-State-Withholding-Tax-Balances   

  let $WI_YTD  = ''
  let $NonWI_YTD  = ''
  let $WI_Nil_Indicator = 'N'

BEGIN-SELECT 
WISC.STATE
WISC.TXGRS_YTD
WISC.TAX_YTD

     if $SelectEmplid <> ''
       show 'Get-State-Withholding-Tax-Balances: YTD Withholding: ' &WISC.STATE ', Wages: ' &WISC.TXGRS_YTD ', Taxes ' &WISC.TAX_YTD
     end-if

     if rtrim(&WISC.STATE,' ') = 'WI'
       let $WI_YTD = 'Y'
     end-if
     if rtrim(&WISC.STATE,' ') <> 'WI'
       let $NonWI_YTD = 'Y'
     end-if
     
     FROM  PS_TAX_BALANCE WISC {NOLOCK_SQL}
       WHERE  WISC.EMPLID        =  $Current_Emplid
         AND  WISC.COMPANY       =  $Current_Company
         AND  WISC.STATE        <> '$U'
         AND  WISC.TAX_CLASS     = 'H'
         AND  WISC.BALANCE_YEAR  = #RptYear
         AND  WISC.BALANCE_ID    = $Calendar_Year_Id
         AND  WISC.BALANCE_PERIOD =
          (SELECT MAX(BALANCE_PERIOD)
           FROM PS_TAX_BALANCE {NOLOCK_SQL}
           WHERE COMPANY      = WISC.COMPANY
            AND EMPLID        = WISC.EMPLID
            AND BALANCE_YEAR  = WISC.BALANCE_YEAR
            AND BALANCE_ID    = WISC.BALANCE_ID
            AND STATE         = WISC.STATE
            AND LOCALITY      = WISC.LOCALITY           
            #ifndef IGNORE_PSD_CD
            AND  WORK_PSD_CD  = WISC.WORK_PSD_CD
            AND  RES_PSD_CD   = WISC.RES_PSD_CD
            #endif
            AND TAX_CLASS     = WISC.TAX_CLASS
            AND BALANCE_PERIOD  <= #RptMonth)           

      AND (WISC.TXGRS_YTD > 0   OR   WISC.TAX_YTD > 0)    
  
#ifdef SELECT_WITH_UR
 {SELECT_WITH_UR} with ur
#endif
end-select

     if $nonWI_YTD = 'Y' and $WI_YTD = ''
       let $WI_Nil_Indicator = 'Y'
     end-if

end-procedure

#ifdef PA_PO_BOX_FIX

!The proposed solution is to apply the following logic in the Quarterly Extract:
!	If an employee has a HOME Address Type with Address Field 1 defined as a PO Box lookup the employee’s Work Location Address and send that in place of the Home Address.  Consider any potential iteration of PO Box (P.O. Box, PO Box, PO. Box, etc.)
!	If an employee has a PO  Box value in Address Field 2, make this value blank (null) on the extract file.

!For all employees with an out of state PO Box address having PA local taxes:
!	If a street address appears in Address 2 field, replace the PO box address with the Address 2 data and leave Address 2 field blank
!	If no street address appears in Address 2 field, then replace the PO Box address with employee work location address

begin-procedure  PA-PO-Box-Fix  !Emp_Personal_Address1, Emp_Personal_Address2, Emp_City, Emp_state, Emp_zip

 if $Emp_State <> 'PA'                                        !2/12/16 - New
   do Get-PA-Local-Withholding-Tax-Balances                   !2/12/16 - New   
 end-if                                                       !2/12/16 - New
 
 if $Emp_State = 'PA' OR ($Emp_State <> 'PA' and              !02/12/16 - Change
                         ($non_Philly_PSD = 't' or $yes_Philly_PSD  = 't'))  !2/26/16 - Add $yes_Philly_PSD  = 't'


   let $PA_PO_Box_Fix = 'f'
   let $A1 = translate($Emp_Personal_Address1,'.'  ,'')   
   let $A1 = upper(translate($A1,' '  ,'')  )
   let $A2 = translate($Emp_Personal_Address2,'.'  ,'')   
   let $A2 = upper(translate($A2,' '  ,'')  )

   if $SelectEmplid <> ''
      show 'PA-PO-Box-Fix ' $Emp_Personal_Address1 ' ' $Emp_Personal_Address2  ' (orig)'   ' A1 = ' $A1 ', A2 = ' $A2
   end-if

   if substr($A1,1,5) = 'POBOX' or substr($A1,1,3) = 'BOX'
     let $PA_PO_Box_Fix = 't'
     if substr($A2,1,5) <> 'POBOX' and substr($A2,1,3) <> 'BOX' and $A2 <> ''
       LET $Emp_Personal_Address1    =  $Emp_Personal_Address2
       LET $Emp_Personal_Address2    =  ''
     else
       do Get-Work-Location-Address  !set $Emp_Personal_Address1 Emp_Personal_Address2, Emp_City, Emp_state, Emp_zip
     end-if
   end-if

   let $A2 = translate($Emp_Personal_Address2,'.'  ,'')   
   let $A2 = upper(translate($A2,' '  ,'')  )
   if substr($A2,1,5) = 'POBOX' or substr($A2,1,3) = 'BOX'
    let $PA_PO_Box_Fix = 't'
    let $Emp_Personal_Address2 = ''
   end-if
 
   if $SelectEmplid <> ''
      show 'PA-PO-Box-Fix ' $Emp_Personal_Address1 ' ' $Emp_Personal_Address2 ' (corrected) ' $PA_PO_Box_Fix
   end-if
   
 end-if
    
end-procedure

begin-procedure  Get-Work-Location-Address  !set: Emp_Personal_Address1, Emp_Personal_Address2, Emp_City, Emp_state, Emp_zip

Begin-Select
WLB.ADDRESS1
WLB.ADDRESS2
WLB.CITY
WLB.STATE
WLB.POSTAL 

  LET $Emp_Personal_Address1    =  &WLB.ADDRESS1
  LET $Emp_Personal_Address2    =  &WLB.ADDRESS2
  LET $Emp_City                 =  &WLB.CITY
  LET $Emp_state                =  &WLB.STATE
  LET $Personal_ZIP             =  &WLB.POSTAL

  if substr($Personal_Zip,6,1) = '-' or
    substr($Personal_Zip,6,1) = ' '
    let $Emp_Zip     = substr($Personal_Zip,1,5) ||
                       substr($Personal_Zip,7,4)
  else
     let $Emp_Zip     = substr($Personal_Zip,1,9)
  end-if

  if $SelectEmplid <> ''
    show 'Get-Work-Location-Address: ' $Emp_Personal_Address1 ' ' $Emp_Personal_Address2 ' ' $Emp_City ' ' $Emp_state ' ' $Emp_Zip ' for ' $location '/' $JOB_SETID
  end-if
  
 
  FROM PS_LOCATION_TBL WLB
  WHERE  WLB.LOCATION = $Location
     AND WLB.SETID    = $JOB_SETID
     AND WLB.EFFDT =  (SELECT MAX(WLB_ED.EFFDT) FROM PS_LOCATION_TBL WLB_ED 
        WHERE WLB.SETID    = WLB_ED.SETID 
          AND WLB.LOCATION = WLB_ED.LOCATION 
          AND WLB_ED.EFFDT <= $Qtr_End_Native) 

#ifdef SELECT_WITH_UR
 {SELECT_WITH_UR} with ur
#endif
end-select

  do Check_PA_Address

end-procedure

#endif

#ifdef F1_VISA_PHILI_FIX

!The proposed solution is to apply the following logic in the Quarterly Extract:
!       If job.FICA_STATUS_EE = 'E'
!	If an employee has a HOME Address State = 'PA' and City like "Phila"
!	If an employee has a PO  Box value in Address Field 2, make this value blank (null) on the extract file.

begin-procedure  F1_VISA_PHILI_FIX  !Emp_Personal_Address1, Emp_Personal_Address2, Emp_City, Emp_state, Emp_zip

 if $Emp_State = 'PA'

   if $SelectEmplid <> ''
      show 'F1_VISA_PHILI_FIX ' $Emp_Personal_Address1 ' ' $Emp_Personal_Address2  ' (orig)'
   end-if

   let $C1 = translate($Emp_City,'.'  ,'')   
   let $C1 = upper(translate($C1,' '  ,'')  )

   if substr($C1,1,5) = 'PHILA'
     do Set_Default_PA_Address
   end-if

 end-if

end-procedure


#endif !end F1_VISA_PHILI_FIX

#ifdef PA_PHILLY_ADDRESS_FIX   !Emp_Personal_Address1, Emp_Personal_Address2, Emp_City, Emp_state


begin-procedure Check_PA_Address

   let $Set_Default_PA_Address = 'f'

   let $A1 = translate($Emp_Personal_Address1,'.'  ,'')   
   let $A1 = upper(translate($A1,' '  ,'')  )
   let $A2 = translate($Emp_Personal_Address2,'.'  ,'')   
   let $A2 = upper(translate($A2,' '  ,'')  )

   if substr($A1,1,5) = 'POBOX' or substr($A1,1,3) = 'BOX' or substr($A2,1,5) = 'POBOX' or substr($A2,1,3) = 'BOX' or
      $Emp_State = '' or $Emp_State = ' '                                                         !03/21/16 - New
     do Set_Default_PA_Address
   end-if

end-procedure


begin-procedure Set_Default_PA_Address
   LET $Emp_Personal_Address1    =  rtrim('{DEFAULT_PA_ADDRESS1}',' ')
   LET $Emp_Personal_Address2    =  rtrim('{DEFAULT_PA_ADDRESS2}',' ')
   LET $Emp_State                = 'PA'                                                          !02/26/16 - New to ensure state is 'PA'
   LET $Emp_City                 =  rtrim('{DEFAULT_PA_CITY}',' ')
   LET $Emp_ZIP                  =  rtrim('{DEFAULT_PA_ZIP}',' ')
   if $SelectEmplid <> ''
      show 'Set_Default_PA_Address ' $Emp_Personal_Address1 ' ' $Emp_Personal_Address2  ' ' $Emp_City ' ' $Emp_zip
   end-if
   let $Set_Default_PA_Address = 't'
end-procedure


!The proposed solution is to apply the following logic in the Quarterly Extract:
!	If an employee has a HOME Address Type with a City like “Phila%” AND the employee has EIT Wages at a Pennsylvania PSD Code other than 510101, then select the maximum Effective Dated HOME Address where the City is not like “Phila%”.
!	If no previous address is found, list the employee of the Quarterly Validation Report Address Error List.

begin-procedure  PA-Philly-Address-Fix

 if $SelectEmplid <> ''
    show 'PA-Philly-Address-Fix: ' $emp_State ' ' $Emp_City
 end-if

 let $C1 = translate($Emp_City,'.'  ,'')   
 let $C1 = upper(translate($C1,' '  ,'')  )

 if $Emp_State = 'PA' and substr($C1,1,5) = 'PHILA'
   do Get-PA-Local-Withholding-Tax-Balances   
   if $non_Philly_PSD = 't'
     do Select-address-prior-to-Philly
     let $C1 = translate($Emp_City,'.'  ,'')   
     let $C1 = upper(translate($C1,' '  ,'')  )
    if substr($C1,1,5) = 'PHILA'
      do Set_Default_PA_Address
    end-if
   end-if
 else                                                           !3/21/16 - New
  if $Emp_State = '' or $Emp_State = ' '                        !3/21/16 - New
     do Get-PA-Local-Withholding-Tax-Balances                   !3/21/16 - New
    if $non_Philly_PSD = 't' or $yes_Philly_PSD  = 't'          !3/21/16 - New
      do Select-address-prior-to-Philly                         !3/21/16 - New
    end-if                                                      !3/21/16 - New
  end-if                                                        !3/21/16 - New
 end-if

 if $SelectEmplid <> ''
    show 'PA-Philly-Address-Fix After: ' $emp_State ' ' $Emp_City  !3/21/16 - New
 end-if
end-procedure

begin-procedure Get-PA-Local-Withholding-Tax-Balances 

  let $non_Philly_PSD  = ''
  let $yes_Philly_PSD  = ''                    !02/26/16 - New

BEGIN-SELECT                                   !03/04/16 - Remove - loops = 1
PENN.STATE
PENN.LOCALITY
PENN.TXGRS_QTD
PENN.TAX_QTD

     if $SelectEmplid <> ''
       show 'Get-PA-Local-Withholding-Tax-Balances : QTD Withholding: ' &PENN.STATE ', Wages: ' &PENN.TXGRS_QTD ', Taxes ' &PENN.TAX_QTD ', Locality ' &PENN.LOCALITY
     end-if

!02/26/16 - New logic starts
!           Replaced - let $non_Philly_PSD  = 't'
     If &PENN.LOCALITY = '510101'   OR
        &PENN.LOCALITY = 'I510012M'
!03/04/16 - Remove        &PENN.LOCALITY = ' '
        let $yes_Philly_PSD  = 't'
     Else
        let $non_Philly_PSD  = 't'
     End-if
!02/26/16 - New logic ends
     
     FROM  PS_TAX_BALANCE PENN {NOLOCK_SQL}
       WHERE  PENN.EMPLID        =  $Current_Emplid
         AND  PENN.COMPANY       =  $Current_Company
         AND  PENN.STATE         = 'PA'
         AND  PENN.TAX_CLASS     = 'H'
 !02/26/16 - Remove -         AND  NOT PENN.LOCALITY in ('510101','I510012M',' ')
         AND  NOT PENN.LOCALITY in (' ')                  ! 03/04/16 - New
         AND  PENN.BALANCE_YEAR  = #RptYear
         AND  PENN.BALANCE_QTR   = #RptQtr
         AND  PENN.BALANCE_ID    = $Calendar_Year_Id
         AND  PENN.BALANCE_PERIOD =
          (SELECT MAX(BALANCE_PERIOD)
           FROM PS_TAX_BALANCE {NOLOCK_SQL}
           WHERE COMPANY      = PENN.COMPANY
            AND EMPLID        = PENN.EMPLID
            AND BALANCE_YEAR  = PENN.BALANCE_YEAR
            AND BALANCE_ID    = PENN.BALANCE_ID
            AND STATE         = PENN.STATE
            AND LOCALITY      = PENN.LOCALITY             ! 1/2/8  some locals were not coming across this was omitted
            #ifndef IGNORE_PSD_CD
            AND  WORK_PSD_CD  = PENN.WORK_PSD_CD
            AND  RES_PSD_CD   = PENN.RES_PSD_CD
            #endif
            AND TAX_CLASS     = PENN.TAX_CLASS
            AND BALANCE_PERIOD  <= #RptMonth)           ! added 8/13/08, get balances through last day of quarter

      AND (PENN.TXGRS_QTD > 0   OR   PENN.TAX_QTD > 0)    
  
#ifdef SELECT_WITH_UR
 {SELECT_WITH_UR} with ur
#endif
end-select

     if $SelectEmplid <> ''
       show 'Get-PA-Local-Withholding-Tax-Balances : non_Philly_PSD --> ' $non_Philly_PSD '  ' $yes_Philly_PSD
     end-if


end-procedure


begin-procedure Select-address-prior-to-Philly

Begin-Select           loops=1
PA_PERADD.ADDRESS1
PA_PERADD.ADDRESS2
PA_PERADD.CITY
PA_PERADD.STATE
PA_PERADD.POSTAL
PA_PERADD.EFFDT

 
  LET $Emp_Personal_Address1    =  &PA_PERADD.ADDRESS1
  LET $Emp_Personal_Address2    =  &PA_PERADD.ADDRESS2
  LET $Emp_City                 =  &PA_PERADD.CITY
  LET $Emp_state                =  &PA_PERADD.STATE
  LET $Personal_ZIP             =  &PA_PERADD.POSTAL

  if substr($Personal_Zip,6,1) = '-' or
    substr($Personal_Zip,6,1) = ' '
    let $Emp_Zip     = substr($Personal_Zip,1,5) ||
                       substr($Personal_Zip,7,4)
  else
     let $Emp_Zip     = substr($Personal_Zip,1,9)
  end-if

 
  if $SelectEmplid <> ''
    show 'Select-address-prior-to-Philly: ' $Emp_Personal_Address1 ' ' $Emp_Personal_Address2 ' ' $Emp_City ' ' $Emp_state ' ' $Emp_Zip
  end-if
 
  FROM PS_ADDRESSES PA_PERADD {NOLOCK_SQL}
   WHERE PA_PERADD.EMPLID       = $Current_Emplid
     AND PA_PERADD.ADDRESS_TYPE = 'HOME'
     AND NOT PA_PERADD.CITY     LIKE ('Phila%')
     AND NOT PA_PERADD.STATE    IN ('',' ')                                       !3/21/16 - New
     AND PA_PERADD.EFFDT       <= $Qtr_End_Native
     ORDER by PA_PERADD.EFFDT DESC
     
 
#ifdef SELECT_WITH_UR
 {SELECT_WITH_UR} with ur
#endif
end-select

  do Check_PA_Address                                                             !2/9/2016 - replace PA-PO-Box-Fix to choose default

end-procedure

#endif

#endif  !end of Q4, 2015 options
        

#ifdef TIPS_DRIVE_BOX_12A_QTD
begin-procedure Tips-Box-12A-QTD  !set #12A_QTD = Tax Balance, Tax Class J - G

  let #tbc = 0
  let #Class_D_Taxes = 0
  let #Class_E_Taxes = 0
  let #Class_J_Taxes = 0
  let #Class_G_Taxes = 0
  while #tbc < #Last_TaxBalance_Cnt
     Add 1 to #tbc
     get $State_TB $Class_TB #QTD_TB from TaxBalance(#tbc) TaxBalance_State  TaxBalance_Tax_Class TaxBalance_Tax_QTD 
     if $State_TB = '$U' and $Class_TB = 'D'
       let #Class_D_Taxes = #QTD_TB
     end-if
     if $State_TB = '$U' and $Class_TB = 'E'
       let #Class_E_Taxes = #QTD_TB
     end-if
     if $State_TB = '$U' and $Class_TB = 'J'
       let #Class_J_Taxes = #QTD_TB
     end-if
     if $State_TB = '$U' and $Class_TB = 'G'
       let #Class_G_Taxes = #QTD_TB
     end-if
  end-while
  let #12A_QTD = (#Class_E_Taxes - #Class_D_Taxes) + (#Class_J_Taxes - #Class_G_Taxes)

  if $SelectEmplid <> ''
   show 'Tips-Box-12A-QTD: 12A_QTD Uncollected FICA (Taxes for Classes: (E-D)+(J-G) = (' #Class_E_Taxes '-' #Class_D_Taxes ')+(' #Class_J_Taxes '-' #Class_G_Taxes  ') = ' #12A_QTD
  end-if

end-procedure
#endif

#ifdef TIPS_DRIVE_BOX_12B_QTD
begin-procedure Tips-Box-12B-QTD  !set #12B_QTD = Tax Balance, Tax Class Z - T

  let #tbc = 0
  let #Class_Q_Taxes = 0
  let #Class_F_Taxes = 0
  let #Class_Z_Taxes = 0
  let #Class_T_Taxes = 0
  while #tbc < #Last_TaxBalance_Cnt
     Add 1 to #tbc
     get $State_TB $Class_TB #QTD_TB from TaxBalance(#tbc) TaxBalance_State  TaxBalance_Tax_Class TaxBalance_Tax_QTD 
     if $State_TB = '$U' and $Class_TB = 'Q'
       let #Class_Q_Taxes = #QTD_TB
     end-if
     if $State_TB = '$U' and $Class_TB = 'F'
       let #Class_F_Taxes = #QTD_TB
     end-if
     if $State_TB = '$U' and $Class_TB = 'Z'
       let #Class_Z_Taxes = #QTD_TB
     end-if
     if $State_TB = '$U' and $Class_TB = 'T'
       let #Class_T_Taxes = #QTD_TB
     end-if
  end-while
  let #12B_QTD = (#Class_Q_Taxes - #Class_F_Taxes) + (#Class_Z_Taxes - #Class_T_Taxes)

  if $SelectEmplid <> ''
   show 'Tips-Box-12B-QTD: 12B_QTD Uncollected MED  (Taxes for Classes: (Q-F)+(Z-T) = (' #Class_Q_Taxes '-' #Class_F_Taxes ')+(' #Class_Z_Taxes '-' #Class_T_Taxes  ') = ' #12B_QTD
  end-if

end-procedure
#endif
        
#ifdef Q2_2016
begin-procedure Extract-Resident-Address

#if {PeopleSoft_Version} < '8.8'

  let $Employee_Residential_Address1 = $Emp_Personal_Address1
  let $Employee_Residential_Address2 = $Emp_Personal_Address2
  let $Employee_Residential_City     = $Emp_City
  let $Employee_Residential_State    = $Emp_state
  let $Employee_Residential_Zip      = $Emp_zip

#else
  let $Employee_Residential_Address1 = ''
  let $Employee_Residential_Address2 = ''
  let $Employee_Residential_City = ''
  let $Employee_Residential_State = ''
  let $Employee_Residential_Zip = ''
  
Begin-Select           loops=1
#ifdef cast_ps_addresses       
cast(RESADD.ADDRESS1 as char(55)) &RESADD.ADDRESS1
cast(RESADD.ADDRESS2 as char(55)) &RESADD.ADDRESS2
cast(RESADD.CITY as char(30))     &RESADD.CITY
cast(RESADD.STATE as char(6))     &RESADD.STATE
cast(RESADD.POSTAL as char(12))   &RESADD.POSTAL
cast(RESADD.COUNTRY as char(3))   &RESADD.COUNTRY
#else
RESADD.ADDRESS1
RESADD.ADDRESS2
RESADD.CITY
RESADD.STATE
RESADD.POSTAL
RESADD.COUNTRY
#endif

  LET $Employee_Residential_Address1    =  &RESADD.ADDRESS1
  LET $Employee_Residential_Address2    =  &RESADD.ADDRESS2
  LET $Employee_Residential_City        =  &RESADD.CITY
  LET $Employee_Residential_State       =  &RESADD.STATE
  LET $Employee_Residential_Zip         =  &RESADD.POSTAL

  uppercase $Employee_Residential_Address1
  uppercase $Employee_Residential_Address2
  uppercase $Employee_Residential_City

  if rtrim(&RESADD.COUNTRY,' ') <> 'USA'
    let $Employee_Residential_City = rtrim($Employee_Residential_City,' ') || ' ' || rtrim($Employee_Residential_State,' ') || ' ' || rtrim($Employee_Residential_Zip,' ') || ' ' || rtrim(&RESADD.COUNTRY,' ')
    move '  '        to $Employee_Residential_State
    move '         ' to $Employee_Residential_Zip
  end-if

  if substr($Employee_Residential_Zip,6,1) = '-' or
    substr($Employee_Residential_Zip,6,1) = ' '
    let $Employee_Residential_Zip     = substr($Employee_Residential_Zip,1,5) ||
                       substr($Employee_Residential_Zip,7,4)
  else
     let $Employee_Residential_Zip     = substr($Employee_Residential_Zip,1,9)
  end-if
 
  if $SelectEmplid <> ''
    show 'Extract-Resident-Address: ' $Employee_Residential_Address1 ' ' $Employee_Residential_Address2 ' ' $Employee_Residential_City ' ' $Employee_Residential_State ' ' $Employee_Residential_Zip
  end-if

  FROM PS_ADDRESSES RESADD {NOLOCK_SQL}
   WHERE RESADD.EMPLID       = $Current_Emplid
     AND RESADD.ADDRESS_TYPE = '{RESIDENT_ADDRESS_TYPE}'
     AND RESADD.EFFDT       <= $Qtr_End_Native
     ORDER by RESADD.EFFDT DESC
     
 
#ifdef SELECT_WITH_UR
 {SELECT_WITH_UR} with ur
#endif
end-select

 
  if ($Employee_Residential_Address1 = '' and $Employee_Residential_Address2 = '') or $PA_PO_Box_Fix = 't' or $Set_Default_PA_Address = 't'

  
    let $Employee_Residential_Address1 = $Emp_Personal_Address1
    let $Employee_Residential_Address2 = $Emp_Personal_Address2
    let $Employee_Residential_City     = $Emp_City
    let $Employee_Residential_State    = $Emp_state
    let $Employee_Residential_Zip      = $Emp_zip

    if $SelectEmplid <> ''
      show 'Extract-Resident-Address: missing home address, OR address was corrected via the PA-PO-Box-Fix procedure, or default PA Address'
      show '  Setting Home to Mail address. POBox fix = ' $PA_PO_Box_Fix ', Set_Default_PA_Address = ' $Set_Default_PA_Address
    end-if

    let $PA_PO_Box_Fix = 'f'
    let $Set_Default_PA_Address = 'f'

  end-if
  
#endif

end-procedure
#endif
 
! -----------------------------------------------------------------------------------------------------------
#include 'geternnm.sqc'   !Get-Earnings-Name
#ifndef SKIP_FILTER
 #include 'adpfltet.sqc'    !filter-tabs-from-address-name
#endif

#if {SITE_ID} = 'CSA1'
 #INCLUDE 'csdecrpt.sqc'  !CSAA sqc for encryption project kintana # 162299
#endif

#if {SITE_ID} = 'RBT1'
 #ifndef RHI_CORP
    #include 'rhiwkcmp.sqc'
 #endif
#endif

#ifdef OHIO_COURTESY_WITHHOLDING   ! 20121017.c
 #include 'adpohio.sqc'            ! 20121017.c
#endif                             ! 20121017.c
! -----------------------------------------------------------------------------------------------------------
