!***********************************************************************************************************************
! ADPHIRE.SQR:ADP TCS HIRE Act INTERFACE - 
!***********************************************************************************************************************
!
!               Confidential and Proprietary
!
! This module is the confidential and proprietary information of
! ADP, Inc. (ADP), it is not to be copied, reprodfuced, or
! transmitted in any form, by any means, in whole or in part, nor is
! it to be used for any purpose other than that for which it is expressly
! provided without the written permission of ADP.
!
! Copyright(c) 2009 Automatic Data Processing, Inc.
!              All Rights Reserved
!***********************************************************************************************************************
! Description              : Client Uses ADP Tax Credit services to administer Tax Credit Programs.
! They need an SQR to provide FICA Wages for the Federal HIRE (Hiring Incentives to Restore Employment) Act.
!
!
! Client	          :  
!
! Frequency               : On Demand
!
!
! Input Parameters        : from   PAY_END_DT 
!                           To     PAY_END_DT
!
! Input Files             : None
!
!
! Input Tables            : 
!                           PS_PAY_CALENDAR
!                           PS_PAY_CHECK
!                           PS_PAY_EARNINGS
!                           PS_PAY_OTH_EARNS
!                           PS_EARNINGS_TBL 
!                           PS_COMPANY_TBL
!                           
! Output Tables           : None
!
!
!
!***********************************************************************************************************************
! Modification History: 
!                       
! Date        Release    Description
! ==========  =========  ================
! 05/24/2010             Esero Tarape,  RCM Technologies. 
!                        Federal HIRE (Hiring Incentives to Restore Employment) Act.
!                        FICA earnings are summed up in the following groups:
!                        Fringe, GTL, Retirement/Pension, Dependent Care, and Other
!***********************************************************************************************************************

#include 'setenv.sqc'  !Set Global and Database-Specific #defines.

!****************************************
! CONSTANT Section
!****************************************

!File opening constants
#define  SITE_ID            'TX-205644'
#define  COMPANIES          ('CCA','FEP','FEW','RES','NPY','VCN','VCX')

!**********************************************************************
! SETUP SECTION
!**********************************************************************
#include 'setup02.sqc'   !Printer and page-size initialization


begin-setup
    declare-variable
        date $Pay_Begin_Dt_MDY1

        date $Pay_End_Dt_MDY1
    end-declare
end-setup

!***********************************************************************
!   PROCEDURE: Initialization
! Description: Perform initization routines for program variables, etc.
!***********************************************************************
begin-REPORT 

   !do Define-Standard-Vars

   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Init-Report

   move 1 to $Year4

   display 'Report Began: ' noline
   display $AsOfToday       noline
   display ', Time '        noline
   display $AsOfNow
  
   display 'Program:  ' noline
   display $sqr-program
   display 'Database: ' noline
   display $sqr-database
   display 'Platform: ' noline
   display $sqr-platform
   display 'Username: ' noline
   display $username
   display 'Oprid:    ' noline
   display $Prcs_OprID
   display 'RunCtlID: ' noline
   display $Prcs_Run_Cntl_ID

   let $Combined = 'N'

   let $ReportID     = 'adpfica'
   let $ReportTitle  = 'ADP Tax Credit Services HIRE Act Extract'

   do Initialize-Variables
   do Open-Payroll-File
   do Process-Individual-Files

   show 'Total Number of Payroll Records : ' #Total_Payroll_Records

   do Reset
   do Stdapi-Term
                      
end-REPORT

!***********************************************************************
begin-procedure Init-Report
!***********************************************************************

  move 'ADPFICA' to $ReportID

  do Stdapi-Init

!  if $prcs_oprid=''
!     display ''
!     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
!     display ''
!    goto last1
!  end-if

  !do Security-Param

  if $prcs_process_instance = ''  
    !do Ask-From-Thru-Date
    do Prompt-Parameters
  else
    do Get-Last-Confirmed-Pay
  end-if

last1:
end-procedure

!***********************************************************************
Begin-Procedure Get-Last-Confirmed-Pay
!***********************************************************************
#debug9 Show 'Get-Last-Confirmed-Pay'

Begin-Select 
distinct(PAY_END_DT)  &PAY_END_DT
PAY_BEGIN_DT

  Let $pay_end_dt     = &PAY_END_DT
  Let $pay_begin_dt   = &PAY_BEGIN_DT
  Let $ThruDate   = &PAY_END_DT
  Let $fromDate   = &PAY_BEGIN_DT

FROM   PS_PAY_CALENDAR 

WHERE  PAY_END_DT              =
      (SELECT MAX(PAY_END_DT)
       FROM   PS_PAY_CALENDAR 
       WHERE  PAY_END_DT      <= sysdate
       AND    PAY_CONFIRM_RUN  = 'Y')
  AND    PAY_CONFIRM_RUN         = 'Y'
End-Select
  
  SHOW '$pay_end_dt  ' $pay_end_dt 
  SHOW ' $pay_begin_dt '  $pay_begin_dt
End-Procedure

!*******************************************************************************
! PROCEDURE Prompt-Parameters
!
! Retrieve execution input parameters
!*******************************************************************************
begin-PROCEDURE Prompt-Parameters

    input $fromDate 'Please enter Pay Begin Date. FORMAT MM/DD/YYYY ' maxlen=10 type=char   
    show ' '               
    show 'Pay Begin Date: ' $fromDate
    show ' '	  
    let $fromDate = strtodate($fromDate, 'mm/dd/yyyy')
    
    input $ThruDate 'Please enter PAY END DATE. FORMAT MM/DD/YYYY ' maxlen=10 type=char   
    show ' '               
    show 'Pay Begin Date: ' $ThruDate
    show ' '
    let $ThruDate = strtodate($ThruDate, 'mm/dd/yyyy') 
 
 end-PROCEDURE !Prompt-Parameters

!**********************************************************************************

!**********************************************************************************
begin-procedure Get-Values

   let $language_cd = $PRCS_LANGUAGE_CD
   do Get-From-Thru-Date

end-procedure

 
!**********************************************************************************
! PROCEDURE Process-Individual-Files
!
!  This procedure generate the control settings to call each pay processing per
!  company. 
!**********************************************************************************
begin-PROCEDURE Process-Individual-Files

begin-SELECT
PC1.COMPANY
PC1.PAY_END_DT

    move &PC1.COMPANY      to $Company
    move '1' to $Year4
    move '-' to $DDelimiter
    move &PC1.PAY_END_DT   to $Pay_End_Dt
    do Process-Pay-Calendar
    
from  PS_PAY_CHECK PC1                 

where  PC1.PAY_END_DT   BETWEEN $FromDate AND $ThruDate
and    PC1.COMPANY NOT IN {COMPANIES}
and    PC1.COMPANY <> PC1.PAYGROUP
and    EXISTS (SELECT 'x'
                from PS_PAY_EARNINGS C
                where  C.COMPANY = PC1.COMPANY 
                AND C.PAY_END_DT = PC1.PAY_END_DT)

Group By  PC1.COMPANY, PC1.PAY_END_DT
ORDER BY 1,2

end-SELECT

end-PROCEDURE
 

!**********************************************************************************
! PROCEDURE Process-Pay-Calendar
!
!  This procedure processes the pay calendar for the given Pay Period Dates
!**********************************************************************************
begin-PROCEDURE Process-Pay-Calendar

begin-SELECT
CC.RUN_ID
CC.COMPANY
CC.PAYGROUP
CC.PAY_END_DT
CC.PAY_BEGIN_DT

  move  &CC.RUN_ID      to  $Run_ID
  move  &CC.COMPANY     to  $company
  move  &CC.PAYGROUP    to  $paygroup
  move  &CC.PAY_END_DT  to  $pay_end_dt
  
  move '1' to $Year4
  move '/' to $DDelimiter
  do Format-Datetime(&CC.PAY_BEGIN_DT,$Pay_Begin_Dt_MDY,{DEFMDY},'','')

  move '1' to $Year4
  move '/' to $DDelimiter
  do Format-DateTime(&CC.PAY_END_DT,$Pay_End_Dt_MDY, {DEFMDY}, '', '')

  do  Process-Payroll-File
    
from PS_PAY_CALENDAR  CC

where CC.COMPANY    =  &PC1.COMPANY
and   CC.PAY_END_DT = &PC1.PAY_END_DT
and   CC.PAY_CONFIRM_RUN = 'Y'

GROUP BY 
CC.RUN_ID,
CC.COMPANY,
CC.PAYGROUP,
CC.PAY_END_DT,
CC.PAY_BEGIN_DT

end-SELECT

end-PROCEDURE !Process-Pay-Calendar

!**********************************************************************************
! PROCEDURE Get-Emp-SSN
!
! This Procedure gets the SSN (National ID) for the given Employee.
!**********************************************************************************
begin-PROCEDURE  Get-Emp-SSN

   move ''  to $SSN
      
begin-SELECT
N.NATIONAL_ID

    let $temp_SSN =  Rtrim(&N.NATIONAL_ID,' ')
    if $temp_SSN <> ''
        move $temp_SSN to $SSN  xxx-xx-xxxx
    end-if    
    
from   PS_PERS_NID N

where  EMPLID  =   $Emplid  
       
end-SELECT

end-PROCEDURE  !Get-Emp-SSN


!**********************************************************************************
! PROCEDURE Process-Payroll-File
!
! This Procedure proceses the Payroll Data for the given Company,Paygroup,PayEndDt.
!**********************************************************************************
begin-PROCEDURE  Process-Payroll-File

begin-SELECT
PC.COMPANY
PC.PAYGROUP
PC.PAY_END_DT
PC.OFF_CYCLE
PC.PAGE_NUM
PC.LINE_NUM
PC.SEPCHK
PC.CHECK_DT
PC.TOTAL_GROSS
PC.EMPLID

     move &PC.TOTAL_GROSS  to  $Total_gross 0999999999.99
     move &PC.EMPLID       to  $Emplid
     
  if &PC.TOTAL_GROSS <> 0  
     move '1' to $Year4
     move '/' to $DDelimiter   
     do Format-Datetime(&PC.CHECK_DT,$CHECK_DT_MDY,{DEFMDY},'','')    
     do  Get-Federal-EIN
     do  Get-Emp-Pay-Earnings
     do Get-Emp-SSN            !Employee SSN
     
     do  Write-Hire-File
  end-if

from  PS_PAY_CHECK PC

where  PC.COMPANY          = &CC.COMPANY
   AND PC.PAYGROUP         = &CC.PAYGROUP
   AND PC.PAY_END_DT       = &CC.PAY_END_DT     
   AND PC.PAYCHECK_STATUS  IN ('A', 'F', 'R')
   AND EXISTS (SELECT 'x'
                from PS_PAY_EARNINGS C
                where     C.COMPANY    = PC.COMPANY
                      AND C.PAYGROUP   = PC.PAYGROUP
                      AND C.PAY_END_DT = PC.PAY_END_DT
                      AND C.OFF_CYCLE  = PC.OFF_CYCLE
                      AND C.PAGE_NUM   = PC.PAGE_NUM
                      AND C.LINE_NUM   = PC.LINE_NUM
                      AND C.SEPCHK     = PC.SEPCHK
                      AND C.PAY_LINE_STATUS IN ('C','F','V')
                      AND C.SINGLE_CHECK_USE IN ('C', 'N'))

ORDER BY PC.EMPLID

end-SELECT

end-PROCEDURE  !Process-Payroll-File


!***********************************************************************************************
! PROCEDURE Get-Emp-Pay-Earnings
!
! This Procedure gets the Employe Regular and Over-time wages (FICA eligible) for given payroll 
!***********************************************************************************************
begin-PROCEDURE  Get-Emp-Pay-Earnings

begin-SELECT
PE.COMPANY
PE.PAYGROUP
PE.PAY_END_DT
PE.OFF_CYCLE
PE.PAGE_NUM
PE.LINE_NUM
PE.ADDL_NBR
PE.SEPCHK
PE.ERNCD_REG_HRS
PE.ERNCD_REG_EARNS
PE.REG_HRS
PE.REG_HRLY_EARNS
PE.REG_EARNS
PE.REG_EARN_HRS
PE.ERNCD_OT_HRS
PE.OT_HRS
PE.OT_HRLY_EARNS

       if &PE.REG_HRS  <>  0  OR &PE.REG_HRLY_EARNS <> 0
          move &PE.ERNCD_REG_HRS  to  $Erncd
          do Check-Erncd-FICA
          if $FICA_Flag = 'Y'
             let  #OTH_Earns   =  #OTH_Earns + &PE.REG_HRLY_EARNS 
          end-if
       end-if
       
       if &PE.REG_EARN_HRS <>  0  OR &PE.REG_EARNS <> 0
          move &PE.ERNCD_REG_EARNS  to  $Erncd
          do Check-Erncd-FICA
          if $FICA_Flag = 'Y'
             let  #OTH_Earns   =  #OTH_Earns + &PE.REG_EARNS
          end-if
       end-if
       
       if &PE.OT_HRS <>  0  OR &PE.OT_HRLY_EARNS <> 0
          move &PE.ERNCD_OT_HRS  to  $Erncd
          do Check-Erncd-FICA
          if $FICA_Flag = 'Y'
             let  #OTH_Earns    =  #OTH_Earns + &PE.OT_HRLY_EARNS
          end-if
       end-if

       do Get-Emp-Other-Earnings

from   PS_PAY_EARNINGS PE

where  PE.COMPANY      =    &PC.COMPANY 
and    PE.PAYGROUP     =    &PC.PAYGROUP
and    PE.PAY_END_DT   =    &PC.PAY_END_DT
and    PE.OFF_CYCLE    =    &PC.OFF_CYCLE
and    PE.PAGE_NUM     =    &PC.PAGE_NUM
and    PE.LINE_NUM     =    &PC.LINE_NUM
and    PE.SEPCHK       =    &PC.SEPCHK
and    PE.OK_TO_PAY    =    'Y'
and    PE.PAY_LINE_STATUS IN ('C','F','V')
and    PE.SINGLE_CHECK_USE IN ('C', 'N')

end-SELECT

end-PROCEDURE !Get-Emp-Pay-Earnings


!***********************************************************************************************
! PROCEDURE Get-Emp-Other-Earnings
!
! This Procedure gets the Employee Other wages (FICA eligible) for given payroll 
!***********************************************************************************************
begin-PROCEDURE  Get-Emp-Other-Earnings

       move ' ' to $Erncd

begin-SELECT
PO.ERNCD
PO.OTH_HRS
PO.OTH_EARNS

       move &PO.ERNCD to $Erncd
       if &PO.OTH_HRS <>  0  OR &PO.OTH_EARNS <> 0
          move &PO.ERNCD  to  $Erncd
          do Check-Erncd-FICA
          if $FICA_Flag = 'Y'
              evaluate $Erncd
                    when = 'GTL'
                    when = 'C11'
                    when = 'CA10'                    
                           let  #GTL_Earns = #GTL_Earns + &PO.OTH_EARNS
                           break
                    when = 'FRG'
                    when = 'C01'
                    when = 'ANL'                    
                           let  #FRG_Earns = #FRG_Earns + &PO.OTH_EARNS
                           break
!                    when = 'RET'
!                    when = 'C31'
!                    when = 'HOL'                    
!                           let  #RET_Earns = #RET_Earns + &PO.OTH_EARNS
!                           break
                    when = 'DEP'
                    when = '021'
                    when = 'C11'
                    when = 'R05'                                        
                           let  #DEP_Earns = #DEP_Earns + &PO.OTH_EARNS
                           break
                    when-other
                           let $Combined = 'Y'
                           let  #OTH_Earns = #OTH_Earns + &PO.OTH_EARNS
                           break
              end-evaluate
          end-if
       end-if

from   PS_PAY_OTH_EARNS PO

where  PO.COMPANY    = &PE.COMPANY
and    PO.PAYGROUP   = &PE.PAYGROUP
and    PO.PAY_END_DT = &PE.PAY_END_DT
and    PO.OFF_CYCLE  = &PE.OFF_CYCLE
and    PO.PAGE_NUM   = &PE.PAGE_NUM
and    PO.LINE_NUM   = &PE.LINE_NUM
and    PO.ADDL_NBR   = &PE.ADDL_NBR
and    PO.SEPCHK     = &PE.SEPCHK       
       
end-SELECT

end-PROCEDURE !Get-Other-Earnings

!***********************************************************************************************
! PROCEDURE Check-Erncd-FICA
!
! This Procedure checks whether the earning code is subjected to FICA.
!***********************************************************************************************
begin-PROCEDURE  Check-Erncd-FICA

   move 'N'  to $FICA_Flag

begin-SELECT
ET.SUBJECT_FICA

   if  &ET.SUBJECT_FICA  =   'Y'    !Earnings subject to FICA
       move 'Y'  to $FICA_Flag
   end-if

from  PS_EARNINGS_TBL  ET

where ET.ERNCD = $Erncd
and   ET.EFFDT =
           ( SELECT MAX(EFFDT)
               from PS_EARNINGS_TBL ET1
              where ET1.ERNCD  =    ET.ERNCD
                and ET1.EFFDT <=    $AsofToday)
and   ET.EFF_STATUS = 'A'             
                  
end-SELECT

end-PROCEDURE !Check-Erncd-FICA


!*******************************************************************************
! PROCEDURE Write-Hire-File
!
! This Procedure writes Payroll file
!*******************************************************************************
begin-PROCEDURE Write-Hire-File

   move #FRG_Earns  to $FRG_Earns  0999999999.99
   move #GTL_Earns  to $GTL_Earns  0999999999.99
   move #RET_Earns  to $RET_Earns  0999999999.99
   move #DEP_Earns  to $DEP_Earns 0999999999.99
   move #OTH_Earns  to $OTH_Earns 0999999999.99

    write 1 from
        $File_ID:20                -
        $SSN:11                    -
        $Emplid:16                 -
        $Federal_EIN:10            -
        $Check_dt_MDY:10           -        
        $pay_begin_dt_MDY:10       -
        $pay_end_dt_MDY:10         -
        $FRG_Earns:13              -
        $GTL_Earns:13              -
        $RET_Earns:13              -
        $DEP_Earns:13              -
        $OTH_Earns:13              -
        $Combined:1
               
    add 1 to #total_Payroll_records
    do Initialize-Variables
   
end-PROCEDURE !Write-Hire-File
   
!*******************************************************************************
! PROCEDURE Open-Payroll-file
!
! Opens TC Hire Output file.
!*******************************************************************************
begin-PROCEDURE Open-Payroll-file

   let $site_id = {SITE_ID}
     
   let #counter = 0
   while #counter = 0
      do Get-Current-DateTime   
      let $FileDate = '20' || substr($ReportDate,7,4) || substr($ReportDate,1,2) || substr($ReportDate,4,2)
      show 'filedate: '$FileDate
      let $FileTime = substr($ReportTime,1,2) || substr($ReportTime,4,2) || substr($ReportTime,7,2)
      show 'filetime: '$FileTime
      let $FileDtTm = $FileDate || '_' || $FileTime              
      show 'filedttm: '$FileDtTm
      let $TCHire_File = '{FILEPREFIX}' || $FileDtTm || '_' || $site_id || '_HIRE_TCHIRE_001-000' || '.txt'
!      let $TCHire_File = '\\corp.gianteagle.com\users\is\ISDVRKK\Output\' || $FileDtTm || '_' || $site_id || '_HIRE_TCHIRE_001-000' || '.txt'
!      let $TCHire_File = '{FILEPREFIX}' || $FileDtTm || '_' || $site_id || '_HIRE_TCHIRE_001-000' || '.txt'
   
      if Exists($TCHire_File) > 0		! does Not Exist
         break
      end-if
   end-while       

   open $TCHire_File as 1 for-writing record=153:vary status=#filestat
   let $File_ID = $FileDtTm

   if #filestat = -1
         display ' '
         display '*** Error on TC Hire Output File Open ***'
         display $TCHire_File
         display ' '
         stop
   else
         show ' '
         show 'TC Hire Output File Created: ' $TCHire_File
   end-if
   
end-PROCEDURE   !Open-Payroll-file

!***********************************************************************
! PROCEDURE  :  Get-Federal-EIN
! Description:  This procedure gets Federal_ein number from PS_COMPANY
!               table
!***********************************************************************
begin-PROCEDURE  Get-Federal-EIN

   move 'Get-Federal-EIN'                to $Paragraph_Name
   move 'PS_COMPANY_TBL'                 to $Table_Name
   move 'SELECT'                         to $Operation
   move 'COMPANY'                        to $SQL_Field_Name1
   move  $COMPANY                        to $SQL_Field_Value1
   move 'EFFDT <= '                      to $SQL_Field_Name2
   move $AsOfToday                       to $SQL_Field_Value2
   move ''             	                 to $SQL_Field_Name3
   move ''        	                 to $SQL_Field_Value3

   move '' to $Federal_Ein 

BEGIN-SELECT 
C.FEDERAL_EIN

   move &c.Federal_EIN to  $Federal_EIN  xx-xxxxxxx
   
    
from   PS_COMPANY_TBL C

where C.COMPANY    = $Company
and   C.EFF_STATUS = 'A' 
and   C.EFFDT      = 
           (SELECT MAX(CM.EFFDT) from  PS_COMPANY_TBL CM 
               where  CM.COMPANY = C.COMPANY
               and    CM.EFFDT  <= $AsOfToday)
end-SELECT     

end-PROCEDURE     !Get-Federal-EIN


!*******************************************************************************
! PROCEDURE Initialize-Variables
!
! This Procedure Initialize variables
!*******************************************************************************
begin-PROCEDURE Initialize-Variables

   move 0 to #FRG_Earns
   move 0 to #GTL_Earns
   move 0 to #RET_Earns
   move 0 to #DEP_Earns
   move 0 to #OTH_Earns

   move ' ' to $SSN
   move ' ' to $Emplid
   move ' ' to $Federal_EIN
   move ' ' to $FRG_Earns
   move ' ' to $GTL_Earns
   move ' ' to $RET_Earns
   move ' ' to $DEP_Earns
   move ' ' to $OTH_Earns

end-PROCEDURE     ! Initialize-Variables

!************************************************************************
! #INCLUDE SQC's
!************************************************************************
#include 'stdapi.sqc'    !Routine to update run status
#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'askftd.sqc'    !from Thru Date input
#include 'hrsecty.sqc'   !Get SQR Security parameters
#Include 'payrnctl.sqc'  !Select-Parameters
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'number.sqc'    !Routines to format numbers
#include 'prcsdef.sqc'   !Define the Process Scheduler variables
#include 'prcsapi.sqc'   !Update Process Request API
#include 'datemath.sqc'  !Date Math sqc
#include 'reset.sqc'     !Reset Sqc
#Include 'sqrtrans.sqc'