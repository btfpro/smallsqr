!***********************************************************************
! GEXBN829: RESET CONFIG6                                              *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!  NARRATIVE: Reset config6                                            *
!                                                                      *
!  This sqr will reset elig_config6 field in JOB to 0000000000 for     *
!  Benefit Programs specified within the code.                         *
!                                                                      *
!  RUN FREQUENCY:                                                      *
!                                                                      *
!  Weekly                                                              *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  ID#     INITIALS    DATE           DESCRIPTION OF THE CHANGE        *  
!***********************************************************************
!  	     AXL       12/03/1999     INITIAL CREATION                 *
!                                     (used GEXBN804 as a template)    *
!                                                                      *    
!            CJH       09/20/2000     Add BP C06, C07 to logic so that *
!                                     cfg 6 is not reset.              *
!                                                                      *    
!           CWB        10/08/2001     Add Cleveland BPs C08, C09, C10, *
!                                     C11, C12, C13.                   *       
!                                                                      *
!           GBD        05/21/2003     Add Bps C14 and C15.             *    
!***********************************************************************

#include 'setenv.sqc' !Set environment

begin-setup

#include 'setup32a.sqc'

declare-report Report-log
Printer-Type=HPLASERJET
  layout=DEFAULT
end-declare

end-setup


!*********************************************************************
!Initial processing, retrieving current dates, etc. 
!*********************************************************************
begin-report
#debug9 show 'gexBN829.begin-report'

  use-report Report-log

  do Init-DateTime
  do Init-Number
  do stdapi-init
  
  move 'GEXBN829' to $ReportID
  move 'Reset config6' to $ReportTitle
  show '$ReportID=' $ReportID
  show '$ReportTitle=' $ReportTitle 

  do Get-Current-DateTime
  show '$asoftoday=' $asoftoday 
  show '$reportdate=' $reportdate 
  
  do Report
  do Commit-Transaction                 

  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term

end-report

!*********************************************************************
!If this Program is being executed through process scheduler, 
!the run control parameters and calls the main processing procedure.
!Otherwise, interrogates the user for the run control parameters and 
!validates them. If the run control parameters are invalid, stops the
!execution.
!*********************************************************************
begin-procedure Report
#debug9 show 'gexbn829.report'

date-time () hh:mi:ss &timeBegan
display 'Report Began: ' noline
display &timeBegan

  move 'N' to $Errorfound

  move $asoftoday to $where_select_date
  
  show '$where_select_date= ' $where_select_date

  do Main-Process

Report-Exit:

  date-time () hh:mi:ss &timeProcess

  display ' Total Current rows Updated in JOB:                 ' noline
  display #current_count 9999999
  do Format-Number(#current_count,$current_count,'9999999')
  let $x000_temp_out =  ' Total Current rows Updated in JOB:                 ' || $current_count 
  print $x000_temp_out  (+1,34)

  display ' Total Future JOB Rows Updated:                     ' noline
  display #future_count 9999999
  do Format-Number(#future_count,$future_count,'9999999')
  let $x000_temp_out =  ' Total Future JOB Rows Updated:                     ' || $future_count
  print $x000_temp_out  (+1,34)                                

  Do Get-Current-DateTime
  Print 'End Time: ' (+2,1)
  Print $ReportDate      ()
  Print ' '              ()
  Print $ReportTime      ()

  display &timeProcess

end-procedure


!*********************************************************************
!Prints the header information in the report log.
!*********************************************************************

begin-heading 8 for-reports=(report-log)
#debug9 show 'gexBN829.begin-heading'

concat '(' with $reporttitle
concat $bp_name with $reporttitle
concat ')' with $reporttitle
 #Include 'stdhdg01.sqc'

  position (-1)
  print 'Report Log' () center bold

  position (+3)

  print 'Emplid'            (,01) bold
  print 'Empl_Rcd'          (,13) bold
  print 'Effective Date'    (,27) bold
  print 'Eff Seq'           (,48) bold
  print 'Old Elig config6'  (,69) bold
  print 'New Elig config6'  (,89) bold
  print '-'             (+1,1,104) fill
 
end-heading


!*********************************************************************
!Prints the footer in the report log
!*********************************************************************

begin-footing 2 for-reports=(Report-log)
#debug9 show 'gexbn829.begin-footing'

page-number (1,108) 'Page '  
last-page () ' of ' '.'

end-footing


!*******************************************************************
!Retrieves all the benefit programs for this SQR program and process 
!them one by one
!*******************************************************************
Begin-Procedure Main-Process
!Display 'gexbn829.Main-Process'

 move 0 to #current_count
 move 0 to #future_count
 move 0 to #delete_count
 
 Do Get-Pay-Calendar
 Do Get-Job

end-procedure

!*****************************************************************
! Get the Maximum Pay End Dt < Current Date from Pay Calendar
!*****************************************************************
begin-procedure Get-Pay-Calendar
!Display 'Get-Pay-Calendar'
begin-select distinct

PC.PAY_BEGIN_DT	&PC.PAY_BEGIN_DT
PC.PAY_END_DT	&PC.PAY_END_DT

   display 'Pay Beg date:' noline
   display &PC.PAY_BEGIN_DT
   display 'Pay end date:' noline
   display &PC.PAY_END_DT

FROM PS_PAY_CALENDAR PC
WHERE PC.PAY_END_DT = (SELECT MAX(PAY_END_DT)
		       FROM PS_PAY_CALENDAR
		       WHERE PAY_END_DT <= $where_select_date
                         and pay_confirm_run = 'Y')
end-select
end-procedure

!*****************************************************************
! Get Job Record Where Action Date Between Pay Begin Date and 
!         Pay End Dt from Pay Calendar
!*****************************************************************
begin-procedure Get-Job
!Display 'Get-Job'

begin-select
JB.EMPLID
JB.EMPL_RCD
JB.EFFDT
JB.EFFSEQ
JB.ELIG_CONFIG6
JB.EMPL_STATUS

   let $emplid 	       =  &JB.EMPLID
   let #empl_rcd_nbr   =  &JB.EMPL_RCD
   let $effective_date =  &JB.EFFDT
   let #effseq	       =  &JB.EFFSEQ
   let $elig_config6   =  &JB.ELIG_CONFIG6
   let $empl_status    =  &JB.EMPL_STATUS
 

  #debug9  Display $emplid
  #debug9   Display $effective_date

   evaluate $empl_status
     when = 'T'
     when = 'D'
     when = 'R'
      add 1 to #current_count
      do Update-Job-Record
      do Print-Record
      Do Get-Future-Job
      break
     when-other
      Do Get-Bas-Partic
      #debug9 display $bas_partic_found
      if $bas_partic_found = 'Y'
        #debug9 display 'Bas Partic:      ' noline
        #debug9 display $bp_benefit_program
        Do Get-Ben-Prog-Partic
        if $ben_prog_partic_found = 'Y'
          #debug9 display 'Ben Prog Partic: ' noline
          #debug9 display $bpp_benefit_program
          if $bp_benefit_program <> $bpp_benefit_program
            if $bp_benefit_program <> 'C01'
            and $bp_benefit_program <> 'C04'
! CJH - 09/20/2000 - Add C06 & C07 for COLUMBUS
            and $bp_benefit_program <> 'C06' 
            and $bp_benefit_program <> 'C07'
! CJH - 09/20/2000 - end
! CWB - 10/08/2001 BEGIN Add Cleveland BPs
            and $bp_benefit_program <> 'C08'
            and $bp_benefit_program <> 'C09'
            and $bp_benefit_program <> 'C10'
            and $bp_benefit_program <> 'C11'
            and $bp_benefit_program <> 'C12'
            and $bp_benefit_program <> 'C13'
            and $bp_benefit_program <> 'C14'        !GBD 05/21/2003 Added
            and $bp_benefit_program <> 'C15'        !GBD 05/21/2003 Added
! CWB - 10/08/2001 END
              add 1 to #current_count
              Do Update-Job-Record
              Do Print-Record
              Do Get-Future-Job
            end-if
          end-if
        end-if
      end-if
   end-evaluate
 

FROM PS_JOB JB
WHERE JB.ACTION_DT BETWEEN &PC.PAY_BEGIN_DT AND &PC.PAY_END_DT
AND   substr(JB.ELIG_CONFIG6,1,1) = 'T'

end-select
end-procedure

!*****************************************************************
! Get Benefit Program from Bas Partic Table
!*****************************************************************
begin-procedure Get-Bas-Partic

  Let $bas_partic_found = 'N'

begin-select
BP.BENEFIT_PROGRAM
BP.JOB_EFFDT

   let $bp_benefit_program = &BP.BENEFIT_PROGRAM
   let $bp_effdt 	   = &BP.JOB_EFFDT

   Let $bas_partic_found = 'Y'

FROM PS_BAS_PARTIC BP
WHERE BP.EMPLID    = $emplid
AND   BP.EMPL_RCD = #empl_rcd_nbr
AND   BP.JOB_EFFSEQ= #effseq
AND   BP.JOB_EFFDT = $effective_date

end-select
end-procedure

!*****************************************************************
! Get Benefit Program from Ben Prog Partic Table
!*****************************************************************
begin-procedure Get-Ben-Prog-Partic

   let $ben_prog_partic_found = 'N' 
 
begin-select
BPP.BENEFIT_PROGRAM

   let $bpp_benefit_program = &BPP.BENEFIT_PROGRAM 

   let $ben_prog_partic_found = 'Y'

FROM PS_BEN_PROG_PARTIC BPP
WHERE BPP.EMPLID    = $emplid
AND   BPP.EMPL_RCD = #empl_rcd_nbr
AND   BPP.EFFDT = (SELECT MAX(EFFDT) FROM PS_BEN_PROG_PARTIC
        WHERE BPP.EMPLID = EMPLID
          AND BPP.EMPL_RCD = EMPL_RCD
          AND BPP.COBRA_EVENT_ID = COBRA_EVENT_ID
          AND EFFDT < $bp_effdt)
end-select
end-procedure

!********************************************************************
! Get Current Job Record
!********************************************************************
begin-procedure Get-Current-Job

begin-select
CJ.EFFDT   
CJ.EFFSEQ
CJ.ELIG_config6

   Do Convert-to-dtu-date($update_effdt,$upd_effdt)
   let $update_effdt  = &CJ.EFFDT
   let #update_effseq = &CJ.EFFSEQ
   let $elig_config6  = &CJ.ELIG_config6
   
   add 1 to #current_count
   Do Update-Job-Record
   Do Print-Record

FROM PS_JOB CJ
WHERE CJ.EMPLID    = $emplid
AND   CJ.EMPL_RCD = #empl_rcd_nbr
AND   CJ.EFFDT = $effective_date
AND   CJ.EFFSEQ = (SELECT MAX(EFFSEQ)
		   FROM PS_JOB
		   WHERE EMPLID    = $emplid
		   AND   EMPL_RCD = #empl_rcd
		   AND   EFFDT = CJ.EFFDT)
AND   substr(CJ.ELIG_config6,4,7) <> '0000000'

end-select
end-procedure

!********************************************************************
! Get Future Job Record(s)
!********************************************************************
begin-procedure Get-Future-Job

begin-select
FJ.EFFDT
FJ.EFFSEQ
FJ.ELIG_config6

   let $effective_date =  &FJ.EFFDT
   let #effseq	       =  &FJ.EFFSEQ
   let $elig_config6   =  &FJ.ELIG_CONFIG6
   
    add 1 to #future_count
    Do Update-Job-Record
    Do Print-Record

FROM PS_JOB FJ
WHERE FJ.EMPLID    = $emplid
AND   FJ.EMPL_RCD = #empl_rcd_nbr
AND   ((FJ.EFFDT > &JB.EFFDT) or ((FJ.EFFDT = &JB.EFFDT) and (FJ.EFFSEQ > &JB.EFFSEQ)))

end-select
end-procedure

!********************************************************************
! Update Current and Future Job Records - Elig config6 Field
!********************************************************************
begin-procedure Update-Job-Record

    let $new_elig_config6 = '0000000000'

begin-sql on-error=SQL-Error-Found('Update-Job-Record')

Update ps_job
set elig_config6 = $new_elig_config6
where emplid     = $emplid
and   empl_rcd  = #empl_rcd_nbr
and   effdt      = $effective_date
and   effseq     = #effseq

end-sql
end-procedure
			   
!********************************************************************
! Print Record
!********************************************************************
begin-procedure Print-Record

 do Format-Number(#empl_rcd_nbr,$empl_rcd_nbr,'9')
 do Format-Number(#effseq,$effseq,'9')

 let $Year4 = '1'
 do Format-DateTime($effective_date, $print_effdt, {DEFMDY}, '', '')

 print $emplid                (+1,1)
 print $empl_rcd_nbr          (0,16)
 print $print_effdt           (0,31)
 print $effseq                (0,54)
 print $elig_config6          (0,75)
 print $new_elig_config6      (0,95)

end-procedure

!********************************************************************
!This procedure displays in the error report if there are any sql erros
!happened in the program
!********************************************************************
begin-procedure SQL-Error-Found($Proc_Name) 
#debug9 show 'gexbn829.SQL-Error-Found'

  print 'SQL Error in ' (,34)
  print $Proc_Name         ()  
  print $_sql-error        () 
  print 'sql-status:'      ()
  print #_sql-status       () edit 99999 

end-procedure

!**************************************************************  
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
!#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'payrnctl.sqc'  !Select-Parameters
#Include 'stdapi.sqc'    !Get_Run_Control Procedure
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'readxlat.sqc'  !Read xlattable
