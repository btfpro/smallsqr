!***********************************************************************
! Interface Name: GEXBN646                                             *
! GEXBN608: This program creates a weekly interface to PFG	for				 *
!           indicative data. This file consists of full file   				 *
!	    information of 401k participants	to the vendor on a weekly basis*
!                                                                      *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module is the confidential and proprietary information of       *
! Giant Eagle, Inc.; it is not to be copied, reproduced, or transmitted*
! in any form, by any means, in whole or in part, nor is it to be used *
! for any purpose other than that for which it is expressly provided   *
! without the written permission of Giant Eagle.                       *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!  $Date:: 16/26/2012				    $                                      *
!  $Revision:: 01               $                                      *
!  $Workfile:: GEXBN646.SQR     $                                      *
!                                                                      *
!***********************************************************************
!                         MODIFICATION HISTORY                         *
!***********************************************************************
!  INITIALS    DATE           DESCRIPTION OF THE CHANGE                *
!***********************************************************************
!  GEX_ITG_113537 ISDVAKG     16/27/2012	     INITIAL CREATION        *
!                                                                      *
!  GEX_ITG_14288  ISDVNPK     02/16/2013	     Changes as per PFG	Req  * 
!  GEX_ITG_14288  ISDVVXK     11/06/2013	     Changes as per PFG	Req  *
!GEX_SEC_REENG 2015-04-29 Vahini Katta                                 *
!Changes related to gex_emplid_mapp/7 digit emplid
!  CHG0044295     1289792     02/09/2017	     Adding EMPLID,Union Code*
!***********************************************************************

!selection criteria
#define #x000_col_selection_criteria_a  02
#define #x000_col_selection_criteria_b  05

#include 'setenv.sqc' !Set environment
begin-setup
!#include 'setup32a.sqc'
#include 'ptset02.sqc'
declare-report Term-Report
Printer-Type=HPLASERJET
  layout=default
end-declare
declare-report Prev-Enroll-Report
Printer-Type=HPLASERJET
  layout=default
end-declare


end-setup

begin-report

  do Init-DateTime
  do Init-Number
  do stdapi-init

  do Get-Calendar-Year-Id
  move 'GEXBN646' to $ReportID
  move ' Dreyfus Indicative Data '   to $ReportTitle     

  display $ReportTitle noline
  display '  ' noline

  do Get-Current-DateTime

  let $sev-error = 'N'

  let #tot_count = 0
  let #write_recs = 0

  do Report
  
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do stdapi-term
end-report

!***********************************************************************
begin-procedure Report
!***********************************************************************
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan

  move 'N' to $Errorfound

  do check_run_controls  
  do Select-Pay-End-Dt   
  
  do process-data
  do Commit-Transaction

  date-time () hh:mi:ss &timeProcess
  display #total_new_enrol 99999 noline
  display '  Total TMs Processed'
  !display #total_changes_count 99999 noline
  !display ' Data changes Processed ' noline
  display &timeProcess
end-procedure

!***********************************************************************
begin-procedure check_run_controls
!***********************************************************************
#debug8 display 'Check-run-Controls'

  if $Prcs_Process_Instance = ''
    Do Ask-As-Of-Date
    Let $X000_WHERE_SELECT_ASOFDATE = $AsOfDate

  else
     
    DO GEXRCBN1-SELECT-PARAMETERS
    Let $X000_WHERE_SELECT_ASOFDATE = &GEX_RC_BEN.ASOFDATE
    if rtrim($X000_WHERE_SELECT_ASOFDATE,' ') = ''
      let $X000_WHERE_SELECT_ASOFDATE = $AsOfToday
    end-if

  end-if

  Do Format-DateTime($X000_WHERE_SELECT_ASOFDATE, $X000_REPORT_HEADING_ASOFDATE ,{DEFDATE}, '', '')

  show '$X000_WHERE_SELECT_ASOFDATE      = ' $X000_WHERE_SELECT_ASOFDATE 
  
  !print 'RUN CONTROL INFORMATION FOR THIS REPORT RUN:'        (+5,{#x000_col_selection_criteria_a})
  !print '$Prcs_OPRID          ='                              (+1,{#x000_col_selection_criteria_b})
  !print $Prcs_OPRID                                           (0,+2)
  !print '$PRCS_RUN_CNTL_ID    ='                              (+1,{#x000_col_selection_criteria_b})
  !print $PRCS_RUN_CNTL_ID                                     (0,+2)

  !print '$X000_WHERE_SELECT_ASOFDATE                     ='   (+1,{#x000_col_selection_criteria_b})
  !print $X000_WHERE_SELECT_ASOFDATE                           (0,+2)
	 
  LET #PAGE-COUNT = 0
  !NEW-PAGE
end-procedure        

begin-heading 6 for-reports=(Prev-Enroll-Report)
 move 'BN646PREV' to $ReportID
 move 'PFG Previous Enrollment Report' to $ReportTitle
 #Include 'stdhdg01.sqc'

  PRINT 'COMPANY/'               (+1,01)
  PRINT 'PAY GROUP/DEPTID'       (+1,1)
  PRINT 'SS-NUM'                 (0,28)
!1289792 - 02/09/2017 - Add  EMPLID and Union Code - Begin
!  PRINT 'NAME'                   (0,38)
!  PRINT 'PLAN TYPE/BENEFIT PLAN' (0,78)
!  PRINT 'EMPL STATUS'            (0,108) 
!  PRINT 'COVERAGE BEGIN DT'      (0,123)
!  PRINT 'EFFECTIVE DT'           (0,141) 
  PRINT 'EMPLID'                 (0,38)
  PRINT 'NAME'                   (0,48)
  PRINT 'PLAN TYPE/BENEFIT PLAN' (0,88)
  PRINT 'EMPL STATUS'            (0,118) 
  PRINT 'COVERAGE BEGIN DT'      (0,133)
  PRINT 'EFFECTIVE DT'           (0,151) 
  PRINT 'UNION CD'               (0,166) 
!1289792 - 02/09/2017 - Add  EMPLID and Union Code - End
end-heading

begin-heading 6 for-reports=(Term-Report)
 move 'BN646TER' to $ReportID
 move 'PFG Termination Report' to $ReportTitle
 #Include 'stdhdg01.sqc'
  !Position (+1)
  !print $Plan_number (0,1)
  !print $gex_dreyfus_plan (0,25)

  PRINT 'SSN'               	 	 (+2,03)
  PRINT 'GE EMPLID'	         		 (0,15)
  PRINT 'NAME'                   (0,30)
  PRINT 'EMPL STATUS'            (0,60)
  PRINT 'PLAN TYPE/BENEFIT PLAN' (0,75)
  PRINT 'BENEFIT EVENT TYPE'     (0,105)
  PRINT 'BENEFIT EVENT DATE'     (0,135)

end-heading

!***********************************************************************
begin-procedure process-data
!***********************************************************************
#debug8 display 'process-data'
   
  let $filename = '{OUTFILE}'||'gexbn646.dat'
  !let $filename = 'T:'||'gexbn646.dat'
  open $filename as 1
     for-writing record=398 status=#writestat

  if #writestat != 0
    display 'Error Opening output file.  Program terminating.'
    stop
  end-if

  move 'N' to $rowfound
  
  let #inputtran = 0
  let $plan_type_String      = 'A.plan_type in ( '
  let $benefit_plan_string   = 'A.benefit_plan in ( '

  let $plan_type_String_1    = 'T.plan_type in ( '
  let $benefit_plan_string_1 = 'T.benefit_plan in ( '
  
  let $plan_type_String_2      = 'D.plan_type in ( '
  let $benefit_plan_string_2   = 'D.benefit_plan in ( '

  let $plan_type_String_3    = 'D1.plan_type in ( '
  let $benefit_plan_string_3 = 'D1.benefit_plan in ( '
  
  let #plan_count = 0
  let #total_new_enrol = 0
  
begin-select on-error=sql-error-found('Process-Data')
xx.gex_dreyfus_plan () on-break print=never level=1 after=dreyfus-plan-change
	save=$prev_dreyfus_plan
xx.plan_type
xx.benefit_plan
xx.gex_prof_shr

			Move &XX.GEX_DREYFUS_PLAN to $dreyfus_plan_number
		
  add 1 to #plan_count
  if #plan_count = 1
     let $plan_type_string = $plan_type_string || ''''||&xx.plan_type||''''
     let $benefit_plan_string = $benefit_plan_string || '''' ||&xx.benefit_plan||''''

		 let $plan_type_string_1 = $plan_type_string_1 || ''''||&xx.plan_type||''''
     let $benefit_plan_string_1 = $benefit_plan_string_1 || '''' ||&xx.benefit_plan||''''
		
		 let $plan_type_string_2 = $plan_type_string_2 || ''''||&xx.plan_type||''''
     let $benefit_plan_string_2 = $benefit_plan_string_2 || '''' ||&xx.benefit_plan||''''

		 let $plan_type_string_3 = $plan_type_string_3 || ''''||&xx.plan_type||''''
     let $benefit_plan_string_3 = $benefit_plan_string_3 || '''' ||&xx.benefit_plan||''''
  
  else
     let $plan_type_string = $plan_type_string||','||''''||&xx.plan_type||''''
     let $benefit_plan_string = $benefit_plan_String||','||''''||&xx.benefit_plan||''''

     let $plan_type_string_1 = $plan_type_string_1 ||','||''''||&xx.plan_type||''''
     let $benefit_plan_string_1 = $benefit_plan_string_1 ||','||'''' ||&xx.benefit_plan||''''

     let $plan_type_string_2 = $plan_type_string_2 ||','||''''||&xx.plan_type||''''
     let $benefit_plan_string_2 = $benefit_plan_string_2 ||','||'''' ||&xx.benefit_plan||''''

     let $plan_type_string_3 = $plan_type_string_3 ||','||''''||&xx.plan_type||''''
     let $benefit_plan_string_3 = $benefit_plan_string_3 ||','||'''' ||&xx.benefit_plan||''''
  end-if

from ps_gex_dreyfus_map xx, PS_GEX_RC_GEXBN646 RC646
where XX.gex_prof_shr = 'N'
AND XX.PLAN_TYPE = '40'
AND RC646.OPRID = $prcs_oprid
AND RC646.RUN_CNTL_ID = $prcs_run_cntl_id
AND XX.GEX_DREYFUS_PLAN = RC646.GEX_DREYFUS_PLAN
order by XX.gex_dreyfus_plan 
end-select

Do Process-Terms

end-procedure

!***********************************************************************
begin-procedure dreyfus-plan-change
!***********************************************************************
#debug8 display 'dreyfus-plan-change'

if #plan_count > 0
   let $plan_type_string = $plan_type_String||')'
   let $benefit_plan_string = $benefit_plan_string||')'

   let $plan_type_string_1 = $plan_type_String_1||')'
   let $benefit_plan_string_1 = $benefit_plan_string_1||')'
   
   let $plan_type_string_2 = $plan_type_String_2||')'
   let $benefit_plan_string_2 = $benefit_plan_string_2||')'

   let $plan_type_string_3 = $plan_type_String_3||')'
   let $benefit_plan_string_3 = $benefit_plan_string_3||')'

   display $plan_type_String
   display $benefit_plan_string
   display $plan_type_String_1
   display $benefit_plan_string_1
   display $plan_type_String_2
   display $benefit_plan_string_2
   display $plan_type_String_3
   display $benefit_plan_string_3

   move $prev_dreyfus_plan to $gex_dreyfus_plan

   move 'Dreyfus Plan Number: ' to $Plan_number
   
   Do process-active-enrollments
   !Do Process-Terms
      
   let $plan_type_String      = 'A.plan_type in ( '
   let $benefit_plan_string   = 'A.benefit_plan in ( '

   let $plan_type_String_1    = 'T.plan_type in ( '
   let $benefit_plan_string_1 = 'T.benefit_plan in ( '
  
   let $plan_type_String_2      = 'D.plan_type in ( '
   let $benefit_plan_string_2   = 'D.benefit_plan in ( '

   let $plan_type_String_3    = 'D1.plan_type in ( '
   let $benefit_plan_string_3 = 'D1.benefit_plan in ( '

   let #plan_count = 0

end-if

end-procedure

!***********************************************************************
begin-procedure Process-Active-Enrollments
!***********************************************************************
#debug8 display 'Process-Active-Enrollments'
     
	Let $emplid = ' '
	let $leave_code = ' '
	let $leave_begin_dt = ' '
	let $leave_end_dt = ' '
	Let $benefit_event_dt = ' '
	Let $benefit_event_type = ' '

begin-select ON-ERROR=SQL-Error-Found('Process-Active-Enrollments')
C1.EMPLID,
B.NAME,
!MAP.EMPLID,
TO_CHAR(B.BIRTHDATE,'MM/DD/YYYY')		&b.birthdate
TO_CHAR(C1.HIRE_DT,'MM/DD/YYYY')		&c1.hire_dt
B.SEX,
B.ADDRESS1,
B.ADDRESS2,
B.CITY,
B.STATE,
B.POSTAL,
C1.LOCATION,
C1.JOBCODE,
C1.EMPL_STATUS,
TO_CHAR(C1.TERMINATION_DT,'MM/DD/YYYY')	&c1.term_date
C1.EFFDT,
C1.ACTION,
C1.ACTION_REASON,
TO_CHAR(C1.LAST_HIRE_DT,'MM/DD/YYYY')	&c1.rehire_dt
A.EMPL_RCD,
A.BENEFIT_NBR,
A.COVERAGE_BEGIN_DT,
A.EFFDT,
A.PLAN_TYPE,
A.BENEFIT_PLAN,
C1.ANNUAL_RT,
C1.COMPANY,
C1.PAYGROUP,
C1.DEPTID,
C1.UNION_CD
B.MAR_STATUS
 
  move &C1.emplid to $emplid
  move &A.empl_rcd to $empl_rcd
  move &C1.EFFDT to $job_effdt
  move &c1.empl_status to $empl_status
  move &c1.action to $action
  move &c1.action_reason to $action_reason
  move &c1.jobcode to $jobcode
  move &c1.deptid to $deptid
  move &b.name to $name
  !move &map.emplid to $map_emplid !GEX_SEC_REENG 2015-04-29 Vahini Katta
  move &a.plan_type to $plan_type
  move &A.BENEFIT_PLAN to $benefit_plan
  move &A.BENEFIT_PLAN to $file_benefit_plan
  move &c1.term_date to $benefit_event_dt
  move &B.SEX to $sex
	move &B.ADDRESS1 to $address1
	move &B.ADDRESS2 to $address2
	move &B.CITY to $city
	move &B.STATE to $state
	move &B.POSTAL to $postal
	move &C1.LOCATION to $location
	move &B.BIRTHDATE to $birthdate
  move &C1.HIRE_DT to $hire_dt
  move &C1.REHIRE_DT to $rehire_dt
  move &C1.UNION_CD to $union_cd
  Let $union_cd = $union_cd || '0000000'
  move &A.BENEFIT_NBR to $benefit_nbr
  move &C1.COMPANY to $company
  move &B.MAR_STATUS TO $mar_status
    
  Let $benefit_event_type = ' '  
  Do Get-415-ERNCD
  Do Get-415-Hours		!ISDVNPK 02/16/2013
  Do Get-Spcl-Hrs
  Do Get-Spcl-Earns
  Do Check-4W-Plantype
  If $plan_type_w_found = 'Y'
  	Do Get-Savings-Erncd-Spcl-4W
  	add #spcl_earns_w to #spcl_earns
  	Move #spcl_earns to $spcl_earns
  	Let $spcl_earns = edit($spcl_earns,'0999999V99')
  Else
    !Move #spcl_earns to $spcl_earns !ISDVVXK
    Let $spcl_earns = edit($spcl_earns,'0999999V99')	
  End-if    
  
  If ($empl_status = 'L' or $empl_status = 'P')
     Do Check-LOA-Row
     If $loa_exists = 'Y'
      Do Check-COR-Row
     If $cor_exists = 'Y'
       let $tm_action = 'COR'
       let $tm_actn_reason = $cor_actn_reason
      else
       let $tm_action = $loa_action
       let $tm_actn_reason = $loa_actn_reason
     End-if
        Do Get-Leave-Code
     		let $leave_code = $tm_leave_code
	   		let $leave_begin_dt = $loa_effdt
	   		Let $leave_begin_dt = edit($leave_begin_dt,'MM/DD/YYYY')
	   		let $leave_end_dt = ' '
	   		Do Write-Record
	   Else
	       let $tm_action = $action
         let $tm_actn_reason = $action_reason
         Do Get-Leave-Code
     		let $leave_code = $tm_leave_code
	   		let $leave_begin_dt = $job_effdt
	   		Let $leave_begin_dt = edit($leave_begin_dt,'MM/DD/YYYY')
	   		let $leave_end_dt = ' '
	   		Do Write-Record
     End-if 
   End-if
   
  If $empl_status = 'A' 
    
  	Do Check-RFL-Row
  	If $rfl_exists = 'Y'
  	  Let $leave_end_dt = $rfl_effdt
  	  Let $leave_end_dt = edit($leave_end_dt,'MM/DD/YYYY')
  	  Let $leave_Code = ' '
  	  Let $leave_begin_dt = ' '
  	  Do Write-Record
  	Else  
  		let $leave_begin_dt = ' '
	   	let $leave_Code = ' '
	   	let $leave_end_dt = ' '
	   	Do Write-Record
  	End-If	  
  End-if
  
  move 'Y' to $rowfound
  add 1 to #inputtran
 
FROM  PS_JOB C1, PS_Savings_Plan A, PS_PERSONAL_DATA B!, PS_GEX_EMPLID_MAPP MAP
WHERE  a.coverage_elect = 'E'
AND C1.EMPL_STATUS IN ('A','L','P','S')
and [$plan_type_string]
and [$benefit_plan_string]
AND C1.EMPLID = A.EMPLID
AND C1.EMPL_RCD = A.EMPL_RCD
AND C1.EMPLID = B.EMPLID
!GEX_SEC_REENG 2015-04-29 Vahini Katta Begins
!AND C1.EMPLID = MAP.SSN
!AND C1.EMPL_RCD = MAP.EMPL_RCD 
!GEX_SEC_REENG 2015-04-29 Vahini Katta Ends
AND C1.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB
		WHERE EMPLID = C1.EMPLID
		AND EMPL_RCD = C1.EMPL_RCD
		AND EFFDT <= $range_end_dt)
AND C1.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB
		WHERE EMPLID = C1.EMPLID
		AND EMPL_RCD = C1.EMPL_RCD
		AND EFFDT = C1.EFFDT)
AND A.EFFDT = (SELECT MAX(A1.EFFDT) FROM PS_SAVINGS_PLAN A1
			   WHERE A1.EMPLID = A.EMPLID
			   AND A1.EMPL_RCD = A.EMPL_RCD
			   AND A1.PLAN_TYPE = A.PLAN_TYPE
			   AND A1.BENEFIT_NBR = A.BENEFIT_NBR
			   AND A1.EFFDT <= $range_end_dt)	
ORDER BY A.EMPLID, A.EMPL_RCD, A.PLAN_TYPE					
End-Select

  if $rowfound = 'N'
    display  '** NO Indicative data new enrollments selected for this plan: '  noline
    display $gex_dreyfus_plan
  else
    display 'Number of Enrollments for plan ' noline
    display $gex_dreyfus_plan noline
    display ' is ' noline
    display #inputtran
    move 'N' to $rowfound
    add #inputtran to #total_new_enrol 
    move 0 to #inputtran
  end-if

end-procedure

!***********************************************************************
Begin-procedure Process-Terms
!***********************************************************************
#debug8 display 'Process-Terms'
     
	move ' ' to $emplid
	let $benefit_plan = ' '
	let $leave_code = ' '
	let $leave_begin_dt = ' '
	let $leave_end_dt = ' '
	Let $benefit_event_dt = ' '
	Let $benefit_event_type = ' '

begin-select ON-ERROR=SQL-Error-Found('Process-Terms')
CC1.EMPLID,
BB.NAME,
!MAP1.EMPLID, !GEX_SEC_REENG 2015-04-29 Vahini Katta
TO_CHAR(BB.BIRTHDATE,'MM/DD/YYYY')		&BB.BIRTHDATE
TO_CHAR(CC1.HIRE_DT,'MM/DD/YYYY')		&CC1.HIRE_DT
BB.SEX,
BB.ADDRESS1,
BB.ADDRESS2,
BB.CITY,
BB.STATE,
BB.POSTAL,
CC1.LOCATION,
CC1.JOBCODE,
CC1.EMPL_STATUS,
CC1.TERMINATION_DT,	
CC1.EFFDT,
CC1.ACTION,
CC1.ACTION_REASON,
TO_CHAR(CC1.LAST_HIRE_DT,'MM/DD/YYYY')	&CC1.REHIRE_DT
AA.EMPLID,
AA.EMPL_RCD,
AA.BENEFIT_NBR,
AA.COVERAGE_BEGIN_DT,
AA.EFFDT,
AA.PLAN_TYPE,
AA.BENEFIT_PLAN,
CC1.ANNUAL_RT,
CC1.COMPANY,
CC1.PAYGROUP,
CC1.DEPTID,
CC1.UNION_CD
BB.MAR_STATUS
 
  move &CC1.EMPLID to $emplid
  move &AA.EMPL_RCD to $empl_rcd
  move &CC1.EFFDT to $job_effdt
  move &CC1.EMPL_STATUS to $empl_status
  move &CC1.ACTION to $action
  move &CC1.ACTION_REASON to $action_reason
  move &CC1.JOBCODE to $jobcode
  move &CC1.DEPTID to $deptid
  move &BB.NAME to $name
  !move &MAP1.EMPLID to $map_emplid !GEX_SEC_REENG 2015-04-29 Vahini Katta
  move &AA.PLAN_TYPE to $plan_type
  move &AA.BENEFIT_PLAN to $file_benefit_plan
  move &CC1.COMPANY to $company
  move &BB.SEX to $sex
	move &BB.ADDRESS1 to $address1
	move &BB.ADDRESS2 to $address2
	move &BB.CITY to $city
	move &BB.STATE to $state
	move &BB.POSTAL to $postal
	move &CC1.LOCATION to $location
  move &AA.COVERAGE_BEGIN_DT to $coverage_begin_dt
  move &CC1.TERMINATION_DT to $term_date
  move &BB.BIRTHDATE to $birthdate
  move &CC1.HIRE_DT to $hire_dt
  move &CC1.REHIRE_DT to $rehire_dt
  move &AA.BENEFIT_NBR to $benefit_nbr
  move &BB.MAR_STATUS to $mar_status
  move &CC1.UNION_CD to $union_cd
  Let $union_cd = $union_cd || '0000000'
  
  show 'Term TM: ' $emplid
  Do Check-Prev-Enrollment
    
  If $prev_enrol_found = 'Y'
    If ($empl_status = 'A' or $empl_status = 'L' or $empl_status = 'P') 
        Let $benefit_event_type = '9'
  			Let $benefit_event_descr = 'Active EE or Plan Term'
  			show 'Term Savings EE Type: ' $benefit_event_type 
  			move $coverage_begin_dt to $benefit_event_dt
  			Let $benefit_event_dt = edit($benefit_event_dt,'MM/DD/YYYY')
  			show 'benefit_event_dt: ' $benefit_event_dt
  			Do Get-415-ERNCD
  			Do Get-415-Hours		!ISDVNPK 02/16/2013
  			Do Get-Spcl-Hrs
  			Do Get-Spcl-Earns
  			Do Check-4W-Plantype
  			If $plan_type_w_found = 'Y'
  				Do Get-Savings-Erncd-Spcl-4W
  				add #spcl_earns_w to #spcl_earns
  				Move #spcl_earns to $spcl_earns
  				Let $spcl_earns = edit($spcl_earns,'0999999V99')
  			Else
    			Move #spcl_earns to $spcl_earns 
    			Let $spcl_earns = edit($spcl_earns,'0999999V99')	
  			End-if    
  	   	Do Write-Record
  	Else  	
  	 		If ($action <> 'TER' or $action <> 'RET') 
  	 			Do Get-Last-Term-Row
  	 			If $ter_exists = 'Y'
  	 			  Move $ter_action to $action
  	 			End-If  
  	 		End-if
  	 			move $term_date to $benefit_event_dt
  	 			Let $benefit_event_dt = edit($benefit_event_dt,'MM/DD/YYYY')
  	 			Do Get-415-ERNCD
  				Do Get-415-Hours		!ISDVNPK 02/16/2013
  				Do Get-Spcl-Hrs
  				Do Get-Spcl-Earns
  				Do Check-4W-Plantype
  				If $plan_type_w_found = 'Y'
  					Do Get-Savings-Erncd-Spcl-4W
  					add #spcl_earns_w to #spcl_earns
  					Move #spcl_earns to $spcl_earns
  					Let $spcl_earns = edit($spcl_earns,'0999999V99')
  				Else
    				Move #spcl_earns to $spcl_earns 
    				Let $spcl_earns = edit($spcl_earns,'0999999V99')	
  				End-if   
  	   		Evaluate $action 	
  	   		SHOW 'Action: '  $action 
  	 				When = 'TER'
  	 				When = 'TWP' 
  	 				 
  	 				  If ($action_reason = 'DEA' or $action_reason = 'DE2')
  	 						Let $benefit_event_type = '5'
  	 						Let $benefit_event_descr = 'Death' 
  	 					Else
  	 					  Let $benefit_event_type = '1'
  	 				 		Let $benefit_event_descr = 'Termination'	 
  	 					End-if
  	 					Break	
  	 				
  	 				When = 'RET'
  	 				When = 'RWP' 
  	 					If ($action_reason = 'RET')
  	 						Let $benefit_event_type = '3'
  	 						Let $benefit_event_descr = 'Retirement'  
  	 					End-if
  	 					Break	
  	 				When-Other
  	 					Let $benefit_event_type = '9'
  	 					Let $benefit_event_descr = 'Active EE or Plan Term'  
  	 			 End-Evaluate		
  	 			 Do Write-Record
  	 		!End-if
  	 				
  	End-if	
  	use-report Term-Report
    !GEX_SEC_REENG 2015-04-29 Vahini Katta Begins
  	!print $emplid (+1,03)
  	!print $map_emplid (,15)
    do Get-Emp-Ssn ($emplid, $Ssn_Out) !GEX_SEC_REENG 2015-04-29 Vahini Katta
    print $ssn_out (+1,03)
    print $emplid (,15)
    !GEX_SEC_REENG 2015-04-29 Vahini Katta Ends
  	print $name (,30)
  	print $empl_status (,60)
  	let 	$comb_bp = &AA.plan_type||'/'||$benefit_plan
  	print $comb_bp (,75)
  	print $benefit_event_descr (,105)
  	print $benefit_event_dt (,135)
  Else
      use-report Prev-Enroll-report
     		print &CC1.company (+1,3)
  			print '/' ()
  			print &CC1.paygroup ()
  			print '/' ()
  			print &CC1.deptid ()
        !GEX_SEC_REENG 2015-04-29 Vahini Katta Begins
        do Get-Emp-Ssn (&CC1.emplid, $Ssn_Out) 
  			!print &CC1.emplid (,25)
        print $Ssn_Out (,25)
        !GEX_SEC_REENG 2015-04-29 Vahini Katta Ends
!1289792 - 02/09/2017 - Add  EMPLID and Union Code - Begin
 ! 			print &BB.name (,38)
        print &CC1.emplid (,38)
  			print &BB.name (,48)
!1289792 - 02/09/2017 - Add  EMPLID and Union Code - End
  			let $comb_bp = &AA.plan_type
!1289792 - 02/09/2017 - Add  EMPLID and Union Code - Begin
!  			print $comb_bp (,78)
!  			print &CC1.empl_status (,108) 
!  			print &AA.coverage_begin_dt (,123)
!  			print &AA.effdt (,141)
  			print $comb_bp (,88)
  			print &CC1.empl_status (,118) 
  			print &AA.coverage_begin_dt (,133)
  			print &AA.effdt (,151)
        print &CC1.UNION_CD  (,166)
!1289792 - 02/09/2017 - Add  EMPLID and Union Code - End  	 
  End-if
  
  move 'Y' to $rowfound
  add 1 to #inputtran
 
FROM  PS_JOB CC1, PS_Savings_Plan AA, PS_PERSONAL_DATA BB!, PS_GEX_EMPLID_MAPP MAP1
WHERE  ((AA.COVERAGE_ELECT = 'T'
AND AA.COVERAGE_ELECT_DT BETWEEN $range_begin_dt AND $range_end_dt
and AA.PLAN_TYPE = '40'
!and [$benefit_plan_string_1]
AND CC1.EMPLID = AA.EMPLID
AND CC1.EMPL_RCD = AA.EMPL_RCD
AND CC1.EMPLID = BB.EMPLID
!AND CC1.EMPLID = MAP1.SSN             !GEX_SEC_REENG 2016-10-03 Jyotsna Negi
!AND CC1.EMPL_RCD = MAP1.EMPL_RCD      !GEX_SEC_REENG 2016-10-03 Jyotsna Negi
AND CC1.EFFDT = (SELECT MAX(EFFDT) 	FROM PS_JOB
		WHERE EMPLID = CC1.EMPLID
		AND EMPL_RCD = CC1.EMPL_RCD
		AND EFFDT <= $range_end_dt)
AND CC1.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB
		WHERE EMPLID = CC1.EMPLID
		AND EMPL_RCD = CC1.EMPL_RCD
		AND EFFDT = CC1.EFFDT)
AND AA.EFFDT = (SELECT MAX(AA1.EFFDT) FROM PS_SAVINGS_PLAN AA1
			   WHERE AA1.EMPLID = AA.EMPLID
			   AND AA1.EMPL_RCD = AA.EMPL_RCD
			   AND AA1.PLAN_TYPE = AA.PLAN_TYPE
			   AND AA1.BENEFIT_NBR = AA.BENEFIT_NBR))
!			   AND AA1.EFFDT <= $range_end_dt))
OR (AA.COVERAGE_ELECT = 'T'
AND AA.COVERAGE_ELECT_DT NOT BETWEEN $range_begin_dt AND $range_end_dt
AND CC1.ACTION_DT BETWEEN $range_begin_dt AND $range_end_dt
AND CC1.EMPL_STATUS in ('D','R','T')
and AA.PLAN_TYPE = '40'
!and [$benefit_plan_string_1]
AND CC1.EMPLID = AA.EMPLID
AND CC1.EMPL_RCD = AA.EMPL_RCD
AND CC1.EMPLID = BB.EMPLID
!AND CC1.EMPLID = MAP1.SSN 
!AND CC1.EMPL_RCD = MAP1.EMPL_RCD
AND CC1.EFFDT = (SELECT MAX(EFFDT) 	FROM PS_JOB
		WHERE EMPLID = CC1.EMPLID
		AND EMPL_RCD = CC1.EMPL_RCD
		AND EFFDT <= $range_end_dt)
AND CC1.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB
		WHERE EMPLID = CC1.EMPLID
		AND EMPL_RCD = CC1.EMPL_RCD
		AND EFFDT = CC1.EFFDT)
AND AA.EFFDT = (SELECT MAX(AA1.EFFDT) FROM PS_SAVINGS_PLAN AA1
			   WHERE AA1.EMPLID = AA.EMPLID
			   AND AA1.EMPL_RCD = AA.EMPL_RCD
			   AND AA1.PLAN_TYPE = AA.PLAN_TYPE
			   AND AA1.BENEFIT_NBR = AA.BENEFIT_NBR)))
!			   AND AA1.EFFDT <= $range_end_dt))
ORDER BY AA.EMPLID, AA.EMPL_RCD, AA.PLAN_TYPE					
End-Select

  if $rowfound = 'N'
    display  '** NO Terms rows found for this plan: '  noline
    display $gex_dreyfus_plan
  else
    display 'Total Number of Terms Processed:  ' noline
    !display $gex_dreyfus_plan noline
    display ' is ' noline
    display #inputtran
    move 'N' to $rowfound
    add #inputtran to #total_new_enrol 
    move 0 to #inputtran
    !new-page
  end-if

!***********************************************************************
End-Procedure Process-Terms
!***********************************************************************

!***********************************************************************
Begin-Procedure Check-LOA-Row
!***********************************************************************
	Let $loa_emplid = ' '
	Let $loa_effdt = ' '
	Let $loa_action = ' '
	Let $loa_actn_reason = ' '
	Let $loa_exists = 'N'

Begin-Select ON-ERROR=SQL-Error-Found('Check-LOA-Row')
LOA.emplid,
LOA.EFFDT,
LOA.ACTION,
LOA.ACTION_REASON

 		move &LOA.emplid to $loa_emplid
 	 	move &LOA.EFFDT	to $loa_effdt
 	 	move &LOA.ACTION	to $loa_action
 	 	move &LOA.ACTION_REASON	to $loa_actn_reason
 	 	Let $loa_exists = 'Y'
 	 	SHOW 'LOA Emplid: ' $loa_emplid
 	 	SHOW 'LOA Effdt: ' $loa_effdt
 	 	SHOW 'LOA Action: ' $loa_action
 		SHOW 'LOA Action Reason: ' $loa_actn_reason
 		 		
FROM PS_JOB LOA
WHERE LOA.EMPLID = $emplid
AND LOA.EMPL_RCD = $empl_rcd
AND LOA.EMPL_STATUS = $empl_status
!AND LOA.ACTION IN('LOA','PLA')
AND LOA.EFFDT = (SELECT MAX(LOA1.EFFDT) FROM PS_JOB LOA1
							 WHERE LOA1.EMPLID = LOA.EMPLID
							 AND LOA1.EMPL_RCD = LOA.EMPL_RCD
							 AND LOA1.EMPL_STATUS = $empl_status
							 AND LOA1.ACTION IN ('LOA','PLA')
							 AND LOA1.EFFDT <= $job_effdt)
AND LOA.EFFSEQ = (SELECT MAX(LOA2.EFFSEQ) FROM PS_JOB LOA2
									WHERE LOA2.EMPLID = LOA.EMPLID
									AND LOA2.EMPL_RCD = LOA.EMPL_RCD
									AND LOA2.EFFDT = LOA.EFFDT)							 
End-Select								 
!***********************************************************************
End-Procedure Check-LOA-Row
!***********************************************************************

!***********************************************************************
Begin-Procedure Check-COR-Row
!***********************************************************************
	Let $cor_emplid = ' '
	Let $cor_effdt = ' '
	Let $cor_action = ' '
	Let $cor_actn_reason = ' '
	Let $cor_exists = 'N'

Begin-Select ON-ERROR=SQL-Error-Found('Check-COR-Row')
COR.emplid,
COR.EFFDT,
COR.ACTION,
COR.ACTION_REASON

 		move &COR.emplid to $cor_emplid
 	 	move &COR.EFFDT	to $cor_effdt
 	 	move &COR.ACTION to $cor_action
 	 	move &COR.ACTION_REASON to $cor_actn_reason
 	 	Let $COR_exists = 'Y'
 	 	SHOW 'COR Emplid: ' $cor_emplid
 	 	SHOW 'COR Effdt: ' $cor_effdt
 	 	SHOW 'COR Action: ' $cor_action
 	 	SHOW 'COR ACTION_REASON: ' $cor_actn_reason 		
 		
FROM PS_JOB COR
WHERE COR.EMPLID = $emplid
AND COR.EMPL_RCD = $empl_rcd
AND COR.EMPL_STATUS = $empl_status
AND COR.EFFDT = (SELECT MAX(COR1.EFFDT) FROM PS_JOB COR1
							 WHERE COR1.EMPLID = COR.EMPLID
							 AND COR1.EMPL_RCD = COR.EMPL_RCD
							 AND COR1.EMPL_STATUS = $empl_status
							 AND COR1.ACTION = 'COR'
							 AND COR1.ACTION_REASON in (SELECT ACTION_REASON FROM PS_GEX_PFG_LOA_MAP WHERE ACTION = 'COR')
							 AND COR1.EFFDT <= $job_effdt
							 AND COR1.EFFDT >= $loa_effdt)
AND COR.EFFSEQ = (SELECT MAX(COR2.EFFSEQ) FROM PS_JOB COR2
									WHERE COR2.EMPLID = COR.EMPLID
									AND COR2.EMPL_RCD = COR.EMPL_RCD
									AND COR2.EFFDT = COR.EFFDT)							 
End-Select								 
!***********************************************************************
End-Procedure Check-COR-Row
!***********************************************************************

!***********************************************************************
Begin-Procedure Get-Leave-Code
!***********************************************************************
	Let $tm_leave_code = ' '
	Let $tm_leave_code_exists = 'N'
	SHOW 'tm_action: '  $tm_action 
	SHOW 'tm_actn_reason: '  $tm_actn_reason 
  	 		
Begin-Select ON-ERROR=SQL-Error-Found('Get-Leave-Code')
LEV.CODE

 		move &LEV.CODE to $tm_leave_code
 	 	Let $tm_leave_code_exists = 'Y'
 	 	SHOW 'TM leave Code Emplid: ' $tm_leave_code
 	 	
FROM PS_GEX_PFG_LOA_MAP LEV
WHERE LEV.ACTION = $tm_action
AND LEV.ACTION_REASON = $tm_actn_reason
End-Select								 
!***********************************************************************
End-Procedure Get-Leave-Code
!***********************************************************************

!***********************************************************************
Begin-Procedure Check-RFL-Row
!***********************************************************************
	Let $rfl_exists = 'N'
	Let $rfl_emplid = ' '
	Let $rfl_effdt = ' '
Begin-Select ON-ERROR=SQL-Error-Found('Check-RFL-Row')
RFL.emplid,
RFL.EFFDT

		Let $rfl_exists = 'Y'
 		Move &RFL.emplid to $rfl_emplid
 	 	Move &RFL.EFFDT	to $rfl_effdt
 	 	SHOW 'RFL Emplid: ' $rfl_emplid
 		SHOW 'RFL Effdt: ' $rfl_effdt
 		
FROM PS_JOB RFL
WHERE RFL.EMPLID = $emplid
AND RFL.EMPL_RCD = $empl_rcd
AND RFL.EMPL_STATUS = $empl_status
AND RFL.ACTION_DT BETWEEN $range_begin_dt and $range_end_Dt
!AND RFL.ACTION = 'RFL'
AND RFL.EFFDT = (SELECT MAX(RFL1.EFFDT) FROM PS_JOB RFL1
							 WHERE RFL1.EMPLID = RFL.EMPLID
							 AND RFL1.EMPL_RCD = RFL.EMPL_RCD
							 AND RFL1.EMPL_STATUS = $empl_status
							 AND RFL1.ACTION ='RFL'
							 AND RFL1.EFFDT <= $range_end_Dt)
AND RFL.EFFSEQ = (SELECT MAX(RFL2.EFFSEQ) FROM PS_JOB RFL2
									WHERE RFL2.EMPLID = RFL.EMPLID
									AND RFL2.EMPL_RCD = RFL.EMPL_RCD
									AND RFL2.EFFDT = RFL.EFFDT)							 
End-Select								 
!***********************************************************************
End-Procedure Check-RFL-Row
!***********************************************************************

!***********************************************************************
Begin-Procedure Get-Last-Term-Row
!***********************************************************************
	Let $ter_exists = 'N'
	Let $ter_emplid = ' '
	Let $ter_effdt = ' '
Begin-Select ON-ERROR=SQL-Error-Found('Get-Last-Term-Row')
TER.emplid,
TER.EFFDT,
TER.ACTION

		Let $ter_exists = 'Y'
 		Move &ter.emplid to $ter_emplid
 	 	Move &ter.EFFDT	to $ter_effdt
 	 	Move &TER.ACTION to $ter_action
 	 	SHOW 'TER Emplid: ' $ter_emplid
 		SHOW 'TER Effdt: ' $ter_effdt
 		
FROM PS_JOB TER
WHERE TER.EMPLID = $emplid
AND TER.EMPL_RCD = $empl_rcd
AND TER.ACTION_DT BETWEEN $range_begin_dt and $range_end_Dt
!AND TER.ACTION IN ('TER','RET')
AND TER.EFFDT = (SELECT MAX(TER1.EFFDT) FROM PS_JOB TER1
								WHERE TER1.EMPLID = TER.EMPLID
								AND TER1.EMPL_RCD = TER.EMPL_RCD
								AND TER1.ACTION IN ('TER','RET')
								AND TER1.EFFDT <= $range_end_Dt)
AND TER.EFFSEQ = (SELECT MAX(TER2.EFFSEQ) FROM PS_JOB TER2
		  						WHERE TER2.EMPLID = TER.EMPLID
		  						AND TER2.EMPL_RCD = TER.EMPL_RCD
		  						AND TER2.EFFDT = TER.EFFDT)							 
End-Select								 
!***********************************************************************
End-Procedure Get-Last-Term-Row
!***********************************************************************

!***********************************************************************
Begin-Procedure Get-Spcl-Hrs
!***********************************************************************
  Let $spcl_hrs = ' '
Begin-Select ON-ERROR=SQL-Error-Found('Get-Spcl-Hrs')
SUM(PSE.SPCL_HRS) 	&spcl_hrs

	Move &spcl_hrs to $spcl_hrs
	Let $spcl_hrs = edit($spcl_hrs, '099999V99')
	Show 'Get-Spcl-Hrs: ' $spcl_hrs
 		
FROM PS_PAY_CHECK PC, PS_PAY_SPCL_EARNS PSE 		
WHERE PC.COMPANY = PSE.COMPANY
AND PC.PAYGROUP = PSE.PAYGROUP
AND PC.PAY_END_DT = PSE.PAY_END_DT
AND PC.OFF_CYCLE = PSE.OFF_CYCLE
AND PC.PAGE_NUM = PSE.PAGE_NUM
AND PC.LINE_NUM = PSE.LINE_NUM
AND PC.SEPCHK = PSE.SEPCHK
AND PSE.ERNCD_SPCL = 'TOT'
AND PC.EMPLID = $emplid
AND PC.EMPL_RCD = $empl_rcd
AND PC.PAY_END_DT = $pay_end_dt
End-Select								 
!***********************************************************************
End-Procedure Get-Spcl-Hrs
!***********************************************************************

!***********************************************************************
Begin-Procedure Get-Spcl-Earns
!***********************************************************************
  
  Do Get-Savings-Erncd-Spcl
  Let #spcl_earns = ' '
  Let $spcl_earns = ' '

Begin-Select ON-ERROR=SQL-Error-Found('Get-Spcl-Earns')
SUM(PSE.SPCL_EARNS) &spcl_earns
        
        move &spcl_earns to #spcl_earns
	move &spcl_earns to $spcl_earns
 !Let $spcl_earns = edit($spcl_earns,'0999999V99')
	show 'Get-Spcl-Earns: ' $spcl_earns
 		
FROM PS_PAY_CHECK PC, PS_PAY_SPCL_EARNS PSE 		
WHERE PC.COMPANY = PSE.COMPANY
AND PC.PAYGROUP = PSE.PAYGROUP
AND PC.PAY_END_DT = PSE.PAY_END_DT
AND PC.OFF_CYCLE = PSE.OFF_CYCLE
AND PC.PAGE_NUM = PSE.PAGE_NUM
AND PC.LINE_NUM = PSE.LINE_NUM
AND PC.SEPCHK = PSE.SEPCHK
AND PC.EMPLID = $emplid
AND PC.EMPL_RCD = $empl_rcd
AND PC.PAY_END_DT = $pay_end_dt
AND PSE.ERNCD_SPCL = $erncd_spcl
End-Select								 
!***********************************************************************
End-Procedure Get-Spcl-Earns
!***********************************************************************

!***********************************************************************
Begin-Procedure Check-4W-Plantype
!***********************************************************************
	show 'Check-4W-Plantype'
	
	Let $plan_type_w_found = 'N'
	Let $plan_type_w = ' '
	Let $benefit_plan_w = ' '
	
	
Begin-Select ON-ERROR=SQL-Error-Found('Check-4W-Plantype')
W.EMPLID,
W.PLAN_TYPE,
W.BENEFIT_PLAN 

	Let $plan_type_w_found = 'Y'
	Move &W.PLAN_TYPE to $plan_type_w
	Move &W.BENEFIT_PLAN to $benefit_plan_w
	show 'Plan Type 4W: ' $plan_type_w
	show 'Benefit Plan Type 4W: ' $benefit_plan_w
		 		
FROM PS_SAVINGS_PLAN W
WHERE W.EMPLID = $emplid
AND W.EMPL_RCD = $empl_rcd
AND W.BENEFIT_NBR = $benefit_nbr
AND W.PLAN_TYPE = '4W'
AND W.EFFDT = (SELECT MAX(W1.EFFDT) FROM PS_SAVINGS_PLAN W1
               WHERE W1.EMPLID = W.EMPLID
		  				AND W1.EMPL_RCD = W.EMPL_RCD
		  				AND W1.BENEFIT_NBR = W.BENEFIT_NBR
		  				AND W1.PLAN_TYPE = W.PLAN_TYPE
      				AND W1.EFFDT <= $range_end_dt)
AND W.COVERAGE_ELECT = 'E'    
End-Select								 
!***********************************************************************
End-Procedure Check-4W-Plantype
!***********************************************************************

!***********************************************************************
Begin-Procedure Get-Savings-Erncd-Spcl-4W
!***********************************************************************
	show 'Get-Savings-Erncd-Spcl IN'
	SHOW 'Plan Type 4W: ' $plan_type_w
	SHOW 'Benefit Plan 4W: ' $benefit_plan_w
	Let $erncd_spcl_w = ' '

Begin-Select ON-ERROR=SQL-Error-Found('Get-Savings-Erncd-Spcl-4W')
WS.ERNCD_SPCL

	Move &ws.erncd_spcl to $erncd_spcl_w
	show 'Get-Savings-ErncdSpcl: ' $erncd_spcl_w
	Do Get-Spcl-Earns-4W
		 		
FROM PS_SAVINGS_PLN_TBL WS 
WHERE WS.PLAN_TYPE = $plan_type_w
AND WS.BENEFIT_PLAN = $benefit_plan_w
AND WS.EFFDT = (SELECT MAX(WS1.EFFDT) FROM PS_SAVINGS_PLN_TBL WS1
			  WHERE WS1.PLAN_TYPE = WS.PLAN_TYPE
			  AND WS1.BENEFIT_PLAN = WS.BENEFIT_PLAN
			  AND WS1.EFFDT <= $range_end_dt)
End-Select								 
!***********************************************************************
End-Procedure Get-Savings-Erncd-Spcl-4W
!***********************************************************************

!***********************************************************************
Begin-Procedure Get-415-ERNCD
!***********************************************************************
	Let $ERNCD_SPCL_DFY = ' '
		
Begin-Select ON-ERROR=SQL-Error-Found('Get-415-ERNCD')
DFY.ERNCD_SPCL

	Move &DFY.ERNCD_SPCL to $ERNCD_SPCL_DFY
			 		
FROM PS_GEX_DREYFUS_TBL DFY
  WHERE DFY.GEX_DREYFUS_PLAN = $dreyfus_plan_number
End-Select					
!***********************************************************************
End-Procedure Get-415-ERNCD
!***********************************************************************

!***********************************************************************
Begin-Procedure Get-415-Hours
!***********************************************************************
 Let $Hrs_415 = ' '
 Let #Hrs_415 = ' '
  
Begin-Select ON-ERROR=SQL-Error-Found('Get-415-Hours')
SUM(PSE2.SPCL_EARNS) &Hrs_415

	Move &Hrs_415 to #Hrs_415
	Move #Hrs_415 to $Hrs_415 
    	Let $Hrs_415 = edit($Hrs_415,'0999999V99')	
	show '415 Hours : ' $Hrs_415
	 		
FROM PS_PAY_CHECK PC2, PS_PAY_SPCL_EARNS PSE2 		
WHERE PC2.COMPANY = PSE2.COMPANY
AND PC2.PAYGROUP = PSE2.PAYGROUP
AND PC2.PAY_END_DT = PSE2.PAY_END_DT
AND PC2.OFF_CYCLE = PSE2.OFF_CYCLE
AND PC2.PAGE_NUM = PSE2.PAGE_NUM
AND PC2.LINE_NUM = PSE2.LINE_NUM
AND PC2.SEPCHK = PSE2.SEPCHK
AND PC2.EMPLID = $emplid
AND PC2.EMPL_RCD = $empl_rcd
AND PC2.PAY_END_DT = $pay_end_dt
AND PSE2.ERNCD_SPCL = $ERNCD_SPCL_DFY
End-Select			

!***********************************************************************
End-Procedure Get-415-Hours
!***********************************************************************
!ISDVNPK 02/16/2013  - End

!***********************************************************************
Begin-Procedure Get-Spcl-Earns-4W
!***********************************************************************
  
  Show 'Get-Spcl-Earns-4W in Proc: '  
  Let #spcl_earns_w = ' '

Begin-Select ON-ERROR=SQL-Error-Found('Get-Spcl-Earns-4W')
SUM(PSE1.SPCL_EARNS) &spcl_earns_w

	move &spcl_earns_w to #spcl_earns_w
	!Let $spcl_earns = edit($spcl_earns_w,'0999999V99')
	show 'Get-Spcl-Earns-4W: ' $spcl_earns_w
	Show 'SPCL Earns 4W: ' $emplid
 		
FROM PS_PAY_CHECK PC1, PS_PAY_SPCL_EARNS PSE1 		
WHERE PC1.COMPANY = PSE1.COMPANY
AND PC1.PAYGROUP = PSE1.PAYGROUP
AND PC1.PAY_END_DT = PSE1.PAY_END_DT
AND PC1.OFF_CYCLE = PSE1.OFF_CYCLE
AND PC1.PAGE_NUM = PSE1.PAGE_NUM
AND PC1.LINE_NUM = PSE1.LINE_NUM
AND PC1.SEPCHK = PSE1.SEPCHK
AND PC1.EMPLID = $emplid
AND PC1.EMPL_RCD = $empl_rcd
AND PC1.PAY_END_DT = $pay_end_dt
AND PSE1.ERNCD_SPCL = $erncd_spcl_w
End-Select								 
!***********************************************************************
End-Procedure Get-Spcl-Earns-4W
!***********************************************************************

!***********************************************************************
Begin-Procedure Get-Savings-Erncd-Spcl
!***********************************************************************
	show 'Get-Savings-Erncd-Spcl IN'
	SHOW 'Plan Type: ' $plan_type
	SHOW 'Benefit Plan: ' $benefit_plan
	Let $erncd_spcl = ' '

Begin-Select ON-ERROR=SQL-Error-Found('Get-Savings-Erncd-Spcl')
S.ERNCD_SPCL

	Move &s.erncd_spcl to $erncd_spcl
	show 'Get-Savings-ErncdSpcl: ' $erncd_spcl
		 		
FROM PS_SAVINGS_PLN_TBL S 
WHERE S.PLAN_TYPE = $plan_type
AND S.BENEFIT_PLAN = $benefit_plan
AND S.EFFDT = (SELECT MAX(S1.EFFDT) FROM PS_SAVINGS_PLN_TBL S1
			  WHERE S1.PLAN_TYPE = S.PLAN_TYPE
			  AND S1.BENEFIT_PLAN = S.BENEFIT_PLAN
			  AND S1.EFFDT <= $range_end_dt)
End-Select								 
!***********************************************************************
End-Procedure Get-Savings-Erncd-Spcl
!***********************************************************************

!***********************************************************************
Begin-Procedure Check-Prev-Enrollment
!***********************************************************************
	Let $prev_Enrol_found = 'N'
	Let $prev_emplid = ' '
	
Begin-Select ON-ERROR=SQL-Error-Found('Check-Prev-Enrollment')
D.EMPLID
D.BENEFIT_PLAN

	Move &D.EMPLID to $prev_emplid
	Move &D.BENEFIT_PLAN to $benefit_plan
	Let $prev_Enrol_found = 'Y'
	show 'Prev Enrollment Found: ' $prev_emplid
	Do Get-Dreyfus-PlanNumber
	If $rc_plan_found = 'Y'
	  Move $rc_dreyfus_plan to $dreyfus_plan_number
	Else
	  Show 'Dreyfus Plan number not found on the Run Control'
	  !STOP
	End-if  
	
		 		
FROM PS_SAVINGS_PLAN D
WHERE D.EMPLID = $emplid
AND D.EMPL_RCD = $empl_rcd
AND D.BENEFIT_NBR = $benefit_nbr
AND D.EFFDT = (SELECT MAX(D1.EFFDT) FROM PS_SAVINGS_PLAN D1
                WHERE D1.EMPLID = D.EMPLID
		  				AND D1.EMPL_RCD = D.EMPL_RCD
		  				AND D1.BENEFIT_NBR = D.BENEFIT_NBR
		  				AND D1.PLAN_TYPE = D.PLAN_TYPE
      				AND D1.EFFDT < &AA.EFFDT)
AND D.COVERAGE_ELECT = 'E'                   
AND D.PLAN_TYPE = $plan_type
!AND [$benefit_plan_string_2]        
End-Select								 
!***********************************************************************
End-Procedure Check-Prev-Enrollment
!***********************************************************************

!***********************************************************************
Begin-Procedure Get-Dreyfus-PlanNumber
!***********************************************************************
	Let $rc_plan_found = 'N'
		
Begin-Select ON-ERROR=SQL-Error-Found('Get-Dreyfus-PlanNumber')
YY.GEX_DREYFUS_PLAN

	Move &YY.GEX_DREYFUS_PLAN to $rc_dreyfus_plan
	Let $rc_plan_found = 'Y'
	show 'Plan Number Found: ' $rc_dreyfus_plan
			 		
FROM PS_GEX_DREYFUS_MAP YY, PS_GEX_RC_GEXBN646 RC1
  WHERE YY.GEX_PROF_SHR = 'N'
  AND YY.PLAN_TYPE = '40'
  AND YY.BENEFIT_PLAN = $benefit_plan
  AND RC1.OPRID = $prcs_oprid
  AND RC1.RUN_CNTL_ID = $prcs_run_cntl_id
  AND YY.GEX_DREYFUS_PLAN = RC1.GEX_DREYFUS_PLAN     
End-Select								 
!***********************************************************************
End-Procedure Get-Dreyfus-PlanNumber
!***********************************************************************

!***********************************************************************
begin-procedure Select-Pay-End-Dt
!***********************************************************************
#debug8 display 'select-pay-end-dt'
begin-select
MAX(PC.PAY_END_DT)      &pay_end_dt
  
  move &pay_end_dt   to $pay_end_dt
  move &pay_end_dt   to $pay_end_dt_print
  Let $pay_end_dt_print = edit($pay_end_dt_print, 'MM/DD/YYYY')
      
FROM   PS_PAY_CALENDAR PC
WHERE  PC.PAY_END_DT <= $X000_WHERE_SELECT_ASOFDATE 
AND    PC.PAY_CONFIRM_RUN = 'Y'
end-select
  display 'Last Confirmed Pay End Date: ' noline
  display $pay_end_dt

if rtrim($pay_end_dt,' ') <> ''

   do convert-to-dtu-date($pay_end_dt,$pay_end_dt_dtu)
   do dtu-subtract-days($pay_end_dt_dtu,2,$range_begin_dt_dtu)
   do convert-from-dtu-date($range_begin_dt_dtu,$range_begin_dt)

   do dtu-add-days($pay_end_dt_dtu,4,$range_end_dt_dtu)
   do convert-from-dtu-date($range_end_dt_dtu,$range_end_dt)

   display 'Range Begin Dt: ' noline
   display $range_begin_dt
   display 'Range End Dt: ' noline
   display $range_end_dt

else

   display 'No Pay End Dt found prior to ' noline
   display $X000_WHERE_SELECT_ASOFDATE
   stop

end-if

end-procedure

!***********************************************************************
Begin-Procedure Write-Record
!***********************************************************************
     do Get-Emp-Ssn ($emplid, $Ssn_Out) !GEX_SEC_REENG 2015-04-29 Vahini Katta
  write 1 from $Ssn_Out !$emplid:9 !GEX_SEC_REENG 2015-04-29 Vahini Katta
               $dreyfus_plan_number:6
               $pay_end_dt_print:10
               $deptid:10			!ISDVNPK 02/16/2013
               $location:10			!ISDVNPK 02/16/2013
               ' ':10
               ' ':10
               ' ':10
               ' ':10
               ' ':10
               $name:24
               !$map_emplid:20 !GEX_SEC_REENG 2015-04-29 Vahini Katta
               $emplid:20      !GEX_SEC_REENG 2015-04-29 Vahini Katta
               $birthdate:10
               $hire_Dt:10
               $sex:1
               $address1:24
               $address2:24
               $city:22
               $state:2
               $postal:9
               $benefit_plan:7
               $union_cd:10
               ' ':1
               $mar_status:1			!ISDVNPK 02/16/2013
               $benefit_event_type:1
               $benefit_event_dt:10
               ' ':1
               $leave_begin_dt:10               
               $leave_end_dt:10
               $leave_code:2
               $spcl_hrs:8
               $pay_end_dt_print:10
               '2':1
               $rehire_dt:10
               ' ':1
               $Hrs_415:13			!ISDVNPK 02/16/2013
               ' ':13
               ' ':13
               ' ':13
               ' ':13
               $spcl_earns:9
	       			 
!***********************************************************************
End-Procedure Write-Record
!***********************************************************************

!***********************************************************************
begin-procedure SQL-Error-Found($Proc_Name) 
!***********************************************************************
  display 'SQL Error in ' 
  display $Proc_Name 
  display $_sql-error
  display 'sql-status:' 
  display #_sql-status 
!  STOP
end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'  !Does the date-math functions
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'rotname3.sqc'  !Rotate-Name
#Include 'askaod.sqc'    !Ask-As-Of-Date Routine
#include 'gexxx922.sqc'  !Get pay single row run control
#Include 'gexxx919.sqc'  !Get Dedcd multiple row table
#include 'gexrehdt.sqc'	 !GEX-MXT 03/24/2008 Fixed for REHIRE DT
#include 'gexxx920.sqc'  !Get ASOFDATE from Run Control
#Include 'getgeid.sqc'   !Get SSN