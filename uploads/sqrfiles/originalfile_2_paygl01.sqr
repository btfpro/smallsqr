!*******************************************************************
!  PAYGL01:  General Ledger Interface                              *
!*******************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/02/20:21:47:41                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  694792                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup31.sqc'   !Printer and page-size initialization
#Include 'usarpt.sqc'    !USA report variables

!***********
begin-report
!***********

  do HouseKeeping

  if $RC_PAYINIT.Review_Dist = 'N'
      display ' '
      display ' '
      display 'Total Accrual Amount = ' noline
      display #TtlAccrualCredit         999,999,999.99mi

      display 'Total Debits         = ' noline
      display #TotalDebits              999,999,999.99mi
      display 'Total Credits        = ' noline
      display #TotalCredits             999,999,999.99mi

      display 'Total Acctg Lines    = ' noline
      display #Total_Acctg_Lines        999,999,999.99mi
  end-if

  if $PubMessages = 'Y'
      do Prepare-PubMsg
  end-if

  do Stdapi-Term

end-report

!***************************
begin-procedure HouseKeeping
!***************************

  move 'Payroll GL Interface' to $ReportTitle

#ifdef debugx
  let $PrtArrayInfo = 'Y'
#else
  let $PrtArrayInfo = 'N'
#end-if

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Initialization

  move 'N' to $CyclePrompts     !Don't prompt for On/Off cycle in PAYINIT

  do Payroll-Report-Initialization

end-procedure

!******************************
begin-procedure Initialization
!******************************

  do Get-Current-DateTime
  do Create-Arrays
  do Get-Installation-Info
  move $AsOfToday to $Journal_Line_Date
  move 0 to #Total_Acctg_Lines
  move 'N' to $PubMessages

  let $MapString          = 'AJPDC'
  let #Threshold_Limit    = 100
  let #MaxErrorLimit      = 100
  let $SuccessfulRun      = 'Y'
  let $FedState           = '$U'
  let $DefState           = ' '
  let $Line_Descr         = ' '
  let #TtlAccrualCredit   = 0
  let #TtlAccrualDebit    = 0
  let #TotalCredits       = 0
  let #TotalDebits        = 0
  let #Total_Acctg_Lines  = 0

end-procedure

!*********************
begin-procedure Report
!*********************

  if $Prcs_Process_Instance = ''
      let $run_id = $RunId
      let $run_id = cond($WholeRun <> 'Y', ' ',$RunId)
  else
      let $run_id = $RC_PAYINIT.RUN_ID
  end-if

  let $saved_run_id = $run_id

  if $RC_PAYINIT.RUN_ID = ''
      let $RC_RunID      = ' '
      let $RC_Company    = $RC_PAYINIT.Company
      let $RC_PayGroup   = $RC_PAYINIT.Paygroup
      let $RC_PayEndDt   = $RC_PAYINIT.Pay_End_Dt
  else
      let $RC_RunID      = $RC_PAYINIT.Run_ID
      let $RC_Company    = ' '
      let $RC_PayGroup   = ' '
      let $RC_PayEndDt   = ''
  end-if

  let $prgm_name           = 'PAYGL01'
  let $runid               = $RC_RunID
  let $company             = $RC_Company
  let $paygroup            = $RC_PayGroup
  let #max_line            = 99999
  let $gl_run_date         = $AsOfToday
  let #gl_entry_line       = 0
  let #gl_run_num          = 0
  let #proc_seq_no         = 1
  let #last_posted_seq_num = 0
  do  Clear-Acctg-Ln-Stg ($prgm_name, $gl_run_date, $Prcs_Process_Instance)

  if $RC_PAYINIT.Review_Dist = 'Y'

      do Duplicate-GL-Gen-History ($gl_run_date, $RC_RunID, $RC_Company, $RC_PayGroup, $RC_PayEndDt, $DupEntry)

      if $DupEntry = 'N'
          do Get-Next-SeqNum ($gl_run_date, #seq_no)
          do Insert-Dist-GL-Gen-History ($gl_run_date, #seq_no, $RC_RunID, $RC_Company, $RC_PayGroup, $RC_PayEndDt)
          do Commit-Transaction
      end-if
  else
      do Delete-Dist-GL-Gen-History ($RC_RunID, $RC_Company, $RC_PayGroup, $RC_PayEndDt)
      do Commit-Transaction
  end-if

  do Build-Calendar-Array
  do Process-Calendar-Entry

  if $SuccessfulRun = 'N'
      stop
  end-if

end-procedure

!******************************
begin-procedure Prepare-PubMsg
!******************************

  !-------------------------  Start Set Up EIP -----------------------------------------
  do Get-Process-Name (#prcs_process_instance, $prcsname)
  do Get-Active-In-BatchPub ($prcsname, #cntmsg)
  if #cntmsg > 0
      do Get-Job-Instance
      let $Out_Clean_Up_Flag  = 'U'
      do Insert-Param-In-BatchPub (#prcs_process_instance, #prcs_job_instance, $prcsname,
                          $SysDateTime, $Out_Clean_up_Flag)
  end-if
  !--------------------------  End Set Up EIP -------------------------------------------

end-procedure

!***********************************
begin-procedure Build-Calendar-Array
!***********************************

  let #Cal = 0

begin-select on-error=SQL-error
A.COMPANY
A.PAYGROUP
A.PAY_END_DT
A.CHECK_DT
A.ACCRUAL_PCT
A.REVERSE_FLAG
A.PAY_OFF_CYCLE_CAL
A.PAY_DIST_RUN

  if #Cal < #CalendarArraySize

      put &A.COMPANY &A.PAYGROUP &A.PAY_END_DT &A.CHECK_DT &A.ACCRUAL_PCT &A.REVERSE_FLAG
          &A.PAY_OFF_CYCLE_CAL &A.PAY_DIST_RUN
      into Calendars(#Cal)
          Company PayGroup Pay_End_Dt Check_Dt Accrual_Pct Reverse_Flag
          PayOffCycleCal PayDistRun
  else
      display '***Error*** Calenar Array limit exceeded'
      stop
  end-if

  add 1 to #Cal

FROM  PS_PAY_CALENDAR A
WHERE [$SlctCalendar]
  AND A.PAY_CONFIRM_RUN  = 'Y'
  AND A.GL_INTERFACE_RUN = 'N'
ORDER BY COMPANY,
         PAYGROUP,
         PAY_END_DT
end-select
end-procedure

!*************************************
begin-procedure Process-Calendar-Entry
!*************************************

  let #C = 0

  while #C < #Cal

      Get $Company $PayGroup $PayEndDt $CheckDt #AccrualPct $ReverseAccrual
          $PayOffCycleCal $PayDistRun
      from Calendars(#C)
          Company PayGroup Pay_End_Dt Check_Dt Accrual_Pct Reverse_Flag
          PayOffCycleCal PayDistRun

      let $run_company      = $Company
      let $run_paygroup     = $PayGroup
      let $run_pay_end_dt   = $PayEndDt
      let $run_distribution = $PayDistRun

      do Format-DateTime($PayEndDt, $DispPayEndDate, {DEFDATE}, '', '')

      move 0  to #PayGroup_Checks_Processed
      move 0  to #PayGroup_RevChks_Processed
      move 0  to #PayGroup_Accrual_Credit
      move 0  to #PayGroup_Accrual_Debit
      move 0  to #PayGroup_Credits
      move 0  to #PayGroup_Debits
      move 0  to #PayGroup_Acctg_Lines
      move 0  to #ErrorCnt

      let $Msg1 = '   Processing Company      '|| $Company
      let $Msg2 = '              Paygroup     '|| $Paygroup
      let $Msg3 = '              Pay End Date '|| $DispPayEndDate

      display ' '
      display $Msg1
      display $Msg2
      display $Msg3
      display ' '

      let $ContinueProcess = 'Y'

      if $RC_PAYINIT.Review_Dist = 'N'
          do OffCycle-Exists
      end-if

      if $ContinueProcess = 'Y'
          do Calendar-Entries
      end-if

      if $ContinueProcess = 'Y'
          do Print-PayGroup-Totals
      end-if

      add 1 to #C
  end-while
end-procedure

!******************************
begin-procedure OffCycle-Exists
!******************************

  let $OffCycleFound   = 'N'

begin-select on-error=SQL-error
PL.COMPANY

  move 'Y' to $OffCycleFound

FROM PS_PAY_LINE PL
WHERE PL.COMPANY    = $Company
  AND PL.PAYGROUP   = $PayGroup
  AND PL.PAY_END_DT = $PayEndDt
  AND PL.OFF_CYCLE  = 'Y'
  AND PL.CONFIRMED  = 'N'
  AND PL.SINGLE_CHECK_USE IN ('N', 'C')
end-select

  if $OffCycleFound = 'Y'

     let $ContinueProcess = 'N'
     let $Msg = '   ERROR-Off Cycles have not been Confirmed for Company '||
                $Company||', Paygroup ' || $PayGroup ||', and Pay End Date '||
                $PayEndDt

     display $Msg
  end-if

end-procedure

!********************************
begin-procedure Calendar-Entries
!********************************

  do Prepare-GL-Interface

  evaluate $ContinueProcess
      when = 'Y'
          let $AP_Status = ' '
          do Distribute-Check

      when = 'Y'
          do Distribute-Reverse-Check

      when = 'Y'
          if $RC_PAYINIT.Review_Dist = 'N'

              !Reverse prior period's accruals
              if $ReverseAccrual = 'N' and #AccrualPct <> 0
                  do Delete-Accruals
              end-if

              do Generate-GL-Transactions

              if $ContinueProcess = 'Y'
                  if $ReverseAccrual = 'Y'
                      do Reverse-Accruals
                      do Mark-Accruals-as-Reversed
                  end-if
              end-if

              if $ContinueProcess = 'Y'
                  do Remove-Zero-Expense-Payments
                  move 'Y' to $PubMessages
              end-if

              if $ContinueProcess = 'Y'
                  do Update-GL-History
              end-if
          end-if

      when = 'Y'
          if $run_distribution = 'N' or
             $RC_PAYINIT.Review_Dist = 'N'
              do Mark-GL-Interface-Run
              do Commit-Transaction
          end-if

      when = 'N'
          do Rollback-Transaction
          let $SuccessfulRun = 'N'
          display ' '
          display '   Processing failed. Please correct error and resubmit the job.'
          display ' '

  end-evaluate
end-procedure

!***********************************
begin-procedure Prepare-GL-Interface
!***********************************

  move $CheckDt       to $Accounting_Dt
  move $Accounting_Dt to $GL_Date

  do Get-Company-Data
  do Initialize-Company-Data

  move $PayEndDt      to $AsOfDate

  do Get-HR-Currency($AsOfDate,$Currency_cd_hr,
                        $hr_rate_type,$Rate_Conversion_Date)

  do Get-PayGroup-Data
  let $PGrp_ErnCd_Reg_Hrs = &ERNCD_REG_HRS

  if  $PayGroupCountry = 'CAN'
    do Get-Canadian-Currency
  end-if

  do Initialize-Arrays
  do Initialize-Tax-Descr
  do Load-Canadian-Tax-LiabAcct
  do Get-Default-GroupName
  do Initialize-Ctx-Descr

end-procedure

!************************************
begin-procedure Print-PayGroup-Totals
!************************************

  display '         Paygroup Summary - '
  display ' '
  display '            Process Option : ' noline

  if $RC_PAYINIT.Review_Dist = 'N'
      let $Msg1 = 'Generate Accounting Lines'
  else
      let $Msg1 = ''
  end-if

  if $PayDistRun = 'N'
      if $RC_PAYINIT.Review_Dist = 'N'
          let $Msg1 = 'PayCheck Distribution  & ' || $Msg1
      else
          let $Msg1 = 'PayCheck Distribution'
      end-if
  end-if

  if $ReverseAccrual = 'Y'
      let $Msg1 = 'Reversed Accrual, ' || $Msg1
  end-if
  display $Msg1
  display ' '

  display '            # of Pay Check Distributed      = ' noline
  display #PayGroup_Checks_Processed  999,999,999.99mi
  display '            # of Rev/Adj Check Distributed  = ' noline
  display #PayGroup_RevChks_Processed  999,999,999.99mi

  if $RC_PAYINIT.Review_Dist = 'N'
      if $ReverseAccrual = 'N' and #AccrualPct > 0
          display '            Total Accrual Amount            = ' noline
          display #PayGroup_Accrual_Credit 999,999,999.99mi
      end-if

      display '            Total Credit                    = ' noline
      display #PayGroup_Credits 999,999,999.99mi
      display '            Total Debit                     = ' noline
      display #PayGroup_Debits  999,999,999.99mi
      display '            Total Accounting Lines          = ' noline
      display #PayGroup_Acctg_Lines 999,999,999mi
  end-if
  display ' '

  let #TtlAccrualCredit  = #TtlAccrualCredit   +  #PayGroup_Accrual_Credit
  let #TtlAccrualDebit   = #TtlAccrualDebit    +  #PayGroup_Accrual_Debit
  let #TotalCredits      = #TotalCredits       +  #PayGroup_Credits
  let #TotalDebits       = #TotalDebits        +  #PayGroup_Debits
  let #Total_Acctg_Lines = #Total_Acctg_Lines  +  #PayGroup_Acctg_Lines

end-procedure

!**************************************
begin-procedure Initialize-Company-Data
!**************************************
  let $PayTaxesThruAP   = &CT.PAY_TAXES_THRU_AP
  let $GL_NetPay        = substr(&GL_NET_PAY,1,10)
  let $GL_Dir_Deposits  = substr(&GL_DIR_DEPOSITS,1,10)
  let $GL_FWT           = substr(&GL_FWT,1,10)
  let $GL_FICA_Ee_Oasdi = substr(&GL_FICA_EE_OASDI,1,10)
  let $GL_FICA_Er_Oasdi = substr(&GL_FICA_ER_OASDI,1,10)
  let $GL_FICA_Ee_Med   = substr(&GL_FICA_EE_MED,1,10)
  let $GL_FICA_Er_Med   = substr(&GL_FICA_ER_MED,1,10)
  let $GL_FUT           = substr(&GL_FUT,1,10)
  let $GL_EIC           = substr(&GL_EIC,1,10)
  let $DistExpense      = &PY_DIST_OPTION

  if rtrim($GL_NetPay,' ') = ''
     let $ContinueProcess = 'N'
     let $Msg = '   ERROR- GL NetPay offset liability account is blank for Company '|| $Company
     display $Msg
  end-if

  if rtrim($GL_Dir_Deposits ,' ') = ''
     let $ContinueProcess = 'N'
     let $Msg = '   ERROR- GL Direct Deposit offset liability account is blank for Company '|| $Company
     display $Msg
  end-if
end-procedure

!************************************
begin-procedure Get-Installation-Info
!************************************
begin-select on-error=SQL-error
PUBLIC_SECTOR
TL

  let $TLInstall    = &TL
  let $PublicSector = &PUBLIC_SECTOR

FROM PS_INSTALLATION
end-select
end-procedure

!************************************
begin-procedure Mark-GL-Interface-Run
!************************************

  let $SetParam = ''

  if $run_distribution = 'N'
      let $SetParam = 'PAY_DIST_RUN = '|| '''Y'''
  end-if

  if $RC_PAYINIT.Review_Dist = 'N'
      if $SetParam = ''
      else
          let $SetParam = $SetParam || ', '
      end-if
      let $SetParam = $SetParam || 'GL_INTERFACE_RUN = '  || '''Y'''  || ', '
                                || 'PAY_OFF_CYCLE_CLS = ' || '''Y'''
  end-if

  let $err-statement1 = 'PAYGL01, Update Error - MARK-GL-INTERFACE-RUN'
  let $err-statement2 = 'Bind Variables: Company '     || $run_company      ||
                                      ', Paygroup '    || $run_paygroup     ||
                                      ', Pay End Date '|| $run_pay_end_dt

begin-SQL on-error=SQL-Statement-Error
UPDATE PS_PAY_CALENDAR  SET [$SetParam]
WHERE COMPANY        = $run_company
  AND PAYGROUP       = $run_paygroup
  AND PAY_END_DT     = $run_pay_end_dt
end-SQL

end-procedure

!*******************************
begin-procedure Distribute-Check
!*******************************

begin-select on-error=SQL-error
PCHECK.OFF_CYCLE
PCHECK.PAGE_NUM
PCHECK.LINE_NUM
PCHECK.SEPCHK
PCHECK.PAYCHECK_NBR
PCHECK.EMPLID
PCHECK.EMPL_RCD
PCHECK.FORM_ID
PCHECK.CHECK_DT
PCHECK.PAYCHECK_STATUS
PCHECK.PAYCHECK_OPTION
PCHECK.PAYCHECK_ADJUST
PCHECK.BUSINESS_UNIT
PCHECK.DEPTID
PCHECK.NET_PAY

  do Initialize-PayCheck-Arrays

  move &PCHECK.OFF_CYCLE        to $OffCycle
  move &PCHECK.PAGE_NUM         to #PageNum
  move &PCHECK.LINE_NUM         to #LineNum
  move &PCHECK.SEPCHK           to #SepChk
  move &PCHECK.PAYCHECK_NBR     to #PayCheckNbr
  move &PCHECK.FORM_ID          to $FormID
  move &PCHECK.CHECK_DT         to $CheckDt
  move &PCHECK.EMPLID           to $Emplid
  move &PCHECK.EMPL_RCD         to #EmplRcd
  move &PCHECK.BUSINESS_UNIT    to $PayCheck_Business_Unit
  move &PCHECK.DEPTID           to $DeptID
  move &PCHECK.PAYCHECK_STATUS  to $PayCheckStatus
  move &PCHECK.PAYCHECK_OPTION  to $PayCheckOption
  move &PCHECK.NET_PAY          to #NetPay

  let #Exp_Accrual_Diff  = 0
  let #Liab_Accrual_Diff = 0
  let #ER_Accrual_Diff   = 0
  let $NoEarnings        = 'Y'
  let $ContinueRegChk    = 'Y'

  evaluate $ContinueRegChk

      if $TLInstall = 'Y'
          do Store-RegEarn-TL-Xref-Info
      end-if

      when = 'Y'
          do Get-Regular-Earnings

      when = 'Y'
          do Write-Earnings-Rec

      when = 'Y'
          do Calc-Distribution-Percent
          do Calc-Exp-Distribution-Percent

      when = 'Y'
          let #Liab_Accrual_Diff = #Liab_Accrual_Diff - #Exp_Accrual_Diff
          do Process-Ded

      when = 'Y'
          do Process-Tax

      when = 'Y'
          do Process-Ctx

      when = 'Y'
          do Process-NetPay

          if $PrtArrayInfo = 'Y'
              do Print-EarnDistArray
          end-if

      when = 'N'
          let $SuccessfulRun = 'N'
          exit-select
  end-evaluate

  let #PayGroup_Checks_Processed = #PayGroup_Checks_Processed + 1

FROM PS_PAY_CHECK     PCHECK
   , PS_SET_CNTRL_REC SETREC
   , PS_DEPT_TBL      DEPT
WHERE PCHECK.COMPANY        = $Company
  AND PCHECK.PAYGROUP       = $PayGroup
  AND PCHECK.PAY_END_DT     = $PayEndDt
  AND ((PCHECK.PAYCHECK_STATUS in ('F','A')
       AND PCHECK.PAYCHECK_OPTION <> 'R')
    OR (PCHECK.PAYCHECK_STATUS = 'R'))
  AND SETREC.REC_GROUP_ID   = 'HR_01'
  AND SETREC.SETCNTRLVALUE  = PCHECK.BUSINESS_UNIT
  AND SETREC.RECNAME        = 'DEPT_TBL'
  AND DEPT.SETID            = SETREC.SETID
  AND DEPT.DEPTID           = PCHECK.DEPTID
  AND DEPT.USE_DISTRIBUTION = 'N'
  AND DEPT.EFFDT            = (SELECT MAX(DEPT1.EFFDT) FROM PS_DEPT_TBL DEPT1
                               WHERE DEPT1.SETID  = DEPT.SETID
                                 AND DEPT1.DEPTID = DEPT.DEPTID
                                 AND DEPT1.EFFDT <= PCHECK.PAY_END_DT
                                 AND DEPT1.EFF_STATUS = 'A')
  AND NOT EXISTS (SELECT 'X' FROM PS_PAY_NA_EARNINGS PERN
                  WHERE PERN.COMPANY       = PCHECK.COMPANY
                    AND PERN.PAYGROUP      = PCHECK.PAYGROUP
                    AND PERN.PAY_END_DT    = PCHECK.PAY_END_DT
                    AND PERN.OFF_CYCLE     = PCHECK.OFF_CYCLE
                    AND PERN.PAGE_NUM      = PCHECK.PAGE_NUM
                    AND PERN.LINE_NUM      = PCHECK.LINE_NUM
                    AND PERN.SEPCHK        = PCHECK.SEPCHK)
end-select
end-procedure

!***************************************
begin-procedure Distribute-Reverse-Check
!***************************************

begin-select on-error=SQL-error
RCHECK.OFF_CYCLE
RCHECK.PAGE_NUM
RCHECK.LINE_NUM
RCHECK.SEPCHK
RCHECK.PAYCHECK_NBR
RCHECK.EMPLID
RCHECK.EMPL_RCD
RCHECK.FORM_ID
RCHECK.CHECK_DT
RCHECK.PAYCHECK_STATUS
RCHECK.PAYCHECK_OPTION
RCHECK.PAYCHECK_ADJUST
RCHECK.BUSINESS_UNIT
RCHECK.NET_PAY

  move &RCHECK.OFF_CYCLE        to $OffCycle
  move &RCHECK.PAGE_NUM         to #PageNum
  move &RCHECK.LINE_NUM         to #LineNum
  move &RCHECK.SEPCHK           to #SepChk
  move &RCHECK.PAYCHECK_NBR     to #PayCheckNbr
  move &RCHECK.FORM_ID          to $FormID
  move &RCHECK.CHECK_DT         to $CheckDt
  move &RCHECK.EMPLID           to $Emplid
  move &RCHECK.EMPL_RCD         to #EmplRcd
  move &RCHECK.BUSINESS_UNIT    to $PayCheck_Business_Unit
  move &RCHECK.PAYCHECK_STATUS  to $PayCheckStatus
  move &RCHECK.PAYCHECK_OPTION  to $PayCheckOption
  move &RCHECK.NET_PAY          to #NetPay
  let  $ContinueRevChk          =  'Y'

  do Find-Original-Check

  if $OrigChk_Found = 'Y'
      evaluate $ContinueRevChk

          do Reverse-Earnings

          when = 'Y'
              do Reverse-Ern-Dist

          when = 'Y'
              do Reverse-Ded-Dist

          when = 'Y'
              do Reverse-Ded-Liab

          when = 'Y'
              do Reverse-Tax-Dist

          when = 'Y'
              do Reverse-Tax-Liab

          when = 'Y'
              do Reverse-Ctx-Dist

          when = 'Y'
              do Reverse-Ctx-Liab

          when = 'Y'
              do Reverse-NetPay-Dist

          when = 'N'
              let $SuccessfulRun = 'N'
              exit-select
      end-evaluate
  else
      let $ErrReason    = '  **Warning** Original check not found '
      do Format-Display-WarnMsg
  end-if

  let #PayGroup_RevChks_Processed = #PayGroup_RevChks_Processed + 1

FROM PS_PAY_CHECK     RCHECK
   , PS_SET_CNTRL_REC RSETREC
   , PS_DEPT_TBL      RDEPT
WHERE RCHECK.COMPANY         = $Company
  AND RCHECK.PAYGROUP        = $PayGroup
  AND RCHECK.PAY_END_DT      = $PayEndDt
  AND RCHECK.PAYCHECK_STATUS = 'F'
  AND RCHECK.PAYCHECK_OPTION = 'R'
  AND NOT EXISTS (SELECT 'X' FROM PS_PAY_NA_EARNINGS RERN
                  WHERE RERN.COMPANY       = RCHECK.COMPANY
                    AND RERN.PAYGROUP      = RCHECK.PAYGROUP
                    AND RERN.PAY_END_DT    = RCHECK.PAY_END_DT
                    AND RERN.OFF_CYCLE     = RCHECK.OFF_CYCLE
                    AND RERN.PAGE_NUM      = RCHECK.PAGE_NUM
                    AND RERN.LINE_NUM      = RCHECK.LINE_NUM
                    AND RERN.SEPCHK        = RCHECK.SEPCHK)
  AND RSETREC.REC_GROUP_ID   = 'HR_01'
  AND RSETREC.SETCNTRLVALUE  = RCHECK.BUSINESS_UNIT
  AND RSETREC.RECNAME        = 'DEPT_TBL'
  AND RDEPT.SETID            = RSETREC.SETID
  AND RDEPT.DEPTID           = RCHECK.DEPTID
  AND RDEPT.USE_DISTRIBUTION = 'N'
  AND RDEPT.EFFDT            = (SELECT MAX(RDEPT1.EFFDT) FROM PS_DEPT_TBL RDEPT1
                               WHERE RDEPT1.SETID  = RDEPT.SETID
                                 AND RDEPT1.DEPTID = RDEPT.DEPTID
                                 AND RDEPT1.EFFDT <= RCHECK.PAY_END_DT
                                 AND RDEPT1.EFF_STATUS = 'A')
end-select
end-procedure

!***************************************
begin-procedure Generate-GL-Transactions
!***************************************

  do Process-Earnings-Dist
  do Process-Deduction-Dist
  do Process-Tax-Dist
  do Process-Ctx-Dist
  do Process-NetPay-Dist
  do Write-Expenses

end-procedure

!*****************************************
begin-procedure Store-RegEarn-TL-Xref-Info
!*****************************************

  do Get-RegEarn-Xref-Num
  do Get-OthEarn-Xref-Num

  let #TLDistIdx = 0

  while #TLDistIdx < #MaxTLDist

      get #XrefNum $UseTLSource #TotalTLAmt #TotalPEAmt #LastLaborDist
      from TLXrefArray (#TLDistIdx)
          XrefNum UseTLSource TotalTLAmt TotalPEAmt LastLD

      if $UseTLSource = 'Y'

          let #TTL_LDRoundDiff  = 0
          let #LaborDistIdx = 0

          while #LaborDistIdx < #LastLaborDist

              get #TLLDAmt
              from  TLXrefArray (#TLDistIdx) TLLDAmt(#LaborDistIdx)

              if #LaborDistIdx = (#LastLaborDist - 1)

                  Array-Add #TTL_LDRoundDiff to TLXrefArray (#TLDistIdx) TLLDAmt(#LaborDistIdx)
                  let #LastTLLDAmt = #TLLDAmt + #TTL_LDRoundDiff
                  let #LDRoundDiff = #LastTLLDAmt - round(#LastTLLDAmt, 2)

                  let #TotalTLAmt = #TotalTLAmt - #LDRoundDiff
              else
                  let #LDRoundDiff = #TLLDAmt - round(#TLLDAmt, 2)
                  Array-Subtract #LDRoundDiff from TLXrefArray (#TLDistIdx) TLLDAmt(#LaborDistIdx)

                  let #TTL_LDRoundDiff  = #TTL_LDRoundDiff + #LDRoundDiff
              end-if

              let #LaborDistIdx     = #LaborDistIdx + 1
          end-while

          if #TotalTLAmt <> #TotalPEAmt

              display '  T&L Reference Number = ' noline
              display #XrefNum
              let $ErrReason = '  **Error** T&L Distribution Amount out of balance '
              do Format-Display-ErrMsg
          end-if
      end-if

      let #TLDistIdx = #TLDistIdx + 1

  end-while

end-procedure

!***********************************
begin-procedure Get-RegEarn-Xref-Num
!***********************************

  let #TLDistIdx = 0

begin-select
TLPE.XREF_NUM
#ifdef DB2ALL
DECIMAL(SUM(TLPE.REG_EARNS),15,2)         &TLPE.REG_EARNS
DECIMAL(SUM(TLPE.REG_HRLY_EARNS),15,2)    &TLPE.REG_HRLY_EARNS
#else
SUM(TLPE.REG_EARNS)                       &TLPE.REG_EARNS
SUM(TLPE.REG_HRLY_EARNS)                  &TLPE.REG_HRLY_EARNS
#endif

  let #XrefNum    = &TLPE.XREF_NUM
  let #TotalPEAmt = &TLPE.REG_EARNS + &TLPE.REG_HRLY_EARNS

  if #TLDistIdx < #XrefArraySize

      put #XrefNum 'N' 0 #TotalPEAmt 0 0
      into TLXrefArray (#TLDistIdx)
          XrefNum UseTLSource TotalTLAmt TotalPEAmt LastLD NotDistAmt

      do Get-RegEarn-Labor-Dist-Data

      let #TLDistIdx = #TLDistIdx + 1
  else
      display '***Error*** TL Xref Array limit exceeded'
      stop
  end-if

FROM  PS_PAY_EARNINGS TLPE
WHERE TLPE.COMPANY    = $Company
  AND TLPE.PAYGROUP   = $PayGroup
  AND TLPE.PAY_END_DT = $PayEndDt
  AND TLPE.OFF_CYCLE  = $OffCycle
  AND TLPE.PAGE_NUM   = #PageNum
  AND TLPE.LINE_NUM   = #LineNum
  AND TLPE.SEPCHK     = #SepChk
  AND TLPE.SINGLE_CHECK_USE IN ('N', 'C')
  AND TLPE.XREF_NUM  <> 0
GROUP BY TLPE.XREF_NUM
end-select

end-procedure

!***********************************
begin-procedure Get-OthEarn-Xref-Num
!***********************************

begin-select
TLOE.XREF_NUM
#ifdef DB2ALL
DECIMAL(SUM(TLOE.OTH_EARNS),15,2)         &TLOE.OTH_EARNS
#else
SUM(TLOE.OTH_EARNS)                       &TLOE.OTH_EARNS
#endif

  let #XrefNum    = &TLOE.XREF_NUM
  let #TotalPEAmt = &TLOE.OTH_EARNS

  if #TLDistIdx < #XrefArraySize

      put #XrefNum 'N' 0 #TotalPEAmt 0 0
      into TLXrefArray (#TLDistIdx)
          XrefNum UseTLSource TotalTLAmt TotalPEAmt LastLD NotDistAmt

      do Get-RegEarn-Labor-Dist-Data

      let #TLDistIdx = #TLDistIdx + 1
  else
      display '***Error*** TL Xref Array limit exceeded'
      stop
  end-if

FROM  PS_PAY_OTH_EARNS TLOE
WHERE TLOE.COMPANY    = $Company
  AND TLOE.PAYGROUP   = $PayGroup
  AND TLOE.PAY_END_DT = $PayEndDt
  AND TLOE.OFF_CYCLE  = $OffCycle
  AND TLOE.PAGE_NUM   = #PageNum
  AND TLOE.LINE_NUM   = #LineNum
  AND TLOE.SEPCHK     = #SepChk
  AND TLOE.XREF_NUM  <> 0
GROUP BY TLOE.XREF_NUM
end-select

  let #MaxTLDist = #TLDistIdx

end-procedure
!******************************************
begin-procedure Get-RegEarn-Labor-Dist-Data
!******************************************

  let #LaborDistIdx = 0

begin-select
TLPT.ACCT_CD
#ifdef DB2ALL
DECIMAL(SUM(TLPT.LBR_DIST_AMT),15,2)      &TLPT.LBR_DIST_AMT
#else
SUM(TLPT.LBR_DIST_AMT)                    &TLPT.LBR_DIST_AMT
#endif

  let $TLAcctCD    = &TLPT.ACCT_CD
  let #TLLDAmt     = &TLPT.LBR_DIST_AMT

  if #TLLDAmt <> 0
      if #LaborDistIdx < #TLDistSize

          put $TLAcctCD #TLLDAmt
          into TLXrefArray (#TLDistIdx)
              TLAcctCd (#LaborDistIdx) TLLDAmt (#LaborDistIdx)

          let #LaborDistIdx = #LaborDistIdx + 1

          Array-Add #TLLDAmt 1 to TLXrefArray (#TLDistIdx) TotalTLAmt LastLD

          if rtrim($TLAcctCD,' ') <> ''
              put 'Y' into TLXrefArray (#TLDistIdx) UseTLSource
          end-if
      else
          display '***Error*** TL Xref Array (Distribution) limit exceeded'
          stop
      end-if
  end-if

FROM PS_TL_PAYABLE_TIME TLPT
   , PS_TL_XREF_TBL TLXRF
WHERE TLXRF.XREF_NUM    = #XrefNum
  AND TLXRF.PAY_SYSTEM  = 'NA'
  AND TLPT.SEQ_NBR      = TLXRF.SEQ_NBR
  AND TLPT.PAY_SYSTEM   = TLXRF.PAY_SYSTEM
  AND TLPT.PAYABLE_STATUS IN ('CL', 'PD', 'DL')
GROUP BY TLPT.ACCT_CD
end-select

end-procedure

!***********************************
begin-procedure Get-Regular-Earnings
!***********************************

  let $ExDocID       = ' '
  let $ExDocType     = ' '
  let #ExLineNbr     = 0
  let $PrevEarnBU    = ' '
  let #PrevBenRcd    = 99999
  let $SingleBenRcd  = 'Y'
  let $FirstRegEarn  = 'Y'
  let $DefHomeEarns  = 'N'

begin-select on-error=SQL-error
PE.ADDL_NBR
PE.BUSINESS_UNIT
PE.DEPTID
PE.ACCT_CD
PE.ERNCD_REG_EARNS
PE.ERNCD_REG_HRS
PE.ERNCD_OT_HRS
PE.REG_HRLY_EARNS
PE.OT_HRLY_EARNS
PE.REG_EARNS
PE.GROSSUP
PE.EMPLID
PE.EMPL_RCD
PE.BENEFIT_RCD_NBR
PE.JOBCODE
PE.POSITION_NBR
PE.TL_SOURCE
PE.XREF_NUM

  if $FirstRegEarn = 'Y' and $DistExpense = 'N'

      do Read-Job-Record

      if $PayCheck_Business_Unit <> &PE.BUSINESS_UNIT or
         $DeptID                 <> &PE.DEPTID        or
         #EmplRcd                <> &PE.EMPL_RCD      or
         $JobCode                <> &PE.JOBCODE       or
         $PositionNbr            <> &PE.POSITION_NBR

          let $DefHomeEarns  = 'Y'
          do Set-Default-Entry
      end-if
  end-if

  let $FirstRegEarn     = 'N'
  let #AddlNbr          = &PE.ADDL_NBR
  let $Business_Unit    = &PE.BUSINESS_UNIT
  let $DeptID           = &PE.DEPTID
  let $PErnAcctCd       = &PE.ACCT_CD
  let $ErnCd_RegEarns   = &PE.ERNCD_REG_EARNS
  let $ErnCd_RegHrs     = &PE.ERNCD_REG_HRS
  let $ErnCd_OTHrs      = &PE.ERNCD_OT_HRS
  let #RegHrlyEarns     = &PE.REG_HRLY_EARNS
  let #OTHrlyEarns      = &PE.OT_HRLY_EARNS
  let #RegEarns         = &PE.REG_EARNS
  let $GrossUpOptn      = &PE.GROSSUP
  let $EmplID           = &PE.EMPLID
  let #EmplRcd          = &PE.EMPL_RCD
  let #BenefitRcd       = &PE.BENEFIT_RCD_NBR
  let $JobCode          = &PE.JOBCODE
  let $PositionNbr      = &PE.POSITION_NBR
  let $TLSource         = &PE.TL_SOURCE
  let #XrefNum          = &PE.XREF_NUM

  let $NotRegEarn = 'AND OE.ERNCD NOT IN (''' || $ErnCd_RegEarns || '''' || ', ''' || $ErnCd_RegHrs || '''' ||
                                          ', ''' || $ErnCd_OTHrs || '''' || ')'

  if $Business_Unit <> $PrevEarnBU
      do Get-GL-BU-Details ($Business_Unit, $Business_Unit_AP, $Business_Unit_GL, $Journal_Template)
      let $PrevEarnBU = $Business_Unit
  end-if

  if #BenefitRcd <> #PrevBenRcd
      if #PrevBenRcd <> 99999
          let $SingleBenRcd = 'N'
      end-if
      do Find-Benefit-Entry
      let #PrevBenRcd = #BenefitRcd
  end-if

  let $TLDataFound = 'N'
  let $TLProcess   = 'N'
  if ($TLInstall = 'Y' and #XrefNum <> 0)
      let $ResetAcct  = 'Y'
      let $ErnCd      = $ErnCd_RegEarns
      let #TLDistEarn = #RegEarns + #RegHrlyEarns
      do Get-LD-Amt-From-XrefNum-Array

      if $TLDataFound = 'Y'
          let $TLProcess = 'Y'
          let $SpecEarn  = $ErnCd_RegEarns
          do Get-Specific-Other-Earnings
      end-if
  end-if

  if $TLProcess = 'N'
      let $ErnCd        = $ErnCd_RegEarns
      let #DistEarnings = #RegEarns
      do Distribute-Earnings

      let $SpecEarn = $ErnCd_RegEarns
      do Get-Specific-Other-Earnings

      let $ErnCd        = $ErnCd_RegHrs
      let #DistEarnings = #RegHrlyEarns
      do Distribute-Earnings

      if $ErnCd_RegEarns <> $ErnCd_RegHrs
          let $SpecEarn = $ErnCd_RegHrs
          do Get-Specific-Other-Earnings
      end-if
  end-if

  let $ErnCd        = $ErnCd_OTHrs
  let #DistEarnings = #OTHrlyEarns
  do Distribute-Earnings

  if $ErnCd_OTHrs <> $ErnCd_RegEarns and
     $ErnCd_OTHrs <> $ErnCd_RegHrs

      let $SpecEarn = $ErnCd_OTHrs
      do Get-Specific-Other-Earnings
  end-if

  do Get-Other-Earnings

FROM  PS_PAY_EARNINGS PE
WHERE PE.COMPANY    = $Company
  AND PE.PAYGROUP   = $PayGroup
  AND PE.PAY_END_DT = $PayEndDt
  AND PE.OFF_CYCLE  = $OffCycle
  AND PE.PAGE_NUM   = #PageNum
  AND PE.LINE_NUM   = #LineNum
  AND PE.SEPCHK     = #SepChk
  AND PE.SINGLE_CHECK_USE IN ('N', 'C')
ORDER BY ADDL_NBR
end-select

end-procedure

!********************************
begin-procedure Set-Default-Entry
!********************************

  let $Business_Unit   = $PayCheck_Business_Unit
  do Get-GL-BU-Details ($Business_Unit, $Business_Unit_AP, $Business_Unit_GL, $Journal_Template)

  let #AddlNbr         = 0
  let #BenefitRcd      = 0
  let $ErnCd           = $PGrp_ErnCd_Reg_Hrs
  let #DistEarnings    = 0
  let #ExpDistIdx      = 0

  do Get-Ern-ChartFields
  do Create-ExpArray-Entry

  let #PrevAddlNbr     = 0
  let $PrevEmplID      = $EmplID
  let #PrevEmplRcd     = #EmplRcd
  let $PrevErnCd       = $PGrp_ErnCd_Reg_Hrs
  let #PrevEarnings    = 0
  let $PrevBusUnit     = $Business_Unit
  let $PrevDeptID      = $DeptID
  let $PrevPosnNbr     = $PositionNbr
  let $PrevJobCode     = $JobCode
  let $PrevExDocID     = ' '
  let $PrevExDocType   = ' '
  let #PrevExLineNbr   = 0

  do Write-NA-Earnings-Rec

end-procedure

!******************************
begin-procedure Read-Job-Record
!******************************

begin-select on-error=SQL-error
J.JOBCODE
J.POSITION_NBR

  let $JobCode      = &J.JOBCODE
  let $PositionNbr  = &J.POSITION_NBR

FROM PS_JOB J
WHERE J.EMPLID     = $EmplID
  AND J.EMPL_RCD   = #EmplRcd
  AND J.EFFDT      = (SELECT MAX(J1.EFFDT) FROM PS_JOB J1
                      WHERE J1.EMPLID    = J.EMPLID
                        AND J1.EMPL_RCD  = J.EMPL_RCD
                        AND J1.EFFDT    <= $PayEndDt)
  AND J.EFFSEQ     = (SELECT MAX(J2.EFFSEQ) FROM PS_JOB J2
                      WHERE J2.EMPLID    = J.EMPLID
                        AND J2.EMPL_RCD  = J.EMPL_RCD
                        AND J2.EFFDT     = J.EFFDT)
end-select
end-procedure

!******************************************
begin-procedure Get-Specific-Other-Earnings
!******************************************

begin-select on-error=SQL-error
OSE.ERNCD
OSE.OTH_PAY
OSE.OTH_EARNS
OSE.ADD_GROSS
OSE.XREF_NUM
OSE.EX_DOC_ID
OSE.EX_DOC_TYPE
OSE.EX_LINE_NBR

  let $ErnCd        = &OSE.ERNCD
  let #OthPay       = &OSE.OTH_PAY
  let #OthEarns     = &OSE.OTH_EARNS
  let $AddToGross   = &OSE.ADD_GROSS
  let #XrefNum      = &OSE.XREF_NUM
  let $ExDocID      = &OSE.EX_DOC_ID
  let $ExDocType    = &OSE.EX_DOC_TYPE
  let #ExLineNbr    = &OSE.EX_LINE_NBR
  let $ProcTLEarn   = 'N'

  if $AddToGross = 'N' and $GrossUpOptn = 'Y'
      let #DistEarnings = #OthEarns - #OthPay
      do Distribute-Earnings
  else
      if $AddToGross = 'Y' or $AddToGross = ' '
          let $TLDataFound = 'N'
          if ($TLInstall = 'Y' and #XrefNum <> 0)
              let $ResetAcct  = 'Y'
              let #TLDistEarn = #OthEarns
              do Get-LD-Amt-From-XrefNum-Array
          end-if

          if $TLDataFound = 'N'
              let #DistEarnings = #OthEarns
              do Distribute-Earnings
          end-if
      end-if
  end-if

FROM  PS_PAY_OTH_EARNS OSE
WHERE OSE.COMPANY    = $Company
  AND OSE.PAYGROUP   = $PayGroup
  AND OSE.PAY_END_DT = $PayEndDt
  AND OSE.OFF_CYCLE  = $OffCycle
  AND OSE.PAGE_NUM   = #PageNum
  AND OSE.LINE_NUM   = #LineNum
  AND OSE.ADDL_NBR   = #AddlNbr
  AND OSE.SEPCHK     = #SepChk
  AND OSE.ERNCD      = $SpecEarn
end-select

end-procedure

!*********************************
begin-procedure Get-Other-Earnings
!*********************************

begin-select on-error=SQL-error
OE.ERNCD
OE.OTH_PAY
OE.OTH_EARNS
OE.ADD_GROSS
OE.XREF_NUM
OE.EX_DOC_ID
OE.EX_DOC_TYPE
OE.EX_LINE_NBR

  let $ErnCd        = &OE.ERNCD
  let #OthPay       = &OE.OTH_PAY
  let #OthEarns     = &OE.OTH_EARNS
  let $AddToGross   = &OE.ADD_GROSS
  let #XrefNum      = &OE.XREF_NUM
  let $ExDocID      = &OE.EX_DOC_ID
  let $ExDocType    = &OE.EX_DOC_TYPE
  let #ExLineNbr    = &OE.EX_LINE_NBR
  let $ProcTLEarn   = 'N'

  if $AddToGross = 'N' and $GrossUpOptn = 'Y'
      let #DistEarnings = #OthEarns - #OthPay
      do Distribute-Earnings
  else
      if $AddToGross = 'Y' or $AddToGross = ' '
          let $TLDataFound = 'N'
          if ($TLInstall = 'Y' and #XrefNum <> 0)
              let $ResetAcct  = 'Y'
              let #TLDistEarn = #OthEarns
              do Get-LD-Amt-From-XrefNum-Array
          end-if

          if $TLDataFound = 'N'
              let #DistEarnings = #OthEarns
              do Distribute-Earnings
          end-if
      end-if
  end-if

FROM  PS_PAY_OTH_EARNS OE
WHERE OE.COMPANY    = $Company
  AND OE.PAYGROUP   = $PayGroup
  AND OE.PAY_END_DT = $PayEndDt
  AND OE.OFF_CYCLE  = $OffCycle
  AND OE.PAGE_NUM   = #PageNum
  AND OE.LINE_NUM   = #LineNum
  AND OE.ADDL_NBR   = #AddlNbr
  AND OE.SEPCHK     = #SepChk
  [$NotRegEarn]
end-select

end-procedure

!********************************************
begin-procedure Get-LD-Amt-From-XrefNum-Array
!********************************************

  let #TLDistIdx = 0

  while #TLDistIdx < #MaxTLDist and $TLDataFound = 'N'

      get #TLXrefNum $UseTLSource #LastLaborDist
      from TLXrefArray (#TLDistIdx) XrefNum UseTLSource LastLD

      if #TLXrefNum = #XrefNum and $UseTLSource = 'Y'

          let #LaborDistIdx = 0

          while #LaborDistIdx < #LastLaborDist and #TLDistEarn > 0

              get $TLAcctCd #TLLDAmt
              from  TLXrefArray (#TLDistIdx) TLAcctCd(#LaborDistIdx) TLLDAmt(#LaborDistIdx)

              if #TLDistEarn > 0
                  if #TLDistEarn <= #TLLDAmt
                      let #DistEarnings = #TLDistEarn
                      let #TLDistEarn   = 0
                  else
                      let #DistEarnings = #TLLDAmt
                      let #TLDistEarn   = #TLDistEarn - #TLLDAmt
                  end-if

                  Array-Subtract #DistEarnings from TLXrefArray (#TLDistIdx) TLLDAmt(#LaborDistIdx)

                  do Distribute-TL-Earnings
              end-if

              let #LaborDistIdx = #LaborDistIdx + 1
          end-while

          if #TLDistEarn <> 0
              Array-Add #TLDistEarn to TLXrefArray (#TLDistIdx) NotDistAmt
          end-if

          let $TLDataFound  = 'Y'
      end-if

      let #TLDistIdx = #TLDistIdx + 1

  end-while

end-procedure

!*************************************
begin-procedure Distribute-TL-Earnings
!*************************************

  if rtrim($TLAcctCd,' ') = ''
      if $ResetAcct  = 'Y'
          do Get-Ern-ChartFields
          let $ResetAcct  = 'N'
          let $SaveAcctCd = $AcctCd
      else
          let $AcctCd = $SaveAcctCd
      end-if
  else
      let $AcctCd = $TLAcctCd
  end-if

  do Calc-Earn-Accrual-Amt
  do Find-ErnArray-Entry

end-procedure

!**********************************
begin-procedure Distribute-Earnings
!**********************************

  if rtrim($PErnAcctCd,' ') = ''
      do Get-Ern-ChartFields
  else
      let $AcctCd = $PErnAcctCd
  end-if

  do Calc-Earn-Accrual-Amt
  do Find-ErnArray-Entry

end-procedure

!************************************
begin-procedure Calc-Earn-Accrual-Amt
!************************************

  let #AccrEarnAmt = 0
  if $ReverseAccrual = 'N' and #AccrualPct > 0

      if #DistEarnings <> 0

          let #Accrual_Amount    = round((#DistEarnings *  #AccrualPct) / 100, 6)
          let #AccrEarnAmt       = round(#Accrual_Amount, 2)
          let #Accrual_Diff      = #Accrual_Amount - #AccrEarnAmt
          let #Exp_Accrual_Diff  = #Exp_Accrual_Diff + #Accrual_Diff

          if #Exp_Accrual_Diff >= 0.01
              let #AccrEarnAmt         = #AccrEarnAmt + 0.01
              let #Exp_Accrual_Diff    = #Exp_Accrual_Diff - 0.01
          else
              if #Exp_Accrual_Diff <= -0.01
                  let #AccrEarnAmt         = #AccrEarnAmt - 0.01
                  let #Exp_Accrual_Diff    = #Exp_Accrual_Diff + 0.01
              end-if
          end-if
      end-if
  end-if

end-procedure

!**********************************
begin-procedure Find-ErnArray-Entry
!**********************************

  let #TtlEarn  = #TtlEarn + #DistEarnings
  Array-Add #DistEarnings to BenEarnArray (#BenIdx) TotalEarn
  if #DistEarnings > 0
      let #TtlPosEarn = #TtlPosEarn + #DistEarnings
      Array-Add #DistEarnings to BenEarnArray (#BenIdx) TotalPosEarn
  else
      let #TtlNegEarn = #TtlNegEarn + #DistEarnings
      Array-Add #DistEarnings to BenEarnArray (#BenIdx) TotalNegEarn
  end-if

  let #ErnDistIdx    = 0
  let $ErnEntryFound = 'N'
  while #ErnDistIdx < #MaxErnDist and $ErnEntryFound = 'N'

      get #EDst_AddlNbr $EDst_EmplID #EDst_EmplRcd $EDst_ErnCd $EDst_AcctCd
      from EarnDistArray (#ErnDistIdx)
          AddlNbr EmplID EmplRcd ErnCd AccountCode

      if #EDst_AddlNbr    = #AddlNbr    and
         $EDst_EmplID     = $EmplID     and
         #EDst_EmplRcd    = #EmplRcd    and
         $EDst_ErnCd      = $ErnCd      and
         $EDst_AcctCd     = $AcctCd

          let $ErnEntryFound = 'Y'
          Array-Add #DistEarnings to EarnDistArray (#ErnDistIdx) Earns_Amt
          Array-Add #AccrEarnAmt  to EarnDistArray (#ErnDistIdx) AccrEarn_Amt
      else
          let #ErnDistIdx = #ErnDistIdx + 1
      end-if

  end-while

  if $ErnEntryFound = 'N'
      do Create-ErnArray-Entry
  end-if

  let #ExpDistIdx    = 0
  let $ErnEntryFound = 'N'
  while #ExpDistIdx < #MaxExpDist and $ErnEntryFound = 'N'

      get #EDst_EmplRcd #EDst_BenefitRcd $EDst_BusinessUnit $EDst_DeptID $EDst_PositionNbr $EDst_JobCode
      from ExpDistArray (#ExpDistIdx)
          EmplRcd BenefitRcd Business_Unit DeptID Position_Nbr JobCode

      if #EDst_EmplRcd      = #EmplRcd       and
         #EDst_BenefitRcd   = #BenefitRcd    and
         $EDst_BusinessUnit = $Business_Unit and
         $EDst_DeptID       = $DeptID        and
         $EDst_PositionNbr  = $PositionNbr   and
         $EDst_JobCode      = $JobCode

          let $ErnEntryFound = 'Y'
          Array-Add #DistEarnings to ExpDistArray (#ExpDistIdx) Earns_Amt
      else
          let #ExpDistIdx = #ExpDistIdx + 1
      end-if
  end-while

  if $ErnEntryFound = 'N'
      do Create-ExpArray-Entry
  end-if
end-procedure

!*********************************
begin-procedure Write-Earnings-Rec
!*********************************

  let #PrevAddlNbr   = 0
  let $PrevEmplID    = ' '
  let #PrevEmplRcd   = 0
  let $PrevErnCd     = ' '
  let $PrevExDocID   = ' '
  let $PrevExDocType = ' '
  let #PrevExLineNbr = 0
  let #PrevEarnings  = 0
  let $PrevBusUnit   = ' '
  let $PrevDeptID    = ' '
  let $PrevPosnNbr   = ' '
  let $PrevJobCode   = ' '
  let $FirstEarnings = 'Y'

  let #ErnDistIdx    = 0
  while #ErnDistIdx < #MaxErnDist and $NoEarnings = 'Y'
      get #EDst_Earnings from EarnDistArray (#ErnDistIdx) Earns_Amt

      if abs(#EDst_Earnings) > 0
          let $NoEarnings = 'N'
      end-if

      let #ErnDistIdx = #ErnDistIdx + 1
  end-while

  let #ErnDistIdx    = 0
  while #ErnDistIdx < #MaxErnDist

      get #EDst_AddlNbr $EDst_EmplID #EDst_EmplRcd $EDst_ErnCd $EDst_AcctCd
          $EDst_BusUnit $EDst_DeptID $EDst_PosnNbr  $EDst_JobCode
          #EDst_Earnings #EDst_AccrAmt $EDst_ExDocID $EDst_ExDocType #EDst_ExLineNbr
      from EarnDistArray (#ErnDistIdx)
          AddlNbr EmplID EmplRcd ErnCd AccountCode
          Business_Unit DeptID Position_Nbr JobCode
          Earns_Amt AccrEarn_Amt Ex_Doc_ID Ex_Doc_Type Ex_Line_Nbr

      if #EDst_AddlNbr   <> #PrevAddlNbr  or
         $EDst_EmplID    <> $PrevEmplID   or
         #EDst_EmplRcd   <> #PrevEmplRcd  or
         $EDst_ErnCd     <> $PrevErnCd

          if $FirstEarnings = 'N'
              if $NoEarnings      = 'Y'              and
                 $PrevErnCd       = $ErnCd_RegEarns

                  if $DefHomeEarns  = 'Y'                  and
                     $PrevErnCd     = $PGrp_ErnCd_Reg_Hrs  and
                     #PrevAddlNbr   = 0
                  else
                      do Write-NA-Earnings-Rec
                  end-if
              else
                  if #PrevEarnings <> 0
                      if $DefHomeEarns  = 'Y'                  and
                         $PrevErnCd     = $PGrp_ErnCd_Reg_Hrs  and
                         #PrevAddlNbr   = 0

                          do Update-NA-Earnings-Rec
                      else
                          do Write-NA-Earnings-Rec
                      end-if
                  end-if
              end-if
          end-if

          let $FirstEarnings = 'N'
          let #PrevAddlNbr   = #EDst_AddlNbr
          let $PrevEmplID    = $EDst_EmplID
          let #PrevEmplRcd   = #EDst_EmplRcd
          let $PrevErnCd     = $EDst_ErnCd
          let $PrevExDocID   = $EDst_ExDocID
          let $PrevExDocType = $EDst_ExDocType
          let #PrevExLineNbr = #EDst_ExLineNbr
          let $PrevBusUnit   = $EDst_BusUnit
          let $PrevDeptID    = $EDst_DeptID
          let $PrevPosnNbr   = $EDst_PosnNbr
          let $PrevJobCode   = $EDst_JobCode
          let #PrevEarnings  = 0
      end-if

      if #EDst_Earnings <> 0
          do Write-NA-Ern-Dist-Rec
          let #PrevEarnings = #PrevEarnings + #EDst_Earnings
      end-if

      let #ErnDistIdx = #ErnDistIdx + 1
  end-while

  if $FirstEarnings = 'N'
      if $NoEarnings      = 'Y'              and
         $PrevErnCd       = $ErnCd_RegEarns

          if $DefHomeEarns  = 'Y'                  and
             $PrevErnCd     = $PGrp_ErnCd_Reg_Hrs  and
             #PrevAddlNbr   = 0
          else
              do Write-NA-Earnings-Rec
          end-if
      else
          if #PrevEarnings <> 0
              if $DefHomeEarns  = 'Y'                   and
                  $PrevErnCd     = $PGrp_ErnCd_Reg_Hrs  and
                  #PrevAddlNbr   = 0

                   do Update-NA-Earnings-Rec
              else
                   do Write-NA-Earnings-Rec
              end-if
          end-if
      end-if
  end-if

end-procedure

!*********************************
begin-procedure Find-Benefit-Entry
!*********************************

  let #BenIdx   = 0
  let $BenFound = 'N'
  while #BenIdx < #MaxBenEarn and $BenFound = 'N'
      get #BenEarnRcd from BenEarnArray (#BenIdx) BenefitRcd

      if #BenEarnRcd = #BenefitRcd
          let $BenFound = 'Y'
      else
          let #BenIdx = #BenIdx + 1
      end-if
  end-while

  if $BenFound = 'N'
      if #BenIdx < #BenEarnArraySize
          put #BenefitRcd 0 0 0 into BenEarnArray (#BenIdx) BenefitRcd TotalEarn TotalPosEarn TotalNegEarn
          let #MaxBenEarn = #BenIdx + 1
      else
          display '***Error*** Earning Distribution (by Benefit Program) Array limit exceeded'
          stop
      end-if
  end-if

end-procedure

!************************************
begin-procedure Create-ErnArray-Entry
!************************************

  if #ErnDistIdx < #EarnDistArraySize

      put #AddlNbr $EmplID #EmplRcd #BenefitRcd $ErnCd $AcctCd
          $Business_Unit $Business_Unit_AP $Business_Unit_GL $DeptID $PositionNbr $JobCode $ErnMapLevel
          $ExDocID $ExDocType #ExLineNbr 'N' 0 'N' 0 'N' 0 'N' 0 'N' 0 'N' 0
          #DistEarnings 0 0 #AccrEarnAmt 0 0 'N'
      into EarnDistArray (#ErnDistIdx)
          AddlNbr EmplID EmplRcd BenefitRcd ErnCd AccountCode
          Business_Unit Business_Unit_AP Business_Unit_GL DeptID Position_Nbr JobCode StartMapLevel
          Ex_Doc_ID Ex_Doc_Type Ex_Line_Nbr LastDist DistPct PosLastDist PosDistPct NegLastDist NegDistPct
          BenLastDist BenDistPct PosBenLastDist PosBenDistPct NegBenLastDist NegBenDistPct
          Earns_Amt Refund_Amt Deduct_Amt AccrEarn_Amt AccrRefund AccrDedn_Amt AccrSend

      let #MaxErnDist = #ErnDistIdx + 1
  else
      display '***Error*** Earning Distribution Array limit exceeded'
      stop
  end-if
end-procedure


!************************************
begin-procedure Create-ExpArray-Entry
!************************************

  if #ExpDistIdx < #ExpDistArraySize

      put #AddlNbr $EmplID #EmplRcd #BenefitRcd $ErnCd $Business_Unit $Business_Unit_AP $Business_Unit_GL
          $DeptID $PositionNbr $JobCode $ErnMapLevel
          'N' 0 'N' 0 'N' 0 'N' 0 'N' 0 'N' 0 #DistEarnings
      into ExpDistArray (#ExpDistIdx)
          AddlNbr EmplID  EmplRcd BenefitRcd ErnCd Business_Unit Business_Unit_AP Business_Unit_GL
          DeptID Position_Nbr JobCode StartMapLevel
          LastDist DistPct PosLastDist PosDistPct NegLastDist NegDistPct
          BenLastDist BenDistPct PosBenLastDist PosBenDistPct NegBenLastDist NegBenDistPct Earns_Amt

      let #MaxExpDist = #ExpDistIdx + 1
  else
      display '***Error*** Expense Distribution Array limit exceeded'
      stop
  end-if
end-procedure

!****************************************
begin-procedure Calc-Distribution-Percent
!****************************************

  let #ErnDistIdx         = 0
  let #PrevBenRcd         = 99999

  while #ErnDistIdx < #MaxErnDist

      get #BenefitRcd #EarnsAmt from EarnDistArray (#ErnDistIdx) BenefitRcd Earns_Amt

      if #BenefitRcd <> #PrevBenRcd
          do Find-Benefit-Rcd-Earnings
          let #PrevBenRcd = #BenefitRcd
      end-if

      let #CalDistPct = 0
      if #EarnsAmt > 0
          let #CalDistPct = round(#EarnsAmt / #TtlPosEarn, 6)
          put #CalDistPct 0  into EarnDistArray (#ErnDistIdx) PosDistPct NegDistPct

          let #CalDistPct = round(#EarnsAmt / #TtlPosBenEarn, 6)
          put #CalDistPct 0  into EarnDistArray (#ErnDistIdx) PosBenDistPct NegBenDistPct
      else
          if #EarnsAmt < 0
              let #CalDistPct = round(#EarnsAmt / #TtlNegEarn, 6)
              put 0 #CalDistPct into EarnDistArray (#ErnDistIdx) PosDistPct NegDistPct

              let #CalDistPct = round(#EarnsAmt / #TtlNegBenEarn, 6)
              put 0 #CalDistPct into EarnDistArray (#ErnDistIdx) PosBenDistPct NegBenDistPct
          else
              put 0 0 into EarnDistArray (#ErnDistIdx) PosDistPct NegDistPct
              put 0 0 into EarnDistArray (#ErnDistIdx) PosBenDistPct NegBenDistPct
          end-if
      end-if

      let #CalDistPct = 0
      if #TtlEarn <> 0
          let #CalDistPct = round(#EarnsAmt / #TtlEarn, 6)
      end-if
      put #CalDistPct into EarnDistArray (#ErnDistIdx) DistPct

      let #CalDistPct = 0
      if #TtlBenEarn <> 0
          let #CalDistPct = round(#EarnsAmt / #TtlBenEarn, 6)
      end-if
      put #CalDistPct into EarnDistArray (#ErnDistIdx) BenDistPct

      let #ErnDistIdx = #ErnDistIdx + 1
  end-while

  let $SetEntry     = 'N'
  let $SetPosEntry  = 'N'
  let $SetNegEntry  = 'N'

  if #TtlEarn = 0
      let $SetEntry     = 'Y'
  end-if

  if #TtlPosEarn = 0
      let $SetPosEntry  = 'Y'
  end-if

  if #TtlNegEarn = 0
      let $SetNegEntry  = 'Y'
  end-if

  let #ErnDistIdx   = #MaxErnDist - 1
  while #ErnDistIdx >= 0 and ($SetEntry = 'N' or $SetPosEntry = 'N' or $SetNegEntry = 'N')

      get #DistPct #PosDistPct #NegDistPct from EarnDistArray (#ErnDistIdx) DistPct PosDistPct NegDistPct

      if #DistPct <> 0  and $SetEntry = 'N'
          let $SetEntry     = 'Y'
          put 'Y' into EarnDistArray (#ErnDistIdx) LastDist
      end-if

      if #PosDistPct <> 0  and $SetPosEntry = 'N'
          let $SetPosEntry  = 'Y'
          put 'Y' into EarnDistArray (#ErnDistIdx) PosLastDist
      end-if

      if #NegDistPct <> 0  and $SetNegEntry = 'N'
          let $SetNegEntry  = 'Y'
          put 'Y' into EarnDistArray (#ErnDistIdx) NegLastDist
      end-if

      let #ErnDistIdx = #ErnDistIdx - 1
  end-while

  if $SingleBenRcd = 'N'
      let #BenEarnIdx = 0
      while #BenEarnIdx < #MaxBenEarn

          get #BenEarnRcd #TtlBenEarn #TtlPosBenEarn #TtlNegBenEarn
          from BenEarnArray (#BenEarnIdx) BenefitRcd TotalEarn TotalPosEarn TotalNegEarn

          let $SetEntry     = 'N'
          let $SetPosEntry  = 'N'
          let $SetNegEntry  = 'N'

          if #TtlBenEarn = 0
              let $SetEntry     = 'Y'
          end-if

          if #TtlPosBenEarn = 0
              let $SetPosEntry  = 'Y'
          end-if

          if #TtlNegBenEarn = 0
              let $SetNegEntry  = 'Y'
          end-if

          let #ErnDistIdx   = #MaxErnDist - 1
          while #ErnDistIdx >= 0 and ($SetEntry = 'N' or $SetPosEntry = 'N' or $SetNegEntry = 'N')

              get #BenefitRcd #BenDistPct #PosBenDistPct #NegBenDistPct
              from EarnDistArray (#ErnDistIdx) BenefitRcd BenDistPct PosBenDistPct NegBenDistPct

              if #BenDistPct <> 0  and $SetEntry = 'N'
                  let $SetEntry     = 'Y'
                  put 'Y' into EarnDistArray (#ErnDistIdx) BenLastDist
              end-if

              if #PosBenDistPct <> 0   and $SetPosEntry = 'N'
                  let $SetPosEntry  = 'Y'
                  put 'Y' into EarnDistArray (#ErnDistIdx) PosBenLastDist
              end-if

              if #NegBenDistPct <> 0  and $SetNegEntry = 'N'
                  let $SetNegEntry  = 'Y'
                  put 'Y' into EarnDistArray (#ErnDistIdx) NegBenLastDist
              end-if

              let #ErnDistIdx = #ErnDistIdx - 1
          end-while

          let #BenEarnIdx = #BenEarnIdx + 1
      end-while
  end-if

end-procedure

!********************************************
begin-procedure Calc-Exp-Distribution-Percent
!********************************************

  let #ExpDistIdx         = 0
  let #PrevBenRcd         = 99999

  while #ExpDistIdx < #MaxExpDist

      get #BenefitRcd #EarnsAmt from ExpDistArray (#ExpDistIdx) BenefitRcd Earns_Amt

      if #BenefitRcd <> #PrevBenRcd
          do Find-Benefit-Rcd-Earnings
          let #PrevBenRcd = #BenefitRcd
      end-if

      let #CalDistPct = 0
      if #EarnsAmt > 0
          let #CalDistPct = round(#EarnsAmt / #TtlPosEarn, 6)
          put #CalDistPct 0  into ExpDistArray (#ExpDistIdx) PosDistPct NegDistPct

          let #CalDistPct = round(#EarnsAmt / #TtlPosBenEarn, 6)
          put #CalDistPct 0  into ExpDistArray (#ExpDistIdx) PosBenDistPct NegBenDistPct
      else
          if #EarnsAmt < 0
              let #CalDistPct = round(#EarnsAmt / #TtlNegEarn, 6)
              put 0 #CalDistPct into ExpDistArray (#ExpDistIdx) PosDistPct NegDistPct

              let #CalDistPct = round(#EarnsAmt / #TtlNegBenEarn, 6)
              put 0 #CalDistPct into ExpDistArray (#ExpDistIdx) PosBenDistPct NegBenDistPct
          else
              put 0 0 into ExpDistArray (#ExpDistIdx) PosDistPct NegDistPct
              put 0 0 into ExpDistArray (#ExpDistIdx) PosBenDistPct NegBenDistPct
          end-if
      end-if

      let #CalDistPct = 0
      if #TtlEarn <> 0
          let #CalDistPct = round(#EarnsAmt / #TtlEarn, 6)
      end-if
      put #CalDistPct into ExpDistArray (#ExpDistIdx) DistPct

      let #CalDistPct = 0
      if #TtlBenEarn <> 0
          let #CalDistPct = round(#EarnsAmt / #TtlBenEarn, 6)
      end-if
      put #CalDistPct into ExpDistArray (#ExpDistIdx) BenDistPct

      let #ExpDistIdx = #ExpDistIdx + 1
  end-while

  let $SetEntry     = 'N'
  let $SetPosEntry  = 'N'
  let $SetNegEntry  = 'N'

  if #TtlEarn = 0
      let $SetEntry     = 'Y'
  end-if

  if #TtlPosEarn = 0
      let $SetPosEntry  = 'Y'
  end-if

  if #TtlNegEarn = 0
      let $SetNegEntry  = 'Y'
  end-if

  let #ExpDistIdx   = #MaxExpDist - 1
  while #ExpDistIdx >= 0 and ($SetEntry = 'N' or $SetPosEntry = 'N' or $SetNegEntry = 'N')

      get #DistPct #PosDistPct #NegDistPct from ExpDistArray (#ExpDistIdx) DistPct PosDistPct NegDistPct

      if #DistPct <> 0  and $SetEntry = 'N'
          let $SetEntry     = 'Y'
          put 'Y' into ExpDistArray (#ExpDistIdx) LastDist
      end-if

      if #PosDistPct <> 0  and $SetPosEntry = 'N'
          let $SetPosEntry  = 'Y'
          put 'Y' into ExpDistArray (#ExpDistIdx) PosLastDist
      end-if

      if #NegDistPct <> 0  and $SetNegEntry = 'N'
          let $SetNegEntry  = 'Y'
          put 'Y' into ExpDistArray (#ExpDistIdx) NegLastDist
      end-if

      let #ExpDistIdx = #ExpDistIdx - 1
  end-while

  if $SingleBenRcd = 'N'
      let #BenEarnIdx = 0
      while #BenEarnIdx < #MaxBenEarn

          get #BenEarnRcd #TtlBenEarn #TtlPosBenEarn #TtlNegBenEarn
          from BenEarnArray (#BenEarnIdx) BenefitRcd TotalEarn TotalPosEarn TotalNegEarn

          let $SetEntry     = 'N'
          let $SetPosEntry  = 'N'
          let $SetNegEntry  = 'N'

          if #TtlBenEarn = 0
              let $SetEntry     = 'Y'
          end-if

          if #TtlPosBenEarn = 0
              let $SetPosEntry  = 'Y'
          end-if

          if #TtlNegBenEarn = 0
              let $SetNegEntry  = 'Y'
          end-if

          let #ExpDistIdx   = #MaxExpDist - 1
          while #ExpDistIdx >= 0 and ($SetEntry = 'N' or $SetPosEntry = 'N' or $SetNegEntry = 'N')

              get #BenefitRcd #BenDistPct #PosBenDistPct #NegBenDistPct
              from ExpDistArray (#ExpDistIdx) BenefitRcd BenDistPct PosBenDistPct NegBenDistPct

              if #BenDistPct <> 0  and $SetEntry = 'N'
                  let $SetEntry     = 'Y'
                  put 'Y' into ExpDistArray (#ExpDistIdx) BenLastDist
              end-if

              if #PosBenDistPct <> 0   and $SetPosEntry = 'N'
                  let $SetPosEntry  = 'Y'
                  put 'Y' into ExpDistArray (#ExpDistIdx) PosBenLastDist
              end-if

              if #NegBenDistPct <> 0  and $SetNegEntry = 'N'
                  let $SetNegEntry  = 'Y'
                  put 'Y' into ExpDistArray (#ExpDistIdx) NegBenLastDist
              end-if

              let #ExpDistIdx = #ExpDistIdx - 1
          end-while

          let #BenEarnIdx = #BenEarnIdx + 1
      end-while
  end-if

end-procedure

!**********************************
begin-procedure Print-EarnDistArray
!**********************************

  display '<<<<<<<<<<<<<<<< Earn Dist Array >>>>>>>>>>>>>>>>'

  let #ErnDistIdx         = 0

  while #ErnDistIdx < #MaxErnDist

      get #PrtAddlNbr $PrtEmplID #PrtEmplRcd #PrtBenefitRcd $PrtErnCd $PrtAcctCd $PrtBusUnit
          $PrtDeptID $PrtPosnNbr $PrtJobCd $PrtStrMapLvl
          $PrtLastDist #PrtDistPct $PrtPosLastDist #PrtPosDistPct $PrtNegLastDist #PrtNegDistPct
          $PrBLastDist #PrBDistPct $PrBPosLastDist #PrBPosDistPct $PrBNegLastDist #PrBNegDistPct
          #PrtEarnsAmt #PrtRefundAmt #PrtDeductAmt #PrtAccrErnAmt #PrtAccrRfudAmt #PrtAccrDednAmt
      from EarnDistArray (#ErnDistIdx)
          AddlNbr EmplID EmplRcd BenefitRcd ErnCd AccountCode
          Business_Unit DeptID Position_Nbr JobCode StartMapLevel
          LastDist DistPct PosLastDist PosDistPct NegLastDist NegDistPct
          BenLastDist BenDistPct PosBenLastDist PosBenDistPct NegBenLastDist NegBenDistPct
          Earns_Amt Refund_Amt Deduct_Amt AccrEarn_Amt AccrRefund AccrDedn_Amt

      let $PrtAddlNbr     = edit(#PrtAddlNbr,'999')
      let $PrtEmplRcd     = edit(#PrtEmplRcd,'999')
      let $PrtBenefitRcd  = edit(#PrtBenefitRcd,'999')
      let $PrtDistPct     = edit(#PrtDistPct,'999.999999')
      let $PrtPosDistPct  = edit(#PrtPosDistPct,'999.999999')
      let $PrtNegDistPct  = edit(#PrtNegDistPct,'999.999999')
      let $PrBDistPct     = edit(#PrBDistPct,'999.999999')
      let $PrBPosDistPct  = edit(#PrBPosDistPct,'999.999999')
      let $PrBNegDistPct  = edit(#PrBNegDistPct,'999.999999')
      let $PrtEarnsAmt    = edit(#PrtEarnsAmt,'999999999.99')
      let $PrtRefundAmt   = edit(#PrtRefundAmt,'999999999.99')
      let $PrtDeductAmt   = edit(#PrtDeductAmt,'999999999.99')
      let $PrtAccrErnAmt  = edit(#PrtAccrErnAmt,'999999999.99')
      let $PrtAccrRfudAmt = edit(#PrtAccrRfudAmt,'999999999.99')
      let $PrtAccrDednAmt = edit(#PrtAccrDednAmt,'999999999.99')

      let $PrtLine1 = ' --> Addl# ' || $PrtAddlNbr || ' EmplID ' || $PrtEmplID || ' EmplRcd# ' || $PrtEmplRcd ||
                      ' BenefitRcd# ' || $PrtBenefitRcd || ' ErnCd ' || $PrtErnCd || ' AccountCd ' || $PrtAcctCd
      let $PrtLine2 = '     BusUnit ' || $PrtBusUnit || ' DeptID ' || $PrtDeptID || ' Posn# ' || $PrtPosnNbr ||
                      ' JobCd ' || $PrtJobCd || ' MappingLevel ' || $PrtStrMapLvl
      let $PrtLine3 = '                 LastDist ' || $PrtLastDist || ' Dist% ' || $PrtDistPct || ' PosLastDist ' ||
                      $PrtPosLastDist || ' PosDist% ' || $PrtPosDistPct || ' NegLastDist ' || $PrtNegLastDist ||
                      ' NegDist% ' || $PrtNegDistPct
      let $PrtLine4 = '     Benefit Rcd LastDist ' || $PrBLastDist || ' Dist% ' || $PrBDistPct || ' PosLastDist ' ||
                      $PrBPosLastDist || ' PosDist% ' || $PrBPosDistPct || ' NegLastDist ' || $PrBNegLastDist ||
                      ' NegDist% ' || $PrBNegDistPct
      let $PrtLine5 = '     Earnings ' || $PrtEarnsAmt || ' Refund ' || $PrtRefundAmt || ' Deducted ' ||
                      $PrtDeductAmt || ' Accrual Earn ' || $PrtAccrErnAmt || ' Accrual Refund ' ||
                      $PrtAccrRfudAmt || ' Accrual Deducted ' || $PrtAccrDednAmt

      display $PrtLine1
      display $PrtLine2
      display $PrtLine3
      display $PrtLine4
      display $PrtLine5

      let #ErnDistIdx = #ErnDistIdx + 1
  end-while

  display '<<<<<<<<<<<<<<<< Expense Dist Array >>>>>>>>>>>>>>>>'

  let #ExpDistIdx         = 0

  while #ExpDistIdx < #MaxExpDist

      get #PrtAddlNbr $PrtEmplID #PrtEmplRcd #PrtBenefitRcd $PrtErnCd $PrtBusUnit
          $PrtDeptID $PrtPosnNbr $PrtJobCd $PrtStrMapLvl
          $PrtLastDist #PrtDistPct $PrtPosLastDist #PrtPosDistPct $PrtNegLastDist #PrtNegDistPct
          $PrBLastDist #PrBDistPct $PrBPosLastDist #PrBPosDistPct $PrBNegLastDist #PrBNegDistPct
          #PrtEarnsAmt
      from ExpDistArray (#ExpDistIdx)
          AddlNbr EmplID  EmplRcd BenefitRcd ErnCd Business_Unit
          DeptID Position_Nbr JobCode StartMapLevel
          LastDist DistPct PosLastDist PosDistPct NegLastDist NegDistPct
          BenLastDist BenDistPct PosBenLastDist PosBenDistPct NegBenLastDist NegBenDistPct Earns_Amt

      let $PrtAddlNbr    = edit(#PrtAddlNbr,'999')
      let $PrtEmplRcd    = edit(#PrtEmplRcd,'999')
      let $PrtBenefitRcd = edit(#PrtBenefitRcd,'999')
      let $PrtDistPct    = edit(#PrtDistPct,'999.999999')
      let $PrtPosDistPct = edit(#PrtPosDistPct,'999.999999')
      let $PrtNegDistPct = edit(#PrtNegDistPct,'999.999999')
      let $PrBDistPct    = edit(#PrBDistPct,'999.999999')
      let $PrBPosDistPct = edit(#PrBPosDistPct,'999.999999')
      let $PrBNegDistPct = edit(#PrBNegDistPct,'999.999999')
      let $PrtEarnsAmt   = edit(#PrtEarnsAmt,'999999999.99')

      let $PrtLine1 = ' --> Addl# ' || $PrtAddlNbr || ' EmplID ' || $PrtEmplID || ' EmplRcd# ' || $PrtEmplRcd ||
                      ' BenefitRcd# ' || $PrtBenefitRcd || ' ErnCd ' || $PrtErnCd
      let $PrtLine2 = '     BusUnit ' || $PrtBusUnit || ' DeptID ' || $PrtDeptID || ' Posn# ' || $PrtPosnNbr ||
                      ' JobCd ' || $PrtJobCd || ' MappingLevel ' || $PrtStrMapLvl
      let $PrtLine3 = '                 LastDist ' || $PrtLastDist || ' Dist% ' || $PrtDistPct || ' PosLastDist ' ||
                      $PrtPosLastDist || ' PosDist% ' || $PrtPosDistPct || ' NegLastDist ' || $PrtNegLastDist ||
                      ' NegDist% ' || $PrtNegDistPct
      let $PrtLine4 = '     Benefit Rcd LastDist ' || $PrBLastDist || ' Dist% ' || $PrBDistPct || ' PosLastDist ' ||
                      $PrBPosLastDist || ' PosDist% ' || $PrBPosDistPct || ' NegLastDist ' || $PrBNegLastDist ||
                      ' NegDist% ' || $PrBNegDistPct
      let $PrtLine5 = '     Earnings ' || $PrtEarnsAmt

      display $PrtLine1
      display $PrtLine2
      display $PrtLine3
      display $PrtLine4
      display $PrtLine5

      let #ExpDistIdx = #ExpDistIdx + 1
  end-while
end-procedure

!****************************************
begin-procedure Find-Benefit-Rcd-Earnings
!****************************************

  let #BenIdx   = 0
  let $BenFound = 'N'
  while #BenIdx < #MaxBenEarn and $BenFound = 'N'

      get #BenEarnRcd #TtlBenEarn #TtlPosBenEarn #TtlNegBenEarn
      from BenEarnArray (#BenIdx) BenefitRcd TotalEarn TotalPosEarn TotalNegEarn

      if #BenEarnRcd = #BenefitRcd
          let $BenFound = 'Y'
      else
          let #BenIdx = #BenIdx + 1
      end-if
  end-while
end-procedure

!**************************
begin-procedure Process-Ded
!**************************

  let #DedSeqNo = 0
  let $ProcType = 'D'

begin-select on-error=SQL-error
PD.BENEFIT_RCD_NBR
PD.PLAN_TYPE
PD.BENEFIT_PLAN
PD.DEDCD
PD.DED_CLASS
PD.DED_SLSTX_CLASS
PD.DED_CUR
PD.AP_STATUS
DEDTBL.SPCL_PROCESS

  let #BenefitRcdNo     = &PD.BENEFIT_RCD_NBR
  let $PlanType         = &PD.PLAN_TYPE
  let $BenefitPlan      = &PD.BENEFIT_PLAN
  let $DedCd            = &PD.DEDCD
  let $DedClass         = &PD.DED_CLASS
  let $DedSlstxClass    = &PD.DED_SLSTX_CLASS
  let #TotalDedCur      = &PD.DED_CUR
  let $AP_Processed     = &PD.AP_STATUS
  let $SpclProcess      = &DEDTBL.SPCL_PROCESS

  let #GarnPriority     = 0
  let $GarnID           = ' '
  let $BondID           = ' '
  let $BondOwnerID      = ' '
  let $BondOthRegType   = ' '
  let $BondOthRegID     = ' '
  let #BondLogSeq       = 0

  let $ResetAcct        = 'Y'
  let $SpclDedFound     = 'N'
  let #SpclDedRemain    = #TotalDedCur

  evaluate $SpclProcess
      when = 'B'
          if $PayGroupCountry = 'USA'
              do Process-Bonds
          end-if
          break
      when = 'G'
          do Process-Garnishment
          break
  end-evaluate

  if $SpclDedFound = 'N'
      let #DedCur  = #TotalDedCur
      let #DistCur = #TotalDedCur
      do Distribute-Ded
  else
      if #SpclDedRemain <> 0
          let #DedCur  = #SpclDedRemain
          let #DistCur = #SpclDedRemain
          do Distribute-Ded
      end-if
  end-if

FROM  PS_PAY_DEDUCTION PD
    , PS_DEDUCTION_TBL DEDTBL
WHERE PD.COMPANY          = $Company
  AND PD.PAYGROUP         = $PayGroup
  AND PD.PAY_END_DT       = $PayEndDt
  AND PD.OFF_CYCLE        = $OffCycle
  AND PD.PAGE_NUM         = #PageNum
  AND PD.LINE_NUM         = #LineNum
  AND PD.SEPCHK           = #SepChk
  AND PD.PLAN_TYPE        = DEDTBL.PLAN_TYPE
  AND PD.DEDCD            = DEDTBL.DEDCD
  AND DEDTBL.EFFDT        = (SELECT MAX(DEDTBL1.EFFDT) FROM PS_DEDUCTION_TBL DEDTBL1
                             WHERE DEDTBL1.PLAN_TYPE = DEDTBL.PLAN_TYPE
                             AND   DEDTBL1.DEDCD     = DEDTBL.DEDCD
                             AND   DEDTBL1.EFFDT    <= PD.PAY_END_DT)
end-select

end-procedure

!****************************
begin-procedure Process-Bonds
!****************************

begin-select on-error=SQL-error
BDLG.BOND_ID
BDLG.BOND_OWNER_ID
BDLG.BOND_OTH_REG_TYPE
BDLG.BOND_OTH_REG_ID
BDLG.BOND_LOG_SEQ
BDLG.BOND_COLLECT_AMT
BDLG.AP_STATUS

  let $BondID           = &BDLG.BOND_ID
  let $BondOwnerID      = &BDLG.BOND_OWNER_ID
  let $BondOthRegType   = &BDLG.BOND_OTH_REG_TYPE
  let $BondOthRegID     = &BDLG.BOND_OTH_REG_ID
  let #BondLogSeq       = &BDLG.BOND_LOG_SEQ
  let #DedCur           = &BDLG.BOND_COLLECT_AMT
  let #DistCur          = &BDLG.BOND_COLLECT_AMT
  let $BondAP_Processed = &BDLG.AP_STATUS

  let $SpclDedFound     = 'Y'
  let #SpclDedRemain    = #SpclDedRemain - #DistCur

  do Distribute-Ded

FROM  PS_BOND_LOG BDLG
WHERE BDLG.EMPLID         = $EmplID
  AND BDLG.COMPANY        = $Company
  AND BDLG.PAYGROUP       = $PayGroup
  AND BDLG.PAY_END_DT     = $PayEndDt
  AND BDLG.OFF_CYCLE      = $OffCycle
  AND BDLG.FORM_ID        = $FormID
  AND BDLG.PAYCHECK_NBR   = #PayCheckNbr
end-select

end-procedure

!**********************************
begin-procedure Process-Garnishment
!**********************************

begin-select on-error=SQL-error
GARN.GARN_PRIORITY
GARN.GARNID
GARN.DEDUCT_AMT
GARN.AP_STATUS

  let #GarnPriority     = &GARN.GARN_PRIORITY
  let $GarnID           = &GARN.GARNID
  let #DedCur           = &GARN.DEDUCT_AMT
  let #DistCur          = &GARN.DEDUCT_AMT
  let $AP_Processed     = &GARN.AP_STATUS

  let $SpclDedFound     = 'Y'
  let #SpclDedRemain    = #SpclDedRemain - #DistCur

  do Distribute-Ded

FROM  PS_PAY_GARNISH GARN
WHERE GARN.COMPANY        = $Company
  AND GARN.PAYGROUP       = $PayGroup
  AND GARN.PAY_END_DT     = $PayEndDt
  AND GARN.OFF_CYCLE      = $OffCycle
  AND GARN.PAGE_NUM       = #PageNum
  AND GARN.LINE_NUM       = #LineNum
  AND GARN.SEPCHK         = #SepChk
  AND GARN.PLAN_TYPE      = $PlanType
  AND GARN.BENEFIT_PLAN   = $BenefitPlan
  AND GARN.DEDCD          = $DedCd
  AND GARN.DED_CLASS      = $DedClass
end-select

end-procedure

!*****************************
begin-procedure Distribute-Ded
!*****************************

  let $LiabAcctDetail = '(Plan Type ' || $PlanType || ', Deduction Code ' || $DedCd ||
                        ', Deduction Class ' || $DedClass || ') '

  if $ResetAcct = 'Y'
      do Find-Ded-Liability-Account
  else
      let $Account = $SaveDedLiability
  end-if

  if $DedClass > 'K'
      let $ER_Offset_Acct = $Account
      if $PlanType = '00' or $SingleBenRcd = 'Y'
           do Distribute-ER-Amt
      else
           do Distribute-ER-Amt-by-BenRcd
      end-if
  else
      let $EE_Offset_Acct = $Account
      if #DedCur >= 0
          if $PlanType = '00' or $SingleBenRcd = 'Y'
              do Distribute-EE-Pos-Amt
          else
              do Distribute-EE-Pos-Amt-by-BenRcd
          end-if
      else
          do Distribute-EE-Neg-Amt
      end-if
  end-if

end-procedure

!**************************
begin-procedure Process-Tax
!**************************

  let #TaxSeqNo = 0
  let $ProcType = 'T'

begin-select on-error=SQL-error
TX.STATE
TX.LOCALITY
TX.TAX_CLASS
TX.TAX_CUR
TX.AP_STATUS

  let $State            = &TX.STATE
  let $Locality         = &TX.LOCALITY
  let $TaxClass         = &TX.TAX_CLASS
  let #TaxCur           = &TX.TAX_CUR
  let #DistCur          = &TX.TAX_CUR
  let $AP_Processed     = &TX.AP_STATUS

  do Distribute-Tax

FROM  PS_PAY_TAX   TX
WHERE TX.COMPANY          = $Company
  AND TX.PAYGROUP         = $PayGroup
  AND TX.PAY_END_DT       = $PayEndDt
  AND TX.OFF_CYCLE        = $OffCycle
  AND TX.PAGE_NUM         = #PageNum
  AND TX.LINE_NUM         = #LineNum
  AND TX.SEPCHK           = #SepChk
  AND TX.STATE           <> ' '
  AND TX.STATE           not in ('$UAS','$UGU','$UPR','$UVI')
end-select

end-procedure

!*****************************
begin-procedure Distribute-Tax
!*****************************

  let $LiabAcctDetail = '(State ' || $State || ', Locality ' || $Locality ||
                        ', Tax Class ' || $TaxClass || ') '

  do Find-Tax-Liability-Account

  evaluate $TaxClass

      when = 'B'
      when = 'R'
          let $ProcTaxClass = 'LWR'
          do Distribute-ER-Amt
          break

      when = 'E'
          if rtrim($State,' ') = $FedState
              let $ProcTaxClass = 'FOR'
          else
              let $ProcTaxClass = 'SDR'
          end-if
          do Distribute-ER-Amt
          break

      when = 'J'
          let $ProcTaxClass = 'FOR'
          do Distribute-ER-Amt
          break

      when = 'Q'
      when = 'Z'
          let $ProcTaxClass = 'FMR'
          do Distribute-ER-Amt
          break

      when = 'S'
          let $ProcTaxClass = 'SUT'
          do Distribute-ER-Amt
          break

      when = 'U'
          if rtrim($State,' ') = $FedState
              let $ProcTaxClass = 'FUT'
          else
              let $ProcTaxClass = 'SUT'
          end-if
          do Distribute-ER-Amt
          break

      when = 'X'
          let $ProcTaxClass = 'VDR'
          do Distribute-ER-Amt

  end-evaluate

  evaluate $TaxClass
      when = 'A'
      when = 'B'
      when = 'C'
      when = 'D'
      when = 'F'
      when = 'G'
      when = 'H'
      when = 'K'
      when = 'L'
      when = 'M'
      when = 'N'
      when = 'P'
      when = 'T'
      when = 'V'
      when = 'W'

          if #TaxCur >= 0
              do Distribute-EE-Pos-Amt
          else
              do Distribute-EE-Neg-Amt
          end-if
  end-evaluate

end-procedure

!**************************
begin-procedure Process-Ctx
!**************************

  let #CtxSeqNo = 0
  let $ProcType = 'X'

begin-select on-error=SQL-error
CTX.PROVINCE
CTX.TAX_CLASS_CAN
CTX.WAGE_LOSS_PLAN
CTX.TAX_CUR
CTX.AP_STATUS

  let $Province         = &CTX.PROVINCE
  let $TaxClassCan      = &CTX.TAX_CLASS_CAN
  let $WageLossPlan     = &CTX.WAGE_LOSS_PLAN
  let #TaxCur           = &CTX.TAX_CUR
  let #DistCur          = &CTX.TAX_CUR
  let $AP_Processed     = &CTX.AP_STATUS

  do Distribute-Ctx

FROM  PS_PAY_TAX_CAN  CTX
WHERE CTX.COMPANY          = $Company
  AND CTX.PAYGROUP         = $PayGroup
  AND CTX.PAY_END_DT       = $PayEndDt
  AND CTX.OFF_CYCLE        = $OffCycle
  AND CTX.PAGE_NUM         = #PageNum
  AND CTX.LINE_NUM         = #LineNum
  AND CTX.SEPCHK           = #SepChk
end-select

end-procedure

!*****************************
begin-procedure Distribute-Ctx
!*****************************

  let $LiabAcctDetail = '(Wage Loss Plan ' || $WageLossPlan || ', Tax Class ' || $TaxClassCan || ') '

  do Find-Ctx-Liability-Account

  evaluate $TaxClassCan
      when = 'CPR'
      when = 'QPR'
      when = 'EIR'
      when = 'HTX'
      when = 'QIR'
          let $ProcTaxClassCan = $TaxClassCan
          do Distribute-ER-Amt
  end-evaluate

  evaluate $TaxClassCan
      when = 'CPP'
      when = 'QPP'
          if $PublicSector = 'N'
              let $ProcTaxClassCan = substr($TaxClassCan,1,2) || 'R'
              do Distribute-ER-Amt
          end-if
  end-evaluate

  evaluate $TaxClassCan
      when = 'CIT'
      when = 'QIT'
      when = 'T4A'
      when = 'RV2'
      when = 'PYT'
      when = 'CPP'
      when = 'QPP'
      when = 'EIE'
      when = 'QIE'
          let $ProcTaxClassCan = $TaxClassCan
          if #TaxCur >= 0
              do Distribute-EE-Pos-Amt
          else
              do Distribute-EE-Neg-Amt
          end-if
  end-evaluate

end-procedure

!*****************************
begin-procedure Process-NetPay
!*****************************

  let #CheckAmount   = 0
  let #DepositAmount = 0
  let #NetSeqNo      = 0

  evaluate $PayCheckOption
      when = 'C'
      when = 'M'
          let #CheckAmount = #NetPay
          break
      when = 'A'
      when = '&'
          do Get-Pay-Distribution
          break
  end-evaluate

  do Distribute-NetPay

end-procedure

!***********************************
begin-procedure Get-Pay-Distribution
!***********************************

  let $DepFound = 'N'

begin-select on-error=SQL-error
DD.ACCOUNT_TYPE
DD.DEPOSIT_AMOUNT
DD.PAYCHECK_NBR

  let $DepFound = 'Y'
  if &DD.PAYCHECK_NBR = #PayCheckNbr

      if &DD.Account_Type <> '$'
          add  &DD.Deposit_Amount to #DepositAmount
      else
          move &DD.Deposit_Amount to #CheckAmount
      end-if
  else
      if &DD.Account_Type <> '$'
          add  &DD.Deposit_Amount to #DepositAmount
      end-if
  end-if

FROM  PS_PAY_DISTRIBUTN DD
WHERE DD.COMPANY         = $Company
  AND DD.PAYGROUP        = $PayGroup
  AND DD.PAY_END_DT      = $PayEndDt
  AND DD.OFF_CYCLE       = $OffCycle
  AND DD.PAGE_NUM        = #PageNum
  AND DD.LINE_NUM        = #LineNum
  AND DD.SEPCHK          = #SepChk
end-select

  if $DepFound = 'N'
      let #DepositAmount = #NetPay
  end-if
end-procedure

!********************************
begin-procedure Distribute-NetPay
!********************************

  let #Save_CheckAmount   = #CheckAmount
  let #Save_DepositAmount = #DepositAmount

  if $ReverseAccrual = 'N' and #AccrualPct > 0
      do Sumup-Accrual-NetPay
  else
      let #AccrNetPay  = 0
  end-if

  let #ErnDistIdx         = 0
  while #ErnDistIdx < #MaxErnDist

      get #EDst_AddlNbr $EDst_ErnCd $AcctCd #EarnsAmt #RefundAmt #DeductAmt
          #AccrEarnAmt #AccrRefund #AccrDedAmt
      from EarnDistArray (#ErnDistIdx)
          AddlNbr ErnCd AccountCode Earns_Amt Refund_Amt Deduct_Amt
          AccrEarn_Amt AccrRefund AccrDedn_Amt

      let #DistNetPay  = #EarnsAmt + #RefundAmt - #DeductAmt
      let #DistAccrAmt = #AccrEarnAmt + #AccrRefund - #AccrDedAmt

      if #DistNetPay < 0
          let #DistNetAmount = #DistNetPay
          let #CheckAmount   = #CheckAmount - #DistNetAmount
          let #AccrNetPay    = #AccrNetPay  - #DistAccrAmt
          do Write-NA-Net-Dist-Rec ('N', $GL_NetPay)
          let #DistNetPay    = 0
          let #DistAccrAmt   = 0
          put 'Y' into EarnDistArray (#ErnDistIdx) AccrSend
      end-if

      let #ErnDistIdx = #ErnDistIdx + 1
  end-while

  let #ErnDistIdx         = 0
  while #ErnDistIdx < #MaxErnDist

      get #EDst_AddlNbr $EDst_ErnCd $AcctCd #EarnsAmt #RefundAmt #DeductAmt
          #AccrEarnAmt #AccrRefund #AccrDedAmt
      from EarnDistArray (#ErnDistIdx)
          AddlNbr ErnCd AccountCode Earns_Amt Refund_Amt Deduct_Amt
          AccrEarn_Amt AccrRefund AccrDedn_Amt

      let #DistNetPay  = #EarnsAmt + #RefundAmt - #DeductAmt
      let #DistAccrAmt = #AccrEarnAmt + #AccrRefund - #AccrDedAmt

      if #DistNetPay > 0

          if #CheckAmount > 0
              if #DistNetPay <= #CheckAmount
                  let #DistNetAmount = #DistNetPay
                  let #CheckAmount   = #CheckAmount - #DistNetAmount
                  let #AccrNetPay    = #AccrNetPay  - #DistAccrAmt
                  do Write-NA-Net-Dist-Rec ('N', $GL_NetPay)
                  let #DistNetPay    = 0
                  let #DistAccrAmt   = 0
                  put 'Y' into EarnDistArray (#ErnDistIdx) AccrSend
              else
                  let #DistNetAmount = #CheckAmount

                  if $ReverseAccrual = 'N' and #AccrualPct > 0
                      let #OrigDistAccrAmt = #DistAccrAmt
                      let #DistAccrAmt     = round((#DistNetAmount *  #AccrualPct) / 100, 2)
                  end-if

                  do Write-NA-Net-Dist-Rec ('N', $GL_NetPay)
                  let #DistNetPay    = #DistNetPay - #CheckAmount
                  let #AccrNetPay    = #AccrNetPay - #DistAccrAmt
                  let #DistAccrAmt   = #OrigDistAccrAmt - #DistAccrAmt
                  let #CheckAmount   = 0
              end-if
          end-if

          if #DepositAmount > 0
              if #DistNetPay <= #DepositAmount
                  let #DistNetAmount = #DistNetPay
                  let #DepositAmount = #DepositAmount - #DistNetAmount
                  let #AccrNetPay    = #AccrNetPay  - #DistAccrAmt
                  do Write-NA-Net-Dist-Rec ('Y', $GL_Dir_Deposits)
                  let #DistNetPay    = 0
                  let #DistAccrAmt   = 0
              else
                  let #DistNetAmount = #DepositAmount
                  let #AccrNetPay    = #AccrNetPay  - #DistAccrAmt
                  do Write-NA-Net-Dist-Rec ('Y', $GL_Dir_Deposits)
                  let #DistNetPay    = #DistNetPay - #DepositAmount
                  let #DepositAmount = 0
                  let #DistAccrAmt   = 0
              end-if
              put 'Y' into EarnDistArray (#ErnDistIdx) AccrSend
          end-if
      end-if

      let #ErnDistIdx = #ErnDistIdx + 1
  end-while

  if $ReverseAccrual = 'N' and #AccrualPct > 0

      let #ErnDistIdx         = 0
      while #ErnDistIdx < #MaxErnDist

          get #EDst_AddlNbr $EDst_ErnCd $AcctCd #AccrEarnAmt #AccrRefund #AccrDedAmt $AccrSend
          from EarnDistArray (#ErnDistIdx)
              AddlNbr ErnCd AccountCode AccrEarn_Amt AccrRefund AccrDedn_Amt AccrSend

          let #DistAccrAmt = #AccrEarnAmt + #AccrRefund - #AccrDedAmt

          if $AccrSend = 'N' and #DistAccrAmt <> 0
              let #DistNetAmount = 0
              let #AccrNetPay  = #AccrNetPay - #DistAccrAmt
              do Write-NA-Net-Dist-Rec ('N', $GL_NetPay)
              let #DistAccrAmt   = 0
          end-if

          let #ErnDistIdx = #ErnDistIdx + 1
      end-while
  end-if

  if #CheckAmount <> 0 or #DepositAmount <> 0
      let #OutofBalanceAmt = #CheckAmount + #DepositAmount
      let $PrtOutofBalanceAmt = edit(#OutofBalanceAmt,'$$$$$$$$$9.99')

      let $ErrReason    = '  **Error** Net Pay out of balance ' || $PrtOutofBalanceAmt || ' '
      do Format-Display-ErrMsg
  end-if

  if #AccrNetPay <> 0
      let $PrtOutofBalanceAmt = edit(#AccrNetPay,'$$$$$$$$$9.99')

      if abs(#AccrNetPay) < 0.05
          let $ErrReason    = '  **Warning** Accrual Net Pay out of balance ' || $PrtOutofBalanceAmt || ' '
          do Format-Display-WarnMsg
      else
          let $ErrReason    = '  **Error** Accrual Net Pay out of balance ' || $PrtOutofBalanceAmt || ' '
          do Format-Display-ErrMsg
      end-if
  end-if

end-procedure

!***********************************
begin-procedure Sumup-Accrual-NetPay
!***********************************

  let #AccrNetPay         = 0
  let #ErnDistIdx         = 0
  while #ErnDistIdx < #MaxErnDist

      get #AccrEarnAmt #AccrRefund #AccrDedAmt
      from EarnDistArray (#ErnDistIdx)
          AccrEarn_Amt AccrRefund AccrDedn_Amt

      let #DistAccrAmt = #AccrEarnAmt + #AccrRefund - #AccrDedAmt
      let #AccrNetPay  = #AccrNetPay  + #DistAccrAmt

      let #ErnDistIdx = #ErnDistIdx + 1
  end-while

end-procedure

!************************************
begin-procedure Process-Earnings-Dist
!************************************

  let $PrevBusUnit       = ' '
  let $DrCr              = 'D'

begin-select on-error=SQL-error
PAYCHK1.OFF_CYCLE
PAYCHK1.PAGE_NUM
PAYCHK1.LINE_NUM
PAYCHK1.SEPCHK
PAYCHK1.PAYCHECK_NBR
PAYERN1.BUSINESS_UNIT
ERNDIST.ACCT_CD
ERNDIST.ERNCD
#ifdef DB2ALL
DECIMAL(SUM(ERNDIST.EARNINGS),15,2)         &ERNDIST.EARNINGS
DECIMAL(SUM(ERNDIST.PY_ACCRUAL_AMT),15,2)   &ERNDIST.PY_ACCRUAL_AMT
#else
SUM(ERNDIST.EARNINGS)                       &ERNDIST.EARNINGS
SUM(ERNDIST.PY_ACCRUAL_AMT)                 &ERNDIST.PY_ACCRUAL_AMT
#endif

  let #PayCheck_Nbr     =  &PAYCHK1.PAYCHECK_NBR
  let $Business_Unit_hr =  &PAYERN1.BUSINESS_UNIT
  let $AcctCd           =  &ERNDIST.ACCT_CD
  let $ErnCd            =  &ERNDIST.ERNCD
  let #Monetary_Amount  =  &ERNDIST.EARNINGS

  if $Business_Unit_hr <> $PrevBusUnit
      do Get-GL-BU-Details ($Business_Unit_hr, $Business_Unit_AP, $Business_Unit_GL, $Journal_Template)
      do Get-GL-Currency ($business_unit_gl, $currency_cd_gl)
      do Get-Setid ($business_unit_hr,'PY_03',$Setid_HR)
      let $PrevBusUnit = $Business_Unit_hr
  end-if

  if $ErnCd = $PGrp_ErnCd_Reg_Hrs
      let $payroll_line_descr = $ErnCd || ' - Reg Earns'
  else
      do Get-Earnings-Name
      let $payroll_line_descr = $EarningsAbbrv||'- Oth ERN'
  end-if

  do Get-Acct-Cd-Data
  do Write-GL-Transaction

  let #Monetary_Amount  =  &ERNDIST.PY_ACCRUAL_AMT
  if #Monetary_Amount <> 0
      let $payroll_line_descr = $payroll_line_descr || ' Accrual'
      do Write-GL-Transaction
      do Insert-Accrual
      let #PayGroup_Accrual_Debit  = #PayGroup_Accrual_Debit  +  #Monetary_Amount
  end-if

from PS_PAY_CHECK        PAYCHK1,
     PS_PAY_EARNINGS     PAYERN1,
     PS_PAY_NA_ERN_DIST  ERNDIST

WHERE PAYCHK1.COMPANY    = $Company
AND   PAYCHK1.PAYGROUP   = $PayGroup
AND   PAYCHK1.PAY_END_DT = $PayEndDt
AND   PAYCHK1.COMPANY    = PAYERN1.COMPANY
AND   PAYCHK1.PAYGROUP   = PAYERN1.PAYGROUP
AND   PAYCHK1.PAY_END_DT = PAYERN1.PAY_END_DT
AND   PAYCHK1.OFF_CYCLE  = PAYERN1.OFF_CYCLE
AND   PAYCHK1.PAGE_NUM   = PAYERN1.PAGE_NUM
AND   PAYCHK1.LINE_NUM   = PAYERN1.LINE_NUM
AND   PAYCHK1.SEPCHK     = PAYERN1.SEPCHK
AND   PAYERN1.COMPANY    = ERNDIST.COMPANY
AND   PAYERN1.PAYGROUP   = ERNDIST.PAYGROUP
AND   PAYERN1.PAY_END_DT = ERNDIST.PAY_END_DT
AND   PAYERN1.OFF_CYCLE  = ERNDIST.OFF_CYCLE
AND   PAYERN1.PAGE_NUM   = ERNDIST.PAGE_NUM
AND   PAYERN1.LINE_NUM   = ERNDIST.LINE_NUM
AND   PAYERN1.ADDL_NBR   = ERNDIST.ADDL_NBR
AND   PAYERN1.SEPCHK     = ERNDIST.SEPCHK

GROUP BY  PAYCHK1.OFF_CYCLE, PAYCHK1.PAGE_NUM, PAYCHK1.LINE_NUM, PAYCHK1.SEPCHK,
          PAYCHK1.PAYCHECK_NBR, PAYERN1.BUSINESS_UNIT,
          ERNDIST.ACCT_CD, ERNDIST.ERNCD
end-select

end-procedure

!*************************************
begin-procedure Process-Deduction-Dist
!*************************************

  let $PrevBusUnit      = ' '

begin-select on-error=SQL-error
PAYCHK2.OFF_CYCLE
PAYCHK2.PAGE_NUM
PAYCHK2.LINE_NUM
PAYCHK2.SEPCHK
PAYCHK2.PAYCHECK_NBR
PAYCHK2.BUSINESS_UNIT
PAYERN2.BUSINESS_UNIT
DEDDIST.PLAN_TYPE
DEDDIST.DEDCD
DEDDIST.ACCT_CD
DEDDIST.PY_LIABEXPFLG
DEDDIST.ACCOUNT
#ifdef DB2ALL
DECIMAL(SUM(DEDDIST.DED_CUR),15,2)          &DEDDIST.DED_CUR
DECIMAL(SUM(DEDDIST.PY_ACCRUAL_AMT),15,2)   &DEDDIST.PY_ACCRUAL_AMT
#else
SUM(DEDDIST.DED_CUR)                        &DEDDIST.DED_CUR
SUM(DEDDIST.PY_ACCRUAL_AMT)                 &DEDDIST.PY_ACCRUAL_AMT
#endif

  let #PayCheck_Nbr     =  &PAYCHK2.PAYCHECK_NBR
  let $Business_Unit_hr =  &PAYERN2.BUSINESS_UNIT
  let $AcctCd           =  &DEDDIST.ACCT_CD
  let #Monetary_Amount  =  &DEDDIST.DED_CUR
  let $Liab_Exp_Flag    =  &DEDDIST.PY_LIABEXPFLG
  let $PlanType         =  &DEDDIST.PLAN_TYPE
  let $DedCd            =  &DEDDIST.DEDCD
  let $DedDist_account  =  &DEDDIST.ACCOUNT

  if $DistExpense = 'N' and ($Liab_Exp_Flag = 'E' or $Liab_Exp_Flag = 'R')
      let $Business_Unit_hr =  &PAYCHK2.BUSINESS_UNIT
  end-if

  do Prepare-Deducton-AcctLine

  let #Monetary_Amount  =  &DEDDIST.PY_ACCRUAL_AMT
  do Prepare-Accrual-AcctLine

from PS_PAY_CHECK        PAYCHK2,
     PS_PAY_EARNINGS     PAYERN2,
     PS_PAY_NA_DED_DIST  DEDDIST

WHERE PAYCHK2.COMPANY    = $Company
AND   PAYCHK2.PAYGROUP   = $PayGroup
AND   PAYCHK2.PAY_END_DT = $PayEndDt
AND   PAYCHK2.COMPANY    = PAYERN2.COMPANY
AND   PAYCHK2.PAYGROUP   = PAYERN2.PAYGROUP
AND   PAYCHK2.PAY_END_DT = PAYERN2.PAY_END_DT
AND   PAYCHK2.OFF_CYCLE  = PAYERN2.OFF_CYCLE
AND   PAYCHK2.PAGE_NUM   = PAYERN2.PAGE_NUM
AND   PAYCHK2.LINE_NUM   = PAYERN2.LINE_NUM
AND   PAYCHK2.SEPCHK     = PAYERN2.SEPCHK
AND   PAYERN2.COMPANY    = DEDDIST.COMPANY
AND   PAYERN2.PAYGROUP   = DEDDIST.PAYGROUP
AND   PAYERN2.PAY_END_DT = DEDDIST.PAY_END_DT
AND   PAYERN2.OFF_CYCLE  = DEDDIST.OFF_CYCLE
AND   PAYERN2.PAGE_NUM   = DEDDIST.PAGE_NUM
AND   PAYERN2.LINE_NUM   = DEDDIST.LINE_NUM
AND   PAYERN2.ADDL_NBR   = DEDDIST.ADDL_NBR
AND   PAYERN2.SEPCHK     = DEDDIST.SEPCHK

GROUP BY  PAYCHK2.OFF_CYCLE, PAYCHK2.PAGE_NUM, PAYCHK2.LINE_NUM, PAYCHK2.SEPCHK,
          PAYCHK2.PAYCHECK_NBR, PAYCHK2.BUSINESS_UNIT, PAYERN2.BUSINESS_UNIT,
          DEDDIST.PLAN_TYPE, DEDDIST.DEDCD, DEDDIST.ACCT_CD, DEDDIST.PY_LIABEXPFLG, DEDDIST.ACCOUNT
end-select

  let $PrevBusUnit      = ' '

begin-select on-error=SQL-error
PAYCHK2x.OFF_CYCLE
PAYCHK2x.PAGE_NUM
PAYCHK2x.LINE_NUM
PAYCHK2x.SEPCHK
PAYCHK2x.PAYCHECK_NBR
PAYCHK2x.BUSINESS_UNIT
DEDDISTx.PLAN_TYPE
DEDDISTx.DEDCD
DEDDISTx.ACCT_CD
DEDDISTx.PY_LIABEXPFLG
DEDDISTx.ACCOUNT
#ifdef DB2ALL
DECIMAL(SUM(DEDDISTx.DED_CUR),15,2)          &DEDDISTx.DED_CUR
DECIMAL(SUM(DEDDISTx.PY_ACCRUAL_AMT),15,2)   &DEDDISTx.PY_ACCRUAL_AMT
#else
SUM(DEDDISTx.DED_CUR)                        &DEDDISTx.DED_CUR
SUM(DEDDISTx.PY_ACCRUAL_AMT)                 &DEDDISTx.PY_ACCRUAL_AMT
#endif

  let #PayCheck_Nbr     =  &PAYCHK2x.PAYCHECK_NBR
  let $Business_Unit_hr =  &PAYCHK2x.BUSINESS_UNIT
  let $AcctCd           =  &DEDDISTx.ACCT_CD
  let #Monetary_Amount  =  &DEDDISTx.DED_CUR
  let $Liab_Exp_Flag    =  &DEDDISTx.PY_LIABEXPFLG
  let $PlanType         =  &DEDDISTx.PLAN_TYPE
  let $DedCd            =  &DEDDISTx.DEDCD
  let $DedDist_account  =  &DEDDISTx.ACCOUNT

  do Prepare-Deducton-AcctLine

  let #Monetary_Amount  =  &DEDDISTx.PY_ACCRUAL_AMT
  do Prepare-Accrual-AcctLine

from PS_PAY_CHECK        PAYCHK2x,
     PS_PAY_NA_DED_DIST  DEDDISTx

WHERE PAYCHK2x.COMPANY    = $Company
AND   PAYCHK2x.PAYGROUP   = $PayGroup
AND   PAYCHK2x.PAY_END_DT = $PayEndDt
AND   PAYCHK2x.COMPANY    = DEDDISTx.COMPANY
AND   PAYCHK2x.PAYGROUP   = DEDDISTx.PAYGROUP
AND   PAYCHK2x.PAY_END_DT = DEDDISTx.PAY_END_DT
AND   PAYCHK2x.OFF_CYCLE  = DEDDISTx.OFF_CYCLE
AND   PAYCHK2x.PAGE_NUM   = DEDDISTx.PAGE_NUM
AND   PAYCHK2x.LINE_NUM   = DEDDISTx.LINE_NUM
AND   PAYCHK2x.SEPCHK     = DEDDISTx.SEPCHK
AND   DEDDISTx.ADDL_NBR   = 0
AND   NOT EXISTS (SELECT 'X' FROM PS_PAY_EARNINGS PAYERN2x
                  WHERE PAYCHK2x.COMPANY    = PAYERN2x.COMPANY
                  AND   PAYCHK2x.PAYGROUP   = PAYERN2x.PAYGROUP
                  AND   PAYCHK2x.PAY_END_DT = PAYERN2x.PAY_END_DT
                  AND   PAYCHK2x.OFF_CYCLE  = PAYERN2x.OFF_CYCLE
                  AND   PAYCHK2x.PAGE_NUM   = PAYERN2x.PAGE_NUM
                  AND   PAYCHK2x.LINE_NUM   = PAYERN2x.LINE_NUM
                  AND   PAYCHK2x.SEPCHK     = PAYERN2x.SEPCHK
                  AND   PAYERN2x.ADDL_NBR   = 0)
GROUP BY  PAYCHK2x.OFF_CYCLE, PAYCHK2x.PAGE_NUM, PAYCHK2x.LINE_NUM, PAYCHK2x.SEPCHK,
          PAYCHK2x.PAYCHECK_NBR, PAYCHK2x.BUSINESS_UNIT,
          DEDDISTx.PLAN_TYPE, DEDDISTx.DEDCD, DEDDISTx.ACCT_CD, DEDDISTx.PY_LIABEXPFLG, DEDDISTx.ACCOUNT
end-select

end-procedure

!****************************************
begin-procedure Prepare-Deducton-AcctLine
!****************************************

  if $Business_Unit_hr <> $PrevBusUnit
      do Get-GL-BU-Details ($Business_Unit_hr, $Business_Unit_AP, $Business_Unit_GL, $Journal_Template)
      do Get-GL-Currency ($business_unit_gl, $currency_cd_gl)
      do Get-Setid ($business_unit_hr,'PY_03',$Setid_HR)
      let $PrevBusUnit = $Business_Unit_hr
  end-if

  do Get-Deduction-Name
  let $payroll_line_descr = $DeductionAbbrv||'-DED'

  do Get-Acct-Cd-Data

  if $Liab_Exp_Flag = 'L' or $Liab_Exp_Flag = 'R'
      let $GL_Account   = $DedDist_account
      let $DrCr         = 'C'
  else
      let $DrCr         = 'D'
  end-if

  do Write-GL-Transaction

end-procedure

!***************************************
begin-procedure Prepare-Accrual-AcctLine
!***************************************

  if #Monetary_Amount <> 0
      let $payroll_line_descr = $payroll_line_descr || ' Accrual'
      do Write-GL-Transaction
      do Insert-Accrual
      if $DrCr = 'C'
          let #PayGroup_Accrual_Credit = #PayGroup_Accrual_Credit +  #Monetary_Amount
      else
          let #PayGroup_Accrual_Debit  = #PayGroup_Accrual_Debit  +  #Monetary_Amount
      end-if
  end-if

end-procedure

!*******************************
begin-procedure Process-Tax-Dist
!*******************************

  let $PrevBusUnit      = ' '

begin-select on-error=SQL-error
PAYCHK3.OFF_CYCLE
PAYCHK3.PAGE_NUM
PAYCHK3.LINE_NUM
PAYCHK3.SEPCHK
PAYCHK3.PAYCHECK_NBR
PAYCHK3.BUSINESS_UNIT
PAYERN3.BUSINESS_UNIT
TAXDIST.ACCT_CD
TAXDIST.ACCOUNT
TAXDIST.PY_LIABEXPFLG
TAXDIST.STATE
TAXDIST.LOCALITY
TAXDIST.TAX_CLASS
#ifdef DB2ALL
DECIMAL(SUM(TAXDIST.TAX_CUR),15,2)          &TAXDIST.TAX_CUR
DECIMAL(SUM(TAXDIST.PY_ACCRUAL_AMT),15,2)   &TAXDIST.PY_ACCRUAL_AMT
#else
SUM(TAXDIST.TAX_CUR)                        &TAXDIST.TAX_CUR
SUM(TAXDIST.PY_ACCRUAL_AMT)                 &TAXDIST.PY_ACCRUAL_AMT
#endif

  let #PayCheck_Nbr     =  &PAYCHK3.PAYCHECK_NBR
  let $Business_Unit_hr =  &PAYERN3.BUSINESS_UNIT
  let $AcctCd           =  &TAXDIST.ACCT_CD
  let #Monetary_Amount  =  &TAXDIST.TAX_CUR
  let $Liab_Exp_Flag    =  &TAXDIST.PY_LIABEXPFLG
  let $State            =  rtrim(&TAXDIST.STATE,' ')
  let $Locality         =  rtrim(&TAXDIST.LOCALITY,' ')
  let $Tax_Class        =  rtrim(&TAXDIST.TAX_CLASS,' ')
  let $TaxDist_Account  =  &TAXDIST.ACCOUNT

  if $DistExpense = 'N' and ($Liab_Exp_Flag = 'E' or $Liab_Exp_Flag = 'R')
      let $Business_Unit_hr =  &PAYCHK3.BUSINESS_UNIT
  end-if

  do Prepare-Tax-AcctLine

  let #Monetary_Amount  =  &TAXDIST.PY_ACCRUAL_AMT
  do Prepare-Accrual-AcctLine

from PS_PAY_CHECK        PAYCHK3,
     PS_PAY_EARNINGS     PAYERN3,
     PS_PAY_NA_TAX_DIST  TAXDIST

WHERE PAYCHK3.COMPANY    = $Company
AND   PAYCHK3.PAYGROUP   = $PayGroup
AND   PAYCHK3.PAY_END_DT = $PayEndDt
AND   PAYCHK3.COMPANY    = PAYERN3.COMPANY
AND   PAYCHK3.PAYGROUP   = PAYERN3.PAYGROUP
AND   PAYCHK3.PAY_END_DT = PAYERN3.PAY_END_DT
AND   PAYCHK3.OFF_CYCLE  = PAYERN3.OFF_CYCLE
AND   PAYCHK3.PAGE_NUM   = PAYERN3.PAGE_NUM
AND   PAYCHK3.LINE_NUM   = PAYERN3.LINE_NUM
AND   PAYCHK3.SEPCHK     = PAYERN3.SEPCHK
AND   PAYERN3.COMPANY    = TAXDIST.COMPANY
AND   PAYERN3.PAYGROUP   = TAXDIST.PAYGROUP
AND   PAYERN3.PAY_END_DT = TAXDIST.PAY_END_DT
AND   PAYERN3.OFF_CYCLE  = TAXDIST.OFF_CYCLE
AND   PAYERN3.PAGE_NUM   = TAXDIST.PAGE_NUM
AND   PAYERN3.LINE_NUM   = TAXDIST.LINE_NUM
AND   PAYERN3.ADDL_NBR   = TAXDIST.ADDL_NBR
AND   PAYERN3.SEPCHK     = TAXDIST.SEPCHK
GROUP BY  PAYCHK3.OFF_CYCLE, PAYCHK3.PAGE_NUM, PAYCHK3.LINE_NUM, PAYCHK3.SEPCHK,
          PAYCHK3.PAYCHECK_NBR, PAYCHK3.BUSINESS_UNIT, PAYERN3.BUSINESS_UNIT,
          TAXDIST.STATE, TAXDIST.LOCALITY, TAXDIST.TAX_CLASS, TAXDIST.ACCT_CD, TAXDIST.PY_LIABEXPFLG, TAXDIST.ACCOUNT
end-select

  let $PrevBusUnit      = ' '

begin-select on-error=SQL-error
PAYCHK3x.OFF_CYCLE
PAYCHK3x.PAGE_NUM
PAYCHK3x.LINE_NUM
PAYCHK3x.SEPCHK
PAYCHK3x.PAYCHECK_NBR
PAYCHK3x.BUSINESS_UNIT
TAXDISTx.ACCT_CD
TAXDISTx.ACCOUNT
TAXDISTx.PY_LIABEXPFLG
TAXDISTx.STATE
TAXDISTx.LOCALITY
TAXDISTx.TAX_CLASS
#ifdef DB2ALL
DECIMAL(SUM(TAXDISTx.TAX_CUR),15,2)          &TAXDISTx.TAX_CUR
DECIMAL(SUM(TAXDISTx.PY_ACCRUAL_AMT),15,2)   &TAXDISTx.PY_ACCRUAL_AMT
#else
SUM(TAXDISTx.TAX_CUR)                        &TAXDISTx.TAX_CUR
SUM(TAXDISTx.PY_ACCRUAL_AMT)                 &TAXDISTx.PY_ACCRUAL_AMT
#endif

  let #PayCheck_Nbr     =  &PAYCHK3x.PAYCHECK_NBR
  let $Business_Unit_hr =  &PAYCHK3x.BUSINESS_UNIT
  let $AcctCd           =  &TAXDISTx.ACCT_CD
  let #Monetary_Amount  =  &TAXDISTx.TAX_CUR
  let $Liab_Exp_Flag    =  &TAXDISTx.PY_LIABEXPFLG
  let $State            =  rtrim(&TAXDISTx.STATE,' ')
  let $Locality         =  rtrim(&TAXDISTx.LOCALITY,' ')
  let $Tax_Class        =  rtrim(&TAXDISTx.TAX_CLASS,' ')
  let $TaxDist_Account  =  &TAXDISTx.ACCOUNT

  do Prepare-Tax-AcctLine

  let #Monetary_Amount  =  &TAXDISTx.PY_ACCRUAL_AMT
  do Prepare-Accrual-AcctLine

from PS_PAY_CHECK        PAYCHK3x,
     PS_PAY_NA_TAX_DIST  TAXDISTx

WHERE PAYCHK3x.COMPANY    = $Company
AND   PAYCHK3x.PAYGROUP   = $PayGroup
AND   PAYCHK3x.PAY_END_DT = $PayEndDt
AND   PAYCHK3x.COMPANY    = TAXDISTx.COMPANY
AND   PAYCHK3x.PAYGROUP   = TAXDISTx.PAYGROUP
AND   PAYCHK3x.PAY_END_DT = TAXDISTx.PAY_END_DT
AND   PAYCHK3x.OFF_CYCLE  = TAXDISTx.OFF_CYCLE
AND   PAYCHK3x.PAGE_NUM   = TAXDISTx.PAGE_NUM
AND   PAYCHK3x.LINE_NUM   = TAXDISTx.LINE_NUM
AND   PAYCHK3x.SEPCHK     = TAXDISTx.SEPCHK
AND   TAXDISTx.ADDL_NBR   = 0
AND   NOT EXISTS (SELECT 'X' FROM PS_PAY_EARNINGS PAYERN3x
                  WHERE PAYCHK3x.COMPANY    = PAYERN3x.COMPANY
                  AND   PAYCHK3x.PAYGROUP   = PAYERN3x.PAYGROUP
                  AND   PAYCHK3x.PAY_END_DT = PAYERN3x.PAY_END_DT
                  AND   PAYCHK3x.OFF_CYCLE  = PAYERN3x.OFF_CYCLE
                  AND   PAYCHK3x.PAGE_NUM   = PAYERN3x.PAGE_NUM
                  AND   PAYCHK3x.LINE_NUM   = PAYERN3x.LINE_NUM
                  AND   PAYCHK3x.SEPCHK     = PAYERN3x.SEPCHK
                  AND   PAYERN3x.ADDL_NBR   = 0)
GROUP BY  PAYCHK3x.OFF_CYCLE, PAYCHK3x.PAGE_NUM, PAYCHK3x.LINE_NUM, PAYCHK3x.SEPCHK,
          PAYCHK3x.PAYCHECK_NBR, PAYCHK3x.BUSINESS_UNIT,
          TAXDISTx.STATE, TAXDISTx.LOCALITY, TAXDISTx.TAX_CLASS, TAXDISTx.ACCT_CD, TAXDISTx.PY_LIABEXPFLG, TAXDISTx.ACCOUNT
end-select

end-procedure

!***********************************
begin-procedure Prepare-Tax-AcctLine
!***********************************

  if $Business_Unit_hr <> $PrevBusUnit
      do Get-GL-BU-Details ($Business_Unit_hr, $Business_Unit_AP, $Business_Unit_GL, $Journal_Template)
      do Get-GL-Currency ($business_unit_gl, $currency_cd_gl)
      do Get-Setid ($business_unit_hr,'PY_03',$Setid_HR)
      let $PrevBusUnit = $Business_Unit_hr
  end-if

  do Determine-Tax-Descr
  do Get-Acct-Cd-Data

  if $Liab_Exp_Flag = 'L' or $Liab_Exp_Flag = 'R'
      let $GL_Account   = $TaxDist_Account
      let $DrCr         = 'C'
  else
      let $DrCr         = 'D'
  end-if

  do Write-GL-Transaction

end-procedure

!*******************************
begin-procedure Process-Ctx-Dist
!*******************************

  let $PrevBusUnit      = ' '

begin-select on-error=SQL-error
PAYCHK4.OFF_CYCLE
PAYCHK4.PAGE_NUM
PAYCHK4.LINE_NUM
PAYCHK4.SEPCHK
PAYCHK4.PAYCHECK_NBR
PAYCHK4.BUSINESS_UNIT
PAYERN4.BUSINESS_UNIT
CTXDIST.ACCT_CD
CTXDIST.ACCOUNT
CTXDIST.PY_LIABEXPFLG
CTXDIST.TAX_CLASS_CAN
CTXDIST.PROVINCE
#ifdef DB2ALL
DECIMAL(SUM(CTXDIST.TAX_CUR),15,2)          &CTXDIST.TAX_CUR
DECIMAL(SUM(CTXDIST.PY_ACCRUAL_AMT),15,2)   &CTXDIST.PY_ACCRUAL_AMT
#else
SUM(CTXDIST.TAX_CUR)                        &CTXDIST.TAX_CUR
SUM(CTXDIST.PY_ACCRUAL_AMT)                 &CTXDIST.PY_ACCRUAL_AMT
#endif

  let #PayCheck_Nbr     =  &PAYCHK4.PAYCHECK_NBR
  let $Business_Unit_hr =  &PAYERN4.BUSINESS_UNIT
  let $AcctCd           =  &CTXDIST.ACCT_CD
  let #Monetary_Amount  =  &CTXDIST.TAX_CUR
  let $Liab_Exp_Flag    =  &CTXDIST.PY_LIABEXPFLG
  let $Tax_Class_CAN    =  &CTXDIST.TAX_CLASS_CAN
  let $Province         =  &CTXDIST.PROVINCE
  let $CtxDist_Account  =  &CTXDIST.ACCOUNT

  if $DistExpense = 'N' and ($Liab_Exp_Flag = 'E' or $Liab_Exp_Flag = 'R')
      let $Business_Unit_hr =  &PAYCHK4.BUSINESS_UNIT
  end-if

  do Prepare-Ctx-AcctLine

  let #Monetary_Amount  =  &CTXDIST.PY_ACCRUAL_AMT
  do Prepare-Accrual-AcctLine

from PS_PAY_CHECK        PAYCHK4,
     PS_PAY_EARNINGS     PAYERN4,
     PS_PAY_NA_CTX_DIST  CTXDIST

WHERE PAYCHK4.COMPANY    = $Company
AND   PAYCHK4.PAYGROUP   = $PayGroup
AND   PAYCHK4.PAY_END_DT = $PayEndDt
AND   PAYCHK4.COMPANY    = PAYERN4.COMPANY
AND   PAYCHK4.PAYGROUP   = PAYERN4.PAYGROUP
AND   PAYCHK4.PAY_END_DT = PAYERN4.PAY_END_DT
AND   PAYCHK4.OFF_CYCLE  = PAYERN4.OFF_CYCLE
AND   PAYCHK4.PAGE_NUM   = PAYERN4.PAGE_NUM
AND   PAYCHK4.LINE_NUM   = PAYERN4.LINE_NUM
AND   PAYCHK4.SEPCHK     = PAYERN4.SEPCHK
AND   PAYERN4.COMPANY    = CTXDIST.COMPANY
AND   PAYERN4.PAYGROUP   = CTXDIST.PAYGROUP
AND   PAYERN4.PAY_END_DT = CTXDIST.PAY_END_DT
AND   PAYERN4.OFF_CYCLE  = CTXDIST.OFF_CYCLE
AND   PAYERN4.PAGE_NUM   = CTXDIST.PAGE_NUM
AND   PAYERN4.LINE_NUM   = CTXDIST.LINE_NUM
AND   PAYERN4.ADDL_NBR   = CTXDIST.ADDL_NBR
AND   PAYERN4.SEPCHK     = CTXDIST.SEPCHK
GROUP BY  PAYCHK4.OFF_CYCLE, PAYCHK4.PAGE_NUM, PAYCHK4.LINE_NUM, PAYCHK4.SEPCHK,
          PAYCHK4.PAYCHECK_NBR, PAYCHK4.BUSINESS_UNIT, PAYERN4.BUSINESS_UNIT,
          CTXDIST.PROVINCE, CTXDIST.TAX_CLASS_CAN, CTXDIST.ACCT_CD, CTXDIST.PY_LIABEXPFLG, CTXDIST.ACCOUNT
end-select

  let $PrevBusUnit      = ' '

begin-select on-error=SQL-error
PAYCHK4x.OFF_CYCLE
PAYCHK4x.PAGE_NUM
PAYCHK4x.LINE_NUM
PAYCHK4x.SEPCHK
PAYCHK4x.PAYCHECK_NBR
PAYCHK4x.BUSINESS_UNIT
CTXDISTx.ACCT_CD
CTXDISTx.ACCOUNT
CTXDISTx.PY_LIABEXPFLG
CTXDISTx.TAX_CLASS_CAN
CTXDISTx.PROVINCE
#ifdef DB2ALL
DECIMAL(SUM(CTXDISTx.TAX_CUR),15,2)          &CTXDISTx.TAX_CUR
DECIMAL(SUM(CTXDISTx.PY_ACCRUAL_AMT),15,2)   &CTXDISTx.PY_ACCRUAL_AMT
#else
SUM(CTXDISTx.TAX_CUR)                        &CTXDISTx.TAX_CUR
SUM(CTXDISTx.PY_ACCRUAL_AMT)                 &CTXDISTx.PY_ACCRUAL_AMT
#endif

  let #PayCheck_Nbr     =  &PAYCHK4x.PAYCHECK_NBR
  let $Business_Unit_hr =  &PAYCHK4x.BUSINESS_UNIT
  let $AcctCd           =  &CTXDISTx.ACCT_CD
  let #Monetary_Amount  =  &CTXDISTx.TAX_CUR
  let $Liab_Exp_Flag    =  &CTXDISTx.PY_LIABEXPFLG
  let $Tax_Class_CAN    =  &CTXDISTx.TAX_CLASS_CAN
  let $Province         =  &CTXDISTx.PROVINCE
  let $CtxDist_Account  =  &CTXDISTx.ACCOUNT

  do Prepare-Ctx-AcctLine

  let #Monetary_Amount  =  &CTXDISTx.PY_ACCRUAL_AMT
  do Prepare-Accrual-AcctLine

from PS_PAY_CHECK        PAYCHK4x,
     PS_PAY_NA_CTX_DIST  CTXDISTx

WHERE PAYCHK4x.COMPANY    = $Company
AND   PAYCHK4x.PAYGROUP   = $PayGroup
AND   PAYCHK4x.PAY_END_DT = $PayEndDt
AND   PAYCHK4x.COMPANY    = CTXDISTx.COMPANY
AND   PAYCHK4x.PAYGROUP   = CTXDISTx.PAYGROUP
AND   PAYCHK4x.PAY_END_DT = CTXDISTx.PAY_END_DT
AND   PAYCHK4x.OFF_CYCLE  = CTXDISTx.OFF_CYCLE
AND   PAYCHK4x.PAGE_NUM   = CTXDISTx.PAGE_NUM
AND   PAYCHK4x.LINE_NUM   = CTXDISTx.LINE_NUM
AND   PAYCHK4x.SEPCHK     = CTXDISTx.SEPCHK
AND   CTXDISTx.ADDL_NBR   = 0
AND   NOT EXISTS (SELECT 'X' FROM PS_PAY_EARNINGS PAYERN4x
                  WHERE PAYCHK4x.COMPANY    = PAYERN4x.COMPANY
                  AND   PAYCHK4x.PAYGROUP   = PAYERN4x.PAYGROUP
                  AND   PAYCHK4x.PAY_END_DT = PAYERN4x.PAY_END_DT
                  AND   PAYCHK4x.OFF_CYCLE  = PAYERN4x.OFF_CYCLE
                  AND   PAYCHK4x.PAGE_NUM   = PAYERN4x.PAGE_NUM
                  AND   PAYCHK4x.LINE_NUM   = PAYERN4x.LINE_NUM
                  AND   PAYCHK4x.SEPCHK     = PAYERN4x.SEPCHK
                  AND   PAYERN4x.ADDL_NBR   = 0)
GROUP BY  PAYCHK4x.OFF_CYCLE, PAYCHK4x.PAGE_NUM, PAYCHK4x.LINE_NUM, PAYCHK4x.SEPCHK,
          PAYCHK4x.PAYCHECK_NBR, PAYCHK4x.BUSINESS_UNIT,
          CTXDISTx.PROVINCE, CTXDISTx.TAX_CLASS_CAN, CTXDISTx.ACCT_CD, CTXDISTx.PY_LIABEXPFLG, CTXDISTx.ACCOUNT
end-select

end-procedure

!***********************************
begin-procedure Prepare-Ctx-AcctLine
!***********************************

  if $Business_Unit_hr <> $PrevBusUnit
      do Get-GL-BU-Details ($Business_Unit_hr, $Business_Unit_AP, $Business_Unit_GL, $Journal_Template)
      do Get-GL-Currency ($business_unit_gl, $currency_cd_gl)
      do Get-Setid ($business_unit_hr,'PY_03',$Setid_HR)
      let $PrevBusUnit = $Business_Unit_hr
  end-if

  do Determine-Ctx-Descr
  do Get-Acct-Cd-Data

  if $Liab_Exp_Flag = 'L' or $Liab_Exp_Flag = 'R'
      let $GL_Account   = $CtxDist_Account
      let $DrCr         = 'C'
  else
      let $DrCr         = 'D'
  end-if

  do Write-GL-Transaction

end-procedure

!**********************************
begin-procedure Process-NetPay-Dist
!**********************************

  let $PrevBusUnit      = ' '
  let $DrCr             = 'C'

begin-select on-error=SQL-error
PAYCHK5.OFF_CYCLE
PAYCHK5.PAGE_NUM
PAYCHK5.LINE_NUM
PAYCHK5.SEPCHK
PAYCHK5.PAYCHECK_NBR
PAYCHK5.PAYCHECK_OPTION
PAYERN5.BUSINESS_UNIT
NETDIST.ACCT_CD
NETDIST.ACCOUNT
NETDIST.DEPOSIT
#ifdef DB2ALL
DECIMAL(SUM(NETDIST.NET_PAY),15,2)          &NETDIST.NET_PAY
DECIMAL(SUM(NETDIST.PY_ACCRUAL_AMT),15,2)   &NETDIST.PY_ACCRUAL_AMT
#else
SUM(NETDIST.NET_PAY)                        &NETDIST.NET_PAY
SUM(NETDIST.PY_ACCRUAL_AMT)                 &NETDIST.PY_ACCRUAL_AMT
#endif

  let #PayCheck_Nbr     =  &PAYCHK5.PAYCHECK_NBR
  let $PayCheck_Option  =  &PAYCHK5.PAYCHECK_OPTION
  let $Business_Unit_hr =  &PAYERN5.BUSINESS_UNIT
  let $AcctCd           =  &NETDIST.ACCT_CD
  let $DepositInd       =  &NETDIST.DEPOSIT

  if $Business_Unit_hr <> $PrevBusUnit
      do Get-GL-BU-Details ($Business_Unit_hr, $Business_Unit_AP, $Business_Unit_GL, $Journal_Template)
      do Get-GL-Currency ($business_unit_gl, $currency_cd_gl)
      do Get-Setid ($business_unit_hr,'PY_03',$Setid_HR)
      let $PrevBusUnit = $Business_Unit_hr
  end-if

  let $payroll_line_descr = 'Net Pay '

  if $PayCheck_OPtion = 'R'
      if $DepositInd = 'Y'
          let $payroll_line_descr = '(DDP Reversal)'
      else
          let $payroll_line_descr = '(Chk Reversal)'
      end-if
  else
      if $DepositInd = 'Y'
          let $payroll_line_descr = '(DDP)'
      else
          let $payroll_line_descr = '(Checks)'
      end-if
  end-if

  let $payroll_line_descr = 'Net Pay ' || $payroll_line_descr
  let #Monetary_Amount  =  &NETDIST.NET_PAY

  do Get-Acct-Cd-Data
  let $GL_Account   = &NETDIST.ACCOUNT
  do Write-GL-Transaction

  let #Monetary_Amount  =  &NETDIST.PY_ACCRUAL_AMT
  if #Monetary_Amount <> 0
      let $payroll_line_descr = $payroll_line_descr || ' Accrual'
      do Write-GL-Transaction
      do Insert-Accrual
      let #PayGroup_Accrual_Credit = #PayGroup_Accrual_Credit +  #Monetary_Amount
  end-if

from PS_PAY_CHECK        PAYCHK5,
     PS_PAY_EARNINGS     PAYERN5,
     PS_PAY_NA_NET_DIST  NETDIST

WHERE PAYCHK5.COMPANY    = $Company
AND   PAYCHK5.PAYGROUP   = $PayGroup
AND   PAYCHK5.PAY_END_DT = $PayEndDt
AND   PAYCHK5.COMPANY    = PAYERN5.COMPANY
AND   PAYCHK5.PAYGROUP   = PAYERN5.PAYGROUP
AND   PAYCHK5.PAY_END_DT = PAYERN5.PAY_END_DT
AND   PAYCHK5.OFF_CYCLE  = PAYERN5.OFF_CYCLE
AND   PAYCHK5.PAGE_NUM   = PAYERN5.PAGE_NUM
AND   PAYCHK5.LINE_NUM   = PAYERN5.LINE_NUM
AND   PAYCHK5.SEPCHK     = PAYERN5.SEPCHK
AND   PAYERN5.COMPANY    = NETDIST.COMPANY
AND   PAYERN5.PAYGROUP   = NETDIST.PAYGROUP
AND   PAYERN5.PAY_END_DT = NETDIST.PAY_END_DT
AND   PAYERN5.OFF_CYCLE  = NETDIST.OFF_CYCLE
AND   PAYERN5.PAGE_NUM   = NETDIST.PAGE_NUM
AND   PAYERN5.LINE_NUM   = NETDIST.LINE_NUM
AND   PAYERN5.ADDL_NBR   = NETDIST.ADDL_NBR
AND   PAYERN5.SEPCHK     = NETDIST.SEPCHK
GROUP BY  PAYCHK5.OFF_CYCLE, PAYCHK5.PAGE_NUM, PAYCHK5.LINE_NUM, PAYCHK5.SEPCHK,
          PAYCHK5.PAYCHECK_NBR, PAYERN5.BUSINESS_UNIT,
          PAYCHK5.PAYCHECK_OPTION, NETDIST.ACCT_CD, NETDIST.ACCOUNT, NETDIST.DEPOSIT
end-select

end-procedure


!*****************************
begin-procedure Write-Expenses
!*****************************

  let $PrevBusUnit = ' '

begin-select on-error=SQL-error

PAYCHK6.OFF_CYCLE
PAYCHK6.PAGE_NUM
PAYCHK6.LINE_NUM
PAYCHK6.SEPCHK
PAYCHK6.FORM_ID
PAYCHK6.PAYCHECK_NBR
PAYCHK6.PAYCHECK_OPTION
PAYCHK6.PAYCHECK_STATUS
PAYCHK6.CHECK_DT
PAYERN6.EMPLID
PAYERN6.EMPL_RCD
PAYERN6.ERNCD
PAYERN6.BUSINESS_UNIT
PAYERN6.EX_DOC_ID
PAYERN6.EX_DOC_TYPE
PAYERN6.EX_LINE_NBR
PAYERN6.EARNINGS

  let $OffCycle         =  &PAYCHK6.OFF_CYCLE
  let #PageNum          =  &PAYCHK6.PAGE_NUM
  let #LineNum          =  &PAYCHK6.LINE_NUM
  let #SepCheck         =  &PAYCHK6.SEPCHK
  let $PayCheckFormID   =  &PAYCHK6.FORM_ID
  let #PayCheck_Nbr     =  &PAYCHK6.PAYCHECK_NBR
  let $PayCheck_Option  =  &PAYCHK6.PAYCHECK_OPTION
  let $PayCheck_Status  =  &PAYCHK6.PAYCHECK_STATUS
  let $CheckDt          =  &PAYCHK6.CHECK_DT
  let $Business_Unit_hr =  &PAYERN6.BUSINESS_UNIT
  let $EmplID           =  &PAYERN6.EMPLID
  let #EmplRcd          =  &PAYERN6.EMPL_RCD
  let $ErnCd            =  &PAYERN6.ERNCD
  let #Monetary_Amount  =  &PAYERN6.EARNINGS

  if $Business_Unit_hr <> $PrevBusUnit
      do Get-GL-BU-Details ($Business_Unit_hr, $Business_Unit_AP, $Business_Unit_GL, $Journal_Template)
      do Get-GL-Currency ($business_unit_gl, $currency_cd_gl)
      do Get-Setid ($business_unit_hr,'PY_03',$Setid_HR)
      let $PrevBusUnit = $Business_Unit_hr
  end-if

  let $Ex_Currency      = $currency_cd_gl
  let $Ex_Doc_Id        = &PAYERN6.EX_DOC_ID
  let $Ex_Doc_Type      = &PAYERN6.EX_DOC_TYPE
  let #Ex_Line_Nbr      = &PAYERN6.EX_LINE_NBR

  if rtrim($Ex_doc_Id, ' ') <> ''
     and rtrim($Ex_Doc_Type, ' ') <> ''

      if (#Ex_Line_Nbr = 0 and
           (($PayCheck_Option = 'R' and #Monetary_Amount > 0)
             or ($PayCheck_Option <> 'R' and #Monetary_Amount < 0)))
         or #Ex_Line_Nbr <> 0

          do Write-Expense-Payment
      end-if
  end-if

from PS_PAY_CHECK        PAYCHK6,
     PS_PAY_NA_EARNINGS  PAYERN6

WHERE PAYCHK6.COMPANY       = $Company
AND   PAYCHK6.PAYGROUP      = $PayGroup
AND   PAYCHK6.PAY_END_DT    = $PayEndDt
AND   PAYCHK6.COMPANY       = PAYERN6.COMPANY
AND   PAYCHK6.PAYGROUP      = PAYERN6.PAYGROUP
AND   PAYCHK6.PAY_END_DT    = PAYERN6.PAY_END_DT
AND   PAYCHK6.OFF_CYCLE     = PAYERN6.OFF_CYCLE
AND   PAYCHK6.PAGE_NUM      = PAYERN6.PAGE_NUM
AND   PAYCHK6.LINE_NUM      = PAYERN6.LINE_NUM
AND   PAYCHK6.SEPCHK        = PAYERN6.SEPCHK
AND   PAYERN6.ERNCD        <> $PGrp_ErnCd_Reg_Hrs
AND   PAYERN6.EX_DOC_ID    <> ' '
AND   PAYERN6.EX_DOC_TYPE  <> ' '
end-select
end-procedure

!******************************************
begin-procedure Distribute-ER-Amt-by-BenRcd
!******************************************

  let #RemainerAmt  = #DistCur
  let $CompleteDist = 'N'

  do Find-Ttl-Earn-by-BenRcd
  do Calc-Dist-Threshold (#TtlBenEarn, #TtlPosBenEarn, #TtlNegBenEarn, $DistOptn)

  if ($DistExpense = 'N' or $DistOptn = 'H')
      let #ExpDistIdx = 0
      get #EDst_AddlNbr $EDst_ErnCd $EDst_EmplID #EDst_EmplRcd $Business_Unit $Business_Unit_AP $Business_Unit_GL
          $DeptID $PositionNbr $JobCode $StrMapLevel
      from ExpDistArray (#ExpDistIdx)
          AddlNbr ErnCd EmplID EmplRcd Business_Unit Business_Unit_AP Business_Unit_GL
          DeptID Position_Nbr JobCode StartMapLevel

      do Get-ChartFields
      let #DistAmount = #RemainerAmt + 0
      if #DistAmount <> 0
          do Calc-ER-Accrual-Amt
          do Get-Acct-Cd-Data
          do Write-NA-Dist-Rec ('E', ' ')
          do Write-NA-Dist-Rec ('R', $ER_Offset_Acct)
      end-if
  else
      let #ExpDistIdx   = 0
      while #ExpDistIdx < #MaxExpDist and $CompleteDist = 'N'

          get #EDst_AddlNbr $EDst_ErnCd $EDst_EmplID #EDst_EmplRcd $Business_Unit $Business_Unit_AP $Business_Unit_GL
              $DeptID $PositionNbr $JobCode #EDst_BenRcd $StrMapLevel
              $LastDist #DistPct $PosLastDist #PosDistPct $NegLastDist #NegDistPct
          from ExpDistArray (#ExpDistIdx)
              AddlNbr ErnCd EmplID EmplRcd Business_Unit Business_Unit_AP Business_Unit_GL
              DeptID Position_Nbr JobCode BenefitRcd StartMapLevel
              BenLastDist BenDistPct PosBenLastDist PosBenDistPct NegBenLastDist NegBenDistPct

          if #EDst_BenRcd  = #BenefitRcdNo and
             (($DistOptn = 'T' and #DistPct    <> 0) or
              ($DistOptn = 'P' and #PosDistPct <> 0) or
              ($DistOptn = 'N' and #NegDistPct <> 0))

              do Get-ChartFields

              evaluate $DistOptn

                  when = 'T'
                      if $LastDist = 'Y'
                          let #DistAmount = #RemainerAmt
                          let $CompleteDist = 'Y'
                      else
                          let #DistAmount = round(#DistCur * #DistPct, 2)
                          let #RemainerAmt = #RemainerAmt - #DistAmount
                      end-if
                      break

                  when = 'P'
                      if $PosLastDist = 'Y'
                          let #DistAmount = #RemainerAmt
                          let $CompleteDist = 'Y'
                      else
                          let #DistAmount = round(#DistCur * #PosDistPct, 2)
                          let #RemainerAmt = #RemainerAmt - #DistAmount
                      end-if
                      break

                  when = 'N'
                      if $NegLastDist = 'Y'
                          let #DistAmount = #RemainerAmt
                          let $CompleteDist = 'Y'
                      else
                          let #DistAmount = round(#DistCur * #NegDistPct, 2)
                          let #RemainerAmt = #RemainerAmt - #DistAmount
                      end-if
                      break
              end-evaluate

              let #DistAmount = #DistAmount + 0
              if #DistAmount <> 0
                  do Calc-ER-Accrual-Amt
                  do Get-Acct-Cd-Data
                  do Write-NA-Dist-Rec ('E', ' ')
                  do Write-NA-Dist-Rec ('R', $ER_Offset_Acct)
              end-if
          end-if

          let #ExpDistIdx = #ExpDistIdx + 1

      end-while
  end-if

end-procedure

!**********************************************
begin-procedure Distribute-EE-Pos-Amt-by-BenRcd
!**********************************************

  let #RemainerAmt  = #DistCur
  let $CompleteDist = 'N'

  do Find-Ttl-Earn-by-BenRcd

  if #TtlPosBenEarn = 0
      let #ErnDistIdx = 0
      get #EDst_AddlNbr $EDst_ErnCd $EDst_EmplID #EDst_EmplRcd $Business_Unit $Business_Unit_AP $Business_Unit_GL
          $DeptID $PositionNbr $JobCode $AcctCd
      from EarnDistArray (#ErnDistIdx)
          AddlNbr ErnCd EmplID EmplRcd Business_Unit Business_Unit_AP Business_Unit_GL
          DeptID Position_Nbr JobCode AccountCode

      let #DistAmount = #RemainerAmt + 0
      if #DistAmount <> 0
          do Calc-EE-Accrual-Amt
          do Get-Acct-Cd-Data
          Array-Add #DistAmount  to EarnDistArray (#ErnDistIdx) Deduct_Amt
          Array-Add #DistAccrAmt to EarnDistArray (#ErnDistIdx) AccrDedn_Amt
          do Write-NA-Dist-Rec ('L', $EE_Offset_Acct)
      end-if
  else
      let #ErnDistIdx   = 0
      while #ErnDistIdx < #MaxErnDist and $CompleteDist = 'N'

          get #EDst_AddlNbr $EDst_ErnCd $EDst_EmplID #EDst_EmplRcd $Business_Unit $Business_Unit_AP $Business_Unit_GL
              $DeptID $PositionNbr $JobCode #EDst_BenRcd $AcctCd
              $PosLastDist #PosDistPct
          from EarnDistArray (#ErnDistIdx)
              AddlNbr ErnCd EmplID EmplRcd Business_Unit Business_Unit_AP Business_Unit_GL
              DeptID Position_Nbr JobCode BenefitRcd AccountCode
              PosBenLastDist PosBenDistPct

          if #PosDistPct <> 0 and #EDst_BenRcd = #BenefitRcdNo
              if $PosLastDist = 'Y'
                  let #DistAmount = #RemainerAmt
                  let $CompleteDist = 'Y'
              else
                  let #DistAmount = round(#DistCur * #PosDistPct, 2)
                  let #RemainerAmt = #RemainerAmt - #DistAmount
              end-if

              let #DistAmount = #DistAmount + 0
              if #DistAmount <> 0
                  do Calc-EE-Accrual-Amt
                  do Get-Acct-Cd-Data
                  Array-Add #DistAmount  to EarnDistArray (#ErnDistIdx) Deduct_Amt
                  Array-Add #DistAccrAmt to EarnDistArray (#ErnDistIdx) AccrDedn_Amt
                  do Write-NA-Dist-Rec ('L', $EE_Offset_Acct)
              end-if
          end-if

          let #ErnDistIdx = #ErnDistIdx + 1

      end-while
  end-if

end-procedure

!**************************************
begin-procedure Find-Ttl-Earn-by-BenRcd
!**************************************

  let #BenEarnIdx   = 0
  let $BenEarnFound = 'N'
  while #BenEarnIdx < #MaxBenEarn and $BenEarnFound = 'N'

      get #BenEarnRcd #TtlBenEarn #TtlPosBenEarn #TtlNegBenEarn
      from BenEarnArray (#BenEarnIdx)
          BenefitRcd TotalEarn TotalPosEarn TotalNegEarn

      if #BenEarnRcd = #BenefitRcdNo
          let $BenEarnFound = 'Y'
      else
          let #BenEarnIdx = #BenEarnIdx + 1
      end-if
  end-while

end-procedure

!********************************
begin-procedure Distribute-ER-Amt
!********************************

  let #RemainerAmt  = #DistCur
  let $CompleteDist = 'N'

  do Calc-Dist-Threshold (#TtlEarn, #TtlPosEarn, #TtlNegEarn, $DistOptn)

  if ($DistExpense = 'N' or $DistOptn = 'H')
      let #ExpDistIdx = 0

      get #EDst_AddlNbr $EDst_ErnCd $EDst_EmplID #EDst_EmplRcd $Business_Unit $Business_Unit_AP $Business_Unit_GL
          $DeptID $PositionNbr $JobCode $StrMapLevel
      from ExpDistArray (#ExpDistIdx)
          AddlNbr ErnCd EmplID EmplRcd Business_Unit Business_Unit_AP Business_Unit_GL
          DeptID Position_Nbr JobCode StartMapLevel

      do Get-ChartFields
      let #DistAmount = #RemainerAmt + 0
      if #DistAmount <> 0
          do Calc-ER-Accrual-Amt
          do Get-Acct-Cd-Data
          do Write-NA-Dist-Rec ('E', ' ')
          do Write-NA-Dist-Rec ('R', $ER_Offset_Acct)
      end-if
  else
      let #ExpDistIdx   = 0
      while #ExpDistIdx < #MaxExpDist and $CompleteDist = 'N'

          get #EDst_AddlNbr $EDst_ErnCd $EDst_EmplID #EDst_EmplRcd $Business_Unit $Business_Unit_AP $Business_Unit_GL
              $DeptID $PositionNbr $JobCode $StrMapLevel
              $LastDist #DistPct $PosLastDist #PosDistPct $NegLastDist #NegDistPct
          from ExpDistArray (#ExpDistIdx)
              AddlNbr ErnCd EmplID EmplRcd Business_Unit Business_Unit_AP Business_Unit_GL
              DeptID Position_Nbr JobCode StartMapLevel
              LastDist DistPct PosLastDist PosDistPct NegLastDist NegDistPct

          if ($DistOptn = 'T' and #DistPct    <> 0) or
             ($DistOptn = 'P' and #PosDistPct <> 0) or
             ($DistOptn = 'N' and #NegDistPct <> 0)

              do Get-ChartFields

              evaluate $DistOptn

                  when = 'T'
                      if $LastDist = 'Y'
                          let #DistAmount = #RemainerAmt
                          let $CompleteDist = 'Y'
                      else
                          let #DistAmount = round(#DistCur * #DistPct, 2)
                          let #RemainerAmt = #RemainerAmt - #DistAmount
                      end-if
                      break

                  when = 'P'
                      if $PosLastDist = 'Y'
                          let #DistAmount = #RemainerAmt
                          let $CompleteDist = 'Y'
                      else
                          let #DistAmount = round(#DistCur * #PosDistPct, 2)
                          let #RemainerAmt = #RemainerAmt - #DistAmount
                      end-if
                      break

                  when = 'N'
                      if $NegLastDist = 'Y'
                          let #DistAmount = #RemainerAmt
                          let $CompleteDist = 'Y'
                      else
                          let #DistAmount = round(#DistCur * #NegDistPct, 2)
                          let #RemainerAmt = #RemainerAmt - #DistAmount
                      end-if
                      break
              end-evaluate

              let #DistAmount = #DistAmount + 0
              if #DistAmount <> 0
                  do Calc-ER-Accrual-Amt
                  do Get-Acct-Cd-Data
                  do Write-NA-Dist-Rec ('E', ' ')
                  do Write-NA-Dist-Rec ('R', $ER_Offset_Acct)
              end-if
          end-if

          let #ExpDistIdx = #ExpDistIdx + 1

      end-while
  end-if

end-procedure

!***********************************
begin-procedure Distribute-EE-Pos-Amt
!************************************

  let #RemainerAmt  = #DistCur
  let $CompleteDist = 'N'

  if #TtlPosEarn = 0
      let #ErnDistIdx = 0

      get #EDst_AddlNbr $EDst_ErnCd $EDst_EmplID #EDst_EmplRcd $Business_Unit $Business_Unit_AP $Business_Unit_GL
          $DeptID $PositionNbr $JobCode $AcctCd
      from EarnDistArray (#ErnDistIdx)
          AddlNbr ErnCd EmplID EmplRcd Business_Unit Business_Unit_AP Business_Unit_GL
          DeptID Position_Nbr JobCode AccountCode

      let #DistAmount = #RemainerAmt + 0
      if #DistAmount <> 0
          do Calc-EE-Accrual-Amt
          do Get-Acct-Cd-Data
          Array-Add #DistAmount  to EarnDistArray (#ErnDistIdx) Deduct_Amt
          Array-Add #DistAccrAmt to EarnDistArray (#ErnDistIdx) AccrDedn_Amt
          do Write-NA-Dist-Rec ('L', $EE_Offset_Acct)
      end-if
  else
      let #ErnDistIdx   = 0
      while #ErnDistIdx < #MaxErnDist and $CompleteDist = 'N'

          get #EDst_AddlNbr $EDst_ErnCd $EDst_EmplID #EDst_EmplRcd $Business_Unit $Business_Unit_AP $Business_Unit_GL
              $DeptID $PositionNbr $JobCode $AcctCd
              $PosLastDist #PosDistPct
          from EarnDistArray (#ErnDistIdx)
              AddlNbr ErnCd EmplID EmplRcd Business_Unit Business_Unit_AP Business_Unit_GL
              DeptID Position_Nbr JobCode AccountCode
              PosLastDist PosDistPct

          if #PosDistPct <> 0
              if $PosLastDist = 'Y'
                  let #DistAmount = #RemainerAmt
                  let $CompleteDist = 'Y'
              else
                  let #DistAmount = round(#DistCur * #PosDistPct, 2)
                  let #RemainerAmt = #RemainerAmt - #DistAmount
              end-if

              let #DistAmount = #DistAmount + 0
              if #DistAmount <> 0
                  do Calc-EE-Accrual-Amt
                  do Get-Acct-Cd-Data
                  Array-Add #DistAmount  to EarnDistArray (#ErnDistIdx) Deduct_Amt
                  Array-Add #DistAccrAmt to EarnDistArray (#ErnDistIdx) AccrDedn_Amt
                  do Write-NA-Dist-Rec ('L', $EE_Offset_Acct)
              end-if
          end-if

          let #ErnDistIdx = #ErnDistIdx + 1

      end-while
  end-if

end-procedure

!************************************
begin-procedure Distribute-EE-Neg-Amt
!************************************

  let #ErnDistIdx = 0
  get #EDst_AddlNbr $EDst_ErnCd $EDst_EmplID #EDst_EmplRcd $Business_Unit $Business_Unit_AP $Business_Unit_GL
      $DeptID $PositionNbr $JobCode $AcctCd
  from EarnDistArray (#ErnDistIdx)
      AddlNbr ErnCd EmplID EmplRcd Business_Unit Business_Unit_AP Business_Unit_GL
      DeptID Position_Nbr JobCode AccountCode

  let #DistAmount = #DistCur + 0
  if #DistAmount <> 0
      do Calc-EE-Accrual-Amt
      do Get-Acct-Cd-Data
      do Write-NA-Dist-Rec ('L', $EE_Offset_Acct)

      let #RefundAmt = #DistAmount * -1
      Array-Add #RefundAmt to EarnDistArray (#ErnDistIdx) Refund_Amt
      let #DistAccrAmt = #DistAccrAmt * -1
      Array-Add #DistAccrAmt to EarnDistArray (#ErnDistIdx) AccrRefund
  end-if

end-procedure

!***********************************************************************************
begin-procedure Calc-Dist-Threshold (#TtlEarn, #TtlPosEarn, #TtlNegEarn, :$DistOptn)
!***********************************************************************************

  let $DistOptn = 'H'

  if #TtlEarn <> 0

      let #CalcPosRatio = round(#TtlPosEarn / #TtlEarn, 6)
      let #CalcNegRatio = round(#TtlNegEarn / #TtlEarn, 6)

      if (abs(#CalcPosRatio) <= #_Threshold_Limit) and
         (abs(#CalcNegRatio) <= #_Threshold_Limit)

          let $DistOptn = 'T'
      end-if
  end-if

end-procedure

!***********************************
begin-procedure  Calc-ER-Accrual-Amt
!***********************************

  let #DistAccrAmt = 0
  if $ReverseAccrual = 'N' and #AccrualPct > 0

      if #DistAmount <> 0
          let #Accrual_Amount    = round((#DistAmount *  #AccrualPct) / 100, 6)
          let #DistAccrAmt       = round(#Accrual_Amount, 2)
          let #Accrual_Diff      = #Accrual_Amount - #DistAccrAmt

          let #ER_Accrual_Diff   = #ER_Accrual_Diff + #Accrual_Diff
          if #ER_Accrual_Diff >= 0.01
              let #DistAccrAmt           = #DistAccrAmt + 0.01
              let #ER_Accrual_Diff       = #ER_Accrual_Diff  - 0.01
          else
              if #ER_Accrual_Diff <= -0.01
                  let #DistAccrAmt           = #DistAccrAmt - 0.01
                  let #ER_Accrual_Diff       = #ER_Accrual_Diff  + 0.01
              end-if
          end-if
      end-if
  end-if

end-procedure

!***********************************
begin-procedure  Calc-EE-Accrual-Amt
!***********************************

  let #DistAccrAmt = 0
  if $ReverseAccrual = 'N' and #AccrualPct > 0

      if #DistAmount <> 0
          let #Accrual_Amount    = round((#DistAmount *  #AccrualPct) / 100, 6)
          let #DistAccrAmt       = round(#Accrual_Amount, 2)
          let #Accrual_Diff      = #Accrual_Amount - #DistAccrAmt
          let #Liab_Accrual_Diff = #Liab_Accrual_Diff + #Accrual_Diff

          if #Liab_Accrual_Diff >= 0.01
              let #DistAccrAmt           = #DistAccrAmt + 0.01
              let #Liab_Accrual_Diff     = #Liab_Accrual_Diff  - 0.01
          else
              if #Liab_Accrual_Diff <= -0.01
                  let #DistAccrAmt           = #DistAccrAmt - 0.01
                  let #Liab_Accrual_Diff     = #Liab_Accrual_Diff  + 0.01
              end-if
          end-if
      end-if
  end-if

end-procedure

!*****************************************
begin-procedure Find-Ded-Liability-Account
!*****************************************

  let #DedIdx = 0
  let $DedLiabFound = 'N'
  let $ResetAcct    = 'N'

  while #DedIdx < #MaxDedLiabAcct and $DedLiabFound = 'N'

      get $GL_Liability $GL_PlanType $GL_DedCd $GL_DedClass $GL_DedSlstxClass
      from DedLiabAcctArray (#DedIdx)
          Liability GL_PlanType GL_DedCd GL_DedClass GL_DedSlstxClass

      if $GL_PlanType      = $PlanType      and
         $GL_DedCd         = $DedCd         and
         $GL_DedClass      = $DedClass      and
         $GL_DedSlstxClass = $DedSlstxClass
          let $DedLiabFound = 'Y'
          let $Account = $GL_Liability
      else
          let #DedIdx = #DedIdx + 1
      end-if
  end-while

  if $DedLiabFound = 'N'
      do Get-Ded-LiabAcct
      if #DedIdx < #DedLiabArraySize
          put $GL_Liability $PlanType $DedCd $DedClass $DedSlstxClass
          into DedLiabAcctArray (#DedIdx)
              Liability GL_PlanType GL_DedCd GL_DedClass GL_DedSlstxClass
      else
          display '***Error*** Deduction Liability Account Array limit exceeded'
          stop
      end-if
      let $Account = $GL_Liability
  end-if

  let $SaveDedLiability = $GL_Liability

end-procedure

!*******************************
begin-procedure Get-Ded-LiabAcct
!*******************************

begin-select on-error=SQL-error
BNPRG.GL_LIABILITY

  let $GL_Liability = substr(&BNPRG.GL_LIABILITY,1,10)

FROM  PS_BNPRG_SLSTX_VW BNPRG
WHERE BNPRG.PLAN_TYPE       = $PlanType
  AND BNPRG.DEDCD           = $DedCd
  AND BNPRG.DED_CLASS       = $DedClass
  AND BNPRG.DED_SLSTX_CLASS = $DedSlstxClass
  AND BNPRG.EFFDT = (SELECT MAX(BNPRG1.EFFDT) FROM PS_BNPRG_SLSTX_VW BNPRG1
                     WHERE BNPRG1.PLAN_TYPE       = BNPRG.PLAN_TYPE
                       AND BNPRG1.DEDCD           = BNPRG.DEDCD
                       AND BNPRG1.DED_CLASS       = BNPRG.DED_CLASS
                       AND BNPRG1.DED_SLSTX_CLASS = BNPRG.DED_SLSTX_CLASS
                       AND BNPRG1.EFFDT          <= $PayEndDt)
end-select
end-procedure


!*****************************************
begin-procedure Find-Tax-Liability-Account
!*****************************************

  let $ProcState    = rtrim($State,' ')
  let $ProcLocality = rtrim($Locality,' ')

  if $ProcState = '$U'
      evaluate $TaxClass
          when = 'H'
          when = 'A'
              let $EE_Offset_Acct = $GL_FWT
              break
          when = 'D'
          when = 'G'
              let $EE_Offset_Acct = $GL_FICA_Ee_Oasdi
              break
          when = 'E'
          when = 'J'
              let $ER_Offset_Acct = $GL_FICA_Er_Oasdi
              break
          when = 'F'
          when = 'T'
              let $EE_Offset_Acct = $GL_FICA_Ee_Med
              break
          when = 'Q'
          when = 'Z'
              let $ER_Offset_Acct = $GL_FICA_Er_Med
              break
          when = 'U'
              let $ER_Offset_Acct = $GL_FUT
              break
          when = 'C'
              let $EE_Offset_Acct = $GL_EIC
              break
      end-evaluate
  else
      let #TaxIdx = 0
      let $TaxLiabFound = 'N'

      while #TaxIdx < #MaxTaxLiabAcct and $TaxLiabFound = 'N'

          get $GL_State  $GL_Locality
              $GL_SWT    $GL_SUT    $GL_SDI  $GL_SDI_ER  $GL_VDI_EE  $GL_VDI_ER
              $GL_SUT_ER $GL_ST_EIC $GL_LWT  $GL_LWT_ER
          from TaxLiabAcctArray (#TaxIdx)
              State      Locality
              GL_SWT     GL_SUT     GL_SDI   GL_SDI_ER   GL_VDI_EE   GL_VDI_ER
              GL_SUT_ER  GL_ST_EIC  GL_LWT   GL_LWT_ER

          if $GL_State = $State and $GL_Locality = $Locality
              let $TaxLiabFound = 'Y'
          else
              let #TaxIdx = #TaxIdx + 1
          end-if
      end-while

      if $TaxLiabFound = 'N'
          if $ProcLocality = ''
              do Get-State-Tax-LiabAcct
              if #TaxIdx < #TaxLiabArraySize
                  put $State     $Locality
                      $GL_SWT    $GL_SUT    $GL_SDI  $GL_SDI_ER  $GL_VDI_EE  $GL_VDI_ER
                      $GL_SUT_ER $GL_ST_EIC ' '      ' '
                  into TaxLiabAcctArray (#TaxIdx)
                      State      Locality
                      GL_SWT     GL_SUT     GL_SDI   GL_SDI_ER   GL_VDI_EE   GL_VDI_ER
                      GL_SUT_ER  GL_ST_EIC  GL_LWT   GL_LWT_ER
              else
                  display '***Error*** US Tax Liability Account Array limit exceeded'
                  stop
              end-if
          else
              do Get-Locality-Tax-LiabAcct
              if #TaxIdx < #TaxLiabArraySize
                  put $State     $Locality
                      ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' $GL_LWT  $GL_LWT_ER
                  into TaxLiabAcctArray (#TaxIdx)
                      State      Locality
                      GL_SWT     GL_SUT     GL_SDI   GL_SDI_ER   GL_VDI_EE   GL_VDI_ER
                      GL_SUT_ER  GL_ST_EIC  GL_LWT   GL_LWT_ER
              else
                  display '***Error*** US Tax Liability Account Array limit exceeded'
                  stop
              end-if
          end-if
          let #MaxTaxLiabAcct = #TaxIdx
      end-if

      if $ProcLocality = ''

          evaluate $TaxClass
              when = 'H'
              when = 'A'
                  let $EE_Offset_Acct = $GL_SWT
                  break
              when = 'V'
              when = 'L'
              when = 'M'
              when = 'N'
                  let $EE_Offset_Acct = $GL_SUT
                  break
              when = 'D'
                  let $EE_Offset_Acct = $GL_SDI
                  break
              when = 'W'
                  let $EE_Offset_Acct = $GL_VDI_EE
                  break
              when = 'S'
              when = 'U'
                  let $ER_Offset_Acct = $GL_SUT_ER
                  break
              when = 'E'
                  let $ER_Offset_Acct = $GL_SDI_ER
                  break
              when = 'X'
                  let $ER_Offset_Acct = $GL_VDI_ER
                  break
              when = 'C'
                  let $EE_Offset_Acct = $GL_ST_EIC
                  break
          end-evaluate
      else
          evaluate $TaxClass
              when = 'B'
                  let $ER_Offset_Acct = $GL_LWT_ER
                  let $EE_Offset_Acct = $GL_LWT
                  break
              when = 'R'
                  let $ER_Offset_Acct = $GL_LWT_ER
                  break
              when = 'H'
                  let $EE_Offset_Acct = $GL_LWT
                  break
              when = 'P'
                  let $EE_Offset_Acct = $GL_LWT
                  break
          end-evaluate
      end-if
  end-if
end-procedure

!*************************************
begin-procedure Get-State-Tax-LiabAcct
!*************************************
  do Get-State-Tax-Data

  let $GL_SWT     = substr(&GL_SWT,1,10)
  let $GL_SUT     = substr(&GL_SUT,1,10)
  let $GL_SUT_ER  = substr(&GL_SUT_ER,1,10)
  let $GL_SDI     = substr(&GL_SDI,1,10)
  let $GL_SDI_ER  = substr(&GL_SDI_ER,1,10)
  let $GL_VDI_EE  = substr(&GL_VDI_EE,1,10)
  let $GL_VDI_ER  = substr(&GL_VDI_ER,1,10)
  let $GL_ST_EIC  = substr(&GL_ST_EIC,1,10)
end-procedure

!****************************************
begin-procedure Get-Locality-Tax-LiabAcct
!****************************************
  do Get-Local-Tax-Data

  let $GL_LWT     = substr(&GL_LWT,1,10)
  let $GL_LWT_ER  = substr(&GL_LWT_ER,1,10)
end-procedure

!*****************************************
begin-procedure Find-Ctx-Liability-Account
!*****************************************

  let #CtxIdx = 0
  let $CtxLiabFound = 'N'

  while #CtxIdx < #MaxCtxLiabAcct and $CtxLiabFound = 'N'

      get $Wage_Loss_Plan from CtxLiabAcctArray(#CtxIdx) Wage_Loss_Plan

      if $Wage_Loss_Plan = $WageLossPlan
          get $CanadaBN
              $GL_NBR_CIT    $GL_NBR_QIT    $GL_NBR_T4A_Tax $GL_NBR_RV2_Tax $GL_NBR_Payroll_Tax
              $GL_NBR_CPP_EE $GL_NBR_CPP_ER $GL_NBR_QPP_EE  $GL_NBR_QPP_ER  $GL_NBR_CUI_EE
              $GL_NBR_CUI_ER $GL_NBR_HTX    $GL_NBR_QIE     $GL_NBR_QIR
          from CtxLiabAcctArray(#CtxIdx)
              Canada_BN
              GL_NBR_CIT     GL_NBR_QIT     GL_NBR_T4A_Tax  GL_NBR_RV2_Tax  GL_NBR_Payroll_Tax
              GL_NBR_CPP_EE  GL_NBR_CPP_ER  GL_NBR_QPP_EE   GL_NBR_QPP_ER   GL_NBR_CUI_EE
              GL_NBR_CUI_ER  GL_NBR_HTX     GL_NBR_QIE      GL_NBR_QIR

          let $CtxLiabFound = 'Y'
      else
          let #CtxIdx = #CtxIdx + 1
      end-if
  end-while

  evaluate $TaxClassCan
      when = 'CPR'
          let $ER_Offset_Acct = $GL_NBR_CPP_ER
          break
      when = 'QPR'
          let $ER_Offset_Acct = $GL_NBR_QPP_ER
          break
      when = 'EIR'
          let $ER_Offset_Acct = $GL_NBR_CUI_ER
          break
      when = 'HTX'
          let $ER_Offset_Acct = $GL_NBR_HTX
          break
      when = 'CPP'
          let $ER_Offset_Acct = $GL_NBR_CPP_ER
          let $EE_Offset_Acct = $GL_NBR_CPP_EE
          break
      when = 'QPP'
          let $ER_Offset_Acct = $GL_NBR_QPP_ER
          let $EE_Offset_Acct = $GL_NBR_QPP_EE
          break
      when = 'CIT'
          let $EE_Offset_Acct = $GL_NBR_CIT
          break
      when = 'QIT'
          let $EE_Offset_Acct = $GL_NBR_QIT
          break
      when = 'T4A'
          let $EE_Offset_Acct = $GL_NBR_T4A_Tax
          break
      when = 'PYT'
          let $EE_Offset_Acct = $GL_NBR_Payroll_Tax
          break
      when = 'RV2'
          let $EE_Offset_Acct = $GL_NBR_RV2_Tax
          break
      when = 'EIE'
          let $EE_Offset_Acct = $GL_NBR_CUI_EE
          break
      when = 'QIE'
          let $EE_Offset_Acct = $GL_NBR_QIE
          break
      when = 'QIR'
          let $ER_Offset_Acct = $GL_NBR_QIR
          break
  end-evaluate
end-procedure

!**********************************
begin-procedure Get-Ern-ChartFields
!**********************************

  let $ErnAcctCd = ' '
  let #MapLevelIdx = 1

  while rtrim($ErnAcctCd,' ') = '' and #MapLevelIdx <= 5

      let $ErnMapLevel = substr($MapString, #MapLevelIdx, 1)
      do Define-Search-Values ($ErnMapLevel)
      if $SkipLevel = 'N'
          do Find-ErnLevel-AcctCd ($Company, $Business_Unit, $ErnMapLevel, $PayEndDt, $Srch_DeptID,
                                   $Srch_JobCode, $Srch_Position_Nbr, $Srch_EmplID, #Srch_Empl_Rcd,
                                   $ErnCd, $ErnAcctCd)

          if rtrim($ErnAcctCd,' ') = ''
              do Find-ErnDefLevel-AcctCd ($Company, $Business_Unit, $ErnMapLevel, $PayEndDt, $Srch_DeptID,
                                          $Srch_JobCode, $Srch_Position_Nbr, $Srch_EmplID, #Srch_Empl_Rcd,
                                          $DefErnGroupName, $ErnAcctCd)
          end-if
      end-if

      let #MapLevelIdx = #MapLevelIdx + 1
  end-while

  let $AcctCd = $ErnAcctCd

  if rtrim($AcctCd,' ') = ''
      let $DispEmplRcd = #Empl_Rcd
      let $ErrMsg = 'Earning ChartField not found for - Company ' || $Company || ' Business Unit ' ||
                    $Business_Unit || ' Pay End Date ' || $PayEndDt || ' Dept ' || $DeptID|| ' JobCode ' ||
                    $JobCode || ' Position Nbr ' || $PositionNbr || ' EmplID ' || $EmplID  || ' Empl Rcd ' ||
                    $DispEmplRcd || ' Earn Code ' ||  $ErnCd
      display $ErrMsg

      do Check-Error-Limit
  end-if

end-procedure

!******************************
begin-procedure Get-ChartFields
!******************************
  evaluate $ProcType
      when = 'D'
          do Get-Ded-ChartFields
          break
      when = 'T'
          do Get-Tax-ChartFields
          break
      when = 'X'
          do Get-Ctx-ChartFields
          break
  end-evaluate
end-procedure

!**********************************
begin-procedure Get-Ded-ChartFields
!**********************************

  let $DedAcctCd = ' '
  let #MapLevelIdx = 1

  while rtrim($DedAcctCd,' ') = '' and #MapLevelIdx <= 5

      let $DedMapLevel = substr($MapString, #MapLevelIdx, 1)
      do Define-Search-Values ($DedMapLevel)
      if $SkipLevel = 'N'
          do Find-DedLevel-AcctCd ($Company, $Business_Unit, $DedMapLevel, $PayEndDt, $Srch_DeptID,
                                   $Srch_JobCode, $Srch_Position_Nbr, $Srch_EmplID, #Srch_Empl_Rcd,
                                   $PlanType, $DedClass, $DedCd, $DedSlstxClass, $DedAcctCd)

          if rtrim($DedAcctCd,' ') = ''
              do Find-DedDefLevel-AcctCd ($Company, $Business_Unit, $DedMapLevel, $PayEndDt, $Srch_DeptID,
                                          $Srch_JobCode, $Srch_Position_Nbr, $Srch_EmplID, #Srch_Empl_Rcd,
                                          $DefDedGroupName, $DedAcctCd)
          end-if
      end-if

      let #MapLevelIdx = #MapLevelIdx + 1
  end-while

  let $AcctCd = $DedAcctCd

  if rtrim($AcctCd,' ') = ''
      let $DispEmplRcd = #Empl_Rcd
      let $ErrMsg = 'Deduction ChartField not found for - Company ' || $Company || ' Business Unit ' ||
                    $Business_Unit || ' Pay End Date ' || $PayEndDt || ' Dept ' || $DeptID|| ' JobCode ' ||
                    $JobCode || ' Position Nbr ' || $PositionNbr || ' EmplID ' || $EmplID  || ' Empl Rcd ' ||
                    $DispEmplRcd || ' Plan Type ' ||  $PlanType || ' Ded Code ' || $DedCd ||
                    ' Ded Class ' || $DedClass || ' Ded SlsTxClass ' || $DedSlstxClass
      display $ErrMsg

      do Check-Error-Limit
  end-if
end-procedure

!**********************************
begin-procedure Get-Tax-ChartFields
!**********************************

  let $TaxAcctCd = ' '
  let $ProcState = rtrim($State,' ')
  let #MapLevelIdx = 1

  while rtrim($TaxAcctCd,' ') = '' and #MapLevelIdx <= 5

      let $TaxMapLevel = substr($MapString, #MapLevelIdx, 1)

      do Define-Search-Values ($TaxMapLevel)
      if $SkipLevel = 'N'
          do Find-TaxLevel-AcctCd ($Company, $Business_Unit, $TaxMapLevel, $PayEndDt, $Srch_DeptID,
                                   $Srch_JobCode, $Srch_Position_Nbr, $Srch_EmplID, #Srch_Empl_Rcd,
                                   $ProcState, $Locality, $ProcTaxClass, $TaxAcctCd)

          if rtrim($TaxAcctCd,' ') = ''
              do Find-TaxDefLevel-AcctCd ($Company, $Business_Unit, $TaxMapLevel, $PayEndDt, $Srch_DeptID,
                                          $Srch_JobCode, $Srch_Position_Nbr, $Srch_EmplID, #Srch_Empl_Rcd,
                                          $DefTaxGroupName, $TaxAcctCd)
          end-if
      end-if

      let #MapLevelIdx = #MapLevelIdx + 1
  end-while

  let $AcctCd = $TaxAcctCd

  if rtrim($AcctCd,' ') = ''
      let $DispEmplRcd = #Empl_Rcd
      let $ErrMsg = 'Tax ChartField not found for - Company ' || $Company || ' Business Unit ' ||
                    $Business_Unit || ' Pay End Date ' || $PayEndDt || ' Dept ' || $DeptID|| ' JobCode ' ||
                    $JobCode || ' Position Nbr ' || $PositionNbr || ' EmplID ' || $EmplID  || ' Empl Rcd ' ||
                    $DispEmplRcd || ' State ' ||  $ProcState || ' Locality ' || $Locality ||
                    ' Tax Class ' || $ProcTaxClass
      display $ErrMsg

      do Check-Error-Limit
  end-if
end-procedure

!**********************************
begin-procedure Get-Ctx-ChartFields
!**********************************

  let $CtxAcctCd = ' '
  let #MapLevelIdx = 1

  while rtrim($CtxAcctCd,' ') = '' and #MapLevelIdx <= 5

      let $CtxMapLevel = substr($MapString, #MapLevelIdx, 1)
      do Define-Search-Values ($CtxMapLevel)
      if $SkipLevel = 'N'
          do Find-CtxLevel-AcctCd ($Company, $Business_Unit, $CtxMapLevel, $PayEndDt, $Srch_DeptID,
                                   $Srch_JobCode, $Srch_Position_Nbr, $Srch_EmplID, #Srch_Empl_Rcd,
                                   $Province, $WageLossPlan, $ProcTaxClassCan, $CtxAcctCd)

          if rtrim($CtxAcctCd,' ') = ''
              do Find-CtxDefLevel-AcctCd ($Company, $Business_Unit, $CtxMapLevel, $PayEndDt, $Srch_DeptID,
                                          $Srch_JobCode, $Srch_Position_Nbr, $Srch_EmplID, #Srch_Empl_Rcd,
                                          $DefTaxGroupName, $CtxAcctCd)
          end-if
      end-if

      let #MapLevelIdx = #MapLevelIdx + 1
  end-while

  let $AcctCd = $CtxAcctCd
  if rtrim($AcctCd,' ') = ''
      let $DispEmplRcd = #Empl_Rcd
      let $ErrMsg = 'Tax ChartField not found for - Company ' || $Company || ' Business Unit ' ||
                    $Business_Unit || ' Pay End Date ' || $PayEndDt || ' Dept ' || $DeptID|| ' JobCode ' ||
                    $JobCode || ' Position Nbr ' || $PositionNbr || ' EmplID ' || $EmplID  || ' Empl Rcd ' ||
                    $DispEmplRcd || ' Province ' ||  $Province || ' Wage Loss Plan ' || $WageLossPlan ||
                    ' Tax Class ' || $ProcTaxClassCan
      display $ErrMsg

      do Check-Error-Limit
  end-if
end-procedure

!***********************************************
begin-procedure Define-Search-Values ($MapLevel)
!***********************************************

  let $_Srch_DeptID       = ' '
  let $_Srch_JobCode      = ' '
  let $_Srch_Position_Nbr = ' '
  let $_Srch_EmplID       = ' '
  let #_Srch_Empl_Rcd     = 0
  let $_SkipLevel         = 'N'

  evaluate $MapLevel
      when = 'A'
          let $_Srch_EmplID       = $_EmplID
          let #_Srch_Empl_Rcd     = #_Empl_Rcd
          if rtrim($_EmplID,' ') = '' and #_Empl_Rcd  = 0
              let $_SkipLevel = 'Y'
          end-if
          break
      when = 'J'
          let $_Srch_JobCode      = $_JobCode
          if rtrim($_JobCode,' ') = ''
              let $_SkipLevel = 'Y'
          end-if
          break
      when = 'P'
          let $_Srch_Position_Nbr = $_PositionNbr
          if rtrim($_PositionNbr,' ') = ''
              let $_SkipLevel = 'Y'
          end-if
          break
      when = 'D'
          let $_Srch_DeptID       = $_DeptID
          break
      when = 'C'
          break
  end-evaluate
end-procedure

!************************************
begin-procedure Get-Default-GroupName
!************************************

  let $DefErnGroupName = ' '
  let $DefDedGroupName = ' '
  let $DefTaxGroupName = ' '

begin-select on-error=SQL-error
ERNGRP.PYGL_GROUPNAME

  let $DefErnGroupName = &ERNGRP.PYGL_GROUPNAME

FROM PS_PYGL_ACTIVITYGP ERNGRP
   , PS_PYGL_ACTIVERNDT ERNDT
WHERE ERNGRP.COMPANY        = $Company
AND   ERNGRP.PYGL_EARN_GRP  = 'Y'
AND   ERNGRP.COMPANY        = ERNDT.COMPANY
AND   ERNGRP.PYGL_GROUPNAME = ERNDT.PYGL_GROUPNAME
AND   ERNDT.PYGL_ALLCODES   = 'Y'
AND   ERNDT.EFFDT = (SELECT MAX(ERNDT1.EFFDT) FROM PS_PYGL_ACTIVERNDT ERNDT1
                     WHERE ERNDT1.COMPANY        = ERNDT.COMPANY
                     AND   ERNDT1.PYGL_GROUPNAME = ERNDT.PYGL_GROUPNAME
                     AND   ERNDT1.EFFDT         <= $PayEndDt)
end-select

begin-select on-error=SQL-error
DEDGRP.PYGL_GROUPNAME

  let $DefDedGroupName = &DEDGRP.PYGL_GROUPNAME

FROM PS_PYGL_ACTIVITYGP DEDGRP
   , PS_PYGL_ACTIVDEDDT DEDDT
WHERE DEDGRP.COMPANY         = $Company
AND   DEDGRP.PYGL_DEDUCT_GRP = 'Y'
AND   DEDGRP.COMPANY         = DEDDT.COMPANY
AND   DEDGRP.PYGL_GROUPNAME  = DEDDT.PYGL_GROUPNAME
AND   DEDDT.PYGL_ALLCODES    = 'Y'
AND   DEDDT.EFFDT = (SELECT MAX(DEDDT1.EFFDT) FROM PS_PYGL_ACTIVDEDDT DEDDT1
                     WHERE DEDDT1.COMPANY        = DEDDT.COMPANY
                     AND   DEDDT1.PYGL_GROUPNAME = DEDDT.PYGL_GROUPNAME
                     AND   DEDDT1.EFFDT         <= $PayEndDt)
end-select


begin-select on-error=SQL-error
TAXGRP.PYGL_GROUPNAME

  let $DefTaxGroupName = &TAXGRP.PYGL_GROUPNAME

FROM PS_PYGL_ACTIVITYGP TAXGRP
   , PS_PYGL_ACTIVTAXDT TAXDT
WHERE TAXGRP.COMPANY        = $Company
AND   TAXGRP.PYGL_TAX_GRP   = 'Y'
AND   TAXGRP.COMPANY        = TAXDT.COMPANY
AND   TAXGRP.PYGL_GROUPNAME = TAXDT.PYGL_GROUPNAME
AND   TAXDT.PYGL_ALLCODES   = 'Y'
AND   TAXDT.EFFDT = (SELECT MAX(TAXDT1.EFFDT) FROM PS_PYGL_ACTIVTAXDT TAXDT1
                     WHERE TAXDT1.COMPANY        = TAXDT.COMPANY
                     AND   TAXDT1.PYGL_GROUPNAME = TAXDT.PYGL_GROUPNAME
                     AND   TAXDT1.EFFDT         <= $PayEndDt)
end-select

end-procedure

!**********************************************************************************************************
begin-procedure Find-ErnLevel-AcctCd ($Company, $Business_Unit, $LevelInd, $PayEndDt, $DeptID, $JobCode,
                                      $Position_Nbr, $EmplID, #Empl_Rcd, $ErnCd, :$AcctCd)
!**********************************************************************************************************

begin-select on-error=SQL-error
ERNLVL.ACCT_CD

  let $AcctCd = &ERNLVL.ACCT_CD

FROM PS_PYGL_CF_ERN_VW ERNLVL
WHERE ERNLVL.COMPANY            = $Company
AND   ERNLVL.BUSINESS_UNIT      = $Business_Unit
AND   ERNLVL.COMPANY_LEVEL_INDC = $LevelInd
AND   ERNLVL.DEPTID             = $DeptID
AND   ERNLVL.JOBCODE            = $JobCode
AND   ERNLVL.POSITION_NBR       = $Position_Nbr
AND   ERNLVL.EMPLID             = $EmplID
AND   ERNLVL.EMPL_RCD           = #Empl_Rcd
AND   ERNLVL.ERNCD              = $ErnCd
AND   ERNLVL.EFFDT = (SELECT MAX(ERNLVL1.EFFDT) FROM PS_PYGL_CF_ERN_VW ERNLVL1
                      WHERE ERNLVL1.COMPANY            = ERNLVL.COMPANY
                      AND   ERNLVL1.BUSINESS_UNIT      = ERNLVL.BUSINESS_UNIT
                      AND   ERNLVL1.COMPANY_LEVEL_INDC = ERNLVL.COMPANY_LEVEL_INDC
                      AND   ERNLVL1.DEPTID             = ERNLVL.DEPTID
                      AND   ERNLVL1.JOBCODE            = ERNLVL.JOBCODE
                      AND   ERNLVL1.POSITION_NBR       = ERNLVL.POSITION_NBR
                      AND   ERNLVL1.EMPLID             = ERNLVL.EMPLID
                      AND   ERNLVL1.EMPL_RCD           = ERNLVL.EMPL_RCD
                      AND   ERNLVL1.EFFDT             <= $PayEndDt)
AND   ERNLVL.EFFDT_GL_MAP = (SELECT MAX(ERNLVL2.EFFDT_GL_MAP) FROM PS_PYGL_CF_ERN_VW ERNLVL2
                             WHERE ERNLVL2.COMPANY            = ERNLVL.COMPANY
                             AND   ERNLVL2.PYGL_GROUPNAME     = ERNLVL.PYGL_GROUPNAME
                             AND   ERNLVL2.EFFDT_GL_MAP      <= $PayEndDt)
AND   ERNLVL.EFF_STATUS = 'A'
end-select

end-procedure

!************************************************************************************************************
begin-procedure Find-ErnDefLevel-AcctCd ($Company, $Business_Unit, $LevelInd, $PayEndDt, $DeptID, $JobCode,
                                         $Position_Nbr, $EmplID, #Empl_Rcd, $GroupName, :$AcctCd)
!************************************************************************************************************

begin-select on-error=SQL-error
ERNDEFLVL.ACCT_CD

  let $AcctCd = &ERNDEFLVL.ACCT_CD

FROM PS_PYGL_CF_CPNYLEV ERNCPLEV
   , PS_PYGL_CF_CPNYERN ERNDEFLVL
WHERE ERNCPLEV.COMPANY            = $Company
AND   ERNCPLEV.BUSINESS_UNIT      = $Business_Unit
AND   ERNCPLEV.COMPANY_LEVEL_INDC = $LevelInd
AND   ERNCPLEV.DEPTID             = $DeptID
AND   ERNCPLEV.JOBCODE            = $JobCode
AND   ERNCPLEV.POSITION_NBR       = $Position_Nbr
AND   ERNCPLEV.EMPLID             = $EmplID
AND   ERNCPLEV.EMPL_RCD           = #Empl_Rcd
AND   ERNCPLEV.EFFDT = (SELECT MAX(ERNCPLEV1.EFFDT) FROM PS_PYGL_CF_CPNYLEV ERNCPLEV1
                        WHERE ERNCPLEV1.COMPANY            = ERNCPLEV.COMPANY
                        AND   ERNCPLEV1.BUSINESS_UNIT      = ERNCPLEV.BUSINESS_UNIT
                        AND   ERNCPLEV1.DEPTID             = ERNCPLEV.DEPTID
                        AND   ERNCPLEV1.JOBCODE            = ERNCPLEV.JOBCODE
                        AND   ERNCPLEV1.POSITION_NBR       = ERNCPLEV.POSITION_NBR
                        AND   ERNCPLEV1.EMPLID             = ERNCPLEV.EMPLID
                        AND   ERNCPLEV1.EMPL_RCD           = ERNCPLEV.EMPL_RCD
                        AND   ERNCPLEV1.EFFDT             <= $PayEndDt)
AND   ERNCPLEV.EFF_STATUS = 'A'
AND   ERNDEFLVL.COMPANY           = ERNCPLEV.COMPANY
AND   ERNDEFLVL.BUSINESS_UNIT     = ERNCPLEV.BUSINESS_UNIT
AND   ERNDEFLVL.DEPTID            = ERNCPLEV.DEPTID
AND   ERNDEFLVL.JOBCODE           = ERNCPLEV.JOBCODE
AND   ERNDEFLVL.POSITION_NBR      = ERNCPLEV.POSITION_NBR
AND   ERNDEFLVL.EMPLID            = ERNCPLEV.EMPLID
AND   ERNDEFLVL.EMPL_RCD          = ERNCPLEV.EMPL_RCD
AND   ERNDEFLVL.EFFDT             = ERNCPLEV.EFFDT
AND   ERNDEFLVL.PYGL_GROUPNAME    = $GroupName
end-select

end-procedure

!**********************************************************************************************************
begin-procedure Find-DedLevel-AcctCd ($Company, $Business_Unit, $LevelInd, $PayEndDt, $DeptID, $JobCode,
                                      $Position_Nbr, $EmplID, #Empl_Rcd, $PlanType, $DedClass, $DedCd,
                                      $DedSlstxClass, :$AcctCd)
!**********************************************************************************************************

begin-select on-error=SQL-error
DEDLVL.ACCT_CD

  let $AcctCd = &DEDLVL.ACCT_CD

FROM PS_PYGL_CF_DED_VW DEDLVL
WHERE DEDLVL.COMPANY            = $Company
AND   DEDLVL.BUSINESS_UNIT      = $Business_Unit
AND   DEDLVL.COMPANY_LEVEL_INDC = $LevelInd
AND   DEDLVL.DEPTID             = $DeptID
AND   DEDLVL.JOBCODE            = $JobCode
AND   DEDLVL.POSITION_NBR       = $Position_Nbr
AND   DEDLVL.EMPLID             = $EmplID
AND   DEDLVL.EMPL_RCD           = #Empl_Rcd
AND   DEDLVL.PLAN_TYPE          = $PlanType
AND   DEDLVL.DED_CLASS          = $DedClass
AND   DEDLVL.DEDCD              = $DedCd
AND   DEDLVL.DED_SLSTX_CLASS    = $DedSlstxClass
AND   DEDLVL.EFFDT = (SELECT MAX(DEDLVL1.EFFDT) FROM PS_PYGL_CF_DED_VW DEDLVL1
                      WHERE DEDLVL1.COMPANY            = DEDLVL.COMPANY
                      AND   DEDLVL1.BUSINESS_UNIT      = DEDLVL.BUSINESS_UNIT
                      AND   DEDLVL1.COMPANY_LEVEL_INDC = DEDLVL.COMPANY_LEVEL_INDC
                      AND   DEDLVL1.DEPTID             = DEDLVL.DEPTID
                      AND   DEDLVL1.JOBCODE            = DEDLVL.JOBCODE
                      AND   DEDLVL1.POSITION_NBR       = DEDLVL.POSITION_NBR
                      AND   DEDLVL1.EMPLID             = DEDLVL.EMPLID
                      AND   DEDLVL1.EMPL_RCD           = DEDLVL.EMPL_RCD
                      AND   DEDLVL1.EFFDT             <= $PayEndDt)
AND   DEDLVL.EFFDT_GL_MAP = (SELECT MAX(DEDLVL2.EFFDT_GL_MAP) FROM PS_PYGL_CF_DED_VW DEDLVL2
                             WHERE DEDLVL2.COMPANY            = DEDLVL.COMPANY
                             AND   DEDLVL2.PYGL_GROUPNAME     = DEDLVL.PYGL_GROUPNAME
                             AND   DEDLVL2.EFFDT_GL_MAP      <= $PayEndDt)
AND   DEDLVL.EFF_STATUS = 'A'
end-select

end-procedure

!************************************************************************************************************
begin-procedure Find-DedDefLevel-AcctCd ($Company, $Business_Unit, $LevelInd, $PayEndDt, $DeptID, $JobCode,
                                         $Position_Nbr, $EmplID, #Empl_Rcd, $GroupName, :$AcctCd)
!************************************************************************************************************

begin-select on-error=SQL-error
DEDDEFLVL.ACCT_CD

  let $AcctCd = &DEDDEFLVL.ACCT_CD

FROM PS_PYGL_CF_CPNYLEV DEDCPLEV
   , PS_PYGL_CF_CPNYDED DEDDEFLVL
WHERE DEDCPLEV.COMPANY            = $Company
AND   DEDCPLEV.BUSINESS_UNIT      = $Business_Unit
AND   DEDCPLEV.COMPANY_LEVEL_INDC = $LevelInd
AND   DEDCPLEV.DEPTID             = $DeptID
AND   DEDCPLEV.JOBCODE            = $JobCode
AND   DEDCPLEV.POSITION_NBR       = $Position_Nbr
AND   DEDCPLEV.EMPLID             = $EmplID
AND   DEDCPLEV.EMPL_RCD           = #Empl_Rcd
AND   DEDCPLEV.EFFDT = (SELECT MAX(DEDCPLEV1.EFFDT) FROM PS_PYGL_CF_CPNYLEV DEDCPLEV1
                        WHERE DEDCPLEV1.COMPANY            = DEDCPLEV.COMPANY
                        AND   DEDCPLEV1.BUSINESS_UNIT      = DEDCPLEV.BUSINESS_UNIT
                        AND   DEDCPLEV1.DEPTID             = DEDCPLEV.DEPTID
                        AND   DEDCPLEV1.JOBCODE            = DEDCPLEV.JOBCODE
                        AND   DEDCPLEV1.POSITION_NBR       = DEDCPLEV.POSITION_NBR
                        AND   DEDCPLEV1.EMPLID             = DEDCPLEV.EMPLID
                        AND   DEDCPLEV1.EMPL_RCD           = DEDCPLEV.EMPL_RCD
                        AND   DEDCPLEV1.EFFDT             <= $PayEndDt)
AND   DEDCPLEV.EFF_STATUS = 'A'
AND   DEDDEFLVL.COMPANY           = DEDCPLEV.COMPANY
AND   DEDDEFLVL.BUSINESS_UNIT     = DEDCPLEV.BUSINESS_UNIT
AND   DEDDEFLVL.DEPTID            = DEDCPLEV.DEPTID
AND   DEDDEFLVL.JOBCODE           = DEDCPLEV.JOBCODE
AND   DEDDEFLVL.POSITION_NBR      = DEDCPLEV.POSITION_NBR
AND   DEDDEFLVL.EMPLID            = DEDCPLEV.EMPLID
AND   DEDDEFLVL.EMPL_RCD          = DEDCPLEV.EMPL_RCD
AND   DEDDEFLVL.EFFDT             = DEDCPLEV.EFFDT
AND   DEDDEFLVL.PYGL_GROUPNAME    = $GroupName
end-select

end-procedure

!**********************************************************************************************************
begin-procedure Find-TaxLevel-AcctCd ($Company, $Business_Unit, $LevelInd, $PayEndDt, $DeptID, $JobCode,
                                      $Position_Nbr, $EmplID, #Empl_Rcd, $State, $Locality, $TaxClass,
                                      :$AcctCd)
!**********************************************************************************************************

  if $State = '$U'
      let $StateWhere = 'AND TAXLVL.STATE IN (''' || $_FedState || '''' || ', ''' || $_DefState || '''' || ')'
  else
      let $StateWhere = 'AND TAXLVL.STATE = ''' || $_State || ''''
  end-if

begin-select on-error=SQL-error
TAXLVL.ACCT_CD

  let $AcctCd = &TAXLVL.ACCT_CD

FROM PS_PYGL_CF_TAX_VW TAXLVL
WHERE TAXLVL.COMPANY            = $Company
AND   TAXLVL.BUSINESS_UNIT      = $Business_Unit
AND   TAXLVL.COMPANY_LEVEL_INDC = $LevelInd
AND   TAXLVL.DEPTID             = $DeptID
AND   TAXLVL.JOBCODE            = $JobCode
AND   TAXLVL.POSITION_NBR       = $Position_Nbr
AND   TAXLVL.EMPLID             = $EmplID
AND   TAXLVL.EMPL_RCD           = #Empl_Rcd
[$StateWhere]
AND   TAXLVL.LOCALITY           = $Locality
AND   TAXLVL.PYGL_TAX_CLASS     = $TaxClass
AND   TAXLVL.EFFDT = (SELECT MAX(TAXLVL1.EFFDT) FROM PS_PYGL_CF_TAX_VW TAXLVL1
                      WHERE TAXLVL1.COMPANY            = TAXLVL.COMPANY
                      AND   TAXLVL1.BUSINESS_UNIT      = TAXLVL.BUSINESS_UNIT
                      AND   TAXLVL1.COMPANY_LEVEL_INDC = TAXLVL.COMPANY_LEVEL_INDC
                      AND   TAXLVL1.DEPTID             = TAXLVL.DEPTID
                      AND   TAXLVL1.JOBCODE            = TAXLVL.JOBCODE
                      AND   TAXLVL1.POSITION_NBR       = TAXLVL.POSITION_NBR
                      AND   TAXLVL1.EMPLID             = TAXLVL.EMPLID
                      AND   TAXLVL1.EMPL_RCD           = TAXLVL.EMPL_RCD
                      AND   TAXLVL1.EFFDT             <= $PayEndDt)
AND   TAXLVL.EFFDT_GL_MAP = (SELECT MAX(TAXLVL2.EFFDT_GL_MAP) FROM PS_PYGL_CF_TAX_VW TAXLVL2
                             WHERE TAXLVL2.COMPANY            = TAXLVL.COMPANY
                             AND   TAXLVL2.PYGL_GROUPNAME     = TAXLVL.PYGL_GROUPNAME
                             AND   TAXLVL2.EFFDT_GL_MAP      <= $PayEndDt)
AND   TAXLVL.EFF_STATUS = 'A'
end-select

end-procedure

!************************************************************************************************************
begin-procedure Find-TaxDefLevel-AcctCd ($Company, $Business_Unit, $LevelInd, $PayEndDt, $DeptID, $JobCode,
                                         $Position_Nbr, $EmplID, #Empl_Rcd, $GroupName, :$AcctCd)
!************************************************************************************************************

begin-select on-error=SQL-error
TAXDEFLVL.ACCT_CD

  let $AcctCd = &TAXDEFLVL.ACCT_CD

FROM PS_PYGL_CF_CPNYLEV TAXCPLEV
   , PS_PYGL_CF_CPNYTAX TAXDEFLVL
WHERE TAXCPLEV.COMPANY            = $Company
AND   TAXCPLEV.BUSINESS_UNIT      = $Business_Unit
AND   TAXCPLEV.COMPANY_LEVEL_INDC = $LevelInd
AND   TAXCPLEV.DEPTID             = $DeptID
AND   TAXCPLEV.JOBCODE            = $JobCode
AND   TAXCPLEV.POSITION_NBR       = $Position_Nbr
AND   TAXCPLEV.EMPLID             = $EmplID
AND   TAXCPLEV.EMPL_RCD           = #Empl_Rcd
AND   TAXCPLEV.EFFDT = (SELECT MAX(TAXCPLEV1.EFFDT) FROM PS_PYGL_CF_CPNYLEV TAXCPLEV1
                        WHERE TAXCPLEV1.COMPANY            = TAXCPLEV.COMPANY
                        AND   TAXCPLEV1.BUSINESS_UNIT      = TAXCPLEV.BUSINESS_UNIT
                        AND   TAXCPLEV1.DEPTID             = TAXCPLEV.DEPTID
                        AND   TAXCPLEV1.JOBCODE            = TAXCPLEV.JOBCODE
                        AND   TAXCPLEV1.POSITION_NBR       = TAXCPLEV.POSITION_NBR
                        AND   TAXCPLEV1.EMPLID             = TAXCPLEV.EMPLID
                        AND   TAXCPLEV1.EMPL_RCD           = TAXCPLEV.EMPL_RCD
                        AND   TAXCPLEV1.EFFDT             <= $PayEndDt)
AND   TAXCPLEV.EFF_STATUS = 'A'
AND   TAXDEFLVL.COMPANY           = TAXCPLEV.COMPANY
AND   TAXDEFLVL.BUSINESS_UNIT     = TAXCPLEV.BUSINESS_UNIT
AND   TAXDEFLVL.DEPTID            = TAXCPLEV.DEPTID
AND   TAXDEFLVL.JOBCODE           = TAXCPLEV.JOBCODE
AND   TAXDEFLVL.POSITION_NBR      = TAXCPLEV.POSITION_NBR
AND   TAXDEFLVL.EMPLID            = TAXCPLEV.EMPLID
AND   TAXDEFLVL.EMPL_RCD          = TAXCPLEV.EMPL_RCD
AND   TAXDEFLVL.EFFDT             = TAXCPLEV.EFFDT
AND   TAXDEFLVL.PYGL_GROUPNAME    = $GroupName
end-select

end-procedure

!**********************************************************************************************************
begin-procedure Find-CtxLevel-AcctCd ($Company, $Business_Unit, $LevelInd, $PayEndDt, $DeptID, $JobCode,
                                      $Position_Nbr, $EmplID, #Empl_Rcd, $Province, $WageLossPlan,$TaxClass,
                                      :$AcctCd)
!**********************************************************************************************************

begin-select on-error=SQL-error
CTXLVL.ACCT_CD

  let $AcctCd = &CTXLVL.ACCT_CD

FROM PS_PYGL_CF_CTX_VW CTXLVL
WHERE CTXLVL.COMPANY            = $Company
AND   CTXLVL.BUSINESS_UNIT      = $Business_Unit
AND   CTXLVL.COMPANY_LEVEL_INDC = $LevelInd
AND   CTXLVL.DEPTID             = $DeptID
AND   CTXLVL.JOBCODE            = $JobCode
AND   CTXLVL.POSITION_NBR       = $Position_Nbr
AND   CTXLVL.EMPLID             = $EmplID
AND   CTXLVL.EMPL_RCD           = #Empl_Rcd
AND   CTXLVL.WAGE_LOSS_PLAN     = $WageLossPlan
AND   CTXLVL.TAX_CLASS_CAN      = $TaxClass
AND   CTXLVL.EFFDT = (SELECT MAX(CTXLVL1.EFFDT) FROM PS_PYGL_CF_CTX_VW CTXLVL1
                      WHERE CTXLVL1.COMPANY            = CTXLVL.COMPANY
                      AND   CTXLVL1.BUSINESS_UNIT      = CTXLVL.BUSINESS_UNIT
                      AND   CTXLVL1.COMPANY_LEVEL_INDC = CTXLVL.COMPANY_LEVEL_INDC
                      AND   CTXLVL1.DEPTID             = CTXLVL.DEPTID
                      AND   CTXLVL1.JOBCODE            = CTXLVL.JOBCODE
                      AND   CTXLVL1.POSITION_NBR       = CTXLVL.POSITION_NBR
                      AND   CTXLVL1.EMPLID             = CTXLVL.EMPLID
                      AND   CTXLVL1.EMPL_RCD           = CTXLVL.EMPL_RCD
                      AND   CTXLVL1.EFFDT             <= $PayEndDt)
AND   CTXLVL.EFFDT_GL_MAP = (SELECT MAX(CTXLVL2.EFFDT_GL_MAP) FROM PS_PYGL_CF_CTX_VW CTXLVL2
                             WHERE CTXLVL2.COMPANY            = CTXLVL.COMPANY
                             AND   CTXLVL2.PYGL_GROUPNAME     = CTXLVL.PYGL_GROUPNAME
                             AND   CTXLVL2.EFFDT_GL_MAP      <= $PayEndDt)
AND   CTXLVL.EFF_STATUS = 'A'
end-select

end-procedure

!************************************************************************************************************
begin-procedure Find-CtxDefLevel-AcctCd ($Company, $Business_Unit, $LevelInd, $PayEndDt, $DeptID, $JobCode,
                                         $Position_Nbr, $EmplID, #Empl_Rcd, $GroupName, :$AcctCd)
!************************************************************************************************************

begin-select on-error=SQL-error
CTXDEFLVL.ACCT_CD

  let $AcctCd = &CTXDEFLVL.ACCT_CD

FROM PS_PYGL_CF_CPNYLEV CTXCPLEV
   , PS_PYGL_CF_CPNYCTX CTXDEFLVL
WHERE CTXCPLEV.COMPANY            = $Company
AND   CTXCPLEV.BUSINESS_UNIT      = $Business_Unit
AND   CTXCPLEV.COMPANY_LEVEL_INDC = $LevelInd
AND   CTXCPLEV.DEPTID             = $DeptID
AND   CTXCPLEV.JOBCODE            = $JobCode
AND   CTXCPLEV.POSITION_NBR       = $Position_Nbr
AND   CTXCPLEV.EMPLID             = $EmplID
AND   CTXCPLEV.EMPL_RCD           = #Empl_Rcd
AND   CTXCPLEV.EFFDT = (SELECT MAX(CTXCPLEV1.EFFDT) FROM PS_PYGL_CF_CPNYLEV CTXCPLEV1
                        WHERE CTXCPLEV1.COMPANY            = CTXCPLEV.COMPANY
                        AND   CTXCPLEV1.BUSINESS_UNIT      = CTXCPLEV.BUSINESS_UNIT
                        AND   CTXCPLEV1.DEPTID             = CTXCPLEV.DEPTID
                        AND   CTXCPLEV1.JOBCODE            = CTXCPLEV.JOBCODE
                        AND   CTXCPLEV1.POSITION_NBR       = CTXCPLEV.POSITION_NBR
                        AND   CTXCPLEV1.EMPLID             = CTXCPLEV.EMPLID
                        AND   CTXCPLEV1.EMPL_RCD           = CTXCPLEV.EMPL_RCD
                        AND   CTXCPLEV1.EFFDT             <= $PayEndDt)
AND   CTXCPLEV.EFF_STATUS = 'A'
AND   CTXDEFLVL.COMPANY           = CTXCPLEV.COMPANY
AND   CTXDEFLVL.BUSINESS_UNIT     = CTXCPLEV.BUSINESS_UNIT
AND   CTXDEFLVL.DEPTID            = CTXCPLEV.DEPTID
AND   CTXDEFLVL.JOBCODE           = CTXCPLEV.JOBCODE
AND   CTXDEFLVL.POSITION_NBR      = CTXCPLEV.POSITION_NBR
AND   CTXDEFLVL.EMPLID            = CTXCPLEV.EMPLID
AND   CTXDEFLVL.EMPL_RCD          = CTXCPLEV.EMPL_RCD
AND   CTXDEFLVL.EFFDT             = CTXCPLEV.EFFDT
AND   CTXDEFLVL.PYGL_GROUPNAME    = $GroupName
end-select

end-procedure

!************************************
begin-procedure Write-NA-Earnings-Rec
!************************************

  move #PageNum       to $PageNum      9999
  move #LineNum       to $LineNum      9999
  move #PrevAddlNbr   to $AddlNbr      9999
  move #SepChk        to $SepChk       99
  move #PrevEmplRcd   to $EmplRcd      999
  move #PrevExLineNbr to $ExLineNo     99999
  move #PrevEarnings  to $Earnings 99999999999.99mi

  let $err-statement1 = 'PAYGL01, Insert Error - Write-NA-Earnings-Rec'
  let $err-statement2 = 'Key Values: TABLE: PS_PAY_NA_EARNINGS'   ||
                        ', COMPANY:'           ||$Company         ||
                        ', PAYGROUP:'          ||$PayGroup        ||
                        ', PAY_END_DT:'        ||$PayEndDt        ||
                        ', OFF_CYCLE:'         ||$OffCycle        ||
                        ', PAGE_NUM:'          ||$PageNum         ||
                        ', LINE_NUM:'          ||$LineNum         ||
                        ', ADDL_NBR:'          ||$AddlNbr         ||
                        ', SEPCHK:'            ||$SepChk          ||
                        ', EMPLID:'            ||$PrevEmplID      ||
                        ', EMPL_RCD:'          ||$EmplRcd         ||
                        ', ERNCD:'             ||$PrevErnCd       ||
                        ', EARNINGS:'          ||$Earnings        ||
                        ', BUSINESS_UNIT:'     ||$PrevBusUnit     ||
                        ', DEPTID:'            ||$PrevDeptID      ||
                        ', POSITION_NBR:'      ||$PrevPosnNbr     ||
                        ', JOBCODE:'           ||$PrevJobCode     ||
                        ', EX_DOC_ID:'         ||$PrevExDocID     ||
                        ', EX_DOC_TYPE:'       ||$PrevExDocType   ||
                        ', EX_LINE_NBR:'       ||$ExLineNo

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_PAY_NA_EARNINGS (COMPANY,
                                PAYGROUP,
                                PAY_END_DT,
                                OFF_CYCLE,
                                PAGE_NUM,
                                LINE_NUM,
                                ADDL_NBR,
                                SEPCHK,
                                EMPLID,
                                EMPL_RCD,
                                ERNCD,
                                EARNINGS,
                                BUSINESS_UNIT,
                                DEPTID,
                                POSITION_NBR,
                                JOBCODE,
                                EX_DOC_ID,
                                EX_DOC_TYPE,
                                EX_LINE_NBR)
                       VALUES  ($Company,
                                $PayGroup,
                                $PayEndDt,
                                $OffCycle,
                                #PageNum,
                                #LineNum,
                                #PrevAddlNbr,
                                #SepChk,
                                $PrevEmplID,
                                #PrevEmplRcd,
                                $PrevErnCd,
                                #PrevEarnings,
                                $PrevBusUnit,
                                $PrevDeptID,
                                $PrevPosnNbr,
                                $PrevJobCode,
                                $PrevExDocID,
                                $PrevExDocType,
                                #PrevExLineNbr)
end-SQL

end-procedure

!*************************************
begin-procedure Update-NA-Earnings-Rec
!*************************************

  move #PageNum       to $PageNum      9999
  move #LineNum       to $LineNum      9999
  move #PrevAddlNbr   to $AddlNbr      9999
  move #SepChk        to $SepChk       99
  move #PrevEmplRcd   to $EmplRcd      999
  move #PrevEarnings  to $Earnings 99999999999.99mi

  let $err-statement1 = 'PAYGL01, Update Error - Update-NA-Earnings-Rec'
  let $err-statement2 = 'Key Values: TABLE: PS_PAY_NA_EARNINGS'   ||
                        ', COMPANY:'           ||$Company         ||
                        ', PAYGROUP:'          ||$PayGroup        ||
                        ', PAY_END_DT:'        ||$PayEndDt        ||
                        ', OFF_CYCLE:'         ||$OffCycle        ||
                        ', PAGE_NUM:'          ||$PageNum         ||
                        ', LINE_NUM:'          ||$LineNum         ||
                        ', ADDL_NBR:'          ||$AddlNbr         ||
                        ', SEPCHK:'            ||$SepChk          ||
                        ', EMPLID:'            ||$PrevEmplID      ||
                        ', EMPL_RCD:'          ||$EmplRcd         ||
                        ', ERNCD:'             ||$PrevErnCd       ||
                        ', EARNINGS:'          ||$Earnings

begin-SQL on-error=SQL-Statement-Error
UPDATE PS_PAY_NA_EARNINGS SET EARNINGS = EARNINGS + #PrevEarnings
WHERE COMPANY    = $Company
  AND PAYGROUP   = $PayGroup
  AND PAY_END_DT = $PayEndDt
  AND OFF_CYCLE  = $OffCycle
  AND PAGE_NUM   = #PageNum
  AND LINE_NUM   = #LineNum
  AND ADDL_NBR   = #PrevAddlNbr
  AND SEPCHK     = #SepChk
  AND EMPLID     = $PrevEmplID
  AND EMPL_RCD   = #PrevEmplRcd
  AND ERNCD      = $PrevErnCd
end-SQL
end-procedure

!************************************
begin-procedure Write-NA-Ern-Dist-Rec
!************************************

  move #PageNum       to $PageNum      9999
  move #LineNum       to $LineNum      9999
  move #EDst_AddlNbr  to $AddlNbr      9999
  move #SepChk        to $SepChk       99
  move #EDst_EmplRcd  to $EmplRcd      999
  move #EDst_Earnings to $Earnings     99999999999.99mi
  move #EDst_AccrAmt  to $AccrualAmt   99999999999.99mi

  let $err-statement1 = 'PAYGL01, Insert Error - Write-NA-Ern-Dist-Rec'
  let $err-statement2 = 'Key Values: TABLE: PS_PAY_NA_ERN_DIST'   ||
                        ', COMPANY:'           ||$Company         ||
                        ', PAYGROUP:'          ||$PayGroup        ||
                        ', PAY_END_DT:'        ||$PayEndDt        ||
                        ', OFF_CYCLE:'         ||$OffCycle        ||
                        ', PAGE_NUM:'          ||$PageNum         ||
                        ', LINE_NUM:'          ||$LineNum         ||
                        ', ADDL_NBR:'          ||$AddlNbr         ||
                        ', SEPCHK:'            ||$SepChk          ||
                        ', EMPLID:'            ||$EDst_EmplID     ||
                        ', EMPL_RCD:'          ||$EmplRcd         ||
                        ', ERNCD:'             ||$EDst_ErnCd      ||
                        ', ACCT_CD:'           ||$EDst_AcctCd     ||
                        ', EARNINGS:'          ||$Earnings        ||
                        ', PY_ACCRUAL_AMT:'    ||$AccrualAmt

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_PAY_NA_ERN_DIST (COMPANY,
                                PAYGROUP,
                                PAY_END_DT,
                                OFF_CYCLE,
                                PAGE_NUM,
                                LINE_NUM,
                                ADDL_NBR,
                                SEPCHK,
                                EMPLID,
                                EMPL_RCD,
                                ERNCD,
                                ACCT_CD,
                                EARNINGS,
                                PY_ACCRUAL_AMT)
                       VALUES  ($Company,
                                $PayGroup,
                                $PayEndDt,
                                $OffCycle,
                                #PageNum,
                                #LineNum,
                                #EDst_AddlNbr,
                                #SepChk,
                                $EDst_EmplID,
                                #EDst_EmplRcd,
                                $EDst_ErnCd,
                                $EDst_AcctCd,
                                #EDst_Earnings,
                                #EDst_AccrAmt)
end-SQL

end-procedure

!********************************************************
begin-procedure Write-NA-Dist-Rec ($LiabExpInd, $Account)
!********************************************************
  evaluate $LiabExpInd
      when = 'L'
      when = 'R'
          if rtrim($Account,' ') = ''
              let $_ErrReason    = '  **Error** Offset Liability account is blank ' || $_LiabAcctDetail

              do Format-Display-ErrMsg
          end-if
          break
      when-other
          break
  end-evaluate

  if $_ContinueProcess = 'Y'
      evaluate $_ProcType
          when = 'D'
              do Write-NA-Ded-Dist-Rec ($LiabExpInd, $Account)
              if $_AP_Processed = ' ' and $LiabExpInd <> 'E'
                  do Write-NA-Ded-Liab-Rec ($LiabExpInd, $Account, 'N')
              end-if
              break
          when = 'T'
              do Write-NA-Tax-Dist-Rec ($LiabExpInd, $Account)
              if $_AP_Processed = ' ' and $LiabExpInd <> 'E'
                  do Write-NA-Tax-Liab-Rec ($LiabExpInd, $Account, 'N')
              end-if
              break
          when = 'X'
              do Write-NA-Ctx-Dist-Rec ($LiabExpInd, $Account)
              if $_AP_Processed = ' '  and $LiabExpInd <> 'E'
                  do Write-NA-Ctx-Liab-Rec ($LiabExpInd, $Account, 'N')
              end-if
              break
      end-evaluate
  end-if
end-procedure

!************************************************************
begin-procedure Write-NA-Ded-Dist-Rec ($LiabExpInd, $Account)
!************************************************************

  let #_DedSeqNo = #_DedSeqNo + 1

  move #_PageNum       to $PageNum      9999
  move #_LineNum       to $LineNum      9999
  move #_SepChk        to $SepChk       99
  move #_DedSeqNo      to $DedSeqNo     9999
  move #_EDst_AddlNbr  to $AddlNbr      9999
  move #_DistAmount    to $DistDedAmount 99999999999.99mi
  move #_DistAccrAmt   to $AccrualAmt   99999999999.99mi
  move #_BenefitRcdNo  to $BenefitRcdNo 999
  move #_GarnPriority  to $GarnPriority 9999
  move #_BondLogSeq    to $BondLogSeq   9999

  let $_err-statement1 = 'PAYGL01, Insert Error - Write-NA-Ded-Dist-Rec'
  let $_err-statement2 = 'Key Values: TABLE: PS_PAY_NA_DED_DIST'   ||
                         ', COMPANY:'           ||$_Company        ||
                         ', PAYGROUP:'          ||$_PayGroup       ||
                         ', PAY_END_DT:'        ||$_PayEndDt       ||
                         ', OFF_CYCLE:'         ||$_OffCycle       ||
                         ', PAGE_NUM:'          ||$PageNum         ||
                         ', LINE_NUM:'          ||$LineNum         ||
                         ', SEPCHK:'            ||$SepChk          ||
                         ', BENEFIT_RCD_NBR:'   ||$BenefitRcdNo    ||
                         ', PLAN_TYPE:'         ||$_PlanType       ||
                         ', BENEFIT_PLAN:'      ||$_BenefitPlan    ||
                         ', DEDCD:'             ||$_DedCd          ||
                         ', DED_CLASS:'         ||$_DedClass       ||
                         ', DED_SLSTX_CLASS:'   ||$_DedSlstxClass  ||
                         ', PY_LIABEXPFLG:'     ||$LiabExpInd      ||
                         ', ACCT_CD:'           ||$_AcctCd         ||
                         ', SEQNO:'             ||$DedSeqNo        ||
                         ', ADDL_NBR:'          ||$AddlNbr         ||
                         ', ERNCD:'             ||$_EDst_ErnCd     ||
                         ', ACCOUNT:'           ||$Account         ||
                         ', DED_CUR:'           ||$DistDedAmount   ||
                         ', PY_ACCRUAL_AMT:'    ||$AccrualAmt      ||
                         ', GARN_PRIORITY:'     ||$GarnPriority    ||
                         ', GARNID:'            ||$_GarnID         ||
                         ', BOND_ID:'           ||$_BondID         ||
                         ', BOND_OWNER_ID:'     ||$_BondOwnerID    ||
                         ', BOND_OTH_REG_TYPE:' ||$_BondOthRegType ||
                         ', BOND_OTH_REG_ID:'   ||$_BondOthRegID   ||
                         ', BOND_LOG_SEQ:'      ||$BondLogSeq

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_PAY_NA_DED_DIST (COMPANY,
                                PAYGROUP,
                                PAY_END_DT,
                                OFF_CYCLE,
                                PAGE_NUM,
                                LINE_NUM,
                                SEPCHK,
                                BENEFIT_RCD_NBR,
                                PLAN_TYPE,
                                BENEFIT_PLAN,
                                DEDCD,
                                DED_CLASS,
                                DED_SLSTX_CLASS,
                                PY_LIABEXPFLG,
                                ACCT_CD,
                                SEQNO,
                                ADDL_NBR,
                                ERNCD,
                                ACCOUNT,
                                DED_CUR,
                                PY_ACCRUAL_AMT,
                                GARN_PRIORITY,
                                GARNID,
                                BOND_ID,
                                BOND_OWNER_ID,
                                BOND_OTH_REG_TYPE,
                                BOND_OTH_REG_ID,
                                BOND_LOG_SEQ)
                       VALUES  ($_Company,
                                $_PayGroup,
                                $_PayEndDt,
                                $_OffCycle,
                                #_PageNum,
                                #_LineNum,
                                #_SepChk,
                                #_BenefitRcdNo,
                                $_PlanType,
                                $_BenefitPlan,
                                $_DedCd,
                                $_DedClass,
                                $_DedSlstxClass,
                                $LiabExpInd,
                                $_AcctCd,
                                #_DedSeqNo,
                                #_EDst_AddlNbr,
                                $_EDst_ErnCd,
                                $Account,
                                #_DistAmount,
                                #_DistAccrAmt,
                                #_GarnPriority,
                                $_GarnID,
                                $_BondID,
                                $_BondOwnerID,
                                $_BondOthRegType,
                                $_BondOthRegID,
                                #_BondLogSeq)
end-SQL
end-procedure

!************************************************************
begin-procedure Write-NA-Tax-Dist-Rec ($LiabExpInd, $Account)
!************************************************************

  let #_TaxSeqNo = #_TaxSeqNo + 1

  move #_PageNum       to $PageNum      9999
  move #_LineNum       to $LineNum      9999
  move #_SepChk        to $SepChk       99
  move #_EDst_AddlNbr  to $AddlNbr      9999
  move #_TaxSeqNo      to $TaxSeqNo     9999
  move #_DistAmount    to $DistTaxAmount 99999999999.99mi
  move #_DistAccrAmt   to $AccrualAmt    99999999999.99mi

  let $_err-statement1 = 'PAYGL01, Insert Error - Write-NA-Tax-Dist-Rec'
  let $_err-statement2 = 'Key Values: TABLE: PS_PAY_NA_TAX_DIST' ||
                         ', COMPANY:'         ||$_Company        ||
                         ', PAYGROUP:'        ||$_PayGroup       ||
                         ', PAY_END_DT:'      ||$_PayEndDt       ||
                         ', OFF_CYCLE:'       ||$_OffCycle       ||
                         ', PAGE_NUM:'        ||$PageNum         ||
                         ', LINE_NUM:'        ||$LineNum         ||
                         ', SEPCHK:'          ||$SepChk          ||
                         ', STATE:'           ||$_State          ||
                         ', LOCALITY:'        ||$_Locality       ||
                         ', TAX_CLASS:'       ||$_TaxClass       ||
                         ', PY_LIABEXPFLG:'   ||$LiabExpInd      ||
                         ', ACCT_CD:'         ||$_AcctCd         ||
                         ', SEQNO:'           ||$TaxSeqNo        ||
                         ', ADDL_NBR:'        ||$AddlNbr         ||
                         ', ERNCD:'           ||$_EDst_ErnCd     ||
                         ', ACCOUNT:'         ||$Account         ||
                         ', TAX_CUR:'         ||$DistTaxAmount   ||
                         ', PY_ACCRUAL_AMT:'  ||$AccrualAmt

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_PAY_NA_TAX_DIST (COMPANY,
                                PAYGROUP,
                                PAY_END_DT,
                                OFF_CYCLE,
                                PAGE_NUM,
                                LINE_NUM,
                                SEPCHK,
                                STATE,
                                LOCALITY,
                                TAX_CLASS,
                                PY_LIABEXPFLG,
                                ACCT_CD,
                                SEQNO,
                                ADDL_NBR,
                                ERNCD,
                                ACCOUNT,
                                TAX_CUR,
                                PY_ACCRUAL_AMT)
                       VALUES  ($_Company,
                                $_PayGroup,
                                $_PayEndDt,
                                $_OffCycle,
                                #_PageNum,
                                #_LineNum,
                                #_SepChk,
                                $_State,
                                $_Locality,
                                $_TaxClass,
                                $LiabExpInd,
                                $_AcctCd,
                                #_TaxSeqNo,
                                #_EDst_AddlNbr,
                                $_EDst_ErnCd,
                                $Account,
                                #_DistAmount,
                                #_DistAccrAmt)
end-SQL
end-procedure

!************************************************************
begin-procedure Write-NA-Ctx-Dist-Rec ($LiabExpInd, $Account)
!************************************************************

  let #_CtxSeqNo = #_CtxSeqNo + 1

  move #_PageNum       to $PageNum      9999
  move #_LineNum       to $LineNum      9999
  move #_SepChk        to $SepChk       99
  move #_EDst_AddlNbr  to $AddlNbr      9999
  move #_CtxSeqNo      to $CtxSeqNo     9999
  move #_DistAmount    to $DistTaxAmount 99999999999.99mi
  move #_DistAccrAmt   to $AccrualAmt    99999999999.99mi

  let $_err-statement1 = 'PAYGL01, Insert Error - Write-NA-Ctx-Dist-Rec'
  let $_err-statement2 = 'Key Values: TABLE: PS_PAY_NA_CTX_DIST'    ||
                         ', COMPANY:'          ||$_Company          ||
                         ', PAYGROUP:'         ||$_PayGroup         ||
                         ', PAY_END_DT:'       ||$_PayEndDt         ||
                         ', OFF_CYCLE:'        ||$_OffCycle         ||
                         ', PAGE_NUM:'         ||$PageNum           ||
                         ', LINE_NUM:'         ||$LineNum           ||
                         ', SEPCHK:'           ||$SepChk            ||
                         ', PROVINCE:'         ||$_Province         ||
                         ', TAX_CLASS_CAN:'    ||$_TaxClassCan      ||
                         ', PY_LIABEXPFLG:'    ||$LiabExpInd        ||
                         ', ACCT_CD:'          ||$_AcctCd           ||
                         ', SEQNO:'            ||$CtxSeqNo          ||
                         ', ADDL_NBR:'         ||$AddlNbr           ||
                         ', ERNCD:'            ||$_EDst_ErnCd       ||
                         ', ACCOUNT:'          ||$Account           ||
                         ', TAX_CUR:'          ||$DistTaxAmount     ||
                         ', PY_ACCRUAL_AMT:'   ||$AccrualAmt

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_PAY_NA_CTX_DIST (COMPANY,
                                PAYGROUP,
                                PAY_END_DT,
                                OFF_CYCLE,
                                PAGE_NUM,
                                LINE_NUM,
                                SEPCHK,
                                PROVINCE,
                                TAX_CLASS_CAN,
                                PY_LIABEXPFLG,
                                ACCT_CD,
                                SEQNO,
                                ADDL_NBR,
                                ERNCD,
                                ACCOUNT,
                                TAX_CUR,
                                PY_ACCRUAL_AMT)
                       VALUES  ($_Company,
                                $_PayGroup,
                                $_PayEndDt,
                                $_OffCycle,
                                #_PageNum,
                                #_LineNum,
                                #_SepChk,
                                $_Province,
                                $_TaxClassCan,
                                $LiabExpInd,
                                $_AcctCd,
                                #_CtxSeqNo,
                                #_EDst_AddlNbr,
                                $_EDst_ErnCd,
                                $Account,
                                #_DistAmount,
                                #_DistAccrAmt)
end-SQL
end-procedure

!***********************************************************************
begin-procedure Write-NA-Ded-Liab-Rec ($LiabExpInd, $Account, $RevEntry)
!***********************************************************************

  move #_PageNum       to $PageNum      9999
  move #_LineNum       to $LineNum      9999
  move #_SepChk        to $SepChk       99
  move #_EDst_AddlNbr  to $AddlNbr      9999
  move #_DedSeqNo      to $DedSeqNo     9999
  move #_EDst_EmplRcd  to $EmplRcd      999
  move #_DistAmount    to $DistDedAmount 99999999999.99mi
  move #_BenefitRcdNo  to $BenefitRcdNo 999
  move #_GarnPriority  to $GarnPriority 9999
  move #_BondLogSeq    to $BondLogSeq   9999

  if $LiabExpInd = 'E' and $RevEntry = 'N'
      let $ProcAccount = $_GL_Account
  else
      let $ProcAccount = $Account
  end-if

  let $_err-statement1 = 'PAYGL01, Insert Error - Write-NA-Ded-Liab-Rec'
  let $_err-statement2 = 'Key Values: TABLE: PS_PAY_NA_DED_LIAB'     ||
                         ', COMPANY:'           ||$_Company          ||
                         ', PAYGROUP:'          ||$_PayGroup         ||
                         ', PAY_END_DT:'        ||$_PayEndDt         ||
                         ', OFF_CYCLE:'         ||$_OffCycle         ||
                         ', PAGE_NUM:'          ||$PageNum           ||
                         ', LINE_NUM:'          ||$LineNum           ||
                         ', SEPCHK:'            ||$SepChk            ||
                         ', BENEFIT_RCD_NBR:'   ||$BenefitRcdNo      ||
                         ', PLAN_TYPE:'         ||$_PlanType         ||
                         ', BENEFIT_PLAN:'      ||$_BenefitPlan      ||
                         ', DEDCD:'             ||$_DedCd            ||
                         ', DED_CLASS:'         ||$_DedClass         ||
                         ', DED_SLSTX_CLASS:'   ||$_DedSlstxClass    ||
                         ', PY_LIABEXPFLG:'     ||$LiabExpInd        ||
                         ', SEQNO:'             ||$DedSeqNo          ||
                         ', ADDL_NBR:'          ||$AddlNbr           ||
                         ', DED_CUR:'           ||$DistDedAmount     ||
                         ', GARN_PRIORITY:'     ||$GarnPriority      ||
                         ', GARNID:'            ||$_GarnID           ||
                         ', BOND_ID:'           ||$_BondID           ||
                         ', BOND_OWNER_ID:'     ||$_BondOwnerID      ||
                         ', BOND_OTH_REG_TYPE:' ||$_BondOthRegType   ||
                         ', BOND_OTH_REG_ID:'   ||$_BondOthRegID     ||
                         ', BOND_LOG_SEQ:'      ||$BondLogSeq        ||
                         ', BUSINESS_UNIT:'     ||$_Business_Unit    ||
                         ', BUSINESS_UNIT_AP:'  ||$_Business_Unit_AP ||
                         ', BUSINESS_UNIT_GL:'  ||$_Business_Unit_GL ||
                         ', EMPLID:'            ||$_EDst_EmplID      ||
                         ', EMPL_RCD:'          ||$EmplRcd           ||
                         ', CHECK_DT:'          ||$_CheckDt          ||
                         ', PAYCHECK_STATUS:'   ||$_PayCheckStatus   ||
                         ', ACCOUNT:'           ||$ProcAccount       ||
                         ', DEPTID_CF:'         ||$_GL_DeptID        ||
                         ', PROJECT_ID:'        ||$_Project_ID       ||
                         ', PRODUCT:'           ||$_Product          ||
                         ', FUND CODE:'         ||$_Fund_Code        ||
                         ', PROGRAM CODE:'      ||$_Program_Code     ||
                         ', CLASS FLD:'         ||$_Class_Fld        ||
                         ', AFFILIATE:'         ||$_Affiliate        ||
                         ', OPERATING UNIT:'    ||$_Operating_Unit   ||
                         ', ALTACCT:'           ||$_AltAcct          ||
                         ', BUDGET REF:'        ||$_Budget_Ref       ||
                         ', CHARTFIELD1:'       ||$_ChartField1      ||
                         ', CHARTFIELD2:'       ||$_ChartField2      ||
                         ', CHARTFIELD3:'       ||$_ChartField3      ||
                         ', AFFILIATE_INTRA1:'  ||$_Affiliate_Intra1 ||
                         ', AFFILIATE_INTRA2:'  ||$_Affiliate_Intra2 ||
                         ', AP_STATUS:'         ||$_AP_Status

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_PAY_NA_DED_LIAB (COMPANY,
                                PAYGROUP,
                                PAY_END_DT,
                                OFF_CYCLE,
                                PAGE_NUM,
                                LINE_NUM,
                                SEPCHK,
                                BENEFIT_RCD_NBR,
                                PLAN_TYPE,
                                BENEFIT_PLAN,
                                DEDCD,
                                DED_CLASS,
                                DED_SLSTX_CLASS,
                                PY_LIABEXPFLG,
                                SEQNO,
                                ADDL_NBR,
                                DED_CUR,
                                GARN_PRIORITY,
                                GARNID,
                                BOND_ID,
                                BOND_OWNER_ID,
                                BOND_OTH_REG_TYPE,
                                BOND_OTH_REG_ID,
                                BOND_LOG_SEQ,
                                BUSINESS_UNIT,
                                BUSINESS_UNIT_AP,
                                BUSINESS_UNIT_GL,
                                EMPLID,
                                EMPL_RCD,
                                CHECK_DT,
                                PAYCHECK_STATUS,
                                ACCOUNT,
                                DEPTID_CF,
                                PROJECT_ID,
                                PRODUCT,
                                FUND_CODE,
                                PROGRAM_CODE,
                                CLASS_FLD,
                                AFFILIATE,
                                OPERATING_UNIT,
                                ALTACCT,
                                BUDGET_REF,
                                CHARTFIELD1,
                                CHARTFIELD2,
                                CHARTFIELD3,
                                AFFILIATE_INTRA1,
                                AFFILIATE_INTRA2,
                                AP_STATUS)
                       VALUES  ($_Company,
                                $_PayGroup,
                                $_PayEndDt,
                                $_OffCycle,
                                #_PageNum,
                                #_LineNum,
                                #_SepChk,
                                #_BenefitRcdNo,
                                $_PlanType,
                                $_BenefitPlan,
                                $_DedCd,
                                $_DedClass,
                                $_DedSlstxClass,
                                $LiabExpInd,
                                #_DedSeqNo,
                                #_EDst_AddlNbr,
                                #_DistAmount,
                                #_GarnPriority,
                                $_GarnID,
                                $_BondID,
                                $_BondOwnerID,
                                $_BondOthRegType,
                                $_BondOthRegID,
                                #_BondLogSeq,
                                $_Business_Unit,
                                $_Business_Unit_AP,
                                $_Business_Unit_GL,
                                $_EDst_EmplID,
                                #_EDst_EmplRcd,
                                $_CheckDt,
                                $_PayCheckStatus,
                                $ProcAccount,
                                $_GL_DeptID,
                                $_Project_ID,
                                $_Product,
                                $_Fund_Code,
                                $_Program_Code,
                                $_Class_Fld,
                                $_Affiliate,
                                $_Operating_Unit,
                                $_AltAcct,
                                $_Budget_Ref,
                                $_ChartField1,
                                $_ChartField2,
                                $_ChartField3,
                                $_Affiliate_Intra1,
                                $_Affiliate_Intra2,
                                $_AP_Status)
end-SQL
end-procedure

!***********************************************************************
begin-procedure Write-NA-Tax-Liab-Rec ($LiabExpInd, $Account, $RevEntry)
!***********************************************************************

  move #_PageNum       to $PageNum      9999
  move #_LineNum       to $LineNum      9999
  move #_SepChk        to $SepChk       99
  move #_EDst_AddlNbr  to $AddlNbr      9999
  move #_TaxSeqNo      to $TaxSeqNo     9999
  move #_EDst_EmplRcd  to $EmplRcd      999
  move #_DistAmount    to $DistTaxAmount 99999999999.99mi

  if $LiabExpInd = 'E' and $RevEntry = 'N'
      let $ProcAccount = $_GL_Account
  else
      let $ProcAccount = $Account
  end-if

  let $_err-statement1 = 'PAYGL01, Insert Error - Write-NA-Tax-Liab-Rec'
  let $_err-statement2 = 'Key Values: TABLE: PS_PAY_NA_TAX_LIAB'    ||
                         ', COMPANY:'          ||$_Company          ||
                         ', PAYGROUP:'         ||$_PayGroup         ||
                         ', PAY_END_DT:'       ||$_PayEndDt         ||
                         ', OFF_CYCLE:'        ||$_OffCycle         ||
                         ', PAGE_NUM:'         ||$PageNum           ||
                         ', LINE_NUM:'         ||$LineNum           ||
                         ', SEPCHK:'           ||$SepChk            ||
                         ', STATE:'            ||$_State            ||
                         ', LOCALITY:'         ||$_Locality         ||
                         ', TAX_CLASS:'        ||$_TaxClass         ||
                         ', PY_LIABEXPFLG:'    ||$LiabExpInd        ||
                         ', SEQNO:'            ||$TaxSeqNo          ||
                         ', ADDL_NBR:'         ||$AddlNbr           ||
                         ', TAX_CUR:'          ||$DistTaxAmount     ||
                         ', BUSINESS_UNIT:'    ||$_Business_Unit    ||
                         ', BUSINESS_UNIT_AP:' ||$_Business_Unit_AP ||
                         ', BUSINESS_UNIT_GL:' ||$_Business_Unit_GL ||
                         ', EMPLID:'           ||$_EDst_EmplID      ||
                         ', EMPL_RCD:'         ||$EmplRcd           ||
                         ', CHECK_DT:'         ||$_CheckDt          ||
                         ', PAYCHECK_STATUS:'  ||$_PayCheckStatus   ||
                         ', PAY_TAXES_THRU_AP:'||$_PayTaxesThruAP   ||
                         ', ACCOUNT:'          ||$ProcAccount       ||
                         ', DEPTID_CF:'        ||$_GL_DeptID        ||
                         ', PROJECT_ID:'       ||$_Project_ID       ||
                         ', PRODUCT:'          ||$_Product          ||
                         ', FUND CODE:'        ||$_Fund_Code        ||
                         ', PROGRAM CODE:'     ||$_Program_Code     ||
                         ', CLASS FLD:'        ||$_Class_Fld        ||
                         ', AFFILIATE:'        ||$_Affiliate        ||
                         ', OPERATING UNIT:'   ||$_Operating_Unit   ||
                         ', ALTACCT:'          ||$_AltAcct          ||
                         ', BUDGET REF:'       ||$_Budget_Ref       ||
                         ', CHARTFIELD1:'      ||$_ChartField1      ||
                         ', CHARTFIELD2:'      ||$_ChartField2      ||
                         ', CHARTFIELD3:'      ||$_ChartField3      ||
                         ', AFFILIATE_INTRA1:' ||$_Affiliate_Intra1 ||
                         ', AFFILIATE_INTRA2:' ||$_Affiliate_Intra2 ||
                         ', AP_STATUS:'        ||$_AP_Status

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_PAY_NA_TAX_LIAB (COMPANY,
                                PAYGROUP,
                                PAY_END_DT,
                                OFF_CYCLE,
                                PAGE_NUM,
                                LINE_NUM,
                                SEPCHK,
                                STATE,
                                LOCALITY,
                                TAX_CLASS,
                                PY_LIABEXPFLG,
                                SEQNO,
                                ADDL_NBR,
                                TAX_CUR,
                                BUSINESS_UNIT,
                                BUSINESS_UNIT_AP,
                                BUSINESS_UNIT_GL,
                                EMPLID,
                                EMPL_RCD,
                                CHECK_DT,
                                PAYCHECK_STATUS,
                                PAY_TAXES_THRU_AP,
                                ACCOUNT,
                                DEPTID_CF,
                                PROJECT_ID,
                                PRODUCT,
                                FUND_CODE,
                                PROGRAM_CODE,
                                CLASS_FLD,
                                AFFILIATE,
                                OPERATING_UNIT,
                                ALTACCT,
                                BUDGET_REF,
                                CHARTFIELD1,
                                CHARTFIELD2,
                                CHARTFIELD3,
                                AFFILIATE_INTRA1,
                                AFFILIATE_INTRA2,
                                AP_STATUS)
                       VALUES  ($_Company,
                                $_PayGroup,
                                $_PayEndDt,
                                $_OffCycle,
                                #_PageNum,
                                #_LineNum,
                                #_SepChk,
                                $_State,
                                $_Locality,
                                $_TaxClass,
                                $LiabExpInd,
                                #_TaxSeqNo,
                                #_EDst_AddlNbr,
                                #_DistAmount,
                                $_Business_Unit,
                                $_Business_Unit_AP,
                                $_Business_Unit_GL,
                                $_EDst_EmplID,
                                #_EDst_EmplRcd,
                                $_CheckDt,
                                $_PayCheckStatus,
                                $_PayTaxesThruAP,
                                $ProcAccount,
                                $_GL_DeptID,
                                $_Project_ID,
                                $_Product,
                                $_Fund_Code,
                                $_Program_Code,
                                $_Class_Fld,
                                $_Affiliate,
                                $_Operating_Unit,
                                $_AltAcct,
                                $_Budget_Ref,
                                $_ChartField1,
                                $_ChartField2,
                                $_ChartField3,
                                $_Affiliate_Intra1,
                                $_Affiliate_Intra2,
                                $_AP_Status)
end-SQL
end-procedure

!***********************************************************************
begin-procedure Write-NA-Ctx-Liab-Rec ($LiabExpInd, $Account, $RevEntry)
!***********************************************************************

  move #_PageNum       to $PageNum      9999
  move #_LineNum       to $LineNum      9999
  move #_SepChk        to $SepChk       99
  move #_EDst_AddlNbr  to $AddlNbr      9999
  move #_CtxSeqNo      to $CtxSeqNo     9999
  move #_EDst_EmplRcd  to $EmplRcd      999
  move #_DistAmount    to $DistTaxAmount 99999999999.99mi

  if $LiabExpInd = 'E' and $RevEntry = 'N'
      let $ProcAccount = $_GL_Account
  else
      let $ProcAccount = $Account
  end-if

  let $_err-statement1 = 'PAYGL01, Insert Error - Write-NA-Ctx-Liab-Rec'
  let $_err-statement2 = 'Key Values: TABLE: PS_PAY_NA_CTX_LIAB'    ||
                         ', COMPANY:'          ||$_Company          ||
                         ', PAYGROUP:'         ||$_PayGroup         ||
                         ', PAY_END_DT:'       ||$_PayEndDt         ||
                         ', OFF_CYCLE:'        ||$_OffCycle         ||
                         ', PAGE_NUM:'         ||$PageNum           ||
                         ', LINE_NUM:'         ||$LineNum           ||
                         ', SEPCHK:'           ||$SepChk            ||
                         ', PROVINCE:'         ||$_Province         ||
                         ', TAX_CLASS_CAN:'    ||$_ProcTaxClassCan  ||
                         ', PY_LIABEXPFLG:'    ||$LiabExpInd        ||
                         ', SEQNO:'            ||$CtxSeqNo          ||
                         ', ADDL_NBR:'         ||$AddlNbr           ||
                         ', TAX_CUR:'          ||$DistTaxAmount     ||
                         ', BUSINESS_UNIT:'    ||$_Business_Unit    ||
                         ', BUSINESS_UNIT_AP:' ||$_Business_Unit_AP ||
                         ', BUSINESS_UNIT_GL:' ||$_Business_Unit_GL ||
                         ', EMPLID:'           ||$_EDst_EmplID      ||
                         ', EMPL_RCD:'         ||$EmplRcd           ||
                         ', CHECK_DT:'         ||$_CheckDt          ||
                         ', PAYCHECK_STATUS:'  ||$_PayCheckStatus   ||
                         ', WAGE_LOSS_PLAN:'   ||$_WageLossPlan     ||
                         ', CANADA_BN:'        ||$_CanadaBN         ||
                         ', PAY_TAXES_THRU_AP:'||$_PayTaxesThruAP   ||
                         ', ACCOUNT:'          ||$ProcAccount       ||
                         ', DEPTID_CF:'        ||$_GL_DeptID        ||
                         ', PROJECT_ID:'       ||$_Project_ID       ||
                         ', PRODUCT:'          ||$_Product          ||
                         ', FUND CODE:'        ||$_Fund_Code        ||
                         ', PROGRAM CODE:'     ||$_Program_Code     ||
                         ', CLASS FLD:'        ||$_Class_Fld        ||
                         ', AFFILIATE:'        ||$_Affiliate        ||
                         ', OPERATING UNIT:'   ||$_Operating_Unit   ||
                         ', ALTACCT:'          ||$_AltAcct          ||
                         ', BUDGET REF:'       ||$_Budget_Ref       ||
                         ', CHARTFIELD1:'      ||$_ChartField1      ||
                         ', CHARTFIELD2:'      ||$_ChartField2      ||
                         ', CHARTFIELD3:'      ||$_ChartField3      ||
                         ', AFFILIATE_INTRA1:' ||$_Affiliate_Intra1 ||
                         ', AFFILIATE_INTRA2:' ||$_Affiliate_Intra2 ||
                         ', AP_STATUS:'        ||$_AP_Status


begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_PAY_NA_CTX_LIAB (COMPANY,
                                PAYGROUP,
                                PAY_END_DT,
                                OFF_CYCLE,
                                PAGE_NUM,
                                LINE_NUM,
                                SEPCHK,
                                PROVINCE,
                                TAX_CLASS_CAN,
                                PY_LIABEXPFLG,
                                SEQNO,
                                ADDL_NBR,
                                TAX_CUR,
                                BUSINESS_UNIT,
                                BUSINESS_UNIT_AP,
                                BUSINESS_UNIT_GL,
                                EMPLID,
                                EMPL_RCD,
                                CHECK_DT,
                                PAYCHECK_STATUS,
                                WAGE_LOSS_PLAN,
                                CANADA_BN,
                                PAY_TAXES_THRU_AP,
                                ACCOUNT,
                                DEPTID_CF,
                                PROJECT_ID,
                                PRODUCT,
                                FUND_CODE,
                                PROGRAM_CODE,
                                CLASS_FLD,
                                AFFILIATE,
                                OPERATING_UNIT,
                                ALTACCT,
                                BUDGET_REF,
                                CHARTFIELD1,
                                CHARTFIELD2,
                                CHARTFIELD3,
                                AFFILIATE_INTRA1,
                                AFFILIATE_INTRA2,
                                AP_STATUS)
                       VALUES  ($_Company,
                                $_PayGroup,
                                $_PayEndDt,
                                $_OffCycle,
                                #_PageNum,
                                #_LineNum,
                                #_SepChk,
                                $_Province,
                                $_ProcTaxClassCan,
                                $LiabExpInd,
                                #_CtxSeqNo,
                                #_EDst_AddlNbr,
                                #_DistAmount,
                                $_Business_Unit,
                                $_Business_Unit_AP,
                                $_Business_Unit_GL,
                                $_EDst_EmplID,
                                #_EDst_EmplRcd,
                                $_CheckDt,
                                $_PayCheckStatus,
                                $_WageLossPlan,
                                $_CanadaBN,
                                $_PayTaxesThruAP,
                                $ProcAccount,
                                $_GL_DeptID,
                                $_Project_ID,
                                $_Product,
                                $_Fund_Code,
                                $_Program_Code,
                                $_Class_Fld,
                                $_Affiliate,
                                $_Operating_Unit,
                                $_AltAcct,
                                $_Budget_Ref,
                                $_ChartField1,
                                $_ChartField2,
                                $_ChartField3,
                                $_Affiliate_Intra1,
                                $_Affiliate_Intra2,
                                $_AP_Status)
end-SQL
end-procedure

!************************************************************
begin-procedure Write-NA-Net-Dist-Rec ($DepositInd, $Account)
!************************************************************

  let #_NetSeqNo = #_NetSeqNo + 1

  move #_PageNum       to $PageNum      9999
  move #_LineNum       to $LineNum      9999
  move #_SepChk        to $SepChk       99
  move #_NetSeqNo      to $NetSeqNo     9999
  move #_EDst_AddlNbr  to $AddlNbr      9999
  move #_DistNetAmount to $DistNetAmount 99999999999.99mi
  move #_DistAccrAmt   to $AccrualAmt    99999999999.99mi

  let $_err-statement1 = 'PAYGL01, Insert Error - Write-NA-Net-Dist-Rec'
  let $_err-statement2 = 'Key Values: TABLE: PS_PAY_NA_NET_DIST' ||
                         ', COMPANY:'         ||$_Company        ||
                         ', PAYGROUP:'        ||$_PayGroup       ||
                         ', PAY_END_DT:'      ||$_PayEndDt       ||
                         ', OFF_CYCLE:'       ||$_OffCycle       ||
                         ', PAGE_NUM:'        ||$PageNum         ||
                         ', LINE_NUM:'        ||$LineNum         ||
                         ', SEPCHK:'          ||$SepChk          ||
                         ', ACCT_CD:'         ||$_AcctCd         ||
                         ', SEQNO:'           ||$NetSeqNo        ||
                         ', ADDL_NBR:'        ||$AddlNbr         ||
                         ', ERNCD:'           ||$_EDst_ErnCd     ||
                         ', DEPOSIT:'         ||$DepositInd      ||
                         ', ACCOUNT:'         ||$Account         ||
                         ', NET_PAY:'         ||$DistNetAmount   ||
                         ', PY_ACCRUAL_AMT:'  ||$AccrualAmt

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_PAY_NA_NET_DIST (COMPANY,
                                PAYGROUP,
                                PAY_END_DT,
                                OFF_CYCLE,
                                PAGE_NUM,
                                LINE_NUM,
                                SEPCHK,
                                ACCT_CD,
                                SEQNO,
                                ADDL_NBR,
                                ERNCD,
                                DEPOSIT,
                                ACCOUNT,
                                NET_PAY,
                                PY_ACCRUAL_AMT)
                       VALUES  ($_Company,
                                $_PayGroup,
                                $_PayEndDt,
                                $_OffCycle,
                                #_PageNum,
                                #_LineNum,
                                #_SepChk,
                                $_AcctCd,
                                #_NetSeqNo,
                                #_EDst_AddlNbr,
                                $_EDst_ErnCd,
                                $DepositInd,
                                $Account,
                                #_DistNetAmount,
                                #_DistAccrAmt)
end-SQL

end-procedure

!*******************************
begin-procedure Reverse-Accruals
!*******************************

begin-select on-error=SQL-error
F.AMOUNT
F.DRCR
F.BUSINESS_UNIT_GL
F.ACCOUNT
F.DEPTID_CF
F.PROJECT_ID,
F.PRODUCT,
F.FUND_CODE,
F.PROGRAM_CODE,
F.CLASS_FLD,
F.AFFILIATE,
F.OPERATING_UNIT,
F.ALTACCT,
F.BUDGET_REF,
F.CHARTFIELD1,
F.CHARTFIELD2,
F.CHARTFIELD3,
F.AFFILIATE_INTRA1,
F.AFFILIATE_INTRA2,
F.JRNL_LN_REF
F.BUSINESS_UNIT
F.APPL_JRNL_ID
F.LINE_DESCR
F.SETID_HR
F.CURRENCY_CD

  let #Monetary_Amount  = &F.AMOUNT
  let #Monetary_Amount  = #Monetary_Amount * -1

  let $DrCr             = &F.DRCR
  let $business_unit_gl = &F.BUSINESS_UNIT_GL
  let $Jrnl_Ln_Ref      = &F.JRNL_LN_REF
  let $business_unit_hr = &F.BUSINESS_UNIT
  let $journal_template = &F.APPL_JRNL_ID
  let $Line_Descr       = &F.LINE_DESCR
  let $Setid_HR         = &F.SETID_HR
  let $currency_cd_gl   = &F.CURRENCY_CD

  let $GL_Account       = &F.ACCOUNT
  let $GL_DeptID        = &F.DEPTID_CF
  let $Project_Id       = &F.PROJECT_ID
  let $Product          = &F.PRODUCT
  let $Fund_Code        = &F.FUND_CODE
  let $Program_Code     = &F.PROGRAM_CODE
  let $Class_Fld        = &F.CLASS_FLD
  let $Affiliate        = &F.AFFILIATE
  let $Operating_Unit   = &F.OPERATING_UNIT
  let $AltAcct          = &F.ALTACCT
  let $Budget_Ref       = &F.BUDGET_REF
  let $Chartfield1      = &F.CHARTFIELD1
  let $Chartfield2      = &F.CHARTFIELD2
  let $Chartfield3      = &F.CHARTFIELD3
  let $Affiliate_intra1 = &F.AFFILIATE_INTRA1
  let $Affiliate_intra2 = &F.AFFILIATE_INTRA2

  do Convert-Amount ($currency_cd_hr, $currency_cd_gl, $hr_rate_type,
                     #Monetary_Amount, #GL_Amount, #rate_mult,#rate_div)

  do Write-Accounting-Line

FROM  PS_R_HR_ACCRUAL F
WHERE COMPANY  = $Company
  AND PAYGROUP = $PayGroup
  AND REVERSED = 'N'
end-select

  move ' ' to $Line_Descr
end-procedure

!*******************************
begin-procedure Delete-Accruals
!*******************************

  let $err-statement1 = 'PAYGL01, Delete Error - Delete-Accruals'
  let $err-statement2 = 'Bind Variables: Company:'||$Company||
                                      ' Paygroup:'||$PayGroup

begin-SQL on-error=SQL-Statement-Error
DELETE FROM PS_R_HR_ACCRUAL
WHERE COMPANY  = $Company
  AND PAYGROUP = $PayGroup
  AND REVERSED = 'Y'
end-SQL
end-procedure

!****************************************
begin-procedure Mark-Accruals-as-Reversed
!****************************************

  let $err-statement1 = 'PAYGL01, Update Error - Mark-Accruals-as-Reversed'
  let $err-statement2 = 'Bind Variables: Company:'||$Company||
                                      ' Paygroup:'||$PayGroup

begin-SQL on-error=SQL-Statement-Error
UPDATE PS_R_HR_ACCRUAL  SET REVERSED = 'Y'
WHERE COMPANY  = $Company
  AND PAYGROUP = $PayGroup
end-SQL
end-procedure

!*************************************
begin-procedure Get-Canadian-Currency
!*************************************

begin-select on-error=SQL-error
CC.CURRENCY_CD

  move &CC.CURRENCY_CD to $Currency_Cd

FROM  PS_COUNTRY_CUR_TBL CC
WHERE CC.COUNTRY    = $PayGroupCountry
AND   CC.EFFDT =
      (SELECT MAX(CC1.EFFDT)
       FROM PS_COUNTRY_CUR_TBL CC1
       WHERE CC1.COUNTRY        = CC.COUNTRY
       AND   CC1.EFFDT <= $GL_Date)
end-select

end-procedure


!*****************************
begin-procedure Get-Exch-Rate ($from, $to, $rtype, :#rate_mult, :#rate_div)
!*****************************

let #rate = 0

if $rtype = ' '
  let $rtype = 'OFFIC'
end-if


begin-select on-error=SQL-error

RATE_MULT
RATE_DIV

  let #rate_mult = &RATE_MULT
  let #rate_div  = &RATE_DIV

FROM PS_RT_DFLT_VW A
WHERE FROM_CUR = $from AND TO_CUR = $to
  AND RT_TYPE = $rtype  AND  EFFDT
  = ( SELECT MAX(EFFDT) FROM PS_RT_DFLT_VW WHERE FROM_CUR = A.FROM_CUR
  AND TO_CUR = A.TO_CUR AND RT_TYPE = A.RT_TYPE
  AND EFFDT <= $_Rate_Conversion_Date )

end-select

end-procedure Get-Exch-Rate


!******************************
begin-procedure Convert-Amount ($from, $to, $rtype, #hr_amount, :#gl_amount, :#rate_mult,
                                 :#rate_div)
!******************************

let $currency_error =
   cond($from=$to and rtrim($from,' ')='','Blank PY&GL Currency-Chk BUs',
   cond(rtrim($from,' ')='','Blank PY currency:'||$_business_unit_hr,
   cond(rtrim($to,' ')='' and rtrim($_business_unit_gl,' ')='',
        'No GL Curr, no GL BU for ' || $_business_unit_hr
   cond(rtrim($to,' ')='','No GL Curr',
    'None'))))


if $currency_error <> 'None'
   display ' '
   display $currency_error
   display 'Please correct and re-run'
   do ROLLBACK-TRANSACTION
   move 0 to #Total_Acctg_Lines
   move 0 to #PayGroup_Acctg_Lines
   stop
else
  if $from = $to
          let #gl_amount = #hr_amount
          let #rate_mult = 1
          let #rate_div  = 1
  else
        do Get-Exch-Rate ($from, $to, $rtype, #rate_mult, #rate_div)
        if #rate_div = 0
           display ' '
           display 'Divisor rate is zero for currency codes :' noline
           display $from noline
           display ' and '  noline
           display $to
           display 'please correct and re-run'
           do ROLLBACK-TRANSACTION
           move 0 to #Total_Acctg_Lines
           move 0 to #PayGroup_Acctg_Lines
           stop
        end-if
        let #gl_amount = #hr_amount * #rate_mult/#rate_div
  end-if
        if #rate_div = 0 or #rate_mult = 0
           display ' '
           display 'Rates are invalid for currency codes :' noline
           display $from noline
           display ' and ' noline
           display $to
           display 'please correct and re-run'
           do ROLLBACK-TRANSACTION
           move 0 to #Total_Acctg_Lines
           move 0 to #PayGroup_Acctg_Lines
           stop
        end-if
end-if

end-procedure Convert-Amount

!*************************************
begin-procedure Get-Currency-Decimals ($Currency, :#Decimals)
!*************************************

begin-select on-error=SQL-error

DECIMAL_POSITIONS

  move &DECIMAL_POSITIONS to #decimals

FROM PS_CURRENCY_CD_TBL A
WHERE CURRENCY_CD = $Currency
  AND EFF_STATUS = 'A' AND EFFDT
  = ( SELECT MAX(EFFDT) FROM PS_CURRENCY_CD_TBL WHERE CURRENCY_CD = A.CURRENCY_CD
  AND EFF_STATUS = A.EFF_STATUS AND EFFDT <= $_Rate_Conversion_Date )

end-select

end-procedure Get-Currency-Decimals


!*************************
begin-procedure Get-Setid ($business_unit,$record_group,:$Setid)
!*************************

begin-select on-error=SQL-error

SETID

FROM PS_SET_CNTRL_GROUP WHERE SETCNTRLVALUE = $business_unit
     AND REC_GROUP_ID = $record_group

end-select

let $Setid = &SETID

end-procedure Get-Setid


!*********************************
begin-procedure Get-GL-BU-Details ($business_unit_hr,:$business_unit_ap,:$business_unit_gl,:$journal_template)
!*********************************

  let $journal_template = ' '
  let $business_unit_ap = ' '
  let $business_unit_gl = ' '

begin-select on-error=SQL-error
BN.BUSINESS_UNIT_GL
BN.BUSINESS_UNIT_AP

  let $business_unit_ap = &BN.BUSINESS_UNIT_AP
  let $business_unit_gl = &BN.BUSINESS_UNIT_GL

FROM PS_BUS_UNIT_TBL_HR BN
WHERE BN.BUSINESS_UNIT =  $business_unit_hr
end-select

begin-select on-error=SQL-error
BG.APPL_JRNL_ID

  let $journal_template = &BG.APPL_JRNL_ID

FROM PS_GL_JRNL_TMPLT BG
WHERE BG.BUSINESS_UNIT_GL =  $business_unit_gl
end-select
end-procedure

!******************************
begin-procedure Get-GL-Currency ($business_unit_gl,:$currency_cd_gl)
!******************************
  let $currency_cd_gl = ' '

begin-select on-error=SQL-error
BASE_CURRENCY
  let $currency_cd_gl = &BASE_CURRENCY
FROM  PS_BUS_UNIT_TBL_GL
WHERE BUSINESS_UNIT = $Business_Unit_gl
end-select
end-procedure

!*******************************
begin-procedure Get-HR-Currency ($EDate,:$Currency_cd,:$rt_type,:$rt_conv_dt)
!*******************************

begin-select on-error=SQL-error

PGT.CURRENCY_CD
PGT.RT_TYPE
PGT.RT_CONV_DT

FROM  PS_PAYGROUP_TBL PGT
WHERE PGT.PAYGROUP = $_PayGroup
AND   PGT.COMPANY  = $_Company
AND   PGT.EFFDT    = (SELECT MAX(PGT1.EFFDT) FROM PS_PAYGROUP_TBL PGT1
                    WHERE PGT1.COMPANY  = PGT.COMPANY
                      AND PGT1.PAYGROUP = PGT.PAYGROUP
                      AND PGT1.EFFDT   <= $EDate)

end-select

let $currency_cd        = &PGT.CURRENCY_CD
let $rt_type            = &PGT.RT_TYPE
let $rt_conv_dt_cd      = &PGT.RT_CONV_DT

evaluate $rt_conv_dt_cd
  when = 'T'
     let $rt_conv_dt = $_AsOfToday
  when = 'C'
     let $rt_conv_dt = $_CheckDt
  when = 'P'
     let $rt_conv_dt = $_PayEndDt
end-evaluate

end-procedure Get-HR-Currency


!*************************************
begin-procedure Select-Run-Id-History
!*************************************
begin-select on-error=SQL-error
PH.RUN_ID

FROM PS_PAY_CALENDAR PH
WHERE  PH.COMPANY    = $RC_PAYINIT.company
  AND  PH.PAYGROUP   = $RC_PAYINIT.paygroup
  AND  PH.PAY_END_DT = $RC_PAYINIT.pay_end_dt
end-select

   let $Run_Id = &PH.RUN_ID

end-procedure

!****************************
begin-procedure Create-Arrays
!****************************

  let #EarnDistArraySize = 300
  Create-array name=EarnDistArray  Size = 300
               field=AddlNbr:Number
               field=EmplID:Char
               field=EmplRcd:Number
               field=BenefitRcd:Number
               field=ErnCd:Char
               field=AccountCode:Char
               field=Business_Unit:Char
               field=Business_Unit_AP:Char
               field=Business_Unit_GL:Char
               field=DeptID:Char
               field=Position_Nbr:Char
               field=JobCode:Char
               field=StartMapLevel:Char
               field=Ex_Doc_ID:Char
               field=Ex_Doc_Type:Char
               field=Ex_Line_Nbr:Number
               field=LastDist:Char
               field=DistPct:Number
               field=PosLastDist:Char
               field=PosDistPct:Number
               field=NegLastDist:Char
               field=NegDistPct:Number
               field=BenLastDist:Char
               field=BenDistPct:Number
               field=PosBenLastDist:Char
               field=PosBenDistPct:Number
               field=NegBenLastDist:Char
               field=NegBenDistPct:Number
               field=Earns_Amt:Number
               field=Refund_Amt:Number
               field=Deduct_Amt:Number
               field=AccrEarn_Amt:Number
               field=AccrRefund:Number
               field=AccrDedn_Amt:Number
               field=AccrSend:Char

  let #BenEarnArraySize = 20
  Create-array name=BenEarnArray  Size = 20
               field=BenefitRcd:Number
               field=TotalEarn:Number
               field=TotalPosEarn:Number
               field=TotalNegEarn:Number

  let #ExpDistArraySize = 300
  Create-array name=ExpDistArray  Size = 300
               field=AddlNbr:Number
               field=EmplID:Char
               field=EmplRcd:Number
               field=BenefitRcd:Number
               field=ErnCd:Char
               field=Business_Unit:Char
               field=Business_Unit_AP:Char
               field=Business_Unit_GL:Char
               field=DeptID:Char
               field=Position_Nbr:Char
               field=JobCode:Char
               field=StartMapLevel:Char
               field=LastDist:Char
               field=DistPct:Number
               field=PosLastDist:Char
               field=PosDistPct:Number
               field=NegLastDist:Char
               field=NegDistPct:Number
               field=BenLastDist:Char
               field=BenDistPct:Number
               field=PosBenLastDist:Char
               field=PosBenDistPct:Number
               field=NegBenLastDist:Char
               field=NegBenDistPct:Number
               field=Earns_Amt:Number

  let #TaxDescrArraySize = 100
  Create-Array name=TaxDescr size = 100
               field=FedTaxDescr:char
               field=StateTaxDescr:char
               field=LocalityTaxDescr:char

  let #CtxDescrArraySize = 100
  Create-Array name=CtxDescr size = 100
               field=CtxClass:char
               field=Descr:char

  let #TaxLiabArraySize = 250
  Create-Array name=TaxLiabAcctArray size = 250
               field=State:Char
               field=Locality:Char
               field=GL_SWT:Char
               field=GL_SUT:Char
               field=GL_SDI:Char
               field=GL_SDI_ER:Char
               field=GL_VDI_EE:Char
               field=GL_VDI_ER:Char
               field=GL_SUT_ER:Char
               field=GL_ST_EIC:Char
               field=GL_LWT:Char
               field=GL_LWT_ER:Char

  let #DedLiabArraySize = 250
  Create-Array name=DedLiabAcctArray size = 250
               field=Liability:Char
               field=GL_PlanType:Char
               field=GL_DedCd:Char
               field=GL_DedClass:Char
               field=GL_DedSlstxClass:Char

  let #CtxLiabArraySize=30
  Create-array name=CtxLiabAcctArray size=30
               field=Wage_Loss_Plan:Char
               field=Canada_BN:Char
               field=GL_NBR_CIT:Char
               field=GL_NBR_QIT:Char
               field=GL_NBR_T4A_Tax:Char
               field=GL_NBR_RV2_Tax:Char
               field=GL_NBR_Payroll_Tax:Char
               field=GL_NBR_CPP_EE:Char
               field=GL_NBR_CPP_ER:Char
               field=GL_NBR_QPP_EE:Char
               field=GL_NBR_QPP_ER:Char
               field=GL_NBR_CUI_EE:Char
               field=GL_NBR_CUI_ER:Char
               field=GL_NBR_HTX:Char
               field=GL_NBR_QIE:Char
               field=GL_NBR_QIR:Char

  let #CalendarArraySize=100
  Create-array name=Calendars  Size = 100
               field=Company:Char
               field=PayGroup:Char
               field=Pay_End_Dt:Char
               field=Check_Dt:Char
               field=Accrual_Pct:Number
               field=Reverse_Flag:Char
               field=PayOffCycleCal:Char
               field=PayDistRun:Char

  let #XrefArraySize = 100
  let #TLDistSize    = 20
  Create-array name=TLXrefArray size = 100
               field=XrefNum:Number
               field=UseTLSource:Char
               field=TotalTLAmt:Number
               field=TotalPEAmt:Number
               field=LastLD:Number
               field=NotDistAmt:Number
               field=TLAcctCd:Char:20
               field=TLLDAmt:Number:20

end-procedure

!********************************
begin-procedure Initialize-Arrays
!********************************
  let #MaxTaxLiabAcct = 0
  let #MaxDedLiabAcct = 0
  let #MaxCtxLiabAcct = 0
  let #MaxCtxDescrCnt = 0

  Clear-Array name=TaxLiabAcctArray
  Clear-Array name=DedLiabAcctArray
  Clear-Array name=CtxLiabAcctArray
  Clear-Array name=TaxDescr
  Clear-Array name=CtxDescr

end-procedure

!*****************************************
begin-procedure Initialize-PayCheck-Arrays
!*****************************************
  let #MaxErnDist     = 0
  let #MaxBenEarn     = 0
  let #MaxExpDist     = 0
  let #MaxTLDist      = 0

  Clear-Array name=EarnDistArray
  Clear-Array name=BenEarnArray
  Clear-Array name=ExpDistArray
  Clear-Array name=TLXrefArray

  let #TtlEarn    = 0
  let #TtlPosEarn = 0
  let #TtlNegEarn = 0

end-procedure

!*****************************************
begin-procedure Load-Canadian-Tax-LiabAcct
!*****************************************

  let #CtxLiab = 0

begin-select on-error=SQL-error
WL.WAGE_LOSS_PLAN
WL.CANADA_BN

    if #CtxLiab < #CtxLiabArraySize
        put &WL.WAGE_LOSS_PLAN &WL.CANADA_BN into CtxLiabAcctArray(#CtxLiab) Wage_Loss_Plan Canada_BN
    else
        display '***Error*** Canadian Tax Liaiblity Account Array limit exceeded'
        stop
    end-if
    let #CtxLiab = #CtxLiab + 1

FROM  PS_WAGELS_PLAN_TBL WL
WHERE WL.COMPANY = $Company
  AND WL.EFFDT   = (SELECT MAX(WL1.EFFDT) FROM PS_WAGELS_PLAN_TBL WL1
                    WHERE WL1.COMPANY        = WL.COMPANY
                      AND WL1.WAGE_LOSS_PLAN = WL.WAGE_LOSS_PLAN
                      AND WL1.EFFDT         <= $GL_Date)
ORDER BY WL.WAGE_LOSS_PLAN
end-select

  let #MaxCtxLiabAcct = #CtxLiab

begin-select on-error=SQL-error
WL4.WAGE_LOSS_PLAN
WL4.TAX_CLASS_CAN
WL4.GL_NBR

      let #CtxLiab = 0
      let $CtxLiabFound = 'N'
      while #CtxLiab < #MaxCtxLiabAcct and $CtxLiabFound = 'N'

          get $Wage_Loss_Plan from CtxLiabAcctArray(#CtxLiab) Wage_Loss_Plan

          if $Wage_Loss_Plan = &WL4.WAGE_LOSS_PLAN
              let $CtxLiabFound = 'Y'
          else
              let #CtxLiab = #CtxLiab + 1
          end-if
      end-while

    let $TempClass = rtrim(&WL4.TAX_CLASS_CAN, ' ')
    let $GL_NBR    = substr(&WL4.GL_NBR,1,10)

    evaluate $TempClass
      when = 'CIT'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_CIT
      when = 'QIT'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_QIT
      when = 'T4A'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_T4A_Tax
      when = 'RV2'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_RV2_Tax
      when = 'PYT'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_Payroll_Tax
      when = 'CPP'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_CPP_EE
      when = 'CPR'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_CPP_ER
      when = 'QPP'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_QPP_EE
      when = 'QPR'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_QPP_ER
      when = 'EIE'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_CUI_EE
      when = 'EIR'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_CUI_ER
      when = 'HTX'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_HTX
      when = 'QIE'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_QIE
      when = 'QIR'
        put $GL_NBR into CtxLiabAcctArray(#CtxLiab) GL_NBR_QIR

    end-evaluate

FROM  PS_WAGELS_PLAN_TBL WL2,
      PS_WGLS_LIA_GL_ACC WL4
WHERE WL2.COMPANY = $Company
  AND WL2.EFFDT   = (SELECT MAX(WL3.EFFDT) FROM PS_WAGELS_PLAN_TBL WL3
                     WHERE WL3.COMPANY        = WL2.COMPANY
                       AND WL3.WAGE_LOSS_PLAN = WL2.WAGE_LOSS_PLAN
                       AND WL3.EFFDT         <= $GL_Date)
  AND WL4.COMPANY        = WL2.COMPANY
  AND WL4.EFFDT          = WL2.EFFDT
  AND WL4.WAGE_LOSS_PLAN = WL2.WAGE_LOSS_PLAN
ORDER BY WL4.WAGE_LOSS_PLAN,WL4.TAX_CLASS_CAN
end-select
end-procedure

!**********************************
begin-procedure Determine-Tax-Descr
!**********************************

  let $Payroll_line_descr = ' '

  if $State = '$U'
      let #idx = Instr($FedTaxClass, $Tax_Class, 1)
      get $TaxDescr from TaxDescr(#idx) FedTaxDescr
      let $Payroll_line_descr = $TaxDescr
  else
      if $Locality = ''
          let #idx = Instr($StateTaxClass, $Tax_Class, 1)
          get $TaxDescr from TaxDescr(#idx) StateTaxDescr
          let $payroll_line_descr = $State || $TaxDescr
      else
          let #idx = Instr($LocalityTaxClass, $Tax_Class, 1)
          get $TaxDescr from TaxDescr(#idx) LocalityTaxDescr
          do Get-Local-Tax-Data
          let $payroll_line_descr = $State || ' ' || $Locality || $TaxDescr

          if $Tax_Class = 'B'
              if $Liab_Exp_Flag = 'E' or $Liab_Exp_Flag = 'R'
                  let $payroll_line_descr = $payroll_line_descr || '(er)'
              else
                  let $payroll_line_descr = $payroll_line_descr || '(ee)'
              end-if
          end-if
      end-if
  end-if

end-procedure

!**********************************
begin-procedure Determine-Ctx-Descr
!**********************************

  let $SrchTaxClassCan = $Tax_Class_CAN

  evaluate $Tax_Class_CAN
      when = 'CPP'
      when = 'QPP'
          if $PublicSector = 'N' and ($Liab_Exp_Flag = 'E' or $Liab_Exp_Flag = 'R')
              let $SrchTaxClassCan = substr($Tax_Class_CAN,1,2) || 'R'
          end-if
          break
      when-other
  end-evaluate

  let $Payroll_line_descr = ' '
  let #idx = 0
  let $Found = 'N'

  while (#idx < #MaxCtxDescrCnt and $Found = 'N')

      get $TaxClass $TaxDescr from CtxDescr (#idx) CtxClass Descr

      if $TaxClass = $SrchTaxClassCan
          let $Payroll_line_descr = $TaxDescr
          let $Found = 'Y'
      end-if
      let #idx = #idx + 1
  end-while

end-procedure

!***********************************
begin-procedure Initialize-Tax-Descr
!***********************************

  let $FedTaxClass       = 'HADGEJFTQZUC'
  let $StateTaxClass     = 'HAVLMNDWSUEXC'
  let $LocalityTaxClass  = 'BHRP'

  put 'Fed Withholding'                  into TaxDescr(1)  FedTaxDescr
  put 'Fed Withholding'                  into TaxDescr(2)  FedTaxDescr
  put 'Employee FICA OASDI'              into TaxDescr(3)  FedTaxDescr
  put 'Employee FICA OASDI (Tips)'       into TaxDescr(4)  FedTaxDescr
  put 'Employer FICA OASDI'              into TaxDescr(5)  FedTaxDescr
  put 'Employer FICA OASDI (Tips)'       into TaxDescr(6)  FedTaxDescr
  put 'Employee FICA MED'                into TaxDescr(7)  FedTaxDescr
  put 'Employee FICA MED (Tips)'         into TaxDescr(8)  FedTaxDescr
  put 'Employer FICA MED'                into TaxDescr(9)  FedTaxDescr
  put 'Employer FICA MED (Tips)'         into TaxDescr(10) FedTaxDescr
  put 'Fed Unemployment'                 into TaxDescr(11) FedTaxDescr
  put 'Earned Income Credit'             into TaxDescr(12) FedTaxDescr

  put ' St Withhldng'                    into TaxDescr(1)  StateTaxDescr
  put ' St Withhldng'                    into TaxDescr(2)  StateTaxDescr
  put ' Ee Unemployment'                 into TaxDescr(3)  StateTaxDescr
  put ' NJ SWAF (SUT)'                   into TaxDescr(4)  StateTaxDescr
  put ' NJ WFDP (SUT)'                   into TaxDescr(5)  StateTaxDescr
  put ' NJ HCSF (SUT)'                   into TaxDescr(6)  StateTaxDescr
  put ' Ee disability'                   into TaxDescr(7)  StateTaxDescr
  put ' VDI dis'                         into TaxDescr(8)  StateTaxDescr
  put ' Er unempl spl (SUT)'             into TaxDescr(9)  StateTaxDescr
  put ' Er SUT'                          into TaxDescr(10) StateTaxDescr
  put ' Er disability'                   into TaxDescr(11) StateTaxDescr
  put ' Er VDI'                          into TaxDescr(12) StateTaxDescr
  put ' St EIC'                          into TaxDescr(13) StateTaxDescr

  put ' Loc W/H '                        into TaxDescr(1)  LocalityTaxDescr
  put ' Loc W/H (ee)'                    into TaxDescr(2)  LocalityTaxDescr
  put ' Loc W/H (er)'                    into TaxDescr(3)  LocalityTaxDescr
  put ' Loc W/H (ee)'                    into TaxDescr(4)  LocalityTaxDescr

end-procedure

!***********************************
begin-procedure Initialize-Ctx-Descr
!***********************************

  let #idx = 0

begin-select on-error=SQL-error
CTXXLAT.FIELDVALUE
CTXXLAT.XLATSHORTNAME

  let $FieldValue = rtrim(&CTXXLAT.FIELDVALUE,' ')
  let $FieldDescr = rtrim(&CTXXLAT.XLATSHORTNAME,' ')
  let $FieldDescr = 'Canada - ' || $FieldDescr

  if #idx < #CtxDescrArraySize
      put $FieldValue $FieldDescr into CtxDescr (#idx) CtxClass Descr
  else
      display '***Error*** Canadian Tax Description Array limit exceeded'
      stop
  end-if

  let #idx = #idx + 1

FROM PSXLATITEM CTXXLAT
WHERE CTXXLAT.FIELDNAME = 'TAX_CLASS_CAN'
AND CTXXLAT.EFFDT = (SELECT MAX(CTXXLAT1.EFFDT) FROM PSXLATITEM CTXXLAT1
                     WHERE CTXXLAT1.FIELDNAME  =  CTXXLAT.FIELDNAME
                     AND   CTXXLAT1.FIELDVALUE =  CTXXLAT.FIELDVALUE
                     AND   CTXXLAT1.EFFDT     <= $AsOfDate)
AND CTXXLAT.EFF_STATUS  = 'A'
end-select

  let #MaxCtxDescrCnt = #idx

end-procedure

!******************************
begin-procedure Reset-ChartKeys
!******************************

   let $GL_Account        = ' '
   let $GL_DeptID         = ' '
   let $Project_Id        = ' '
   let $Product           = ' '
   let $Fund_Code         = ' '
   let $Program_Code      = ' '
   let $Class_Fld         = ' '
   let $Affiliate         = ' '
   let $Operating_Unit    = ' '
   let $AltAcct           = ' '
   let $Budget_Ref        = ' '
   let $Chartfield1       = ' '
   let $Chartfield2       = ' '
   let $Chartfield3       = ' '
   let $Affiliate_intra1  = ' '
   let $Affiliate_intra2  = ' '

end-procedure

!*******************************
begin-procedure Get-Acct-Cd-Data
!*******************************

  do Reset-ChartKeys
  let $AcctCdFound = 'N'

begin-select on-error=SQL-error
ACCT_CD2.ACCOUNT
ACCT_CD2.DEPTID_CF
ACCT_CD2.PROJECT_ID
ACCT_CD2.PRODUCT
ACCT_CD2.FUND_CODE
ACCT_CD2.PROGRAM_CODE
ACCT_CD2.CLASS_FLD
ACCT_CD2.AFFILIATE
ACCT_CD2.OPERATING_UNIT
ACCT_CD2.ALTACCT
ACCT_CD2.BUDGET_REF
ACCT_CD2.CHARTFIELD1
ACCT_CD2.CHARTFIELD2
ACCT_CD2.CHARTFIELD3
ACCT_CD2.AFFILIATE_INTRA1
ACCT_CD2.AFFILIATE_INTRA2

   let $AcctCdFound       = 'Y'
   let $GL_Account        = &ACCT_CD2.ACCOUNT
   let $GL_DeptID         = &ACCT_CD2.DEPTID_CF
   let $Project_Id        = &ACCT_CD2.PROJECT_ID
   let $Product           = &ACCT_CD2.PRODUCT
   let $Fund_Code         = &ACCT_CD2.FUND_CODE
   let $Program_Code      = &ACCT_CD2.PROGRAM_CODE
   let $Class_Fld         = &ACCT_CD2.CLASS_FLD
   let $Affiliate         = &ACCT_CD2.AFFILIATE
   let $Operating_Unit    = &ACCT_CD2.OPERATING_UNIT
   let $AltAcct           = &ACCT_CD2.ALTACCT
   let $Budget_Ref        = &ACCT_CD2.BUDGET_REF
   let $Chartfield1       = &ACCT_CD2.CHARTFIELD1
   let $Chartfield2       = &ACCT_CD2.CHARTFIELD2
   let $Chartfield3       = &ACCT_CD2.CHARTFIELD3
   let $Affiliate_intra1  = &ACCT_CD2.AFFILIATE_INTRA1
   let $Affiliate_intra2  = &ACCT_CD2.AFFILIATE_INTRA2

FROM PS_ACCT_CD_TBL ACCT_CD2
WHERE ACCT_CD2.ACCT_CD = $AcctCd
end-select

  if $AcctCdFound = 'N' and $ContinueProcess = 'Y'
      let $ErrReason = '  ***Error*** Account Code ' || $AcctCd || ' not found '
      do Format-Display-ErrMsg
  end-if

end-procedure

!************************************
begin-procedure Write-GL-Transaction
!************************************

  move #Monetary_Amount to #SaveAmount

  !-------------------------------------------
  ! #Monetary-Amount is the Transaction amount
  !-------------------------------------------

  do Convert-Amount ($currency_cd_hr, $currency_cd_gl, $hr_rate_type,
                     #Monetary_Amount, #GL_Amount, #rate_mult,#rate_div)

  let #Monetary_Amount = #Monetary_Amount + 0
  if #Monetary_Amount <> 0
    let $Jrnl_Ln_Ref              = substr(to_char(#PayCheck_Nbr),1,10)
    do Write-Accounting-Line
  end-if

  move ' ' to $Line_Descr
end-procedure


!*************************************
begin-procedure Write-Accounting-Line
!*************************************

  do Get-Currency-Decimals ($Currency_Cd_gl, #Dec_Positions)

  if #Dec_Positions = 3
      let #GL_amount = round(#GL_amount, 3 )
      let #Monetary_Amount = round(#Monetary_Amount, 3 )
  else
      let #Original_amount    =  #Monetary_Amount
      let #Monetary_Amount    =  round(#Monetary_Amount, 2)
      let #Round_Diff         =  #Original_amount - #Monetary_Amount
      let #Total_Round_Diff   =  #Total_Round_Diff + #Round_Diff

      if #Total_Round_Diff >= 0.01
          let #Monetary_Amount = #Monetary_Amount + 0.01
          let #Total_Round_Diff = #Total_Round_Diff - 0.01
      end-if
      if #Total_Round_Diff <= -0.01
          let #Monetary_Amount = #Monetary_Amount - 0.01
          let #Total_Round_Diff = #Total_Round_Diff + 0.01
      end-if

      let #Original_famount    =  #GL_amount
      let #GL_amount      =  round(#GL_amount, 2)
      let #Round_fDiff  =  #Original_famount - #GL_amount
      let #Total_Round_fDiff = #Total_Round_fDiff + #Round_fDiff

      if #Total_Round_fDiff >= 0.01
          let #GL_amount = #GL_amount + 0.01
          let #Total_Round_fDiff = #Total_Round_fDiff - 0.01
      end-if
      if #Total_Round_fDiff <= -0.01
          let #GL_amount = #GL_amount - 0.01
          let #Total_Round_fDiff = #Total_Round_fDiff + 0.01
      end-if
  end-if

  if $DrCr = 'C'                                                     !Liability Account
      let #Monetary_Amount = #Monetary_Amount * -1
      let #GL_amount       = #GL_amount * -1
      add #Monetary_Amount to #PayGroup_Credits
  else                                                               !Expense Account
      add #Monetary_Amount to #PayGroup_Debits
  end-if

  let $Journal_ID               = ' '
  let $Journal_Date             = $Accounting_Dt
  let #Journal_line             = 0
  let $Statistics_Code          = ' '
  let #Statistic_Amount         = 0
  let #Accounting_Period        = 0
  let #Fiscal_Year              = 0
  let $Open_Item_Status         = 'N'
  let $Jrnl_Line_Status         = '0'
  let $GL_Distrib_Status        = 'N'
  let $Ledger                   = ' '
  let $Ledger_Group             = ' '
  let $GL_Distrib_Status        = 'N'
  let #Process_Instance         = $Prcs_Process_Instance
  let $KK_Amount_Type           = '1'
  let $Audit_Actn               = 'A'
  let $In_Process_Flg           = ' '
  let $Budget_Line_Status       = 'N'
  let $BUDGET_DT                = $Accounting_Dt
  let $Use_Distribution         = 'N'

  if RTRIM($Line_Descr,' ') = ''
      let $Line_Descr               = $Payroll_line_descr
  end-if

  do Get-Seqnum (#max_line, #proc_seq_no, #gl_entry_line)
  let $proc_seq_no       = #proc_seq_no
  let $gl_entry_line     = #gl_entry_line

  let $err-statement1 = 'PAYGL01, Insert-Error - WRITE-ACCOUNTING-LINE'
  let $err-statement2 = 'Key Values: TABLE '||'PS_HR_ACCTG_LN_STG'||
                        ', GL_RUN_DATE '||$gl_run_date||
                        ', PROCESS_INSTANCE '||$Process_Instance||
                        ', GL_RUN_SEQ '||$proc_seq_no||
                        ', GL_ENTRY_LINE '||$gl_entry_line||
                        ', KK_AMOUNT_TYPE '||$KK_Amount_Type||
                        ', AUDIT_ACTN '||$Audit_Actn||
                        ', IN_PROCESS_FLG '||$In_Process_Flg||
                        ', BUDGET_LINE_STATUS '||$Budget_Line_Status||
                        ', BUDGET_DT '||$BUDGET_DT||
                        ', BUSINESS_UNIT_GL '||$Business_Unit_GL||
                        ', JOURNAL_ID '||$Journal_Id||
                        ', JOURNAL_DATE '||$Journal_Date||
                        ', JOURNAL_LINE '||$Journal_Line||
                        ', ACCOUNT '||$GL_Account||
                        ', DEPTID '||$GL_DeptID||
                        ', PROJECT_ID '||$Project_Id||
                        ', PRODUCT '||$Product||
                        ', FUND_CODE '||$Fund_Code||
                        ', PROGRAM_CODE  '||$Program_Code||
                        ', CLASS_FLD '||$Class_Fld||
                        ', AFFILIATE '||$Affiliate||
                        ', OPERATING_UNIT '||$Operating_Unit||
                        ', ALTACCT'||$AltAcct||
                        ', BUDGET_REF'|| $Budget_Ref ||
                        ', CHARTFIELD1'|| $Chartfield1 ||
                        ', CHARTFIELD2'|| $Chartfield2 ||
                        ', CHARTFIELD3'|| $Chartfield3 ||
                        ', AFFILIATE_INTRA1' ||$Affiliate_Intra1||
                        ', AFFILIATE_INTRA2' ||$Affiliate_Intra2||
                        ', STATISTICS_CODE '||$Statistics_Code||
                        ', MONETARY_AMOUNT '||$GL_Amount||
                        ', FOREIGN_AMOUNT '||$Monetary_Amount||
                        ', FOREIGN_CURRENCY '||$currency_cd_hr||
                        ', RT_TYPE '||$hr_rate_type||
                        ', RATE_MULT '||$rate_mult||
                        ', RATE_DIV '||$rate_div||
                        ', STATISTIC_AMOUNT '||$Statistics_Amount||
                        ', JRNL_LN_REF '||$Jrnl_Ln_Ref||
                        ', OPEN_ITEM_STATUS '||$Open_Item_Status||
                        ', LINE_DESCR '||$Line_Descr||
                        ', JRNL_LINE_STATUS '||$Jrnl_Line_Status||
                        ', JOURNAL_LINE_DATE '||$Journal_Line_Date||
                        ', BUSINESS_UNIT '||$Business_Unit_HR||
                        ', APPL_JRNL_ID '||$Appl_Jrnl_ID||
                        ', ACCOUNTING_DT '||$Accounting_Dt||
                        ', GL_DISTRIB_STATUS '||$GL_Distrib_Status||
                        ', CURRENCY_CD '||$Currency_Cd_GL||
                        ', ACCOUNTING_PERIOD '||$Accounting_Period||
                        ', FISCAL_YEAR '||$Fiscal_Year||
                        ', LEDGER '||$Ledger||
                        ', LEDGER_GROUP '||$Ledger_Group||
                        ', USE_DISTRIBUTION '||$Use_Distribution

  let $Line_Descr = substr($Line_Descr, 1, 30)

  if $Line_Descr = ''
      let $Line_Descr               = ' '
  end-if

begin-SQL on-error=SQL-Statement-Error   !  on-error=Insert-HR-Error
INSERT INTO PS_HR_ACCTG_LN_STG
               (RUN_DT,
                PROCESS_INSTANCE,
                SEQNUM,
                LINE_NBR,
                KK_AMOUNT_TYPE,
                AUDIT_ACTN,
                IN_PROCESS_FLG,
                BUDGET_LINE_STATUS,
                BUDGET_DT,
                BUSINESS_UNIT_GL,
                JOURNAL_ID,
                JOURNAL_DATE,
                JOURNAL_LINE,
                ACCOUNT,
                DEPTID,
                PROJECT_ID,
                PRODUCT,
                FUND_CODE,
                PROGRAM_CODE,
                CLASS_FLD,
                AFFILIATE,
                OPERATING_UNIT,
                ALTACCT,
                BUDGET_REF,
                CHARTFIELD1,
                CHARTFIELD2,
                CHARTFIELD3,
                AFFILIATE_INTRA1,
                AFFILIATE_INTRA2,
                STATISTICS_CODE,
                MONETARY_AMOUNT,
                FOREIGN_AMOUNT,
                FOREIGN_CURRENCY,
                RT_TYPE,
                RATE_MULT,
                RATE_DIV,
                STATISTIC_AMOUNT,
                JRNL_LN_REF,
                OPEN_ITEM_STATUS,
                LINE_DESCR,
                JRNL_LINE_STATUS,
                JOURNAL_LINE_DATE,
                BUSINESS_UNIT,
                APPL_JRNL_ID,
                ACCOUNTING_DT,
                GL_DISTRIB_STATUS,
                CURRENCY_CD,
                ACCOUNTING_PERIOD,
                FISCAL_YEAR,
                LEDGER,
                LEDGER_GROUP,
                USE_DISTRIBUTION
                )
        VALUES ($gl_run_date,
                #Process_Instance,
                #proc_seq_no,
                #gl_entry_line,
                $KK_Amount_Type,
                $Audit_Actn,
                $In_Process_Flg,
                $Budget_Line_Status,
                $BUDGET_DT,
                $Business_Unit_GL,
                $Journal_ID,
                $Journal_date,
                #Journal_line,
                $GL_Account,
                $GL_DeptID,
                $Project_Id,
                $Product,
                $Fund_Code,
                $Program_Code,
                $Class_Fld,
                $Affiliate,
                $Operating_Unit,
                $AltAcct,
                $Budget_Ref,
                $Chartfield1,
                $Chartfield2,
                $Chartfield3,
                $Affiliate_Intra1,
                $Affiliate_Intra2,
                $Statistics_Code,
                #GL_amount,                      ! goes to monetary amount column
                #Monetary_Amount,                ! goes to foreign amount column
                $Currency_Cd_HR,                 ! hr currency
                $hr_Rate_Type,
                #Rate_Mult,
                #Rate_Div,
                #Statistic_Amount,
                $Jrnl_Ln_Ref,
                $Open_Item_Status,
                $Line_Descr,
                $Jrnl_Line_Status,
                $Journal_Line_Date,
                $Business_Unit_hr,               ! business unit hr
                $journal_template,
                $Accounting_Dt,                  ! check_dt
                $GL_Distrib_Status,
                $Currency_Cd_GL,                 ! gl currency
                #Accounting_Period,
                #Fiscal_Year,
                $Ledger,                         ! leave blank
                $Ledger_Group,                   ! leave blank
                $Use_Distribution)

end-SQL

! ** = lines filled in by GL Distribution program
  add  1 to #PayGroup_Acctg_Lines

end-procedure

!******************************
begin-procedure Insert-Accrual
!******************************

  let $Line_Descr          = substr($Payroll_line_descr , 1, 30)
  if $DrCr = 'C'
      let #Monetary_Amount = #Monetary_Amount * -1
  end-if

  move #Monetary_Amount to $Monetary_Amount 999999999999999.999mi

  let $err-statement1 = 'PAYGL01, Insert Error - Insert-Accrual'
  let $err-statement2 = 'Key Values: TABLE: PS_R_HR_ACCRUAL'    ||
                        ', COMPANY:'         ||$Company         ||
                        ', PAYGROUP:'        ||$PayGroup        ||
                        ', PAY_END_DT:'      ||$PayEndDt        ||
                        ', AMOUNT:'          ||$Monetary_Amount ||
                        ', DRCR:'            ||$DrCr            ||
                        ', BUSINESS_UNIT_GL:'||$Business_Unit_GL||
                        ', ACCOUNT:'         ||$GL_Account      ||
                        ', DEPTID_CF:'       ||$GL_DeptID       ||
                        ', PROJECT_ID:'      ||$Project_ID      ||
                        ', PRODUCT:'         ||$Product         ||
                        ', FUND CODE:'       ||$Fund_Code       ||
                        ', PROGRAM CODE:'    ||$Program_Code    ||
                        ', CLASS FLD:'       ||$Class_Fld       ||
                        ', AFFILIATE:'       ||$Affiliate       ||
                        ', OPERATING UNIT:'  ||$Operating_Unit  ||
                        ', ALTACCT:'         ||$AltAcct         ||
                        ', BUDGET REF:'      ||$Budget_Ref      ||
                        ', CHARTFIELD1:'     ||$ChartField1     ||
                        ', CHARTFIELD2:'     ||$ChartField2     ||
                        ', CHARTFIELD3:'     ||$ChartField3     ||
                        ', AFFILIATE_INTRA1:'||$Affiliate_Intra1||
                        ', AFFILIATE_INTRA2:'||$Affiliate_Intra2||
                        ', JRNL_LN_REF:'     ||$Jrnl_Ln_Ref     ||
                        ', BUSINESS_UNIT:'   ||$Business_Unit_HR||
                        ', APPL_JRNL_ID:'    ||$journal_template||
                        ', LINE_DESCR:'      ||$Line_Descr      ||
                        ', SETID_HR:'        ||$Setid_HR        ||
                        ', CURRENCY_CD:'     ||$currency_cd_gl  ||
                        ', REVERSED:'        ||'N'


begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_R_HR_ACCRUAL (COMPANY,
                             PAYGROUP,
                             PAY_END_DT,
                             AMOUNT,
                             DRCR,
                             BUSINESS_UNIT_GL,
                             ACCOUNT,
                             DEPTID_CF,
                             PROJECT_ID,
                             PRODUCT,
                             FUND_CODE,
                             PROGRAM_CODE,
                             CLASS_FLD,
                             AFFILIATE,
                             OPERATING_UNIT,
                             ALTACCT,
                             BUDGET_REF,
                             CHARTFIELD1,
                             CHARTFIELD2,
                             CHARTFIELD3,
                             AFFILIATE_INTRA1,
                             AFFILIATE_INTRA2,
                             JRNL_LN_REF,
                             BUSINESS_UNIT,
                             APPL_JRNL_ID,
                             LINE_DESCR,
                             SETID_HR,
                             CURRENCY_CD,
                             REVERSED)
                    VALUES ($Company,
                            $PayGroup,
                            $PayEndDt,
                            #Monetary_Amount,
                            $DrCr,
                            $Business_Unit_GL,
                            $GL_Account,
                            $GL_DeptID,
                            $Project_ID,
                            $Product,
                            $Fund_Code,
                            $Program_Code,
                            $Class_Fld,
                            $Affiliate,
                            $Operating_Unit,
                            $AltAcct,
                            $Budget_Ref,
                            $ChartField1,
                            $ChartField2,
                            $ChartField3,
                            $Affiliate_Intra1,
                            $Affiliate_Intra2,
                            $Jrnl_Ln_Ref,
                            $Business_Unit_HR,
                            $journal_template,
                            $Line_Descr,
                            $Setid_HR,
                            $currency_cd_gl,
                            'N')
end-SQL

  let $Line_Descr = ' '
end-procedure

!****************************************************************************
! SQL-STATEMENT-ERROR                                                       *
! Write error message to PAY_MESSAGE table & SQR log                        *
!****************************************************************************
begin-procedure SQL-STATEMENT-ERROR

  if #SQL-Status <> 0
      DISPLAY 'SQL-STATEMENT-ERROR '

      display $err-statement1
      display $err-statement2
      display ' Error : ' noline
      display $SQL-error
      display ' SQL Status : ' noline
      display #SQL-Status

      do ROLLBACK-TRANSACTION
      move 0 to #Total_Acctg_Lines
      move 0 to #PayGroup_Acctg_Lines
      stop
  end-if

end-procedure

!****************************************************************************
! Duplicate-GL-Gen-History                                                  *
!****************************************************************************

begin-procedure Duplicate-GL-Gen-History ($dt, $runid, $Company, $PayGroup, $PayEndDt, :$DupEntry)

  if rtrim($runid,' ') = ''
      let $DupWhere = 'AND COMPANY = ''' || $Company || ''' AND PAYGROUP = ''' || $PayGroup ||
                      ''' AND PAY_END_DT = ''' || $PayEndDt || ''''
  else
      let $DupWhere = 'AND RUN_ID = ''' || $runid||''''
  end-if

  let $DupEntry = 'N'

begin-select on-error=SQL-error
RUN_DT
  let $DupEntry = 'Y'
FROM PS_GL_GEN_HISTORY
WHERE RUN_DT     = $dt
[$DupWhere]
AND   GL_RUN_NUM = 0
end-select
end-procedure

!***********************************************************************
! Get-Next-SeqNum                                                      *
!***********************************************************************
begin-procedure Get-Next-SeqNum ($dt, :#seq_no)

  let #seq_no       = 0

begin-select on-error=SQL-error
max(SEQNUM)     &SeqNum
  let #seq_no       = &SeqNum
FROM PS_GL_GEN_HISTORY
WHERE RUN_DT = $dt
end-select

  let #seq_no = #seq_no + 1
end-procedure

!****************************************************************************
! Insert-Dist-GL-Gen-History                                                *
!****************************************************************************
begin-procedure Insert-Dist-GL-Gen-History ($dt, #seq_no, $runid,
                                            $Company, $Paygroup, $PayEndDt)

  move #seq_no to $SeqNum 99999

  let $err-statement1 = $prgm_name || ', Insert Error - Insert-Dist-GL-Gen-History'
  let $err-statement2 = 'Bind Variables: Run_Dt: '    ||$dt          ||
                                    ' SEQNUM:'        ||$SeqNum      ||
                                    ' GL_Run_Num:'    ||'0'          ||
                                    ' RUN_ID:'        ||$runid       ||
                                    ' COMPANY:'       ||$Company     ||
                                    ' PAYGROUP:'      ||$PayGroup    ||
                                    ' PAY_END_DT:'    ||$PayEndDt    ||
                                    ' GL_GNE_STATUS:' ||'N'          ||
                                    ' PROGRAM_ID:'    ||'PAYGL01'

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_GL_GEN_HISTORY
(RUN_DT,
 SEQNUM,
 GL_RUN_NUM,
 RUN_ID,
 COMPANY,
 PAYGROUP,
 PAY_END_DT,
 GL_GEN_STATUS,
 PROGRAM_ID)
VALUES
($dt,
 #seq_no,
 0,
 $runid,
 $Company,
 $PayGroup,
 $PayEndDt,
 'N',
 'PAYGL01')
end-SQL

end-procedure


!****************************************************************************
! Delete-Dist-GL-Gen-History                                                *
!****************************************************************************

begin-procedure Delete-Dist-GL-Gen-History ($runid, $Company, $PayGroup, $PayEndDt)

  if rtrim($runid,' ') = ''
      let $DelWhere = 'AND COMPANY = ''' || $Company || ''' AND PAYGROUP = ''' || $PayGroup ||
                      ''' AND PAY_END_DT = ''' || $PayEndDt || ''''
  else
      let $DelWhere = 'AND RUN_ID = ''' || $runid||''''
  end-if

  let $err-statement1 = 'PAYGL01, Delete Error - Delete-Dist-GL-Gen-History '
  let $err-statement2 = 'Bind Variables: Run ID:'||$runid||
                                      ' Company:'||$Company||
                                      ' Paygroup:'||$PayGroup||
                                      ' PayEndDt:'||$PayEndDt

begin-SQL on-error=SQL-Statement-Error
DELETE FROM PS_GL_GEN_HISTORY
WHERE GL_RUN_NUM    = 0
AND   GL_GEN_STATUS = 'N'
AND   PROGRAM_ID    = 'PAYGL01'
[$DelWhere]
end-SQL
end-procedure

!********************************
begin-procedure Update-GL-History
!********************************

  if #gl_run_num = 0
      do Get-Max-Cntrl-Num ($gl_run_date, #gl_run_num, #gl_seq_num)
  else
      do Get-Max-Seq-Num ($gl_run_date, #gl_seq_num)
  end-if

  let #max_seq_num = #gl_seq_num + #proc_seq_no

  let #idx = #gl_seq_num + 1
  while #idx <= #max_seq_num

      do Add-to-GL-Run-History ($prgm_name, $gl_run_date, #gl_run_num, #idx, $RC_RunID,
                                $RC_Company, $RC_PayGroup, $RC_PayEndDt)
      let #idx = #idx + 1
  end-while
  do Commit-Transaction

  if #gl_seq_num = #last_posted_seq_num
      do Update-Acctg-Ln-Seq-Num ($prgm_name, $gl_run_date, $Prcs_Process_Instance, 'N', #gl_seq_num)
  else
      do Update-Acctg-Ln-Seq-Num ($prgm_name, $gl_run_date, $Prcs_Process_Instance, 'Y', #last_posted_seq_num)
      do Update-Acctg-Ln-Seq-Num ($prgm_name, $gl_run_date, $Prcs_Process_Instance, 'N', #gl_seq_num)
  end-if

  do Copy-from-Acctg-Ln-Stg ($prgm_name, $gl_run_date, $Prcs_Process_Instance)
  do Clear-Acctg-Ln-Stg ($prgm_name, $gl_run_date, $Prcs_Process_Instance)

  let #last_posted_seq_num = #max_seq_num
  let #proc_seq_no = 0
  do Commit-Transaction

end-procedure

!************************************
begin-procedure Write-Expense-Payment
!************************************

  let $Payment_Exist = 'N'

  do Find-Payment-Issued

  if $Payment_Exist = 'N'
      do Select-Account
      do Write-Payment-Issued
  else
      do Update-Payment-Issued
  end-if

end-procedure

!*****************************
begin-procedure Select-Account
!*****************************

begin-select loops= 1 on-error=SQL-error
PED.ACCT_CD

  move &PED.ACCT_CD            to $AcctCd
  do Get-Acct-Cd-Data

FROM PS_PAY_NA_ERN_DIST PED
WHERE PED.COMPANY        = $Company
  AND PED.PAYGROUP       = $PayGroup
  AND PED.PAY_END_DT     = $PayEndDt
  AND PED.OFF_CYCLE      = $OffCycle
  AND PED.PAGE_NUM       = #PageNum
  AND PED.LINE_NUM       = #LineNum
  AND PED.SEPCHK         = #SepCheck
  AND PED.ERNCD          = $Erncd
end-select
end-procedure

!***********************************
begin-procedure Write-Payment-Issued
!***********************************

  let $Disp_Empl_Rcd    = #EmplRcd
  let $Disp_Ex_Line_Nbr = #Ex_Line_Nbr

  let $err-statement1 = 'PAYGL01, Insert-Error - Write-Payment-Issued'
  let $err-statement2 = 'Key Values: TABLE '||'PS_PAY_ISS_STG_PUB'||
                        ', EMPLID '||$Emplid||
                        ', EMPL_RCD '||$Disp_Empl_Rcd||
                        ', EX_DOC_ID '||$Ex_Doc_Id||
                        ', EX_DOC_TYPE '||$Ex_Doc_Type||
                        ', EX_LINE_NBR '||$Disp_Ex_Line_Nbr

Begin-SQL ON-ERROR=SQL-Statement-Error
   INSERT INTO PS_PAY_ISS_STG_PUB
          (EMPLID,
           EMPL_RCD,
           EX_DOC_ID,
           EX_DOC_TYPE,
           EX_LINE_NBR,
           MONETARY_AMOUNT,
           CURRENCY_CD,
           PAYCHECK_STATUS,
           PAYCHECK_NBR,
           CHECK_DT,
           FORM_ID,
           ACCOUNT,
           AUDIT_ACTN,
           PROCESS_INSTANCE
           )
   VALUES
          ($Emplid,
           #EmplRcd,
           $Ex_Doc_Id,
           $Ex_Doc_Type,
           #Ex_Line_Nbr,
           #Monetary_Amount,
           $Ex_Currency,
           $PayCheck_Status,
           #PayCheck_Nbr,
           $CheckDt,
           $PayCheckFormID,
           $Account,
           'A',
           #Prcs_Process_Instance
           );
End-SQL

end-procedure

!**********************************
begin-procedure Find-Payment-Issued
!**********************************

Begin-SELECT on-error=SQL-error
EX_DOC_ID

  let $Payment_Exist = 'Y'

FROM  PS_PAY_ISS_STG_PUB
WHERE EMPLID        = $Emplid
  AND EMPL_RCD      = #EmplRcd
  AND EX_DOC_ID     = $Ex_Doc_Id
  AND EX_DOC_TYPE   = $Ex_Doc_Type
  AND EX_LINE_NBR   = #Ex_Line_Nbr
End-Select

end-procedure

!************************************
begin-procedure Update-Payment-Issued
!************************************

  let $Disp_Empl_Rcd    = #EmplRcd
  let $Disp_Ex_Line_Nbr = #Ex_Line_Nbr

  let $err-statement1 = 'PAYGL01, Update-Error - Update-Payment-Issued'
  let $err-statement2 = 'Key Values: TABLE '||'PS_PAY_ISS_STG_PUB'||
                        ', EMPLID '||$Emplid||
                        ', EMPL_RCD '||$Disp_Empl_Rcd||
                        ', EX_DOC_ID '||$Ex_Doc_Id||
                        ', EX_DOC_TYPE '||$Ex_Doc_Type||
                        ', EX_LINE_NBR '||$Disp_Ex_Line_Nbr

begin-SQL ON-ERROR=SQL-Statement-Error
   UPDATE PS_PAY_ISS_STG_PUB
          SET MONETARY_AMOUNT = MONETARY_AMOUNT + #Monetary_Amount
          WHERE EMPLID        = $Emplid
            AND EMPL_RCD      = #EmplRcd
            AND EX_DOC_ID     = $Ex_Doc_Id
            AND EX_DOC_TYPE   = $Ex_Doc_Type
            AND EX_LINE_NBR   = #Ex_Line_Nbr
end-SQL
end-procedure

!*******************************************
begin-procedure Remove-Zero-Expense-Payments
!*******************************************

  let $err-statement1 = 'PAYGL01, Delete-Error - Remove-Zero-Expense-Payments'
  let $err-statement2 = ' '

begin-SQL on-error=sql-statement-error
DELETE FROM PS_PAY_ISS_STG_PUB
WHERE MONETARY_AMOUNT = 0
end-SQL
end-procedure

!**********************************
begin-procedure Find-Original-Check
!**********************************

  let $OrigChk_Found          = 'N'

begin-select on-error=SQL-error
OCHECK.PAY_END_DT
OCHECK.OFF_CYCLE
OCHECK.PAGE_NUM
OCHECK.LINE_NUM
OCHECK.SEPCHK

  let $OrigChk_PayEndDt       = &OCHECK.PAY_END_DT
  let $OrigChk_OffCycle       = &OCHECK.OFF_CYCLE
  let #OrigChk_PageNum        = &OCHECK.PAGE_NUM
  let #OrigChk_LineNum        = &OCHECK.LINE_NUM
  let #OrigChk_SepChk         = &OCHECK.SEPCHK
  let $OrigChk_Found          = 'Y'

from PS_PAY_CHECK OCHECK
WHERE OCHECK.COMPANY          = $Company
  AND OCHECK.PAYGROUP         = $PayGroup
  AND OCHECK.PAYCHECK_NBR     = #PayCheckNbr
  AND OCHECK.FORM_ID          = $FormID
  AND OCHECK.PAYCHECK_STATUS  IN ('A', 'R')
  AND OCHECK.PAYCHECK_OPTION <> 'R'
end-select
end-procedure

!*******************************
begin-procedure Reverse-Earnings
!*******************************

begin-select on-error=SQL-error
OPE.ADDL_NBR
OPE.EMPLID
OPE.EMPL_RCD
OPE.ERNCD
OPE.EARNINGS
OPE.BUSINESS_UNIT
OPE.DEPTID
OPE.POSITION_NBR
OPE.JOBCODE
OPE.EX_DOC_ID
OPE.EX_DOC_TYPE
OPE.EX_LINE_NBR

  let #PrevAddlNbr    = &OPE.ADDL_NBR
  let $PrevEmplID     = &OPE.EMPLID
  let #PrevEmplRcd    = &OPE.EMPL_RCD
  let $PrevErnCd      = &OPE.ERNCD
  let #PrevEarnings   = &OPE.EARNINGS * -1
  let $PrevBusUnit    = &OPE.BUSINESS_UNIT
  let $PrevDeptID     = &OPE.DEPTID
  let $PrevPosnNbr    = &OPE.POSITION_NBR
  let $PrevJobCode    = &OPE.JOBCODE
  let $PrevExDocID    = &OPE.EX_DOC_ID
  let $PrevExDocType  = &OPE.EX_DOC_TYPE
  let #PrevExLineNbr  = &OPE.EX_LINE_NBR

  do Write-NA-Earnings-Rec

from PS_PAY_NA_EARNINGS OPE
WHERE OPE.COMPANY       = $Company
  AND OPE.PAYGROUP      = $PayGroup
  AND OPE.PAY_END_DT    = $OrigChk_PayEndDt
  AND OPE.OFF_CYCLE     = $OrigChk_OffCycle
  AND OPE.PAGE_NUM      = #OrigChk_PageNum
  AND OPE.LINE_NUM      = #OrigChk_LineNum
  AND OPE.SEPCHK        = #OrigChk_SepChk
end-select
end-procedure

!*******************************
begin-procedure Reverse-Ern-Dist
!*******************************

begin-select on-error=SQL-error
OED.ADDL_NBR
OED.EMPLID
OED.EMPL_RCD
OED.ERNCD
OED.ACCT_CD
OED.EARNINGS
OED.PY_ACCRUAL_AMT

  let #EDst_AddlNbr   = &OED.ADDL_NBR
  let $EDst_EmplID    = &OED.EMPLID
  let #EDst_EmplRcd   = &OED.EMPL_RCD
  let $EDst_ErnCd     = &OED.ERNCD
  let $EDst_AcctCd    = &OED.ACCT_CD
  let #EDst_Earnings  = &OED.EARNINGS * -1
  let #EDst_AccrAmt   = &OED.PY_ACCRUAL_AMT * -1

  do Write-NA-Ern-Dist-Rec

from PS_PAY_NA_ERN_DIST OED
WHERE OED.COMPANY       = $Company
  AND OED.PAYGROUP      = $PayGroup
  AND OED.PAY_END_DT    = $OrigChk_PayEndDt
  AND OED.OFF_CYCLE     = $OrigChk_OffCycle
  AND OED.PAGE_NUM      = #OrigChk_PageNum
  AND OED.LINE_NUM      = #OrigChk_LineNum
  AND OED.SEPCHK        = #OrigChk_SepChk
end-select
end-procedure

!*******************************
begin-procedure Reverse-Ded-Dist
!*******************************

begin-select on-error=SQL-error
ODD.BENEFIT_RCD_NBR
ODD.PLAN_TYPE
ODD.BENEFIT_PLAN
ODD.DEDCD
ODD.DED_CLASS
ODD.DED_SLSTX_CLASS
ODD.PY_LIABEXPFLG
ODD.ACCT_CD
ODD.SEQNO
ODD.ADDL_NBR
ODD.ERNCD
ODD.ACCOUNT
ODD.DED_CUR
ODD.PY_ACCRUAL_AMT
ODD.GARN_PRIORITY
ODD.GARNID
ODD.BOND_ID
ODD.BOND_OWNER_ID
ODD.BOND_OTH_REG_TYPE
ODD.BOND_OTH_REG_ID
ODD.BOND_LOG_SEQ

  let #BenefitRcdNo    = &ODD.BENEFIT_RCD_NBR
  let $PlanType        = &ODD.PLAN_TYPE
  let $BenefitPlan     = &ODD.BENEFIT_PLAN
  let $DedCd           = &ODD.DEDCD
  let $DedClass        = &ODD.DED_CLASS
  let $DedSlstxClass   = &ODD.DED_SLSTX_CLASS
  let $LiabExpInd      = &ODD.PY_LIABEXPFLG
  let $AcctCd          = &ODD.ACCT_CD
  let #DedSeqNo        = &ODD.SEQNO
  let #EDst_AddlNbr    = &ODD.ADDL_NBR
  let $EDst_ErnCd      = &ODD.ERNCD
  let $Account         = &ODD.ACCOUNT
  let #DistAmount      = &ODD.DED_CUR * -1
  let #DistAccrAmt     = &ODD.PY_ACCRUAL_AMT * -1
  let #GarnPriority    = &ODD.GARN_PRIORITY
  let $GarnID          = &ODD.GARNID
  let $BondID          = &ODD.BOND_ID
  let $BondOwnerID     = &ODD.BOND_OWNER_ID
  let $BondOthRegType  = &ODD.BOND_OTH_REG_TYPE
  let $BondOthRegID    = &ODD.BOND_OTH_REG_ID
  let #BondLogSeq      = &ODD.BOND_LOG_SEQ

  do Write-NA-Ded-Dist-Rec ($LiabExpInd, $Account)

from PS_PAY_NA_DED_DIST ODD
WHERE ODD.COMPANY       = $Company
  AND ODD.PAYGROUP      = $PayGroup
  AND ODD.PAY_END_DT    = $OrigChk_PayEndDt
  AND ODD.OFF_CYCLE     = $OrigChk_OffCycle
  AND ODD.PAGE_NUM      = #OrigChk_PageNum
  AND ODD.LINE_NUM      = #OrigChk_LineNum
  AND ODD.SEPCHK        = #OrigChk_SepChk
end-select
end-procedure

!*******************************
begin-procedure Reverse-Ded-Liab
!*******************************

begin-select on-error=SQL-error
ODL.BENEFIT_RCD_NBR
ODL.PLAN_TYPE
ODL.BENEFIT_PLAN
ODL.DEDCD
ODL.DED_CLASS
ODL.DED_SLSTX_CLASS
ODL.PY_LIABEXPFLG
ODL.SEQNO
ODL.ADDL_NBR
ODL.DED_CUR
ODL.GARN_PRIORITY
ODL.GARNID
ODL.BOND_ID
ODL.BOND_OWNER_ID
ODL.BOND_OTH_REG_TYPE
ODL.BOND_OTH_REG_ID
ODL.BOND_LOG_SEQ
ODL.BUSINESS_UNIT
ODL.BUSINESS_UNIT_AP
ODL.BUSINESS_UNIT_GL
ODL.EMPLID
ODL.EMPL_RCD
ODL.ACCOUNT
ODL.DEPTID_CF
ODL.PROJECT_ID
ODL.PRODUCT
ODL.FUND_CODE
ODL.PROGRAM_CODE
ODL.CLASS_FLD
ODL.AFFILIATE
ODL.OPERATING_UNIT
ODL.ALTACCT
ODL.BUDGET_REF
ODL.CHARTFIELD1
ODL.CHARTFIELD2
ODL.CHARTFIELD3
ODL.AFFILIATE_INTRA1
ODL.AFFILIATE_INTRA2
ODL.AP_STATUS

  let #BenefitRcdNo     = &ODL.BENEFIT_RCD_NBR
  let $PlanType         = &ODL.PLAN_TYPE
  let $BenefitPlan      = &ODL.BENEFIT_PLAN
  let $DedCd            = &ODL.DEDCD
  let $DedClass         = &ODL.DED_CLASS
  let $DedSlstxClass    = &ODL.DED_SLSTX_CLASS
  let $LiabExpInd       = &ODL.PY_LIABEXPFLG
  let #DedSeqNo         = &ODL.SEQNO
  let #EDst_AddlNbr     = &ODL.ADDL_NBR
  let #DistAmount       = &ODL.DED_CUR * -1
  let #GarnPriority     = &ODL.GARN_PRIORITY
  let $GarnID           = &ODL.GARNID
  let $BondID           = &ODL.BOND_ID
  let $BondOwnerID      = &ODL.BOND_OWNER_ID
  let $BondOthRegType   = &ODL.BOND_OTH_REG_TYPE
  let $BondOthRegID     = &ODL.BOND_OTH_REG_ID
  let #BondLogSeq       = &ODL.BOND_LOG_SEQ
  let $Business_Unit    = &ODL.BUSINESS_UNIT
  let $Business_Unit_AP = &ODL.BUSINESS_UNIT_AP
  let $Business_Unit_GL = &ODL.BUSINESS_UNIT_GL
  let $EDst_EmplID      = &ODL.EMPLID
  let #EDst_EmplRcd     = &ODL.EMPL_RCD
  let $Account          = &ODL.ACCOUNT
  let $GL_DeptID        = &ODL.DEPTID_CF
  let $Project_ID       = &ODL.PROJECT_ID
  let $Product          = &ODL.PRODUCT
  let $Fund_Code        = &ODL.FUND_CODE
  let $Program_Code     = &ODL.PROGRAM_CODE
  let $Class_Fld        = &ODL.CLASS_FLD
  let $Affiliate        = &ODL.AFFILIATE
  let $Operating_Unit   = &ODL.OPERATING_UNIT
  let $AltAcct          = &ODL.ALTACCT
  let $Budget_Ref       = &ODL.BUDGET_REF
  let $ChartField1      = &ODL.CHARTFIELD1
  let $ChartField2      = &ODL.CHARTFIELD2
  let $ChartField3      = &ODL.CHARTFIELD3
  let $Affiliate_Intra1 = &ODL.AFFILIATE_INTRA1
  let $Affiliate_Intra2 = &ODL.AFFILIATE_INTRA2
  let $AP_Status        = &ODL.AP_STATUS

  do Write-NA-Ded-Liab-Rec ($LiabExpInd, $Account, 'Y')

from PS_PAY_NA_DED_LIAB ODL
WHERE ODL.COMPANY       = $Company
  AND ODL.PAYGROUP      = $PayGroup
  AND ODL.PAY_END_DT    = $OrigChk_PayEndDt
  AND ODL.OFF_CYCLE     = $OrigChk_OffCycle
  AND ODL.PAGE_NUM      = #OrigChk_PageNum
  AND ODL.LINE_NUM      = #OrigChk_LineNum
  AND ODL.SEPCHK        = #OrigChk_SepChk
end-select
end-procedure

!*******************************
begin-procedure Reverse-Tax-Dist
!*******************************

begin-select on-error=SQL-error
OTD.STATE
OTD.LOCALITY
OTD.TAX_CLASS
OTD.PY_LIABEXPFLG
OTD.ACCT_CD
OTD.SEQNO
OTD.ADDL_NBR
OTD.ERNCD
OTD.ACCOUNT
OTD.TAX_CUR
OTD.PY_ACCRUAL_AMT

  let $State           = &OTD.STATE
  let $Locality        = &OTD.LOCALITY
  let $TaxClass        = &OTD.TAX_CLASS
  let $LiabExpInd      = &OTD.PY_LIABEXPFLG
  let $AcctCd          = &OTD.ACCT_CD
  let #TaxSeqNo        = &OTD.SEQNO
  let #EDst_AddlNbr    = &OTD.ADDL_NBR
  let $EDst_ErnCd      = &OTD.ERNCD
  let $Account         = &OTD.ACCOUNT
  let #DistAmount      = &OTD.TAX_CUR * -1
  let #DistAccrAmt     = &OTD.PY_ACCRUAL_AMT * -1

  do Write-NA-Tax-Dist-Rec ($LiabExpInd, $Account)

from PS_PAY_NA_TAX_DIST OTD
WHERE OTD.COMPANY       = $Company
  AND OTD.PAYGROUP      = $PayGroup
  AND OTD.PAY_END_DT    = $OrigChk_PayEndDt
  AND OTD.OFF_CYCLE     = $OrigChk_OffCycle
  AND OTD.PAGE_NUM      = #OrigChk_PageNum
  AND OTD.LINE_NUM      = #OrigChk_LineNum
  AND OTD.SEPCHK        = #OrigChk_SepChk
end-select
end-procedure

!*******************************
begin-procedure Reverse-Tax-Liab
!*******************************

begin-select on-error=SQL-error
OTL.STATE
OTL.LOCALITY
OTL.TAX_CLASS
OTL.PY_LIABEXPFLG
OTL.SEQNO
OTL.ADDL_NBR
OTL.TAX_CUR
OTL.BUSINESS_UNIT
OTL.BUSINESS_UNIT_AP
OTL.BUSINESS_UNIT_GL
OTL.EMPLID
OTL.EMPL_RCD
OTL.PAY_TAXES_THRU_AP
OTL.ACCOUNT
OTL.DEPTID_CF
OTL.PROJECT_ID
OTL.PRODUCT
OTL.FUND_CODE
OTL.PROGRAM_CODE
OTL.CLASS_FLD
OTL.AFFILIATE
OTL.OPERATING_UNIT
OTL.ALTACCT
OTL.BUDGET_REF
OTL.CHARTFIELD1
OTL.CHARTFIELD2
OTL.CHARTFIELD3
OTL.AFFILIATE_INTRA1
OTL.AFFILIATE_INTRA2
OTL.AP_STATUS

  let $State            = &OTL.STATE
  let $Locality         = &OTL.LOCALITY
  let $TaxClass         = &OTL.TAX_CLASS
  let $LiabExpInd       = &OTL.PY_LIABEXPFLG
  let #TaxSeqNo         = &OTL.SEQNO
  let #EDst_AddlNbr     = &OTL.ADDL_NBR
  let #DistAmount       = &OTL.TAX_CUR * -1
  let $Business_Unit    = &OTL.BUSINESS_UNIT
  let $Business_Unit_AP = &OTL.BUSINESS_UNIT_AP
  let $Business_Unit_GL = &OTL.BUSINESS_UNIT_GL
  let $EDst_EmplID      = &OTL.EMPLID
  let #EDst_EmplRcd     = &OTL.EMPL_RCD
  let $PayTaxesThruAP   = &OTL.PAY_TAXES_THRU_AP
  let $Account          = &OTL.ACCOUNT
  let $GL_DeptID        = &OTL.DEPTID_CF
  let $Project_ID       = &OTL.PROJECT_ID
  let $Product          = &OTL.PRODUCT
  let $Fund_Code        = &OTL.FUND_CODE
  let $Program_Code     = &OTL.PROGRAM_CODE
  let $Class_Fld        = &OTL.CLASS_FLD
  let $Affiliate        = &OTL.AFFILIATE
  let $Operating_Unit   = &OTL.OPERATING_UNIT
  let $AltAcct          = &OTL.ALTACCT
  let $Budget_Ref       = &OTL.BUDGET_REF
  let $ChartField1      = &OTL.CHARTFIELD1
  let $ChartField2      = &OTL.CHARTFIELD2
  let $ChartField3      = &OTL.CHARTFIELD3
  let $Affiliate_Intra1 = &OTL.AFFILIATE_INTRA1
  let $Affiliate_Intra2 = &OTL.AFFILIATE_INTRA2
  let $AP_Status        = &OTL.AP_STATUS

  do Write-NA-Tax-Liab-Rec ($LiabExpInd, $Account, 'Y')

from PS_PAY_NA_TAX_LIAB OTL
WHERE OTL.COMPANY       = $Company
  AND OTL.PAYGROUP      = $PayGroup
  AND OTL.PAY_END_DT    = $OrigChk_PayEndDt
  AND OTL.OFF_CYCLE     = $OrigChk_OffCycle
  AND OTL.PAGE_NUM      = #OrigChk_PageNum
  AND OTL.LINE_NUM      = #OrigChk_LineNum
  AND OTL.SEPCHK        = #OrigChk_SepChk
end-select
end-procedure

!*******************************
begin-procedure Reverse-Ctx-Dist
!*******************************

begin-select on-error=SQL-error
OCD.PROVINCE
OCD.TAX_CLASS_CAN
OCD.PY_LIABEXPFLG
OCD.ACCT_CD
OCD.SEQNO
OCD.ADDL_NBR
OCD.ERNCD
OCD.ACCOUNT
OCD.TAX_CUR
OCD.PY_ACCRUAL_AMT

  let $Province        = &OCD.PROVINCE
  let $TaxClassCan     = &OCD.TAX_CLASS_CAN
  let $LiabExpInd      = &OCD.PY_LIABEXPFLG
  let $AcctCd          = &OCD.ACCT_CD
  let #CtxSeqNo        = &OCD.SEQNO
  let #EDst_AddlNbr    = &OCD.ADDL_NBR
  let $EDst_ErnCd      = &OCD.ERNCD
  let $Account         = &OCD.ACCOUNT
  let #DistAmount      = &OCD.TAX_CUR * -1
  let #DistAccrAmt     = &OCD.PY_ACCRUAL_AMT * -1

  do Write-NA-Ctx-Dist-Rec ($LiabExpInd, $Account)

from PS_PAY_NA_CTX_DIST OCD
WHERE OCD.COMPANY       = $Company
  AND OCD.PAYGROUP      = $PayGroup
  AND OCD.PAY_END_DT    = $OrigChk_PayEndDt
  AND OCD.OFF_CYCLE     = $OrigChk_OffCycle
  AND OCD.PAGE_NUM      = #OrigChk_PageNum
  AND OCD.LINE_NUM      = #OrigChk_LineNum
  AND OCD.SEPCHK        = #OrigChk_SepChk
end-select
end-procedure

!*******************************
begin-procedure Reverse-Ctx-Liab
!*******************************

begin-select on-error=SQL-error
OCL.PROVINCE
OCL.TAX_CLASS_CAN
OCL.PY_LIABEXPFLG
OCL.SEQNO
OCL.ADDL_NBR
OCL.TAX_CUR
OCL.BUSINESS_UNIT
OCL.BUSINESS_UNIT_AP
OCL.BUSINESS_UNIT_GL
OCL.EMPLID
OCL.EMPL_RCD
OCL.WAGE_LOSS_PLAN
OCL.CANADA_BN
OCL.PAY_TAXES_THRU_AP
OCL.ACCOUNT
OCL.DEPTID_CF
OCL.PROJECT_ID
OCL.PRODUCT
OCL.FUND_CODE
OCL.PROGRAM_CODE
OCL.CLASS_FLD
OCL.AFFILIATE
OCL.OPERATING_UNIT
OCL.ALTACCT
OCL.BUDGET_REF
OCL.CHARTFIELD1
OCL.CHARTFIELD2
OCL.CHARTFIELD3
OCL.AFFILIATE_INTRA1
OCL.AFFILIATE_INTRA2
OCL.AP_STATUS

  let $Province         = &OCL.PROVINCE
  let $ProcTaxClassCan  = &OCL.TAX_CLASS_CAN
  let $LiabExpInd       = &OCL.PY_LIABEXPFLG
  let #CtxSeqNo         = &OCL.SEQNO
  let #EDst_AddlNbr     = &OCL.ADDL_NBR
  let #DistAmount       = &OCL.TAX_CUR * -1
  let $Business_Unit    = &OCL.BUSINESS_UNIT
  let $Business_Unit_AP = &OCL.BUSINESS_UNIT_AP
  let $Business_Unit_GL = &OCL.BUSINESS_UNIT_GL
  let $EDst_EmplID      = &OCL.EMPLID
  let #EDst_EmplRcd     = &OCL.EMPL_RCD
  let $WageLossPlan     = &OCL.WAGE_LOSS_PLAN
  let $CanadaBN         = &OCL.CANADA_BN
  let $PayTaxesThruAP   = &OCL.PAY_TAXES_THRU_AP
  let $Account          = &OCL.ACCOUNT
  let $GL_DeptID        = &OCL.DEPTID_CF
  let $Project_ID       = &OCL.PROJECT_ID
  let $Product          = &OCL.PRODUCT
  let $Fund_Code        = &OCL.FUND_CODE
  let $Program_Code     = &OCL.PROGRAM_CODE
  let $Class_Fld        = &OCL.CLASS_FLD
  let $Affiliate        = &OCL.AFFILIATE
  let $Operating_Unit   = &OCL.OPERATING_UNIT
  let $AltAcct          = &OCL.ALTACCT
  let $Budget_Ref       = &OCL.BUDGET_REF
  let $ChartField1      = &OCL.CHARTFIELD1
  let $ChartField2      = &OCL.CHARTFIELD2
  let $ChartField3      = &OCL.CHARTFIELD3
  let $Affiliate_Intra1 = &OCL.AFFILIATE_INTRA1
  let $Affiliate_Intra2 = &OCL.AFFILIATE_INTRA2
  let $AP_Status        = &OCL.AP_STATUS

  do Write-NA-Ctx-Liab-Rec ($LiabExpInd, $Account, 'Y')

from PS_PAY_NA_CTX_LIAB OCL
WHERE OCL.COMPANY       = $Company
  AND OCL.PAYGROUP      = $PayGroup
  AND OCL.PAY_END_DT    = $OrigChk_PayEndDt
  AND OCL.OFF_CYCLE     = $OrigChk_OffCycle
  AND OCL.PAGE_NUM      = #OrigChk_PageNum
  AND OCL.LINE_NUM      = #OrigChk_LineNum
  AND OCL.SEPCHK        = #OrigChk_SepChk
end-select
end-procedure

!**********************************
begin-procedure Reverse-NetPay-Dist
!**********************************

begin-select on-error=SQL-error
OND.ACCT_CD
OND.SEQNO
OND.ADDL_NBR
OND.ERNCD
OND.DEPOSIT
OND.ACCOUNT
OND.NET_PAY
OND.PY_ACCRUAL_AMT

  let $AcctCd          = &OND.ACCT_CD
  let #NetSeqNo        = &OND.SEQNO
  let #EDst_AddlNbr    = &OND.ADDL_NBR
  let $EDst_ErnCd      = &OND.ERNCD
  let $DepositInd      = &OND.DEPOSIT
  let $Account         = &OND.ACCOUNT
  let #DistNetAmount   = &OND.NET_PAY * -1
  let #DistAccrAmt     = &OND.PY_ACCRUAL_AMT * -1

  do Write-NA-Net-Dist-Rec ($DepositInd, $Account)

from PS_PAY_NA_NET_DIST OND
WHERE OND.COMPANY       = $Company
  AND OND.PAYGROUP      = $PayGroup
  AND OND.PAY_END_DT    = $OrigChk_PayEndDt
  AND OND.OFF_CYCLE     = $OrigChk_OffCycle
  AND OND.PAGE_NUM      = #OrigChk_PageNum
  AND OND.LINE_NUM      = #OrigChk_LineNum
  AND OND.SEPCHK        = #OrigChk_SepChk
end-select
end-procedure

!*************************************
begin-procedure Format-Display-WarnMsg
!*************************************

  let $PageNum      = edit(#PageNum,'999')
  let $LineNum      = edit(#LineNum,'999')
  let $SepChk       = edit(#SepChk,'999')
  let $PayCheckNbr  = edit(#PayCheckNbr,'9999999')

  let $ErrMsg = $ErrReason || ' - Check# ' || $PayCheckNbr ||
                ' Company ' || $Company || ' PayGroup ' || $PayGroup || ' Pay End Date ' ||
                $PayEndDt || ' Off Cycle ' || $OffCycle || ' Page# ' || $PageNum || ' Line# ' ||
                $LineNum || ' SepChk ' || $SepChk
  display $ErrMsg
  display ' '

end-procedure

!************************************
begin-procedure Format-Display-ErrMsg
!************************************

  do Format-Display-WarnMsg

  do Check-Error-Limit
end-procedure

!********************************
begin-procedure Check-Error-Limit
!********************************

  let #ErrorCnt = #ErrorCnt + 1

  if #ErrorCnt >= #MaxErrorLimit
      let $ContinueRegChk  = 'N'
      let $ContinueRevChk  = 'N'
  end-if

  let $ContinueProcess = 'N'
end-procedure

!**************************************************************************************
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'geternnm.sqc'  !Get-Earnings-Name procedure
#Include 'getdednm.sqc'  !Get-Deduction-Name procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'getlcdta.sqc'  !Get-Local-Tax-Data procedure
#Include 'payinit.sqc'   !Report Initialization and Timing
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers

#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure
#Include 'tranctrl.sqc'  !Transaction control (commits, etc.)
#Include 'stderror.sqc'  !Routine for error display
#Include 'sqlerr.sqc'    !SQL Error Handling Procedure
#Include 'eoprcsnm.sqc'  !Determine Process Name
#Include 'eoactive.sqc'  !Determine Active Publish Definition
#Include 'eoparam.sqc'   !Insert values into Parameter Table for Batch Publish
#Include 'payglstg.sqc'  !Common procedures for GL interface
