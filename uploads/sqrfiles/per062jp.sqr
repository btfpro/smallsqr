!***************************************************
!  PER062JP: Grade Advance(Shohkaku) candidate list*
!***************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!          $Date:  2007/08/07:05:55:20                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  689848                                              !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'    !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization
#define  COMPANY_TBL
#define  SAL_GRADE_TBL
#define  SAL_GRD_REV_JPN
#define  SALARY_PLAN_TBL
#define  REV_DEF_TBL_JPN
#define  DEPT_TBL
#define  SUPVSR_LVL_TBL
#define  JOB

#include 'rellang.sqc'  !Get the data from related language record


!-------------------!
begin-setup
 declare-variable
 end-declare
end-setup
!-------------------!


!--------------------------------!
!report procedure overview
!--------------------------------!
begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  DO select_output
  DO Ending-Report
  do Reset
  do Stdapi-Term
end-report


!--------------------------------!
!heading section
!--------------------------------!
begin-heading 19
!---------------------------------------!
! criteria part!
!---------------------------------------!
do Get_Field_Information ('PER062JP',     'TITLE',          $REPORTTITLE,   #DW)
do Get_Field_Information ('PER062JP',     'SETID',          $TITLE_SETID,   #DW)
do Get_Field_Information ('PER062JP',     'SAL_ADMIN_PLAN', $TITLE_PLAN,   #DW)
do Get_Field_Information ('PER062JP',     'FIELDLABEL',     $TITLE_GRADE,   #DW)
do Get_Field_Information ('PER062JP',     'ASOFDATE',       $TITLE_ASOFDATE,   #DW)
do Get_Field_Information ('PER062JP',     'TITLE_LBL',      $TITLE_CONDITIONS,   #DW)
do Get_Field_Information ('PER062JP',     'AND_LBL',        $TITLE_AND,   #DW)
do Get_Field_Information ('PER062JP',     'OR_LABEL',       $TITLE_OR,   #DW)
do Get_Field_Information ('PER062JP',     'YEAR',           $TITLE_YEAR,   #DW)
do Get_Field_Information ('PER062JP',     'POINT',          $TITLE_POINT,   #DW)
do Get_Field_Information ('PER062JP',     'MIN_YRS_GRADE',  $TITLE_MINGRADE,   #DW)
do Get_Field_Information ('PER062JP',     'MAX_YRS_GRADE',  $TITLE_MAXGRADE,   #DW)
do Get_Field_Information ('PER062JP',     'MIN_AGE',        $TITLE_MINAGE,   #DW)
do Get_Field_Information ('PER062JP',     'FIELDNAME1',     $TITLE_REQPTS,   #DW)
do Get_Field_Information ('PER062JP',     'AMOUNT',         $TITLE_NUMBER,   #DW)

!---------------------------------------!
! field name part!
!---------------------------------------!
do Get_Field_Information ('PER062JP',     'FIELD_VALUE4',   $LINE_RESULT,   #DW)
do Get_Field_Information ('PER062JP',     'NO',             $LINE_NO,   #DW)
do Get_Field_Information ('PER062JP',     'EMPLID',         $LINE_EMPLID,   #DW)
do Get_Field_Information ('PER062JP',     'NAME',           $LINE_NAME,   #DW)
do Get_Field_Information ('PER062JP',     'DEPARTMENT',     $LINE_DEPT,   #DW)
do Get_Field_Information ('PER062JP',     'SUPV_LVL_ID',    $LINE_SUPV,   #DW)
do Get_Field_Information ('PER062JP',     'HIRE_DT',        $LINE_HIRE,   #DW)
do Get_Field_Information ('PER062JP',     'EDUC_LVL_AGE_BASIS', $LINE_AGE,   #DW)
do Get_Field_Information ('PER062JP',     'EDUC_LVL_AGE_BASI2', $LINE_AGE2,  #DW)
do Get_Field_Information ('PER062JP',     'GRADE',          $LINE_GRADE,   #DW)
do Get_Field_Information ('PER062JP',     'STEP',           $LINE_STEP,   #DW)
do Get_Field_Information ('PER062JP',     'YEARS_IN_GRADE', $LINE_YRSGRADE,   #DW)
do Get_Field_Information ('PER062JP',     'YEARS_IN_GRADE2',$LINE_YRSGRADE2,  #DW)
do Get_Field_Information ('PER062JP',     'ELIGIBILITY_POINTS', $LINE_ELIGPTS,   #DW)
do Get_Field_Information ('PER062JP',     'ELIGIBILITY_POINT2', $LINE_ELIGPTS2,  #DW)
do Get_Field_Information ('PER062JP',     'FIELD_VALUE1',   $LINE_RESULT1,   #DW)
do Get_Field_Information ('PER062JP',     'FIELD_VALUE2',   $LINE_RESULT2,   #DW)
do Get_Field_Information ('PER062JP',     'FIELD_VALUE3',   $LINE_RESULT3,   #DW)
do Get_Field_Information ('PER062JP',     'FIELD_VALUE5',   $LINE_RESULT5,   #DW)

  #Include 'stdhdgtr.sqc'

!-------------------------------!
!print the criteria part !
!-------------------------------!
PRINT  $TITLE_SETID            (+1,1)
PRINT  &RUN_CNTL_HR_JPN.SETID  (0,9)
PRINT  $TITLE_PLAN             (0,21)
PRINT  &RUN_CNTL_HR_JPN.SAL_ADMIN_PLAN (0,33)
PRINT  $TITLE_GRADE            (0,45)
PRINT  &RUN_CNTL_HR_JPN.GRADE  (0,54)
PRINT  $TITLE_ASOFDATE         (+1,1)
PRINT  &RUN_CNTL_HR_JPN.ASOFDATE (0,25)  EDIT YYYY-MM-DD
PRINT  '*'                     (+2,1,10) FILL
PRINT  $TITLE_CONDITIONS       (0,15)
PRINT  '*'                     (0,46,131) FILL
PRINT  $TITLE_MINGRADE         (+2,21)
PRINT  &SAL_GRADE.MIN_YRS_GRADE  (0,45)  EDIT 999
PRINT  $TITLE_MAXGRADE         (0,86)
PRINT  &SAL_GRADE.MAX_YRS_GRADE  (0,108)  EDIT 999
PRINT  $TITLE_AND              (+1,11)
PRINT  $TITLE_MINAGE           (0,21)
PRINT  &SAL_GRADE.MIN_GRD_AGE  (0,45)  EDIT 999
PRINT  $TITLE_YEAR             (0,50)
PRINT  $TITLE_OR               (0,70)
PRINT  $TITLE_AND              (+1,11)
PRINT  $TITLE_REQPTS           (0,21)
PRINT  &RUN_CNTL_HR_JPN.ELIGIBILITY_POINTS (0,43)  EDIT 999.9
PRINT  $TITLE_POINT            (0,50)
PRINT  $TITLE_NUMBER           (+1,126)
PRINT  #COUNT_HEADER           (0,147) EDIT 9999
PRINT  '*'                     (+2,1,176) FILL

!-------------------------------!
!print the title of each field  !
!-------------------------------!
PRINT  $LINE_AGE               (+1,120)
PRINT  $LINE_YRSGRADE          (0,129)
PRINT  $LINE_ELIGPTS           (0,139)
PRINT  $LINE_RESULT            (0,152)

PRINT  $LINE_NO                (+1,1)
PRINT  $LINE_EMPLID            (0,6)
PRINT  $LINE_NAME              (0,19)
PRINT  $LINE_DEPT              (0,51)
PRINT  $LINE_SUPV              (0,83)
PRINT  $LINE_GRADE             (0,94)
PRINT  $LINE_STEP              (0,100)
PRINT  $LINE_HIRE              (0,108)
PRINT  $LINE_AGE2              (0,120)
PRINT  $LINE_YRSGRADE2         (0,129)
PRINT  $LINE_ELIGPTS2          (0,139)
PRINT  $LINE_RESULT2           (0,160)
PRINT  $LINE_RESULT3           (0,167)
PRINT  $LINE_RESULT1           (+1,152)
PRINT  $LINE_RESULT5           (0,160)
PRINT  $LINE_RESULT5           (0,167)
print   '-'                     (+1,1,176) fill

end-heading


!--------------------------------!
!Init-Report section             !
!--------------------------------!
begin-procedure Init-Report

  #Define Year4 '1'
  move 'PER062JP' to $ReportID
  do Stdapi-Init

  if $prcs_process_instance = ''
    !No Prompt
  else
    do Select-Parameters

  end-if
  do Init_Printer
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('HR')

  LET $PNLGRPNAME = &RUN_CNTL_HR_JPN.PNLGRPNAME

  let $_TableAlias = 'A'
  DO Security-Param-JPN

  LET #DATA_COUNT_MAIN  = 0
  let #prcs_process_instance = to_number($prcs_process_instance)

end-procedure


!--------------------------------!
!Get-Values section             !
!--------------------------------!
begin-procedure Get-Values
let $language_cd = $PRCS_LANGUAGE_CD

LET #RUNCTL_REQ_PTS = &RUN_CNTL_HR_JPN.ELIGIBILITY_POINTS
end-procedure


!--------------------------------!
!Process-Main section            !
!--------------------------------!
begin-procedure Process-Main

  DO Get_SAL_GRADE_TBL
  DO Get_REV_DEF_TBL_JPN
  DO Get_SAL_GRD_REV_TBL

!Insert the data into temporary table.!

   do insert_empl_information
   DO insert_review_information
   DO update_review_information1
   DO update_review_information2
   DO count_employee
   DO summary_output

END-PROCEDURE


!--------------------------------!
!Get_SAL_GRADE_TBL section!
!--------------------------------!
begin-procedure Get_SAL_GRADE_TBL!

 let $sql-statement = 'PER062JP.SQR,Get_SAL_GRADE_TBL,select,PS_SAL_GRADE_TBL'

BEGIN-SELECT On-Error=SQL-Error
SAL_GRADE.SETID &SAL_GRADE.SETID
SAL_GRADE.SAL_ADMIN_PLAN &SAL_GRADE.SAL_ADMIN_PLAN
SAL_GRADE.GRADE &SAL_GRADE.GRADE
SAL_GRADE.EFFDT &SAL_GRADE.EFFDT
SAL_GRADE.MIN_YRS_GRADE &SAL_GRADE.MIN_YRS_GRADE
SAL_GRADE.MAX_YRS_GRADE &SAL_GRADE.MAX_YRS_GRADE

 IF &SAL_GRADE.MAX_YRS_GRADE = 0
  LET #MAX_YRS_GRADE = 999
 ELSE
  LET #MAX_YRS_GRADE = &SAL_GRADE.MAX_YRS_GRADE
 END-IF

SAL_GRADE.MIN_GRD_AGE &SAL_GRADE.MIN_GRD_AGE
SAL_GRADE.REVIEW_COUNT &SAL_GRADE.REVIEW_COUNT
SAL_GRADE.ELIGIBILITY_POINTS &SAL_GRADE.ELIGIBILITY_POINTS

FROM PS_SAL_GRADE_TBL SAL_GRADE
 WHERE SAL_GRADE.SETID = &RUN_CNTL_HR_JPN.SETID
 AND   SAL_GRADE.SAL_ADMIN_PLAN = &RUN_CNTL_HR_JPN.SAL_ADMIN_PLAN
 AND   SAL_GRADE.GRADE = &RUN_CNTL_HR_JPN.GRADE
 AND   SAL_GRADE.EFFDT = (SELECT MAX(SAL_GRADE2.EFFDT)
                           FROM  PS_SAL_GRADE_TBL SAL_GRADE2
                           WHERE SAL_GRADE2.SETID = SAL_GRADE.SETID
                           AND   SAL_GRADE2.SAL_ADMIN_PLAN = SAL_GRADE.SAL_ADMIN_PLAN
                           AND   SAL_GRADE2.GRADE = SAL_GRADE.GRADE
                           AND   SAL_GRADE2.EFFDT <= &RUN_CNTL_HR_JPN.ASOFDATE)
END-SELECT

END-PROCEDURE


!--------------------------------!
!Get_REV_DEF_TBL_JPN section!
!--------------------------------!
begin-procedure Get_REV_DEF_TBL_JPN

 LET #REV_DEF_COUNT = 0
 let $sql-statement = 'PER062JP.SQR,Get_REV_DEF_TBL_JPN,select,PS_REV_DEF_TBL_JPN'

BEGIN-SELECT On-Error=SQL-Error

REV_DEF.PERIOD_END_DT
REV_DEF.SETID &REV_DEF.SETID
REV_DEF.EP_REVIEW_ID &REV_DEF.EP_REVIEW_ID
REV_DEF.APPL_GRDADV_PRC &REV_DEF.APPL_GRDADV_PRC

  LET #REV_DEF_COUNT = #REV_DEF_COUNT + 1

!-----------------------------!
   IF #REV_DEF_COUNT <= &SAL_GRADE.REVIEW_COUNT
   DO INSERT_PER062_GRD_JPN
   END-IF
!-----------------------------!

FROM PS_REV_DEF_TBL_JPN REV_DEF

 WHERE REV_DEF.SETID = &SAL_GRADE.SETID
 AND   REV_DEF.APPL_GRDADV_PRC = 'Y'
 AND   REV_DEF.PERIOD_END_DT <= &RUN_CNTL_HR_JPN.ASOFDATE
 ORDER BY REV_DEF.PERIOD_END_DT DESC

END-SELECT

END-PROCEDURE


!-----------------------------!
!Get_SAL_GRD_REV_TBL SECTION
!-----------------------------!
begin-procedure Get_SAL_GRD_REV_TBL

 LET #REVIEW_COUNT = 0
 LET #GRD_REV_COUNT = 0
 let $sql-statement = 'PER062JP.SQR,Get_SAL_GRD_REV_TBL,select,PS_SAL_GRD_REV_TBL'

BEGIN-SELECT On-Error=SQL-Error

GRD_REV.SETID &GRD_REV.SETID
GRD_REV.SAL_ADMIN_PLAN &GRD_REV.SAL_ADMIN_PLAN
GRD_REV.GRADE &GRD_REV.GRADE
GRD_REV.EFFDT &GRD_REV.EFFDT
GRD_REV.REVIEW_SEQUENCE &GRD_REV.REVIEW_SEQUENCE
GRD_REV.REVIEW_WEIGHT &GRD_REV.REVIEW_WEIGHT

   !-----------------------------!
   LET #GRD_REV_COUNT = #GRD_REV_COUNT + 1
   IF #GRD_REV_COUNT <= &SAL_GRADE.REVIEW_COUNT
     DO UPDATE_PER062_GRD_JPN
   END-IF
   !-----------------------------!

FROM PS_SAL_GRD_REV_JPN GRD_REV
 WHERE GRD_REV.SETID = &SAL_GRADE.SETID
 AND   GRD_REV.SAL_ADMIN_PLAN = &SAL_GRADE.SAL_ADMIN_PLAN
 AND   GRD_REV.GRADE = &SAL_GRADE.GRADE
 AND   GRD_REV.EFFDT = &SAL_GRADE.EFFDT
 ORDER BY GRD_REV.REVIEW_SEQUENCE

END-SELECT

end-procedure


!--------------------------------!
!INSERT_PER062_GRD_JPN section   !
!--------------------------------!
begin-procedure INSERT_PER062_GRD_JPN

 let $sql-statement = 'PER062JP.SQR,INSERT_PER062_GRD_JPN,Insert,PS_PER062_GRD_JPN'

BEGIN-SQL On-Error=SQL-Error

INSERT INTO PS_PER062_GRD_JPN
(PROCESS_INSTANCE,
 SEQUENCE,
 SETID,
 EP_REVIEW_ID,
 REVIEW_WEIGHT)
VALUES
(#prcs_process_instance,
 #REV_DEF_COUNT,
 &REV_DEF.SETID,
 &REV_DEF.EP_REVIEW_ID,
 0)

END-SQL
 LET #REVIEW_COUNT =  #REVIEW_COUNT + 1

end-procedure


!--------------------------------!
!UPDATE_PER062_GRD_JPN section   !
!--------------------------------!
begin-procedure UPDATE_PER062_GRD_JPN

let $sql-statement = 'PER062JP.SQR,UPDATE_PER062_GRD_JPN,Update,PS_PER062_GRD_JPN'

BEGIN-SQL On-Error=SQL-Error

UPDATE PS_PER062_GRD_JPN
SET REVIEW_WEIGHT = &GRD_REV.REVIEW_WEIGHT
WHERE PROCESS_INSTANCE = #prcs_process_instance
AND SEQUENCE = #GRD_REV_COUNT

END-SQL

end-procedure


!--------------------------------!
!insert_empl_information section !
!--------------------------------!
begin-procedure insert_empl_information

 let $sql-statement = 'PER062JP.SQR,insert_empl_information,select,PS_JOB'

BEGIN-SELECT DISTINCT
A.EMPLID,
A.EMPL_RCD,
A.EFFDT,
A.EFFSEQ,
A.SETID_DEPT,
A.DEPTID,
A.COMPANY,
A.SETID_SALARY,
A.SAL_ADMIN_PLAN,
A.GRADE,
A.STEP,
A.GRADE_ENTRY_DT,
A.BUSINESS_UNIT,
A.SUPV_LVL_ID, &D.SUPV_LVL_ID
B.HIRE_DT,
D1.EDUC_LVL_AD_BTD,
C.NAME

 do insert_empl_information_exe

FROM PS_JOB A, PS_EMPLOYMENT B, PS_PERSON_NAME C, PS_PER_ORG_ASG_JPN D1, PS_PER_ORG_INST E
 WHERE A.EMPLID = B.EMPLID
 AND A.EMPL_RCD = B.EMPL_RCD
 AND A.EMPLID = C.EMPLID
 AND A.EMPLID = E.EMPLID
 AND A.EMPL_RCD = E.ORG_INSTANCE_ERN
 AND A.EMPLID = D1.EMPLID
 AND A.EMPL_RCD = D1.EMPL_RCD
 AND A.HR_STATUS = 'A'
 AND E.PER_ORG = 'EMP'
 AND A.EFFDT = (SELECT MAX(EFFDT)
                  FROM PS_JOB
                 WHERE EMPLID = A.EMPLID
                   AND EMPL_RCD = A.EMPL_RCD
                   AND EFFDT <= &RUN_CNTL_HR_JPN.ASOFDATE)
 AND A.EFFSEQ = (SELECT MAX(EFFSEQ)
                   FROM PS_JOB
                  WHERE EMPLID = A.EMPLID
                    AND EMPL_RCD = A.EMPL_RCD
                    AND EFFDT = A.EFFDT)
 AND A.SETID_SALARY = &RUN_CNTL_HR_JPN.SETID
 AND A.SAL_ADMIN_PLAN = &RUN_CNTL_HR_JPN.SAL_ADMIN_PLAN
 AND A.GRADE = &RUN_CNTL_HR_JPN.GRADE
      [$SecurityClausewithERN]
END-SELECT

END-PROCEDURE


!-----------------------------!
!insert_empl_information execute section!
!-----------------------------!
BEGIN-PROCEDURE insert_empl_information_exe

 let $sql-statement = 'PER062JP.SQR,insert_empl_information_exe,Insert,PS_PER062_TMP_JPN'

BEGIN-SQL On-Error=SQL-Error

INSERT INTO PS_PER062_TMP_JPN
(PROCESS_INSTANCE,
 EMPLID,
 EMPL_RCD,
 EFFDT,
 EFFSEQ,
 SETID_DEPT,
 DEPTID,
 COMPANY,
 SETID_SALARY,
 SAL_ADMIN_PLAN,
 GRADE,
 STEP,
 GRADE_ENTRY_DT,
 BUSINESS_UNIT,
 SUPV_LVL_ID,
 HIRE_DT,
 EDUC_LVL_AD_BTD,
 NAME)

VALUES
(#prcs_process_instance,
 &A.EMPLID,
 &A.EMPL_RCD,
 &A.EFFDT,
 &A.EFFSEQ,
 &A.SETID_DEPT,
 &A.DEPTID,
 &A.COMPANY,
 &A.SETID_SALARY,
 &A.SAL_ADMIN_PLAN,
 &A.GRADE,
 &A.STEP,
 &A.GRADE_ENTRY_DT,
 &A.BUSINESS_UNIT,
 &D.SUPV_LVL_ID,
 &B.HIRE_DT,
 &D1.EDUC_LVL_AD_BTD,
 &C.NAME)

END-SQL

END-PROCEDURE


!---------------------------------!
!insert_review_information section!
!---------------------------------!
begin-procedure insert_review_information

  let $sql-statement = 'PER062JP.SQR,insert_review_information,select,PS_PER062_TMP_JPN'

BEGIN-SELECT DISTINCT
PER062_TMP.PROCESS_INSTANCE,
PER062_TMP.EMPLID,
PER062_TMP.EMPL_RCD,
PER062_TMP.SETID_SALARY,
REV.EP_REVIEW_ID

  DO get_review_information

FROM PS_PER062_TMP_JPN PER062_TMP,
     PS_REV_DEF_TBL_JPN REV

WHERE PER062_TMP.PROCESS_INSTANCE = #prcs_process_instance
AND   PER062_TMP.SETID_SALARY = REV.SETID
AND   REV.APPL_GRDADV_PRC = 'Y'
AND   REV.EP_REVIEW_ID IN (SELECT EP_REVIEW_ID
                             FROM PS_PER062_GRD_JPN
                            WHERE PS_PER062_GRD_JPN.PROCESS_INSTANCE = PER062_TMP.PROCESS_INSTANCE
                              AND PS_PER062_GRD_JPN.SETID = PER062_TMP.SETID_SALARY)
END-SELECT

END-PROCEDURE



!---------------------------------!
!get_review_information section   !
!---------------------------------!
begin-procedure get_review_information

  !------------------!
  ! Get All Reviews  !
  !------------------!
  let $Emplid = rtrim(&PER062_TMP.EMPLID, ' ')
  let $ERN = rtrim(to_char(&PER062_TMP.EMPL_RCD), ' ')
  let $Run_Review_Id = rtrim(&REV.EP_REVIEW_ID, ' ')
  let $ReviewType = ''
  let $BeginDt = ''
  let $EndDt = ''
  let #MaxReviews = 0
  do Get-All-Reviews($Emplid, $ERN, $ReviewType, $BeginDt, $EndDt, #MaxReviews, #ReviewEntries)

  !--------------------------!
  ! Loop through the Reviews !
  !--------------------------!
  let #CNT = 1
  While #CNT <= #ReviewEntries

    !--------------------------------!
    ! Get the relevant Review values !
    !--------------------------------!
    Get $ReviewId            from Reviews(#CNT) ReviewId
    Get $CalcMethod          from Reviews(#CNT) CalcMethod
    Get $ReviewStatus        from Reviews(#CNT) ReviewStatus
    Get $ApprovalStatus      from Reviews(#CNT) ApprovalStatus

    let $ReviewId = rtrim($ReviewId, ' ')
    let $CalcMethod = rtrim($CalcMethod, ' ')
    let $ReviewStatus = rtrim($ReviewStatus, ' ')
    let $ApprovalStatus = rtrim($ApprovalStatus, ' ')

    !-----------------------------------------------------!
    ! If Review ID of the Employee Review matches         !
    ! and Calculation Method is 'Review Band'             !
    ! and Review Status is 'Complete'                     !
    ! and Approval Status is 'Approved' or 'Not Required' !
    ! then insert the review results into PER062_TMP2_JPN !
    !-----------------------------------------------------!
    If $ReviewId = $Run_Review_ID and $CalcMethod = 'R' and $ReviewStatus = 'CO' and ($ApprovalStatus = 'APRV' or $ApprovalStatus = 'NREQ')

      Get $RatingModel         from Reviews(#CNT) RatingModel
      Get $ReviewRating        from Reviews(#CNT) ReviewRating

      let $RatingModel = rtrim($RatingModel, ' ')
      let $ReviewRating = rtrim($ReviewRating, ' ')

      do insert_review_information_exe

      !---------------------------------------------------------------------!
      ! Exit the while-loop                                                 !
      ! when a completed Employee Review has been found for this Review ID. !
      !---------------------------------------------------------------------!
      break

    end-if

    add 1 to #CNT

  end-while

END-PROCEDURE



!-----------------------------------------!
!insert_review_information execute section!
!-----------------------------------------!
begin-procedure insert_review_information_exe

 let $sql-statement = 'PER062JP.SQR,insert_review_information_exe,Insert,PS_PER062_TMP2_JPN'

BEGIN-SQL On-Error=SQL-Error

INSERT INTO PS_PER062_TMP2_JPN
(PROCESS_INSTANCE,
 EMPLID,
 EMPL_RCD,
 SETID_SALARY,
 EP_REVIEW_ID,
 RATING_MODEL,
 REVIEW_RATING,
 ELIGIBILITY_POINTS,
 REVIEW_WEIGHT)
VALUES
(#prcs_process_instance,
 &PER062_TMP.EMPLID,
 &PER062_TMP.EMPL_RCD,
 &PER062_TMP.SETID_SALARY,
 &REV.EP_REVIEW_ID,
 $RatingModel,
 $ReviewRating,
 0,
 0)

END-SQL

END-PROCEDURE


!----------------------------------!
!update_review_information1 section!
!----------------------------------!
begin-procedure update_review_information1

 let $sql-statement = 'PER062JP.SQR,update_review_information1,Update,PS_PER062_TMP2_JPN'

BEGIN-SQL On-Error=SQL-Error

UPDATE PS_PER062_TMP2_JPN

 SET ELIGIBILITY_POINTS = (SELECT REVW_RATING.ELIGIBILITY_POINTS
                             FROM PS_REVW_RATING_TBL REVW_RATING,
                                  PS_RATING_MDL_TBL RATING_MDL
                            WHERE RATING_MDL.RATING_MODEL = PS_PER062_TMP2_JPN.RATING_MODEL
                              AND RATING_MDL.EFFDT = (SELECT MAX(RATING_MDL1.EFFDT)
                                                        FROM PS_RATING_MDL_TBL RATING_MDL1
                                                       WHERE RATING_MDL1.RATING_MODEL = PS_PER062_TMP2_JPN.RATING_MODEL
                                                         AND RATING_MDL1.EFFDT <= &RUN_CNTL_HR_JPN.ASOFDATE)
                              AND RATING_MDL.EFF_STATUS = 'A'
                              AND REVW_RATING.RATING_MODEL = PS_PER062_TMP2_JPN.RATING_MODEL
                              AND REVW_RATING.REVIEW_RATING = PS_PER062_TMP2_JPN.REVIEW_RATING
                              AND REVW_RATING.EFFDT = RATING_MDL.EFFDT)

 WHERE PS_PER062_TMP2_JPN.PROCESS_INSTANCE = #prcs_process_instance
END-SQL

END-PROCEDURE


!----------------------------------!
!update_review_information2 section!
!----------------------------------!
begin-procedure update_review_information2

 let $sql-statement = 'PER062JP.SQR,update_review_information2,Update,PS_PER062_TMP2_JPN'

BEGIN-SQL On-Error=SQL-Error

UPDATE PS_PER062_TMP2_JPN
 SET REVIEW_WEIGHT = (SELECT REVIEW_WEIGHT FROM PS_PER062_GRD_JPN GRD_JPN
                           WHERE PS_PER062_TMP2_JPN.PROCESS_INSTANCE = GRD_JPN.PROCESS_INSTANCE
                            AND  PS_PER062_TMP2_JPN.SETID_SALARY =  GRD_JPN.SETID
                            AND  PS_PER062_TMP2_JPN.EP_REVIEW_ID =  GRD_JPN.EP_REVIEW_ID)

 WHERE PS_PER062_TMP2_JPN.PROCESS_INSTANCE = #prcs_process_instance
  AND  PS_PER062_TMP2_JPN.EP_REVIEW_ID IN (SELECT EP_REVIEW_ID FROM PS_PER062_GRD_JPN
                                            WHERE PS_PER062_GRD_JPN.PROCESS_INSTANCE = PS_PER062_TMP2_JPN.PROCESS_INSTANCE
                                             AND  PS_PER062_GRD_JPN.SETID = PS_PER062_TMP2_JPN.SETID_SALARY)
END-SQL

END-PROCEDURE


!-----------------------------!
!count_employee section       !
!-----------------------------!
begin-procedure count_employee

 let $sql-statement = 'PER062JP.SQR,count_employee,select,PS_PER062_TMP_JPN'

BEGIN-SELECT On-Error=SQL-Error
TMP_OUT1.PROCESS_INSTANCE
TMP_OUT1.EMPLID
TMP_OUT1.EMPL_RCD
TMP_OUT1.EFFDT
TMP_OUT1.EFFSEQ
TMP_OUT1.EDUC_LVL_AD_BTD
TMP_OUT1.GRADE_ENTRY_DT

 LET #GRD_AGE = DATEDIFF(&RUN_CNTL_HR_JPN.ASOFDATE,&TMP_OUT1.EDUC_LVL_AD_BTD,'year')
 LET #YRS_GRADE = DATEDIFF(&RUN_CNTL_HR_JPN.ASOFDATE,&TMP_OUT1.GRADE_ENTRY_DT,'year')
 LET $PASS = ' '
!-----------------------------!
 IF #YRS_GRADE >= #MAX_YRS_GRADE
    LET $PASS = '1'
    DO count_review
 ELSE
    IF #YRS_GRADE >= &SAL_GRADE.MIN_YRS_GRADE AND #GRD_AGE >= &SAL_GRADE.MIN_GRD_AGE
      LET $PASS = ' '
      DO count_review
    END-IF
 END-IF

FROM PS_PER062_TMP_JPN TMP_OUT1
 WHERE TMP_OUT1.PROCESS_INSTANCE = #prcs_process_instance
END-SELECT

END-PROCEDURE


!-----------------------------!
!count_review section         !
!-----------------------------!
begin-procedure count_review

 let $sql-statement = 'PER062JP.SQR,count_review,select,PS_PER062_TMP2_JPN'

BEGIN-SELECT On-Error=SQL-Error

COUNT(*) &COUNT_REVIEW
 LET #COUNT_REVIEW = &COUNT_REVIEW

   IF #COUNT_REVIEW >= &SAL_GRADE.REVIEW_COUNT

     IF #GRD_REV_COUNT > 0
       DO select_review_weight
     END-IF
     IF #GRD_REV_COUNT = 0
       DO select_review_avrg
     END-IF

  END-IF

FROM PS_PER062_TMP2_JPN COUNT_REVIEW
  WHERE COUNT_REVIEW.PROCESS_INSTANCE = #prcs_process_instance
    AND COUNT_REVIEW.EMPLID = &TMP_OUT1.EMPLID
    AND COUNT_REVIEW.EMPL_RCD = &TMP_OUT1.EMPL_RCD

END-SELECT

END-PROCEDURE


!-----------------------------!
!select_review_weight section !
!-----------------------------!
begin-procedure select_review_weight
 let $sql-statement = 'PER062JP.SQR,select_review_weight,select,PS_PER062_TMP2_JPN'

BEGIN-SELECT On-Error=SQL-Error

WEIGHT.PROCESS_INSTANCE
WEIGHT.EMPLID
WEIGHT.EMPL_RCD
WEIGHT.SETID_SALARY
SUM(WEIGHT.ELIGIBILITY_POINTS * (WEIGHT.REVIEW_WEIGHT/100)) &WEIGHT_PTS
  LET #WEIGHT_PTS = &WEIGHT_PTS

 IF $PASS = '1'
  LET #INSERT_PTS = #WEIGHT_PTS
  DO insert_summary
 ELSE
  IF #WEIGHT_PTS >= #RUNCTL_REQ_PTS
  LET #INSERT_PTS = #WEIGHT_PTS
  DO insert_summary
  END-IF
 END-IF

FROM PS_PER062_TMP2_JPN WEIGHT
  WHERE WEIGHT.PROCESS_INSTANCE = #prcs_process_instance
    AND WEIGHT.EMPLID = &TMP_OUT1.EMPLID
    AND WEIGHT.EMPL_RCD = &TMP_OUT1.EMPL_RCD
    AND WEIGHT.EP_REVIEW_ID IN (SELECT EP_REVIEW_ID FROM PS_PER062_GRD_JPN
                                 WHERE PS_PER062_GRD_JPN.PROCESS_INSTANCE = WEIGHT.PROCESS_INSTANCE
                                  AND  PS_PER062_GRD_JPN.SETID = WEIGHT.SETID_SALARY)
GROUP BY WEIGHT.PROCESS_INSTANCE, WEIGHT.EMPLID, WEIGHT.EMPL_RCD, WEIGHT.SETID_SALARY
END-SELECT

END-PROCEDURE


!-----------------------------!
!select_review_avrg section   !
!-----------------------------!
begin-procedure select_review_avrg
 let $sql-statement = 'PER062JP.SQR,select_review_avrg,select,PS_PER062_TMP2_JPN'

BEGIN-SELECT On-Error=SQL-Error

AVRG.PROCESS_INSTANCE
AVRG.EMPLID
AVRG.EMPL_RCD
AVRG.SETID_SALARY
SUM(AVRG.ELIGIBILITY_POINTS) &AVRG_PTS
  LET #AVRG_PTS = &AVRG_PTS
  LET #AVRG_PTS = (#AVRG_PTS / &SAL_GRADE.REVIEW_COUNT)

 IF $PASS = '1'
  LET #INSERT_PTS = #AVRG_PTS
  DO insert_summary
 ELSE
  IF #AVRG_PTS >= #RUNCTL_REQ_PTS
  LET #INSERT_PTS = #AVRG_PTS
  DO insert_summary
  END-IF
 END-IF

FROM PS_PER062_TMP2_JPN  AVRG
  WHERE AVRG.PROCESS_INSTANCE = #prcs_process_instance
    AND AVRG.EMPLID = &TMP_OUT1.EMPLID
    AND AVRG.EMPL_RCD = &TMP_OUT1.EMPL_RCD
    AND AVRG.EP_REVIEW_ID IN (SELECT EP_REVIEW_ID FROM PS_PER062_GRD_JPN
                               WHERE PS_PER062_GRD_JPN.PROCESS_INSTANCE = AVRG.PROCESS_INSTANCE
                                AND  PS_PER062_GRD_JPN.SETID = AVRG.SETID_SALARY)
GROUP BY AVRG.PROCESS_INSTANCE, AVRG.EMPLID, AVRG.EMPL_RCD, AVRG.SETID_SALARY

END-SELECT

END-PROCEDURE


!-----------------------------!
!insert_summary section       !
!-----------------------------!
begin-procedure insert_summary

 let $sql-statement = 'PER062JP.SQR,insert_summary,Insert,PS_PER062_TMP3_JPN'

BEGIN-SQL On-Error=SQL-Error

INSERT INTO PS_PER062_TMP3_JPN
(PROCESS_INSTANCE,
 EMPLID,
 EMPL_RCD,
 ELIGIBILITY_POINTS
)
VALUES
 (&TMP_OUT1.PROCESS_INSTANCE,
  &TMP_OUT1.EMPLID,
  &TMP_OUT1.EMPL_RCD,
  #INSERT_PTS)

END-SQL

END-PROCEDURE


!-----------------------------!
!summary_output section       !
!-----------------------------!
begin-procedure summary_output
 let $sql-statement = 'PER062JP.SQR,summary_output,select,PS_PER062_TMP3_JPN'

BEGIN-SELECT On-Error=SQL-Error

COUNT(*) &COUNT_HEADER
 LET #COUNT_HEADER = &COUNT_HEADER

FROM PS_PER062_TMP3_JPN SUM_OUTPUT
  WHERE SUM_OUTPUT.PROCESS_INSTANCE = #prcs_process_instance

END-SELECT

END-PROCEDURE


!-----------------------------!
!select_output section        !
!-----------------------------!
begin-procedure select_output

 let $sql-statement = 'PER062JP.SQR,select_output,select,PS_PER062_TMP2_JPN'

BEGIN-SELECT On-Error=SQL-Error

TMP_OUT2.PROCESS_INSTANCE
TMP_OUT2.EMPLID
TMP_OUT2.EMPL_RCD
TMP_OUT2.EFFDT
TMP_OUT2.EFFSEQ
TMP_OUT2.SETID_DEPT
TMP_OUT2.DEPTID
TMP_OUT2.COMPANY
TMP_OUT2.SETID_SALARY
TMP_OUT2.SAL_ADMIN_PLAN
TMP_OUT2.GRADE
TMP_OUT2.STEP
TMP_OUT2.GRADE_ENTRY_DT
TMP_OUT2.BUSINESS_UNIT

   LET $DeptID = &TMP_OUT2.DEPTID
   LET $BU = &TMP_OUT2.BUSINESS_UNIT
   LET $AsOfDate = &RUN_CNTL_HR_JPN.ASOFDATE
   DO  Get-Department-Name
   let $DeptName = $DeptName

TMP_OUT2.SUPV_LVL_ID

   let $Recname = 'SUPVSR_LVL_TBL'
   do  Get-Setid (&TMP_OUT2.BUSINESS_UNIT , $Recname, $Setid)
   LET $SETID_DEPT = $Setid
   LET $SUPV_LVL_ID = &TMP_OUT2.SUPV_LVL_ID
   LET $AsOfDate = &RUN_CNTL_HR_JPN.ASOFDATE
   DO  Get-Supvlvl-Name
   let $SupvlvlNameAbbrv = $SupvlvlNameAbbrv

TMP_OUT2.HIRE_DT
TMP_OUT2.EDUC_LVL_AD_BTD
TMP_OUT2.NAME
 LET $EMPL_NAME = RTRIM(&TMP_OUT2.NAME,' ')
TMP_OUT3.ELIGIBILITY_POINTS

 LET #PRINT_GRD_AGE = TRUNC((DATEDIFF(&RUN_CNTL_HR_JPN.ASOFDATE,&TMP_OUT2.EDUC_LVL_AD_BTD,'year')),0)
 LET #PRINT_YRS_GRADE = TRUNC((DATEDIFF(&RUN_CNTL_HR_JPN.ASOFDATE,&TMP_OUT2.GRADE_ENTRY_DT,'year')),0)

   DO print_line

FROM PS_PER062_TMP_JPN TMP_OUT2, PS_PER062_TMP3_JPN TMP_OUT3
 WHERE TMP_OUT2.PROCESS_INSTANCE = #prcs_process_instance
 AND   TMP_OUT2.PROCESS_INSTANCE = TMP_OUT3.PROCESS_INSTANCE
 AND   TMP_OUT2.EMPLID = TMP_OUT3.EMPLID
 AND   TMP_OUT2.EMPL_RCD = TMP_OUT3.EMPL_RCD

ORDER BY TMP_OUT2.SETID_DEPT, TMP_OUT2.DEPTID, TMP_OUT3.ELIGIBILITY_POINTS DESC, TMP_OUT2.EMPLID,TMP_OUT2.EMPL_RCD

END-SELECT

END-PROCEDURE


!-----------------------------!
!print_line section           !
!-----------------------------!
begin-procedure print_line

 LET #DATA_COUNT_MAIN  = #DATA_COUNT_MAIN + 1
 PRINT #DATA_COUNT_MAIN       (+1,1)  EDIT 9999
 PRINT &TMP_OUT2.EMPLID        (0,6)
 PRINT $EMPL_NAME              (0,19)
 PRINT $DeptName               (0,51)
 PRINT $SupvlvlNameAbbrv       (0,83)
 PRINT &TMP_OUT2.GRADE         (0,95)
 PRINT &TMP_OUT2.STEP          (0,101) EDIT 99
 PRINT &TMP_OUT2.HIRE_DT       (0,108)  EDIT YYYY-MM-DD
 PRINT #PRINT_GRD_AGE          (0,120) EDIT 999
 PRINT #PRINT_YRS_GRADE        (0,129) EDIT 99

 PRINT &TMP_OUT3.ELIGIBILITY_POINTS (0,139) EDIT 999.9

   DO print_result

END-PROCEDURE


!--------------------------------------------------------------!
!print_result section                                          !
!This procedure prints the last three completed Review Ratings !
!of the employee of type 'Review Band'                         !
!--------------------------------------------------------------!
begin-procedure print_result

  LET #RESULT_COUNT = 0
  LET #PRT_COL = 153
  LET #PRT_REV_CNT = 0

  !------------------!
  ! Get All Reviews  !
  !------------------!
  let $Emplid = rtrim(&TMP_OUT2.EMPLID, ' ')
  let $ERN = rtrim(to_char(&TMP_OUT2.EMPL_RCD), ' ')
  let $ReviewType = ''
  let $BeginDt = ''
  let $EndDt = ''
  let #MaxReviews = 0
  do Get-All-Reviews($Emplid, $ERN, $ReviewType, $BeginDt, $EndDt, #MaxReviews, #ReviewEntries)

  !--------------------------!
  ! Loop through the Reviews !
  !--------------------------!
  let #CNT = 1
  While #CNT <= #ReviewEntries

    !--------------------------------!
    ! Get the relevant Review values !
    !--------------------------------!
    Get $CalcMethod          from Reviews(#CNT) CalcMethod
    Get $ReviewStatus        from Reviews(#CNT) ReviewStatus
    Get $ApprovalStatus      from Reviews(#CNT) ApprovalStatus

    let $CalcMethod = rtrim($CalcMethod, ' ')
    let $ReviewStatus = rtrim($ReviewStatus, ' ')
    let $ApprovalStatus = rtrim($ApprovalStatus, ' ')

    !-----------------------------------------------------!
    ! If Review ID of the Employee Review matches         !
    ! and Calculation Method is 'Review Band'             !
    ! and Review Status is 'Complete'                     !
    ! and Approval Status is 'Approved' or 'Not Required' !
    ! then insert the review results into PER062_TMP2_JPN !
    !-----------------------------------------------------!
    If $CalcMethod = 'R' and $ReviewStatus = 'CO' and ($ApprovalStatus = 'APRV' or $ApprovalStatus = 'NREQ')

      Get $ReviewRating        from Reviews(#CNT) ReviewRating

      If #PRT_REV_CNT < 3

        PRINT $ReviewRating                  (0,#PRT_COL)
        LET #PRT_COL = #PRT_COL + 8
        LET #PRT_REV_CNT = #PRT_REV_CNT + 1

      end-if

    end-if

    add 1 to #CNT

  end-while

END-PROCEDURE


!-----------------------------!
!Ending-Report section        !
!-----------------------------!
begin-procedure Ending-Report

  if #DATA_COUNT_MAIN  = 0
        do Get_Field_Information ('PER062JP',     'MESSAGE_TEXT',         $LINE_MESSAGE,   #DW)
        PRINT $LINE_MESSAGE (+4,1) CENTER
  else
  END-IF

  DO delete_PER062_GRD
  DO delete_PER062_TMP
  DO delete_PER062_TMP2
  DO delete_PER062_TMP3

END-PROCEDURE


!-----------------------------!
!delete_PER062_GRD section    !
!-----------------------------!
begin-procedure delete_PER062_GRD

let $sql-statement = 'PER062JP.SQR,Ending-Report,delete,PS_PER062_GRD_JPN'

BEGIN-SQL On-Error=SQL-Error
DELETE FROM PS_PER062_GRD_JPN
WHERE PROCESS_INSTANCE = #prcs_process_instance
END-SQL

END-PROCEDURE


!-----------------------------!
!delete_PER062_TMP section    !
!-----------------------------!
begin-procedure delete_PER062_TMP

let $sql-statement = 'PER062JP.SQR,Ending-Report,delete,PS_PER062_TMP_JPN'

BEGIN-SQL On-Error=SQL-Error
DELETE FROM PS_PER062_TMP_JPN
WHERE PROCESS_INSTANCE = #prcs_process_instance
END-SQL

END-PROCEDURE


!-----------------------------!
!delete_PER062_TMP2 section   !
!-----------------------------!
begin-procedure delete_PER062_TMP2

let $sql-statement = 'PER062JP.SQR,Ending-Report,delete,PS_PER062_TMP2_JPN'

BEGIN-SQL On-Error=SQL-Error
DELETE FROM PS_PER062_TMP2_JPN
WHERE PROCESS_INSTANCE = #prcs_process_instance
END-SQL

END-PROCEDURE


!-----------------------------!
!delete_PER062_TMP3 section   !
!-----------------------------!
begin-procedure delete_PER062_TMP3

let $sql-statement = 'PER062JP.SQR,Ending-Report,delete,PS_PER062_TMP3_JPN'

BEGIN-SQL On-Error=SQL-Error
DELETE FROM PS_PER062_TMP3_JPN
WHERE PROCESS_INSTANCE = #prcs_process_instance
END-SQL

END-PROCEDURE


!-----------------------------!
!#include files               !
!-----------------------------!
#include 'hrcntljp.sqc'  !Get run control parameter values
#include 'hrgetvjp.sqc'  !Get values mask routines
#include 'hrsectjp.sqc'  !Get SQR Security parameters
#Include 'eputils.sqc'   !Get-All-Reviews procedure
#include 'getcodta.sqc'  !Get selected fields from the Company Table
#include 'getdptnm.sqc'  !Get selected fields from the Dept Table
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'
#Include 'getsetid.sqc'  !Get Set Id from the Tableset Record Detail
#Include 'getsupjp.sqc'  !Get selected fields from the Supervisor Level ID Table
