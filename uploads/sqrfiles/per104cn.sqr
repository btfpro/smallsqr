!***********************************************************************
!  PER104CN : Designated Groups Type of Employment
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:03:22                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
Begin-setup
#Include 'ptpsp125.sqc'   !Printer and page-size initialization
end-setup


#define MaxAreas   4
#define ActiveEmp  ('A')

!***********************************************************************
! BEGIN-REPORT
!***********************************************************************
begin-report
   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Init-Report
   do Report
   do Reset
   do Stdapi-Term
end-report


!***********************************************************************
! BEGIN-HEADING
!***********************************************************************
begin-heading 7
   #Include 'stdhdg08.sqc'
   print '                                              Aborignal       Visible'  (+2,1)
   print '         Disabled                '                                      ()
   print '                            ----Total---    ---Persons--    -Minoriti'  (+1,1)
   print 'es-    ---Persons--    ---Female---'                                    ()
   print 'Employment Type             Start    End    Start    End    Start    '  (+1,1)
   print 'End    Start    End    Start    End'                                    ()
end-heading


!***********************************************************************
! BEGIN-PROCEDURE Init-Report
!***********************************************************************
begin-procedure Init-Report

   move 'PER104CN' to $ReportID
   move 'Designated Groups by Type of Employment' to $ReportTitle
   display $ReportTitle

   do Stdapi-Init

   if $prcs_process_instance = ''
      do Ask-From-Thru-Date
      do Ask-AreaCd($AreaList,#TtlAreas)
   else
      do Select-Parameters
   end-if

end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Get-Values
!***********************************************************************
begin-procedure Get-Values

   do Get-From-Thru-Date
   do Get-Can-OEE-Parameters
   let #TtlAreas = 1

end-procedure

!***********************************************************************
! BEGIN-PROCEDURE Report
!***********************************************************************
begin-procedure Report
   create-array name=Values size={MaxAreas} field=areas:char
                                            field=total:number:4
                                            field=Aboriginal:number:4
                                            field=Minority:number:4
                                            field=Disabled:number:4
                                            field=Female:number:4
   let #AreaCnt = -1
   do Calculate-Totals($AreaList,$FromDate,#AreaCnt)
   let #FirstCnt = #AreaCnt
   if $ThruDate > $FromDate
       do Calculate-Totals($AreaList,$ThruDate,#AreaCnt)
   end-if
   do Print-Report(#FirstCnt,#AreaCnt)
end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Calculate-Totals
!***********************************************************************
begin-procedure Calculate-Totals($AreaList,$Date,:#AreaCnt)

   let $AreaCd = ''

begin-SELECT
C.CAN_OEE_AREACD
B.REG_TEMP
B.FULL_PART_TIME
D.SEASONAL
A.ABORIGINAL
A.MINORITY
A.DISABLED
A.FEMALE

   if $AreaCd <> &C.Can_OEE_AreaCd
      add 1 to #AreaCnt
      let $AreaCd   = &C.Can_OEE_AreaCd
      PUT $AreaCd INTO Values(#AreaCnt)
   end-if
   if &D.Seasonal = 'Y'
      let #row = 3
   else
      if &B.Reg_Temp = 'R'
         if &B.Full_Part_Time = 'F'
            let #Row = 0
         else
            let #Row = 1
         end-if
      else
         let #Row = 2
      end-if
   end-if
   do Designated-Groups(#row,&A.Aboriginal,&A.Minority,&A.Disabled,&A.Female,#AreaCnt)
   ARRAY-ADD 1 to Values(#AreaCnt) TOTAL(#ROW)

FROM PS_CAN_OEE_SURVEY A,
     PS_JOB B,
     PS_LOCATION_TBL C,
     PS_JOBCODE_TBL D

WHERE A.RECEIVEDT = (SELECT MAX(A1.RECEIVEDT) FROM PS_CAN_OEE_SURVEY A1
   WHERE A1.EMPLID = A.EMPLID and A1.RECEIVEDT <= $Date)
   AND A.COMPLETED = 'Y'
   AND B.EMPLID = A.EMPLID
   AND B.HR_STATUS IN {ACTIVEEMP}
   AND B.EFFDT = (SELECT MAX(B1.EFFDT) FROM PS_JOB B1
       WHERE B1.EMPLID = B.EMPLID
         AND B1.EMPL_RCD = B.EMPL_RCD
         AND B1.EFFDT <= $Date)
   AND B.EFFSEQ = (SELECT MAX(B2.EFFSEQ) FROM PS_JOB B2
        WHERE B2.EMPLID = B.EMPLID
          AND B2.EFFDT = B.EFFDT)
   AND C.LOCATION = B.LOCATION
   AND C.SETID = B.SETID_LOCATION
   AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_LOCATION_TBL C1
        WHERE C1.EFFDT <= C.EFFDT and C1.LOCATION = C.LOCATION
                                  AND C1.SETID = C.SETID)
   AND C.CAN_OEE_AREACD IN [$AreaList]
   AND D.JOBCODE = B.JOBCODE
   AND D.SETID = B.SETID_JOBCODE
   AND D.EFFDT = (SELECT MAX(D1.EFFDT) FROM PS_JOBCODE_TBL D1
        WHERE D1.EFFDT <= D.EFFDT and D1.JOBCODE = D.JOBCODE
                                  AND D1.SETID = D.SETID)

ORDER BY C.CAN_OEE_AREACD

end-SELECT
end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Designated-Groups
!***********************************************************************
begin-procedure Designated-Groups(#EmpType,$Aboriginal,$Minority,$Disabled,
                                   $Female,#AreaCnt)

   if $Aboriginal = 'Y'
      array-add 1 to Values(#AreaCnt) Aboriginal(#EmpType)
   end-if
   if $Minority = 'Y'
      array-add 1 to Values(#AreaCnt) Minority(#EmpType)
   end-if
   if $Disabled = 'Y'
      array-add 1 to Values(#AreaCnt) Disabled(#EmpType)
   end-if
   if $Female ='Y'
      array-add 1 to Values(#AreaCnt) Female(#EmpType)
   end-if

end-procedure


!***********************************************************************
! BEGIN-PROCEDURE Print-Report
!***********************************************************************
begin-procedure Print-Report(#FirstCnt,#SecndCnt)

  let #cnt2 = #FirstCnt + 1
  while #cnt1 <= #FirstCnt or #cnt2 <= #SecndCnt
     get $Area1 from Values(#Cnt1) Areas
     get $Area2 from Values(#Cnt2) Areas
     if $Area1 < $Area2 or isnull($Area2)
        let $_FieldName  = 'CAN_OEE_AREACD'
        let $_FieldValue = $Area1
        do Read-Translate-Table
        print $_XlatLongName  (+2,1)
        let #Line = 0
        while #Line <= 3
           get #Ttl #Abr #Min #Dis #Fem from Values(#Cnt1) Total(#Line) -
               Aboriginal(#Line) Minority(#Line) Disabled(#Line) Female(#Line)
           evaluate #Line
              when = 0
                 print 'Permanent Full-Time' (+2,1)
              when = 1
                 print 'Permanent Part-Time' (+1,1)
              when = 2
                 print 'Temporary          ' (+1,1)
              when = 3
                 print 'Seasonal           ' (+1,1)
           end-evaluate
           print #Ttl                  (0,29,6) edit 99999
           print 0                     (0,36,8) edit 99999
           print #Abr                  (0,45,6) edit 99999
           print 0                     (0,52,8) edit 99999
           print #Min                  (0,61,6) edit 99999
           print 0                     (0,68,8) edit 99999
           print #Dis                  (0,77,6) edit 99999
           print 0                     (0,84,8) edit 99999
           print #Fem                  (0,93,6) edit 99999
           print 0                     (0,100) edit 99999
           add 1 to #Line
        end-while
        add 1 to #Cnt1
     else
        if $Area2 < $Area1 or isnull($Area1)
           let $_FieldName  = 'CAN_OEE_AREACD'
           let $_FieldValue = $Area2
           do Read-Translate-Table
           print $_XlatLongName  (+2,1)
           let #Line = 0
           while #Line <= 3
              get #Ttl #Abr #Min #Dis #Fem from Values(#Cnt2) Total(#Line) -
                  Aboriginal(#Line) Minority(#Line) Disabled(#Line) Female(#Line)
              evaluate #Line
                 when = 0
                    print 'Permanent Full-Time' (+2,1)
                 when = 1
                    print 'Permanent Part-Time' (+1,1)
                 when = 2
                    print 'Temporary          ' (+1,1)
                 when = 3
                    print 'Seasonal           ' (+1,1)
              end-evaluate
              print 0                     (0,29,6) edit 99999
              print #Ttl                  (0,36,8) edit 99999
              print 0                     (0,45,6) edit 99999
              print #Abr                  (0,52,8) edit 99999
              print 0                     (0,61,6) edit 99999
              print #Min                  (0,68,8) edit 99999
              print 0                     (0,77,6) edit 99999
              print #Dis                  (0,84,8) edit 99999
              print 0                     (0,93,6) edit 99999
              print #Fem                  (0,100) edit 99999
              add 1 to #Line
           end-while
           add 1 to #Cnt2
        else
           let $_FieldName  = 'CAN_OEE_AREACD'
           let $_FieldValue = $Area2
           do Read-Translate-Table
           print $_XlatLongName  (+2,1)
           let #Line = 0
           while #Line <= 3
              get #Ttl1 #Abr1 #Min1 #Dis1 #Fem1 from Values(#Cnt1) Total(#Line) -
                  Aboriginal(#Line) Minority(#Line) Disabled(#Line) Female(#Line)
              get #Ttl2 #Abr2 #Min2 #Dis2 #Fem2 from Values(#Cnt2) Total(#Line) -
                  Aboriginal(#Line) Minority(#Line) Disabled(#Line) Female(#Line)
              evaluate #Line
                 when = 0
                    print 'Permanent Full-Time' (+2,1)
                 when = 1
                    print 'Permanent Part-Time' (+1,1)
                 when = 2
                    print 'Temporary          ' (+1,1)
                 when = 3
                    print 'Seasonal           ' (+1,1)
              end-evaluate
              print #Ttl1                 (0,29,6) edit 99999
              print #Ttl2                 (0,36,8) edit 99999
              print #Abr1                 (0,45,6) edit 99999
              print #Abr2                 (0,52,8) edit 99999
              print #Min1                 (0,61,6) edit 99999
              print #Min2                 (0,68,8) edit 99999
              print #Dis1                 (0,77,6) edit 99999
              print #Dis2                 (0,84,8) edit 99999
              print #Fem1                 (0,93,6) edit 99999
              print #Fem2                 (0,100) edit 99999
              add 1 to #Line
           end-while
           add 1 to #Cnt1
           add 1 to #Cnt2
        end-if
     end-if
  end-while

end-procedure

#Include 'hrrnctl1.sqc'  !Get run control parameter values
#Include 'hrgetval.sqc'  !Get values mask routines

#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'askftd.sqc'    !Get-From-Thru-Date procedure
#Include 'askarea.sqc'   !Get-AreaCd procedure
#Include 'stdapi.sqc'    !Routines to Update Run Status
