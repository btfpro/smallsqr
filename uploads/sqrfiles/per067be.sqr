!***********************************************************************
!  PER067BE - Social Report Belgium
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------*
!                                                                      *
!          $Date:  2006/07/19:14:54:45                                 *
!       $Release:  HR9                                                 *
!      $Revision:  101                                                 *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
Begin-Setup
#include 'ptpsp125.sqc'   !Printer and page-size initialization
End-Setup

#define addcolnr  38
#define COLNR 35
#define G1 45
#define G2 65
#define G3 85
#define G4 105

#define C1 50
#define C2 70
#define C3 90

#define  COMPANY_TBL
#include 'rellang.sqc'   ! Translations File


begin-report
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report


!**************************
begin-heading 5

if $ReportTitle = ''
let $ReportTitle = 'Social Report'
end-if

#Include 'stdhtr08.sqc'

end-heading


begin-procedure Init-Report
  move 'PER067BE' to $ReportID

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init

  do Get-Report-Language

  if $prcs_process_instance = ''
    display 'This program should be started from within a PeopleSoft menu'
  else
    do Select-Parameters
  end-if

  display ' '
  display $ReportTitle
  display ' '

end-procedure


!********************************************************************
! Get_Info_From_StrTable
!--------------------------------------------------------------------
! Get data from strings Table where Program ID = PER067BE
!********************************************************************
begin-procedure Report-Translation

do Init_Report_Translation('PER067BE',$language_cd)
do Append_Report_Translation ('HR')


do Get_Field_Information ('PER067BE', 'REPORT_TITLE',       $ReportTitle,      #DW)

!---- Main Block Titles

do Get_Field_Information ('PER067BE', 'LEGAL_APPR_BEL',     $T_Legal_Type, #DW)
do Get_Field_Information ('PER067BE', 'TRADE_REG_BEL',      $T_Trade_reg,  #DW)
do Get_Field_Information ('PER067BE', 'RSZ_EMPLR_BEL',      $T_RSZ_Emplr,  #DW)
do Get_Field_Information ('PER067BE', 'IND_COMMITTEES',     $T_Ind_Committees,  #DW)
do Get_Field_Information ('PER067BE', 'SECTION1_HDR',       $T_Section1_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'SECTION1A_HDR',      $T_Section1A_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'SECTION1AA_HDR',     $T_Section1AA_Hdr, #DW)
do Get_Field_Information ('PER067BE', 'SECTION1B_HDR',      $T_Section1B_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'SECTION1BA_HDR',     $T_Section1BA_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'SECTION1BB_HDR',     $T_Section1BB_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'CNT_INDEF_HDR',      $T_Cnt_Indef_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'CNT_TEMP_HDR',       $T_Cnt_Temp_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'CNT_DEFINED_HDR',    $T_Cnt_Defined_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'CNT_REPL_HDR',       $T_Cnt_Repl_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'SECTION1BC_HDR',     $T_Section1BC_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'MALE',               $T_Male_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'FEMALE',             $T_Female_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'SECTION1BD_HDR',     $T_Section1BD_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'CAT_EXECUTIVES',     $T_Cat_Executives_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'CAT_EMPLOYEES',      $T_Cat_Employees_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'CAT_WORKERS',        $T_Cat_Workers_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'CAT_OTHER',          $T_Cat_Other_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'SECTION2_HDR',       $T_Section2_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'SECTION2A_HDR',      $T_Section2A_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'SECTION2B_HDR',      $T_Section2B_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'SECTION3_HDR',       $T_Section3_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'FULLTIME_HDR',       $T_FullTime_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'PARTTIME_HDR',       $T_PartTime_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'NUMBER_HDR',         $T_Number_Hdr,  #DW)
do Get_Field_Information ('PER067BE', 'FTE_HDR',            $T_FTE_Hdr,  #DW)

!---- Other Titles

do Get_Field_Information ('HR',       'COMPANY',            $T_Company,    #DW)
do Get_Field_Information ('HR',       'ADDRESS1',           $T_Address,    #DW)

end-procedure


begin-procedure Get-Values
   let $language_cd = $PRCS_LANGUAGE_CD
   do Get-Company-Param
   do Get-From-Thru-Date

   do Convert-To-DTU-Date($FROMDATE,$FROMDATE-DTU)
   do Convert-To-DTU-Date($THRUDATE,$THRUDATE-DTU)
   do dtu-diff-days($FROMDATE-DTU,$THRUDATE-DTU,#FROM-THRU-DAYS)

end-procedure


!***********************************************************************
!  PROC PROCESS-MAIN
!         Main Procedure
!***********************************************************************

BEGIN-PROCEDURE Process-Main

  let $sql-statement = 'PER067BE.SQR,Process-Main,Select,CONTRACT_DATA A'
  do Get-Company-Data
  do Get-Pers-Register
  do Print-Personnel-Register
  new-page
  do Print-Hires-Terminations
  do Print-Social-Balance-Categories

end-procedure Process-Main


!---------- Get Company Data -------------!
BEGIN-PROCEDURE Get-Company-Data

let $sql-statement = 'PER067BE.SQR,Process-Main,Select,COMPANY_TBL CO'
begin-select On-Error=SQL-Error
CO.DESCR
CO.TRADE_NAME_BEL
CO.TRADE_REG_BEL
CO.RSZ_EMPLR_BEL
CO.LEGAL_APPR_BEL
CO.EFFDT
CO.ADDRESS1
CO.ADDRESS3
CO.ADDRESS2
CO.ADDRESS4
CO.NUM1
CO.NUM2
CO.HOUSE_TYPE
CO.ADDR_FIELD1
CO.ADDR_FIELD2
CO.ADDR_FIELD3
CO.POSTAL
CO.CITY
CO.STATE
CO.COUNTY
CO.COUNTRY
CO.GEO_CODE
CO.IN_CITY_LIMIT

   print $T_Company                                                             (+2, 1)
   do print_char(':', 'PREDEFINED', 0)
   let $Company-Trade-Name = RTRIM(&CO.TRADE_NAME_BEL,' ')
   if $Company-Trade-Name != ''
     let $COMPANY_TBL-DESCR = $Company-Trade-Name
   else
     let $Company-Effdt = &CO.effdt
     let $COMPANY_TBL-DESCR = RTRIM(&CO.DESCR,' ')
     do Get_Related_COMPANY_TBL($company,&CO.EFFDT)
   end-if
   print $COMPANY_TBL-DESCR                                                     ( 0,+2)

   print $T_Legal_Type                                                          (+2, 1)
   do print_char(':', 'PREDEFINED', 0)
   move 'LEGAL_APPR_BEL'   to $FieldName
   move &CO.LEGAL_APPR_BEL to $FieldValue
   do Read-Translate-Table
   print $XlatLongName     (0,+2,40)

   print $T_Trade_reg                                                           (+2, 1)
   do print_char(':', 'PREDEFINED', 0)
   print &CO.TRADE_REG_BEL                                                      ( 0,+2)

   print $T_RSZ_Emplr                                                           (+2, 1)
   do print_char(':', 'PREDEFINED', 0)
   print &CO.RSZ_EMPLR_BEL                                                      ( 0,+2)


   !* Set global variabel to be used in Adformat.sqc
   let $ADDRESS1        = RTRIM(&CO.ADDRESS1,' ')
   let $ADDRESS2        = RTRIM(&CO.ADDRESS2,' ')
   let $ADDRESS3        = RTRIM(&CO.ADDRESS3,' ')
   let $ADDRESS4        = RTRIM(&CO.ADDRESS4,' ')
   let $HOUSE_TYPE      = RTRIM(&CO.HOUSE_TYPE,' ')
   let $ADDR_FIELD1     = RTRIM(&CO.ADDR_FIELD1,' ')
   let $ADDR_FIELD2     = RTRIM(&CO.ADDR_FIELD2,' ')
   let $ADDR_FIELD3     = RTRIM(&CO.ADDR_FIELD3,' ')
   let $NUM1            = RTRIM(&CO.NUM1,' ')
   let $NUM2            = RTRIM(&CO.NUM2,' ')
   let $CITY            = RTRIM(&CO.CITY,' ')
   let $STATE           = RTRIM(&CO.STATE,' ')
   let $POSTAL          = RTRIM(&CO.POSTAL,' ')
   let $COUNTY          = RTRIM(&CO.COUNTY,' ')
   let $COUNTRY         = RTRIM(&CO.COUNTRY,' ')
   let $GEO_CODE        = RTRIM(&CO.GEO_CODE,' ')
   let $IN_CITY_LIMIT   = RTRIM(&CO.IN_CITY_LIMIT,' ')

   do ADFORMAT

   print $T_Address                                                  (+2, 1)
   do print_char(':', 'PREDEFINED', 0)
   do Print-Address
   print $T_Ind_Committees                                           (+2, 1)
   do print_char(':', 'PREDEFINED', 0)
   do Get-Department-Data

from PS_COMPANY_TBL CO
where CO.COMPANY = $company
and CO.EFFDT =
        (SELECT MAX(CE.EFFDT)
        from PS_COMPANY_TBL CE
        where CE.COMPANY = CO.COMPANY
        and   CE.EFFDT <= $Thrudate)
end-select

end-procedure Get-Company-Data


!---------- Get Department Data -------------!
begin-procedure Get-Department-Data

let $sql-statement = 'PER067BE.SQR,Get-Department-Data,Select,DEPT_TBL DT'

let #space = 2

begin-select distinct On-Error=SQL-Error

DT.IND_COMMITTEE_BEL

    let $IndCommittee = &DT.IND_COMMITTEE_BEL
    print $IndCommittee (,+#space,3)
    let #space = 5

from PS_DEPT_TBL DT
where DT.COMPANY = $company
and   DT.IND_COMMITTEE_BEL <> ' '
and   DT.EFFDT =
        (select  MAX(DT2.EFFDT)
               from    PS_DEPT_TBL DT2
               where   DT2.SETID  = DT.SETID
               and     DT2.DEPTID = DT.DEPTID
               and     DT2.EFFDT <= $Thrudate)
end-select

end-procedure Get-Department-Data


!---------- Get Personnel Register -------------!
BEGIN-PROCEDURE Get-Pers-Register

let $sql-statement = 'PER067BE.SQR,Process-Main,Select,PERS_REGIST_BEL PR'

let #Employees_FT       = 0
let #Employees_PT       = 0
let #Employees_FTE      = 0
let #Employees_AVG_FT   = 0
let #Employees_AVG_PT   = 0
let #Employees_AVG_FTE  = 0

!New hires, Fulltime, Partime and Full Time Equivalent
let #New_Hires_FT       = 0
let #New_Hires_PT       = 0
let #New_Hires_FTE      = 0

!Terminations, Fulltime, Partime and Full Time Equivalent
let #Terminations_FT    = 0
let #Terminations_PT    = 0
let #Terminations_FTE   = 0

!Contract Types, Fulltime, Parttime and Full Time Equivalent
let #Indef_Duration_FT  = 0
let #Indef_Duration_PT  = 0
let #Indef_Duration_FTE = 0
let #Temp_Duration_FT   = 0
let #Temp_Duration_PT   = 0
let #Temp_Duration_FTE  = 0
let #Defined_Work_FT    = 0
let #Defined_Work_PT    = 0
let #Defined_Work_FTE   = 0
let #Replacement_FT     = 0
let #Replacement_PT     = 0
let #Replacement_FTE    = 0

!Gender
let #Males_FT     = 0
let #Males_PT     = 0
let #Males_FTE    = 0
let #Females_FT   = 0
let #Females_PT   = 0
let #Females_FTE  = 0

!Employment Category / Statute
let #Statute_Worker_FT     = 0
let #Statute_Worker_PT     = 0
let #Statute_Worker_FTE    = 0
let #Statute_Employee_FT   = 0
let #Statute_Employee_PT   = 0
let #Statute_Employee_FTE  = 0
let #Statute_Executive_FT  = 0
let #Statute_Executive_PT  = 0
let #Statute_Executive_FTE = 0
let #Statute_Other_FT      = 0
let #Statute_Other_PT      = 0
let #Statute_Other_FTE     = 0

CREATE-ARRAY name=SOCIAL_BALANCE size=100
  field=SOCIAL_BALANCE_BEL:char:3
  field=EMPLOYEES:number=0
  field=FTE:number=0

let #CATEGORIES = 0


begin-select On-Error=SQL-Error

PR.EMPLID
PR.EMPL_RCD
PR.PERS_REG_DT_BEL
E.TERMINATION_DT
J.CONTRACT_NUM
J.FULL_PART_TIME
J.FTE

  let $EmplID = &PR.EMPLID
  let $ContractNum = &J.CONTRACT_NUM
  let $FullPartTime = &J.FULL_PART_TIME
  let #FTE = &J.FTE

  let $WORK-BEGIN-DT = $FROMDATE
  let $WORK-END-DT = $THRUDATE

  if &PR.PERS_REG_DT_BEL >= $Fromdate
    if $FullPartTime = 'P'
      let #New_Hires_PT = #New_Hires_PT + 1
    else
      let #New_Hires_FT = #New_Hires_FT + 1
    end-if
    let #New_Hires_FTE  = #New_Hires_FTE + #FTE

    let $WORK-BEGIN-DT = &PR.PERS_REG_DT_BEL

  end-if

  do Format-DateTime(&E.TERMINATION_DT,$TERMINATION-DT-CMP,{DEFCMP},'','')
  do Format-DateTime($THRUDATE,$THRUDATE-CMP,{DEFCMP},'','')

  if $TERMINATION-DT-CMP != '' and $TERMINATION-DT-CMP <= $THRUDATE
    if $FullPartTime = 'P'
      let #Terminations_PT = #Terminations_PT + 1
    else
      let #Terminations_FT = #Terminations_FT + 1
    end-if
    let #Terminations_FTE  = #Terminations_FTE + #FTE

    let $WORK-END-DT = &E.TERMINATION_DT
  else

    if $FullPartTime = 'P'
      let #Employees_PT = #Employees_PT + 1
    else
      let #Employees_FT = #Employees_FT + 1
    end-if
    let #Employees_FTE  = #Employees_FTE + #FTE

    do Get-Contract-Data

  end-if

  do Convert-To-DTU-Date($WORK-BEGIN-DT,$WORK-BEGIN-DT-DTU)
  do Convert-To-DTU-Date($WORK-END-DT,$WORK-END-DT-DTU)
  do dtu-diff-days($WORK-BEGIN-DT-DTU,$WORK-END-DT-DTU,#WORK-DAYS)
  let #WORK-RATIO = #WORK-DAYS / #FROM-THRU-DAYS
  if $FullPartTime = 'P'
    let #Employees_AVG_PT = #Employees_AVG_PT + #WORK-RATIO
  else
    let #Employees_AVG_FT = #Employees_AVG_FT + #WORK-RATIO
  end-if
  let #Employees_AVG_FTE  = #Employees_AVG_FTE + (#FTE * #WORK-RATIO)

from PS_PERS_REGIST_BEL PR, PS_JOB J, PS_PER_ORG_ASGN_VW E
where PR.PERS_REG_DT_BEL <= $Thrudate
and E.EMPLID   = PR.EMPLID
and E.EMPL_RCD = PR.EMPL_RCD
and J.EMPLID   = PR.EMPLID
and J.EMPL_RCD = PR.EMPL_RCD
and J.COMPANY  = $company
and   (E.TERMINATION_DT IS NULL
      OR E.TERMINATION_DT > $Fromdate)
and J.EFFDT =
       (SELECT MAX(J2.EFFDT)
        from PS_JOB J2
        where J2.EMPLID = J.EMPLID
        and   J2.EMPL_RCD = J.EMPL_RCD
        and   J2.EFFDT <= $Thrudate)
and J.EFFSEQ = (SELECT MAX(J3.EFFSEQ)
                  from PS_JOB J3
                  where J3.EMPLID = J.EMPLID
                  and   J3.EMPL_RCD = J.EMPL_RCD
                  and   J3.EFFDT = J.EFFDT)
end-select

end-procedure Get-Pers-Register




!---------- Get Contract Data -------------!
BEGIN-PROCEDURE Get-Contract-Data

let $sql-statement = 'PER067BE.SQR,Process-Main,Select,CONTRACT_DATA CD'

begin-select On-Error=SQL-Error

CD.SOCIAL_BALANCE_BEL
CT.CONTRACT_TYPE
CT.CONTR_DUR_BEL
CT.STATUTE_BEL
CT.SUBSTATUTE_BEL
PDE.SEX

  let $ContractType = RTRIM(&CT.CONTRACT_TYPE, ' ')
  let $ContractDur  = RTRIM(&CT.CONTR_DUR_BEL, ' ')
  let $Statute = RTRIM(&CT.STATUTE_BEL, ' ')
  let $SubStatute = RTRIM(&CT.SUBSTATUTE_BEL, ' ')
  let $Sex = RTRIM(&PDE.SEX, ' ')

  if $ContractType = '01' !Employment

    evaluate $ContractDur
    when = '01' !Indefinite duration
      if $FullPartTime = 'P'
        let #Indef_Duration_PT = #Indef_Duration_PT + 1
      else
        let #Indef_Duration_FT = #Indef_Duration_FT + 1
      end-if
      let #Indef_Duration_FTE  = #Indef_Duration_FTE + #FTE
    when = '02' !Temporary duration
      if $FullPartTime = 'P'
        let #Temp_Duration_PT  = #Temp_Duration_PT + 1
      else
        let #Temp_Duration_FT  = #Temp_Duration_FT + 1
      end-if
      let #Temp_Duration_FTE   = #Temp_Duration_FTE + #FTE
    when = '03' !Defined work
      if $FullPartTime = 'P'
        let #Defined_Work_PT   = #Defined_Work_PT + 1
      else
        let #Defined_Work_FT   = #Defined_Work_FT + 1
      end-if
      let #Defined_Work_FTE    = #Defined_Work_FTE + #FTE
    when = '04' !Replacement
      if $FullPartTime = 'P'
        let #Replacement_PT    = #Replacement_PT + 1
      else
        let #Replacement_FT    = #Replacement_FT + 1
      end-if
      let #Replacement_FTE     = #Replacement_FTE + #FTE
    end-evaluate

    if $Sex = 'F'
      if $FullPartTime = 'P'
        let #Females_PT = #Females_PT + 1
      else
        let #Females_FT = #Females_FT + 1
      end-if
      let #Females_FTE  = #Females_FTE + #FTE
    else
      if $FullPartTime = 'P'
        let #Males_PT = #Males_PT + 1
      else
        let #Males_FT = #Males_FT + 1
      end-if
      let #Males_FTE  = #Males_FTE + #FTE
    end-if

    evaluate $Statute
    when = '01' !Worker
      if $FullPartTime = 'P'
        let #Statute_Worker_PT = #Statute_Worker_PT + 1
      else
        let #Statute_Worker_FT = #Statute_Worker_FT + 1
      end-if
      let #Statute_Worker_FTE  = #Statute_Worker_FTE + #FTE
    when = '02' !Employee
      if $SubStatute = '03' !Executive
        if $FullPartTime = 'P'
          let #Statute_Executive_PT = #Statute_Executive_PT + 1
        else
          let #Statute_Executive_FT = #Statute_Executive_FT + 1
        end-if
        let #Statute_Executive_FTE  = #Statute_Executive_FTE + #FTE
      else
        if $FullPartTime = 'P'
          let #Statute_Employee_PT = #Statute_Employee_PT + 1
        else
          let #Statute_Employee_FT = #Statute_Employee_FT + 1
        end-if
        let #Statute_Employee_FTE  = #Statute_Employee_FTE + #FTE
      end-if
    when-other !
      if $FullPartTime = 'P'
        let #Statute_Other_PT = #Statute_Other_PT + 1
      else
        let #Statute_Other_FT = #Statute_Other_FT + 1
      end-if
      let #Statute_Other_FTE  = #Statute_Other_FTE + #FTE
    end-evaluate

  end-if

  let $Social_Balance_Bel = RTRIM(&CD.SOCIAL_BALANCE_BEL, ' ')
  if $Social_Balance_Bel <> ''
    do Update-Social-Balance-Categories
  end-if

from PS_CONTRACT_DATA CD, PS_WKF_CNT_TYPE CT, PS_PERS_DATA_EFFDT PDE
where   CD.EMPLID = $EmplID
and     CD.CONTRACT_NUM = $ContractNum
and     PDE.EMPLID = CD.EMPLID
and     CT.EMPLID = CD.EMPLID
and     CT.CONTRACT_NUM = CD.CONTRACT_NUM
and     CT.EFFDT =
        (select  MAX(CT2.EFFDT)
               from    PS_WKF_CNT_TYPE CT2
               where   CT2.EMPLID       = CT.EMPLID
               and     CT2.CONTRACT_NUM = CT.CONTRACT_NUM
               and     CT2.EFFDT       <= $Thrudate)
and     PDE.EFFDT =
        (select  MAX(PDE2.EFFDT)
               from    PS_PERS_DATA_EFFDT PDE2
               where   PDE2.EMPLID       = PDE.EMPLID
               and     PDE2.EFFDT       <= CT.EFFDT)

end-select

end-procedure Get-Contract-Data


!***********************************************************************
! Function:    Update-Social-Balance-Categories
! Description: Keep track of the counts per Social Balance Category
!***********************************************************************
begin-procedure Update-Social-Balance-Categories

let #I = 0
WHILE #I < #CATEGORIES
   GET $Category from SOCIAL_BALANCE(#I) SOCIAL_BALANCE_BEL
   if $Category = $Social_Balance_Bel
       goto update
   end-if
   let #I = #I + 1
END-WHILE
PUT $Social_Balance_Bel into SOCIAL_BALANCE(#I) SOCIAL_BALANCE_BEL
let #CATEGORIES = #CATEGORIES + 1

update:
  array-add 1 to SOCIAL_BALANCE(#I) EMPLOYEES
  array-add #FTE to SOCIAL_BALANCE(#I) FTE

end-procedure


!***********************************************************************
! Function:    Print-Personnel-Register
! Description: Print counts of employees in Personnel Register
!***********************************************************************
begin-procedure Print-Personnel-Register

print $T_Section1_Hdr     (+4,1) bold

graphic (+1,{g1},60) horz-line
graphic (,{g1},36) vert-line
graphic (,{g2},36) vert-line
graphic (,{g3},36) vert-line
graphic (,{g4},36) vert-line

print $T_FullTime_Hdr                   (+2,{c1},12)
print $T_PartTime_Hdr                   (,{c2},12)
print $T_FTE_Hdr                        (,{c3},12)

print $T_Section1a_Hdr     (+1,1) bold

graphic (,{g1},60) horz-line

print $T_Section1aa_Hdr      (+2,4,54)
print #Employees_AVG_FT                 (,{c1},6)         edit 999999
print #Employees_AVG_PT                 (,{c2},6)         edit 999999
print #Employees_AVG_FTE                (,{c3},9)         edit 999999.99

print $T_Section1b_Hdr     (+2,1) bold
print $T_Section1ba_Hdr            (+2,1,54) bold
print #Employees_FT                     (,{c1},6)         edit 999999
print #Employees_PT                     (,{c2},6)         edit 999999
print #Employees_FTE                    (,{c3},9)         edit 999999.99

print $T_Section1bb_Hdr            (+2,1,54) bold

print $T_Cnt_Indef_Hdr     (+2,4,54)
print #Indef_Duration_FT                (,{c1},6)         edit 999999
print #Indef_Duration_PT                (,{c2},6)         edit 999999
print #Indef_Duration_FTE               (,{c3},9)         edit 999999.99

print $T_Cnt_Temp_Hdr        (+2,4,54)
print #Temp_Duration_FT                 (,{c1},6)         edit 999999
print #Temp_Duration_PT                 (,{c2},6)         edit 999999
print #Temp_Duration_FTE                (,{c3},9)         edit 999999.99

print $T_Cnt_Defined_Hdr      (+2,4,54)
print #Defined_Work_FT                  (,{c1},6)         edit 999999
print #Defined_Work_PT                  (,{c2},6)         edit 999999
print #Defined_Work_FTE                 (,{c3},9)         edit 999999.99

print $T_Cnt_Repl_Hdr         (+2,4,54)
print #Replacement_FT                   (,{c1},6)         edit 999999
print #Replacement_PT                   (,{c2},6)         edit 999999
print #Replacement_FTE                  (,{c3},9)         edit 999999.99

print $T_Section1bc_Hdr            (+2,1,54) bold
print $T_Male_Hdr            (+2,4,54)
print #Males_FT                         (,{c1},6)         edit 999999
print #Males_PT                         (,{c2},6)         edit 999999
print #Males_FTE                        (,{c3},9)         edit 999999.99

print $T_Female_Hdr             (+2,4,54)
print #Females_FT                       (,{c1},6)         edit 999999
print #Females_PT                       (,{c2},6)         edit 999999
print #Females_FTE                      (,{c3},9)         edit 999999.99


print $T_Section1bd_Hdr    (+2,1,54) bold

print $T_Cat_Executives_Hdr            (+2,4,54)
print #Statute_Executive_FT                         (,{c1},6)         edit 999999
print #Statute_Executive_PT                         (,{c2},6)         edit 999999
print #Statute_Executive_FTE                        (,{c3},9)         edit 999999.99

print $T_Cat_Employees_Hdr            (+2,4,54)
print #Statute_Employee_FT                         (,{c1},6)         edit 999999
print #Statute_Employee_PT                         (,{c2},6)         edit 999999
print #Statute_Employee_FTE                        (,{c3},9)         edit 999999.99

print $T_Cat_Workers_Hdr            (+2,4,54)
print #Statute_Worker_FT                         (,{c1},6)         edit 999999
print #Statute_Worker_PT                         (,{c2},6)         edit 999999
print #Statute_Worker_FTE                        (,{c3},9)         edit 999999.99

print $T_Cat_Other_Hdr            (+2,4,54)
print #Statute_Other_FT                         (,{c1},6)         edit 999999
print #Statute_Other_PT                         (,{c2},6)         edit 999999
print #Statute_Other_FTE                        (,{c3},9)         edit 999999.99

graphic (+1,{g1},60) horz-line


end-procedure


!***********************************************************************
! Function:    Print-Hires-Terminations
! Description: Print counts of new hires and terminations
!***********************************************************************
begin-procedure Print-Hires-Terminations

print $T_Section2_Hdr      (+4,1) bold

graphic (+1,{g1},60) horz-line
graphic (,{g1},8) vert-line
graphic (,{g2},8) vert-line
graphic (,{g3},8) vert-line
graphic (,{g4},8) vert-line

print $T_FullTime_Hdr                   (+2,{c1},12)
print $T_PartTime_Hdr                   (,{c2},12)
print $T_FTE_Hdr                        (,{c3},12)

graphic (+1,{g1},60) horz-line

print $T_Section2a_Hdr    (+2,1,54) bold

print #New_Hires_FT                     (,{c1},6)         edit 999999
print #New_Hires_PT                     (,{c2},6)         edit 999999
print #New_Hires_FTE                    (,{c3},9)         edit 999999.99

print $T_Section2b_Hdr    (+2,1,54) bold
print #Terminations_FT                  (,{c1},6)         edit 999999
print #Terminations_PT                  (,{c2},6)         edit 999999
print #Terminations_FTE                 (,{c3},9)         edit 999999.99

graphic (+1,{g1},60) horz-line

end-procedure

!***********************************************************************
! Function:    Print-Social-Balance-Categories
! Description: Print counts per Social Balance Category
!***********************************************************************
begin-procedure Print-Social-Balance-Categories

print $T_Section3_Hdr     (+4,1) bold

let #vert-len = 4 + (2 * #CATEGORIES)

graphic (+1,{g1},40) horz-line
graphic (,{g1},#vert-len) vert-line
graphic (,{g2},#vert-len) vert-line
graphic (,{g3},#vert-len) vert-line

print $T_Number_Hdr                   (+2,{c1},12)
print $T_FTE_Hdr                        (,{c2},12)

graphic (+1,{g1},40) horz-line

let #I = 0
let #MAX-CATEGORY = #CATEGORIES - 1
WHILE #I <= #MAX-CATEGORY
   GET $Social_Balance_Bel #Employees #FTE
   from SOCIAL_BALANCE(#I) SOCIAL_BALANCE_BEL EMPLOYEES FTE

   print $Social_Balance_Bel             (+2,4,5)
   move 'SOCIAL_BALANCE_BEL'   to $FieldName
   move $Social_Balance_Bel to $FieldValue
   do Read-Translate-Table
   print $XlatLongName     (0,+2,40)
   print #Employees               (,{c1},6)         edit 999999
   print #FTE                     (,{c2},9)         edit 999999.99
   
   let #I = #I + 1

END-WHILE

graphic (+1,{g1},40) horz-line

end-procedure




!*******************************  PRINTING ZONE ***************************


!*********************************************************************
!  Print-Address
!*********************************************************************

begin-procedure Print-Address

   LET #newline = 0
   if RTRIM($ADDLINE2,' ') != ''
     print $ADDLINE2                                    (+#newline,{ADDCOLNR})
     LET #newline = 1
   end-if
   if RTRIM($ADDLINE3, ' ') != ''
     print $ADDLINE3                                    (+#newline,{ADDCOLNR})
     LET #newline = 1
   end-if
   if RTRIM($ADDLINE31,' ') != ''
     print $ADDLINE31                                   (+#newline,{ADDCOLNR})
     LET #newline = 1
   end-if
   if RTRIM($ADDLINE4,' ') != ''
     print $ADDLINE4                                    (+#newline,{ADDCOLNR})
     LET #newline = 1
   end-if
   if RTRIM($ADDLINE5,' ') != ''
     print $ADDLINE5                                    (+#newline,{ADDCOLNR})
     LET #newline = 1
   end-if
   if RTRIM($ADDLINE6,' ') != ''
      and $COUNTRY != 'BEL'
     print $ADDLINE6                                    (+#newline,{ADDCOLNR})
   end-if

end-procedure


begin-procedure print_char($symbol,$flag,#col_cnt)

  uppercase $flag
  evaluate $flag
    when='ABSOLUTE'
      print $symbol                                                             (  ,#col_cnt)
      break
    when='PREDEFINED'
      print $symbol                                                             (  ,{COLNR})
      break
    when='RELATIVE'
      print $symbol                                                             (  ,+#col_cnt)
      break
  end-evaluate

end-procedure

#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#Include 'readxlat.sqc'  !get translates for fieldname, value
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date and time calculations
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'adformat.sqc'  !Global address format
