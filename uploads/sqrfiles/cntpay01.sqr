!****************************************
!  CNTPAY01 Additional Pay Maintenance  *
!****************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:03:25:18                                 !
!       $Release:  HR9                                                 !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!***********************************************************************

#include 'setenv.sqc'     !Set environment
#Include 'setup31.sqc'    !Printer and page-size initialization
!***********************************************************************
begin-report

  do HOUSEKEEPING
  do MAINLINE
  do WRAPUP

end-report

!************************************************************
! This procedure will reset the OTH_PAY on the ADDL PAY Record
! to 0 if the contract is now expired and the Amount goal =
! amount balance for individuals (regardless of their current
! status) who had the expired contract with earnings code =
! contract earnings code
!************************************************************
begin-procedure CLEANUP-OTHPAY-4-X-CONTRACT
   if $Run_Flag = 'CPP'
      let $PCPayEndDt = $Pay_End_Dt
      let $PCCompany = $Company
      let $PCPaygroup = $Paygroup
      do Process-OthPay
   else
      do Select-PCPayEndDt
   end-if
end-procedure


begin-procedure Select-PCPayEndDt
begin-select
PC1.PAY_END_DT
PC1.COMPANY
PC1.PAYGROUP
    let $PCPayEndDt = &PC1.PAY_END_Dt
    let $PCCompany = &PC1.COMPANY
    let $PCPaygroup = &PC1.PAYGROUP
    do Process-OthPay
from PS_PAY_CALENDAR PC1
where PC1.RUN_ID = $RUN_ID
  and PC1.PAY_OFF_CYCLE_CAL = 'N'
end-select
end-procedure

begin-procedure Process-OthPay
begin-select
M1.EMPLID
M1.EMPL_RCD
M1.ERNCD
M1.EFFDT
M1.ADDL_SEQ
   do Update-Zero-2-OthPay
from PS_ADDL_PAY_DATA M1, PS_CONTRACT M2, PS_PAYGROUP_TBL M3
where M1.GOAL_AMT = M1.GOAL_BAL
  and M1.ERNCD = M3.ERNCD_CNTRCT_REG
  and M1.OTH_PAY <> 0
  and M1.RECORD_SOURCE = 'B'
  and M1.ADDL_SEQ in (SELECT M4.ADDL_SEQ from PS_CONTRACT M4
                      where M4.EMPLID = M1.EMPLID
                        and M4.EMPL_RCD = M1.EMPL_RCD
                        and M4.EFFDT < $PCPayEndDt)
  and $PCPayEndDt > M2.PAYMENT_END_DT
  and M2.EMPLID = M1.EMPLID AND M2.EMPL_RCD = M1.EMPL_RCD
  and M3.COMPANY = $PCCompany
  and M3.PAYGROUP = $PCPaygroup
end-select
end-procedure


begin-procedure Update-Zero-2-OthPay
begin-sql
update PS_ADDL_PAY_DATA
  set OTH_PAY = 0
where EMPLID = &M1.EMPLID and EMPL_RCD = &M1.EMPL_RCD
  and EFFDT = &M1.EFFDT and ERNCD = &M1.ERNCD and ADDL_SEQ = &M1.ADDL_SEQ
  and RECORD_SOURCE = 'B'
end-sql
end-procedure


!****************************************************************************
! HOUSEKEEPING                                                              *
!****************************************************************************
begin-procedure HOUSEKEEPING

  do INIT-DATETIME
  do INIT-NUMBER
  do GET-CURRENT-DATETIME
  do STDAPI-INIT

  let $Run_Flag = 'Run_ID'

  if $Prcs_Process_Instance = ''
     !START-Security logic, does not allow SQR to run with SQRW
     !DISPLAY 'ERROR - SQR CAN ONLY BE RUN FROM PROCESS SCHEDULER'
     !DISPLAY ' THIS IS BECAUSE OF SECURITY LOGIC'
     !STOP QUIET               !exit program
     !END of Security Logic
     !Uncomment Prompts for SQRW development/testing ONLY!!
     do PROMPTS              !Change this to call whatever
                            !procedures are needed if the user
                            !is not using the process scheduler.
                            !(eg. do ASK-FROM-THRU-DATE)
  else
     do SELECT-PARAMETERS
     do GET-VALUES
  end-if

  do ASSIGN-SELECT-COND
  do CREATE-ARRAY

  move 'CNTPAY01' to $ReportID
  move 'Additional Pay Maintenance' to $ReportTitle
  show $ReportID ' - ' $ReportTitle
  display ' '

  do CLEANUP-OTHPAY-4-X-CONTRACT

end-procedure
!****************************************************************************
! PROMPTS                                                                   *
! Prompts for all input parameters.                                         *
!****************************************************************************
begin-procedure PROMPTS

  input $RUN_ID 'Input RUN_ID (Enter blank for Company, Paygroup, Pay_End_Dt processing)'
  uppercase $RUN_ID

  if $RUN_ID = ''

     let $Run_Flag = 'CPP'

     input $COMPANY 'Input Company'
     uppercase $Company

     input $Paygroup 'Input Paygroup'
     uppercase $Paygroup

     input $Pay_End_Dt 'Input Pay_End_Dt' type=date
     uppercase $Pay_End_Dt

  end-if

end-procedure
!****************************************************************************
! GET-VALUES                                                                *
! Retrives run control varibles for process scheduler                       *
!****************************************************************************
begin-procedure GET-VALUES

  if $RC_PAYINIT.RUN_ID = ''
     let $Run_Flag = 'CPP'
     let $Company = $RC_PAYINIT.COMPANY
     let $Paygroup = $RC_PAYINIT.PAYGROUP
     let $Pay_End_Dt = $RC_PAYINIT.Pay_End_Dt
  else
     let $Run_ID = $RC_PAYINIT.RUN_ID
  end-if

end-procedure
!***************************************************************************
! ASSIGN-SELECT-COND                                                       *
! Assigns Where clause variable dependant upon the input parameters.  This *
! is either by Run_ID or Company, Paygroup, and Pay_End_Dt.                *
!***************************************************************************
begin-procedure ASSIGN-SELECT-COND

  if $Run_Flag = 'CPP'

     let $Cond = 'PAY_CAL.COMPANY = '''|| $Company ||
                 ''' AND PAY_CAL.PAYGROUP = '''|| $Paygroup ||
                 ''' AND PAY_CAL.PAY_END_DT = '''|| $Pay_End_Dt||''''
  else

     let $Cond = 'PAY_CAL.RUN_ID = '''|| $RUN_ID || ''''
  end-if

end-procedure
!******************************************************************************
! CREATE-ARRAY                                                                *
! Sets up the storage array used during processing                            *
!******************************************************************************
begin-procedure CREATE-ARRAY

   let #max_wrk = 30

   Create-array name=Wrk_Comp  Size = 30
        field=Wrk_Effdt:Char
        field=Wrk_Lump_Sum_Pay:Char
        field=Wrk_Adjust_Amt:Number
        field=Wrk_Prorate_Amt:Number
        field=Wrk_BC_PayPrd:Number
        field=Wrk_DC_PayPrd:Number
        field=Wrk_AC_PayPrd:Number
        field=Wrk_BC_Goal_Amt:Number
        field=Wrk_DC_Goal_Amt:Number
        field=Wrk_AC_Goal_Amt:Number
        field=Wrk_BC_Passed_PayPrd:Number
        field=Wrk_DC_Passed_PayPrd:Number
        field=Wrk_AC_Passed_PayPrd:Number
        field=Wrk_PNE_Retro_Amt:Number
        field=Wrk_CRG_Retro_Amt:Number
        field=Wrk_ENP_Retro_Amt:Number

end-procedure
!****************************************************************************
! INITIALIZE-ARRAY                                                          *
!****************************************************************************
begin-procedure INITIALIZE-ARRAY

  let #wrk_idx = 0

  while #wrk_idx < #max_wrk

      put ' ' ' ' 0 0 0 0 0 0 0 0 0 0 0 0 0 0
      into Wrk_Comp(#wrk_idx)
           Wrk_Effdt
           Wrk_Lump_Sum_Pay
           Wrk_Adjust_Amt
           Wrk_Prorate_Amt
           Wrk_BC_PayPrd
           Wrk_DC_PayPrd
           Wrk_AC_PayPrd
           Wrk_BC_Goal_Amt
           Wrk_DC_Goal_Amt
           Wrk_AC_Goal_Amt
           Wrk_BC_Passed_PayPrd
           Wrk_DC_Passed_PayPrd
           Wrk_AC_Passed_PayPrd
           Wrk_PNE_Retro_Amt
           Wrk_CRG_Retro_Amt
           Wrk_ENP_Retro_Amt

      add 1 to #wrk_idx
  end-while

end-procedure
!****************************************************************************
! MAINLINE                                                                  *
! Selects Paygroups to process                                              *
!****************************************************************************
begin-procedure MAINLINE

  let $Indent = ''

  if $Run_Flag = 'Run_ID'

     let $Processing = 'Run_ID: ' || $Run_ID
     do START-PROCESSING
  end-if

let $err-statement1 = 'CNTPAY01.SQR, Select Error- MAINLINE'
let $err-statement2 = 'Bind Variables: Run_ID '||$run_ID||', Company' ||
                       $Company||', Paygroup '||$Paygroup||', Pay End Date '||
                       $Pay_End_Dt
begin-SELECT on-error=Error-Display
PAY_CAL.COMPANY
PAY_CAL.PAYGROUP
PAY_GRP.EFF_STATUS
PAY_GRP.ERNCD_REG_EARNS
PAY_GRP.ERNCD_CNTRCT_REG
PAY_GRP.ERNCD_ERN_NOT_PD
PAY_GRP.ERNCD_PD_NOT_ERN
PAY_GRP.WORK_SCHEDULE
PAY_CAL.PAY_BEGIN_DT
PAY_CAL.PAY_END_DT
PAY_CAL.PAY_CONFIRM_START
FRQ_TBL.FREQUENCY_TYPE


   let $PD_Eff_Status = &PAY_GRP.EFF_STATUS

   if &PAY_CAL.PAY_CONFIRM_START = 'N'

      if &PAY_GRP.EFF_STATUS = 'A'

         let $PD_Company          = &PAY_CAL.COMPANY
         let $PD_Paygroup         = &PAY_CAL.PAYGROUP
         let $PD_Pay_Freq         = &FRQ_TBL.FREQUENCY_TYPE
         let $PD_Erncd_Reg_Earns  = &PAY_GRP.ERNCD_CNTRCT_REG
         let $PD_Erncd_Ern_not_Pd = &PAY_GRP.ERNCD_ERN_NOT_PD
         let $PD_Erncd_Pd_not_Ern = &PAY_GRP.ERNCD_PD_NOT_ERN
         let $PD_Work_Schedule    = &PAY_GRP.WORK_SCHEDULE
         let $CP_Pay_Begin_Dt     = &PAY_CAL.PAY_BEGIN_DT
         let $CP_Pay_End_Dt       = &PAY_CAL.PAY_END_DT

         do VALIDATE-PREVIOUS-PAY-CALENDAR

         if  $Valid_Previous_Pay_Calendar = 'Y'
            do PROCESS-PAYGROUP
         end-if

      end-if

   else

      display ' '
      display '   Pay Calendar: ' noline
      display $PD_Paygroup        noline
      display ', '                noline
      display $CP_Pay_End_Dt      noline
      display ' not processed'
      display '   Confirm has been started for this calendar'

   end-if

FROM PS_PAY_CALENDAR PAY_CAL, PS_PAYGROUP_TBL PAY_GRP,
     PS_FREQUENCY_TBL FRQ_TBL
WHERE [$Cond]
  AND PAY_CAL.PAY_OFF_CYCLE_CAL = 'N'
  AND PAY_CAL.COMPANY  = PAY_GRP.COMPANY
  AND PAY_CAL.PAYGROUP = PAY_GRP.PAYGROUP
  AND PAY_GRP.EFFDT    = (SELECT MAX(PAY_GRP2.EFFDT)
                          FROM PS_PAYGROUP_TBL PAY_GRP2
                          WHERE PAY_GRP2.COMPANY  = PAY_GRP.COMPANY
                            AND PAY_GRP2.PAYGROUP = PAY_GRP.PAYGROUP
                            AND PAY_GRP2.EFFDT   <= PAY_CAL.PAY_END_DT)
  AND PAY_GRP.PAY_FREQUENCY   = FRQ_TBL.FREQUENCY_ID
  AND FRQ_TBL.EFF_STATUS      = 'A'
  AND FRQ_TBL.EFFDT           =
    (SELECT MAX(FRQ_TBL1.EFFDT)
       FROM PS_FREQUENCY_TBL FRQ_TBL1
      WHERE FRQ_TBL1.FREQUENCY_ID   = FRQ_TBL.FREQUENCY_ID
        AND FRQ_TBL1.EFF_STATUS     = FRQ_TBL.EFF_STATUS
        AND FRQ_TBL1.EFFDT         <= PAY_GRP.EFFDT)


ORDER BY PAY_CAL.COMPANY,PAY_CAL.PAYGROUP, PAY_CAL.PAY_END_DT

end-SELECT

  let $Indent = ''

  if $Run_Flag = 'Run_ID'

     let $Processing = 'Run_ID: ' || $Run_ID
     do FINISH-PROCESSING
  end-if

end-procedure
!****************************************************************************
! PROCESS-PAYGROUP                                                          *
! Controls processing for each paygroup from mainline                       *
!****************************************************************************
begin-procedure PROCESS-PAYGROUP

  let #EEs_Processed = 0
  let #EEs_in_Error  = 0
  let $Msg           = ''
  let $Msg2          = ''
  let $Msg3          = ''
  let $Msg4          = ''
  let $Msg5          = ''

  let $Indent = '   '
  let $Processing = 'Paygroup: '||$PD_Paygroup
  do START-PROCESSING

  do VERIFY-PAYGROUP1
  do VERIFY-PAYGROUP2

  if $Skip_Paygroup = 'N'

     do SELECT-CONTRACT-INFO

     display ' '
     display '      Employees Processed: ' noline
     move #EEs_Processed to $EEs_Processed 999999
     display $EEs_Processed

     display '      Employees in Error : ' noline
     move #EEs_in_Error to $EEs_in_Error 999999
     display $EEs_in_Error

     let $Indent = '   '
     let $Processing = 'Paygroup: '||$PD_Paygroup
     do FINISH-PROCESSING
  else

     display ' '
     let $Processing = '   Paygroup: '||$PD_Paygroup||' not processed'
     display $Processing
     display $Msg
     display $Msg2
     display $Msg3
     display $Msg4
     display $Msg5
  end-if

end-procedure
!****************************************************************************
! VERIFY-PAYGROUP1                                                          *
! Verifies that no contracts exceed the maximum pay calendar for the        *
! paygroup                                                                  *
!****************************************************************************
begin-procedure VERIFY-PAYGROUP1

   let $Skip_Paygroup = 'N'
   let $Exceed_Max = 'N'

let $err-statement1 = 'CNTPAY01.SQR, Select Error- VERIFY-PAYGROUP1'
let $err-statement2 = 'Bind Variables: Company '||$PD_Company||', Paygroup '||
                       $PD_Paygroup||', Current Period Begin Date '||
                       $CP_Pay_Begin_Dt||', Current Period End Date '||
                       $CP_Pay_End_Dt
begin-SELECT on-error=Error-Display
CONT1.EMPLID
CONT1.EMPL_RCD
CONT1.PAYMENT_END_DT

    if $Exceed_Max = 'N'
        move &CONT1.EMPLID    to $Chk_EmplID
        move &CONT1.EMPL_RCD  to #Chk_Empl_Rcd
        do VERIFY-ACTIVE-JOB

        if $Active_Job = 'Y'
            let $Skip_Paygroup = 'Y'
            let $Exceed_Max = 'Y'
            let $Msg = '   Pay Calendar does not extend out to cover contract payment '||
                       'end date of '||&CONT1.PAYMENT_END_DT
        end-if
    end-if

FROM PS_JOB JOB1, PS_CONTRACT CONT1, PS_FREQUENCY_TBL FRQ_TBL2
WHERE JOB1.COMPANY        = $PD_Company
  AND JOB1.PAYGROUP       = $PD_Paygroup
  AND JOB1.EMPLID         = CONT1.EMPLID
  AND JOB1.EMPL_RCD       = CONT1.EMPL_RCD
  AND JOB1.EFFDT  = (SELECT MAX(JOB11.EFFDT)
                       FROM PS_JOB JOB11
                      WHERE JOB11.EMPLID         = JOB1.EMPLID
                        AND JOB11.EMPL_RCD       = JOB1.EMPL_RCD
                        AND JOB11.EFFDT         <= $CP_Pay_End_Dt)
  AND JOB1.EFFSEQ = (SELECT MAX(JOB12.EFFSEQ)
                       FROM PS_JOB JOB12
                      WHERE JOB12.EMPLID         = JOB1.EMPLID
                        AND JOB12.EMPL_RCD       = JOB1.EMPL_RCD
                        AND JOB12.EFFDT          = JOB1.EFFDT)
  AND CONT1.EFFDT <= $CP_Pay_End_Dt
  AND CONT1.PAYMENT_BEGIN_DT <= $CP_Pay_End_Dt
  AND CONT1.PAYMENT_END_DT   >= $CP_Pay_Begin_Dt
  AND CONT1.PAYMENT_END_DT   > (SELECT MAX(CAL1.PAY_END_DT)
                                  FROM PS_PAY_CALENDAR CAL1
                                 WHERE CAL1.COMPANY  = $PD_Company
                                   AND CAL1.PAYGROUP = $PD_Paygroup
                                   AND CAL1.PAY_OFF_CYCLE_CAL = 'N')
  AND JOB1.COMP_FREQUENCY       = FRQ_TBL2.FREQUENCY_ID
  AND FRQ_TBL2.EFF_STATUS       = 'A'
  AND FRQ_TBL2.FREQUENCY_TYPE   = 'C'
  AND FRQ_TBL2.EFFDT            =
     (SELECT MAX(FRQ_TBL21.EFFDT)
        FROM PS_FREQUENCY_TBL FRQ_TBL21
      WHERE FRQ_TBL21.FREQUENCY_ID   = FRQ_TBL2.FREQUENCY_ID
        AND FRQ_TBL21.EFF_STATUS     = FRQ_TBL2.EFF_STATUS
        AND FRQ_TBL21.FREQUENCY_TYPE = FRQ_TBL2.FREQUENCY_TYPE
        AND FRQ_TBL21.EFFDT         <= JOB1.EFFDT)
ORDER BY CONT1.PAYMENT_END_DT  DESC
end-SELECT

end-procedure
!****************************************************************************
! VERIFY-PAYGROUP2                                                          *
! Verifies that no contract begins before the pay calendar begins for the   *
! paygroup                                                                  *
!****************************************************************************
begin-procedure VERIFY-PAYGROUP2

   let $Exceed_Min = 'N'

let $err-statement1 = 'CNTPAY01.SQR, Select Error- VERIFY-PAYGROUP2'
let $err-statement2 = 'Bind Variables: Company '||$PD_Company||', Paygroup '||
                       $PD_Paygroup||', Current Period Begin Date '||
                       $CP_Pay_Begin_Dt||', Current Period End Date '||
                       $CP_Pay_End_Dt

begin-SELECT on-error=Error-Display
CONT2.EMPLID
CONT2.EMPL_RCD
CONT2.PAYMENT_BEGIN_DT

    if $Exceed_Min = 'N'
        move &CONT2.EMPLID    to $Chk_EmplID
        move &CONT2.EMPL_RCD  to #Chk_Empl_Rcd
        do VERIFY-ACTIVE-JOB

        if $Active_Job = 'Y'
            let $Skip_Paygroup = 'Y'
            let $Exceed_Min = 'Y'
            let $Msg2 = '   Pay Calendar does not begin before  '||&CONT2.PAYMENT_BEGIN_DT
        end-if
    end-if

FROM PS_JOB JOB2, PS_CONTRACT CONT2, PS_FREQUENCY_TBL FRQ_TBL4
WHERE JOB2.COMPANY        = $PD_Company
  AND JOB2.PAYGROUP       = $PD_Paygroup
  AND JOB2.EMPLID         = CONT2.EMPLID
  AND JOB2.EMPL_RCD       = CONT2.EMPL_RCD
  AND JOB2.EFFDT  = (SELECT MAX(JOB21.EFFDT)
                       FROM PS_JOB JOB21
                      WHERE JOB21.EMPLID         = JOB2.EMPLID
                        AND JOB21.EMPL_RCD       = JOB2.EMPL_RCD
                        AND JOB21.EFFDT         <= $CP_Pay_End_Dt)
  AND JOB2.EFFSEQ = (SELECT MAX(JOB22.EFFSEQ)
                       FROM PS_JOB JOB22
                      WHERE JOB22.EMPLID         = JOB2.EMPLID
                        AND JOB22.EMPL_RCD       = JOB2.EMPL_RCD
                         AND JOB22.EFFDT          = JOB2.EFFDT)
  AND CONT2.EFFDT <= $CP_Pay_End_Dt
  AND CONT2.PAYMENT_BEGIN_DT <= $CP_Pay_End_Dt
  AND CONT2.PAYMENT_END_DT   >= $CP_Pay_Begin_Dt
  AND CONT2.PAYMENT_BEGIN_DT  < (SELECT MIN(CAL2.PAY_BEGIN_DT)
                                   FROM PS_PAY_CALENDAR CAL2
                                  WHERE CAL2.COMPANY  = $PD_Company
                                    AND CAL2.PAYGROUP = $PD_Paygroup
                                    AND CAL2.PAY_OFF_CYCLE_CAL = 'N')
  AND JOB2.COMP_FREQUENCY        = FRQ_TBL4.FREQUENCY_ID
  AND FRQ_TBL4.EFF_STATUS       = 'A'
  AND FRQ_TBL4.FREQUENCY_TYPE   = 'C'
  AND FRQ_TBL4.EFFDT            =
     (SELECT MAX(FRQ_TBL41.EFFDT)
        FROM PS_FREQUENCY_TBL FRQ_TBL41
      WHERE FRQ_TBL41.FREQUENCY_ID   = FRQ_TBL4.FREQUENCY_ID
        AND FRQ_TBL41.EFF_STATUS     = FRQ_TBL4.EFF_STATUS
        AND FRQ_TBL41.FREQUENCY_TYPE = FRQ_TBL4.FREQUENCY_TYPE
        AND FRQ_TBL41.EFFDT         <= JOB2.EFFDT)
ORDER BY CONT2.PAYMENT_BEGIN_DT  ASC
end-SELECT

end-procedure

!****************************************************************************
! VERIFY-ACTIVE-JOB                                                         *
! Verifies that the job data is active in the processing pay period         *
!****************************************************************************
begin-procedure VERIFY-ACTIVE-JOB

   let $Active_Job = 'N'

let $err-statement1 = 'CNTPAY01.SQR, Select Error- VERIFY-ACTIVE-JOB'
let $err-statement2 = 'Bind Variables: Company '||$PD_Company||', Paygroup '||
                       $PD_Paygroup||', Current Period Begin Date '||
                       $CP_Pay_Begin_Dt||', Current Period End Date '||
                       $CP_Pay_End_Dt||', Min Pay Begin Date '||
                       $Min_Pay_Begin_Dt

begin-SELECT on-error=Error-Display
JOB3.EMPLID

    let $Active_Job = 'Y'

FROM PS_JOB JOB3
WHERE JOB3.EMPLID    = $Chk_EmplID
  AND JOB3.EMPL_RCD  = #Chk_Empl_Rcd
  AND EXISTS (SELECT 'X' FROM PS_JOB JOB31, PS_FREQUENCY_TBL FRQ_TBL5
               WHERE JOB31.EMPLID    = JOB3.EMPLID
                 AND JOB31.EMPL_RCD  = JOB3.EMPL_RCD
                 AND JOB31.COMPANY  = $PD_Company
                 AND JOB31.PAYGROUP = $PD_Paygroup
                 AND JOB31.EMPL_STATUS IN ('A', 'P','Q','U')
                 AND ((JOB31.EFFDT BETWEEN $CP_Pay_Begin_Dt and $CP_Pay_End_Dt)
                      OR
                      (JOB31.EFFDT = (SELECT MAX(JOB311.EFFDT)
                                        FROM PS_JOB JOB311
                                       WHERE JOB311.EMPLID    = JOB31.EMPLID
                                         AND JOB311.EMPL_RCD  = JOB31.EMPL_RCD
                                         AND JOB311.EFFDT    <= $CP_Pay_Begin_Dt)))
                 AND JOB31.EFFSEQ = (SELECT MAX(JOB32.EFFSEQ)
                                       FROM PS_JOB JOB32
                                      WHERE JOB32.EMPLID    = JOB31.EMPLID
                                        AND JOB32.EMPL_RCD  = JOB31.EMPL_RCD
                                        AND JOB32.EFFDT     = JOB31.EFFDT)
                 AND JOB31.COMP_FREQUENCY      = FRQ_TBL5.FREQUENCY_ID
                 AND FRQ_TBL5.EFF_STATUS       = 'A'
                 AND FRQ_TBL5.FREQUENCY_TYPE   = 'C'
                 AND FRQ_TBL5.EFFDT            =
                    (SELECT MAX(FRQ_TBL51.EFFDT)
                       FROM PS_FREQUENCY_TBL FRQ_TBL51
                     WHERE FRQ_TBL51.FREQUENCY_ID   = FRQ_TBL5.FREQUENCY_ID
                       AND FRQ_TBL51.EFF_STATUS     = FRQ_TBL5.EFF_STATUS
                       AND FRQ_TBL51.FREQUENCY_TYPE = FRQ_TBL5.FREQUENCY_TYPE
                       AND FRQ_TBL51.EFFDT         <= JOB31.EFFDT))

end-SELECT
end-procedure

!****************************************************************************
! VERIFY-PAYGROUP3                                                          *
! Verifies that the earning codes for contract processing have been set to  *
! PAYMENT_TYPE = "B" (Both Hours and Amount OK).                            *
!****************************************************************************
begin-procedure VERIFY-PAYGROUP3

let $err-statement1 = 'CNTPAY01.SQR, Select Error- VERIFY-PAYGROUP3'
let $err-statement2 = 'Bind Variables: Reg Earnings '|| $PD_ErncdPaygroup ||
                      ', Earned Not Paid '|| $PD_Erncd_Ern_not_Pd ||
                      ', Paid Not Earned '|| $PD_Erncd_Pd_not_Ern ||
                      ', Current Period End Date '|| $CP_Pay_End_Dt

begin-select
EARN.ERNCD

  evaluate &EARN.ERNCD
    when = $PD_Erncd_Reg_Earns
      let $Msg3 = '   Contract earnings code ' || &EARN.ERNCD || ' is not set to "Both Hours and Amount OK"'
      break
    when = $PD_Erncd_Ern_not_Pd
      let $Msg4 = '   Contract earnings code ' || &EARN.ERNCD || ' is not set to "Both Hours and Amount OK"'
      break
    when = $PD_Erncd_Pd_not_Ern
      let $Msg5 = '   Contract earnings code ' || &EARN.ERNCD || ' is not set to "Both Hours and Amount OK"'
  end-evaluate

from PS_EARNINGS_TBL EARN
where (EARN.ERNCD = $PD_Erncd_Reg_Earns or
       EARN.ERNCD = $PD_Erncd_Ern_not_Pd or
       EARN.ERNCD = $PD_Erncd_Pd_not_Ern)
   and EARN.EFFDT = (SELECT MAX(EARN2.EFFDT)
                       from PS_EARNINGS_TBL EARN2
                      where EARN2.ERNCD = EARN.ERNCD
                        and EARN2.EFFDT <= $CP_Pay_End_Dt)
   and EARN.PAYMENT_TYPE <> 'B'
end-select

end-procedure

!****************************************************************************
! SELECT-CONTRACT-INFO                                                      *
! Selects contract information for each employee who has an active contract *
! during the current pay period.                                            *
!****************************************************************************
begin-procedure SELECT-CONTRACT-INFO

let $err-statement1 = 'CNTPAY01.SQR, Select Error- SELECT-CONTRACT-INFO'
let $err-statement2 = 'Bind Variables: Current Period Begin Date '||
                       $CP_Pay_Begin_Dt||', Current Period End Date '||
                       $CP_Pay_End_Dt

  let $Prev_Emplid = ' '
  let #Prev_Empl_Rcd = -1
  let #Prev_Addl_Seq = -1

begin-SELECT on-error=Error-Display
CONT.EMPLID
CONT.EMPL_RCD
CONT.EFFDT
CONT.PAYMENT_TERM
CONT.CONTRACT_BEGIN_DT
CONT.CONTRACT_END_DT
CONT.PAYMENT_BEGIN_DT
CONT.PAYMENT_END_DT
CONT.PAY_PERIOD_HRS
CONT.ASSIGN_HRS_TO_FLG
CONT.CONTRACT_TERM_DT
CONT.ADDL_SEQ
CONT.HP_CONTRACT_START

   let $E_Emplid            = &CONT.EMPLID
   let #E_Empl_Rcd          = &CONT.EMPL_RCD
   let $Contract_Effdt      = &CONT.EFFDT
   let $C_Payment_Term      = &CONT.PAYMENT_TERM
   let $C_Contract_Begin_Dt = &CONT.CONTRACT_BEGIN_DT
   let $C_Contract_End_Dt   = &CONT.CONTRACT_END_DT
   let $C_Payment_Begin_Dt  = &CONT.PAYMENT_BEGIN_DT
   let $C_Payment_End_Dt    = &CONT.PAYMENT_END_DT
   let #C_Pay_Period_Hrs    = &CONT.PAY_PERIOD_HRS
   let $C_Assign_Hrs_To_Flg = &CONT.ASSIGN_HRS_TO_FLG
   let $C_Contract_Term_Dt  = &CONT.CONTRACT_TERM_DT
   let #C_Addl_Seq          = &CONT.ADDL_SEQ
   let $C_Contract_Start    = &CONT.HP_CONTRACT_START
   let $Lump_Sum_Pay        = 'N'

   let $Skip_Emplee = 'N'

   do SELECT-JOB-INFO

   if $Skip_Emplee = 'N'
       if $C_Payment_Term <> 'L'
           do CALCULATE-CONTRACT-AMT
       else
           let #C_Total_Amount = #J_Comprate + #Total_Delta_Amt
       end-if

       if not #First_Row
           do PROCESS-CONTRACT-EE

           if #C_Addl_Seq <> #Addl_Pay_Addl_Seq

              do UPDATE-CONTRACT-ADDL-SEQ
           end-if

       end-if
   end-if

   move $E_Emplid to $Prev_Emplid
   move #E_Empl_Rcd to #Prev_Empl_Rcd
   move #C_Addl_Seq to #Prev_Addl_Seq

FROM PS_JOB JOBA, PS_CONTRACT CONT, PS_FREQUENCY_TBL FRQ_TBL6
WHERE JOBA.EMPLID    = CONT.EMPLID
  AND JOBA.EMPL_RCD = CONT.EMPL_RCD
  AND JOBA.COMP_FREQUENCY        = FRQ_TBL6.FREQUENCY_ID
  AND FRQ_TBL6.EFF_STATUS       = 'A'
  AND FRQ_TBL6.FREQUENCY_TYPE   = 'C'
  AND FRQ_TBL6.EFFDT            =
     (SELECT MAX(FRQ_TBL7.EFFDT)
        FROM PS_FREQUENCY_TBL FRQ_TBL7
      WHERE FRQ_TBL7.FREQUENCY_ID   = FRQ_TBL6.FREQUENCY_ID
        AND FRQ_TBL7.EFF_STATUS     = FRQ_TBL6.EFF_STATUS
        AND FRQ_TBL7.FREQUENCY_TYPE = FRQ_TBL6.FREQUENCY_TYPE
        AND FRQ_TBL7.EFFDT         <= JOBA.EFFDT)
  AND JOBA.COMPANY        = $PD_Company
  AND JOBA.PAYGROUP       = $PD_Paygroup
  AND JOBA.EMPL_STATUS IN ('A', 'P','Q','U')
  AND CONT.EFFDT <= $CP_Pay_End_Dt
  AND CONT.PAYMENT_BEGIN_DT <= $CP_Pay_End_Dt
  AND CONT.PAYMENT_END_DT   >= $CP_Pay_Begin_Dt
  AND JOBA.EFFDT = (SELECT MAX(JOBA1.EFFDT)
                      FROM PS_JOB JOBA1
                     WHERE JOBA1.EMPLID         = JOBA.EMPLID
                       AND JOBA1.EMPL_RCD      = JOBA.EMPL_RCD
                       AND JOBA1.COMP_FREQUENCY = JOBA.COMP_FREQUENCY
                       AND JOBA1.EFFDT         <= $CP_Pay_End_Dt
                       AND JOBA1.EMPL_STATUS IN ('A', 'P','Q','U'))
  AND JOBA.EFFSEQ = (SELECT MAX(JOBA2.EFFSEQ)
                      FROM PS_JOB JOBA2
                     WHERE JOBA2.EMPLID         = JOBA.EMPLID
                       AND JOBA2.EMPL_RCD      = JOBA.EMPL_RCD
                       AND JOBA2.COMP_FREQUENCY = JOBA.COMP_FREQUENCY
                       AND JOBA2.EFFDT          = JOBA.EFFDT)
ORDER BY CONT.EMPLID, CONT.EMPL_RCD, CONT.CONTRACT_BEGIN_DT
end-SELECT

end-procedure

!****************************************************************************
! SELECT-JOB-INFO                                                           *
! Selects job information for each employee who has an active contract      *
! during the current pay period.                                            *
!****************************************************************************
begin-procedure SELECT-JOB-INFO

 let $err-statement1 = 'CNTPAY01.SQR, Select Error- SELECT-JOB-INFO'
 let $E_Empl_rcd     = edit(#E_Empl_rcd,'999')
 let $err-statement2 = 'Bind Variables: EmplID '||$E_EmplID ||', EMPL_RCD '||
                       $E_Empl_Rcd ||', Company '||$PD_Company||', Paygroup '||
                       $PD_Paygroup||', Current Period End Date '||
                       $CP_Pay_End_Dt||', Comp Frequency Type C, '||
                       'Employee Status A or P'   ||
                       ',  Contract Begin Date ' || $C_Contract_Begin_Dt ||
                       ',  Contract End Date ' || $C_Contract_End_Dt ||
                       ',  Payment Begin Date ' || $C_Payment_Begin_Dt ||
                       ',  Payment End Date ' || $C_Payment_End_Dt

   let #First_Row       = 1
   let #Total_Delta_Amt = 0
   let #J_Comprate      = 0

   do INITIALIZE-ARRAY
   let #wrk_idx         = 0
   let #lst_idx         = 0

begin-SELECT on-error=Error-Display
JOBB.EMPLID
JOBB.EMPL_RCD
JOBB.EFFDT
JOBB.COMPRATE
JOBB.CHANGE_AMT
JOBB.PRORATE_CNT_AMT
JOBB.LUMP_SUM_PAY
FRQ_TBL8.FREQUENCY_TYPE

   if $Skip_Emplee = 'N'
       let $DT_Effdt = &JOBB.EFFDT
       do FORMAT-DATETIME($DT_Effdt, $CMP_EffDt, {DEFCMP},'','')
       do FORMAT-DATETIME($C_Contract_Begin_Dt, $CMP_Contract_Begin_Dt, {DEFCMP},'','')
       do FORMAT-DATETIME($C_Contract_End_Dt, $CMP_Contract_End_Dt, {DEFCMP},'','')
       do FORMAT-DATETIME($C_Payment_Begin_Dt, $CMP_Payment_Begin_Dt, {DEFCMP},'','')
       do FORMAT-DATETIME($C_Payment_End_Dt, $CMP_Payment_End_Dt, {DEFCMP},'','')

       if $C_Payment_Term <> 'L'

           if #First_Row

               let $J_Effdt           = &JOBB.EFFDT
               let $J_Comp_Frequency  = &FRQ_TBL8.FREQUENCY_TYPE
               let #last_Comprate     = &JOBB.COMPRATE
               let #First_Row         = 0

               do COMPUTE-CONTRACT-DATES
               do FORMAT-DATETIME($C_Contract_Begin_Dt, $CMP_Contract_Begin_Dt, {DEFCMP},'','')
               do FORMAT-DATETIME($C_Contract_Start, $CMP_Contract_Start, {DEFCMP},'','')
               let #Contract_Amt = &JOBB.COMPRATE

               if $CMP_Contract_Start > $CMP_Contract_Begin_Dt                      ! Late start
                  do PAY-PRDS-BETWEEN($C_Contract_Begin_Dt, $C_Contract_End_Dt,#total_contract_prd)
                  do PAY-PRDS-BETWEEN($C_Contract_Begin_Dt, $C_Contract_Start,#late_contract_prd)
                  let #late_start_dedn = #Contract_Amt * (#late_contract_prd / #total_contract_prd)
                  let #Contract_Amt = #Contract_Amt - round(#late_start_dedn,2)
               end-if

               add 1 to #lst_idx

               Put  $C_Payment_Begin_Dt
                    'N'
                    #Contract_Amt
                    #Contract_Amt
                    #BC_Pay_Prds
                    #DC_Pay_Prds
                    #AC_Pay_Prds
                    0
                    0
                    0
                    0 0 0
                    0 0 0
               into Wrk_Comp(#lst_idx)
                    Wrk_Effdt
                    Wrk_Lump_Sum_Pay
                    Wrk_Adjust_Amt
                    Wrk_Prorate_Amt
                    Wrk_BC_PayPrd
                    Wrk_DC_PayPrd
                    Wrk_AC_PayPrd
                    Wrk_BC_Goal_Amt
                    Wrk_DC_Goal_Amt
                    Wrk_AC_Goal_Amt
                    Wrk_BC_Passed_PayPrd
                    Wrk_DC_Passed_PayPrd
                    Wrk_AC_Passed_PayPrd
                    Wrk_PNE_Retro_Amt
                    Wrk_CRG_Retro_Amt
                    Wrk_ENP_Retro_Amt
           else

               do FIND-PAY-BEGIN-DT

               if $Pay_Cal_Found = 'N'

                   add 1 to #EEs_in_Error

                   move #E_Empl_Rcd to $Empl_Rcd
                   let $Error = 'ERROR-Select Job Data '|| $E_Emplid || ', ' ||
                                $Empl_Rcd||' with pay calendar record not found.'||
                                '  Employee skipped.'
                   display $Error

                   let $Skip_Emplee = 'Y'
               else
                   let $PAYC_Pay_Begin_Dt = &PAYC.PAY_BEGIN_DT
                   do FORMAT-DATETIME($PAYC_Pay_Begin_Dt, $CMP_Pay_Cal_Begin_Dt, {DEFCMP}, '','')

                   if &JOBB.LUMP_SUM_PAY = 'Y'

                       let #J_Change_Amt      = &JOBB.COMPRATE - #last_Comprate
                       let $J_Prorate_Cnt_Amt = &JOBB.PRORATE_CNT_AMT
                       let #last_Comprate     = &JOBB.COMPRATE

                       if $CMP_EffDt >= $CMP_Pay_Cal_Begin_Dt
                           let $Lump_Sum_Pay = 'Y'
                       end-if

                       do PROCESS-PRORATA-CHANGE
                       do COMPUTE-CONTRACT-DATES
                       do FIND-REMAINING-PERIODS

                       let #Cal_BC_Passed_PayPrd = #BC_Pay_Prds - #BC_Remain_Pay_Prds
                       let #Cal_DC_Passed_PayPrd = #DC_Pay_Prds - #DC_Remain_Pay_Prds
                       let #Cal_AC_Passed_PayPrd = #AC_Pay_Prds - #AC_Remain_Pay_Prds

                       add 1 to #lst_idx

                       if #lst_idx >= #max_wrk

                           add 1 to #EEs_in_Error

                           move #E_Empl_Rcd to $Empl_Rcd
                           let $Error = 'ERROR-Select Job Data '|| $E_Emplid || ', ' ||
                                        $Empl_Rcd||' with maximum array size reached.'||
                                        '  Employee skipped.'
                           display $Error

                           let $Skip_Emplee = 'Y'
                       else

                           let #wrk_idx = #lst_idx + 1

                           Put  $PAYC_Pay_Begin_Dt
                                'Y'
                                #J_Change_Amt
                                #DT_Delta_Amt
                                #BC_Pay_Prds
                                #DC_Pay_Prds
                                #AC_Pay_Prds
                                0
                                0
                                0
                                #Cal_BC_Passed_PayPrd
                                #Cal_DC_Passed_PayPrd
                                #Cal_AC_Passed_PayPrd
                                0 0 0
                           into Wrk_Comp(#lst_idx)
                                Wrk_Effdt
                                Wrk_Lump_Sum_Pay
                                Wrk_Adjust_Amt
                                Wrk_Prorate_Amt
                                Wrk_BC_PayPrd
                                Wrk_DC_PayPrd
                                Wrk_AC_PayPrd
                                Wrk_BC_Goal_Amt
                                Wrk_DC_Goal_Amt
                                Wrk_AC_Goal_Amt
                                Wrk_BC_Passed_PayPrd
                                Wrk_DC_Passed_PayPrd
                                Wrk_AC_Passed_PayPrd
                                Wrk_PNE_Retro_Amt
                                Wrk_CRG_Retro_Amt
                                Wrk_ENP_Retro_Amt
                       end-if

                   else

                       if $CMP_Effdt <= $CMP_Contract_End_Dt

                           let #J_Change_Amt      = &JOBB.COMPRATE - #last_Comprate
                           let $J_Prorate_Cnt_Amt = &JOBB.PRORATE_CNT_AMT
                           let #last_Comprate     = &JOBB.COMPRATE

                           do PROCESS-PRORATA-CHANGE
                           do FIND-REMAINING-PERIODS

                           add 1 to #lst_idx

                           if #lst_idx >= #max_wrk

                               add 1 to #EEs_in_Error

                               move #E_Empl_Rcd to $Empl_Rcd
                               let $Error = 'ERROR-Select Job Data '|| $E_Emplid || ', ' ||
                                            $Empl_Rcd||' with maximum array size reached.'||
                                            '  Employee skipped.'
                               display $Error

                               let $Skip_Emplee = 'Y'
                           else

                               let #wrk_idx = #lst_idx + 1

                               Put  $PAYC_Pay_Begin_Dt
                                    'N'
                                    #J_Change_Amt
                                    #DT_Delta_Amt
                                    #BC_Remain_Pay_Prds
                                    #DC_Remain_Pay_Prds
                                    #AC_Remain_Pay_Prds
                                    0
                                    0
                                    0
                                    0 0 0
                                    0 0 0
                               into Wrk_Comp(#lst_idx)
                                    Wrk_Effdt
                                    Wrk_Lump_Sum_Pay
                                    Wrk_Adjust_Amt
                                    Wrk_Prorate_Amt
                                    Wrk_BC_PayPrd
                                    Wrk_DC_PayPrd
                                    Wrk_AC_PayPrd
                                    Wrk_BC_Goal_Amt
                                    Wrk_DC_Goal_Amt
                                    Wrk_AC_Goal_Amt
                                    Wrk_BC_Passed_PayPrd
                                    Wrk_DC_Passed_PayPrd
                                    Wrk_AC_Passed_PayPrd
                                    Wrk_PNE_Retro_Amt
                                    Wrk_CRG_Retro_Amt
                                    Wrk_ENP_Retro_Amt
                           end-if
                       end-if
                   end-if
               end-if
           end-if
       else
           if $CMP_EffDt <= $CMP_Contract_Begin_Dt

               let #First_Row         = 0
               let #J_Comprate        = &JOBB.COMPRATE
               let #J_Change_Amt      = 0
               let $J_Prorate_Cnt_Amt = &JOBB.PRORATE_CNT_AMT
            else
               let #J_Comprate        = &JOBB.COMPRATE - &JOBB.CHANGE_AMT
               let #J_Change_Amt      = &JOBB.CHANGE_AMT
               let $J_Prorate_Cnt_Amt = &JOBB.PRORATE_CNT_AMT
               do PROCESS-PRORATA-CHANGE
            end-if
       end-if
   end-if

FROM PS_JOB JOBB,  PS_FREQUENCY_TBL FRQ_TBL8
WHERE JOBB.EMPLID    = $E_EmplID
  AND JOBB.EMPL_RCD = #E_Empl_Rcd
  AND JOBB.COMPANY        = $PD_Company
  AND JOBB.PAYGROUP       = $PD_Paygroup
  AND JOBB.EMPL_STATUS IN ('A', 'P','Q','U')
  AND ((JOBB.EFFDT BETWEEN $C_Payment_Begin_Dt and $C_Payment_End_Dt)
       OR
       (JOBB.EFFDT BETWEEN $C_Contract_Begin_Dt and $C_Contract_End_Dt)
       OR
       (JOBB.EFFDT = (SELECT MAX(JOBB1.EFFDT)
                        FROM PS_JOB JOBB1
                       WHERE JOBB1.EMPLID    = JOBB.EMPLID
                         AND JOBB1.EMPL_RCD  = JOBB.EMPL_RCD
                         AND JOBB1.EFFDT    <= $C_Payment_Begin_Dt))
       OR
       (JOBB.EFFDT = (SELECT MAX(JOBB2.EFFDT)
                        FROM PS_JOB JOBB2
                       WHERE JOBB2.EMPLID    = JOBB.EMPLID
                         AND JOBB2.EMPL_RCD  = JOBB.EMPL_RCD
                         AND JOBB2.EFFDT    <= $C_Contract_Begin_Dt)))
  AND JOBB.EFFDT <= $CP_Pay_End_Dt
  AND JOBB.EFFSEQ = (SELECT MAX(JOBF.EFFSEQ)
                       FROM PS_JOB JOBF
                      WHERE JOBF.EMPLID    = JOBB.EMPLID
                        AND JOBF.EMPL_RCD = JOBB.EMPL_RCD
                        AND JOBF.EFFDT     = JOBB.EFFDT)
  AND JOBB.COMP_FREQUENCY       = FRQ_TBL8.FREQUENCY_ID
  AND FRQ_TBL8.FREQUENCY_TYPE   = 'C'
  AND FRQ_TBL8.EFF_STATUS       = 'A'
  AND FRQ_TBL8.EFFDT            =
    (SELECT MAX(FRQ_TBL9.EFFDT)
       FROM PS_FREQUENCY_TBL FRQ_TBL9
      WHERE FRQ_TBL9.FREQUENCY_ID   = FRQ_TBL8.FREQUENCY_ID
        AND FRQ_TBL9.FREQUENCY_TYPE = FRQ_TBL8.FREQUENCY_TYPE
        AND FRQ_TBL9.EFF_STATUS     = FRQ_TBL8.EFF_STATUS
        AND FRQ_TBL9.EFFDT         <= JOBB.EFFDT)

ORDER BY JOBB.EFFDT ASC

end-SELECT

end-procedure

!****************************************************************************
! FIND-PAY-BEGIN-DT                                                         *
!****************************************************************************
begin-procedure  FIND-PAY-BEGIN-DT

let $err-statement1 = 'CNTPAY01.SQR, Select Error- FIND-PAY-BEGIN-DT'
let $err-statement2 = 'Bind Variables: Employee '||$E_Emplid||', EMPL_RCD '||
                       $Empl_Rcd||', Company '||$PD_Company||', Paygroup '||
                       $PD_Paygroup||', Effective Date '|| $DT_Effdt

  let $Pay_Cal_Found = 'N'


begin-SELECT on-error=Error-Display
PAYC.PAY_BEGIN_DT

    let $Pay_Cal_Found = 'Y'

FROM PS_PAY_CALENDAR PAYC
WHERE PAYC.COMPANY = $PD_Company
  AND PAYC.PAYGROUP = $PD_Paygroup
  AND PAYC.PAY_OFF_CYCLE_CAL = 'N'
  AND PAYC.PAY_BEGIN_DT = (SELECT MAX(PAYC2.PAY_BEGIN_DT)
                                   FROM PS_PAY_CALENDAR PAYC2
                                  WHERE PAYC2.COMPANY  = PAYC.COMPANY
                                    AND PAYC2.PAYGROUP = PAYC.PAYGROUP
                                    AND PAYC2.PAY_OFF_CYCLE_CAL = PAYC.PAY_OFF_CYCLE_CAL
                                    AND PAYC2.PAY_BEGIN_DT <= $DT_Effdt)

end-SELECT

end-procedure

!****************************************************************************
! CALCULATE-CONTRACT-AMT                                                    *
! Scan through the array and establish the total contract worth.            *
!****************************************************************************
begin-procedure CALCULATE-CONTRACT-AMT


    let #wrk_idx         = 1
    let #BC_Total_Amount = 0
    let #DC_Total_Amount = 0
    let #AC_Total_Amount = 0
    let #C_Total_Amount  = 0

    let #PNE_Retro_Total_Amt1 = 0
    let #PNE_Retro_Total_Amt2 = 0
    let #CRG_Retro_Total_Amt1 = 0
    let #ENP_Retro_Total_Amt1 = 0
    let #ENP_Retro_Total_Amt2 = 0

    WHILE #wrk_idx <= #lst_idx

        GET  #Cal_Prorate_Amt
             #BC_Remain_Pay_Prds
             #DC_Remain_Pay_Prds
             #AC_Remain_Pay_Prds
             $Cal_Lump_Sum_Pay
             #BC_Passed_PayPrd
             #DC_Passed_PayPrd
             #AC_Passed_PayPrd
        from Wrk_Comp(#wrk_idx)
             Wrk_Prorate_Amt
             Wrk_BC_PayPrd
             Wrk_DC_PayPrd
             Wrk_AC_PayPrd
             Wrk_Lump_Sum_Pay
             Wrk_BC_Passed_PayPrd
             Wrk_DC_Passed_PayPrd
             Wrk_AC_Passed_PayPrd

        let #Cal_Total_Pay_Prds = #BC_Remain_Pay_Prds + #DC_Remain_Pay_Prds + #AC_Remain_Pay_Prds

        if #Cal_Total_Pay_Prds <= 0

            add 1 to #EEs_in_Error

            move #E_Empl_Rcd to $Empl_Rcd
            let $Error = 'ERROR-Cal Contract Amt '|| $E_Emplid || ', ' ||
                         $Empl_Rcd||' with payment periods <= 0 pay'||
                         ' periods.  Employee skipped.'
            display $Error

            let $Skip_Emplee = 'Y'
            let #wrk_idx = #lst_idx + 1

        else

            let #Cal_BC_Pct = #BC_Remain_Pay_Prds / #Cal_Total_Pay_Prds
            let #Cal_DC_Pct = #DC_Remain_Pay_Prds / #Cal_Total_Pay_Prds
            let #Cal_AC_Pct = 1 - #Cal_BC_Pct - #Cal_DC_Pct

            let #Cal_BC_Goal_Amt = round(#Cal_Prorate_Amt * #Cal_BC_Pct,2)
            let #Cal_DC_Goal_Amt = round(#Cal_Prorate_Amt * #Cal_DC_Pct,2)
            let #Cal_AC_Goal_Amt = #Cal_Prorate_Amt - #Cal_BC_Goal_Amt - #Cal_DC_Goal_Amt

            ARRAY-ADD #Cal_BC_Goal_Amt to Wrk_Comp(#wrk_idx) Wrk_BC_Goal_Amt
            ARRAY-ADD #Cal_DC_Goal_Amt to Wrk_Comp(#wrk_idx) Wrk_DC_Goal_Amt
            ARRAY-ADD #Cal_AC_Goal_Amt to Wrk_Comp(#wrk_idx) Wrk_AC_Goal_Amt

            let #BC_Total_Amount = #BC_Total_Amount + #Cal_BC_Goal_Amt
            let #DC_Total_Amount = #DC_Total_Amount + #Cal_DC_Goal_Amt
            let #AC_Total_Amount = #AC_Total_Amount + #Cal_AC_Goal_Amt
            let #C_Total_Amount  = #C_Total_Amount  + #Cal_Prorate_Amt

            let #Cal_PNE_Retro_Amt1 = 0
            let #Cal_PNE_Retro_Amt2 = 0
            let #Cal_CRG_Retro_Amt1 = 0
            let #Cal_ENP_Retro_Amt1 = 0
            let #Cal_ENP_Retro_Amt2 = 0

            if $Cal_Lump_Sum_Pay = 'Y'

                if #BC_Remain_Pay_Prds > 0
                    let #Cal_PNE_Retro_Amt1 =
                                round(#Cal_BC_Goal_Amt * #BC_Passed_PayPrd / #BC_Remain_Pay_Prds, 2)
                end-if

                if #DC_Remain_Pay_Prds > 0
                    let #Cal_PNE_Retro_Amt2 =
                            -1 * round(#Cal_BC_Goal_Amt * #DC_Passed_PayPrd / #DC_Remain_Pay_Prds, 2)

                    let #Cal_CRG_Retro_Amt1 =
                                 round(#Cal_Prorate_Amt  * #DC_Passed_PayPrd / #DC_Remain_Pay_Prds, 2)

                    let #Cal_ENP_Retro_Amt1 =
                            -1 * round(#Cal_AC_Goal_Amt * #DC_Passed_PayPrd / #DC_Remain_Pay_Prds, 2)
                end-if

                if #AC_Remain_Pay_Prds > 0
                    let #Cal_ENP_Retro_Amt2 =
                                 round(#Cal_AC_Goal_Amt * #AC_Passed_PayPrd / #AC_Remain_Pay_Prds, 2)
                end-if

                ARRAY-ADD #Cal_PNE_Retro_Amt1 to Wrk_Comp(#wrk_idx) Wrk_PNE_Retro_Amt
                ARRAY-ADD #Cal_PNE_Retro_Amt2 to Wrk_Comp(#wrk_idx) Wrk_PNE_Retro_Amt
                ARRAY-ADD #Cal_CRG_Retro_Amt1 to Wrk_Comp(#wrk_idx) Wrk_CRG_Retro_Amt
                ARRAY-ADD #Cal_ENP_Retro_Amt1 to Wrk_Comp(#wrk_idx) Wrk_ENP_Retro_Amt
                ARRAY-ADD #Cal_ENP_Retro_Amt2 to Wrk_Comp(#wrk_idx) Wrk_ENP_Retro_Amt

                let #PNE_Retro_Total_Amt1 = #PNE_Retro_Total_Amt1 + #Cal_PNE_Retro_Amt1
                let #PNE_Retro_Total_Amt2 = #PNE_Retro_Total_Amt2 + #Cal_PNE_Retro_Amt2
                let #CRG_Retro_Total_Amt1 = #CRG_Retro_Total_Amt1 + #Cal_CRG_Retro_Amt1
                let #ENP_Retro_Total_Amt1 = #ENP_Retro_Total_Amt1 + #Cal_ENP_Retro_Amt1
                let #ENP_Retro_Total_Amt2 = #ENP_Retro_Total_Amt2 + #Cal_ENP_Retro_Amt2
            end-if

        end-if

        add 1 to #wrk_idx

    END-WHILE


    #DEBUG do PRINT-ARRAY
    #DEBUG let $BC_Total_Amount = #BC_Total_Amount
    #DEBUG let $DC_Total_Amount = #DC_Total_Amount
    #DEBUG let $AC_Total_Amount = #AC_Total_Amount
    #DEBUG let $C_Total_Amount  = #C_Total_Amount

    #DEBUG let $DebugMsg = 'Debug Total : '|| $BC_Total_Amount || ', '
    #DEBUG                                 || $DC_Total_Amount || ', '
    #DEBUG                                 || $AC_Total_Amount || ', '
    #DEBUG                                 || $C_Total_Amount
    #DEBUG display $DebugMsg

    #DEBUG let $PNE_Retro_Total_Amt1 = #PNE_Retro_Total_Amt1
    #DEBUG let $PNE_Retro_Total_Amt2 = #PNE_Retro_Total_Amt2
    #DEBUG let $CRG_Retro_Total_Amt1 = #CRG_Retro_Total_Amt1
    #DEBUG let $ENP_Retro_Total_Amt1 = #ENP_Retro_Total_Amt1
    #DEBUG let $ENP_Retro_Total_Amt2 = #ENP_Retro_Total_Amt2

    #DEBUG let $DebugMsg = 'Retro Total : '|| $PNE_Retro_Total_Amt1 || ', '
    #DEBUG                                 || $PNE_Retro_Total_Amt2 || ', '
    #DEBUG                                 || $CRG_Retro_Total_Amt1 || ', '
    #DEBUG                                 || $ENP_Retro_Total_Amt1 || ', '
    #DEBUG                                 || $ENP_Retro_Total_Amt2
    #DEBUG display $DebugMsg

end-procedure

!****************************************************************************
! PROCESS-PRORATA-CHANGE                                                    *
! Establishes the total contract amount for a contract with a change amt.   *
!     Contract amount is dependent on value of PRORATE_CNT_AMT FLAG.        *
!****************************************************************************
begin-procedure PROCESS-PRORATA-CHANGE

   evaluate $J_Prorate_Cnt_Amt

      when = 'N'
         let #DT_Delta_Amt = #J_Change_Amt
      when = 'C'
         if $CMP_Effdt >= $CMP_Contract_End_Dt
            let #DT_Delta_Amt = 0
         else
            if $CMP_Effdt <= $CMP_Contract_Begin_Dt
               let #DT_Delta_Amt = #J_Change_Amt
            else
               do PAY-PRDS-BETWEEN($DT_Effdt, $C_Contract_End_Dt, #PR_Pay_Prds)
               do PAY-PRDS-BETWEEN($C_Contract_Begin_Dt, $C_Contract_End_Dt, #TT_Pay_Prds)
               let #DT_Delta_Amt = round(#J_Change_Amt * #PR_Pay_Prds / #TT_Pay_Prds,2)
            end-if
         end-if
      when = 'P'
         if $CMP_Effdt >= $CMP_Payment_End_Dt
            let #DT_Delta_Amt = 0
         else
            if $CMP_Effdt <= $CMP_Payment_Begin_Dt
               let #DT_Delta_Amt = #J_Change_Amt
            else
               do PAY-PRDS-BETWEEN($DT_Effdt, $C_Payment_End_Dt, #PR_Pay_Prds)
               do PAY-PRDS-BETWEEN($C_Payment_Begin_Dt, $C_Payment_End_Dt, #TT_Pay_Prds)
               let #DT_Delta_Amt = round(#J_Change_Amt * #PR_Pay_Prds / #TT_Pay_Prds,2)
            end-if
         end-if
   end-evaluate

   add #DT_Delta_Amt to #Total_Delta_Amt

end-procedure
!****************************************************************************
! PROCESS-CONTRACT-EE                                                       *
! Controls processing for each contract employee                            *
!****************************************************************************
begin-procedure PROCESS-CONTRACT-EE

  add 1 to #EEs_Processed

  if $C_Payment_Term <> 'L'


     do COMPUTE-CONTRACT-DATES
     do COMPUTE-REMAINING-PAY-PERIODS

     do COMPUTE-CURRENT-PAY-PERIOD

     let #C_Total_Pay_Prds = #BC_Pay_Prds + #DC_Pay_Prds + #AC_Pay_Prds

     if #C_Total_Pay_Prds <= 0

        add 1 to #EEs_in_Error

        move #E_Empl_Rcd to $Empl_Rcd
        let $Error = 'ERROR-Contract EE '|| $E_Emplid || ', ' ||
                      $Empl_Rcd||' with payment periods <= 0 pay'||
                      ' periods.  Employee skipped.'
        display $Error

     else

        do INITIALIZE-ADDL-PAY
        do SELECT-ADDL-PAY-DATA

        do COMPUTE-LUMP-SUM-RETRO-TOTAL
        do COMPUTE-WORKING-ADDL-PAY
        do UPDATE-ADDITIONAL-PAY1
        do UPDATE-LUMP-SUM-RETRO
     end-if
  else

     let #BC_Total_Pct = 0
     let #DC_Total_Pct = 0
     let #AC_Total_Pct = 0

     let #BC_Total_Amount = 0
     let #DC_Total_Amount = 0
     let #AC_Total_Amount = 0

     do INITIALIZE-ADDL-PAY
     do SELECT-ADDL-PAY-DATA
     do UPDATE-ADDL-PAY-LUMP-SUM

     let $Prd2 = 'N'
     let $Prd3 = 'N'
     let $Prd4 = 'N'
     let $Prd5 = 'N'

     if ((#pne_Goal_Amt <> 0)
      or (#pne_Oth_Pay  <> 0))

       if ($pne_Old_Effdt <> '') or
        not ((#pne_Goal_Bal = 0)
         and (#pne_Oth_Pay  = 0))

            let $Earns_End_Dt = ''
            do INSERT-ADDL-PAY(0, #pne_Goal_Bal, 0, 0, $CP_Pay_Begin_Dt, $PD_Erncd_Pd_not_Ern,
                               #pne_Addl_Seq, $Earns_End_Dt, $pne_Record_Source, #SEPCHK)
       end-if
     end-if

     if ((#enp_Goal_Amt <> 0)
      or (#enp_Oth_Pay  <> 0))

       if ($enp_Old_Effdt <> '') or
        not ((#enp_Goal_Bal = 0)
         and (#enp_Oth_Pay  = 0))

           let $Earns_End_Dt = ''
           do INSERT-ADDL-PAY(0, #enp_Goal_Bal, 0, 0, $CP_Pay_Begin_Dt, $PD_Erncd_Ern_not_Pd,
                              #enp_Addl_Seq, $Earns_End_Dt, $enp_Record_Source, #SEPCHK)
       end-if
     end-if
  end-if

end-procedure
!****************************************************************************
! SELECT-ADDL-PAY-DATA                                                      *
! Select additional pay data for each effective employee during the current *
! pay period.  Displays error and warning messages when addl_seq is > 1 or  *
! if record source <> 'B'.                                                  *
!****************************************************************************
begin-procedure SELECT-ADDL-PAY-DATA
move #E_Empl_Rcd to $Empl_Rcd
let $err-statement1 = 'CNTPAY01.SQR, Select Error- SELECT-ADDL-PAY-DATA'
let $err-statement2 = 'Bind Variables: Employee '||$E_Emplid||', EMPL_RCD '||
                       $Empl_Rcd||', Earn Code in (REG, PNE, ENP), '||
                       'Current Pay End Date '||$CP_Pay_End_Dt

 let #Max_Cont_Addl_Seq = 1

begin-SELECT
max(ADDL_SEQ)  &Max_Addl_Seq
  let #Max_Cont_Addl_Seq = &Max_Addl_Seq
FROM PS_ADDL_PAY_DATA ADDL_PAY
WHERE ADDL_PAY.EMPLID    = $E_Emplid
  AND ADDL_PAY.EMPL_RCD = #E_Empl_Rcd
  AND ADDL_PAY.ERNCD IN ($PD_Erncd_Reg_Earns, $PD_Erncd_Pd_not_Ern,
                         $PD_Erncd_Ern_not_Pd)
end-SELECT

  let #Addl_Pay_Addl_Seq = #C_Addl_Seq
  if $Prev_Emplid = $E_Emplid and #Prev_Empl_Rcd = #E_Empl_Rcd and #Prev_Addl_Seq = #C_Addl_Seq
    if #Prev_Addl_Seq > 1
      let #Addl_Pay_Addl_Seq = 1
    else
      let #Max_Cont_Addl_Seq = #Max_Cont_Addl_Seq + 1
      let #Addl_Pay_Addl_Seq = #Max_Cont_Addl_Seq
    end-if
  end-if

  let #pne_Addl_Seq = #Addl_Pay_Addl_Seq
  let #enp_Addl_Seq = #Addl_Pay_Addl_Seq
  let #reg_Addl_Seq = #Addl_Pay_Addl_Seq

begin-SELECT on-error=Error-Display
ADDL_PAY.EFFDT
ADDL_PAY.ERNCD
ADDL_PAY.ADDL_SEQ
ADDL_PAY.OTH_HRS
ADDL_PAY.OTH_PAY
ADDL_PAY.EARNINGS_END_DT
ADDL_PAY.GOAL_AMT
ADDL_PAY.GOAL_BAL
ADDL_PAY.RECORD_SOURCE

   evaluate &ADDL_PAY.ERNCD
      when = $PD_Erncd_Reg_Earns

            let #reg_Addl_Seq        = &ADDL_PAY.ADDL_SEQ
            let #reg_Goal_Amt        = &ADDL_PAY.GOAL_AMT
            let #reg_Goal_Bal        = &ADDL_PAY.GOAL_BAL
            let #reg_Oth_Hrs         = &ADDL_PAY.OTH_HRS
            let #reg_Oth_Pay         = &ADDL_PAY.OTH_PAY
            let $reg_Earnings_End_Dt = &ADDL_PAY.EARNINGS_END_DT
            let $reg_Record_Source   = &ADDL_PAY.RECORD_SOURCE
            let $reg_Effdt           = &ADDL_PAY.EFFDT
            let $reg_Old_Effdt       = &ADDL_PAY.EFFDT

            if &ADDL_PAY.RECORD_SOURCE <> 'B'

               move &ADDL_PAY.ADDL_SEQ to $Addl_Seq
               let $Msg = '      WARNING- Employee: '||$E_Emplid||
                           ' additional pay '||&ADDL_PAY.ERNCD||
                           ', Seq: '||$ADDL_SEQ||', EFFDT: '||
                           &ADDL_PAY.EFFDT||
                           ' will be system maintained for contract pay.'

               display $Msg
            end-if
         break

      when = $PD_Erncd_Pd_not_Ern

            let #pne_Addl_Seq        = &ADDL_PAY.ADDL_SEQ
            let #pne_Goal_Amt        = &ADDL_PAY.GOAL_AMT
            let #pne_Goal_Bal        = &ADDL_PAY.GOAL_BAL
            let #pne_Oth_Hrs         = &ADDL_PAY.OTH_HRS
            let #pne_Oth_Pay         = &ADDL_PAY.OTH_PAY
            let $pne_Earnings_End_Dt = &ADDL_PAY.EARNINGS_END_DT
            let $pne_Record_Source   = &ADDL_PAY.RECORD_SOURCE
            let $pne_Effdt           = &ADDL_PAY.EFFDT
            let $pne_Old_Effdt       = &ADDL_PAY.EFFDT

            if &ADDL_PAY.RECORD_SOURCE <> 'B'

               move &ADDL_PAY.ADDL_SEQ to $Addl_Seq
               let $Msg = '      WARNING- Employee: '||$E_Emplid||
                           ' additional pay '||&ADDL_PAY.ERNCD||
                           ', Seq: '||$ADDL_SEQ||', EFFDT: '||
                           &ADDL_PAY.EFFDT||
                           ' will be system maintained for contract pay.'

               display $Msg
            end-if
         break

      when = $PD_Erncd_Ern_not_Pd

            let #enp_Addl_Seq        = &ADDL_PAY.ADDL_SEQ
            let #enp_Goal_Amt        = &ADDL_PAY.GOAL_AMT
            let #enp_Goal_Bal        = &ADDL_PAY.GOAL_BAL
            let #enp_Oth_Hrs         = &ADDL_PAY.OTH_HRS
            let #enp_Oth_Pay         = &ADDL_PAY.OTH_PAY
            let $enp_Earnings_End_Dt = &ADDL_PAY.EARNINGS_END_DT
            let $enp_Record_Source   = &ADDL_PAY.RECORD_SOURCE
            let $enp_Effdt           = &ADDL_PAY.EFFDT
            let $enp_Old_Effdt       = &ADDL_PAY.EFFDT

            if &ADDL_PAY.RECORD_SOURCE <> 'B'

               move &ADDL_PAY.ADDL_SEQ to $Addl_Seq
               let $Msg = '      WARNING- Employee: '||$E_Emplid||
                           ' additional pay '||&ADDL_PAY.ERNCD||
                           ', Seq: '||$ADDL_SEQ||', EFFDT: '||
                           &ADDL_PAY.EFFDT||
                           ' will be system maintained for contract pay.'

               display $Msg
            end-if
   end-evaluate


FROM PS_ADDL_PAY_DATA ADDL_PAY
WHERE ADDL_PAY.EMPLID    = $E_Emplid
  AND ADDL_PAY.EMPL_RCD = #E_Empl_Rcd
  AND ADDL_PAY.ADDL_SEQ = #Addl_Pay_Addl_Seq
  AND ADDL_PAY.ERNCD IN ($PD_Erncd_Reg_Earns, $PD_Erncd_Pd_not_Ern,
                         $PD_Erncd_Ern_not_Pd)
  AND ADDL_PAY.EFFDT = (SELECT MAX(ADDL_PAY2.EFFDT)
                        FROM PS_ADDL_PAY_DATA ADDL_PAY2
                        WHERE ADDL_PAY2.EMPLID    = ADDL_PAY.EMPLID
                          AND ADDL_PAY2.EMPL_RCD = ADDL_PAY.EMPL_RCD
                          AND ADDL_PAY2.ADDL_SEQ = ADDL_PAY.ADDL_SEQ
                          AND ADDL_PAY2.ERNCD     = ADDL_PAY.ERNCD
                          AND ADDL_PAY2.EFFDT    <= $CP_Pay_End_Dt)
end-SELECT

  do FORMAT-DATETIME($C_Payment_Begin_Dt, $Temp_C_Begin_Dt, {DEFCMP},'','')
  do FORMAT-DATETIME($pne_Effdt, $Temp_pne_Effdt, {DEFCMP},'','')
  do FORMAT-DATETIME($reg_effdt, $Temp_reg_Effdt, {DEFCMP},'','')
  do FORMAT-DATETIME($enp_effdt, $Temp_enp_Effdt, {DEFCMP},'','')

  evaluate $Temp_C_Begin_Dt
     when > $Temp_pne_Effdt
        let #pne_Goal_Bal = 0

     when > $Temp_reg_Effdt
        let #reg_Goal_Bal = 0

     when > $Temp_enp_Effdt
        let #enp_Goal_Bal = 0
  end-evaluate

end-procedure
!****************************************************************************
! COMPUTE-WORKING-ADDL-PAY                                                  *
! Computes additional pay amounts for before, during, and after contract    *
! when there are remaining pay periods.                                     *
! Also Compute Lump Sum Retroactive Payments.                               *
!****************************************************************************
begin-procedure COMPUTE-WORKING-ADDL-PAY

  let #pne_Retro = 0
  let #R_Retro = 0
  let #enp_Retro = 0
  let #pne_Adj_Bal = 0
  let #R_Adj_Bal = 0
  let #enp_Adj_Bal = 0

  do FORMAT-DATETIME($C_Payment_Begin_Dt, $CMP_C_Payment_Begin_Dt, {DEFCMP},'','')
  do FORMAT-DATETIME($C_Contract_End_Dt, $CMP_C_Contract_End_Dt, {DEFCMP},'','')
  do FORMAT-DATETIME($C_Contract_Term_Dt, $CMP_Contract_Term_Dt, {DEFCMP},'','')
  do FORMAT-DATETIME($CP_Pay_Begin_Dt, $CMP_CP_Pay_Begin_Dt, {DEFCMP},'','')
  do PAY-PRDS-BETWEEN($CP_Pay_Begin_Dt, $C_Contract_Term_Dt, #Term_Prds_Remaining)

  if $CMP_Contract_Term_Dt < $CMP_CP_Pay_Begin_Dt and              ! Contract terminated early
     $CMP_Contract_Term_Dt < $CMP_C_Contract_End_Dt
     let #R_Goal_Amt = #reg_Goal_Amt
     let #R_Amount = 0
     let #PnotE_Amount1 = 0
     if #pne_Goal_Bal = 0
        let #PnotE_Amount2 = 0
        do FORMAT-DATETIME($pne_Old_Effdt, $CMP_pne_Old_Effdt, {DEFCMP},'','')
        if $CMP_pne_Old_Effdt >= $CMP_C_Payment_Begin_Dt
           let #PnotE_Goal_Amt1 = #pne_Goal_Amt
        else
           let #PnotE_Goal_Amt1 = 0
        end-if
     else
        let #PnotE_Amount2 = #pne_Goal_Bal * -1
        let #PnotE_Goal_Amt1 = #pne_Goal_Amt
     end-if
     let #EnotP_Amount1 = 0
     if #enp_Goal_Bal = 0
        let #EnotP_Amount2 = 0
        do FORMAT-DATETIME($enp_Old_Effdt, $CMP_enp_Old_Effdt, {DEFCMP},'','')
        if $CMP_enp_Old_Effdt >= $CMP_C_Payment_Begin_Dt
           let #EnotP_Goal_Amt1 = #enp_Goal_Amt
        else
           let #EnotP_Goal_Amt1 = 0
        end-if
     else
        let #EnotP_Amount2 = #enp_Goal_Bal * -1
        let #EnotP_Goal_Amt1 = #enp_Goal_Bal
     end-if
  else
     let #Contract_Amt_Remaining = #C_Total_Amount - #reg_Goal_Bal - #pne_Goal_Bal - #enp_Goal_Bal
                                   - #CRG_Retro_Total_Amt1 - #PNE_Retro_Total_Amt1 - #PNE_Retro_Total_Amt2
                                   - #ENP_retro_Total_Amt1 - #ENP_retro_Total_Amt2
     let #Pay_Prds_Remaining = #BC_Pay_Prds_Remaining + #DC_Pay_Prds_Remaining + #AC_Pay_Prds_Remaining

     if #Pay_Prds_Remaining > 0
        let #Gross = #Contract_Amt_Remaining / #Pay_Prds_Remaining
     else
        let #Gross = 0
     end-if

     if #BC_Pay_Prds_Remaining > 0

        if $Lump_Sum_Pay = 'Y'

           let #pne_Retro    = round(#PNE_Retro_Total_Amt1 - #Retro_pne_Total,2)

           if (#pne_Retro > 0 and
               #pne_Retro < 0.05) or
              (#pne_Retro < 0 and
               #pne_Retro > -0.05)
             let #pne_Retro = 0
           end-if
        end-if

        let #PnotE_Goal_Amt1 = #pne_Goal_Bal + (#Gross * #BC_Pay_Prds_Remaining) + #pne_Retro
        let #PnotE_Amount1 = #Gross * #CP_Pay_Prds_Before
     else

        let #PnotE_Goal_Amt1 = #BC_Total_Amount + #PNE_Retro_Total_Amt2
        let #PnotE_Amount1   = 0
     end-if

     let #PnotE_Goal_Amt2 = 0
     let #R_Goal_Amt = #C_Total_Amount - #CRG_Retro_Total_Amt1

     if #DC_Pay_Prds_Remaining > 0

        if $Lump_Sum_Pay = 'Y'
           if #DC_Pay_Prds >= #DC_Pay_Prds_Remaining

              let #pne_Retro    = round(#PNE_Retro_Total_Amt1 + #PNE_Retro_Total_Amt2 - #Retro_pne_Total,2)

              if (#pne_Retro > 0 and
                  #pne_Retro < 0.05) or
                  (#pne_Retro < 0 and
                  #pne_Retro > -0.05)
                 let #pne_Retro = 0
              end-if
           end-if

           let #R_Retro    = round(#CRG_Retro_Total_Amt1 - #Retro_R_Total, 2)

           if (#R_Retro > 0 and
               #R_Retro < 0.05) or
              (#R_Retro < 0 and
               #R_Retro > -0.05)
              let #R_Retro = 0
           end-if

           let #enp_Retro    = round(#ENP_retro_Total_Amt1 - #Retro_enp_Total,2)

           if (#enp_Retro > 0 and
              #enp_Retro < 0.05) or
              (#enp_Retro < 0 and
              #enp_Retro > -0.05)
             let #enp_Retro = 0
           end-if
        end-if

        let #R_Amount        = ((#R_Goal_Amt - #reg_Goal_Bal) *
                                  #CP_Pay_Prds_During / #DC_Pay_Prds_Remaining)
        let #EnotP_Goal_Amt1 = -((#Gross * #AC_Pay_Prds_Remaining) + #ENP_retro_Total_Amt1)

        if $CMP_Contract_Term_Dt < $CMP_C_Contract_End_Dt     ! Contract terminates early - payout balance

           if $CMP_Contract_Term_Dt > $CMP_CP_Pay_Begin_Dt

              if #Term_Prds_Remaining > 1
                 let #R_Goal_Amt = #reg_Goal_Bal + (#R_Amount * #Term_Prds_Remaining /
                                #CP_Pay_Prds_During)
                 let #PnotE_Amount2 = -(#pne_Goal_Bal / #Term_Prds_Remaining)
              else
                 let #R_Goal_Amt = #reg_Goal_Bal + #R_Amount
                 let #PnotE_Amount2 = #pne_Goal_Bal * -1
             end-if

           end-if
           let #PnotE_Goal_Amt1 = 0
           let #EnotP_Goal_Amt1 = #enp_Goal_Bal
           let #EnotP_Amount1 = 0

        else
           let #PnotE_Amount2 = (-(#pne_Goal_Bal + #PnotE_Amount1
                                  + #Retro_pne_Total + #pne_Retro)  *
                                 #CP_Pay_Prds_During / #DC_Pay_Prds_Remaining)
           let #EnotP_Amount1 = ((#EnotP_Goal_Amt1 - #enp_Goal_Bal) *
                                 #CP_Pay_Prds_During / #DC_Pay_Prds_Remaining)

           if #AC_Pay_Prds_Remaining = 0 and #enp_Goal_Bal <> 0
              let #EnotP_Goal_Amt1 = (-(#EnotP_Amount1) *
                                      #DC_Pay_Prds_Remaining / #CP_Pay_Prds_During)
           end-if
        end-if

     else

        let #PnotE_Amount2   = 0
        let #R_Amount        = 0
        let #EnotP_Amount1   = 0

        if #AC_Pay_Prds_Remaining > 0
           let #EnotP_Goal_Amt1 = #enp_Goal_Amt
        else
           let #EnotP_Goal_Amt1 = 0
        end-if
     end-if

     let #EnotP_Goal_Amt2 = 0

     if #AC_Pay_Prds_Remaining > 0

        if $Lump_Sum_Pay = 'Y'

           if #AC_Pay_Prds >= #AC_Pay_Prds_Remaining
              let #enp_Retro       = round(#ENP_retro_Total_Amt1 + #ENP_retro_Total_Amt2 - #Retro_enp_Total,2)

              if (#enp_Retro > 0 and
                  #enp_Retro < 0.05) or
                 (#enp_Retro < 0 and
                  #enp_Retro > -0.05)
                 let #enp_Retro = 0
              end-if

              let #R_Retro         = round(#CRG_Retro_Total_Amt1 - #Retro_R_Total,2)

              if (#R_Retro > 0 and
                  #R_Retro < 0.05) or
                 (#R_Retro < 0 and
                  #R_Retro > -0.05)
                 let #R_Retro = 0
              end-if
           end-if
        end-if

        if $CMP_Contract_Term_Dt < $CMP_C_Contract_End_Dt        ! Contract terminates early - payout balance
           if #Term_Prds_Remaining > 1
              let #EnotP_Amount2 = -(#enp_Goal_Bal / #Term_Prds_Remaining)
           else
             let #EnotP_Amount2 = -(#enp_Goal_Bal)
           end-if
        else
           let #EnotP_Amount2 = #Gross * #CP_Pay_Prds_After
        end-if
     else
        let #EnotP_Amount2   = 0
     end-if

   end-if

  !Assign hours to ENP first, then REG, then PNE

  let #ENotP_Hrs = 0
  let #Reg_Hrs   = 0
  let #PNotE_Hrs = 0

  if $C_Assign_Hrs_To_Flg = 'A'
    if (#EnotP_Amount1 + #EnotP_Amount2) > 0
      let #ENotP_Hrs = #C_Pay_Period_Hrs
    else
      if #R_Amount > 0
        let #Reg_Hrs = #C_Pay_Period_Hrs
      else
        if (#PnotE_Amount1 + #PnotE_Amount2) > 0
          let #PNotE_Hrs = #C_Pay_Period_Hrs
        end-if
      end-if
    end-if
  else
    if $C_Assign_Hrs_To_Flg = 'C'
      let #Reg_Hrs = #C_Pay_Period_Hrs
    end-if
  end-if

end-procedure

!****************************************************************************
! COMPUTE-LUMP-SUM-RETRO-TOTAL                                              *
! Computes total lump sump retro for Paid Not Earned, Regular and           *
! Earned Not Paid prior to pay period begin date.                           *
! Get the last ADDL_SEQ number used for Lump Sum Retro.                     *
!****************************************************************************
begin-procedure COMPUTE-LUMP-SUM-RETRO-TOTAL

    let #Retro_pne_Total = 0
    let #Retro_R_Total = 0
    let #Retro_enp_Total = 0

    do GET-CONTRACT-ADDL-SEQ

    let $Retro_Erncd = $PD_Erncd_Pd_not_Ern
    do GET-RETRO-ADDL-DATA
    let #Retro_pne_Seq = #Retro_Addl_Seq + 1
    do Format-Number(#Retro_pne_Seq,$PNE_Addl_Seq,'99')
    let $PNE_Addl_Seq = ltrim($PNE_Addl_Seq,' ')
    while instr($Excl_Addl_Seq,$PNE_Addl_Seq,0) > 0
       let #Retro_pne_Seq = #Retro_pne_Seq + 1
       do Format-Number(#Retro_pne_Seq,$PNE_Addl_Seq,'99')
       let $PNE_Addl_Seq = ltrim($PNE_Addl_Seq,' ')
    end-while
    let #Retro_pne_Total = #Retro_Total
    let $Retro_Erncd = $PD_Erncd_Reg_Earns

    do GET-RETRO-ADDL-DATA
    let #Retro_R_Seq = #Retro_Addl_Seq + 1
    do Format-Number(#Retro_R_Seq,$CRG_Addl_Seq,'99')
    let $CRG_Addl_Seq = ltrim($CRG_Addl_Seq,' ')

    while instr($Excl_Addl_Seq,$CRG_Addl_Seq,0) > 0
       let #Retro_R_Seq = #Retro_R_Seq + 1
       do Format-Number(#Retro_R_Seq,$CRG_Addl_Seq,'99')
       let $CRG_Addl_Seq = ltrim($CRG_Addl_Seq,' ')
    end-while
    let #Retro_R_Total = #Retro_Total
    let $Retro_Erncd = $PD_Erncd_Ern_not_Pd

    do GET-RETRO-ADDL-DATA
    let #Retro_enp_Seq = #Retro_Addl_Seq + 1
    do Format-Number(#Retro_enp_Seq,$ENP_Addl_Seq,'99')
    let $ENP_Addl_Seq = ltrim($ENP_Addl_Seq,' ')

    while instr($Excl_Addl_Seq,$ENP_Addl_Seq,0) > 0
       let #Retro_enp_Seq = #Retro_enp_Seq + 1
       do Format-Number(#Retro_enp_Seq,$ENP_Addl_Seq,'99')
       let $ENP_Addl_Seq = ltrim($ENP_Addl_Seq,' ')
    end-while
    let #Retro_enp_Total = #Retro_Total

! clear previously calculated lump sum retro for current pay period.
    do DELETE-ADDL-PAY($E_Emplid, #E_Empl_Rcd, $PD_Erncd_Pd_not_Ern,
                     $CP_Pay_Begin_Dt, #Retro_pne_Seq)
    do DELETE-ADDL-PAY($E_Emplid, #E_Empl_Rcd, $PD_Erncd_Reg_Earns,
                     $CP_Pay_Begin_Dt, #Retro_R_Seq)
    do DELETE-ADDL-PAY($E_Emplid, #E_Empl_Rcd, $PD_Erncd_Ern_not_Pd,
                     $CP_Pay_Begin_Dt, #Retro_enp_Seq)

end-procedure

!****************************************************************************
! GET-CONTRACT-ADDL-SEQ                                                     *
! Determine ADDL_SEQ for all existing contracts for this employee/empl_rcd.  *
!****************************************************************************
begin-procedure GET-CONTRACT-ADDL-SEQ

  let $Excl_Addl_Seq = '(1'

begin-SELECT
EMPL_CONT.ADDL_SEQ

  if &EMPL_CONT.ADDL_SEQ > 1
    do Format-Number(&EMPL_CONT.ADDL_SEQ, $existing_addl_seq, '99')
    let $existing_addl_seq = LTRIM($existing_addl_seq,' ')
    let $Excl_Addl_Seq =  $Excl_Addl_Seq || ',' || $existing_addl_seq
  end-if

FROM PS_CONTRACT EMPL_CONT
WHERE EMPL_CONT.EMPLID    = $E_Emplid
  AND EMPL_CONT.EMPL_RCD  = #E_Empl_Rcd
  AND EMPL_CONT.PAYMENT_BEGIN_DT <= $CP_Pay_Begin_Dt

end-SELECT

  let $Excl_Addl_Seq =  $Excl_Addl_Seq || ')'

end-procedure

!****************************************************************************
! GET-RETRO-ADDL-DATA                                                       *
! Calculate the new ADDL_SEQ for Lump Sum Retroactive Payment.              *
!****************************************************************************
begin-procedure GET-RETRO-ADDL-DATA

  let #Retro_Addl_Seq = #Addl_Pay_Addl_Seq
  let #Retro_Total = 0

begin-SELECT
RETRO_ADDL.ADDL_SEQ
RETRO_ADDL.OTH_PAY

  let #Retro_Addl_Seq = &RETRO_ADDL.ADDL_SEQ
  Add &RETRO_ADDL.OTH_PAY to #Retro_Total

FROM PS_ADDL_PAY_DATA RETRO_ADDL
WHERE RETRO_ADDL.EMPLID    = $E_Emplid
  AND RETRO_ADDL.EMPL_RCD = #E_Empl_Rcd
  AND RETRO_ADDL.ERNCD = $Retro_Erncd
  AND RETRO_ADDL.EFFDT >= $C_Payment_Begin_Dt
  AND RETRO_ADDL.EFFDT < $CP_Pay_Begin_Dt
  AND RETRO_ADDL.ADDL_SEQ not in [$Excl_Addl_Seq]
end-SELECT

end-procedure

!****************************************************************************
! UPDATE-ADDITIONAL-PAY1                                                    *
! Calls UPDATE-ADDITIONAL-PAY2 for Paid not Earned, Regular, and Earned not *
! Paid passing the correct data for each.
!****************************************************************************
begin-procedure UPDATE-ADDITIONAL-PAY1

   do FORMAT-DATETIME($C_Payment_Begin_Dt,$CMP_C_Payment_Begin_Dt,{DEFCMP},'','')
   do FORMAT-DATETIME($CP_Pay_Begin_Dt, $CMP_CP_Pay_Begin_Dt, {DEFCMP},'','')
   do FORMAT-DATETIME($CP_Pay_End_Dt, $CMP_CP_Pay_End_Dt, {DEFCMP},'','')
   do FORMAT-DATETIME($C_Contract_Term_Dt, $CMP_Contract_Term_Dt, {DEFCMP},'','')

   if (($CMP_C_Payment_Begin_Dt >  $CMP_CP_Pay_Begin_Dt)
   and ($CMP_C_Payment_Begin_Dt <= $CMP_CP_Pay_End_Dt))
      let $C_Effdt = $C_Payment_Begin_Dt
   else
      let $C_Effdt = $CP_Pay_Begin_Dt
   end-if

   ! Oth_Pay is updated only when the new calculated amount is greater than
   ! the current amount or is less than the current amount by more than
   ! one cent.

   let #GAmt         = round(#PnotE_Goal_Amt1 + #PnotE_Goal_Amt2,2)
   let #Amt          = round(#PnotE_Amount1 + #PnotE_Amount2,2)
   let #Goal_Diff    = abs(#pne_Goal_Bal + #pne_Oth_Pay
                       + #Retro_pne_Total + #pne_Retro)
   let #new_Goal_Bal = #pne_Goal_Bal + #Amt
   let #Goal_Bal_Diff = #new_Goal_Bal - #pne_Goal_Amt
   if #Goal_Bal_Diff > 0.00 and #Goal_Bal_Diff < 0.02
      let #Amt = #Amt - #Goal_Bal_Diff
   end-if
   let #Amt_Diff     = abs(#Amt - #pne_Oth_Pay)

   if (((#pne_Goal_Amt        <> #GAmt)
    and (#pne_Goal_Amt        <> -#GAmt))
   or (#Goal_Diff             <= 0.02
   and #Goal_Diff             <> 0.00)
   or (#Amt_Diff               > 0.01)
   or (#Amt_Diff               > 0.00
   and #BC_Pay_Prds_Remaining  > 0
   and #BC_Pay_Prds_Remaining <= 1.99)
   or ($pne_Earnings_End_Dt   <> ''
   and $pne_Earnings_End_Dt   <> $C_Contract_Term_Dt)
   or ($pne_Record_Source     <> 'B')
   or (#pne_Oth_Hrs           <> #PnotE_Hrs))

      !Avoid goal amount being set to zero when liquidation of a goal
      !balance is needed.  This should only occur when an employee has
      !switched to a twelve month contract to a paid over contract.

      if not(#GAmt = 0 and #Amt <> 0)
         if #pne_Goal_Amt <> -#GAmt
            let #pne_Goal_Amt        = #GAmt
         end-if
      end-if

      !* The following is a mechanism whereby if application of the current
      !* period's pay amt to the balance would leave the outstanding
      !* balance at less than $0.02, then the pay amt is arbitrarily set
      !* to completely offset the outstanding goal balance.

      if #Goal_Diff <= 0.02 and #Goal_Diff <> 0.00
         let #pne_Oth_Pay      = (#pne_Goal_Bal + #Retro_pne_Total
                                 + #pne_Retro) * -1.0
      else
         let #pne_Oth_Pay      = #Amt
      end-if

      let $pne_Effdt           = $C_Effdt
      if $CMP_Contract_Term_Dt <= $CMP_CP_Pay_End_Dt
        and abs(#pne_Oth_Pay) = 0.00
         let $pne_Earnings_End_Dt = $C_Contract_Term_Dt
      else
         let $pne_Earnings_End_Dt =  ''
      end-if
      let $pne_Record_Source   =  'B'
      let #Oth_Hrs             = #PNotE_Hrs

      do UPDATE-ADDITIONAL-PAY2($PD_Erncd_Pd_not_Ern, #pne_Addl_Seq,
                                #pne_Goal_Amt, #pne_Goal_Bal, #pne_Oth_Pay,
                                #Oth_Hrs, $pne_Effdt, $pne_Old_Effdt,
                                $pne_Earnings_End_Dt, $pne_Record_Source)
   end-if

   let #GAmt         = round(#R_Goal_Amt,2)
   let #Amt          = round(#R_Amount,2)
   let #new_bal      = #reg_Goal_Bal + #reg_Oth_Pay
                       + #Retro_R_Total + #R_Retro
   let #Amt_Diff     = abs(#Amt - #reg_Oth_Pay)
   let #Goal_Diff    = abs(#GAmt - #reg_Goal_Bal - #Amt
                       - #Retro_R_Total - #R_Retro)

   if ((#reg_Goal_Amt         <> #GAmt)
   or ((#new_Bal               >  #GAmt)
   and (#GAmt                 <> 0))
   or (#Goal_Diff             <= 0.02
   and #Goal_Diff             <> 0.00)
   or ((#Amt_Diff              > 0.01)
   or (#Amt_Diff               > 0.00
   and #DC_Pay_Prds_Remaining  > 0
   and #DC_Pay_Prds_Remaining <= 1.99))
   or ($reg_Earnings_End_Dt   <> '')
   or ($reg_Record_Source     <> 'B')
   or (#reg_Oth_Hrs           <> #Reg_Hrs))

      let #reg_Goal_Amt        =  #GAmt

      !* The following is a mechanism whereby if application of the current
      !* period's pay amt to the balance would leave the outstanding
      !* balance at less than $0.02 from the goal amount, then the pay amt
      !* is arbitrarily set to completely offset the outstanding goal amt.

      if #Goal_Diff           <= 0.02
         let #reg_Oth_Pay      = #GAmt - #reg_Goal_Bal
                                 - #Retro_R_Total - #R_Retro
      else
         let #reg_Oth_Pay      =  #Amt
      end-if
      let $reg_Effdt           =  $C_Effdt
      let $reg_Earnings_End_Dt =  ''
      let $reg_Record_Source   =  'B'
      let #Oth_Hrs             =  #Reg_Hrs

      do UPDATE-ADDITIONAL-PAY2($PD_Erncd_Reg_Earns, #reg_Addl_Seq,
                                #reg_Goal_Amt, #reg_Goal_Bal, #reg_Oth_Pay,
                                #Oth_Hrs, $reg_Effdt, $reg_Old_Effdt,
                                $reg_Earnings_End_Dt, $reg_Record_Source)
   end-if

   let #GAmt         = round(#EnotP_Goal_Amt1 + #EnotP_Goal_Amt2,2)
   let #Amt          = round(#EnotP_Amount1 + #EnotP_Amount2,2)
   let #Amt_Diff     = abs(#Amt - #enp_Oth_Pay)
   let #Goal_Diff    = abs(#enp_Goal_Bal + #enp_Oth_Pay
                       + #Retro_enp_Total + #Retro_enp)

   if (((#enp_Goal_Amt        <> #GAmt)
    and (#enp_Goal_Amt        <> -#GAmt))
   or ((#Goal_Diff            <= 0.02)
    and (#Goal_Diff           <> 0.00))
   or (#Amt_Diff               > 0.01)
   or (#Amt_Diff               > 0.00
   and #DC_Pay_Prds_Remaining  > 0
   and #DC_Pay_Prds_Remaining <= 1.99)
   or ($enp_Earnings_End_Dt   <> ''
   and $enp_Earnings_End_Dt   <> $C_Contract_Term_Dt)
   or ($enp_Record_Source     <> 'B')
   or (#enp_Oth_Hrs <> #EnotP_Hrs))

      !Avoid goal amount being set to zero when liquidation of a goal
      !balance is needed.  This should only occur when an employee has
      !switched to a twelve month contract to a paid over contract.

      if not(#GAmt = 0 and #Amt <> 0)
         if #enp_Goal_Amt <> -#GAmt
            let #enp_Goal_Amt        = #GAmt
         end-if
      end-if

      !* The following is a mechanism whereby if application of the current
      !* period's pay amt to the balance would leave the outstanding
      !* balance at less than $0.02, then the pay amt is arbitrarily set
      !* to completely offset the outstanding goal balance.

      if #Goal_Diff <= 0.02 and #Goal_Diff <> 0.00
         let #enp_Oth_Pay      = (#enp_Goal_Bal
                                 + #Retro_enp_Total + #enp_Retro) * -1.0
      else
         let #enp_Oth_Pay      = #Amt
      end-if

      let $enp_Effdt           =  $C_Effdt
      if $CMP_Contract_Term_Dt <= $CMP_CP_Pay_End_Dt
        and abs(#enp_Oth_Pay) = 0.00
         let $enp_Earnings_End_Dt = $C_Contract_Term_Dt
      else
         let $enp_Earnings_End_Dt =  ''
      end-if
      let $enp_Record_Source   =  'B'
      let #Oth_Hrs             = #ENotP_Hrs

      do UPDATE-ADDITIONAL-PAY2($PD_Erncd_Ern_not_Pd, #enp_Addl_Seq,
                                #enp_Goal_Amt, #enp_Goal_Bal, #enp_Oth_Pay,
                                #Oth_Hrs, $enp_Effdt, $enp_Old_Effdt,
                                $enp_Earnings_End_Dt, $enp_Record_Source)
   end-if

end-procedure

!****************************************************************************
! UPDATE-LUMP-SUM-RETRO                                                     *
! Add Additional Pay record for lump sum retroactive payments.              *
!****************************************************************************
begin-procedure UPDATE-LUMP-SUM-RETRO

  let #Total_Retro = #pne_Retro + #R_Retro + #enp_Retro
  if #Total_Retro > 0 and
     $RC_PAYINIT.SEPCHK_FLAG = 'Y'
    let #SEPCHK = 1
  else
    let #SEPCHK = 0
  end-if

  let $Earns_End_Dt = ''

  if #pne_Retro <> 0
    do INSERT-ADDL-PAY(#pne_Retro, 0, #pne_Retro, 0, $CP_Pay_Begin_Dt,
                       $PD_Erncd_Pd_not_Ern, #Retro_pne_Seq,
                       $Earns_End_Dt, $pne_Record_Source, #SEPCHK)
  end-if

  if #R_Retro <> 0
    do INSERT-ADDL-PAY(#R_Retro, 0, #R_Retro, 0, $CP_Pay_Begin_Dt,
                       $PD_Erncd_Reg_Earns, #Retro_R_Seq,
                       $Earns_End_Dt, $reg_Record_Source, #SEPCHK)
  end-if

  if #enp_Retro <> 0
    do INSERT-ADDL-PAY(#enp_Retro, 0, #enp_Retro, 0, $CP_Pay_Begin_Dt,
                       $PD_Erncd_Ern_not_Pd, #Retro_enp_Seq,
                       $Earns_End_Dt, $enp_Record_Source, #SEPCHK)
  end-if

end-procedure

!****************************************************************************
! UPDATE-ADDL-PAY-LUMP-SUM                                                  *
! Calls UPDATE-ADDITIONAL-PAY2 for Regular, passing lump sum payment data   *
!****************************************************************************
begin-procedure UPDATE-ADDL-PAY-LUMP-SUM

   let #R_Goal_Amt = #C_Total_Amount
   let #R_Amount   = #R_Goal_Amt - #reg_Goal_Bal

   do FORMAT-DATETIME($C_Payment_Begin_Dt,$CMP_C_Payment_Begin_Dt,{DEFCMP},'','')
   do FORMAT-DATETIME($CP_Pay_Begin_Dt, $CMP_CP_Pay_Begin_Dt, {DEFCMP},'','')
   do FORMAT-DATETIME($CP_Pay_End_Dt, $CMP_CP_Pay_End_Dt, {DEFCMP},'','')

   if (($CMP_C_Payment_Begin_Dt >  $CMP_CP_Pay_Begin_Dt)
   and ($CMP_C_Payment_Begin_Dt <= $CMP_CP_Pay_End_Dt))

      let $C_Effdt = $C_Payment_Begin_Dt
   else

      let $C_Effdt = $CP_Pay_Begin_Dt
   end-if

   do FORMAT-DATETIME($C_Effdt, $CMP_C_Effdt, {DEFCMP},'','')
   do FORMAT-DATETIME($reg_Old_Effdt, $CMP_reg_Old_Effdt, {DEFCMP},'','')

   let #GAmt         = round(#R_Goal_Amt,2)
   let #Amt          = round(#R_Amount,2)
   let #reg_Goal_amt = round(#reg_goal_amt,2)
   let #reg_Oth_Pay  = round(#reg_Oth_Pay,2)
   let #new_bal      = round(#reg_Goal_Bal + #reg_Oth_Pay,2)
   let #Amt_Diff     = round(#Amt - #reg_Oth_Pay,2)

   if #Amt_Diff < 0
      let #Amt_Diff = -#Amt_Diff
   end-if

   if ((#reg_Goal_Amt       <> #GAmt)
   or ((#new_Bal             >  #GAmt)
   and (#GAmt               <> 0))
   or (#Amt_Diff             > 0.01)
   or ($reg_Earnings_End_Dt <> '')
   or ($reg_Record_Source   <> 'B')
   or ($CMP_C_Effdt         <> $CMP_reg_Old_Effdt))

      let #reg_Goal_Amt        =  #GAmt
      let #reg_Oth_Pay         =  #Amt
      let $reg_Effdt           =  $C_Effdt
      let $reg_Earnings_End_Dt =  ''
      let $reg_Record_Source   =  'B'
      let #Oth_Hrs = 0

      do UPDATE-ADDITIONAL-PAY2($PD_Erncd_Reg_Earns, #reg_Addl_Seq,
                                #reg_Goal_Amt, #reg_Goal_Bal, #reg_Oth_Pay,
                                #Oth_Hrs, $reg_Effdt, $reg_Old_Effdt,
                                $reg_Earnings_End_Dt, $reg_Record_Source)
   end-if

end-procedure
!****************************************************************************
! UPDATE-ADDITIONAL-PAY2                                                    *
! Determine if Table ADDL_PAY_DATA needs to be updated or a new row needs   *
! to be inserted.                                                           *
!****************************************************************************
begin-procedure UPDATE-ADDITIONAL-PAY2($Erncd, #Addl_Seq, #Goal_Amt,
                                       #Goal_Bal, #Oth_Pay, #Oth_Hrs, $Effdt,
                                       $Old_Effdt, $End_Dt, $Rec_Source)

  let $_Prd2 = 'N'
  let $_Prd3 = 'N'
  let $_Prd4 = 'N'
  let $_Prd5 = 'N'

  if ($_PD_Pay_Freq = 'S' or $_PD_Pay_Freq = 'B' or $_PD_Pay_Freq = 'W')

     let $_Prd2 = 'Y'

     if ($_PD_Pay_Freq = 'B' or $_PD_Pay_Freq = 'W')

        let $_Prd3 = 'Y'

        if $_PD_Pay_Freq = 'W'

           let $_Prd4 = 'Y'
           let $_Prd5 = 'Y'
        end-if
     end-if
  end-if



  do FORMAT-DATETIME($Effdt, $CMP_Effdt, {DEFCMP},'','')
  do FORMAT-DATETIME($Old_Effdt, $CMP_Old_Effdt, {DEFCMP},'','')

  if ($CMP_Effdt <> $CMP_Old_Effdt)
     if ($Old_Effdt <> '') or
      not ((#Goal_Bal = 0)
       and (#Oth_Pay  = 0))

        do INSERT-ADDL-PAY(#Goal_Amt, #Goal_Bal, #Oth_Pay, #Oth_Hrs, $Effdt, $Erncd,
                           #Addl_Seq, $End_Dt, $Rec_Source, #SEPCHK)
     end-if
  else

     do UPDATE-ADDL-PAY(#Goal_Amt, #Goal_Bal, #Oth_Pay, #Oth_Hrs, $Effdt, $Erncd,
                        #Addl_Seq, $End_Dt, $Rec_Source, #SEPCHK)
  end-if

  do UPDATE-PAYROLL

end-procedure
!****************************************************************************
! INSERT-ADDL-PAY                                                           *
! Inserts record into Table ADDL_PAY_DATA, ADDL_PAY_ERNCD, ADDL_PAY_EFFDT   *
!****************************************************************************
begin-procedure INSERT-ADDL-PAY(#Goal_Amt, #Goal_Bal, #Oth_Pay, #Oth_Hrs,
                                $Effdt, $Erncd, #Addl_Seq, $End_Dt, $Rec_Source,#SEPCHK)

  let $_Temp_Erncd      = $Erncd
  let $_Temp_Effdt      = $Effdt
  let $_Temp_Rec_Source = $Rec_Source
  let $SEPCHK = #SEPCHK

begin-SQL on-error=UPDATE-ADDL-PAY-ERNCD

INSERT INTO PS_ADDL_PAY_ERNCD
(EMPLID, EMPL_RCD, ERNCD, RECORD_SOURCE)
VALUES($_E_Emplid, #_E_Empl_Rcd, $Erncd, $Rec_Source)

end-SQL

begin-SQL on-error=UPDATE-ADDL-PAY-EFFDT

INSERT INTO PS_ADDL_PAY_EFFDT
(EMPLID, EMPL_RCD, ERNCD, EFFDT, RECORD_SOURCE)
VALUES($_E_Emplid, #_E_Empl_Rcd, $Erncd, $Effdt, $Rec_Source)

end-SQL

move #Addl_Seq to $Addl_Seq
move #Oth_Pay  to $Oth_Pay
move #Oth_Hrs  to $Oth_Hrs
move #Goal_Amt to $Goal_Amt
move #Goal_Bal to $Goal_Bal

let $err-statement1 = 'CNTPAY01, Insert Error - INSERT-ADDL-PAY'
let $err-statement2 = 'Key Fields: EMPLID '|| $_E_Emplid||
', EMPL_RCD '|| $Empl_Rcd||
', ERNCD ' || $Erncd||
', EFFDT ' || $Effdt||
', ADDL_SEQ ' || $Addl_Seq||
', DEPTID space'||
', JOBCODE space'||
', POSITION_NBR space'||
', ACCT_CD space'||
', GL_PAY_TYPE space'||
', ADDL_PAY_SHIFT J'||
', OTH_HRS '||$Oth_Hrs||
', HOURLY_RT 0'||
', OTH_PAY '||$Oth_Pay||
', ADDLPAY_REASON C'||
', SEPCHK '||$SEPCHK||
', EARNINGS_END_DT null'||
', GOAL_AMT '||$Goal_Amt||
', GOAL_BAL '||$Goal_Bal||
', OK_TO_PAY Y'||
', DISABLE_DIR_DEP N'||
', PRORATE_ADDL_PAY N'||
', PRORATE_CUI_WEEKS Y'||
', PAY_PERIOD1 Y'||
', PAY_PERIOD2 '||$_Prd2||
', PAY_PERIOD3 '||$_Prd3||
', PAY_PERIOD4 '||$_Prd4||
', PAY_PERIOD5 '||$_Prd5||
', STATE space'||
', LOCALITY space'||
', TAX_PERIODS 1'||
', TAX_METHOD A'||
', ADDL_PAY_FREQUENCY P'||
', DED_TAKEN R'||
', DED_SUBSET_ID space'||
', PLAN_TYPE space'||
', DED_SUBSET_GENL space'||
', DED_TAKEN_GENL R'||
', BUSINESS_UNIT space'||
', COMP_RATECD space'||
', RECORD_SOURCE '||$Rec_Source

begin-SQL on-error=Error-Display

INSERT INTO PS_ADDL_PAY_DATA
(EMPLID,
EMPL_RCD,
ERNCD,
EFFDT,
ADDL_SEQ,
DEPTID,
JOBCODE,
POSITION_NBR,
ACCT_CD,
GL_PAY_TYPE,
ADDL_PAY_SHIFT,
OTH_HRS,
HOURLY_RT,
OTH_PAY,
ADDLPAY_REASON,
SEPCHK,
EARNINGS_END_DT,
GOAL_AMT,
GOAL_BAL,
OK_TO_PAY,
DISABLE_DIR_DEP,
PRORATE_ADDL_PAY,
PRORATE_CUI_WEEKS,
PAY_PERIOD1,
PAY_PERIOD2,
PAY_PERIOD3,
PAY_PERIOD4,
PAY_PERIOD5,
STATE,
LOCALITY,
TAX_PERIODS,
TAX_METHOD,
ADDL_PAY_FREQUENCY,
DED_TAKEN,
DED_SUBSET_ID,
DED_TAKEN_GENL,
DED_SUBSET_GENL,
PLAN_TYPE,
BUSINESS_UNIT,
COMP_RATECD,
RECORD_SOURCE)
VALUES($_E_Emplid,
#_E_Empl_Rcd,
$Erncd,
$Effdt,
#Addl_Seq,
' ',
' ',
' ',
' ',
' ',
'J',
#Oth_Hrs,
0,
#Oth_Pay,
'C',
#SEPCHK,
NULL,
#Goal_Amt,
#Goal_Bal,
'Y',
'N',
'N',
'Y',
'Y',
$_Prd2,
$_Prd3,
$_Prd4,
$_Prd5,
' ',
' ',
1,
'A',
'P',
'R',
' ',
'R',
' ',
' ',
' ',
' ',
$Rec_Source)

end-SQL

end-procedure
!****************************************************************************
! UPDATE-ADDL-PAY-ERNCD                                                     *
! Updates Record Source in Table ADDL_PAY_ERNCD                             *
!****************************************************************************
begin-procedure UPDATE-ADDL-PAY-ERNCD

let $err-statement1 = 'CNTPAY01, Update Error - UPDATE-ADDL-PAY-ERNCD'
let $err-statement2 = 'Bind Varables: Employee '||$E_Emplid||', EMPL_RCD,'||
                      $Empl_Rcd||', Earn Code '||$Temp_Erncd||' Key Fields:'||
                      ' Record Source '||$Temp_Rec_Source
begin-SQL on-error=Error-Display

UPDATE PS_ADDL_PAY_ERNCD
SET RECORD_SOURCE = $Temp_Rec_Source
WHERE EMPLID    = $E_Emplid
  AND EMPL_RCD = #E_Empl_Rcd
  AND ERNCD     = $Temp_Erncd

end-SQL

end-procedure
!****************************************************************************
! UPDATE-ADDL-PAY-EFFDT                                                     *
! Updates Record Source ADDL_PAY_EFFDT                                      *
!****************************************************************************
begin-procedure UPDATE-ADDL-PAY-EFFDT

let $err-statement1 = 'CNTPAY01, Update Error - UPDATE-ADDL-PAY-EFFDT'
let $err-statement2 = 'Bind Varables: Employee '||$E_Emplid||', EMPL_RCD,'||
                      $Empl_Rcd||', Earn Code '||$Temp_Erncd||', Effdt '||
                      $Temp_Effdt||'    Key Fields: Record Source '||
                      $Temp_Rec_Source

begin-SQL on-error=Error-Display

UPDATE PS_ADDL_PAY_EFFDT
SET RECORD_SOURCE = $Temp_Rec_Source
WHERE EMPLID    = $E_Emplid
  AND EMPL_RCD = #E_Empl_Rcd
  AND ERNCD     = $Temp_Erncd
  AND EFFDT     = $Temp_Effdt

end-SQL

end-procedure
!****************************************************************************
! UPDATE-ADDL-PAY                                                           *
! Updates values of Goal_Amt, Goal_Bal, Oth_Pay, Addlpay_Reason,            *
! Pay_Period(1-5), and Record_Source                                        *
!****************************************************************************
begin-procedure UPDATE-ADDL-PAY(#Goal_Amt, #Goal_Bal, #Oth_Pay, #Oth_Hrs, $Effdt,
                                $Erncd, #Addl_Seq, $End_Dt, $Rec_Source, #SEPCHK)

let $SEPCHK = #SEPCHK
let $err-statement1 = 'CNTPAY01, Update-(), ADDL_PAY_DATA, Update error'
let $err-statement2 = 'Bind Variables: Employee '||$_E_Emplid||', EMPL_RCD '||
                       $_Empl_Rcd||', Earn Code '||$Erncd||', Effdt '||$Effdt||
                       ', Addl_Seq '||$_Addl_Seq||'   Key Values: '||
                       'DEPTID space'||
                       ', JOBCODE space'||
                       ', POSITION_NBR space'||
                       ', ACCT_CD space'||
                       ', GL_PAY_TYPE space'||
                       ', ADDL_PAY_SHIFT J'||
                       ', OTH_HRS '||$Oth_Hrs||
                       ', HOURLY_RT 0'||
                       ', OTH_PAY '||$Oth_Pay||
                       ', ADDLPAY_REASON C'||
                       ', SEPCHK'||$SEPCHK||
                       ', EARNINGS_END_DT null'||
                       ', GOAL_AMT '||$Goal_Amt||
                       ', GOAL_BAL '||$Goal_Bal||
                       ', OK_TO_PAY Y'||
                       ', DISABLE_DIR_DEP N'||
                       ', PRORATE_ADDL_PAY N'||
                       ', PRORATE_CUI_WEEKS Y'||
                       ', PAY_PERIOD1 Y'||
                       ', PAY_PERIOD2 '||$_Prd2||
                       ', PAY_PERIOD3 '||$_Prd3||
                       ', PAY_PERIOD4 '||$_Prd4||
                       ', PAY_PERIOD5 '||$_Prd5||
                       ', STATE space'||
                       ', LOCALITY space'||
                       ', TAX_PERIODS 1'||
                       ', TAX_METHOD A'||
                       ', ADDL_PAY_FREQUENCY P'||
                       ', PLAN_TYPE space'||
                       ', BUSINESS_UNIT space'||
                       ', COMP_RATECD space'||
                       ', RECORD_SOURCE '||$Rec_Source

begin-SQL on-error=Error-Display

UPDATE PS_ADDL_PAY_DATA

SET DEPTID         = ' ',
JOBCODE            = ' ',
POSITION_NBR       = ' ',
ACCT_CD            = ' ',
GL_PAY_TYPE        = ' ',
ADDL_PAY_SHIFT     = 'J',
OTH_HRS            = #Oth_Hrs,
HOURLY_RT          = 0,
OTH_PAY            = #Oth_Pay,
ADDLPAY_REASON     = 'C',
SEPCHK             = #SEPCHK,
EARNINGS_END_DT    = $End_Dt,
GOAL_AMT           = #Goal_Amt,
GOAL_BAL           = #Goal_Bal,
OK_TO_PAY          = 'Y',
DISABLE_DIR_DEP    = 'N',
PRORATE_ADDL_PAY   = 'N',
PRORATE_CUI_WEEKS  = 'Y',
PAY_PERIOD1        = 'Y',
PAY_PERIOD2        = $_Prd2,
PAY_PERIOD3        = $_Prd3,
PAY_PERIOD4        = $_Prd4,
PAY_PERIOD5        = $_Prd5,
STATE              = ' ',
LOCALITY           = ' ',
TAX_PERIODS        = 1,
TAX_METHOD         = 'A',
ADDL_PAY_FREQUENCY = 'P',
PLAN_TYPE          = ' ',
BUSINESS_UNIT      = ' ',
COMP_RATECD        = ' ',
RECORD_SOURCE      = $Rec_Source

WHERE EMPLID    = $_E_Emplid
  AND EMPL_RCD = #_E_Empl_Rcd
  AND ERNCD     = $Erncd
  AND EFFDT     = $Effdt
  AND ADDL_SEQ  = #Addl_Seq

end-SQL

end-procedure
!****************************************************************************
! DELETE-ADDL-PAY                                                           *
! Deletes Lump Sum Retro record from Table ADDL_PAY_DATA during update.     *
!****************************************************************************
begin-procedure DELETE-ADDL-PAY($Emplid, #Empl_Rcd, $Erncd, $Effdt, #Addl_Seq)

move #Empl_Rcd to $Empl_Rcd
move #Addl_Seq to $Addl_Seq
let $err-statement1 = 'CNTPAY01.SQR, Delete Error - DELETE-ADDL-PAY'
let $err-statement2 = 'Bind Variables: Employee '||$Emplid||', EMPL_RCD '||
                       $Empl_Rcd||', Earn Code '||$Erncd||
                      ', Effective Date '||$Effdt||', Addl Seq# '||$Addl_Seq

begin-SQL on-error=Error-Display

DELETE FROM PS_ADDL_PAY_DATA
WHERE EMPLID    = $Emplid
  AND EMPL_RCD = #Empl_Rcd
  AND ERNCD     = $Erncd
  AND EFFDT     = $Effdt
  AND ADDL_SEQ  = #Addl_Seq
end-SQL

end-procedure

!****************************************************************************
! UPDATE-CONTRACT-ADDL-SEQ                                                  *
! Updates ADDL_SEQ on Contract.                                             *
!****************************************************************************
begin-procedure UPDATE-CONTRACT-ADDL-SEQ

move #E_Empl_Rcd to $Empl_Rcd
move #Addl_Seq to $Addl_Pay_Addl_Seq
let $err-statement1 = 'CNTPAY01, Update Error - UPDATE-CONTRACT-ADDL-SEQ'
let $err-statement2 = 'Bind Varables: Employee '||$E_Emplid||', Empl_Rcd ,'||
                      $Empl_Rcd || ' Effdt '|| $Contract_Effdt ||'   Key Values: '||
                      'Addl Seq# '||$Addl_Seq

begin-SQL on-error=Error-Display
UPDATE PS_CONTRACT
SET ADDL_SEQ = #Addl_Pay_Addl_Seq
WHERE EMPLID = $E_Emplid
  AND EMPL_RCD = #E_Empl_Rcd
  AND EFFDT = $Contract_Effdt
end-SQL

end-procedure UPDATE-CONTRACT-ADDL-SEQ
!****************************************************************************
! UPDATE-PAYROLL                                                            *
! Updates Table PAY_LINE                                                    *
!****************************************************************************
begin-procedure UPDATE-PAYROLL

let $err-statement1 = 'CNTPAY01, Update Error - UPDATE PAYROLL'
let $err-statement2 = 'Bind Varables: Employee '||$E_Emplid||', Confirmed N,'||
                      ' Job_Change <> R, Manual_Check N    Key Fields: '||
                      'Job_Change R'
begin-SQL on-error=Error-Display

UPDATE PS_PAY_LINE

SET JOB_CHANGE = 'R'

WHERE EMPLID = $E_Emplid
  AND CONFIRMED = 'N'
  AND JOB_CHANGE <> 'R'
  AND MANUAL_CHECK = 'N'

end-SQL

end-procedure
!****************************************************************************
! COMPUTE-CONTRACT-DATES                                                    *
! Calculates the Before, During, and After contract begin and end dates and *
! calls Pay-Prds-Between for for each to determine the total pay periods.   *
!****************************************************************************
begin-procedure COMPUTE-CONTRACT-DATES

  let $BC_Start_Dt = $C_Payment_Begin_Dt

  do CONVERT-TO-DTU-DATE($C_Contract_Begin_Dt, $Temp_Dt)
  do DTU-SUBTRACT-DAYS($Temp_Dt, 1, $Temp_Dt2)
  do CONVERT-FROM-DTU-DATE($Temp_Dt2, $BC_End_Dt)

  do PAY-PRDS-BETWEEN($BC_Start_Dt, $BC_End_Dt, #BC_Pay_Prds)

  if #BC_Pay_Prds = 0

     let $BC_Start_Dt = ''
     let $BC_End_Dt   = ''
  end-if

  let $DC_Start_Dt = $C_Contract_Begin_Dt
  let $DC_End_Dt = $C_Contract_End_Dt

  do PAY-PRDS-BETWEEN($DC_Start_Dt, $DC_End_Dt, #DC_Pay_Prds)

  if #DC_Pay_Prds = 0
     let $DC_Start_Dt = ''
     let $DC_End_Dt   = ''
  end-if

  do CONVERT-TO-DTU-DATE($C_Contract_End_Dt, $Temp_Dt)
  do DTU-ADD-DAYS($Temp_Dt, 1, $Temp_Dt2)
  do CONVERT-FROM-DTU-DATE($Temp_Dt2, $AC_Start_Dt)
  let $AC_End_Dt   = $C_Payment_End_Dt

  do PAY-PRDS-BETWEEN($AC_Start_Dt, $AC_End_Dt, #AC_Pay_Prds)

  if #AC_Pay_Prds = 0
     let $AC_Start_Dt = ''
     let $AC_End_DT   = ''
  end-if

end-procedure
!****************************************************************************
! FIND-REMAINING-PERIODS                                                    *
! Calculates the Before, During, and After contract begin and end dates     *
! based on the Job's effective date. Call Pay-Prds-Between for each to      *
! determine the remaining pay period.                                       *
!****************************************************************************
begin-procedure FIND-REMAINING-PERIODS

  if $CMP_EffDt > $CMP_Payment_Begin_Dt

      let $BC_Start_Dt = $PAYC_Pay_Begin_Dt

      do CONVERT-TO-DTU-DATE($C_Contract_Begin_Dt, $Temp_Dt)
      do DTU-SUBTRACT-DAYS($Temp_Dt, 1, $Temp_Dt2)
      do CONVERT-FROM-DTU-DATE($Temp_Dt2, $BC_End_Dt)

      do PAY-PRDS-BETWEEN($BC_Start_Dt, $BC_End_Dt, #BC_Remain_Pay_Prds)
  else
      let #BC_Remain_Pay_Prds = #BC_Pay_Prds
  end-if

  if $CMP_Effdt > $CMP_Contract_Begin_Dt

      let $DC_Start_Dt = $PAYC_Pay_Begin_Dt
      let $DC_End_Dt = $C_Contract_End_Dt

      do PAY-PRDS-BETWEEN($DC_Start_Dt, $DC_End_Dt, #DC_Remain_Pay_Prds)
  else
      let #DC_Remain_Pay_Prds = #DC_Pay_Prds
  end-if

  if $CMP_Effdt > $CMP_Contract_End_Dt

      let $DC_Start_Dt = $PAYC_Pay_Begin_Dt
      let $DC_End_Dt = $C_Payment_End_Dt

      do PAY-PRDS-BETWEEN($DC_Start_Dt, $DC_End_Dt, #AC_Remain_Pay_Prds)
  else
      let #AC_Remain_Pay_Prds = #AC_Pay_Prds
  end-if

end-procedure
!****************************************************************************
! COMPUTE-REMAINING-PAY-PERIODS                                             *
! Calls Pay-Prds-Between with the proper dates to calculate the number of   *
! pay periods remaining in the current contract.                            *
!****************************************************************************
begin-procedure COMPUTE-REMAINING-PAY-PERIODS

  do FORMAT-DATETIME($CP_Pay_Begin_Dt, $Temp_CP_Begin_Dt, {DEFCMP},'','')

  if #BC_Pay_Prds > 0

     do FORMAT-DATETIME($BC_Start_Dt, $Temp_Start_Dt, {DEFCMP},'','')

     if $Temp_Start_dt > $Temp_CP_Begin_Dt

        do PAY-PRDS-BETWEEN($BC_Start_Dt, $BC_End_Dt, #BC_Pay_Prds_Remaining)
     else

        do PAY-PRDS-BETWEEN($CP_Pay_Begin_Dt, $BC_End_Dt,
                            #BC_Pay_Prds_Remaining)
     end-if
  else

     let #BC_Pay_Prds_Remaining = 0
  end-if

  if #DC_Pay_Prds > 0

     do FORMAT-DATETIME($DC_Start_Dt, $Temp_Start_Dt, {DEFCMP},'','')

     if $Temp_Start_dt > $Temp_CP_Begin_Dt

        do PAY-PRDS-BETWEEN($DC_Start_Dt, $DC_End_Dt, #DC_Pay_Prds_Remaining)
     else

        do PAY-PRDS-BETWEEN($CP_Pay_Begin_Dt, $DC_End_Dt,
                            #DC_Pay_Prds_Remaining)
     end-if
  else

     let #DC_Pay_Prds_Remaining = 0
  end-if

  if #AC_Pay_Prds > 0

     do FORMAT-DATETIME($AC_Start_Dt, $Temp_Start_Dt, {DEFCMP},'','')

     if $Temp_Start_dt > $Temp_CP_Begin_Dt

        do PAY-PRDS-BETWEEN($AC_Start_Dt, $AC_End_Dt, #AC_Pay_Prds_Remaining)
     else

        do PAY-PRDS-BETWEEN($CP_Pay_Begin_Dt, $AC_End_Dt,
                            #AC_Pay_Prds_Remaining)
     end-if
  else

     let #AC_Pay_Prds_Remaining = 0
  end-if

end-procedure
!****************************************************************************
! COMPUTE-CURRENT-PAY-PERIOD                                                *
! Computes the total contract pay periods in the current pay period         *
!****************************************************************************
begin-procedure COMPUTE-CURRENT-PAY-PERIOD

  do FORMAT-DATETIME($CP_Pay_Begin_Dt, $Temp_CP_Begin_Dt, {DEFCMP},'','')
  do FORMAT-DATETIME($CP_Pay_End_Dt, $Temp_CP_End_Dt, {DEFCMP},'','')
  do FORMAT-DATETIME($C_Contract_End_Dt, $Temp_Contract_End_Dt, {DEFCMP},'','')
  do FORMAT-DATETIME($C_Contract_Term_Dt, $Temp_Contract_Term_Dt, {DEFCMP},'','')
  move $CP_Pay_End_Dt to $save_CP_Pay_End_Dt
  if $Temp_Contract_Term_Dt < $Temp_Contract_End_Dt and      ! Contract terminates prematurely
     $Temp_Contract_Term_Dt < $Temp_CP_End_Dt
    move $Temp_Contract_Term_Dt to $Temp_CP_End_Dt
    move $C_Contract_Term_Dt to $CP_Pay_End_Dt
  end-if

  if #BC_Pay_Prds > 0

     do FORMAT-DATETIME($BC_Start_Dt, $Temp_Start_Dt, {DEFCMP},'','')
     do FORMAT-DATETIME($BC_End_Dt, $Temp_End_Dt, {DEFCMP},'','')

     if $Temp_Start_dt > $Temp_CP_Begin_Dt

        if $Temp_End_Dt < $Temp_CP_End_Dt

           do PAY-PRDS-BETWEEN($BC_Start_Dt, $BC_End_Dt,
                               #CP_Pay_Prds_Before)
        else

           do PAY-PRDS-BETWEEN($BC_Start_Dt, $CP_Pay_End_Dt,
                               #CP_Pay_Prds_Before)
        end-if
     else
        if $Temp_End_Dt < $Temp_CP_End_Dt

           do PAY-PRDS-BETWEEN($CP_Pay_Begin_Dt, $BC_End_Dt,
                               #CP_Pay_Prds_Before)
        else

           do PAY-PRDS-BETWEEN($CP_Pay_Begin_DT, $CP_Pay_End_Dt,
                               #CP_Pay_Prds_Before)
        end-if
     end-if
  else

     let #CP_Pay_Prds_Before = 0
  end-if

  if #DC_Pay_Prds > 0

     do FORMAT-DATETIME($DC_Start_Dt, $Temp_Start_Dt, {DEFCMP},'','')
     do FORMAT-DATETIME($DC_End_Dt, $Temp_End_Dt, {DEFCMP},'','')

     if $Temp_Start_dt > $Temp_CP_Begin_Dt

        if $Temp_End_Dt < $Temp_CP_End_Dt

           do PAY-PRDS-BETWEEN($DC_Start_Dt, $DC_End_Dt,
                               #CP_Pay_Prds_During)
        else

           do PAY-PRDS-BETWEEN($DC_Start_Dt, $CP_Pay_End_Dt,
                               #CP_Pay_Prds_During)
        end-if
     else
        if $Temp_End_Dt < $Temp_CP_End_Dt

           do PAY-PRDS-BETWEEN($CP_Pay_Begin_Dt, $DC_End_Dt,
                               #CP_Pay_Prds_During)
        else

           do PAY-PRDS-BETWEEN($CP_Pay_Begin_DT, $CP_Pay_End_Dt,
                               #CP_Pay_Prds_During)
        end-if
     end-if
  else

     let #CP_Pay_Prds_During = 0
  end-if

  if #AC_Pay_Prds > 0

     do FORMAT-DATETIME($AC_Start_Dt, $Temp_Start_Dt, {DEFCMP},'','')
     do FORMAT-DATETIME($AC_End_Dt, $Temp_End_Dt, {DEFCMP},'','')

     if $Temp_Start_dt > $Temp_CP_Begin_Dt

        if $Temp_End_Dt < $Temp_CP_End_Dt

           do PAY-PRDS-BETWEEN($AC_Start_Dt, $AC_End_Dt,
                               #CP_Pay_Prds_After)
        else

           do PAY-PRDS-BETWEEN($AC_Start_Dt, $CP_Pay_End_Dt,
                               #CP_Pay_Prds_After)
        end-if
     else
        if $Temp_End_Dt < $Temp_CP_End_Dt

           do PAY-PRDS-BETWEEN($CP_Pay_Begin_Dt, $AC_End_Dt,
                               #CP_Pay_Prds_After)
        else

           do PAY-PRDS-BETWEEN($CP_Pay_Begin_DT, $CP_Pay_End_Dt,
                               #CP_Pay_Prds_After)
        end-if
     end-if
  else

     let #CP_Pay_Prds_After = 0
  end-if

  move $save_CP_Pay_End_Dt to $CP_Pay_End_Dt

end-procedure
!****************************************************************************
! PAY-PRDS-BETWEEN                                                          *
! Calculates the total number of pay periods between the start and end date *
! passed to it.                                                             *
!****************************************************************************
begin-procedure PAY-PRDS-BETWEEN($Start_Date, $End_Date, :#Pay_Prds)

  let #Pay_Prds = 0

  do FORMAT-DATETIME($Start_Date, $Cnt_Start_Date, {DEFCMP},'','')
  do FORMAT-DATETIME($End_Date, $Pay_End_Date, {DEFCMP},'','')

  if $Cnt_Start_Date <= $Pay_End_Date
    do PAY-PRDS-BETWEEN-1($Start_Date, $End_Date, #Pay_Prds)
  end-if

end-procedure
!****************************************************************************
! PAY-PRDS-BETWEEN-1                                                        *
! Calculates the total number of pay periods between the start and end date *
! passed to it.  This routine is called if Start Date is less or equal to   *
! End Date.                                                                 *
!****************************************************************************
begin-procedure PAY-PRDS-BETWEEN-1($Start_Date, $End_Date, :#Pay_Prds)

  do CONVERT-TO-DTU-DATE($Start_Date, $DTU_Start_Date)
  do CONVERT-TO-DTU-DATE($End_Date, $DTU_End_Date)
  let $SQL_Company  = $_PD_Company
  let $SQL_Paygroup = $_PD_Paygroup

let $err-statement1 = 'CNTPAY01.SQR, Select Error- PAY-PRDS-BETWEEN-1'
let $err-statement2 = 'Bind Variables: Company '||$_PD_Company||', Paygroup '||
                       $_PD_Paygroup||', Period Begin Date '||
                       $Start_Date||', Period End Date '||$End_Date
begin-SELECT on-error=Error-Display
PAY_CAL1.PAY_BEGIN_DT
PAY_CAL1.PAY_END_DT

   do CONVERT-TO-DTU-DATE(&PAY_CAL1.PAY_BEGIN_DT, $DTU_Pay_Bgn_Dt)
   do CONVERT-TO-DTU-DATE(&PAY_CAL1.PAY_END_DT, $DTU_Pay_End_Dt)

   if $DTU_Start_Date > $DTU_Pay_Bgn_Dt

      if $DTU_Start_Date <= $DTU_Pay_End_Dt

         if $DTU_End_Date <= $DTU_Pay_End_Dt

            do WORKDAYS($Start_Date, $End_Date, $_PD_Work_Schedule, #Days)
            do WORKDAYS(&PAY_CAL1.PAY_BEGIN_DT, &PAY_CAL1.PAY_END_DT,
                        $_PD_Work_Schedule, #Pay_Days)

            let #Pay_Prds = #Pay_Prds + #Days / #Pay_Days
         else

            do WORKDAYS($Start_Date, &PAY_CAL1.PAY_END_DT, $_PD_Work_Schedule,
                        #Days)
            do WORKDAYS(&PAY_CAL1.PAY_BEGIN_DT, &PAY_CAL1.PAY_END_DT,
                        $_PD_Work_Schedule, #Pay_Days)

            let #Pay_Prds = #Pay_Prds + #Days / #Pay_Days
         end-if
      end-if
   else

      if $DTU_End_Date < $DTU_Pay_End_Dt

         if $DTU_End_Date >= $DTU_Pay_Bgn_Dt

            do WORKDAYS(&PAY_CAL1.PAY_BEGIN_DT, $End_Date, $_PD_Work_Schedule,
                        #Days)
            do WORKDAYS(&PAY_CAL1.PAY_BEGIN_DT, &PAY_CAL1.PAY_END_DT,
                        $_PD_Work_Schedule, #Pay_Days)

            let #Pay_Prds = #Pay_Prds + #Days / #Pay_Days
         end-if
      else

            add 1 to #Pay_Prds
      end-if
  end-if

FROM PS_PAY_CALENDAR PAY_CAL1
WHERE PAY_CAL1.COMPANY  = $SQL_Company
  AND PAY_CAL1.PAYGROUP = $SQL_Paygroup
  AND PAY_CAL1.PAY_OFF_CYCLE_CAL = 'N'
  AND (PAY_CAL1.PAY_END_DT BETWEEN $Start_Date AND $End_Date
   OR PAY_CAL1.PAY_BEGIN_DT BETWEEN $Start_Date AND $End_Date
   OR ($Start_Date BETWEEN PAY_CAL1.PAY_BEGIN_DT AND PAY_CAL1.PAY_END_DT
      AND $End_Date BETWEEN PAY_CAL1.PAY_BEGIN_DT AND PAY_CAL1.PAY_END_DT))

end-SELECT

end-procedure
!****************************************************************************
! INITIALIZE-ADDL-PAY                                                       *
! Initialize additional pay variables before processing                     *
!****************************************************************************
begin-procedure INITIALIZE-ADDL-PAY

  let #pne_Addl_Seq        = 1
  let #pne_Goal_Bal        = 0
  let #pne_Goal_Amt        = 0
  let #pne_Oth_Pay         = 0
  let #pne_Oth_Hrs         = 0
  let $pne_Earnings_End_Dt = ''
  let $pne_Record_Source   = ''
  let $pne_Effdt           = ''
  let $pne_Old_Effdt       = ''

  let #enp_Addl_Seq        = 1
  let #enp_Goal_Bal        = 0
  let #enp_Goal_Amt        = 0
  let #enp_Oth_Pay         = 0
  let #enp_Oth_Hrs         = 0
  let $enp_Earnings_End_Dt = ''
  let $enp_Record_Source   = ''
  let $enp_Effdt           = ''
  let $enp_Old_Effdt       = ''

  let #reg_Addl_Seq        = 1
  let #reg_Goal_Bal        = 0
  let #reg_Goal_Amt        = 0
  let #reg_Oth_Pay         = 0
  let #reg_Oth_Hrs         = 0
  let $reg_Earnings_End_Dt = ''
  let $reg_Record_Source   = ''
  let $reg_Effdt           = ''
  let $reg_Old_Effdt       = ''


end-procedure
!****************************************************************************
! VALIDATE-PREVIOUS-PAY-CALENDAR                                            *
! Checks the previous Pay Calendar to check if it has been Confirmed        *
! however will not check if first Pay Run, no previous Pay Calendar         *
!****************************************************************************
begin-procedure VALIDATE-PREVIOUS-PAY-CALENDAR

  Let  $Previous_Pay_Calendar_Found = 'N'
  Let  $Valid_Previous_Pay_Calendar = 'Y'

begin-SELECT
PAY_CAL_VAL.PAY_CONFIRM_RUN
PAY_CAL_VAL.PAY_END_DT

  Let  $Previous_Pay_Calendar_Found = 'Y'
  Let  $Previous_Pay_Confirm        = &PAY_CAL_VAL.PAY_CONFIRM_RUN
  Let  $Previous_Pay_End_Dt         = &PAY_CAL_VAL.PAY_END_DT

  if   $Previous_Pay_Confirm <> 'Y'

      Let     $Valid_Previous_Pay_Calendar = 'N'

      display ' '
      display '   Pay Calendar: ' noline
      display $PD_Paygroup        noline
      display ', '                noline
      display $CP_Pay_End_Dt      noline
      display ' not processed'
      display '   Confirm has not been completed for previous calendar'
      display '   Previous Pay End Date: ' noline
      display $Previous_Pay_End_Dt noline
      display ' '

  else

      Let      $Valid_Previous_Pay_Calendar = 'Y'

  end-if

FROM  PS_PAY_CALENDAR PAY_CAL_VAL
WHERE PAY_CAL_VAL.COMPANY    = $PD_Company
  AND PAY_CAL_VAL.PAYGROUP   = $PD_Paygroup
  AND PAY_CAL_VAL.PAY_OFF_CYCLE_CAL = 'N'
  AND PAY_CAL_VAL.RUN_ID    <> ' '
  AND PAY_CAL_VAL.PAY_END_DT = (SELECT MAX(PAY_CAL_X.PAY_END_DT)
                                  FROM PS_PAY_CALENDAR PAY_CAL_X
                                 WHERE PAY_CAL_X.COMPANY     = $PD_Company
                                   AND PAY_CAL_X.PAYGROUP    = $PD_Paygroup
                                   AND PAY_CAL_X.PAY_OFF_CYCLE_CAL = 'N'
                                   AND PAY_CAL_X.RUN_ID     <> ' '
                                   AND PAY_CAL_X.PAY_END_DT <= $CP_Pay_Begin_Dt)
end-SELECT

end-procedure VALIDATE-PREVIOUS-PAY-CALENDAR

!****************************************************************************
! START-PROCESSING                                                          *
! Displays status to screen when beginning a new process                    *
!****************************************************************************
begin-procedure START-PROCESSING

  do GET-CURRENT-DATETIME
  display ' '
  display ' '
  display $Indent noline
  display 'Started  Processing ' noline
  display $Processing noline
  display ' at ' noline
  display $SysDateTime

end-procedure
!****************************************************************************
! FINISH-PROCESSING                                                         *
! Displays Status to screen when completing a process                       *
!****************************************************************************
begin-procedure FINISH-PROCESSING

  do GET-CURRENT-DATETIME
  display ' '
  display $Indent noline
  display 'Finished Processing ' noline
  display $Processing noline
  display ' at ' noline
  display $SysDateTime

end-procedure
!****************************************************************************
! DELETE-RUN-CONTROL                                                        *
! Deletes run control information from run control table.                   *
!****************************************************************************
begin-procedure DELETE-RUN-CONTROL

begin-SQL

DELETE FROM PS_RC_PAYINIT
WHERE OPRID       = $Prcs_OprID
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL

end-procedure
!****************************************************************************
! WRAPUP                                                                    *
! This paragraph ends the report process and updates the status of the      *
! job in the process scheduler.                                             *
!****************************************************************************
begin-procedure WRAPUP

  do DELETE-RUN-CONTROL
  do RESET
  do STDAPI-TERM

end-procedure

!****************************************************************************
! PRINT-ARRAY                                                               *
!****************************************************************************
begin-procedure Print-ARRAY

  let #wrk_idx = 1

  while #wrk_idx <= #lst_idx

      get  $Prt_Effdt
           $Prt_Lump_Sum_Pay
           #Prt_Adjust_Amt
           #Prt_Prorate_Amt
           #Prt_BC_PayPrd
           #Prt_DC_PayPrd
           #Prt_AC_PayPrd
           #Prt_BC_Goal_Amt
           #Prt_DC_Goal_Amt
           #Prt_AC_Goal_Amt
           #Prt_BC_Passed_PayPrd
           #Prt_DC_Passed_PayPrd
           #Prt_AC_Passed_PayPrd
           #Prt_PNE_Retro_Amt
           #Prt_CRG_Retro_Amt
           #Prt_ENP_Retro_Amt
      from Wrk_Comp(#wrk_idx)
           Wrk_Effdt
           Wrk_Lump_Sum_Pay
           Wrk_Adjust_Amt
           Wrk_Prorate_Amt
           Wrk_BC_PayPrd
           Wrk_DC_PayPrd
           Wrk_AC_PayPrd
           Wrk_BC_Goal_Amt
           Wrk_DC_Goal_Amt
           Wrk_AC_Goal_Amt
           Wrk_BC_Passed_PayPrd
           Wrk_DC_Passed_PayPrd
           Wrk_AC_Passed_PayPrd
           Wrk_PNE_Retro_Amt
           Wrk_CRG_Retro_Amt
           Wrk_ENP_Retro_Amt

      move #E_Empl_Rcd      to $Empl_Rcd
      move #Prt_Adjust_Amt  to $Prt_Adjust_Amt
      move #Prt_Prorate_Amt to $Prt_Prorate_Amt
      move #Prt_BC_PayPrd   to $Prt_BC_PayPrd
      move #Prt_DC_PayPrd   to $Prt_DC_PayPrd
      move #Prt_AC_PayPrd   to $Prt_AC_PayPrd
      move #Prt_BC_Goal_Amt to $Prt_BC_Goal_Amt
      move #Prt_DC_Goal_Amt to $Prt_DC_Goal_Amt
      move #Prt_AC_Goal_Amt to $Prt_AC_Goal_Amt

      move #Prt_BC_Passed_PayPrd to $Prt_BC_Passed_PayPrd
      move #Prt_DC_Passed_PayPrd to $Prt_DC_Passed_PayPrd
      move #Prt_AC_Passed_PayPrd to $Prt_AC_Passed_PayPrd

      move #Prt_PNE_Retro_Amt  to $Prt_PNE_Retro_Amt
      move #Prt_CRG_Retro_Amt  to $Prt_CRG_Retro_Amt
      move #Prt_ENP_Retro_Amt  to $Prt_ENP_Retro_Amt

      let $DebugMsg = 'Debug : '|| $E_Emplid || ', '
                                || $Empl_Rcd || ', '
                                || $Prt_Effdt || ', '
                                || $Prt_Lump_Sum_Pay || ', '
                                || $Prt_Adjust_Amt  || ', '
                                || $Prt_Prorate_Amt || ', '
                                || $Prt_BC_PayPrd   || ', '
                                || $Prt_DC_PayPrd   || ', '
                                || $Prt_AC_PayPrd   || ', '
                                || $Prt_BC_Goal_Amt || ', '
                                || $Prt_DC_Goal_Amt || ', '
                                || $Prt_AC_Goal_Amt
      display $DebugMsg

      let $DebugMsg = 'Retro : ' || $Prt_BC_Passed_PayPrd || ', '
                                 || $Prt_DC_Passed_PayPrd || ', '
                                 || $Prt_AC_Passed_PayPrd || ', '
                                 || $Prt_PNE_Retro_Amt || ', '
                                 || $Prt_CRG_Retro_Amt || ', '
                                 || $Prt_ENP_Retro_Amt

      display $DebugMsg

      add 1 to #wrk_idx
  end-while

end-procedure

!***********************************************************************
! SQCs                                                                 *
!***********************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stderror.sqc'  !Routine for error display
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'datewrk.sqc'   !Routines for working with dates
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get run control parameters.  This will change
                         !depending on the type of report you are running
                         !and which type of parameters are being used to
                         !run the report.
