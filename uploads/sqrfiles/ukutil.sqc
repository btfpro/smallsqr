!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      
!          $Date:  2006/07/19:15:47:48                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************
!-----------------------------------------------------------------------
! Swap PeopleSoft name format for general format
!-----------------------------------------------------------------------
begin-procedure UnFormatName($NameIn, :$NameOut)

   let #npos = instr($NameIn,',',1)
   let #length = length($NameIn)
   if #npos > 0
      let $NameOut = {ps-substr}($NameIn,#npos + 1,#length-#npos) || ' ' || -
                     {ps-substr}($NameIn,1,#npos - 1)
   end-if

end-procedure UnFormatName


!-----------------------------------------------------------------------
! Location Information
!-----------------------------------------------------------------------
begin-procedure GetLocationName($LocCodeIn, :$DescOut)

BEGIN-SELECT
A.DESCR
FROM  PS_LOCATION_TBL A
WHERE A.LOCATION = $LocCodeIn
  AND A.EFFDT = (SELECT MAX(B.EFFDT)
                 FROM   PS_LOCATION_TBL B
                 WHERE  B.LOCATION = A.LOCATION
                   AND  B.EFFDT <= $_AsOfToday)
end-SELECT

   let $DescOut = nvl(&A.DESCR, ' ')

end-procedure GetLocationName


!-----------------------------------------------------------------------
! External Scheme Information
!-----------------------------------------------------------------------
begin-procedure GetExternalScheme($CodeIn, :$TypeOut, :$DescOut)

BEGIN-SELECT
A.DESCR
A.SCHEME_TYPE_CD_UK
FROM  PS_EXT_SCHM_TBL_UK A
WHERE A.EXT_SCHEME_CD_UK  = $CodeIn
  AND A.EFFDT = (SELECT MAX(B.EFFDT)
                 FROM   PS_EXT_SCHM_TBL_UK  B
                 WHERE  B.EXT_SCHEME_CD_UK  = A.EXT_SCHEME_CD_UK
                   AND  B.EFFDT <= $_AsOfToday)
END-SELECT

   let $TypeOut = nvl(&A.SCHEME_TYPE_CD_UK, ' ')
   let $DescOut = nvl(&A.DESCR, ' ')

end-procedure GetExternalScheme


!-----------------------------------------------------------------------
! State name
!-----------------------------------------------------------------------
begin-procedure GetStateName($CountryIn, $StateIn, :$DescOut)

BEGIN-SELECT
A.DESCR
   FROM  PS_STATE_NAMES_TBL A
   WHERE A.COUNTRY = $CountryIn
   AND   A.STATE   = $StateIn
END-SELECT

   let $DescOut = nvl(&A.DESCR, ' ')

end-procedure GetStateName


!-----------------------------------------------------------------------
! Country name
!-----------------------------------------------------------------------
begin-procedure GetCountryName($CountryIn, :$DescOut)

BEGIN-SELECT
A.DESCR
   FROM  PS_COUNTRY_TBL A
   WHERE A.COUNTRY = $CountryIn
END-SELECT

   let $DescOut = nvl(&A.DESCR, ' ')

end-procedure GetCountryName


!-----------------------------------------------------------------------
! Get the current database platform
!-----------------------------------------------------------------------
begin-procedure ukGetPlatformName(:$Descr)

   let $Descr = 'Unknown platform'

#ifdef DB2
   let $Descr = 'DB2 on MVS'
#endif
#ifdef DB2400
   let $Descr = 'DB2 on AS/400'
#endif
#ifdef DB2UNIX
   let $Descr = 'DB2 on UNIX'
#endif
#ifdef INFORMIX
   let $Descr = 'Informix'
#endif
#ifdef MICROSOFT
   let $Descr = 'Microsoft SQL Server'
#endif
#ifdef ORACLE
   let $Descr = 'Oracle'
#endif
#ifdef SQLBASE
   let $Descr = 'Centura SQLBase'
#endif
#ifdef SYBASE
   let $Descr = 'Sybase'
#endif

end-procedure


!-----------------------------------------------------------------------
! Return a time in HH:MM:SS (24Hr) format assuming that $TimeIn has been
! obtained via something like {TimeOut-Prefix}Time{TimeOut-Suffix}
!-----------------------------------------------------------------------
begin-procedure ukMakeTimeString24($TimeIn,:$TimeOut)

   let $HH = '00'
   let $MM = '00'
   let $SS = '00'

#ifdef DB2
   let $HH = {ps-substr}($TimeIn,1,2)
   let $MM = {ps-substr}($TimeIn,4,2)
   let $SS = {ps-substr}($TimeIn,7,2)
#endif
#ifdef DB2400
   let $HH = {ps-substr}($TimeIn,1,2)
   let $MM = {ps-substr}($TimeIn,4,2)
   let $SS = {ps-substr}($TimeIn,7,2)
#endif
#ifdef DB2UNIX
   let $HH = {ps-substr}($TimeIn,1,2)
   let $MM = {ps-substr}($TimeIn,4,2)
   let $SS = {ps-substr}($TimeIn,7,2)
#endif
#ifdef INFORMIX
   let $HH = {ps-substr}($TimeIn,1,2)
   let $MM = {ps-substr}($TimeIn,4,2)
   let $SS = {ps-substr}($TimeIn,7,2)
#endif
#ifdef MICROSOFT
   let $HH = {ps-substr}($TimeIn,12,2)
   let $MM = {ps-substr}($TimeIn,15,2)
   let $SS = {ps-substr}($TimeIn,18,2)
#endif
#ifdef ORACLE
   let $HH = {ps-substr}($TimeIn,1,2)
   let $MM = {ps-substr}($TimeIn,4,2)
   let $SS = {ps-substr}($TimeIn,7,2)
   let $PM = {ps-substr}($TimeIn,10,2)
   if $PM = 'PM'
      let #HH = to_number($HH) + 12
      let $HH = to_char(#HH)
   end-if
#endif
#ifdef SQLBASE
   let $HH = {ps-substr}($TimeIn,1,2)
   let $MM = {ps-substr}($TimeIn,4,2)
   let $SS = {ps-substr}($TimeIn,7,2)
#endif
#ifdef SYBASE
   let $HH = {ps-substr}($TimeIn,13,2)
   let $MM = {ps-substr}($TimeIn,16,2)
   let $SS = {ps-substr}($TimeIn,19,2)
   let $PM = {ps-substr}($TimeIn,25,2)
   if $PM = 'PM'
      let #HH = to_number($HH) + 12
      let $HH = to_char(#HH)
   end-if
#endif

   let $HH = edit($HH,'00')
   let $MM = edit($MM,'00')
   let $SS = edit($SS,'00')

   let $TimeOut = $HH || ':' || $MM || ':' || $SS

end-procedure


!-----------------------------------------------------------------------
! Return a time in HH:MM:SS AM(12Hr) format assuming that $TimeIn has been
! obtained via something like {TimeOut-Prefix}Time{TimeOut-Suffix}
!-----------------------------------------------------------------------
begin-procedure ukMakeTimeString12($TimeIn,:$TimeOut)

   do ukMakeTimeString24($TimeIn,$Time)

   let $HH = {ps-substr}($Time,1,2)
   let $MM = {ps-substr}($Time,4,2)
   let $SS = {ps-substr}($Time,7,2)

   let #HH = to_number($HH)
   if #HH > 12
      let #HH = #HH - 12
      let $HH = to_char(#HH)
      let $PM = 'PM'
   else
      let $PM = 'AM'
   end-if

   let $HH = edit($HH,'00')
   let $MM = edit($MM,'00')
   let $SS = edit($SS,'00')

   let $TimeOut = $HH || ':' || $MM || ':' || $SS || ' ' || $PM

end-procedure


!-----------------------------------------------------------------------
! Return a date in DD/MM/YYYY format assuming that $DateIn has been
! obtained via something like {DateOut-Prefix}Date{DateOut-Suffix}
!-----------------------------------------------------------------------
begin-procedure ukMakeDateString($DateIn,:$DateOut)

   let $YY = '0000'
   let $MM = '00'
   let $MS = 'XX'
   let $DD = '00'

#ifdef DB2
   let $YY = {ps-substr}($DateIn,1,4)
   let $MM = {ps-substr}($DateIn,6,2)
   let $DD = {ps-substr}($DateIn,9,2)
#endif
#ifdef DB2400
   let $YY = {ps-substr}($DateIn,1,4)
   let $MM = {ps-substr}($DateIn,6,2)
   let $DD = {ps-substr}($DateIn,9,2)
#endif
#ifdef DB2UNIX
   let $YY = {ps-substr}($DateIn,1,4)
   let $MM = {ps-substr}($DateIn,6,2)
   let $DD = {ps-substr}($DateIn,9,2)
#endif
#ifdef INFORMIX
   let $YY = {ps-substr}($DateIn,1,4)
   let $MM = {ps-substr}($DateIn,6,2)
   let $DD = {ps-substr}($DateIn,9,2)
#endif
#ifdef MICROSOFT
   let $YY = {ps-substr}($DateIn,1,4)
   let $MM = {ps-substr}($DateIn,6,2)
   let $DD = {ps-substr}($DateIn,9,2)
#endif
#ifdef ORACLE
   let $YY = {ps-substr}($DateIn,8,4)
   let $MS = upper({ps-substr}($DateIn,4,3))
   let $DD = {ps-substr}($DateIn,1,2)
#endif
#ifdef SQLBASE
   let $YY = {ps-substr}($DateIn,1,4)
   let $MM = {ps-substr}($DateIn,6,2)
   let $DD = {ps-substr}($DateIn,9,2)
#endif
#ifdef SYBASE
   let $YY = {ps-substr}($DateIn,8,4)
   let $MS = upper({ps-substr}($DateIn,1,3))
   let $DD = {ps-substr}($DateIn,5,2)
#endif

   ! compensate for descriptive month names...
   evaluate $MS
      when = 'JAN'
         let $MM = '01'
         break
      when = 'FEB'
         let $MM = '02'
         break
      when = 'MAR'
         let $MM = '03'
         break
      when = 'APR'
         let $MM = '04'
         break
      when = 'MAY'
         let $MM = '05'
         break
      when = 'JUN'
         let $MM = '06'
         break
      when = 'JUL'
         let $MM = '07'
         break
      when = 'AUG'
         let $MM = '08'
         break
      when = 'SEP'
         let $MM = '09'
         break
      when = 'OCT'
         let $MM = '10'
         break
      when = 'NOV'
         let $MM = '11'
         break
      when = 'DEC'
         let $MM = '12'
         break
   end-evaluate

   let $YY = edit($YY,'0000')
   let $MM = edit($MM,'00')
   let $DD = edit($DD,'00')

   let $DateOut = $DD || '/' || $MM || '/' || $YY

end-procedure


!-----------------------------------------------------------------------
! Debugging helper function
!-----------------------------------------------------------------------
begin-procedure ukDisplay($VarIn)

   display '['    NOLINE
   display $VarIn NOLINE
   display ']'

end-procedure

