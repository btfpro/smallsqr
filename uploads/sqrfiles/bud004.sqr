!**************************************************
!  BUD004 :  FISCAL YEAR BUDGET REPORT            *
!**************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
! Report Description:  Based on input parameters of DeptId and Fiscal  *
!                      Year this report selects and displays the data  *
!                      associated with a department and its budget     *
!                      levels for taxes, deductions, earnings and      *
!                      actuals to date.                                *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:11:20:59                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!    Revision Date: 09/27/2000  - Adjust layout not to exceed 182      *
!                   HP999 Retro - Accomodate maximum sequence nbr      *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!***********************************************************************

#include 'setenv.sqc' !set environment
#define GETVAL Y
#include 'setup32.sqc'   !Landscape Setup
#include 'paycfprt.sqc'!Print ChartField functions

begin-report

  do HOUSEKEEPING
  do MAINLINE
  do WRAPUP

end-report

begin-heading 4
  let $ReportTitle2 =  $REPORT_TITLE2A||' '||$Fiscal_Year||' '||      !F-LPARKER-125 (CAMI)
                       $REPORT_TITLE2B                                !F-LPARKER-125 (CAMI)
  #Include 'stdhtr20.sqc'                                             !F-LPARKER-125 (CAMI)
end-heading


!***********************************************************************
! F-LPARKER-125 (CAMI)                                                 *
! Read language-dependent text from the database using BUD004          *
! program id.                                                          *
!***********************************************************************
begin-procedure REPORT-TRANSLATION

  let $language_cd = $PRCS_LANGUAGE_CD
  do Init_Report_Translation($ReportID,$Language_Cd)

  do Get_Field_Information ('BUD004', 'ACCT_CD',          $BUD004_ACCT_CD,     #DW)
  do Get_Field_Information ('BUD004', 'ACCOUNT',          $BUD004_ACCOUNT,     #DW)
  do Get_Field_Information ('BUD004', 'ACTUALS',          $BUD004_ACTUALS,     #DW)
  do Get_Field_Information ('BUD004', 'ACTUALS_HDG',      $BUD004_ACTUALS_HDG, #DW)
  do Get_Field_Information ('BUD004', 'AFFIL',            $BUD004_AFFIL,       #DW)
  do Get_Field_Information ('BUD004', 'AFFILIATE',        $BUD004_AFFILIATE,   #DW)
  do Get_Field_Information ('BUD004', 'ALL_CAP',          $BUD004_ALL_CAP,     #DW)
  do Get_Field_Information ('BUD004', 'ALT_ACCT',         $BUD004_ALT_ACCT,    #DW)
  do Get_Field_Information ('BUD004', 'AMOUNT',           $BUD004_AMOUNT,      #DW)
  do Get_Field_Information ('BUD004', 'BUDGET_LEVEL_HDG', $BUD004_BDGT_LVL,    #DW)
  do Get_Field_Information ('BUD004', 'BUDGET_REF',       $BUD004_BUDGET_REF,  #DW)
  do Get_Field_Information ('BUD004', 'CHARTFIELD1',      $BUD004_CHARTFIELD1, #DW)
  do Get_Field_Information ('BUD004', 'CHARTFIELD2',      $BUD004_CHARTFIELD2, #DW)
  do Get_Field_Information ('BUD004', 'CHARTFIELD3',      $BUD004_CHARTFIELD3, #DW)
  do Get_Field_Information ('BUD004', 'CLASS_CAP',        $BUD004_CLASS_CAP,   #DW)
  do Get_Field_Information ('BUD004', 'CLASS',            $BUD004_CLASS,       #DW)
  do Get_Field_Information ('BUD004', 'CTX_CLASS',        $BUD004_CTX_CLASS,   #DW)
  do Get_Field_Information ('BUD004', 'CTX_DISTRIB',      $BUD004_CTX_DISTRB,  #DW)
  do Get_Field_Information ('BUD004', 'DED_BDGT_CAP',     $BUD004_DED_BDGT_CAP,#DW)
  do Get_Field_Information ('BUD004', 'DED_DISTRIB',      $BUD004_DED_DISTRB,  #DW)
  do Get_Field_Information ('BUD004', 'DEDCD',            $BUD004_DEDCD,       #DW)
  do Get_Field_Information ('BUD004', 'DEDCLASS',         $BUD004_DEDCLASS,    #DW)
  do Get_Field_Information ('BUD004', 'DEL_ERROR',        $BUD004_DEL_ERROR,   #DW)
  do Get_Field_Information ('BUD004', 'DEPT',             $BUD004_DEPT,        #DW)
  do Get_Field_Information ('BUD004', 'DEPTID',           $BUD004_DEPTID,      #DW)
  do Get_Field_Information ('BUD004', 'DEPTID_HDG',       $BUD004_DEPTID_HDG,  #DW)
  do Get_Field_Information ('BUD004', 'EMPLID',           $BUD004_EMPLID,      #DW)
  do Get_Field_Information ('BUD004', 'EMPL_RCD',         $BUD004_EMPL_RCD,    #DW)
  do Get_Field_Information ('BUD004', 'ENCUMBERED',       $BUD004_ENCUMBERED,  #DW)
  do Get_Field_Information ('BUD004', 'ERN_BDGT_CAP',     $BUD004_ERN_BDGT_CAP,#DW)
  do Get_Field_Information ('BUD004', 'ERNCD',            $BUD004_ERNCD,       #DW)
  do Get_Field_Information ('BUD004', 'ERNS_DISTRIB',     $BUD004_ERNS_DISTRB, #DW)
  do Get_Field_Information ('BUD004', 'FTE_ACTUAL',       $BUD004_FTE_ACTUAL,  #DW)
  do Get_Field_Information ('BUD004', 'FUND',             $BUD004_FUND,        #DW)
  do Get_Field_Information ('BUD004', 'FUND_CD',          $BUD004_FUND_CD,     #DW)
  do Get_Field_Information ('BUD004', 'JOBCODE',          $BUD004_JOBCODE,     #DW)
  do Get_Field_Information ('BUD004', 'LOCALITY',         $BUD004_LOCALITY,    #DW)
  do Get_Field_Information ('BUD004', 'KEY_VAL_HDG',      $BUD004_KEY_VALUES,  #DW)
  do Get_Field_Information ('BUD004', 'NAME_HDG',         $BUD004_NAME_HDG,    #DW)
  do Get_Field_Information ('BUD004', 'NO_RECS',          $BUD004_NO_RECS,     #DW)
  do Get_Field_Information ('BUD004', 'NOT_BUDDEPT',      $BUD004_NOT_BUDDEPT, #DW)
  do Get_Field_Information ('BUD004', 'OPR_UNIT',         $BUD004_OPR_UNIT,    #DW)
  do Get_Field_Information ('BUD004', 'OVERALL_BDGT_CAP', $BUD004_OVERALL_BDGT,#DW)
  do Get_Field_Information ('BUD004', 'PERCENT',          $BUD004_PERCENT,     #DW)
  do Get_Field_Information ('BUD004', 'POSITION_NBR',     $BUD004_POSITION_NBR,#DW)
  do Get_Field_Information ('BUD004', 'POSITION_POOL_ID', $BUD004_POOL_ID,     #DW)
  do Get_Field_Information ('BUD004', 'PRODUCT',          $BUD004_PRODUCT,     #DW)
  do Get_Field_Information ('BUD004', 'PROG',             $BUD004_PROG,        #DW)
  do Get_Field_Information ('BUD004', 'PROG_CD',          $BUD004_PROG_CD,     #DW)
  do Get_Field_Information ('BUD004', 'PROJECT',          $BUD004_PROJECT,     #DW)
  do Get_Field_Information ('BUD004', 'PROVINCE',         $BUD004_PROVINCE,    #DW)
  do Get_Field_Information ('BUD004', 'REPORT_TITLE',     $REPORTTITLE,        #DW)
  do Get_Field_Information ('BUD004', 'REPORT_TITLE2A',   $REPORT_TITLE2A,     #DW)
  do Get_Field_Information ('BUD004', 'REPORT_TITLE2B',   $REPORT_TITLE2B,     #DW)
  do Get_Field_Information ('BUD004', 'SEQ#',             $BUD004_SEQ,         #DW)
  do Get_Field_Information ('BUD004', 'SETID',            $BUD004_SETID,       #DW)
  do Get_Field_Information ('BUD004', 'SETID_JOBCODE',    $BUD004_SETID_JOBCD, #DW)
  do Get_Field_Information ('BUD004', 'STATE',            $BUD004_STATE,       #DW)
  do Get_Field_Information ('BUD004', 'TAX_BDGT_CAP',     $BUD004_TAX_BDGT_CAP,#DW)
  do Get_Field_Information ('BUD004', 'TAX_CLASS',        $BUD004_TAX_CLASS,   #DW)
  do Get_Field_Information ('BUD004', 'TAX_DISTRIB',      $BUD004_TAX_DISTRB,  #DW)
  do Get_Field_Information ('BUD004', 'TEMP_CAP',         $BUD004_TEMP_CAP,    #DW)
  do Get_Field_Information ('BUD004', 'TOTAL',            $BUD004_TOTAL,       #DW)
  do Get_Field_Information ('BUD004', 'UNCLASS_CAP',      $BUD004_UNCLASS_CAP, #DW)

  uppercase $BUD004_BUDGET_REF
  uppercase $BUD004_CHARTFIELD1
  uppercase $BUD004_CHARTFIELD2
  uppercase $BUD004_CHARTFIELD3

end-procedure

!***********************************************************************
! HOUSEKEEPING                                                         *
! This procedure performs the application initializations.  Formats    *
! variables for use.  Calls the procedures to get input parameters.    *
!***********************************************************************
begin-procedure HOUSEKEEPING

  do INIT-DATETIME
  do INIT-NUMBER
  do GET-CURRENT-DATETIME
  do FORMAT-DATETIME($AsOfToday,$Curr,{DEFCMP},'','')
  do STDAPI-INIT
  do SELECT-PARAMETERS
  do EDIT-DEPTID
  do EDIT-FISCAL-YEAR

  move 'BUD004' to $ReportID                                          !F-LPARKER-125 (CAMI)
  do REPORT-TRANSLATION                                               !F-LPARKER-125 (CAMI)

  !------------------------------------------------------------------------------------------------------!
  ! Dynamic ChartFields variables used by the Common CF Print SQC                                        !
  !------------------------------------------------------------------------------------------------------!
  let $DynCF_ChartFields_Option = 'A'        !CF Configuration - 'P' = Pending Changes, 'A' - Current
  let $DynCF_LabelPosn_Option = 'T'          !ChartField Label Position - 'T' = above, 'S' = side
  let $DynCF_LabelUnderLine = 'N'            !ChartField Label Underline - 'Y' = Print, 'N' = Suppress
  let $DynCF_Alignment_Option = 'L'          !ChartField Label Alignment - 'L' = Left, 'R' = Right, 'C' = Center
  let $DynCF_CF_Headings = 'N'               !ChartField Label Heading - 'Y' = Print, 'N' = Suppress
  let $DynCF_LabelName_Option = 'S'          !ChartField Label - 'L' = LongName, 'S' = ShortName
  let $DynCF_Include_Affiliate = 'Y'         !Include Affiliate - 'Y' = Yes, 'N' = No
  let $DynCF_LanguageCd = $language_cd       !ChartField Language Code
  let #DynCF_StrCol = 10                     !ChartField Starting Column
  let #DynCF_EndCol = 152                    !ChartField Ending Column

  do Create-CF-Array
  do Add-to-Exclude-CF-List ('ACCOUNT')
  do Build-CF-Array

  let #StrLine    = 1
  !------------------------------------------------------------------------------------------------------!
  ! End of Dynamic ChartFields Variables setup                                                           !
  !------------------------------------------------------------------------------------------------------!

   let #MaxLines = 58       ! these are the number of lines
                            ! in landscape mode

  #define col1  8           !
  #define col2  17
  #define col3  29
  #define col4  41          !SEQ#
  #define col5  47          !ACCOUNT CODE

  #define col6  10          !DEPTID
  #define col7  23          !PROJECT ID
  #define col8  41          !PRODUCT
  #define col9  50          !FUND CODE
  #define col10 59          !PROGRAM ID
  #define col11 68          !CLASS FIELD
  #define col12 75          !AFFILIATE
  #define col13 86          !OPERATING UNIT
  #define col14 96          !ALT ACCOUNT
  #define col14A 107        !BUDGET_REF
  #define col14B 118        !CHARTFIELD1
  #define col14C 130        !CHARTFIELD2
  #define col14D 142        !CHARTFIELD3
  #define col15 154         !AMOUNT
  #define col15A 161        !AMOUNT HEADING
  #define col16 169         !PERCENT


  #define colA1 8           !ACCOUNT CODE
  #define colA12 113        !ENCUMBERED AMOUNT
  #define colA13 132        !ACTUALS AMOUNT
  #define colA14 151        !TOTAL

  #define colA2 10          !DEPTID
  #define colA3 23          !ACCOUNT
  #define colA4 35          !PROJECT ID
  #define colA5 52          !PRODUCT
  #define colA6 60          !FUND CODE
  #define colA7 67          !PROGRAM ID
  #define colA8 74          !CLASS FIELD
  #define colA9 81          !AFFILIATE
  #define colA10 88         !OPERATING UNIT
  #define colA11 98         !ALT ACCOUNT
  #define colA11A 109       !BUDGET_REF
  #define colA11B 121       !CHARTFIELD1
  #define colA11C 133       !CHARTFIELD2
  #define colA11D 146       !CHARTFIELD3

  #define colB11 120        !ENCUMBERED AMOUNT HEADING
  #define colB12 142        !ACTUALS AMOUNT HEADING
  #define colB13 167        !TOTAL HEADING

end-procedure HOUSEKEEPING

!***********************************************************************
!GET-VALUES                                                            *
!***********************************************************************
begin-procedure Get-Values

        do GET-FISCALYEAR

        do GET-SETID

        do GET-DEPTID-NO-EDIT

end-procedure Get-Values

!***********************************************************************
! MAINLINE                                                             *
! This procedure is the main processing paragraph.  It performs        *
! application specific record processing.                              *
!***********************************************************************
begin-procedure MAINLINE

  let $First_Time = 'Y'
  let $Record_Found = 'N'

  if $AsOfDate = ''  !if no As-Of-Date is specified, default to Today
      move $AsOfToday to $AsOfDate
  end-if

begin-SELECT
DT.SETID
DT.DEPTID
DT.BUDGET_DEPTID

   if $First_Time = 'N'
      NEW-PAGE

   else
      let $First_Time = 'N'
   end-if

   print ''            (+1,,)
   print $BUD004_SETID (+1,1,)                                         !F-LPARKER-125 (CAMI)
   print $SetID        (,+1,)
   print $BUD004_DEPT  (+1,1,)                                         !F-LPARKER-125 (CAMI)
   print &DT.Deptid    (,+1,)
   MOVE &DT.DEPTID TO $DeptId
   MOVE &DT.DEPTID TO $Proc_DeptId
   do Get-Department-Name-With-SetID
   print $DeptName     (,+2,)

   let $First_Time_Budget = 'Y'
   let $Record_Found = 'Y'

   if &DT.DEPTID <> &DT.BUDGET_DEPTID
      print $BUD004_NOT_BUDDEPT (+3,5,)
   else
      do PROCESS-BUDGET-DEPARTMENT
   end-if

FROM PS_DEPT_TBL DT
WHERE DT.SETID = $SetID
  AND DT.DEPTID LIKE $Deptid
  AND DT.EFFDT = (SELECT MAX(DT1.EFFDT) FROM PS_DEPT_TBL DT1
                  WHERE DT1.SETID = DT.SETID
                    AND DT1.DEPTID = DT.DEPTID
                    AND DT1.EFFDT <= $AsOfDate)
  AND DT.EFF_STATUS = 'A'
ORDER BY DT.SETID, DT.DEPTID
end-SELECT

end-procedure MAINLINE


!***********************************************************************
! PROCESS-BUDGET-DEPARTMENT                                            *
!***********************************************************************
begin-procedure PROCESS-BUDGET-DEPARTMENT

begin-SELECT
DEP.SETID
DEP.DEPTID
DEP.FISCAL_YEAR
DEP.BUDGET_CAP_INDC

    do PROCESS-DEPARTMENT

FROM PS_DEPT_BUDGET_DT DEP
WHERE DEP.FISCAL_YEAR = #FiscalYear
    AND DEP.SETID = $SetID
    AND DEP.DEPTID = $Proc_Deptid
end-SELECT

end-procedure PROCESS-BUDGET-DEPARTMENT

!***********************************************************************
!PROCESS-DEPARTMENT                                                    *
!***********************************************************************
begin-procedure PROCESS-DEPARTMENT

do DEPARTMENT-FTE

begin-SELECT
DEPTB.SETID
DEPTB.DEPTID
DEPTB.EFFDT
DEPTB.POSITION_POOL_ID
DEPTB.SETID_JOBCODE
DEPTB.JOBCODE
DEPTB.POSITION_NBR
DEPTB.EMPLID
DEPTB.EMPL_RCD
DEPTB.BUDGET_LEVEL_INDC
DEPTB.CURRENCY_CD
DEPTB.OVERALL_BDGT_CAP
DEPTB.ERN_BDGT_CAP
DEPTB.DED_BDGT_CAP
DEPTB.TAX_BDGT_CAP
BUDGS.SEQ_NUM


  let #DynCF_EndCol = 152
  do Initialize-CF-Variables
  do Add-to-Exclude-CF-List ('ACCOUNT')
  do Build-CF-Array

  do DEPARTMENT-LEVELS


FROM PS_DEPT_BUDGET DEPTB ,
       PS_BUDGET_SORT BUDGS
WHERE   DEPTB.SETID  = &DEP.SETID
    AND DEPTB.DEPTID = &DEP.DEPTID
    AND DEPTB.FISCAL_YEAR = &DEP.FISCAL_YEAR
    AND DEPTB.EFFDT =
         (SELECT MAX(DEPTB1.EFFDT)
          FROM PS_DEPT_BUDGET DEPTB1
          WHERE DEPTB1.SETID       = DEPTB.SETID
            AND DEPTB1.DEPTID      = DEPTB.DEPTID
            AND DEPTB1.FISCAL_YEAR = DEPTB.FISCAL_YEAR
            AND DEPTB1.BUDGET_LEVEL_INDC = DEPTB.BUDGET_LEVEL_INDC
            AND DEPTB1.POSITION_POOL_ID = DEPTB.POSITION_POOL_ID
            AND DEPTB1.SETID_JOBCODE = DEPTB.SETID_JOBCODE
            AND DEPTB1.JOBCODE = DEPTB.JOBCODE
            AND DEPTB1.POSITION_NBR = DEPTB.POSITION_NBR
            AND DEPTB1.EMPLID = DEPTB.EMPLID
            AND DEPTB1.EMPL_RCD = DEPTB.EMPL_RCD
            AND DEPTB1.EFFDT <= $AsOfDate)
    AND DEPTB.EFFSEQ =
          (SELECT MAX(DEPTSEQ.EFFSEQ)
           FROM PS_DEPT_BUDGET DEPTSEQ
            WHERE DEPTSEQ.SETID = DEPTB.SETID
            AND DEPTSEQ.DEPTID      = DEPTB.DEPTID
            AND DEPTSEQ.FISCAL_YEAR = DEPTB.FISCAL_YEAR
            AND DEPTSEQ.BUDGET_LEVEL_INDC = DEPTB.BUDGET_LEVEL_INDC
            AND DEPTSEQ.POSITION_POOL_ID = DEPTB.POSITION_POOL_ID
            AND DEPTSEQ.SETID_JOBCODE = DEPTB.SETID_JOBCODE
            AND DEPTSEQ.JOBCODE = DEPTB.JOBCODE
            AND DEPTSEQ.POSITION_NBR = DEPTB.POSITION_NBR
            AND DEPTSEQ.EMPLID = DEPTB.EMPLID
            AND DEPTSEQ.EMPL_RCD = DEPTB.EMPL_RCD
            AND DEPTSEQ.EFFDT = DEPTB.EFFDT)
    AND DEPTB.EFF_STATUS = 'A'
    AND DEPTB.BUDGET_LEVEL_INDC = BUDGS.BUDGET_LEVEL_INDC
    AND BUDGS.OPRID = $PRCS_OPRID
    AND BUDGS.RUN_CNTL_ID = $PRCS_RUN_CNTL_ID
ORDER BY BUDGS.SEQ_NUM,
        DEPTB.BUDGET_LEVEL_INDC,
        DEPTB.POSITION_POOL_ID,
        DEPTB.SETID_JOBCODE,
        DEPTB.JOBCODE,
        DEPTB.POSITION_NBR,
        DEPTB.EMPLID,
        DEPTB.EMPL_RCD
end-SELECT
end-procedure PROCESS-DEPARTMENT

!***********************************************************************
!DEPARTMENT-FTE                                                        *
!***********************************************************************
begin-procedure DEPARTMENT-FTE

begin-SELECT
DEPTC.FTE_CAP
DEPTC.CLASS_INDC

  do ACTUAL-FTE

FROM PS_DEPT_FTE_CAP DEPTC
WHERE  DEPTC.SETID       = &DEP.SETID
   AND DEPTC.DEPTID      = &DEP.DEPTID
   AND DEPTC.FISCAL_YEAR = &DEP.FISCAL_YEAR
   AND DEPTC.EFFDT       =
     (SELECT MAX(DEPDT1.EFFDT)
      FROM PS_DEPT_FTE_EFFDT DEPDT1
      WHERE DEPDT1.SETID        = DEPTC.SETID
        AND DEPDT1.DEPTID       = DEPTC.DEPTID
        AND DEPDT1.FISCAL_YEAR  = DEPTC.FISCAL_YEAR
        AND DEPDT1.EFFDT       <= $AsOfDate)
   AND EXISTS
     (SELECT 'X'
      FROM PS_DEPT_FTE_EFFDT DEPDT2
      WHERE DEPDT2.SETID        = DEPTC.SETID
        AND DEPDT2.DEPTID       = DEPTC.DEPTID
        AND DEPDT2.FISCAL_YEAR  = DEPTC.FISCAL_YEAR
        AND DEPDT2.EFFDT        = DEPTC.EFFDT
        AND DEPDT2.EFF_STATUS   = 'A')
ORDER BY DEPTC.CLASS_INDC
end-SELECT

end-procedure DEPARTMENT-FTE

!***********************************************************************
!ACTUAL-FTE                                                            *
!***********************************************************************
begin-procedure ACTUAL-FTE
if &DEPTC.CLASS_INDC = 'B'
   let $Class_Indc = '%'
else
   let $Class_Indc = &DEPTC.CLASS_INDC
end-if
evaluate &DEPTC.CLASS_INDC
     when = 'C'
         print $BUD004_CLASS_CAP   (+2,6,)                            !F-LPARKER-125 (CAMI)
         break
     when = 'B'
         print $BUD004_ALL_CAP     (+2,6,)                            !F-LPARKER-125 (CAMI)
         break
     when = 'U'
         print $BUD004_UNCLASS_CAP (+2,6,)                            !F-LPARKER-125 (CAMI)
         break
     when = 'T'
         print $BUD004_TEMP_CAP    (+2,6,)                            !F-LPARKER-125 (CAMI)
         break
end-evaluate

  print &DEPTC.FTE_CAP (,+2,)

move 0 to #fte_actual
begin-SELECT
JOB.DEPTID
JOB.CLASS_INDC
SUM(JOB.FTE) &JOB.FTE

    add &JOB.FTE to #fte_actual

FROM PS_JOB JOB
WHERE JOB.SETID_DEPT = &DEP.SETID
  AND JOB.DEPTID IN (SELECT BUDDEP.DEPTID FROM PS_DEPT_TBL BUDDEP
                      WHERE BUDDEP.SETID = $SetID
                        AND BUDDEP.BUDGET_DEPTID = &DEP.DEPTID
                        AND BUDDEP.EFFDT = (SELECT MAX(BUDDEP1.EFFDT) FROM PS_DEPT_TBL BUDDEP1
                                            WHERE BUDDEP1.SETID = BUDDEP.SETID
                                              AND BUDDEP1.DEPTID = BUDDEP.DEPTID
                                              AND BUDDEP1.EFFDT <= $AsOfToday)
                        AND BUDDEP.EFF_STATUS = 'A')
  AND JOB.ADDS_TO_FTE_ACTUAL = 'Y'
  AND JOB.CLASS_INDC LIKE $Class_Indc
  AND JOB.EFFDT =
        (SELECT MAX(JOB2.EFFDT)
          FROM PS_JOB JOB2
          WHERE JOB2.EMPLID = JOB.EMPLID
             AND JOB2.EMPL_RCD = JOB.EMPL_RCD
             AND JOB2.EFFDT <= $AsOfToday)
  AND JOB.EFFSEQ =
        (SELECT MAX(JOB3.EFFSEQ)
          FROM PS_JOB JOB3
          WHERE JOB3.EMPLID = JOB.EMPLID
             AND JOB3.EMPL_RCD = JOB.EMPL_RCD
             AND JOB3.EFFDT = JOB.EFFDT)
GROUP BY JOB.DEPTID,
              JOB.CLASS_INDC
ORDER BY  JOB.CLASS_INDC
end-SELECT

    print $BUD004_FTE_ACTUAL (,41,)                                   !F-LPARKER-125 (CAMI)
    print #fte_actual        (,,)  edit 9999.999999

end-procedure ACTUAL-FTE

!***********************************************************************
!DEPARTMENT--LEVELS                                                    *
!***********************************************************************
begin-procedure DEPARTMENT-LEVELS


if $First_Time_Budget <> 'Y'
   new-page
else
   let $First_Time_Budget = 'N'
end-if

 evaluate &DEPTB.BUDGET_LEVEL_INDC
  when = 'A'
        print $BUD004_BDGT_LVL (+2,6,)                                !F-LPARKER-125 (CAMI)
        move 'BUDGET_LEVEL_INDC' to $FieldName
        move &DEPTB.BUDGET_LEVEL_INDC to $FieldValue
        do READ-TRANSLATE-TABLE
        print $XlatLongName    (,+2,)
        move &DEPTB.EMPLID to $Emplid
        move '' to $Name
        if $Emplid <> ''
           do GET-EMPLOYEE-NAME
        end-if
        print $BUD004_NAME_HDG (,+2,)                                 !F-LPARKER-125 (CAMI)
        print $Name            (,+2,)
        print $BUD004_EMPLID   (,+2,)                                 !F-LPARKER-125 (CAMI)
        print &DEPTB.EMPLID    (,+2,)
        print $BUD004_EMPL_RCD (,+2,)                                 !F-LPARKER-125 (CAMI)
        print &DEPTB.EMPL_RCD  (,+2,)
            break
  when = 'D'
        print $BUD004_BDGT_LVL   (+2,6,)                              !F-LPARKER-125 (CAMI)
        move 'BUDGET_LEVEL_INDC' to $FieldName
        move &DEPTB.BUDGET_LEVEL_INDC to $FieldValue
        do READ-TRANSLATE-TABLE
        print $XlatLongName      (,+2,)
        print $BUD004_DEPTID_HDG (,+2,)                               !F-LPARKER-125 (CAMI)
        print &DEPTB.DEPTID      (,+2,)
        print '-'                (,+1,)
        print $DeptName          (,+1,)
            break
  when = 'P'
        print $BUD004_BDGT_LVL     (+2,6,)                            !F-LPARKER-125 (CAMI)
        move 'BUDGET_LEVEL_INDC' to $FieldName
        move &DEPTB.BUDGET_LEVEL_INDC to $FieldValue
        do READ-TRANSLATE-TABLE
        print $XlatLongName        (,+2,)
        print $BUD004_POSITION_NBR (,+2,)                             !F-LPARKER-125 (CAMI)
        print &DEPTB.POSITION_NBR  (,+2,)
        move &DEPTB.POSITION_NBR to $Position_Nbr
        do Get-Position-Title
        print '-'                  (,+1,)
        print $PosName             (,+1,)
            break
  when = 'O'
        print $BUD004_BDGT_LVL        (+2,6,)                         !F-LPARKER-125 (CAMI)
        move 'BUDGET_LEVEL_INDC' to $FieldName
        move &DEPTB.BUDGET_LEVEL_INDC to $FieldValue
        do READ-TRANSLATE-TABLE
        print $XlatLongName           (,+2,)
        print $BUD004_POOL_ID         (,+2,)                          !F-LPARKER-125 (CAMI)
        print &DEPTB.POSITION_POOL_ID (,+2,)
        move &DEPTB.POSITION_POOL_ID to $Pool_ID
        print '-'                     (,+1,)
        do Get-Pool-Title
        print $PoolName               (,+1,)
            break
  when = 'J'
        print $BUD004_BDGT_LVL     (+2,6,)                            !F-LPARKER-125 (CAMI)
        move 'BUDGET_LEVEL_INDC' to $FieldName
        move &DEPTB.BUDGET_LEVEL_INDC to $FieldValue
        do READ-TRANSLATE-TABLE
        print $XlatLongName        (,+2,)
        print $BUD004_SETID_JOBCD  (,+2,)                             !F-LPARKER-125 (CAMI)
        print &DEPTB.SETID_JOBCODE (,+2,)
        print $BUD004_JOBCODE      (,+2,)                             !F-LPARKER-125 (CAMI)
        print &DEPTB.JOBCODE       (,+2,)
        move &DEPTB.JOBCODE to $JobCode
        do Get-Job-Title
        print '-'                  (,+1,)
        print $JobTitle            (,+1,)
            break
 end-evaluate

 if &DEPTB.OVERALL_BDGT_CAP > 0
         print $BUD004_OVERALL_BDGT    (+2,6,)                        !F-LPARKER-125 (CAMI)
         print &DEPTB.OVERALL_BDGT_CAP (,+2,)
  else
         print $BUD004_ERN_BDGT_CAP    (+2,6,)                        !F-LPARKER-125 (CAMI)
         print &DEPTB.ERN_BDGT_CAP     (,+2,)
         print $BUD004_DED_BDGT_CAP    (,+2,)                         !F-LPARKER-125 (CAMI)
         print &DEPTB.DED_BDGT_CAP     (,+2,)
         print $BUD004_TAX_BDGT_CAP    (,+2,)                         !F-LPARKER-125 (CAMI)
         print &DEPTB.TAX_BDGT_CAP     (,+2,)
  end-if

do BUDGET-EARNINGS
do BUDGET-DEDUCTIONS
do BUDGET-TAX
do BUDGET-CAN-TAX
do BUDGET-ACTUALS
end-procedure DEPARTMENT-LEVELS

!***********************************************************************
!GET-EMPLOYEE-NAME                                                     *
!***********************************************************************
begin-procedure GET-EMPLOYEE-NAME
begin-SELECT
PD.NAME
  let $Name = rtrim(&PD.Name,' ')
FROM  PS_PERSON_NAME PD
WHERE PD.EMPLID = $Emplid
end-SELECT
end-procedure GET-EMPLOYEE-NAME

!***********************************************************************
!BUDGET-EARNINGS                                                       *
!***********************************************************************
begin-procedure BUDGET-EARNINGS

if #CurrentLine > #MaxLines - 5
   new-page
end-if

! The print lines below were modified for F-LPARKER-125 (CAMI)
print $BUD004_ERNS_DISTRB (+2,6,)
print $BUD004_ERNCD       (+1,{col1},) bold
print $BUD004_SEQ         (,{col4},)   bold
print $BUD004_ACCT_CD     (,{col5},)   bold

let #AdvLineNo = 1
do Print-CF-Labels (#AdvLineNo, #StrLine)
print $BUD004_AMOUNT      (,{col15A},)
print $BUD004_PERCENT     (,{col16},)

begin-SELECT
DEPTE.ERNCD            (+1,{col1},)   bold
DEPTE.BUDGET_SEQ       (,{col4},)     bold
DEPTE.ACCT_CD          (,{col5},)     bold
ACCTERN.DEPTID_CF
ACCTERN.PROJECT_ID
ACCTERN.PRODUCT
ACCTERN.FUND_CODE
ACCTERN.PROGRAM_CODE
ACCTERN.CLASS_FLD
ACCTERN.AFFILIATE
ACCTERN.OPERATING_UNIT
ACCTERN.ALTACCT
ACCTERN.BUDGET_REF
ACCTERN.CHARTFIELD1
ACCTERN.CHARTFIELD2
ACCTERN.CHARTFIELD3
ACCTERN.AFFILIATE_INTRA1
ACCTERN.AFFILIATE_INTRA2
DEPTE.BUDGET_AMT       (+1,{col15},)   EDIT 99,999,999.99
DEPTE.DIST_PCT         (,{col16},)     EDIT 999.999

  let $DEPTID             = RTRIM(&ACCTERN.DEPTID_CF, ' ')
  let $PROJECT_ID         = RTRIM(&ACCTERN.PROJECT_ID, ' ')
  let $PRODUCT            = RTRIM(&ACCTERN.PRODUCT, ' ')
  let $FUND_CODE          = RTRIM(&ACCTERN.FUND_CODE, ' ')
  let $PROGRAM_CODE       = RTRIM(&ACCTERN.PROGRAM_CODE, ' ')
  let $CLASS_FLD          = RTRIM(&ACCTERN.CLASS_FLD, ' ')
  let $AFFILIATE          = RTRIM(&ACCTERN.AFFILIATE, ' ')
  let $OPERATING_UNIT     = RTRIM(&ACCTERN.OPERATING_UNIT, ' ')
  let $ALTACCT            = RTRIM(&ACCTERN.ALTACCT, ' ')
  let $BUDGET_REF         = RTRIM(&ACCTERN.BUDGET_REF, ' ')
  let $CHARTFIELD1        = RTRIM(&ACCTERN.CHARTFIELD1, ' ')
  let $CHARTFIELD2        = RTRIM(&ACCTERN.CHARTFIELD2, ' ')
  let $CHARTFIELD3        = RTRIM(&ACCTERN.CHARTFIELD3, ' ')
  let $AFFILIATE_INTRA1   = RTRIM(&ACCTERN.AFFILIATE_INTRA1, ' ')
  let $AFFILIATE_INTRA2   = RTRIM(&ACCTERN.AFFILIATE_INTRA2, ' ')

  do Format-CF-Print-Line ($DynCF_Filler, $DEPTID, $PROJECT_ID, $PRODUCT, $FUND_CODE, $PROGRAM_CODE,
                           $CLASS_FLD, $AFFILIATE, $OPERATING_UNIT, $ALTACCT, $BUDGET_REF, $CHARTFIELD1,
                           $CHARTFIELD2, $CHARTFIELD3, $AFFILIATE_INTRA1, $AFFILIATE_INTRA2)

  let #AdvLineNo = 0
  do Print-CF-Details (#AdvLineNo, #StrLine)

FROM PS_DEPT_BUDGET_ERN DEPTE
       ,PS_ACCT_CD_TBL ACCTERN
WHERE DEPTE.SETID  = &DEP.SETID
  AND DEPTE.DEPTID = &DEP.DEPTID
  AND DEPTE.FISCAL_YEAR = &DEP.FISCAL_YEAR
  AND DEPTE.EFFDT = &DEPTB.EFFDT
  AND DEPTE.POSITION_POOL_ID = &DEPTB.POSITION_POOL_ID
  AND DEPTE.POSITION_NBR = &DEPTB.POSITION_NBR
  AND DEPTE.SETID_JOBCODE = &DEPTB.SETID_JOBCODE
  AND DEPTE.JOBCODE = &DEPTB.JOBCODE
  AND DEPTE.EMPLID = &DEPTB.EMPLID
  AND DEPTE.EMPL_RCD = &DEPTB.EMPL_RCD
  AND DEPTE.ACCT_CD = ACCTERN.ACCT_CD
  AND DEPTE.EFFSEQ  =
        (SELECT MAX(ERNSEQ.EFFSEQ)
         FROM PS_DEPT_BUDGET_ERN ERNSEQ
         WHERE ERNSEQ.SETID = DEPTE.SETID AND
               ERNSEQ.DEPTID = DEPTE.DEPTID AND
               ERNSEQ.FISCAL_YEAR = DEPTE.FISCAL_YEAR AND
               ERNSEQ.EFFDT = DEPTE.EFFDT AND
               ERNSEQ.POSITION_POOL_ID = DEPTE.POSITION_POOL_ID AND
               ERNSEQ.POSITION_NBR =  DEPTE.POSITION_NBR AND
               ERNSEQ.SETID_JOBCODE = DEPTE.SETID_JOBCODE AND
               ERNSEQ.JOBCODE = DEPTE.JOBCODE AND
               ERNSEQ.EMPLID = DEPTE.EMPLID AND
               ERNSEQ.EMPL_RCD = DEPTE.EMPL_RCD)
ORDER BY DEPTE.ERNCD
   , DEPTE.BUDGET_SEQ
   , DEPTE.ACCT_CD
end-SELECT
end-procedure BUDGET-EARNINGS


!***********************************************************************
!BUDGET-DEDUCTIONS                                                     *
!***********************************************************************
begin-procedure BUDGET-DEDUCTIONS

if #CurrentLine > #MaxLines - 5
   new-page
end-if

! The print lines below were modified for F-LPARKER-125 (CAMI)
print $BUD004_DED_DISTRB (+2,6,)
print $BUD004_DEDCD      (+1,{col1},) bold
print $BUD004_DEDCLASS   (,{col2},)   bold
print $BUD004_SEQ        (,{col4},)   bold
print $BUD004_ACCT_CD    (,{col5},)   bold

let #AdvLineNo = 1
do Print-CF-Labels (#AdvLineNo, #StrLine)
print $BUD004_AMOUNT     (,{col15A},)
print $BUD004_PERCENT    (,{col16},)


begin-SELECT
DEPTD.PLAN_TYPE
DEPTD.DEDCD            (+1,{col1},)   bold
DEPTD.DED_CLASS        (,{col2},)     bold
DEPTD.BUDGET_SEQ       (,{col4},)     bold
DEPTD.ACCT_CD          (,{col5},)     bold
ACCTDED.DEPTID_CF
ACCTDED.PROJECT_ID
ACCTDED.PRODUCT
ACCTDED.FUND_CODE
ACCTDED.PROGRAM_CODE
ACCTDED.CLASS_FLD
ACCTDED.AFFILIATE
ACCTDED.OPERATING_UNIT
ACCTDED.ALTACCT
ACCTDED.BUDGET_REF
ACCTDED.CHARTFIELD1
ACCTDED.CHARTFIELD2
ACCTDED.CHARTFIELD3
ACCTDED.AFFILIATE_INTRA1
ACCTDED.AFFILIATE_INTRA2
DEPTD.BUDGET_AMT       (+1,{col15},)  EDIT 99,999,999.99
DEPTD.DIST_PCT         (,{col16},)    EDIT 999.999

  let $DEPTID             = RTRIM(&ACCTDED.DEPTID_CF, ' ')
  let $PROJECT_ID         = RTRIM(&ACCTDED.PROJECT_ID, ' ')
  let $PRODUCT            = RTRIM(&ACCTDED.PRODUCT, ' ')
  let $FUND_CODE          = RTRIM(&ACCTDED.FUND_CODE, ' ')
  let $PROGRAM_CODE       = RTRIM(&ACCTDED.PROGRAM_CODE, ' ')
  let $CLASS_FLD          = RTRIM(&ACCTDED.CLASS_FLD, ' ')
  let $AFFILIATE          = RTRIM(&ACCTDED.AFFILIATE, ' ')
  let $OPERATING_UNIT     = RTRIM(&ACCTDED.OPERATING_UNIT, ' ')
  let $ALTACCT            = RTRIM(&ACCTDED.ALTACCT, ' ')
  let $BUDGET_REF         = RTRIM(&ACCTDED.BUDGET_REF, ' ')
  let $CHARTFIELD1        = RTRIM(&ACCTDED.CHARTFIELD1, ' ')
  let $CHARTFIELD2        = RTRIM(&ACCTDED.CHARTFIELD2, ' ')
  let $CHARTFIELD3        = RTRIM(&ACCTDED.CHARTFIELD3, ' ')
  let $AFFILIATE_INTRA1   = RTRIM(&ACCTDED.AFFILIATE_INTRA1, ' ')
  let $AFFILIATE_INTRA2   = RTRIM(&ACCTDED.AFFILIATE_INTRA2, ' ')

  do Format-CF-Print-Line ($DynCF_Filler, $DEPTID, $PROJECT_ID, $PRODUCT, $FUND_CODE, $PROGRAM_CODE,
                           $CLASS_FLD, $AFFILIATE, $OPERATING_UNIT, $ALTACCT, $BUDGET_REF, $CHARTFIELD1,
                           $CHARTFIELD2, $CHARTFIELD3, $AFFILIATE_INTRA1, $AFFILIATE_INTRA2)

  let #AdvLineNo = 0
  do Print-CF-Details (#AdvLineNo, #StrLine)

FROM PS_DEPT_BUDGET_DED DEPTD
       ,PS_ACCT_CD_TBL ACCTDED
WHERE DEPTD.SETID  = &DEP.SETID
  AND DEPTD.DEPTID = &DEP.DEPTID
  AND DEPTD.FISCAL_YEAR = &DEP.FISCAL_YEAR
  AND DEPTD.EFFDT = &DEPTB.EFFDT
  AND DEPTD.POSITION_POOL_ID = &DEPTB.POSITION_POOL_ID
  AND DEPTD.POSITION_NBR = &DEPTB.POSITION_NBR
  AND DEPTD.SETID_JOBCODE = &DEPTB.SETID_JOBCODE
  AND DEPTD.JOBCODE = &DEPTB.JOBCODE
  AND DEPTD.EMPLID = &DEPTB.EMPLID
  AND DEPTD.EMPL_RCD = &DEPTB.EMPL_RCD
  AND DEPTD.ACCT_CD = ACCTDED.ACCT_CD
  AND DEPTD.EFFSEQ  =
        (SELECT MAX(DEDSEQ.EFFSEQ)
         FROM PS_DEPT_BUDGET_DED DEDSEQ
         WHERE DEDSEQ.SETID = DEPTD.SETID AND
         DEDSEQ.DEPTID = DEPTD.DEPTID AND
         DEDSEQ.FISCAL_YEAR = DEPTD.FISCAL_YEAR AND
         DEDSEQ.EFFDT = DEPTD.EFFDT AND
         DEDSEQ.POSITION_POOL_ID = DEPTD.POSITION_POOL_ID AND
         DEDSEQ.POSITION_NBR = DEPTD.POSITION_NBR AND
         DEDSEQ.SETID_JOBCODE = DEPTD.SETID_JOBCODE AND
         DEDSEQ.JOBCODE = DEPTD.JOBCODE AND
         DEDSEQ.EMPLID = DEPTD.EMPLID AND
         DEDSEQ.EMPL_RCD = DEPTD.EMPL_RCD)
ORDER BY DEPTD.PLAN_TYPE
   , DEPTD.DEDCD
   , DEPTD.DED_CLASS
   , DEPTD.BUDGET_SEQ
   , DEPTD.ACCT_CD
end-SELECT
end-procedure BUDGET-DEDUCTIONS

!***********************************************************************
!BUDGET-TAX                                                            *
!***********************************************************************
begin-procedure BUDGET-TAX

if #CurrentLine > #MaxLines - 5
   new-page
end-if

! The print lines below were modified for F-LPARKER-125 (CAMI)
print $BUD004_TAX_DISTRB (+2,6,)
print $BUD004_STATE      (+1,{col1},) bold
print $BUD004_LOCALITY   (,{col2},)   bold
print $BUD004_TAX_CLASS  (,{col3},)   bold
print $BUD004_SEQ        (,{col4},)   bold
print $BUD004_ACCT_CD    (,{col5},)   bold

let #AdvLineNo = 1
do Print-CF-Labels (#AdvLineNo, #StrLine)
print $BUD004_AMOUNT     (,{col15A},)
print $BUD004_PERCENT    (,{col16},)


begin-SELECT
DEPTT.STATE            (+1,{col1},)  bold
DEPTT.LOCALITY         (,{col2},)    bold
DEPTT.TAX_CLASS        (,{col3},)    bold
DEPTT.BUDGET_SEQ       (,{col4},)    bold
DEPTT.ACCT_CD          (,{col5},)    bold
ACCTTAX.DEPTID_CF
ACCTTAX.PROJECT_ID
ACCTTAX.PRODUCT
ACCTTAX.FUND_CODE
ACCTTAX.PROGRAM_CODE
ACCTTAX.CLASS_FLD
ACCTTAX.AFFILIATE
ACCTTAX.OPERATING_UNIT
ACCTTAX.ALTACCT
ACCTTAX.BUDGET_REF
ACCTTAX.CHARTFIELD1
ACCTTAX.CHARTFIELD2
ACCTTAX.CHARTFIELD3
ACCTTAX.AFFILIATE_INTRA1
ACCTTAX.AFFILIATE_INTRA2
DEPTT.BUDGET_AMT       (+1,{col15},)    EDIT 99,999,999.99
DEPTT.DIST_PCT         (,{col16},)      EDIT 999.999

  let $DEPTID             = RTRIM(&ACCTTAX.DEPTID_CF, ' ')
  let $PROJECT_ID         = RTRIM(&ACCTTAX.PROJECT_ID, ' ')
  let $PRODUCT            = RTRIM(&ACCTTAX.PRODUCT, ' ')
  let $FUND_CODE          = RTRIM(&ACCTTAX.FUND_CODE, ' ')
  let $PROGRAM_CODE       = RTRIM(&ACCTTAX.PROGRAM_CODE, ' ')
  let $CLASS_FLD          = RTRIM(&ACCTTAX.CLASS_FLD, ' ')
  let $AFFILIATE          = RTRIM(&ACCTTAX.AFFILIATE, ' ')
  let $OPERATING_UNIT     = RTRIM(&ACCTTAX.OPERATING_UNIT, ' ')
  let $ALTACCT            = RTRIM(&ACCTTAX.ALTACCT, ' ')
  let $BUDGET_REF         = RTRIM(&ACCTTAX.BUDGET_REF, ' ')
  let $CHARTFIELD1        = RTRIM(&ACCTTAX.CHARTFIELD1, ' ')
  let $CHARTFIELD2        = RTRIM(&ACCTTAX.CHARTFIELD2, ' ')
  let $CHARTFIELD3        = RTRIM(&ACCTTAX.CHARTFIELD3, ' ')
  let $AFFILIATE_INTRA1   = RTRIM(&ACCTTAX.AFFILIATE_INTRA1, ' ')
  let $AFFILIATE_INTRA2   = RTRIM(&ACCTTAX.AFFILIATE_INTRA2, ' ')

  do Format-CF-Print-Line ($DynCF_Filler, $DEPTID, $PROJECT_ID, $PRODUCT, $FUND_CODE, $PROGRAM_CODE,
                           $CLASS_FLD, $AFFILIATE, $OPERATING_UNIT, $ALTACCT, $BUDGET_REF, $CHARTFIELD1,
                           $CHARTFIELD2, $CHARTFIELD3, $AFFILIATE_INTRA1, $AFFILIATE_INTRA2)

  let #AdvLineNo = 0
  do Print-CF-Details (#AdvLineNo, #StrLine)

FROM PS_DEPT_BUDGET_TAX DEPTT
       ,PS_ACCT_CD_TBL ACCTTAX
WHERE DEPTT.SETID  = &DEP.SETID
  AND DEPTT.DEPTID = &DEP.DEPTID
  AND DEPTT.FISCAL_YEAR = &DEP.FISCAL_YEAR
  AND DEPTT.EFFDT = &DEPTB.EFFDT
  AND DEPTT.POSITION_POOL_ID = &DEPTB.POSITION_POOL_ID
  AND DEPTT.POSITION_NBR = &DEPTB.POSITION_NBR
  AND DEPTT.SETID_JOBCODE = &DEPTB.SETID_JOBCODE
  AND DEPTT.JOBCODE = &DEPTB.JOBCODE
  AND DEPTT.EMPLID = &DEPTB.EMPLID
  AND DEPTT.EMPL_RCD = &DEPTB.EMPL_RCD
  AND DEPTT.ACCT_CD = ACCTTAX.ACCT_CD
  AND DEPTT.EFFSEQ  =
        (SELECT MAX(TAXSEQ.EFFSEQ)
         FROM PS_DEPT_BUDGET_TAX TAXSEQ
         WHERE TAXSEQ.SETID = DEPTT.SETID AND
         TAXSEQ.DEPTID = DEPTT.DEPTID AND
         TAXSEQ.FISCAL_YEAR = DEPTT.FISCAL_YEAR AND
         TAXSEQ.EFFDT = DEPTT.EFFDT AND
         TAXSEQ.POSITION_POOL_ID = DEPTT.POSITION_POOL_ID AND
         TAXSEQ.POSITION_NBR = DEPTT.POSITION_NBR AND
         TAXSEQ.SETID_JOBCODE = DEPTT.SETID_JOBCODE AND
         TAXSEQ.JOBCODE = DEPTT.JOBCODE AND
         TAXSEQ.EMPLID = DEPTT.EMPLID AND
         TAXSEQ.EMPL_RCD = DEPTT.EMPL_RCD)
ORDER BY DEPTT.STATE
   , DEPTT.LOCALITY
   , DEPTT.TAX_CLASS
   , DEPTT.BUDGET_SEQ
   , DEPTT.ACCT_CD
end-SELECT
end-procedure BUDGET-TAX

!***********************************************************************
!BUDGET-CAN-TAX                                                        *
!***********************************************************************
begin-procedure BUDGET-CAN-TAX

if #CurrentLine > #MaxLines - 5
   new-page
end-if

! The print lines below were modified for F-LPARKER-125 (CAMI)
print $BUD004_CTX_DISTRB (+2,6,)
print $BUD004_PROVINCE   (+1,{col1},) bold
print $BUD004_CTX_CLASS  (,{col3},)   bold
print $BUD004_SEQ        (,{col4},)   bold
print $BUD004_ACCT_CD    (,{col5},)   bold

let #AdvLineNo = 1
do Print-CF-Labels (#AdvLineNo, #StrLine)
print $BUD004_AMOUNT     (,{col15A},)
print $BUD004_PERCENT    (,{col16},)

begin-SELECT
DEPTTC.PROVINCE        (+1,{col1},) bold
DEPTTC.TAX_CLASS_CAN   (,{col3},)  bold
DEPTTC.BUDGET_SEQ      (,{col4},)  bold
DEPTTC.ACCT_CD         (,{col5},)  bold
ACCTCTX.DEPTID_CF
ACCTCTX.PROJECT_ID
ACCTCTX.PRODUCT
ACCTCTX.FUND_CODE
ACCTCTX.PROGRAM_CODE
ACCTCTX.CLASS_FLD
ACCTCTX.AFFILIATE
ACCTCTX.OPERATING_UNIT
ACCTCTX.ALTACCT
ACCTCTX.BUDGET_REF
ACCTCTX.CHARTFIELD1
ACCTCTX.CHARTFIELD2
ACCTCTX.CHARTFIELD3
ACCTCTX.AFFILIATE_INTRA1
ACCTCTX.AFFILIATE_INTRA2
DEPTTC.BUDGET_AMT      (+1,{col15},)    EDIT 99,999,999.99
DEPTTC.DIST_PCT        (,{col16},)      EDIT 999.999

  let $DEPTID             = RTRIM(&ACCTCTX.DEPTID_CF, ' ')
  let $PROJECT_ID         = RTRIM(&ACCTCTX.PROJECT_ID, ' ')
  let $PRODUCT            = RTRIM(&ACCTCTX.PRODUCT, ' ')
  let $FUND_CODE          = RTRIM(&ACCTCTX.FUND_CODE, ' ')
  let $PROGRAM_CODE       = RTRIM(&ACCTCTX.PROGRAM_CODE, ' ')
  let $CLASS_FLD          = RTRIM(&ACCTCTX.CLASS_FLD, ' ')
  let $AFFILIATE          = RTRIM(&ACCTCTX.AFFILIATE, ' ')
  let $OPERATING_UNIT     = RTRIM(&ACCTCTX.OPERATING_UNIT, ' ')
  let $ALTACCT            = RTRIM(&ACCTCTX.ALTACCT, ' ')
  let $BUDGET_REF         = RTRIM(&ACCTCTX.BUDGET_REF, ' ')
  let $CHARTFIELD1        = RTRIM(&ACCTCTX.CHARTFIELD1, ' ')
  let $CHARTFIELD2        = RTRIM(&ACCTCTX.CHARTFIELD2, ' ')
  let $CHARTFIELD3        = RTRIM(&ACCTCTX.CHARTFIELD3, ' ')
  let $AFFILIATE_INTRA1   = RTRIM(&ACCTCTX.AFFILIATE_INTRA1, ' ')
  let $AFFILIATE_INTRA2   = RTRIM(&ACCTCTX.AFFILIATE_INTRA2, ' ')

  do Format-CF-Print-Line ($DynCF_Filler, $DEPTID, $PROJECT_ID, $PRODUCT, $FUND_CODE, $PROGRAM_CODE,
                           $CLASS_FLD, $AFFILIATE, $OPERATING_UNIT, $ALTACCT, $BUDGET_REF, $CHARTFIELD1,
                           $CHARTFIELD2, $CHARTFIELD3, $AFFILIATE_INTRA1, $AFFILIATE_INTRA2)

  let #AdvLineNo = 0
  do Print-CF-Details (#AdvLineNo, #StrLine)

FROM PS_DEPT_BUDGET_CTX DEPTTC
       ,PS_ACCT_CD_TBL ACCTCTX
WHERE DEPTTC.SETID  = &DEP.SETID
  AND DEPTTC.DEPTID = &DEP.DEPTID
  AND DEPTTC.FISCAL_YEAR = &DEP.FISCAL_YEAR
  AND DEPTTC.EFFDT = &DEPTB.EFFDT
  AND DEPTTC.POSITION_POOL_ID = &DEPTB.POSITION_POOL_ID
  AND DEPTTC.POSITION_NBR = &DEPTB.POSITION_NBR
  AND DEPTTC.SETID_JOBCODE = &DEPTB.SETID_JOBCODE
  AND DEPTTC.JOBCODE = &DEPTB.JOBCODE
  AND DEPTTC.EMPLID = &DEPTB.EMPLID
  AND DEPTTC.EMPL_RCD = &DEPTB.EMPL_RCD
  AND DEPTTC.ACCT_CD = ACCTCTX.ACCT_CD
  AND DEPTTC.EFFSEQ =
        (SELECT MAX(CTXSEQ.EFFSEQ)
         FROM PS_DEPT_BUDGET_CTX CTXSEQ
         WHERE CTXSEQ.SETID = DEPTTC.SETID AND
         CTXSEQ.DEPTID = DEPTTC.DEPTID AND
         CTXSEQ.FISCAL_YEAR = DEPTTC.FISCAL_YEAR AND
         CTXSEQ.EFFDT = DEPTTC.EFFDT AND
         CTXSEQ.POSITION_POOL_ID = DEPTTC.POSITION_POOL_ID AND
         CTXSEQ.POSITION_NBR = DEPTTC.POSITION_NBR AND
         CTXSEQ.SETID_JOBCODE = DEPTTC.SETID_JOBCODE AND
         CTXSEQ.JOBCODE = DEPTTC.JOBCODE AND
         CTXSEQ.EMPLID = DEPTTC.EMPLID AND
         CTXSEQ.EMPL_RCD = DEPTTC.EMPL_RCD)
ORDER BY DEPTTC.PROVINCE
   , DEPTTC.TAX_CLASS_CAN
   , DEPTTC.BUDGET_SEQ
   , DEPTTC.ACCT_CD
end-SELECT
end-procedure BUDGET-CAN-TAX

!**********************************************************************
!BUDGET-ACTUALS                                                        *
!**********************************************************************
begin-procedure BUDGET-ACTUALS

if #CurrentLine > #MaxLines - 5
   new-page
end-if

let #DynCF_EndCol = 170
do Initialize-CF-Variables
do Build-CF-Array

! The print lines below were modified for F-LPARKER-125 (CAMI)
print $BUD004_ACTUALS_HDG (+2,6,)
print $BUD004_ACCT_CD     (+1,{colA1},) bold

let #AdvLineNo = 1
do Print-CF-Labels (#AdvLineNo, #StrLine)
print $BUD004_ENCUMBERED  (+1,{colB11},)
print $BUD004_ACTUALS     (,{colB12},)
print $BUD004_TOTAL       (,{colB13},)

evaluate &DEPTB.BUDGET_LEVEL_INDC
   when = 'D'
     do DEPARTMENT-ACTUALS
     break
   when = 'A'
     do APPOINTMENT-ACTUALS
     break
   when = 'J'
     do JOBCODE-ACTUALS
     break
   when = 'P'
     do POSITION-ACTUALS
     break
   when = 'O'
     do POOL-ACTUALS
     break
   when-other
     break
   end-evaluate
end-procedure BUDGET-ACTUALS

!**********************************************************************
!DEPARTMENT-ACTUALS                                                   *
!**********************************************************************
begin-procedure DEPARTMENT-ACTUALS

begin-SELECT
ACTD.FISCAL_YEAR
ACTD.DEPTID
ACTD.ACCT_CD           (+1,{colA1},) bold
ACCTD.DEPTID_CF
ACTD.ACCOUNT
ACCTD.PROJECT_ID
ACCTD.PRODUCT
ACCTD.FUND_CODE
ACCTD.PROGRAM_CODE
ACCTD.CLASS_FLD
ACCTD.AFFILIATE
ACCTD.OPERATING_UNIT
ACCTD.ALTACCT
ACCTD.BUDGET_REF
ACCTD.CHARTFIELD1
ACCTD.CHARTFIELD2
ACCTD.CHARTFIELD3
ACCTD.AFFILIATE_INTRA1
ACCTD.AFFILIATE_INTRA2
ACTD.POSTED_ENCUMB_AMT
ACTD.POSTED_ACTUAL_AMT
ACTD.POSTED_SUM_AMT

  let $ACCOUNT            = RTRIM(&ACTD.ACCOUNT, ' ')
  let $DEPTID             = RTRIM(&ACCTD.DEPTID_CF, ' ')
  let $PROJECT_ID         = RTRIM(&ACCTD.PROJECT_ID, ' ')
  let $PRODUCT            = RTRIM(&ACCTD.PRODUCT, ' ')
  let $FUND_CODE          = RTRIM(&ACCTD.FUND_CODE, ' ')
  let $PROGRAM_CODE       = RTRIM(&ACCTD.PROGRAM_CODE, ' ')
  let $CLASS_FLD          = RTRIM(&ACCTD.CLASS_FLD, ' ')
  let $AFFILIATE          = RTRIM(&ACCTD.AFFILIATE, ' ')
  let $OPERATING_UNIT     = RTRIM(&ACCTD.OPERATING_UNIT, ' ')
  let $ALTACCT            = RTRIM(&ACCTD.ALTACCT, ' ')
  let $BUDGET_REF         = RTRIM(&ACCTD.BUDGET_REF, ' ')
  let $CHARTFIELD1        = RTRIM(&ACCTD.CHARTFIELD1, ' ')
  let $CHARTFIELD2        = RTRIM(&ACCTD.CHARTFIELD2, ' ')
  let $CHARTFIELD3        = RTRIM(&ACCTD.CHARTFIELD3, ' ')
  let $AFFILIATE_INTRA1   = RTRIM(&ACCTD.AFFILIATE_INTRA1, ' ')
  let $AFFILIATE_INTRA2   = RTRIM(&ACCTD.AFFILIATE_INTRA2, ' ')

  do Format-CF-Print-Line ($ACCOUNT, $DEPTID, $PROJECT_ID, $PRODUCT, $FUND_CODE, $PROGRAM_CODE,
                           $CLASS_FLD, $AFFILIATE, $OPERATING_UNIT, $ALTACCT, $BUDGET_REF, $CHARTFIELD1,
                           $CHARTFIELD2, $CHARTFIELD3, $AFFILIATE_INTRA1, $AFFILIATE_INTRA2)

  let #AdvLineNo = 1
  do Print-CF-Details (#AdvLineNo, #StrLine)

  print &ACTD.POSTED_ENCUMB_AMT     (+1,{colA12},) EDIT 99,999,999,999.99
  print &ACTD.POSTED_ACTUAL_AMT     (,  {colA13},) EDIT 99,999,999,999.99
  print &ACTD.POSTED_SUM_AMT        (,  {colA14},) EDIT 99,999,999,999,999.99

FROM PS_ACTUALS_DEPT_VW ACTD
      ,PS_ACCT_CD_TBL ACCTD
WHERE ACTD.FISCAL_YEAR = &DEP.FISCAL_YEAR
   AND ACTD.SETID  = &DEP.SETID
   AND ACTD.DEPTID = &DEP.DEPTID
   AND ACTD.ACCT_CD = ACCTD.ACCT_CD
end-SELECT
end-procedure

!**********************************************************************
!APPOINTMENT-ACTUALS                                                  *
!**********************************************************************
begin-procedure APPOINTMENT-ACTUALS

begin-SELECT
ACTA.FISCAL_YEAR
ACTA.DEPTID
ACTA.ACCT_CD           (+1,{colA1},) bold
ACCTA.DEPTID_CF
ACTA.ACCOUNT
ACCTA.PROJECT_ID
ACCTA.PRODUCT
ACCTA.FUND_CODE
ACCTA.PROGRAM_CODE
ACCTA.CLASS_FLD
ACCTA.AFFILIATE
ACCTA.OPERATING_UNIT
ACCTA.ALTACCT
ACCTA.BUDGET_REF
ACCTA.CHARTFIELD1
ACCTA.CHARTFIELD2
ACCTA.CHARTFIELD3
ACCTA.AFFILIATE_INTRA1
ACCTA.AFFILIATE_INTRA2
ACTA.POSTED_ENCUMB_AMT
ACTA.POSTED_ACTUAL_AMT
ACTA.POSTED_SUM_AMT

  let $ACCOUNT            = RTRIM(&ACTA.ACCOUNT, ' ')
  let $DEPTID             = RTRIM(&ACCTA.DEPTID_CF, ' ')
  let $PROJECT_ID         = RTRIM(&ACCTA.PROJECT_ID, ' ')
  let $PRODUCT            = RTRIM(&ACCTA.PRODUCT, ' ')
  let $FUND_CODE          = RTRIM(&ACCTA.FUND_CODE, ' ')
  let $PROGRAM_CODE       = RTRIM(&ACCTA.PROGRAM_CODE, ' ')
  let $CLASS_FLD          = RTRIM(&ACCTA.CLASS_FLD, ' ')
  let $AFFILIATE          = RTRIM(&ACCTA.AFFILIATE, ' ')
  let $OPERATING_UNIT     = RTRIM(&ACCTA.OPERATING_UNIT, ' ')
  let $ALTACCT            = RTRIM(&ACCTA.ALTACCT, ' ')
  let $BUDGET_REF         = RTRIM(&ACCTA.BUDGET_REF, ' ')
  let $CHARTFIELD1        = RTRIM(&ACCTA.CHARTFIELD1, ' ')
  let $CHARTFIELD2        = RTRIM(&ACCTA.CHARTFIELD2, ' ')
  let $CHARTFIELD3        = RTRIM(&ACCTA.CHARTFIELD3, ' ')
  let $AFFILIATE_INTRA1   = RTRIM(&ACCTA.AFFILIATE_INTRA1, ' ')
  let $AFFILIATE_INTRA2   = RTRIM(&ACCTA.AFFILIATE_INTRA2, ' ')

  do Format-CF-Print-Line ($ACCOUNT, $DEPTID, $PROJECT_ID, $PRODUCT, $FUND_CODE, $PROGRAM_CODE,
                           $CLASS_FLD, $AFFILIATE, $OPERATING_UNIT, $ALTACCT, $BUDGET_REF, $CHARTFIELD1,
                           $CHARTFIELD2, $CHARTFIELD3, $AFFILIATE_INTRA1, $AFFILIATE_INTRA2)

  let #AdvLineNo = 1
  do Print-CF-Details (#AdvLineNo, #StrLine)

  print &ACTA.POSTED_ENCUMB_AMT     (+1,{colA12},) EDIT 99,999,999,999.99
  print &ACTA.POSTED_ACTUAL_AMT     (,  {colA13},) EDIT 99,999,999,999.99
  print &ACTA.POSTED_SUM_AMT        (,  {colA14},) EDIT 99,999,999,999,999.99

FROM PS_ACTUALS_APPT_VW ACTA
      ,PS_ACCT_CD_TBL ACCTA
WHERE ACTA.FISCAL_YEAR = &DEP.FISCAL_YEAR
   AND ACTA.SETID  = &DEP.SETID
   AND ACTA.DEPTID = &DEP.DEPTID
   AND ACTA.EMPLID = &DEPTB.EMPLID
   AND ACTA.ACCT_CD = ACCTA.ACCT_CD
end-SELECT
end-procedure

!**********************************************************************
!JOBCODE-ACTUALS                                                      *
!**********************************************************************
begin-procedure JOBCODE-ACTUALS

begin-SELECT
ACTJ.FISCAL_YEAR
ACTJ.DEPTID
ACTJ.ACCT_CD           (+1,{colA1},) bold
ACCTJ.DEPTID_CF
ACTJ.ACCOUNT
ACCTJ.PROJECT_ID
ACCTJ.PRODUCT
ACCTJ.FUND_CODE
ACCTJ.PROGRAM_CODE
ACCTJ.CLASS_FLD
ACCTJ.AFFILIATE
ACCTJ.OPERATING_UNIT
ACCTJ.ALTACCT
ACCTJ.BUDGET_REF
ACCTJ.CHARTFIELD1
ACCTJ.CHARTFIELD2
ACCTJ.CHARTFIELD3
ACCTJ.AFFILIATE_INTRA1
ACCTJ.AFFILIATE_INTRA2
ACTJ.POSTED_ENCUMB_AMT
ACTJ.POSTED_ACTUAL_AMT
ACTJ.POSTED_SUM_AMT

  let $ACCOUNT            = RTRIM(&ACTJ.ACCOUNT, ' ')
  let $DEPTID             = RTRIM(&ACCTJ.DEPTID_CF, ' ')
  let $PROJECT_ID         = RTRIM(&ACCTJ.PROJECT_ID, ' ')
  let $PRODUCT            = RTRIM(&ACCTJ.PRODUCT, ' ')
  let $FUND_CODE          = RTRIM(&ACCTJ.FUND_CODE, ' ')
  let $PROGRAM_CODE       = RTRIM(&ACCTJ.PROGRAM_CODE, ' ')
  let $CLASS_FLD          = RTRIM(&ACCTJ.CLASS_FLD, ' ')
  let $AFFILIATE          = RTRIM(&ACCTJ.AFFILIATE, ' ')
  let $OPERATING_UNIT     = RTRIM(&ACCTJ.OPERATING_UNIT, ' ')
  let $ALTACCT            = RTRIM(&ACCTJ.ALTACCT, ' ')
  let $BUDGET_REF         = RTRIM(&ACCTJ.BUDGET_REF, ' ')
  let $CHARTFIELD1        = RTRIM(&ACCTJ.CHARTFIELD1, ' ')
  let $CHARTFIELD2        = RTRIM(&ACCTJ.CHARTFIELD2, ' ')
  let $CHARTFIELD3        = RTRIM(&ACCTJ.CHARTFIELD3, ' ')
  let $AFFILIATE_INTRA1   = RTRIM(&ACCTJ.AFFILIATE_INTRA1, ' ')
  let $AFFILIATE_INTRA2   = RTRIM(&ACCTJ.AFFILIATE_INTRA2, ' ')

  do Format-CF-Print-Line ($ACCOUNT, $DEPTID, $PROJECT_ID, $PRODUCT, $FUND_CODE, $PROGRAM_CODE,
                           $CLASS_FLD, $AFFILIATE, $OPERATING_UNIT, $ALTACCT, $BUDGET_REF, $CHARTFIELD1,
                           $CHARTFIELD2, $CHARTFIELD3, $AFFILIATE_INTRA1, $AFFILIATE_INTRA2)

  let #AdvLineNo = 1
  do Print-CF-Details (#AdvLineNo, #StrLine)

  print &ACTJ.POSTED_ENCUMB_AMT     (+1,{colA12},) EDIT 99,999,999,999.99
  print &ACTJ.POSTED_ACTUAL_AMT     (,  {colA13},) EDIT 99,999,999,999.99
  print &ACTJ.POSTED_SUM_AMT        (,  {colA14},) EDIT 99,999,999,999,999.99

FROM PS_ACTUALS_JBCD_VW ACTJ
      ,PS_ACCT_CD_TBL ACCTJ
WHERE ACTJ.FISCAL_YEAR = &DEP.FISCAL_YEAR
   AND ACTJ.SETID  = &DEP.SETID
   AND ACTJ.DEPTID = &DEP.DEPTID
   AND ACTJ.SETID_JOBCODE = &DEPTB.SETID_JOBCODE
   AND ACTJ.JOBCODE = &DEPTB.JOBCODE
   AND ACTJ.ACCT_CD = ACCTJ.ACCT_CD
end-SELECT
end-procedure
!**********************************************************************
!POSITION-ACTUALS                                                     *
!**********************************************************************
begin-procedure POSITION-ACTUALS

begin-SELECT
ACTP.FISCAL_YEAR
ACTP.DEPTID
ACTP.ACCT_CD           (+1,{colA1},) bold
ACCTP.DEPTID_CF
ACTP.ACCOUNT
ACCTP.PROJECT_ID
ACCTP.PRODUCT
ACCTP.FUND_CODE
ACCTP.PROGRAM_CODE
ACCTP.CLASS_FLD
ACCTP.AFFILIATE
ACCTP.OPERATING_UNIT
ACCTP.ALTACCT
ACCTP.BUDGET_REF
ACCTP.CHARTFIELD1
ACCTP.CHARTFIELD2
ACCTP.CHARTFIELD3
ACCTP.AFFILIATE_INTRA1
ACCTP.AFFILIATE_INTRA2
ACTP.POSTED_ENCUMB_AMT
ACTP.POSTED_ACTUAL_AMT
ACTP.POSTED_SUM_AMT

  let $ACCOUNT            = RTRIM(&ACTP.ACCOUNT, ' ')
  let $DEPTID             = RTRIM(&ACCTP.DEPTID_CF, ' ')
  let $PROJECT_ID         = RTRIM(&ACCTP.PROJECT_ID, ' ')
  let $PRODUCT            = RTRIM(&ACCTP.PRODUCT, ' ')
  let $FUND_CODE          = RTRIM(&ACCTP.FUND_CODE, ' ')
  let $PROGRAM_CODE       = RTRIM(&ACCTP.PROGRAM_CODE, ' ')
  let $CLASS_FLD          = RTRIM(&ACCTP.CLASS_FLD, ' ')
  let $AFFILIATE          = RTRIM(&ACCTP.AFFILIATE, ' ')
  let $OPERATING_UNIT     = RTRIM(&ACCTP.OPERATING_UNIT, ' ')
  let $ALTACCT            = RTRIM(&ACCTP.ALTACCT, ' ')
  let $BUDGET_REF         = RTRIM(&ACCTP.BUDGET_REF, ' ')
  let $CHARTFIELD1        = RTRIM(&ACCTP.CHARTFIELD1, ' ')
  let $CHARTFIELD2        = RTRIM(&ACCTP.CHARTFIELD2, ' ')
  let $CHARTFIELD3        = RTRIM(&ACCTP.CHARTFIELD3, ' ')
  let $AFFILIATE_INTRA1   = RTRIM(&ACCTP.AFFILIATE_INTRA1, ' ')
  let $AFFILIATE_INTRA2   = RTRIM(&ACCTP.AFFILIATE_INTRA2, ' ')

  do Format-CF-Print-Line ($ACCOUNT, $DEPTID, $PROJECT_ID, $PRODUCT, $FUND_CODE, $PROGRAM_CODE,
                           $CLASS_FLD, $AFFILIATE, $OPERATING_UNIT, $ALTACCT, $BUDGET_REF, $CHARTFIELD1,
                           $CHARTFIELD2, $CHARTFIELD3, $AFFILIATE_INTRA1, $AFFILIATE_INTRA2)

  let #AdvLineNo = 1
  do Print-CF-Details (#AdvLineNo, #StrLine)

  print &ACTP.POSTED_ENCUMB_AMT     (+1,{colA12},) EDIT 99,999,999,999.99
  print &ACTP.POSTED_ACTUAL_AMT     (,  {colA13},) EDIT 99,999,999,999.99
  print &ACTP.POSTED_SUM_AMT        (,  {colA14},) EDIT 99,999,999,999,999.99

FROM PS_ACTUALS_POSN_VW ACTP
      ,PS_ACCT_CD_TBL ACCTP
WHERE ACTP.FISCAL_YEAR = &DEP.FISCAL_YEAR
   AND ACTP.SETID  = &DEP.SETID
   AND ACTP.DEPTID = &DEP.DEPTID
   AND ACTP.POSITION_NBR = &DEPTB.POSITION_NBR
   AND ACTP.ACCT_CD = ACCTP.ACCT_CD
end-SELECT
end-procedure
!**********************************************************************
!POOL-ACTUALS                                                         *
!**********************************************************************
begin-procedure POOL-ACTUALS

begin-SELECT
ACTO.FISCAL_YEAR
ACTO.DEPTID
ACTO.ACCT_CD           (+1,{colA1},) bold
ACCTO.DEPTID_CF
ACTO.ACCOUNT
ACCTO.PROJECT_ID
ACCTO.PRODUCT
ACCTO.FUND_CODE
ACCTO.PROGRAM_CODE
ACCTO.CLASS_FLD
ACCTO.AFFILIATE
ACCTO.OPERATING_UNIT
ACCTO.ALTACCT
ACCTO.BUDGET_REF
ACCTO.CHARTFIELD1
ACCTO.CHARTFIELD2
ACCTO.CHARTFIELD3
ACCTO.AFFILIATE_INTRA1
ACCTO.AFFILIATE_INTRA2
ACTO.POSTED_ENCUMB_AMT
ACTO.POSTED_ACTUAL_AMT
ACTO.POSTED_SUM_AMT

  let $ACCOUNT            = RTRIM(&ACTO.ACCOUNT, ' ')
  let $DEPTID             = RTRIM(&ACCTO.DEPTID_CF, ' ')
  let $PROJECT_ID         = RTRIM(&ACCTO.PROJECT_ID, ' ')
  let $PRODUCT            = RTRIM(&ACCTO.PRODUCT, ' ')
  let $FUND_CODE          = RTRIM(&ACCTO.FUND_CODE, ' ')
  let $PROGRAM_CODE       = RTRIM(&ACCTO.PROGRAM_CODE, ' ')
  let $CLASS_FLD          = RTRIM(&ACCTO.CLASS_FLD, ' ')
  let $AFFILIATE          = RTRIM(&ACCTO.AFFILIATE, ' ')
  let $OPERATING_UNIT     = RTRIM(&ACCTO.OPERATING_UNIT, ' ')
  let $ALTACCT            = RTRIM(&ACCTO.ALTACCT, ' ')
  let $BUDGET_REF         = RTRIM(&ACCTO.BUDGET_REF, ' ')
  let $CHARTFIELD1        = RTRIM(&ACCTO.CHARTFIELD1, ' ')
  let $CHARTFIELD2        = RTRIM(&ACCTO.CHARTFIELD2, ' ')
  let $CHARTFIELD3        = RTRIM(&ACCTO.CHARTFIELD3, ' ')
  let $AFFILIATE_INTRA1   = RTRIM(&ACCTO.AFFILIATE_INTRA1, ' ')
  let $AFFILIATE_INTRA2   = RTRIM(&ACCTO.AFFILIATE_INTRA2, ' ')

  do Format-CF-Print-Line ($ACCOUNT, $DEPTID, $PROJECT_ID, $PRODUCT, $FUND_CODE, $PROGRAM_CODE,
                           $CLASS_FLD, $AFFILIATE, $OPERATING_UNIT, $ALTACCT, $BUDGET_REF, $CHARTFIELD1,
                           $CHARTFIELD2, $CHARTFIELD3, $AFFILIATE_INTRA1, $AFFILIATE_INTRA2)

  let #AdvLineNo = 1
  do Print-CF-Details (#AdvLineNo, #StrLine)

  print &ACTO.POSTED_ENCUMB_AMT     (+1,{colA12},) EDIT 99,999,999,999.99
  print &ACTO.POSTED_ACTUAL_AMT     (,  {colA13},) EDIT 99,999,999,999.99
  print &ACTO.POSTED_SUM_AMT        (,  {colA14},) EDIT 99,999,999,999,999.99

FROM PS_ACTUALS_POOL_VW ACTO
      ,PS_ACCT_CD_TBL ACCTO
WHERE ACTO.FISCAL_YEAR = &DEP.FISCAL_YEAR
   AND ACTO.SETID  = &DEP.SETID
   AND ACTO.DEPTID = &DEP.DEPTID
   AND ACTO.POSITION_POOL_ID = &DEPTB.POSITION_POOL_ID
   AND ACTO.ACCT_CD = ACCTO.ACCT_CD
end-SELECT
end-procedure


begin-procedure EDIT-DEPTID
  let $Deptid = $Deptid_No_Edit
  let $Deptid = rtrim($DeptID,'')
  let $Deptid = $DeptId || '%'
end-procedure

begin-procedure EDIT-FISCAL-YEAR
  let $Fiscal_Year =  edit(#FiscalYear, '9999')

 end-procedure

begin-procedure Get-Pool-Title
  if rtrim($Pool_Id,' ') = ''
    move '' to $PoolName
    move '' to $PoolNameAbbrv
    goto GetPoolNmExit
  end-if
  if $AsOfDate = ''  !if no As-Of-Date is specified, default to Today
    move $AsOfToday to $AsOfDate
  end-if
begin-SELECT
POD.DESCR, POD.DESCRSHORT
FROM  PS_POOL_TBL POD
WHERE POD.SETID = $SetID
  AND POD.POSITION_POOL_ID = $Pool_ID
  AND POD.DEPTID = $Proc_Deptid
  AND POD.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_POOL_TBL
       WHERE  POSITION_POOL_ID  = $Pool_ID
         AND DEPTID = $Proc_Deptid
         AND  EFFDT  <= $AsOfDate)
end-SELECT
  let $PoolName       = rtrim(&POD.Descr,' ')
  let $PoolNameAbbrv  = rtrim(&POD.DescrShort,' ')
GetPoolNmExit:
end-procedure


!***********************************************************************
! WRAPUP                                                               *
! This paragraph ends the report process and updates the status of the *
! job in the process scheduler.                                        *
!***********************************************************************
begin-procedure WRAPUP

  if $Record_Found = 'N'
     print $BUD004_NO_RECS (15) center                                !F-LPARKER-125 (CAMI)
  end-if

  do DEL-RUNCTL
  do RESET
  do STDAPI-TERM

end-procedure WRAPUP

!**********************************************************************
! DEL-RUNCTL                                                          *
! This paragraph deletes the Run Controls and Budget level indicator  *
! rows from PS_RUN_CNTL_BDGT & PS_BUDGET_SORT                         *
!**********************************************************************
begin-procedure DEL-RUNCTL

  let $err-statement1 = 'BUD004, DEL-RUNCTL, '||$BUD004_DEL_ERROR     !F-LPARKER-125 (CAMI)
  let $err-statement2 = $BUD004_KEY_VALUES:'||                        !F-LPARKER-125 (CAMI)
                        ' TABLE PS_RUN_CNTL_BDGT' ||                  !F-LPARKER-125 (CAMI)
                        ', OPRID ' || $PRCS_OPRID ||
                        ', RUN_CNTL_ID ' || $PRCS_RUN_CNTL_ID


begin-SQL On-Error=Error-Display

  DELETE FROM PS_RUN_CNTL_BDGT
         WHERE OPRID = $PRCS_OPRID
           AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;
  DELETE FROM PS_BUDGET_SORT
         WHERE OPRID = $PRCS_OPRID
           AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID
end-SQL

  do Commit-Transaction

end-procedure DEL-RUNCTL


!***********************************************************************
! SQCs                                                                 *
!***********************************************************************
#Include 'reset1.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'btrnctl1.sqc'  !Get run control parameters.  This will change
                         !depending on the type of report you are running
                         !and which type of parameters are being used to
                         !run the report.  Other versions are hrrunctl2.sqc,
                         !bnrunctl.sqc, payrnctl.sqc, and taxrnctl.sqc
#Include 'btgetval.sqc'  !Formats run control parameters.  This will also
                         !change as the above sqc changes.  Other versions
                         !are bngetval.sqc and cbgetval.sqc.
#Include 'datemath.sqc'
#Include 'askftd.sqc'    !calls prompt for entry of from-thru date
#Include 'readxlat.sqc'  !returns description for a given field and field value
#Include 'getdptnm.sqc' !Get Department Name.
#Include 'getposnm.sqc' !Get Position Number
#Include 'getjobtl.sqc' !Get Job Title
#Include 'stderror.sqc' !Routine for error display
#Include 'tranctrl.sqc' !Transaction control (commits, etc.)
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language     !F-LPARKER-125 (CAMI)
