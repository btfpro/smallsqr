
!***********************************************************************
!  HPH900CN.SQR:  Load Data into the FT Academic Teaching Member Tbl   *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
! Description: This sqr will populate the Full-Time Academic Teaching  *
! Member Table (HP_STATS_FT_MBR) from HRMS job information and         *
! Statistics Canada coding tables.                                     *
!                                                                      *
! Input: PS_INSTALLATION (ALIAS I)                                     *
!        PS_JOB (ALIAS J1,J2,J3,J4)                                    *
!        PS_HP_EMPLT_TEACH (ALIAS ET)                                  *
!        PS_JOBCODE_TBL (ALIAS JC,JC1,JC2)                             *
!        PS_HP_STATS_FT_MBR (ALIAS FM,FM1)                             *
!        PS_RPTNG_PERIOD (ALIAS RP)                                    *
!        PS_PERSON_NAME (ALIAS PD)                                     *
!        PS_CONTRACT_DATA (ALIAS CD)                                   *
!                                                                      *
! Output: PS_HP_STATS_FT_MBR                                           *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:13:18:50                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!  $Last Modified : July 28 - Platform specific Oracle, DB2  #2400101  *
!       Not executing SQL under any circumstance                       *
!***********************************************************************
! This program is specific to HRMS Education & Government product      *
! line.                                                                *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#include 'setup32.sqc'


!***********************************************************************
! REPORT
! Begins a program or a report.
!***********************************************************************
begin-report

  do HOUSEKEEPING
  do MAINLINE
  do WRAPUP

end-report


!***********************************************************************
! HEADING
! Begins a heading section.
!***********************************************************************
begin-heading 8

  ! Print top page heading
  #include 'stdhdg01.sqc'         ! for standard heading and AsOfDate
  print $ReportTitle2             (+1) center
  print $Date_Head                (+1) center
  print ' '                       (+1)
  print 'EMPLOYEE ID'             (+1,1,13)
  print 'EMPL_RCD'               (,15,14)
  print 'EMPLOYEE NAME'           (,30,34)
  print 'ERROR MESSAGE'           (,65,)
  print ' '                       (+1)

end-heading


!***********************************************************************
! HOUSEKEEPING
! Performs the application initializations.  Formats variables for use.
! Calls the procedures to get input parameters.
!***********************************************************************
begin-procedure HOUSEKEEPING

  move 'HPH900CN' to $ReportID

  do INIT-DATETIME
  do GET-CURRENT-DATETIME

  display 'Report Began: ' noline
  display &SysDateTime
  display ''

  do STDAPI-INIT
  do SELECT-REPORT-PARAMETERS        ! Get StatsCan parameters
  do READ-INSTALLATION-TABLE         ! Get default country

  move 'FT Academic Teaching Member Data Load' to $ReportTitle
  move 'Exception Report' to $ReportTitle2
  move 'HPH900CN' to $ReportId

  display $ReportID noline
  display ' - ' noline
  display $ReportTitle noline
  display ''
  display $ReportTitle2

  create-array name=JOB size=50
    field=Job_Emplid:char -
    field=Job_EmplRcd:number -
    field=Job_Name:char -
    field=Job_BusUnit:char -
    field=Job_Setid:char -
    field=Job_JobCode:char -
    field=Job_ValidFlag:char -
    field=Job_NoContract:char


end-procedure HOUSEKEEPING


!***********************************************************************
! MAINLINE
! This is the main procedure.
! Selects the employees that exists in Personal Data and Job Data
!***********************************************************************
begin-procedure MAINLINE

  let $PREV_EMPLID = ''
  let #Prev_Selected = 0
  let #More_Than_One_Job = 1
  let $err-statement1 = 'HPH900CN, Select Error - MAINLINE'
  let $err-statement2 = 'Bind Variables: FT_RPT_START_DT: '||$FT_Rpt_Start_Dt||
                        ', FT_RPT_END_DT: '||$FT_Rpt_End_Dt

begin-SELECT on-error=Error-Display
PD.NAME
J1.EMPLID
J1.EMPL_RCD
J1.EFFDT
J1.JOBCODE
J1.BUSINESS_UNIT
J1.COMP_FREQUENCY

  let #Valid_Job = 0

  if &J1.EMPLID <> $PREV_EMPLID

     if $PREV_EMPLID <> ''

        if #Prev_Selected and not #More_Than_One_Job

           do PROCESS-EMPLOYEE

        else

           do PRINT-ERROR

        end-if

     end-if

     let #Prev_Selected = 0
     let #More_Than_One_Job = 0
     let #Arraynum = 0

     clear-array name=JOB

  end-if

  put &J1.EMPLID into JOB(#Arraynum) Job_Emplid

  let $EmplRcd = edit(&J1.EMPL_RCD,'0')
  put &J1.EMPL_RCD into JOB(#Arraynum) Job_EmplRcd

  put &PD.NAME into JOB(#Arraynum) Job_Name
  put &J1.BUSINESS_UNIT into JOB(#Arraynum) Job_BusUnit

  let $RecName = 'JOBCODE_TBL'
  do GET-SETID(&J1.BUSINESS_UNIT,$RecName,$SetId)
  put $SetId into JOB(#Arraynum) Job_Setid

  put &J1.JOBCODE into JOB(#Arraynum) Job_JobCode

  do READ-EMPLOYMENT-TEACHING-TABLE

  !**** If comparing directly to a literal must use rtrim as Frequency is 5 bytes **
  if rtrim(&J1.COMP_FREQUENCY, ' ') = 'C'


     do GET-CONTRACT-DATA

     if not #Valid_Job

        put 'Y' into JOB(#Arraynum) Job_NoContract

     end-if

  end-if

  if #Valid_Job

     if &J1.EMPLID = $PREV_EMPLID

        if #Prev_Selected

           let #More_Than_One_Job = 1

        end-if

     else

        let #Prev_Selected = 1

     end-if

     put 'Y' into JOB(#Arraynum) Job_ValidFlag

  else

     put 'N' into JOB(#Arraynum) Job_ValidFlag

  end-if

  let $PREV_EMPLID = &J1.EMPLID
  let #Arraynum = #Arraynum + 1

 FROM PS_PERSON_NAME PD, PS_JOB J1, PS_EMPLOYMENT E
WHERE PD.EMPLID = J1.EMPLID
  AND E.EMPLID = J1.EMPLID
  AND E.EMPL_RCD = J1.EMPL_RCD
  AND J1.EFFDT =
         (SELECT MAX(J2.EFFDT)
            FROM PS_JOB J2
           WHERE J2.EMPLID = J1.EMPLID
             AND J2.EMPL_RCD = J1.EMPL_RCD
             AND J2.EFFDT <= {Datetimein-prefix}$FT_Rpt_Start_Dt{Datetimein-suffix}
             AND NOT EXISTS
                 (SELECT 'X'
                    FROM PS_JOB J3
                   WHERE J3.EMPLID = J1.EMPLID
                     AND J3.EMPL_RCD = J1.EMPL_RCD
                     AND J3.EFFDT >= {Datetimein-prefix}$FT_Rpt_Start_Dt{Datetimein-suffix}
                     AND J3.EFFDT <= {Datetimein-prefix}$FT_Rpt_End_Dt{Datetimein-suffix}
                     AND J3.EMPL_STATUS IN ('D','Q','R','T','U','V','X')))
  AND J1.EFFSEQ =
         (SELECT MAX(J4.EFFSEQ)
            FROM PS_JOB J4
           WHERE J4.EMPLID = J1.EMPLID
             AND J4.EMPL_RCD = J1.EMPL_RCD
             AND J4.EFFDT = J1.EFFDT)
  AND J1.EMPL_STATUS NOT IN ('D','Q','R','T','U','V','X')
  AND J1.REG_TEMP IN ('R','T')
  AND J1.FULL_PART_TIME = 'F'
ORDER BY J1.EMPLID, J1.EMPL_RCD, J1.EFFDT ASC
end-SELECT

end-procedure MAINLINE


!***********************************************************************
! GET-CONTRACT-DATA
! Gets and evaluates the contract data.
!***********************************************************************
begin-procedure GET-CONTRACT-DATA

  let #Valid_Job = 0

  let $err-statement1 = 'HPH900CN, Select Error - GET-CONTRACT-DATA'
  let $err-statement2 = 'Bind Variables: &J1.EMPLID: '||&J1.EMPLID||
                        ', &J1.EMPL_RCD: '||edit(&J1.EMPL_RCD,'0')||
                        ', &J1.EFFDT: '||&J1.EFFDT

begin-SELECT on-error=Error-Display
C.EFFDT
C.CONTRACT_END_DT

   let #Valid_Job = 1

 FROM PS_CONTRACT C
WHERE C.EMPLID = &J1.EMPLID
  AND C.EMPL_RCD = &J1.EMPL_RCD
  AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_CONTRACT C1
                  WHERE C1.EMPLID = C.EMPLID
                    AND C1.EMPL_RCD = C.EMPL_RCD
                    AND C1.EFFDT <= &J1.EFFDT)
end-SELECT

end-procedure GET-CONTRACT-DATA


!***********************************************************************
! READ-EMPLOYMENT-TEACHING-TABLE
! Determines if the job record is reportable from the Employment
! Teaching table.
!***********************************************************************
begin-procedure READ-EMPLOYMENT-TEACHING-TABLE

  let #Valid_Job = 0

  let $err-statement1 = 'HPH900CN, Select Error - READ-EMPLOYMENT-TEACHING-TABLE'
  let $err-statement2 = 'Bind Variable: $FT_OCT_1_DT: '||$FT_Oct_1_Dt

begin-SELECT on-error=Error-Display
'X'

  let #Valid_Job = 1

  FROM PS_HP_EMPLT_TEACH ET
WHERE ET.EMPLID = &J1.EMPLID
  AND ET.EMPL_RCD = &J1.EMPL_RCD
  AND ET.DATA_KEY1_DT = (SELECT max(ET1.DATA_KEY1_DT)
                           FROM PS_HP_EMPLT_TEACH ET1
                          WHERE ET1.EMPLID = ET.EMPLID
                            AND ET1.EMPL_RCD = ET.EMPL_RCD
                            AND ET1.DATA_KEY1_DT <= {Datetimein-prefix}$FT_Oct_1_Dt{Datetimein-suffix})
  AND ET.HP_COLLAPSE_INDC = 'N'
  AND ET.HP_STATS_RPT_FLAG IN ('F','B')
end-SELECT

  if not #Valid_Job

     do READ-JOBCODE-RECORD

  end-if

end-procedure READ-EMPLOYMENT-TEACHING-TABLE


!***********************************************************************
! READ-JOBCODE-RECORD
! Determines if the job record is reportable from the JobCode table.
!***********************************************************************
begin-procedure READ-JOBCODE-RECORD

  #ifdef debugx
     display '$Business_Unit = ' noline
     display $Business_Unit
     display '$SetId = ' noline
     display $SetId
     display '$AsOfToday = ' noline
     display $AsOfToday
  #endif

  let $err-statement1 = 'HPH900CN, Select Error - READ-JOBCODE-RECORD'
  let $err-statement2 = 'Bind Variable: $ASOFTODAY: '||$AsOfToday

begin-SELECT on-error=Error-Display
JC.SETID

  let #Valid_Job = 1

 FROM PS_JOBCODE_TBL JC
WHERE JC.SETID = $SetId
  AND JC.JOBCODE = &J1.JOBCODE
  AND JC.EFFDT = (SELECT MAX(JC1.EFFDT)
                   FROM PS_JOBCODE_TBL JC1
                  WHERE JC1.SETID = JC.SETID
                    AND JC1.JOBCODE = JC.JOBCODE
                    AND JC1.EFFDT <= {Datetimein-prefix}$FT_Oct_1_Dt{Datetimein-suffix})
 AND JC.EFF_STATUS = 'A'
 AND JC.HP_STATS_RPT_FLAG IN ('F','B')
end-SELECT

end-procedure READ-JOBCODE-RECORD


!***********************************************************************
! PROCESS-EMPLOYEE
! Processes the selected reportable job.
!***********************************************************************
begin-procedure PROCESS-EMPLOYEE

  let #x = 0
  let #last_array = #Arraynum - 1

  while #x <= #last_array

    get $Emplid    from JOB(#x) Job_Emplid
    get #EmplRcd   from JOB(#x) Job_EmplRcd
    get $ValidFlag from JOB(#x) Job_ValidFlag

    if $ValidFlag = 'Y'

       move 0 to #PrevYr_Exists
       move 0 to #CurrYr_Exists

       let $Resident = 'Y'
       let $Visiting = 'N'
       let $PrevEmplt = '99'
       let $Province = ' '
       let $Country = $Country_Dflt
       let $SalStat = '1'

       let $err-statement1 = 'HPH900CN, Select Error - PROCESS-EMPLOYEE'
       let $err-statement2 = 'Bind Variable: #STATS_CAN_YR: '||edit(#Stats_Can_Yr,'0000')

       do GET-FACULTY

       if (#PrevYr_Exists) and not (#CurrYr_Exists)

          do INSERT-MEMBER-RECORD

       else

          if (#CurrYr_Exists) and (&FM.EMPL_RCD != #EmplRcd)

             let $EmplRcdNum_Old = edit(&FM.EMPL_RCD,'0')

             do UPDATE-MEMBER-RECORD

             let $EmplRcdNum_New = edit(#EmplRcd,'0')

             let $Msg1 = 'Warning: Faculty Member record already exists but the reportable EMPL_RCD'
             let $Msg2 = 'has been changed from ' || $EmplRcdNum_Old || ' to ' || $EmplRcdNum_New
             do PRINT-ERROR

          else

             if not (#PrevYr_Exists) and not (#CurrYr_Exists)

                do INSERT-MEMBER-RECORD

             end-if

          end-if

       end-if

       break

    end-if

    let #x = #x + 1

  end-while

end-procedure PROCESS-EMPLOYEE


!***********************************************************************
! Get faculty data - previous year and current year
!***********************************************************************
begin-procedure GET-FACULTY

begin-SELECT on-error=Error-Display
FM.EMPL_RCD
FM.HP_STATS_CAN_YR
FM.HP_RESIDENT_STATUS
FM.HP_VISITING_FLAG
FM.HP_PREV_EMPLYMNT
FM.PROVINCE
FM.COUNTRY
FM.HP_SALARY_STATUS

   if &FM.HP_STATS_CAN_YR = #Stats_Can_Yr - 1

      move 1 to #PrevYr_Exists

      let $Resident = &FM.HP_RESIDENT_STATUS
      let $Visiting = &FM.HP_VISITING_FLAG
      let $PrevEmplt = &FM.HP_PREV_EMPLYMNT
      let $Province = &FM.PROVINCE
      let $Country = &FM.COUNTRY
      let $SalStat = &FM.HP_SALARY_STATUS

   else

      move 1 to #CurrYr_Exists

   end-if

FROM PS_HP_STATS_FT_MBR FM
WHERE FM.EMPLID = $Emplid
  AND FM.HP_STATS_CAN_YR >= (#Stats_Can_Yr - 1)
  AND FM.HP_STATS_CAN_YR <= #Stats_Can_Yr
ORDER BY HP_STATS_CAN_YR DESC
end-SELECT

end-procedure


!***********************************************************************
! READ-INSTALLATION-TABLE
!***********************************************************************
begin-procedure READ-INSTALLATION-TABLE

  let $err-statement1 = 'HPH900CN, Select Error - READ-INSTALLATION-TABLE'
  let $err-statement2 = 'No bind variables'

begin-SELECT on-error=Error-Display
I.COUNTRY

   let $Country_Dflt = &I.COUNTRY

 FROM PS_INSTALLATION I
end-SELECT

end-procedure READ-INSTALLATION-TABLE


!***********************************************************************
! GET-VALUES
!***********************************************************************
begin-procedure GET-VALUES
end-procedure GET-VALUES


!***********************************************************************
! GET-PARAMETER-VALUES
! Gets the run control parameters.
!***********************************************************************
begin-procedure GET-PARAMETER-VALUES

  do Convert-To-DTU-Date($FT_Rpt_Start_Dt, $FT_Start_Dtu_Dt)
  do Convert-To-DTU-Date($FT_Rpt_End_Dt, $FT_End_Dtu_Dt)

  do Dtu-Parse-Date($FT_Start_Dtu_Dt,#dtu_yr, #dtu_mo, #dtu_da)
  do Dtu-Format-Date(#dtu_yr, 10, 1, $FT_Oct_1_Dt_Wk)

  !*** Convert YYMMDD format for Oct 1 to Native format ****
  do Convert-From-DTU-Date($FT_Oct_1_Dt_Wk, $FT_Oct_1_Dt)

  let #Stats_Can_Yr = #dtu_yr
  let $Date_Head = 'Reporting Period ' || $FT_Start_Dtu_Dt || ' To ' || $FT_End_Dtu_Dt

end-procedure GET-PARAMETER-VALUES



!***********************************************************************
! PRINT-ERROR
! Prints the detail line on the exception report.
!***********************************************************************
begin-procedure PRINT-ERROR

  let #x = 0
  let #last_array = #Arraynum - 1

  while #x <= #last_array

    get $Emplid     from JOB(#x) Job_Emplid
    get #EmplRcd    from JOB(#x) Job_EmplRcd
    get $Name       from JOB(#x) Job_Name
    get $BusUnit    from JOB(#x) Job_BusUnit
    get $Setid      from JOB(#x) Job_Setid
    get $Jobcode    from JOB(#x) Job_JobCode
    get $ValidFlag  from JOB(#x) Job_ValidFlag
    get $NoContract from JOB(#x) Job_NoContract

    let $EmplRcd = edit(#EmplRcd,'0')

    print $Emplid               (+1,1)
    print $EmplRcd              (,15,13)
    print $Name                 (,30,16)

    if $ValidFlag = 'Y'

       if #More_Than_One_Job

          let $Msg = 'Employee has more than 1 valid appointment (more than one EMPL_RCD). Job skipped.'
          print $Msg            (,65,49)

       end-if

    else

       if $NoContract = 'Y'

          let $Msg = 'Contract data for the job cannot be found. Job skipped.'
          print $Msg            (,65,49)

       else

          let $Msg = 'Job is not reportable for FT Canadian Academic Teaching Survey'
          print $Msg            (,65,49)
          let $Msg = 'Business Unit: '||$BusUnit||', SetId: '||$Setid||', Jobcode: '||$Jobcode
          print $Msg            (+1,65,49)

       end-if

    end-if
    print ' '                   (+1,1)

    let #x = #x + 1

  end-while

end-procedure PRINT-ERROR


!***********************************************************************
! This is the routine that updates the Member record                   *
!***********************************************************************
begin-procedure UPDATE-MEMBER-RECORD

  let $err-statement1 = 'HPH900CN, Update Error - UPDATE-MEMBER-RECORD'
  let $err-statement2 = 'Bind Variable: #STATS_CAN_YR: '||edit(#Stats_Can_Yr,'0000')

begin-SQL on-error=Error-Display
UPDATE PS_HP_STATS_FT_MBR
   SET EMPL_RCD =  #EmplRcd
 WHERE EMPLID = $Emplid
   AND HP_STATS_CAN_YR = #Stats_Can_Yr
end-SQL

end-procedure PRINT-EXCEPTION


!***********************************************************************
! INSERT-MEMBER-RECORD
!***********************************************************************
begin-procedure INSERT-MEMBER-RECORD

  let $err-statement1 = 'HPH900CN, Insert Error - INSERT-MEMBER-RECORD'
  let $err-statement2 = 'Bind Variables: &J1.EMPLID: '||&J1.EMPLID||
                        ', #STATS_CAN_YR: '||edit(#Stats_Can_Yr,'0000')||
                        ', $RESIDENT: '||$Resident||', $VISITING: '||$Visiting||
                        ', $PREVEMPLT: '||$PrevEmplt||', $PROVINCE: '||$Province||
                        ', $COUNTRY: '||$Country||', &J1.EMPL_RCD: '||edit(&J1.EMPL_RCD,'0')||
                        ', $SALSTAT: '||$SalStat

begin-SQL on-error=Error-Display
INSERT INTO PS_HP_STATS_FT_MBR
       (EMPLID,
        HP_STATS_CAN_YR,
        HP_RESIDENT_STATUS,
        HP_VISITING_FLAG,
        HP_PREV_EMPLYMNT,
        PROVINCE,
        COUNTRY,
        EMPL_RCD,
        HP_SALARY_STATUS)
VALUES ($Emplid,
        #Stats_Can_Yr,
        $Resident,
        $Visiting,
        $PrevEmplt,
        $Province,
        $Country,
        #EmplRcd,
        $SalStat)
end-SQL

end-procedure INSERT-MEMBER-RECORD


!***********************************************************************
! WRAPUP
! Updates the reporting period table and ends the report.
!***********************************************************************
begin-procedure WRAPUP

  print 'End of Report' (+2,1)

  do UPDATE-RPTNG-PERIOD-TABLE
  do DELETE-RUN-CONTROL
  do RESET
  do STDAPI-TERM

  do GET-CURRENT-DATETIME
  display 'Report ended at: ' NoLine
  display &SysDateTime
  display ''

end-procedure WRAPUP


!***********************************************************************
! DELETE RUN CONTROL
! Deletes run control information from run control table.
!***********************************************************************
begin-procedure DELETE-RUN-CONTROL

  let $err-statement1 = 'HPH900CN, Delete-Error - DELETE-RUN-CONTROL'
  let $err-statement2 = 'Bind Variables: $PRCS_OPRID: '||$Prcs_OprID||
                        ', $PRCS_RUN_CNTL_ID: '||$Prcs_Run_Cntl_ID


begin-SQL On-Error=Error-Display
DELETE FROM PS_RUN_CNTL_EG
WHERE OPRID       = $Prcs_OprID
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL

end-procedure DELETE-RUN-CONTROL


!***********************************************************************
! SQCs
!***********************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Date math routine
#Include 'stdapi.sqc'    !Update Process API
#Include 'getsetid.sqc'  !Get SetId
#Include 'hprnctl1.sqc'  !Get Statistics Canada run parameters
#Include 'egrnctl1.sqc'  !Get E&G run control parameters
#Include 'stderror.sqc'  !Routine for error display
