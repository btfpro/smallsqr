!***********************************************************************
!  FPA1200:             Attendance Time                                *
!                       Employees to be Rated                          *
!                                                                      *
!***********************************************************************
!
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2007/02/04:23:38:16                                 
!       $Release:  HR9                                                 
!    $Resolution:  688700                                              
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'         ! Set environment
#include 'setup01.sqc'        ! Printer and page-size initialization


BEGIN-REPORT

Do Init-DateTime
Do Init-Number
Do Get-Current-DateTime()
Do Init-Report
Do Main-Process
do Stdapi-Term

END-REPORT


!***************************************************************
!
!
!       Init-Report
!
!
!***************************************************************

BEGIN-PROCEDURE  Init-Report
move 'FPA1200' to  $ReportID

do Stdapi-Init
do Security-Param       !SQR security

If $prcs_process_instance = ''

        INPUT $FromDate 'Enter Review Start Date (MM/DD/YY) '
        INPUT $ThruDate 'Enter Review End Date (MM/DD/YY) '


        Do Ask-From-Thru-Date
        INPUT $E_Setid 'Enter Dept Setid'
        Let $E_Setid = rtrim($E_Setid,' ')
        INPUT $E_Deptid 'Enter Dept Id'
        Let $E_Deptid = rtrim($E_Deptid,' ')

else
        Do FP-Select-Parameters
        Do Select-Parameters
End-if

END-PROCEDURE Init-Report



!***************************************************************
!
!
!       Get-Values
!
!
!***************************************************************
BEGIN-PROCEDURE  Get-Values
! Do Get-Calendar-Year
!---------------------

        Do Get-From-Thru-Date

 END-PROCEDURE



!*********************************
BEGIN-PROCEDURE Main-Process
!*********************************

! Delete existing rows from the Attendance Time Record
!-----------------------------------------------------
let $sql-statement = 'FPA1200.SQR, Main-Process,Delete,FPA_RATPRS_TBL'
        BEGIN-SQL   On-Error=SQL-Error
                DELETE FROM PS_FPA_RATPRS_TBL
        END-SQL

! Initialize variables regarding the entire process
!--------------------------------------------------
Do Init-Var1

! initialize variables regarding employee record
!-----------------------------------------------
Do Init-Var2


let $sql-statement = 'FPA1200.SQR, Main-Process,Select,FPA_RATPRS_TBL'
BEGIN-Select

X.EMPLID        (+1,1,2) ON-BREAK PRINT=NEVER LEVEL=1
X.EMPL_RCD     (,+2,10) ON-BREAK PRINT=NEVER LEVEL=2 AFTER=Update-Rcd
{DATEOUT-PREFIX}X.EFFDT{DATEOUT-SUFFIX} &X.EFFDT
X.EFFSEQ
X.FP_RANK_CD
X.FP_SETID_RANK
X.FP_RATING_PRS_FLG
Y.DEPTID
Y.SETID_DEPT

    ! initialize variables for each selected row
    !-------------------------------------------
    Do Init-Var3
    Do Process-Row

FROM PS_JOB_JR X,PS_JOB Y
     ,PS_FPFAST_PERS_VW2 SCRTY       !SQR security

WHERE X.EMPLID=Y.EMPLID
and X.EMPL_RCD=Y.EMPL_RCD
and X.EFFDT=Y.EFFDT
and X.EFFSEQ=Y.EFFSEQ
and X.EFFSEQ = (select max(X1.EFFSEQ)
                from PS_JOB_JR X1
                where X1.EMPLID = X.EMPLID
                and X1.EMPL_RCD = X.EMPL_RCD
                and X1.EFFDT = X.EFFDT)
and (X.EFFDT = (select max(X2.EFFDT)
                from PS_JOB_JR X2
                where X2.EMPLID = X.EMPLID
                and X2.EMPL_RCD = X.EMPL_RCD
                and X2.EFFDT <= {DATEIN-PREFIX}$Fromdate{DATEIN-SUFFIX})
    or X.EFFDT >= {DATEIN-PREFIX}$Fromdate{DATEIN-SUFFIX})
and X.EFFDT <= {DATEIN-PREFIX}$Thrudate{DATEIN-SUFFIX}
[$dept_where]

and Y.EMPLID = SCRTY.EMPLID     !
and Y.EMPL_RCD = SCRTY.EMPL_RCD !SQR security
    [$SecurityClause]           !

order by X.EMPLID, X.EMPL_RCD, X.EFFDT

END-Select

END-PROCEDURE Main-Process



!*********************************
BEGIN-PROCEDURE Init-Var1
!*********************************

! Initialize variables regarding the entire process
!--------------------------------------------------

Let $E_Setid = rtrim(&RUN_CNTL_HR.SETID, ' ')
Let $E_Deptid = rtrim(&RUN_CNTL_HR.DEPTID, ' ')
let $dept_where = ''

if $E_Deptid != ''

    let $dept_where = 'and ''' || $E_Setid || ''' = (select P1.SETID_DEPT from PS_FPAEEPOST_TBL P1'
    let $dept_where = $dept_where || ' where P1.EMPLID = X.EMPLID and P1.EMPL_RCD = X.EMPL_RCD and '
    let $dept_where = $dept_where || ' P1.EFFDT = (select max(PP1.EFFDT) from PS_FPAEEPOST_TBL PP1'
    let $dept_where = $dept_where || ' where PP1.EMPLID = P1.EMPLID and PP1.EMPL_RCD = P1.EMPL_RCD and '
    let $dept_where = $dept_where || ' PP1.EFFDT <=  {DATEIN-PREFIX}''' || $Thrudate || ''' {DYN-DateIn-Suffix}'
    let $dept_where = $dept_where || '))'
    let $dept_where = $dept_where || ' and ''' || $E_Deptid || ''' = (select P2.DEPTID from PS_FPAEEPOST_TBL P2'
    let $dept_where = $dept_where || ' where P2.EMPLID = X.EMPLID and P2.EMPL_RCD = X.EMPL_RCD and '
    let $dept_where = $dept_where || ' P2.EFFDT = (select max(PP2.EFFDT) from PS_FPAEEPOST_TBL PP2'
    let $dept_where = $dept_where || ' where PP2.EMPLID = P2.EMPLID and PP2.EMPL_RCD = P2.EMPL_RCD and '
    let $dept_where = $dept_where || ' PP2.EFFDT <=  {DATEIN-PREFIX}''' || $Thrudate || ''' {DYN-DateIn-Suffix}'
    let $dept_where = $dept_where || '))'

end-if

#ifdef debugi
    display ' '
    display 'PROCEDURE Init-Var1'
    display '$dept_where : ' noline
    display $dept_where
#endif

Do Convert-To-DTU-Date($Fromdate,$Begin_Date)
Do Convert-To-DTU-Date($Thrudate,$End_Date)

! Initialize the total duration of the period
!--------------------------------------------

#ifdef debugi
    display '$Begin_Date : ' noline
    display $Begin_Date
    display '$End_Date : ' noline
    display $End_Date
#endif

Do FP-Calc-Dur('T',$Begin_Date,$End_Date,#Years,#Months,#Days)

#ifdef debugi
    display '#Years : ' noline
    display #Years
    display '#Months : ' noline
    display #Months
    display '#Days : ' noline
    display #Days
#endif

! Convert duration in number of days
!-----------------------------------
Let #TP_Tot = #Days + (#Months * 30) + (#Years * 360)

let $const = 'const'

END-PROCEDURE Init-Var1



!*********************************
BEGIN-PROCEDURE Init-Var2
!*********************************

! Initialize variables regarding employee record
!-----------------------------------------------
Let #tot_rest = #TP_tot
Let #rank_rest = #TP_tot
Let #dept_rest = #TP_tot

Let $empld = ''
Let #empld_rcd = 0
Let $set_rank = ''
Let $rank = ''
Let $set_deptid = ''
Let $deptid = ''
Let $prs = ''
Let $effdt_dtu = ''
Let $year_dt = ''
Let #TP_all = 0
Let $dept_dt = ''
Let #TP_dept = 0
Let $rank_dt = ''
Let #TP_rank = 0
let $begin_period_rank = $Begin_date
let $begin_period_dept = $Begin_date

END-PROCEDURE Init-Var2



!*********************************
BEGIN-PROCEDURE Init-Var3
!*********************************

! Initialize variables for each selected row
! store prior values
!-------------------------------------------
let $pr_empld = $empld
let #pr_empld_rcd = #empld_rcd
Let $prior_set_rank = $set_rank
Let $prior_rank = $rank
Let $prior_set_deptid = $set_deptid
Let $prior_deptid = $deptid

if $prs != ''
    Let $prior_prs = $prs
else
    Let $prior_prs = 'Y'
end-if

Let $empld = rtrim(&X.EMPLID,' ')
Let $effdt = &X.EFFDT
Do Convert-To-DTU-Date ($effdt,$effdt_dtu)
Let #empld_rcd = &X.EMPL_RCD
Let #effseq = &X.EFFSEQ
Let $rank = rtrim(&X.FP_RANK_CD ,' ')
Let $set_rank = rtrim(&X.FP_SETID_RANK,' ')
Let $prs = rtrim(&X.FP_RATING_PRS_FLG,' ')
Let $deptid = rtrim(&Y.DEPTID,' ')
Let $set_deptid = rtrim(&Y.SETID_DEPT,' ')

#ifdef debugi
    display ' '
    display 'PROCEDURE Init-Var3'
    display '$empld : '         noline
    display $empld
    display '$effdt : '         noline
    display $effdt
    display '#empld_rcd : '     noline
    display #empld_rcd
    display '$rank : '          noline
    display $rank
    display '$set_rank : '      noline
    display $set_rank
    display '$prs : '           noline
    display $prs
    display '$deptid : '        noline
    display $deptid
    display '$set_deptid : '    noline
    display $set_deptid
#endif

END-PROCEDURE Init-Var3



!*********************************
BEGIN-PROCEDURE Process-Row
!*********************************
#ifdef debugi
    display ' '
    display 'PROCEDURE Process-Row'
#endif

if $empld = $pr_empld and #empld_rcd = #pr_empld_rcd

    ! calculate leaves for the entire period
    !---------------------------------------
    let $type = 'A'
    Do Presence-Calc($const, $const, $const, $const, $prs, $prior_prs, $effdt_dtu, $type,
                                $begin_period_all, $year_dt, #TP_all, #tot_rest)

    ! calculate leaves for the current department
    !--------------------------------------------
    let $type = 'S'
    Do Presence-Calc($set_deptid, $deptid, $prior_set_deptid, $prior_deptid, $prs, $prior_prs, $effdt_dtu, $type,
                                $begin_period_dept, $dept_dt, #TP_dept, #dept_rest)
    if $rank != ''
        ! calculate leaves for the current grade
        !---------------------------------------
        let $type = 'G'
        Do Presence-Calc($set_rank, $rank, $prior_set_rank, $prior_rank, $prs, $prior_prs, $effdt_dtu, $type,
                                $begin_period_rank, $rank_dt, #TP_rank, #rank_rest)
    end-if

else        ! new employee record

    ! the employee record has been created during the period
    !-------------------------------------------------------
    if $effdt_dtu >  $Begin_Date

        ! Initialize the remaining period
        !--------------------------------
        Do FP-Calc-Dur('T',$effdt_dtu,$End_Date,#Years,#Months,#Days)

        ! Convert duration in number of days
        !-----------------------------------
        Let #TP_Tot_bis = #Days + (#Months * 30) + (#Years * 360)

        Let #tot_rest = #TP_tot_bis
        Let #rank_rest = #TP_tot_bis
        Let #dept_rest = #TP_tot_bis

    end-if


    ! calculate leaves for the entire period
    !---------------------------------------
    let $type = 'A'
    Do Presence-Calc-New($const, $const, $const, $const, $prs, $prior_prs, $effdt_dtu, $type,
                                $begin_period_all, $year_dt, #TP_all, #tot_rest)

    ! calculate leaves for the current department
    !--------------------------------------------
    let $type = 'S'
    Do Presence-Calc-New($set_deptid, $deptid, $prior_set_deptid, $prior_deptid, $prs, $prior_prs, $effdt_dtu, $type,
                                $begin_period_dept, $dept_dt, #TP_dept, #dept_rest)
    if $rank != ''
        ! calculate leaves for the current grade
        !---------------------------------------
        let $type = 'G'
        Do Presence-Calc-New($set_rank, $rank, $prior_set_rank, $prior_rank, $prs, $prior_prs, $effdt_dtu, $type,
                                $begin_period_rank, $rank_dt, #TP_rank, #rank_rest)
    end-if

end-if

#ifdef debugi
    display 'End of Process-Row'
#endif

END-PROCEDURE Process-Row



!*********************************
BEGIN-PROCEDURE Presence-Calc($cur_setid, $current_val, $pr_setid, $prior_val, $current_prs, $pr_prs, $current_effdt, $type,
                                :$begin_period_dtu, :$begin_calc_dt, :#calc_tp, :#remain)
!*********************************
#ifdef debugi
    display ' '
    display 'PROCEDURE Presence-Calc'
    display  '$cur_setid : '    noline
    display  $cur_setid
    display  '$pr_setid : '     noline
    display  $pr_setid
    display  '$current_val : '  noline
    display  $current_val
    display  '$prior_val : '    noline
    display  $prior_val
#endif

if $cur_setid = $pr_setid and $current_val = $prior_val

! grade, department unchanged
!----------------------------
    if $current_prs = 'N'
        if $pr_prs = 'Y'

            ! change from attendance civil service position to leave civil service position.
            ! initialize period to be computed
            !------------------------------------------------------------------------------

            #ifdef debugi
                display '****** 1 ******'
            #endif

            if $current_effdt > $_Begin_Date
                let $begin_calc_dt = $current_effdt
            else
                let $begin_calc_dt = $_Begin_Date
            end-if

        end-if
    end-if

    if $current_prs = 'Y'
        if $pr_prs = 'N'

            ! change from leave civil service position to attendance civil service position
            ! initialize period to be computed
            !------------------------------------------------------------------------------

            #ifdef debugi
                display '****** 2 ******'
                display '$begin_calc_dt : ' noline
                display $begin_calc_dt
                display '$current_effdt : ' noline
                display $current_effdt
            #endif

            Do Ratprs-Calc ($begin_calc_dt,$current_effdt,#tp)
            let #calc_tp = #calc_tp + #tp

            #ifdef debugi
                display '#calc_tp : ' noline
                display #calc_tp
            #endif

        end-if
    end-if

else            !new employee record

    if $prior_val = ''
        if $current_prs = 'N'
            ! initialize period to be computed
            !---------------------------------

            #ifdef debugi
                display '****** 3 ******'
            #endif

            if $current_effdt > $_Begin_Date
                let $begin_calc_dt = $current_effdt
            else
                let $begin_calc_dt = $_Begin_Date
            end-if

        end-if
    else
        ! change of grade, department
        !----------------------------

        #ifdef debugi
            display '****** 4 ******'
        #endif

        if $pr_prs = 'N'

        ! period to be computed
        !----------------------
            let #tp = 0
            if $begin_calc_dt != ''

                #ifdef debugi
                    display '$begin_calc_dt : ' noline
                    display $begin_calc_dt
                    display '$current_effdt : ' noline
                    display $current_effdt
                #endif

                Do Ratprs-Calc ($begin_calc_dt,$current_effdt,#tp)

                #ifdef debugi
                    display '#tp : ' noline
                    display #tp
                #endif

            end-if
            let #calc_tp = #calc_tp + #tp

        end-if

        ! calculate remaining time between effective date and end date
        !-------------------------------------------------------------
        Do Ratprs-Calc ($current_effdt,$_End_Date,#remain_tp)

        ! attendance time = (grade or department duration) - (leave duration)
        !--------------------------------------------------------------------

        #ifdef debugi
            display  '#remain : '       noline
            display  #remain
            display  '#remain_tp : '    noline
            display  #remain_tp
        #endif

        let #calc_prs = #remain - #remain_tp - #calc_tp

        #ifdef debugi
            display '#calc_prs : ' noline
            display #calc_prs
        #endif

        let $ratprs_gr = 'N'
        Do Convert-From-DTU-Date($begin_period_dtu,$begin_period)

        ! update attendance time record for prior grade or department
        !------------------------------------------------------------
        evaluate $type

        when = 'G'
            let $set_dept = ' '
            let $dept = ' '
            Do Insert-Ratprs($_empld,#_empld_rcd,$begin_period,$type,$ratprs_gr,
                                $_Fromdate, $_Thrudate,$pr_setid,$prior_val,$set_dept,$dept,#calc_prs)
        when = 'S'
            let $setid_rk = ' '
            let $rank_cd = ' '
            Do Insert-Ratprs($_empld,#_empld_rcd,$begin_period,$type,$ratprs_gr,
                                $_Fromdate,$_Thrudate,$setid_rk,$rank_cd,$pr_setid,$prior_val,#calc_prs)
        end-evaluate

        ! re-initialize variables
        !------------------------
        let $begin_period_dtu = $current_effdt
        let #calc_tp = 0
        let #remain = #remain_tp
    end-if
end-if

#ifdef debugi
    display 'End of Presence-Calc'
#endif

END-PROCEDURE Presence-Calc



!*********************************
BEGIN-PROCEDURE Presence-Calc-New($cur_setid, $current_val, $pr_setid, $prior_val, $current_prs, $pr_prs, $current_effdt, $type,
                                :$begin_period_dtu, :$begin_calc_dt, :#calc_tp, :#remain)
!*********************************

#ifdef debugi
    display ' '
    display 'PROCEDURE Presence-Calc-New'
#endif

!YVG? if $prior_val = ''
    if $current_prs = 'N'
        ! initialize period to be computed
        !---------------------------------

        #ifdef debugi
            display '****** 3 ******'
        #endif

        if $current_effdt > $_Begin_Date
            let $begin_calc_dt = $current_effdt
        else
            let $begin_calc_dt = $_Begin_Date
        end-if

    end-if
!YVG? end-if

#ifdef debugi
    display '$begin_calc_dt : ' noline
    display $begin_calc_dt
    display 'End of Presence-Calc-New'
#endif

END-PROCEDURE Presence-Calc-New



!*********************************
BEGIN-PROCEDURE Update-Rcd
!*********************************

! update attendance time before employee record change
!-----------------------------------------------------

! End of attendance time calculation
!-----------------------------------

#ifdef debugi
    display ' '
    display 'PROCEDURE Update-Rcd'
#endif

if $empld != ''
    if $prs = 'N'

        ! calculate leave duration till the end of period
        ! Total Attendance Time
        !------------------------------------------------
        let #end_tp = 0
        if $year_dt = ''
           let $year_dt = $Begin_date
        end-if

        #ifdef debugi
            display '$year_dt : '   noline
            display $year_dt
            display '$End_date : '  noline
            display $End_date
        #endif

        Do Ratprs-Calc ($year_dt,$End_date,#end_tp)
        let #TP_all = #TP_all + #end_tp

        #ifdef debugi
            display '#TP_all : '    noline
            display #TP_all
        #endif

        ! Attendance time in department
        !------------------------------
        let #end_dept_tp = 0
        if $dept_dt = ''
           let $dept_dt = $Begin_date
        end-if

        Do Ratprs-Calc ($dept_dt,$End_date,#end_dept_tp)
        let #TP_dept = #TP_dept + #end_dept_tp

        if $rank != ''
            ! Attendance time in grade
            !-------------------------
            let #end_rank_tp = 0
            if $rank_dt = ''
                let $rank_dt = $Begin_date
            end-if

            Do Ratprs-Calc ($rank_dt,$End_date,#end_rank_tp)
            let #TP_rank = #TP_rank + #end_rank_tp
        end-if

    end-if

    ! Total Attendance Time
    !----------------------
    !YVG? let $type = 'A'
    let $ratprs = 'N'
    let #all_prs = #tot_rest - #TP_all
    let $no_val = ' '
    !YVG? Do Insert-Ratprs ($empld,#empld_rcd,$Fromdate,$type,$ratprs,$Fromdate,$Thrudate,
    !YVG?                                $no_val,$no_val,$no_val,$no_val,#all_prs)

    ! attendance time in department
    !------------------------------
    let $type = 'S'
    let #dept_prs = #dept_rest - #TP_dept
    Do Convert-From-DTU-Date($begin_period_dept,$begin_dept)
    Do Insert-Ratprs ($empld,#empld_rcd,$begin_dept,$type,$ratprs,$Fromdate,$Thrudate,
                                    $no_val,$no_val,$set_deptid,$deptid,#dept_prs)

    Do Select-Max($empld,#empld_rcd,$type,$effdt_max,$max_setdept,$max_dept)

    #ifdef debugi
        display '$effdt_max before Update-Ratprs : ' noline
        display $effdt_max
    #endif

    Do Update-Ratprs ($empld,#empl_rcd,$effdt_max,$type)

    #ifdef debugi
        display '$effdt_max after Update-Ratprs : ' noline
        display $effdt_max
    #endif

    let $max_setrank = $no_val
    let $max_rank = $no_val

    if $rank != ''
        ! attendance time in grade
        !-------------------------
        let $type = 'G'
        let #rank_prs = #rank_rest - #TP_rank
        Do Convert-From-DTU-Date($begin_period_rank,$begin_rank)
        Do Insert-Ratprs ($empld,#empld_rcd,$begin_rank,$type,$ratprs,$Fromdate,$Thrudate,
                                    $set_rank,$rank,$no_val,$no_val,#rank_prs)
        Do Select-Max($empld,#empld_rcd,$type,$effdt_max,$max_setrank,$max_rank)
        Do Update-Ratprs ($empld,#empl_rcd,$effdt_max,$type)
    end-if

    ! Total Attendance Time
    !----------------------
    let $type = 'A'
    Do Insert-Ratprs ($empld,#empld_rcd,$Fromdate,$type,$ratprs,$Fromdate,$Thrudate,
                                    $max_setrank,$max_rank,$max_setdept,$max_dept,#all_prs)

    Do Init-Var2

end-if

#ifdef debugi
    display 'End of Update-Rcd'
#endif

END-PROCEDURE Update-Rcd



!*********************************
BEGIN-PROCEDURE Ratprs-Calc ($beg_dt,$end_dt,:#TP)
!*********************************

#ifdef debugi
    display ' '
    display 'PROCEDURE Ratprs-Calc'
#endif

do dtu-subtract-days($end_dt,1,$end_date)

! Calculate Attendance Time
!--------------------------
Do FP-Calc-Dur ('T',$beg_dt,$end_date,#Years,#Months,#Days)

! Convert Attendance Time in number of days
!------------------------------------------
Let #TP = #Days + (#Months * 30) + (#Years * 360)

#ifdef debugi
    display '#TP : ' noline
    display #TP
#endif

END-PROCEDURE Ratprs-Calc



!*********************************
BEGIN-PROCEDURE Insert-Ratprs ($emplid,#empl_rcd,$effdt,$prs,$ratprs_gr,$begin_dt,$end_dt ,
                $setid_rk,$rank_cd,$set_dept,$dept,#ratprs)
!*********************************

#ifdef debugi
    display ' '
    display 'PROCEDURE Insert-Ratprs'
    display '$emplid : '    noline
    display $emplid
    display '#empl_rcd : '  noline
    display #empl_rcd
    display '$effdt : '     noline
    display $effdt
    display '$prs : '       noline
    display $prs
    display '$ratprs_gr : ' noline
    display $ratprs_gr
    display '$begin_dt : '  noline
    display $begin_dt
    display '$end_dt : '    noline
    display $end_dt
    display '$setid_rk : '  noline
    display $setid_rk
    display '$rank_cd : '   noline
    display $rank_cd
    display '$set_dept : '  noline
    display $set_dept
    display '$dept : '      noline
    display $dept
    display '#ratprs : '    noline
    display #ratprs
#endif

Let $sql-statement = 'FPA1200.SQR, Insert-Ratprs ,Insert,FPA_RATPRS_TBL'
BEGIN-SQL   On-Error=SQL-Error

! Insert row in FPA_RATPRS_TBL
!-----------------------------

INSERT INTO PS_FPA_RATPRS_TBL
(EMPLID,
EMPL_RCD,
EFFDT,
FP_TYPE_BRK,
FP_RATPRS_GR,
FP_BEGIN_DT_RATING,
FP_END_DT_RATING,
FP_SETID_RANK,
FP_RANK_CD,
SETID_DEPT,
DEPTID,
FP_RATING_PRS)
VALUES
($emplid,
#empl_rcd,
{DATEIN-PREFIX}$effdt{DATEIN-SUFFIX},
$prs,
$ratprs_gr,
{DATEIN-PREFIX}$begin_dt{DATEIN-SUFFIX},
{DATEIN-PREFIX}$end_dt{DATEIN-SUFFIX},
$setid_rk,
$rank_cd,
$set_dept,
$dept,
#ratprs)

END-SQL

#ifdef debugi
    display 'End of Insert-Ratprs'
#endif

END-PROCEDURE Insert-Ratprs



!*********************************
BEGIN-PROCEDURE Select-Max($emplid,#emplrcd,$type_brk,:$effdate,:$max_setid,:$max_val)
!*********************************

! select row with the maximum attendance time in grade or department
! in case of equivalent time, the max date is selected
!--------------------------------------------------------------------

Let $sql-statement = 'FPA1200.SQR, Select-Max ,Select,FPA_RATPRS_TBL'
BEGIN-SELECT   On-Error=SQL-Error

{DATEOUT-PREFIX}M.EFFDT{DATEOUT-SUFFIX} &M.EFFDT
M.FP_SETID_RANK
M.FP_RANK_CD
M.SETID_DEPT
M.DEPTID

    let $effdate = &M.EFFDT
    evaluate $type_brk
    when = 'S'
        let  $max_setid = rtrim(&M.SETID_DEPT,' ')
        let  $max_val = rtrim(&M.DEPTID,' ')
    when = 'G'
        let  $max_setid = rtrim(&M.FP_SETID_RANK,' ')
        let  $max_val = rtrim(&M.FP_RANK_CD,' ')
    end-evaluate

from PS_FPA_RATPRS_TBL M
    ,PS_FPFAST_PERS_VW2 SCRTY       !SQR security

where M.EMPLID = $emplid
and M.EMPL_RCD = #emplrcd
and M.FP_TYPE_BRK = $type_brk
and M.FP_RATING_PRS = (select max(M1.FP_RATING_PRS)
                    from PS_FPA_RATPRS_TBL M1
                    where M1.EMPLID = M.EMPLID
                    and M1.EMPL_RCD = M.EMPL_RCD
                    and  M1.FP_TYPE_BRK =  M.FP_TYPE_BRK)
and M.EFFDT =  (select max(M2.EFFDT)
                    from PS_FPA_RATPRS_TBL M2
                    where M2.EMPLID = M.EMPLID
                    and M2.EMPL_RCD = M.EMPL_RCD
                    and  M2.FP_TYPE_BRK =  M.FP_TYPE_BRK
                    and M2.FP_RATING_PRS = M.FP_RATING_PRS)

and M.EMPLID = SCRTY.EMPLID         !
and M.EMPL_RCD = SCRTY.EMPL_RCD     !SQR security
    [$_SecurityClause]              !

END-Select

END-PROCEDURE Select-Max



!*********************************
BEGIN-PROCEDURE Update-Ratprs ($empl,#rcd,$dt,$pres)
!*********************************

! Update Majority Attendance Time flag for grade and department
!--------------------------------------------------------------

#ifdef debugi
    display ' '
    display 'PROCEDURE Update-Ratprs'
    display '$dt : ' noline
    display $dt
#endif

Let $sql-statement = 'FPA1200.SQR, Update-Ratprs ,Update,FPA_RATPRS_TBL'
BEGIN-SQL   On-Error=SQL-Error

UPDATE PS_FPA_RATPRS_TBL
SET FP_RATPRS_GR = 'Y'
WHERE EMPLID = $empl and
EMPL_RCD = #rcd and
EFFDT = {DATEIN-PREFIX}$dt{DATEIN-SUFFIX} and
FP_TYPE_BRK = $pres

END-SQL

END-PROCEDURE Update-Ratprs



!#include 'datetime.sqc'         ! Routines for date and time formatting
#include 'curdttim.sqc'         ! Get-Current-DateTime procedure
#include 'stdapi.sqc'           ! Routines to update run status
#Include 'hrrnctl1.sqc'         ! Get run control parameter values
#Include 'hrgetval.sqc'         ! Get values mask routines
#Include 'fprnctl1.sqc'         ! Get run control parameter values (FPS)
#Include 'fpgetval.sqc'         ! Get values mask routines (FPS)
#include 'askftd.sqc'           ! From Thru Date input
#include 'number.sqc'           ! Routines for date and time formatting
!#Include 'datemath.sqc'        ! Routines for date arithmetic
#Include 'hrsecty.sqc'          ! Get SQR Security parameters
#Include 'fptestdt.sqc'       ! Routines for date and time formatting(FPS)
