!***********************************************************************
! GBP003: Group Build Construction (Automated construction of groups)  *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
! SourceSafe Information:                                              *
!                                                                      *
!          $Date:  2006/07/19:12:58:10                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'        ! Set environment
#include 'setup31.sqc'       ! Init printer and page size

#define COMPANY_TBL
#define DEPT_TBL

begin-setup
create-array name=DeptArray size=50000
        field=DeptLine:char

create-array name=GrSecrArray size=50000
        field=SecrLine:char
end-setup
!----------------------------------------------------------------------!
! Main Procedure                                                       !
!----------------------------------------------------------------------!

begin-report
!#debugx  show 'begin-report'
   do Init-DateTime
   do Get-Current-DateTime
   do Initialize
   do Get-Run-Control-Parms
   do BuidGroups
   do Terminate
   do COMMIT-transaction
end-report

!----------------------------------------------------------------------!
!
!----------------------------------------------------------------------!

begin-procedure BuidGroups
!#debugx  show 'BuildGroups'

   do BuildCompanyGroup
   do BuildDepartmentGroup

end-procedure

!----------------------------------------------------------------------!
!
!----------------------------------------------------------------------!

begin-procedure BuildCompanyGroup
!#debugx  show 'BuildCompanyGroup'
!#debugx  show $AsOfToday
let $BuildCompanyBegan = 'N'
begin-SELECT ON-ERROR=SQL-ERROR
A.COMPANY     &COMPANY
{DATEOUT-PREFIX}A.EFFDT{DATEOUT-SUFFIX}       &COMPANY_EFFDT
A.DESCR       &COMPANY_DESCR
A.DESCRSHORT  &COMPANY_DESCRSHORT

   let $COMPANY                = &COMPANY
   let $COMPANY_EFFDT          = &COMPANY_EFFDT
   let $COMPANY_TBL-DESCR      = &COMPANY_DESCR
   let $COMPANY_TBL-DESCRSHORT = &COMPANY_DESCRSHORT
   DO  Get_Related_COMPANY_TBL(&COMPANY, $AsOfToday)

   do InsertCompany

FROM PS_COMPANY_TBL A
WHERE
A.EFFDT =
(
   SELECT MAX(EFFDT)
   FROM PS_COMPANY_TBL
   WHERE COMPANY = A.COMPANY
   AND EFFDT <= {DATEIN-PREFIX}$AsOfToday{DATEIN-SUFFIX}
)
AND A.EFF_STATUS = 'A'
end-SELECT

if $CompanyList <> ''
      let $CompanyList = rtrim(rtrim($CompanyList,' '),',')
      display $CompanyList
   end-if
end-procedure

!----------------------------------------------------------------------!
!
!----------------------------------------------------------------------!

begin-procedure InsertCompany
!#debugx  show 'InsertCompany'
let $bAlreadyInGroup = 'NO'
begin-SELECT ON-ERROR=SQL-ERROR
'X'                      &DUMMY1
   let $bAlreadyInGroup = 'YES'
FROM PS_GB_GROUP_TBL
WHERE GB_GROUP_ID = $COMPANY
AND  EFFDT = {DATEIN-PREFIX}$COMPANY_EFFDT{DATEIN-SUFFIX}
end-SELECT

if $bAlreadyInGroup = 'NO'

   if $BuildCompanyBegan = 'N'
     let $CompanyList = 'Companies added to Group Build Definition: ' || rtrim($COMPANY,' ')
     let $BuildCompanyBegan = 'Y'
   else
     let $CompanyList = $CompanyList || ', ' || rtrim($COMPANY,' ')
     let #l = length($CompanyList)
     if #l > 120
        display $CompanyList
        let $CompanyList = ''
     end-if
   end-if

   let $GB_GROUP_ID            = $COMPANY
   let $EFFDT                  = $COMPANY_EFFDT
   let $EFF_STATUS             = 'A'
   let $DESCR50                = $COMPANY_TBL-DESCR
   let $DESCRSHORT             = $COMPANY_TBL-DESCRSHORT
   let $GB_CRITERIA_ID         = ' '
   let $QRYNAME                = ' '
   let $COMPLEX_GROUP_FLG      = 'N'
   let #VERSION                = 0
   let $SELF_SERVICE           = 'N'
   let $LASTUPDDTTM            = ''
   let $COMMENTS               = 'This Group has been generated by the process GBP003 on ' || $AsOfToday

   let #OPERAND_SEQ            = 0
   let $RECNAME                = 'JOB'
   let $EDITTABLE              = 'COMPANY_TBL'
   let $FIELDNAME              = 'COMPANY'

   do GetRecordLabel($FIELDNAME, $LongName)

   let $FIELDLABEL             = $LongName
   let $SQL_OPERATOR           = 'A'
   let $GROUP_RIGHT_PAREN      = ' '
   let $GROUP_LEFT_PAREN       = ' '
   let $GROUP_BOOLEAN          = 'AND'
   let $GB_FROM_CRIT_SW = 'N'
   let $GB_VALUES_LIST         = $COMPANY

   let $MANAGER_ID             = ' '
   let $APPROVER_ID            = ' '

   let #VALUE_SEQ              = 1
   let $GB_VALUE               = $COMPANY
   let $GB_VALUE_DT            = ''
   let $GB_VALUE_DTTM          = ''
   let $GB_VALUE_TM            = ''
   let $SETID                  = ' '
   let $ACTION                 = ' '
   let $SAL_ADMIN_PLAN         = ' '
   let $COMPANY                = ' '
   let $PAYGROUP               = ' '
   let $OPRID                  = ' '
   let $GRADE                  = ' '
   let $TARIFF_GER             = ' '
   let $LABOR_AGREEMNT     = ' '
   let $EMPL_CTG               = ' '
   let $EMPL_CTG_L1            = ' '
   let $COUNTRY                = ' '
   let $TASKGROUP              = ' '
   let $CURRENCY_CD            = ' '
   let $ACTION_ITA             = ' '
   let $GVT_HIGH_PAY_PLAN      = ' '
   let $GVT_NOA_CODE           = ' '
   let $GVT_RTND_GRADE         = ' '
   let $GVT_RTND_PAY_PLAN      = ' '
   let $GVT_RTND_SAL_PLAN      = ' '
   let $INTCP_COMPANY2         = ' '
   let $COUNTRY_NM_FORMAT      = ' '

   do InsertOnGroupBuildTables
end-if
end-procedure

!----------------------------------------------------------------------!
!
!----------------------------------------------------------------------!

begin-procedure BuildDepartmentGroup
!#debugx  show 'BuildDepartmentGroup'
let #DeptCounter = 0
let #GBSecCounter = 0
let $BuildDepartmentBegan = 'N'
let $BuildGBSecurityBegan = 'N'
let #i = 0
let #j = 0
begin-SELECT ON-ERROR=SQL-ERROR
SETID            &DEPT_SETID
DEPTID           &DEPTID
{DATEOUT-PREFIX}EFFDT{DATEOUT-SUFFIX}            &DEPT_EFFDT
DESCR            &DEPT_DESCR
DESCRSHORT       &DEPT_DESCRSHORT

   let $DEPT_SETID      = RTRIM(&DEPT_SETID, ' ')
   let $DEPTID          = RTRIM(&DEPTID, ' ')
   let $DEPT_EFFDT      = &DEPT_EFFDT
   let $DEPT_TBL-DESCR      = &DEPT_DESCR
   let $DEPT_TBL-DESCRSHORT = &DEPT_DESCRSHORT
   do Get_Related_DEPT_TBL(&DEPTID,$AsOfToday,&DEPT_SETID)

   do InsertDepartment

FROM PS_DEPT_TBL A
WHERE A.EFFDT =
(
SELECT MAX(EFFDT)
FROM PS_DEPT_TBL
WHERE SETID = A.SETID
AND DEPTID = A.DEPTID
AND EFFDT <= {DATEIN-PREFIX}$AsOfToday{DATEIN-SUFFIX}
)
AND A.EFF_STATUS = 'A'
end-SELECT

display ' '
if $BuildDepartmentBegan = 'Y' and #DeptCounter = 0
   display $DepartmentList
else
  while #i < #DeptCounter
     get $DeptDisplay from DeptArray(#i)
     display $DeptDisplay
     let #i = #i + 1
  end-while
end-if

display ' '
if $BuildGBSecurityBegan = 'Y' and #GBSecCounter = 0
   display $GBSecurityList
else
  while #j < #GBSecCounter
     get $DeptDisplay from GrSecrArray(#j)
     display $DeptDisplay
     let #j = #j + 1
  end-while
end-if

end-procedure

!----------------------------------------------------------------------!
!
!----------------------------------------------------------------------!

begin-procedure InsertDepartment
!#debugx  show 'InsertDepartment'
   let $Key = $DEPT_SETID || $DEPTID

let $bAlreadyInGroup = 'NO'
begin-SELECT ON-ERROR=SQL-ERROR
'X'                      &DUMMY2
   let $bAlreadyInGroup = 'YES'
FROM PS_GB_GROUP_TBL
WHERE GB_GROUP_ID = $Key
AND  EFFDT = {DATEIN-PREFIX}$DEPT_EFFDT{DATEIN-SUFFIX}
end-SELECT


   let $GB_GROUP_ID            = $DEPT_SETID || $DEPTID
   let $EFFDT                  = $DEPT_EFFDT
   let $EFF_STATUS             = 'A'
   let $DESCR50                = $DEPT_TBL-DESCR
   let $DESCRSHORT             = $DEPT_TBL-DESCRSHORT
   let $GB_CRITERIA_ID         = ' '
   let $QRYNAME                = ' '
   let $COMPLEX_GROUP_FLG      = 'N'
   let #VERSION                = 0
   let $SELF_SERVICE           = 'N'
   let $LASTUPDDTTM            = ''
   let $COMMENTS               = 'This Group has been generated by the process GBP003 on ' || $AsOfToday

   let #OPERAND_SEQ            = 0
   let $RECNAME                = 'JOB'
   let $EDITTABLE              = 'DEPT_TBL'
   let $FIELDNAME              = 'DEPTID'
   do GetRecordLabel($FIELDNAME, $LongName)
   let $FIELDLABEL             = 'Department'
   let $SQL_OPERATOR           = 'A'
   let $GROUP_RIGHT_PAREN      = ' '
   let $GROUP_LEFT_PAREN       = ' '
   let $GROUP_BOOLEAN          = 'AND'
   let $GB_FROM_CRIT_SW = 'N'
   let $GB_VALUES_LIST         = $DEPT_SETID || $DEPTID

   let $MANAGER_ID             = ' '
   let $APPROVER_ID            = ' '

   let #VALUE_SEQ              = 1
   let $GB_VALUE               = $DEPTID
   let $GB_VALUE_DT            = ''
   let $GB_VALUE_DTTM          = ''
   let $GB_VALUE_TM            = ''
   let $SETID                  = $DEPT_SETID
   let $ACTION                 = ' '
   let $SAL_ADMIN_PLAN         = ' '
   let $COMPANY                = ' '
   let $PAYGROUP               = ' '
   let $OPRID                  = ' '
   let $GRADE                  = ' '
   let $TARIFF_GER             = ' '
   let $LABOR_AGREEMNT         = ' '
   let $EMPL_CTG               = ' '
   let $EMPL_CTG_L1            = ' '
   let $COUNTRY                = ' '
   let $TASKGROUP              = ' '
   let $CURRENCY_CD            = ' '
   let $ACTION_ITA = ' '
   let $GVT_HIGH_PAY_PLAN      = ' '
   let $GVT_NOA_CODE           = ' '
   let $GVT_RTND_GRADE         = ' '
   let $GVT_RTND_PAY_PLAN      = ' '
   let $GVT_RTND_SAL_PLAN      = ' '
   let $INTCP_COMPANY2         = ' '
   let $COUNTRY_NM_FORMAT      = ' '
if $bAlreadyInGroup = 'NO'

   if $BuildDepartmentBegan = 'N'
     let $DepartmentList = 'Departments added to Group Build Definition(Dept SetID - Department): ' ||
     rtrim($DEPT_SETID,' ') ||  ' - ' || rtrim($DEPTID,' ')
     let $BuildDepartmentBegan = 'Y'
   else
     let $DepartmentList = $DepartmentList || ', ' || rtrim($DEPT_SETID,' ') ||  ' - ' || rtrim($DEPTID,' ')
     let #l = length($DepartmentList)
     if #l > 100 and #DeptCounter < 50000
        put $DepartmentList into DeptArray(#DeptCounter)
        let #DeptCounter = #DeptCounter + 1
        let $DepartmentList = ''
     end-if
   end-if


   do InsertOnGroupBuildTables

end-if

   do InsertGBSecurity
end-procedure

!----------------------------------------------------------------------!
!
!----------------------------------------------------------------------!

begin-procedure InsertOnGroupBuildTables
!#debugx  show 'InsertOnGroupBuildTables'
 #ifdef INFORMIX
begin-SQL ON-ERROR=SQL-ERROR
INSERT INTO PS_GB_GROUP_TBL
(GB_GROUP_ID
,EFFDT
,EFF_STATUS
,DESCR
,DESCRSHORT
,GB_CRITERIA_ID
,QRYNAME
,MANAGER_ID
,APPROVER_ID
,COMPLEX_GROUP_FLG
,VERSION
,SELF_SERVICE
,LASTUPDDTTM)
VALUES
(
$GB_GROUP_ID
,{DATEIN-PREFIX}$EFFDT{DATEIN-SUFFIX}
,$EFF_STATUS
,$DESCR50
,$DESCRSHORT
,$GB_CRITERIA_ID
,$QRYNAME
,$MANAGER_ID
,$APPROVER_ID
,$COMPLEX_GROUP_FLG
,#VERSION
,$SELF_SERVICE
,{DATETIMEIN-PREFIX}$LASTUPDDTTM{DATETIMEIN-SUFFIX}
)
end-SQL
 #else
begin-SQL ON-ERROR=SQL-ERROR
INSERT INTO PS_GB_GROUP_TBL
(GB_GROUP_ID
,EFFDT
,EFF_STATUS
,DESCR
,DESCRSHORT
,GB_CRITERIA_ID
,QRYNAME
,MANAGER_ID
,APPROVER_ID
,COMPLEX_GROUP_FLG
,VERSION
,SELF_SERVICE
,LASTUPDDTTM
,COMMENTS)
VALUES
(
$GB_GROUP_ID
,{DATEIN-PREFIX}$EFFDT{DATEIN-SUFFIX}
,$EFF_STATUS
,$DESCR50
,$DESCRSHORT
,$GB_CRITERIA_ID
,$QRYNAME
,$MANAGER_ID
,$APPROVER_ID
,$COMPLEX_GROUP_FLG
,#VERSION
,$SELF_SERVICE
,{DATETIMEIN-PREFIX}$LASTUPDDTTM{DATETIMEIN-SUFFIX}
,$COMMENTS
)
end-SQL
 #endif

begin-SQL ON-ERROR=SQL-ERROR
INSERT INTO PS_GB_WHERE_TBL
(GB_GROUP_ID
,EFFDT
,OPERAND_SEQ
,RECNAME
,EDITTABLE
,FIELDNAME
,FIELDLABEL
,SQL_OPERATOR
,GROUP_RIGHT_PAREN
,GROUP_LEFT_PAREN
,GROUP_BOOLEAN
,GB_FROMCRIT_SW
,GB_VALUES_LIST
)
VALUES
(
$GB_GROUP_ID
,{DATEIN-PREFIX}$EFFDT{DATEIN-SUFFIX}
,#OPERAND_SEQ
,$RECNAME
,$EDITTABLE
,$FIELDNAME
,$FIELDLABEL
,$SQL_OPERATOR
,$GROUP_RIGHT_PAREN
,$GROUP_LEFT_PAREN
,$GROUP_BOOLEAN
,$GB_FROM_CRIT_SW
,$GB_VALUES_LIST
)
end-SQL

begin-SQL ON-ERROR=SQL-ERROR
INSERT INTO PS_GB_VALUES_TBL
(GB_GROUP_ID
,EFFDT
,OPERAND_SEQ
,VALUE_SEQ
,GB_VALUE
,GB_VALUE_DT
,GB_VALUE_DTTM
,GB_VALUE_TM
,SETID
,ACTION
,SAL_ADMIN_PLAN
,COMPANY
,PAYGROUP
,OPRID
,GRADE
,TARIFF_GER
,LABOR_AGREEMENT
,EMPL_CTG
,EMPL_CTG_L1
,COUNTRY
,TASKGROUP
,CURRENCY_CD
,ACTION_ITA
,GVT_HIGH_PAY_PLAN
,GVT_NOA_CODE
,GVT_RTND_GRADE
,GVT_RTND_PAY_PLAN
,GVT_RTND_SAL_PLAN
,INTCP_COMPANY2
,COUNTRY_NM_FORMAT
)
VALUES
(
$GB_GROUP_ID
,{DATEIN-PREFIX}$EFFDT{DATEIN-SUFFIX}
,#OPERAND_SEQ
,#VALUE_SEQ
,$GB_VALUE
,{DATEIN-PREFIX}$GB_VALUE_DT{DATEIN-SUFFIX}
,{DATETIMEIN-PREFIX}$GB_VALUE_DTTM{DATETIMEIN-SUFFIX}
,{TIMEIN-PREFIX}$GB_VALUE_TM{TIMEIN-SUFFIX}
,$SETID
,$ACTION
,$SAL_ADMIN_PLAN
,$COMPANY
,$PAYGROUP
,$OPRID
,$GRADE
,$TARIFF_GER
,$LABOR_AGREEMNT
,$EMPL_CTG
,$EMPL_CTG_L1
,$COUNTRY
,$TASKGROUP
,$CURRENCY_CD
,$ACTION_ITA
,$GVT_HIGH_PAY_PLAN
,$GVT_NOA_CODE
,$GVT_RTND_GRADE
,$GVT_RTND_PAY_PLAN
,$GVT_RTND_SAL_PLAN
,$INTCP_COMPANY2
,$COUNTRY_NM_FORMAT
)
end-SQL
end-procedure

!----------------------------------------------------------------------!
!
!----------------------------------------------------------------------!

begin-procedure InsertGBSecurity
!#debugx  show 'InsertGBSecurity'
begin-SELECT ON-ERROR=SQL-ERROR
DISTINCT D.OPRID   &OPRID

   let $OPRID = &OPRID

   if $BuildGBSecurityBegan = 'N'
     let $GBSecurityList = 'Updating Group Security for Oprator ID = ' || rtrim($OPRID,' ') ||
     ', (Dept SetID - Department): ' ||
     rtrim($DEPT_SETID,' ') ||  ' - ' || rtrim($DEPTID,' ')
     let $BuildGBSecurityBegan = 'Y'
   else
     let $GBSecurityList = $GBSecurityList || ', ' || rtrim($DEPT_SETID,' ') ||  ' - ' || rtrim($DEPTID,' ')
     let #l = length($GBSecurityList)
     if #l > 100 and #GBSecCounter < 50000
        put $GBSecurityList into GrSecrArray(#GBSecCounter)
        let #GBSecCounter = #GBSecCounter + 1
        let $GBSecurityList = ''
     end-if
   end-if
   do InsertOnGSECOPR_TBL
FROM PSTREENODE A, PS_SCRTY_TBL_DEPT C, PSOPRDEFN D
WHERE A.TREE_NODE =  $DEPTID
  AND A.SETID = $DEPT_SETID
  AND A.TREE_NAME = 'DEPT_SECURITY'
  AND A.EFFDT = (SELECT MAX(B.EFFDT)
     FROM PSTREEDEFN B
     WHERE B.SETID = A.SETID
       AND B.TREE_NAME = A.TREE_NAME
       AND B.EFF_STATUS = 'A'
       AND B.EFFDT <= {DATEIN-PREFIX}$AsOfToday{DATEIN-SUFFIX})
  AND A.SETID = C.SETID
  AND C.ACCESS_CD = 'Y'
  AND A.EFFDT = C.TREE_EFFDT
  AND A.TREE_NODE_NUM BETWEEN C.TREE_NODE_NUM AND C.TREE_NODE_NUM_END
  AND NOT EXISTS (SELECT 'X'
    FROM PS_SCRTY_TBL_DEPT C2
    WHERE  C.ROWSECCLASS = C2.ROWSECCLASS
    AND C.SETID = C2.SETID
    AND C.TREE_NODE_NUM <> C2.TREE_NODE_NUM
    AND A.TREE_NODE_NUM BETWEEN C2.TREE_NODE_NUM AND C2.TREE_NODE_NUM_END
    AND C2.TREE_NODE_NUM BETWEEN C.TREE_NODE_NUM AND C.TREE_NODE_NUM_END)
  AND C.ROWSECCLASS = D.ROWSECCLASS

AND NOT EXISTS (SELECT
'X'
FROM PS_GB_SECGRPOPR_TB
WHERE GB_GROUP_ID = $GB_GROUP_ID
AND GB_OPRID = D.OPRID)
AND D.OPRID = $prcs_oprid
end-SELECT
end-procedure

!----------------------------------------------------------------------!
!
!----------------------------------------------------------------------!

begin-procedure InsertOnGSECOPR_TBL
!#debugx  show 'InsertOnGSECOPR_TBL'
Begin-SQL  ON-ERROR=SQL-ERROR
INSERT INTO PS_GB_SECGRPOPR_TB
(GB_GROUP_ID
,EFFDT
,GB_OPRID
,EFF_STATUS
)
VALUES
(
$GB_GROUP_ID
,{DATEIN-PREFIX}$AsOfToday{DATEIN-SUFFIX}
,$OPRID
,'A'
)
end-SQL

begin-SELECT ON-ERROR=SQL-ERROR
PNLGRPNAME   &PNLGRP
   let $PNLGRPNAME = &PNLGRP
   do InsertOnGSECPNLG_TBL

FROM PS_GB_PNLGRDFT_TBL
end-SELECT

end-procedure

!----------------------------------------------------------------------!
!
!----------------------------------------------------------------------!

begin-procedure InsertOnGSECPNLG_TBL
!#debugx  show 'InsertOnGSECPNLG_TBL'
begin-SQL ON-ERROR=SQL-ERROR
INSERT INTO PS_GB_SECPNLG_TBL
(GB_GROUP_ID
,EFFDT
,GB_OPRID
,PNLGRPNAME
)
VALUES
(
$GB_GROUP_ID
,{DATEIN-PREFIX}$AsOfToday{DATEIN-SUFFIX}
,$OPRID
,$PNLGRPNAME
)
end-SQL
end-procedure

!----------------------------------------------------------------------!
!
!----------------------------------------------------------------------!

begin-procedure Initialize
!#debugx  show 'Initialize'
   do Init-DateTime
   do Init-Number
   do Init_Printer
   do Define-Prcs-Vars
   do Get-Current-DateTime

   move 'GBP003' to $ReportID
   move 'Group Build Automated Generation of groups' to $ReportTitle
   move '' to $AuditDescr

   display $ReportTitle
end-procedure

!----------------------------------------------------------------------!
!
!----------------------------------------------------------------------!

begin-procedure GetRecordLabel($FieldName, :$LongName)
!#debugx  show 'GetRecordLabel'

begin-SELECT
LONGNAME  &LongName
    let $LongName = &LongName
FROM PSDBFLDLABL_VW
WHERE FIELDNAME = $FieldName
end-SELECT
end-procedure

!----------------------------------------------------------------------!
!
!----------------------------------------------------------------------!

begin-procedure Terminate
!#debugx  show 'Terminate'
   if #prcs_process_instance > 0
      do Update-Prcs-Run-Status
   end-if
   do Reset
end-procedure

begin-heading 4
   #include 'stdhdg01.sqc'
end-heading

#include 'reset.sqc'         ! Reset printer
#include 'curdttim.sqc'      ! Current Date and Time
#Include 'datetime.sqc'      ! Routines for date and time formatting
#Include 'number.sqc'        ! Routines to format numbers
#include 'prcsapi.sqc'       ! Update Process Request API
#include 'prcsdef.sqc'       ! Update Process Request variable declaration
#include 'useprntr.sqc'      ! Init printer routine
#include 'tranctrl.sqc'      ! Procedures: Commit-Transaction, Rollback-Transaction, Begin-Transaction

#include 'rellang.sqc'
