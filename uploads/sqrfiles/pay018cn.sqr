!***********************************************************************
! PAY018CN:Payroll Summary Report for Canada                           *
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2007 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2007/02/07:16:41:13                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  698735                                              !
!                                                                      *
! LAF001 - Mar 1995 - Add Releve 2 data                                *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'  !Set environment
#include 'setup31.sqc' !Init printer and page size

#Define Pay018a_C_Paygroup              1
#Define Pay018a_C_Count                13
#Define Pay018a_C_Total_gross          22
#Define Pay018a_C_Total_taxes          36
#Define Pay018a_C_Total_deductions     50
#Define Pay018a_C_Net_pay              67

#Define Pay018b_C_Paygroup              1
#Define Pay018b_C_Count                13
#Define Pay018b_C_Reg_earns            22
#Define Pay018b_C_Reg_earn_hrs         36
#Define Pay018b_C_Reg_hrs              47
#Define Pay018b_C_Reg_hrly_earns       58
#Define Pay018b_C_Ot_hrs               74
#Define Pay018b_C_Ot_hrly_earns        87

#Define Pay018c_C_Paygroup              1
#Define Pay018c_C_Erncd                11
#Define Pay018c_C_Count                20
#Define Pay018c_C_Oth_hrs              28
#Define Pay018c_C_Oth_earns            40

#Define Pay018d_C_Paygroup              1
#Define Pay018d_C_Erncd_spcl           11
#Define Pay018d_C_Count                22
#Define Pay018d_C_Spcl_earns           35

#Define Pay018e_C_Paygroup              1
#Define Pay018e_C_Plan_type            11
#Define Pay018e_C_Dedcd                21
#Define Pay018e_C_Ded_class            28
#Define Pay018e_C_Ded_slstx            36
#Define Pay018e_C_Count                41
#Define Pay018e_C_Ded_cur              49
#Define Pay018e_C_Ded_not_taken        62
#Define Pay018e_C_Reason_not_taken     76
#Define Pay018e_C_Ded_cur_paybk        90
#Define Pay018e_C_Ded_cur_refund      104

#Define Pay018f_C_Paygroup              1
#Define Pay018f_C_Plan_type            11
#Define Pay018f_C_Dedcd                21
#Define Pay018f_C_Ded_class            28
#Define Pay018f_C_Ded_slstx            36
#Define Pay018f_C_Count                41
#Define Pay018f_C_Ded_cur              49
#Define Pay018f_C_Ded_not_taken        62
#Define Pay018f_C_Reason_not_taken     76
#Define Pay018f_C_Ded_cur_paybk        90
#Define Pay018f_C_Ded_cur_refund      104

#Define Pay018g_C_Paygroup              1
#Define Pay018g_C_WageLs               11
#Define Pay018g_C_RCT                  17  ! 7
#Define Pay018g_C_Count                33  !15
#Define Pay018g_C_Tax_class            41  !23
#Define Pay018g_C_Tax_cur              51  !33
#Define Pay018g_C_Txgrs_cur            65  !47
#Define Pay018g_C_Nlgrs_cur            79  !61
#Define Pay018g_C_Tax_not_taken        96  !78
#Define Pay018g_C_Pen_adj             110  !92

#Define Pay018h_C_Paygroup              1
#Define Pay018h_C_WageLs               11
#Define Pay018h_C_RCT                  17  ! 7
#Define Pay018h_C_Count                33  !15
#Define Pay018h_C_Tax_class            41  !23
#Define Pay018h_C_Tax_cur              51  !33
#Define Pay018h_C_Txgrs_cur            65  !47
#Define Pay018h_C_Nlgrs_cur            79  !61
#Define Pay018h_C_Tax_not_taken        96  !78
#Define Pay018h_C_UI_ER_Rt             96  !78

begin-report
  do Init-Report
  do Stdapi-Term
end-report


begin-procedure Init-Report
  do Stdapi-Init
  move 'PAY018CN' to $ReportID

  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  move $Pay018cn_Title_pay_sum to $ReportTitle
  do Init-DateTime
  do Init-Number

  do Init
  do Get-Print-Option
  do Payroll-Report-Initialization
  do Reset
end-procedure

begin-procedure Get-Print-Option

let #Records_found = 0

begin-select
CN.PRINT_PERIOD_TOT,
CN.PRINT_MTD_TOT,
CN.PRINT_QTD_TOT,
CN.PRINT_YTD_TOT
  let #Records_found = 1
FROM PS_RC_PAY018CN CN
WHERE CN.OPRID = $Prcs_OprID
  AND CN.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-SELECT

 If #Records_found = 1
  move &CN.Print_period_tot to  $Print_period_tot
  move &CN.Print_mtd_tot    to  $Print_mtd_tot
  move &CN.Print_qtd_tot    to  $Print_qtd_tot
  move &CN.Print_ytd_tot    to  $Print_ytd_tot
 else
  move 'Y'   to $Print_period_tot
  move ''    to  $Print_mtd_tot
  move ''    to  $Print_qtd_tot
  move ''    to  $Print_ytd_tot
 end-if

end-procedure

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from PAY018CN  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('PAY018CN', 'TITLE_PAY_SUM_RPT' , $Pay018cn_Title_pay_sum , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'RUN_ID_HDR'        , $Pay018cn_Run_id        , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'OTH_EARN_SUM'      , $Pay018cn_Oth_earn_sum  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'OTH_EARN_MTD'      , $Pay018cn_Oth_earn_mtd  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'OTH_EARN_QTD'      , $Pay018cn_Oth_earn_qtd  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'OTH_EARN_YTD'      , $Pay018cn_Oth_earn_ytd  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EARNINGS'          , $Pay018cn_Earnings      , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'OTHER'             , $Pay018cn_Other         , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'CODE'              , $Pay018cn_Code          , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'COUNT'             , $Pay018cn_Count         , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'SPEC_ACC_SUMM'     , $Pay018cn_Spec_acc_sum  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'SPEC_ACC_MTD'      , $Pay018cn_Spec_acc_mtd  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'SPEC_ACC_QTD'      , $Pay018cn_Spec_acc_qtd  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'SPEC_ACC_YTD'      , $Pay018cn_Spec_acc_ytd  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'SPECIAL'           , $Pay018cn_Special       , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMPL_DEDUC_SUM'    , $Pay018cn_Emp_ded_sum   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMPL_DEDUC_MTD'    , $Pay018cn_Emp_ded_mtd   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMPL_DEDUC_QTD'    , $Pay018cn_Emp_ded_qtd   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMPL_DEDUC_YTD'    , $Pay018cn_Emp_ded_ytd   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'DEDUCTION'         , $Pay018cn_Deduction     , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'CURRENT'           , $Pay018cn_Current       , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'REASON'            , $Pay018cn_Reason        , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'ARREARS'           , $Pay018cn_Arrears       , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PLAN_TYPE'         , $Pay018cn_Plan_type     , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'CODE_CLASS'        , $Pay018cn_Code_class    , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'NOT_TAKEN'         , $Pay018cn_Not_taken     , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PAYBACK'           , $Pay018cn_Payback       , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'REFUND'            , $Pay018cn_Refund        , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMP_CONTR_SUM'     , $Pay018cn_Emp_cont_sum  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMP_CONTR_MTD'     , $Pay018cn_Emp_cont_mtd  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMP_CONTR_QTD'     , $Pay018cn_Emp_cont_qtd  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMP_CONTR_YTD'     , $Pay018cn_Emp_cont_ytd  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMP_TAX_SUM'       , $Pay018cn_Emp_tax_sum   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMP_TAX_MTD'       , $Pay018cn_Emp_tax_mtd   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMP_TAX_QTD'       , $Pay018cn_Emp_tax_qtd   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMP_TAX_YTD'       , $Pay018cn_Emp_tax_ytd   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'WAGE_LOSS'         , $Pay018cn_Wage_loss     , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'CURRENT_TAX'       , $Pay018cn_Current_tax   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'CURRENT_NO_LIM'    , $Pay018cn_Curr_no_lim   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'TAX'               , $Pay018cn_Tax           , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'NO_LIMIT'          , $Pay018cn_No_limit      , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'TAX_NOT'           , $Pay018cn_Tax_not       , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PENSION'           , $Pay018cn_Pension       , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PROV'              , $Pay018cn_Prov          , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PLAN_BUS_NO'       , $Pay018cn_Plan_bus_no   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PLAN_RCT'          , $Pay018cn_Plan_rct      , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'TAX_TYPE'          , $Pay018cn_Tax_Type      , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PREM_CONTRIB'      , $Pay018cn_Prem_Contr    , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'TAX_GROSS'         , $Pay018cn_Tax_gross     , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'GROSS'             , $Pay018cn_Gross         , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'TAKEN'             , $Pay018cn_Taken         , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'ADJUSTMENT'        , $Pay018cn_Adjustment    , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMPLER_TAX_SUM'    , $Pay018cn_Emplr_tax_sum , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMPLER_TAX_MTD'    , $Pay018cn_Emplr_tax_mtd , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMPLER_TAX_QTD'    , $Pay018cn_Emplr_tax_qtd , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMPLER_TAX_YTD'    , $Pay018cn_Emplr_tax_ytd , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EI_ER'             , $Pay018cn_Ei_er         , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'RATE'              , $Pay018cn_Rate          , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PAY_CHQ_SUM'       , $Pay018cn_Pay_chq_sum   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PAY_CHQ_MTD'       , $Pay018cn_Pay_chq_mtd   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PAY_CHQ_QTD'       , $Pay018cn_Pay_chq_qtd   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PAY_CHQ_YTD'       , $Pay018cn_Pay_chq_ytd   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'ALL_CHQ_INC_ONL'   , $Pay018cn_All_cheques   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'TOTAL'             , $Pay018cn_Total         , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'TOT_GROSS'         , $Pay018cn_Tot_gross     , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'TOT_TAXES'         , $Pay018cn_Tot_taxes     , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'TOT_DEDUC'         , $Pay018cn_Tot_deduc     , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'NET_PAY'           , $Pay018cn_Net_pay       , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'ONLINE_CHQS'       , $Pay018cn_Onl_chqs      , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PAY_EARN_SUM'      , $Pay018cn_Pay_earn_sum  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PAY_EARN_MTD'      , $Pay018cn_Pay_earn_mtd  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PAY_EARN_QTD'      , $Pay018cn_Pay_earn_qtd  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PAY_EARN_YTD'      , $Pay018cn_Pay_earn_ytd  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'HOURS'             , $Pay018cn_Hours         , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'HOURS_FOR'         , $Pay018cn_Hours_for     , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EARN_FOR'          , $Pay018cn_Earn_for      , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'REGULAR'           , $Pay018cn_Regular       , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'OVERTIME'          , $Pay018cn_Overtime      , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMP_TAX_WAGE_LOSS' , $Pay018cn_Emp_tx_wloss  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMPLER_TAX_WAGE_LS', $Pay018cn_Empler_tx_wloss  , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'BATCH_FINAL'       , $Pay018cn_Batch_final    , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'ONLINE_FINAL'      , $Pay018cn_Online_final   , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PAYGROUP'          , $Pay018cn_Paygroup       , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'GRAND_TOTAL'       , $Pay018cn_Grand_total    , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'PAYGROUP_TOTAL'    , $Pay018cn_Paygroup_total , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMP_TAX_ALL'       , $Pay018cn_Emp_tax_all    , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMP_TAX_PAYGROUP'  , $Pay018cn_Emp_tax_paygroup , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMPLER_TAX_ALL'      , $Pay018cn_Empler_tax_all    , #dummy_width)
   do Get_Field_Information ('PAY018CN', 'EMPLER_TAX_PAYGR'  , $Pay018cn_Empler_tax_paygr , #dummy_width)


end-procedure

begin-heading 13
#include 'stdhtrpi.sqc'
#include 'stdhtr04.sqc'

    print  $Pay018cn_Run_id                (+1,1)
    print  $Report_RunID                   (0,13)

if $rptcde = 'C'
     evaluate $Rpt_option
        when = 'P'
          print $Pay018cn_Oth_earn_sum           (+2,1)
        when = 'M'
          print $Pay018cn_Oth_earn_mtd           (+2,1)
        when = 'Q'
          print $Pay018cn_Oth_earn_qtd           (+2,1)
        when-other
          print $Pay018cn_Oth_earn_ytd           (+2,1)
    end-evaluate
    print ' '                              (+2,{Pay018c_C_Paygroup})
    print $Pay018cn_Earnings               (0,{Pay018c_C_Erncd})
    print ' '                              (0,{Pay018c_C_Count})
    print $Pay018cn_Other                  (0,{Pay018c_C_Oth_hrs})
    print $Pay018cn_Other                  (0,{Pay018c_C_Oth_earns})
    print $Pay018cn_Paygroup               (+1,{Pay018c_C_Paygroup})
    print $Pay018cn_Code                   (0,{Pay018c_C_Erncd})
    print $Pay018cn_Count                  (0,{Pay018c_C_Count})
    print $Pay018cn_Hours                  (0,{Pay018c_C_Oth_hrs})
    print $Pay018cn_Earnings               (0,{Pay018c_C_Oth_earns})

    print '--------'                       (+1,{Pay018c_C_Paygroup})
    print '--------'                       (0,{Pay018c_C_Erncd})
    print '-------'                        (0,{Pay018c_C_Count})
    print '----------'                     (0,{Pay018c_C_Oth_hrs})
    print '------------'                   (0,{Pay018c_C_Oth_earns})
end-if

if $rptcde = 'D'
    evaluate $Rpt_option
        when = 'P'
          print $Pay018cn_Spec_acc_sum           (+2,1)
        when = 'M'
          print $Pay018cn_Spec_acc_mtd           (+2,1)
        when = 'Q'
          print $Pay018cn_Spec_acc_qtd           (+2,1)
        when-other
          print $Pay018cn_Spec_acc_ytd           (+2,1)
    end-evaluate

    print ' '                              (+2,{Pay018d_C_Paygroup})
    print $Pay018cn_Special                (0,{Pay018d_C_Erncd_spcl})
    print ' '                              (0,{Pay018d_C_Count})
    print ' '                              (0,{Pay018d_C_Spcl_earns})

    print ' '                              (+1,{Pay018d_C_Paygroup})
    print $Pay018cn_Earnings               (0,{Pay018d_C_Erncd_spcl})
    print ' '                              (0,{Pay018d_C_Count})
    print $Pay018cn_Special                (0,{Pay018d_C_Spcl_earns})

    print $Pay018cn_Paygroup               (+1,{Pay018d_C_Paygroup})
    print $Pay018cn_Code                   (0,{Pay018d_C_Erncd_spcl})
    print $Pay018cn_Count                  (0,{Pay018d_C_Count})
    print $Pay018cn_Earnings               (0,{Pay018d_C_Spcl_earns})

    print '--------'                       (+1,{Pay018d_C_Paygroup})
    print '----------'                     (0,{Pay018d_C_Erncd_spcl})
    print '-------'                        (0,{Pay018d_C_Count})
    print '---------------'                (0,{Pay018d_C_Spcl_earns})
end-if

if $rptcde = 'E'
    evaluate $Rpt_option
        when = 'P'
          print $Pay018cn_Emp_ded_sum            (+2,1)
        when = 'M'
          print $Pay018cn_Emp_ded_mtd            (+2,1)
        when = 'Q'
          print $Pay018cn_Emp_ded_qtd            (+2,1)
        when-other
          print $Pay018cn_Emp_ded_ytd            (+2,1)
    end-evaluate

    print ' '                              (+2,{Pay018e_C_Paygroup})
    print ' '                              (0,{Pay018e_C_Plan_type})
    print $Pay018cn_Deduction              (0,{Pay018e_C_Dedcd})
    print ' '                              (0,{Pay018e_C_Count})
    print ' '                              (0,{Pay018e_C_Ded_cur})
    print $Pay018cn_Deduction              (0,{Pay018e_C_Ded_not_taken})
    print $Pay018cn_Reason                 (0,{Pay018e_C_Reason_not_taken})
    print $Pay018cn_Arrears                (0,{Pay018e_C_Ded_cur_paybk})
    print $Pay018cn_Deduction              (0,{Pay018e_C_Ded_cur_refund})

    print $Pay018cn_Paygroup               (+1,{Pay018e_C_Paygroup})
    print $Pay018cn_Plan_type              (0,{Pay018e_C_Plan_type})
    print $Pay018cn_Code_class             (0,{Pay018e_C_Dedcd})
    print $Pay018cn_Count                  (0,{Pay018e_C_Count})
    print $Pay018cn_Deduction              (0,{Pay018e_C_Ded_cur})
    print $Pay018cn_Not_taken              (0,{Pay018e_C_Ded_not_taken})
    print $Pay018cn_Not_taken              (0,{Pay018e_C_Reason_not_taken})
    print $Pay018cn_Payback                (0,{Pay018e_C_Ded_cur_paybk})
    print $Pay018cn_Refund                 (0,{Pay018e_C_Ded_cur_refund})

    print '--------'                       (+1,{Pay018e_C_Paygroup})
    print '---------'                      (0,{Pay018e_C_Plan_type})
    print '-------'                        (0,{Pay018e_C_Dedcd})
    print '--------'                       (0,{Pay018e_C_Ded_class})
    print '----'                           (0,{Pay018e_C_Ded_slstx})
    print '-------'                        (0,{Pay018e_C_Count})
    print '------------'                   (0,{Pay018e_C_Ded_cur})
    print '-------------'                  (0,{Pay018e_C_Ded_not_taken})
    print '-------------'                  (0,{Pay018e_C_Reason_not_taken})
    print '-------------'                  (0,{Pay018e_C_Ded_cur_paybk})
    print '-------------'                  (0,{Pay018e_C_Ded_cur_refund})
end-if

if $rptcde = 'F'
     evaluate $Rpt_option
        when = 'P'
          print $Pay018cn_Emp_cont_sum           (+2,1)
        when = 'M'
          print $Pay018cn_Emp_cont_mtd           (+2,1)
        when = 'Q'
          print $Pay018cn_Emp_cont_qtd           (+2,1)
        when-other
          print $Pay018cn_Emp_cont_ytd           (+2,1)
    end-evaluate

    print ' '                              (+2,{Pay018f_C_Paygroup})
    print ' '                              (0,{Pay018f_C_Plan_type})
    print $Pay018cn_Deduction              (0,{Pay018f_C_Dedcd})
    print ' '                              (0,{Pay018f_C_Count})
    print ' '                              (0,{Pay018f_C_Ded_cur})
    print $Pay018cn_Deduction              (0,{Pay018f_C_Ded_not_taken})
    print $Pay018cn_Reason                 (0,{Pay018f_C_Reason_not_taken})
    print $Pay018cn_Arrears                (0,{Pay018f_C_Ded_cur_paybk})
    print $Pay018cn_Deduction              (0,{Pay018f_C_Ded_cur_refund})

    print $Pay018cn_Paygroup               (+1,{Pay018f_C_Paygroup})
    print $Pay018cn_Plan_type              (0,{Pay018f_C_Plan_type})
    print $Pay018cn_Code_class             (0,{Pay018f_C_Dedcd})
    print $Pay018cn_Count                  (0,{Pay018f_C_Count})
    print $Pay018cn_Deduction              (0,{Pay018f_C_Ded_cur})
    print $Pay018cn_Not_taken              (0,{Pay018f_C_Ded_not_taken})
    print $Pay018cn_Not_taken              (0,{Pay018f_C_Reason_not_taken})
    print $Pay018cn_Payback                (0,{Pay018f_C_Ded_cur_paybk})
    print $Pay018cn_Refund                 (0,{Pay018f_C_Ded_cur_refund})

    print '--------'                       (+1,{Pay018f_C_Paygroup})
    print '---------'                      (0,{Pay018f_C_Plan_type})
    print '-------'                        (0,{Pay018f_C_Dedcd})
    print '--------'                       (0,{Pay018f_C_Ded_class})
    print '----'                           (0,{Pay018f_C_Ded_slstx})
    print '-------'                        (0,{Pay018f_C_Count})
    print '------------'                   (0,{Pay018f_C_Ded_cur})
    print '-------------'                  (0,{Pay018f_C_Ded_not_taken})
    print '-------------'                  (0,{Pay018f_C_Reason_not_taken})
    print '-------------'                  (0,{Pay018f_C_Ded_cur_paybk})
    print '-------------'                  (0,{Pay018f_C_Ded_cur_refund})
end-if

if $rptcde = 'G'
    evaluate $Rpt_option
        when = 'P'
          print $Pay018cn_Emp_tax_sum            (+2,1)
        when = 'M'
          print $Pay018cn_Emp_tax_mtd            (+2,1)
        when = 'Q'
          print $Pay018cn_Emp_tax_qtd            (+2,1)
        when-other
          print $Pay018cn_Emp_tax_ytd            (+2,1)
    end-evaluate

!   print ' '                              (0,{Pay018g_C_Prov})
    print ' '                              (+2,{Pay018g_C_Paygroup})
    print $Pay018cn_Wage_loss              (0,{Pay018g_C_WageLs})
    print ' '                              (0,{Pay018g_C_Tax_class})
    print ' '                              (0,{Pay018g_C_Count})
    print $Pay018cn_Tax                    (0,{Pay018g_C_Tax_cur})
    print ' '                              (0,{Pay018g_C_Txgrs_cur})
    print ' '                              (0,{Pay018g_C_Nlgrs_cur})
    print $Pay018cn_Tax_not                (0,{Pay018g_C_Tax_not_taken})
    print $Pay018cn_Pension                (0,{Pay018g_C_Pen_adj})

!   print $Pay018cn_Prov                   (0,{Pay018g_C_Prov})
    print $Pay018cn_Paygroup               (+1,{Pay018g_C_Paygroup})
    if  $Bus-No = 'Y'
        print $Pay018cn_Plan_bus_no        (0,{Pay018g_C_WageLs})
    else
        print $Pay018cn_Plan_rct           (0,{Pay018g_C_WageLs})
    end-if
    print $Pay018cn_Tax_Type               (0,{Pay018g_C_Tax_class})
    print $Pay018cn_Count                  (0,{Pay018g_C_Count})
    print $Pay018cn_Prem_Contr             (0,{Pay018g_C_Tax_cur})
    print $Pay018cn_Tax_gross              (0,{Pay018g_C_Txgrs_cur})
    print $Pay018cn_Gross                  (0,{Pay018g_C_Nlgrs_cur})
    print $Pay018cn_Taken                  (0,{Pay018g_C_Tax_not_taken})
    print $Pay018cn_Adjustment             (0,{Pay018g_C_Pen_adj})

!   print '-----'                          (0,{Pay018g_C_Prov})
    print '--------'                       (+1,{Pay018g_C_Paygroup})
    print '---------------------'          (0,{Pay018g_C_WageLs})
    print '---------'                      (0,{Pay018g_C_Tax_class})
    print '-------'                        (0,{Pay018g_C_Count})
    print '-------------'                  (0,{Pay018g_C_Tax_cur})
    print '-------------'                  (0,{Pay018g_C_Txgrs_cur})
    print '----------------'               (0,{Pay018g_C_Nlgrs_cur})
    print '-------------'                  (0,{Pay018g_C_Tax_not_taken})
    print '-------------'                  (0,{Pay018g_C_Pen_adj})
end-if

if $rptcde = 'H'
    evaluate $Rpt_option
        when = 'P'
          print $Pay018cn_Emplr_tax_sum          (+2,1)
        when = 'M'
          print $Pay018cn_Emplr_tax_mtd         (+2,1)
        when = 'Q'
          print $Pay018cn_Emplr_tax_qtd          (+2,1)
        when-other
          print $Pay018cn_Emplr_tax_ytd          (+2,1)
    end-evaluate

!   print ' '                              (0,{Pay018h_C_Prov})
    print ' '                              (+2,{Pay018h_C_Paygroup})
    print $Pay018cn_Wage_loss              (0,{Pay018h_C_WageLs})
    print ' '                              (0,{Pay018h_C_Tax_class})
    print ' '                              (0,{Pay018h_C_Count})
    print $Pay018cn_Tax                    (0,{Pay018h_C_Tax_cur})
    print ' '                              (0,{Pay018h_C_Txgrs_cur})
    print $Pay018cn_No_limit               (0,{Pay018h_C_Nlgrs_cur})
!   print $Pay018cn_Tax_not                (0,{Pay018h_C_Tax_not_taken})
    print $Pay018cn_Ei_er                  (0,{Pay018h_C_UI_ER_Rt})

!   print $Pay018cn_Prov                   (0,{Pay018h_C_Prov})
    print $Pay018cn_Paygroup               (+1,{Pay018h_C_Paygroup})
    if  $Bus-No = 'Y'
        print $Pay018cn_Plan_bus_no        (0,{Pay018g_C_WageLs})
    else
        print $Pay018cn_Plan_rct           (0,{Pay018g_C_WageLs})
    end-if
    print $Pay018cn_Tax_Type               (0,{Pay018h_C_Tax_class})
    print $Pay018cn_Count                  (0,{Pay018h_C_Count})
    print $Pay018cn_Prem_Contr             (0,{Pay018h_C_Tax_cur})
    print $Pay018cn_Tax_gross              (0,{Pay018h_C_Txgrs_cur})
    print $Pay018cn_Tax_gross              (0,{Pay018h_C_Nlgrs_cur})
!   print $Pay018cn_Taken                  (0,{Pay018h_C_Tax_not_taken})
    print $Pay018cn_Rate                   (0,{Pay018h_C_UI_ER_Rt})

!   print '-----'                          (0,{Pay018h_C_Prov})
    print '--------'                       (+1,{Pay018h_C_Paygroup})
    print '---------------------'          (0,{Pay018h_C_WageLs})
    print '---------'                      (0,{Pay018h_C_Tax_class})
    print '-------'                        (0,{Pay018h_C_Count})
    print '-------------'                  (0,{Pay018h_C_Tax_cur})
    print '-------------'                  (0,{Pay018h_C_Txgrs_cur})
    print '----------------'               (0,{Pay018h_C_Nlgrs_cur})
!   print '-------------'                  (0,{Pay018h_C_Tax_not_taken})
    print '------'                         (0,{Pay018h_C_UI_ER_Rt})
end-if

end-heading


begin-procedure Init           ! Get Source Database Information
    do Get-Current-DateTime
end-procedure


begin-procedure Report         ! Main report processing
  move 'N' to $Bus-No
  let $Report_RunID = $SlctRunID
  let $Report_Paygrp = $SlctPayGroup

  If $Print_period_tot = 'Y'
     move 'P' to $Rpt_option
     do Select-PayEndDate
     If $Print_mtd_tot = 'Y' or
        $Print_qtd_tot = 'Y' or
        $Print_ytd_tot = 'Y'
        do page_break
     end-if
  end-if

  If $Print_mtd_tot = 'Y'
     move 'M' to $Rpt_option
     do Select-PayEndDate
     If $Print_qtd_tot = 'Y' or
        $Print_ytd_tot = 'Y'
        do page_break
     end-if
  end-if

  If $Print_qtd_tot = 'Y'
     move 'Q' to $Rpt_option
     do Select-PayEndDate
     If $Print_ytd_tot = 'Y'
        do page_break
     end-if
  end-if

  If $Print_ytd_tot = 'Y'
     move 'Y' to $Rpt_option
     do Select-PayEndDate
  end-if

end-procedure


begin-procedure Select-PayEndDate

move ''   to $Store_Enddt
move ''   to $Store_company

begin-SELECT
A.COMPANY             () on-break print=never  level=1 procedure=Company-Change
A.PAY_END_DT          () on-break print=never  level=2 procedure=PayEndDate-Change

  move &A.PAY_END_DT to $PayEndDate
  move &A.COMPANY    to $Company

  If $Store_company <> $Company or
     $Store_Enddt   <> $PayEndDate
     do Get-PayCheckDt
     do Build-Select
     move $PayEndDate   to $Store_Enddt
     move $Company      to $Store_company
  end-if

  do Cheque-select
  move 'B' to $rptcde
  do Earnings-select
  do page_break

  move 'C' to $rptcde
  do Other-select
  do page_break

  move 'D' to $rptcde
  do Special-Accum-select
  do page_break

  move 'E' to $rptcde
  do EE-Deduction-select
  do page_break

  move 'F' to $rptcde
  do ER-Contrib-select
  do page_break

  move 'G' to $rptcde
  do EE-Tax-select
  do page_break

  move 'H' to $rptcde
  do ER-Tax-select

FROM PS_PAY_CALENDAR A,
     PS_PAY_CHECK B
WHERE
  #ifdef MVS
    \$SLCTCALENDAR\
  #else
    [$SlctCalendar]
  #endif

  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = B.COMPANY
  AND A.PAYGROUP   = B.PAYGROUP
  AND A.PAY_END_DT = B.PAY_END_DT
  AND EXISTS (SELECT 'x'
              FROM PS_PAY_EARNINGS C
              WHERE C.COMPANY    = B.COMPANY
                    AND C.PAYGROUP   = B.PAYGROUP
                    AND C.PAY_END_DT = B.PAY_END_DT
                    AND C.OFF_CYCLE  = B.OFF_CYCLE
                    AND C.PAGE_NUM      = B.PAGE_NUM
                    AND C.LINE_NUM      = B.LINE_NUM
                    AND C.SEPCHK     = B.SEPCHK
                    AND C.PAY_LINE_STATUS IN ('C','F','V')
                    AND C.SINGLE_CHECK_USE IN ('C', 'N'))
GROUP BY A.COMPANY,
         A.PAY_END_DT
ORDER BY A.COMPANY,
         A.PAY_END_DT

END-SELECT

end-procedure

begin-procedure Get-PayCheckDt

move ' ' to $CheckDt

begin-SELECT
PC.CHECK_DT

  move &PC.CHECK_DT to $CheckDt

FROM PS_PAY_CALENDAR PC
WHERE PC.COMPANY        = &A.COMPANY
  AND PC.PAY_END_DT   = &A.PAY_END_DT
ORDER BY PC.CHECK_DT DESC

END-SELECT

end-procedure

begin-procedure Build-Select

     move '' to $SlctPeriod
     do Format-DateTime($CheckDt , $YMDDate, {DEFCMP},'','')
     do Get-DateComponents ($YMDDate,#outyr,#outmo,#outday)
     move #outyr to $year  9999
     move #outmo to $month 09
     let $year_begin =  $year  || '0101'
     let $month_begin =  $year   || $month || '01'
     do Format-DateTime($year_begin, $year_begin_dt, {DEFCMP},'','native')
     do Format-DateTime($month_begin, $month_begin_dt, {DEFCMP},'','native')


  if $SlctRunId <> '*'
     evaluate $Rpt_option
        when = 'P'
          let $SlctPeriod = $SlctCalendar
          concat 'and A.PAYGROUP in (Select A2.PAYGROUP from PS_PAY_CALENDAR A2 where A2.RUN_ID = ''' with $SlctPeriod
          concat $SlctRunId with $SlctPeriod
          concat '''' with $SlctPeriod
          concat ' and A2.PAY_END_DT = ''' with $SlctPeriod
          concat $PayEndDate with $SlctPeriod
          concat ''')' with $SlctPeriod
        when = 'M'
          move 'A.PAYGROUP in (Select A2.PAYGROUP from PS_PAY_CALENDAR A2 where A2.RUN_ID = ''' to $SlctPeriod
          concat $SlctRunId with $SlctPeriod
          concat '''' with $SlctPeriod
          concat ' and A2.PAY_END_DT = ''' with $SlctPeriod
          concat $PayEndDate with $SlctPeriod
          concat '''' with $SlctPeriod
          concat ') and A.CHECK_DT >= ''' with $SlctPeriod
          concat $Month_begin_dt with $SlctPeriod
          concat '''' with $SlctPeriod
          concat 'and A.PAY_END_DT <= '''  with $SlctPeriod
          concat $PayEndDate with $SlctPeriod
          concat '''' with $SlctPeriod
        when = 'Q'
          do Get-Quarter-Dates
          move 'A.PAYGROUP in (Select A2.PAYGROUP from PS_PAY_CALENDAR A2 where A2.RUN_ID = ''' to $SlctPeriod
          concat $SlctRunId with $SlctPeriod
          concat '''' with $SlctPeriod
          concat ' and A2.PAY_END_DT = ''' with $SlctPeriod
          concat $PayEndDate with $SlctPeriod
          concat '''' with $SlctPeriod
          concat ') and A.CHECK_DT >= ''' with $SlctPeriod
          concat $quarter_begin_dt  with $SlctPeriod
          concat '''' with $SlctPeriod
          concat 'and A.PAY_END_DT <= '''  with $SlctPeriod
          concat $PayEndDate with $SlctPeriod
          concat '''' with $SlctPeriod
        when-other
          move 'A.PAYGROUP in (Select A2.PAYGROUP from PS_PAY_CALENDAR A2 where A2.RUN_ID = ''' to $SlctPeriod
          concat $SlctRunId with $SlctPeriod
          concat '''' with $SlctPeriod
          concat ' and A2.PAY_END_DT = ''' with $SlctPeriod
          concat $PayEndDate with $SlctPeriod
          concat '''' with $SlctPeriod
          concat ') and A.CHECK_DT >= ''' with $SlctPeriod
          concat $year_begin_dt with $SlctPeriod
          concat '''' with $SlctPeriod
          concat 'and A.PAY_END_DT <= '''  with $SlctPeriod
          concat $PayEndDate with $SlctPeriod
          concat '''' with $SlctPeriod
    end-evaluate
   else
     evaluate $Rpt_option
        when = 'P'
          let $SlctPeriod = $SlctCalendar
        when = 'M'
          move 'A.COMPANY = ''' to $SlctPeriod
          concat $SlctCompany with $SlctPeriod
          concat ''' and A.PAYGROUP = ''' with $SlctPeriod
          concat $Report_Paygrp with $SlctPeriod
          concat ''' And A.CHECK_DT >= ''' with $SlctPeriod
          concat $Month_begin_dt with $SlctPeriod
          concat ''' And A.PAY_END_DT <= ''' with $SlctPeriod
          concat $SlctPayEndDt with $SlctPeriod
          concat '''' with $SlctPeriod
        when = 'Q'
          do Get-Quarter-Dates
          move 'A.COMPANY = ''' to $SlctPeriod
          concat $SlctCompany with $SlctPeriod
          concat ''' and A.PAYGROUP = ''' with $SlctPeriod
          concat $Report_Paygrp with $SlctPeriod
          concat ''' And A.CHECK_DT >= ''' with $SlctPeriod
          concat $quarter_begin_dt with $SlctPeriod
          concat ''' And A.PAY_END_DT <= ''' with $SlctPeriod
          concat $SlctPayEndDt with $SlctPeriod
          concat '''' with $SlctPeriod
        when-other
          move 'A.COMPANY = ''' to $SlctPeriod
          concat $SlctCompany with $SlctPeriod
          concat ''' and A.PAYGROUP = ''' with $SlctPeriod
          concat $Report_Paygrp with $SlctPeriod
          concat ''' And A.CHECK_DT >= ''' with $SlctPeriod
          concat $Year_begin_dt with $SlctPeriod
          concat ''' And A.PAY_END_DT <= ''' with $SlctPeriod
          concat $SlctPayEndDt with $SlctPeriod
          concat '''' with $SlctPeriod
    end-evaluate


   end-if

end-procedure

begin-procedure Get-Quarter-Dates


evaluate $month
    when = '01'
    when = '02'
    when = '03'
      move '0101'   to $QtrMonthBegin
      break
    when = '04'
    when = '05'
    when = '06'
      move '0401'   to $QtrMonthBegin
      break
    when = '07'
    when = '08'
    when = '09'
      move '0701'   to $QtrMonthBegin
      break
    when-other
      move '1001'   to $QtrMonthBegin
      break
  end-evaluate

  let $quarter_begin =  $year   || $QtrMonthBegin
  do Format-DateTime($quarter_begin, $quarter_begin_dt, {DEFCMP},'','native')

end-procedure

begin-procedure Cheque-select

let #tot_count1 = 0
let #tot_chq_gross = 0
let #tot_chq_taxes = 0
let #tot_chq_ded = 0
let #tot_chq_net = 0

evaluate $Rpt_option
 when = 'P'
        print $Pay018cn_Pay_chq_sum            (+1,1)
 when = 'M'
        print $Pay018cn_Pay_chq_mtd            (+1,1)
 when = 'Q'
        print $Pay018cn_Pay_chq_qtd            (+1,1)
 when-other
        print $Pay018cn_Pay_chq_ytd            (+1,1)
end-evaluate

print $Pay018cn_All_cheques            (+1,1)

print $Pay018cn_Paygroup               (+2,{Pay018a_C_Paygroup})
print $Pay018cn_Count                  (0,{Pay018a_C_Count})
print $Pay018cn_Tot_gross              (0,{Pay018a_C_Total_gross})
print $Pay018cn_Tot_taxes              (0,{Pay018a_C_Total_taxes})
print $Pay018cn_Tot_deduc              (0,{Pay018a_C_Total_deductions})
print $Pay018cn_Net_pay                (0,{Pay018a_C_Net_pay})
print '--------'                       (+1,{Pay018a_C_Paygroup})
print '-------'                        (0,{Pay018a_C_Count})
print '-------------'                  (0,{Pay018a_C_Total_gross})
print '-------------'                  (0,{Pay018a_C_Total_taxes})
print '----------------'               (0,{Pay018a_C_Total_deductions})
print '-------------'                  (0,{Pay018a_C_Net_pay})

begin-SELECT
B.PAYGROUP  &paygroup1    (+1,{PAY018A_C_PAYGROUP})
COUNT(*)    &count1       (0,{PAY018A_C_COUNT})           EDIT 9999999

     add &count1 to #tot_count1

#ifdef DB2ALL
DECIMAL(SUM(B.TOTAL_GROSS), 15, 3) &tot_chq_gross (0,{PAY018A_C_TOTAL_GROSS}) EDIT 9999999999.99
DECIMAL(SUM(B.TOTAL_TAXES), 15, 3) &tot_chq_taxes (0,{PAY018A_C_TOTAL_TAXES}) EDIT 9999999999.99
DECIMAL(SUM(B.TOTAL_DEDUCTIONS), 15, 3) &tot_chq_ded  (0,{PAY018A_C_TOTAL_DEDUCTIONS}) EDIT 9999999999999.99
DECIMAL(SUM(B.NET_PAY), 15, 3)  &tot_chq_net          (0,{PAY018A_C_NET_PAY}) EDIT 9999999999.99
#else
SUM(B.TOTAL_GROSS) &tot_chq_gross    (0,{PAY018A_C_TOTAL_GROSS}) EDIT 9999999999.99
SUM(B.TOTAL_TAXES) &tot_chq_taxes    (0,{PAY018A_C_TOTAL_TAXES})    EDIT 9999999999.99
SUM(B.TOTAL_DEDUCTIONS) &tot_chq_ded (0,{PAY018A_C_TOTAL_DEDUCTIONS}) EDIT 9999999999999.99
SUM(B.NET_PAY)  &tot_chq_net         (0,{PAY018A_C_NET_PAY})          EDIT 9999999999.99
#end-if

      add &tot_chq_gross to #tot_chq_gross
      add &tot_chq_taxes to #tot_chq_taxes
      add &tot_chq_ded   to #tot_chq_ded
      add &tot_chq_net   to #tot_chq_net

FROM PS_PAY_CALENDAR A,
     PS_PAY_CHECK B
WHERE
  #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif

  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = B.COMPANY
  AND A.PAYGROUP   = B.PAYGROUP
  AND A.PAY_END_DT = B.PAY_END_DT
  AND EXISTS (SELECT 'x'
              FROM PS_PAY_EARNINGS C
              WHERE C.COMPANY    = B.COMPANY
                    AND C.PAYGROUP   = B.PAYGROUP
                    AND C.PAY_END_DT = B.PAY_END_DT
                    AND C.OFF_CYCLE  = B.OFF_CYCLE
                    AND C.PAGE_NUM      = B.PAGE_NUM
                    AND C.LINE_NUM      = B.LINE_NUM
                    AND C.SEPCHK     = B.SEPCHK
                    AND C.PAY_LINE_STATUS IN ('C','F','V')
                    AND C.SINGLE_CHECK_USE IN ('C', 'N'))
GROUP BY B.PAYGROUP
ORDER BY B.PAYGROUP
end-SELECT

print $Pay018cn_Grand_total          (+2,1)
do Format-Number(#tot_count1, $out, '9999999')
print $out      (0,{Pay018a_C_Count})
do Format-Number(#tot_chq_gross, $out, '9999999999.99')
print $out      (0,{Pay018a_C_Total_gross})
do Format-Number(#tot_chq_taxes, $out, '9999999999.99')
print $out      (0,{Pay018a_C_Total_taxes})
do Format-Number(#tot_chq_ded, $out, '9999999999999.99')
print $out      (0,{Pay018a_C_Total_deductions})
do Format-Number(#tot_chq_net, $out, '9999999999.99')
print $out      (0,{Pay018a_C_Net_pay})


print $Pay018cn_Onl_chqs               (+2,1)

print $Pay018cn_Paygroup               (+2,{Pay018a_C_Paygroup})
print $Pay018cn_Count                  (0,{Pay018a_C_Count})
print $Pay018cn_Tot_gross              (0,{Pay018a_C_Total_gross})
print $Pay018cn_Tot_taxes              (0,{Pay018a_C_Total_taxes})
print $Pay018cn_Tot_deduc              (0,{Pay018a_C_Total_deductions})
print $Pay018cn_Net_pay                (0,{Pay018a_C_Net_pay})
print '--------'                       (+1,{Pay018a_C_Paygroup})
print '-------'                        (0,{Pay018a_C_Count})
print '-------------'                  (0,{Pay018a_C_Total_gross})
print '-------------'                  (0,{Pay018a_C_Total_taxes})
print '----------------'               (0,{Pay018a_C_Total_deductions})
print '-------------'                  (0,{Pay018a_C_Net_pay})


move 0 to #tot_count1
move 0 to #tot_chq_gross
move 0 to #tot_chq_taxes
move 0 to #tot_chq_ded
move 0 to #tot_chq_net


begin-SELECT
A.PAYGROUP  &opaygroup1    (+1,{PAY018A_C_PAYGROUP})
COUNT(*)    &ocount1       (0,{PAY018A_C_COUNT})           EDIT 9999999

     add &ocount1 to #tot_count1

#ifdef DB2ALL
DECIMAL(SUM(B.TOTAL_GROSS), 15, 3)  &ototal_gross       (0,{PAY018A_C_TOTAL_GROSS}) EDIT 9999999999.99
DECIMAL(SUM(B.TOTAL_TAXES), 15, 3)  &ototal_taxes       (0,{PAY018A_C_TOTAL_TAXES}) EDIT 9999999999.99
DECIMAL(SUM(B.TOTAL_DEDUCTIONS), 15, 3)  &ototal_dedns  (0,{PAY018A_C_TOTAL_DEDUCTIONS}) EDIT 9999999999999.99
DECIMAL(SUM(B.NET_PAY), 15, 3)  &ototal_netpay          (0,{PAY018A_C_NET_PAY}) EDIT 9999999999.99
#else
SUM(B.TOTAL_GROSS)    &ototal_gross      (0,{PAY018A_C_TOTAL_GROSS}) EDIT 9999999999.99
SUM(B.TOTAL_TAXES)    &ototal_taxes      (0,{PAY018A_C_TOTAL_TAXES})    EDIT 9999999999.99
SUM(B.TOTAL_DEDUCTIONS)  &ototal_dedns   (0,{PAY018A_C_TOTAL_DEDUCTIONS}) EDIT 9999999999999.99
SUM(B.NET_PAY)         &ototal_netpay    (0,{PAY018A_C_NET_PAY})          EDIT 9999999999.99
#end-if

     add &ototal_gross  to #tot_chq_gross
     add &ototal_taxes  to #tot_chq_taxes
     add &ototal_dedns  to #tot_chq_ded
     add &ototal_netpay to #tot_chq_net


FROM PS_PAY_CALENDAR A,
     PS_PAY_CHECK B
WHERE
  #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif

  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = B.COMPANY
  AND A.PAYGROUP   = B.PAYGROUP
  AND A.PAY_END_DT = B.PAY_END_DT
  AND B.PAY_SHEET_SRC = 'O'
  AND EXISTS (SELECT 'x'
              FROM PS_PAY_EARNINGS C
              WHERE C.COMPANY    = B.COMPANY
                    AND C.PAYGROUP   = B.PAYGROUP
                    AND C.PAY_END_DT = B.PAY_END_DT
                    AND C.OFF_CYCLE  = B.OFF_CYCLE
                    AND C.PAGE_NUM      = B.PAGE_NUM
                    AND C.LINE_NUM      = B.LINE_NUM
                    AND C.SEPCHK     = B.SEPCHK
                    AND C.PAY_LINE_STATUS IN ('C','F','V')
                    AND C.SINGLE_CHECK_USE IN ('C', 'N'))
GROUP BY A.PAYGROUP
ORDER BY A.PAYGROUP
end-SELECT

print $Pay018cn_Grand_total          (+2,1)
do Format-Number(#tot_count1, $out, '9999999')
print $out      (0,{Pay018a_C_Count})
do Format-Number(#tot_chq_gross, $out, '9999999999.99')
print $out      (0,{Pay018a_C_Total_gross})
do Format-Number(#tot_chq_taxes, $out, '9999999999.99')
print $out      (0,{Pay018a_C_Total_taxes})
do Format-Number(#tot_chq_ded, $out, '9999999999999.99')
print $out      (0,{Pay018a_C_Total_deductions})
do Format-Number(#tot_chq_net, $out, '9999999999.99')
print $out      (0,{Pay018a_C_Net_pay})


move 0 to #tot_count1
move 0 to #tot_chq_gross
move 0 to #tot_chq_taxes
move 0 to #tot_chq_ded
move 0 to #tot_chq_net


! **********************************************************************
! *     Summary of Batch Final Cheques                                 *
! **********************************************************************
print $Pay018cn_Batch_final             (+2,1)

print $Pay018cn_Paygroup               (+2,{Pay018a_C_Paygroup})
print $Pay018cn_Count                  (0,{Pay018a_C_Count})
print $Pay018cn_Tot_gross              (0,{Pay018a_C_Total_gross})
print $Pay018cn_Tot_taxes              (0,{Pay018a_C_Total_taxes})
print $Pay018cn_Tot_deduc              (0,{Pay018a_C_Total_deductions})
print $Pay018cn_Net_pay                (0,{Pay018a_C_Net_pay})
print '--------'                       (+1,{Pay018a_C_Paygroup})
print '-------'                        (0,{Pay018a_C_Count})
print '-------------'                  (0,{Pay018a_C_Total_gross})
print '-------------'                  (0,{Pay018a_C_Total_taxes})
print '----------------'               (0,{Pay018a_C_Total_deductions})
print '-------------'                  (0,{Pay018a_C_Net_pay})

begin-SELECT
A.PAYGROUP  &kpaygroup1    (+1,{PAY018A_C_PAYGROUP})
COUNT(*)    &kcount1       (0,{PAY018A_C_COUNT})           EDIT 9999999

      add &kcount1 to #tot_count1

#ifdef DB2ALL
DECIMAL(SUM(B.TOTAL_GROSS), 15, 3)  &ktotal_gross        (0,{PAY018A_C_TOTAL_GROSS}) EDIT 9999999999.99
DECIMAL(SUM(B.TOTAL_TAXES), 15, 3)  &ktotal_taxes      (0,{PAY018A_C_TOTAL_TAXES}) EDIT 9999999999.99
DECIMAL(SUM(B.TOTAL_DEDUCTIONS), 15, 3) &ktotal_dedns  (0,{PAY018A_C_TOTAL_DEDUCTIONS}) EDIT 9999999999999.99
DECIMAL(SUM(B.NET_PAY), 15, 3)  &ktotal_netpay         (0,{PAY018A_C_NET_PAY}) EDIT 9999999999.99
#else
SUM(B.TOTAL_GROSS)  &ktotal_gross       (0,{PAY018A_C_TOTAL_GROSS}) EDIT 9999999999.99
SUM(B.TOTAL_TAXES)  &ktotal_taxes       (0,{PAY018A_C_TOTAL_TAXES})    EDIT 9999999999.99
SUM(B.TOTAL_DEDUCTIONS) &ktotal_dedns   (0,{PAY018A_C_TOTAL_DEDUCTIONS}) EDIT 9999999999999.99
SUM(B.NET_PAY) &ktotal_netpay           (0,{PAY018A_C_NET_PAY})          EDIT 9999999999.99
#end-if

     add &ktotal_gross  to #tot_chq_gross
     add &ktotal_taxes  to #tot_chq_taxes
     add &ktotal_dedns  to #tot_chq_ded
     add &ktotal_netpay to #tot_chq_net

from PS_PAY_CALENDAR A,
     PS_PAY_CHECK B
where
   #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif
  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = B.COMPANY
  AND A.PAYGROUP   = B.PAYGROUP
  AND A.PAY_END_DT = B.PAY_END_DT
  AND B.PAY_SHEET_SRC = 'K'
  AND EXISTS (SELECT 'x'
              from PS_PAY_EARNINGS C
              where C.COMPANY    = B.COMPANY
                    AND C.PAYGROUP   = B.PAYGROUP
                    AND C.PAY_END_DT = B.PAY_END_DT
                    AND C.OFF_CYCLE  = B.OFF_CYCLE
                    AND C.PAGE_NUM      = B.PAGE_NUM
                    AND C.LINE_NUM      = B.LINE_NUM
                    AND C.SEPCHK     = B.SEPCHK
                    AND C.PAY_LINE_STATUS IN ('C','F','V')
                    AND C.SINGLE_CHECK_USE IN ('C', 'N'))
GROUP BY A.PAYGROUP
ORDER BY A.PAYGROUP
end-SELECT

print $Pay018cn_Grand_total          (+2,1)
do Format-Number(#tot_count1, $out, '9999999')
print $out      (0,{Pay018a_C_Count})
do Format-Number(#tot_chq_gross, $out, '9999999999.99')
print $out      (0,{Pay018a_C_Total_gross})
do Format-Number(#tot_chq_taxes, $out, '9999999999.99')
print $out      (0,{Pay018a_C_Total_taxes})
do Format-Number(#tot_chq_ded, $out, '9999999999999.99')
print $out      (0,{Pay018a_C_Total_deductions})
do Format-Number(#tot_chq_net, $out, '9999999999.99')
print $out      (0,{Pay018a_C_Net_pay})


move 0 to #tot_count1
move 0 to #tot_chq_gross
move 0 to #tot_chq_taxes
move 0 to #tot_chq_ded
move 0 to #tot_chq_net


! **********************************************************************
! *     Summary of On-line Final Cheques                               *
! **********************************************************************
print $Pay018cn_Online_final                 (+2,1)

print $pay018cn_Paygroup               (+2,{Pay018a_C_Paygroup})
print $Pay018cn_Count                  (0,{Pay018a_C_Count})
print $Pay018cn_Tot_gross              (0,{Pay018a_C_Total_gross})
print $Pay018cn_Tot_taxes              (0,{Pay018a_C_Total_taxes})
print $Pay018cn_Tot_deduc              (0,{Pay018a_C_Total_deductions})
print $Pay018cn_Net_pay                (0,{Pay018a_C_Net_pay})
print '--------'                       (+1,{Pay018a_C_Paygroup})
print '-------'                        (0,{Pay018a_C_Count})
print '-------------'                  (0,{Pay018a_C_Total_gross})
print '-------------'                  (0,{Pay018a_C_Total_taxes})
print '----------------'               (0,{Pay018a_C_Total_deductions})
print '-------------'                  (0,{Pay018a_C_Net_pay})

begin-SELECT
A.PAYGROUP  &lpaygroup1    (+1,{PAY018A_C_PAYGROUP})
COUNT(*)    &lcount1       (0,{PAY018A_C_COUNT})           EDIT 9999999

       add &lcount1 to #tot_count1

#ifdef DB2ALL
DECIMAL(SUM(B.TOTAL_GROSS), 15, 3)  &ltotal_gross        (0,{PAY018A_C_TOTAL_GROSS}) EDIT 9999999999.99
DECIMAL(SUM(B.TOTAL_TAXES), 15, 3)  &ltotal_taxes      (0,{PAY018A_C_TOTAL_TAXES}) EDIT 9999999999.99
DECIMAL(SUM(B.TOTAL_DEDUCTIONS), 15, 3) &ltotal_dedns  (0,{PAY018A_C_TOTAL_DEDUCTIONS}) EDIT 9999999999999.99
DECIMAL(SUM(B.NET_PAY), 15, 3)  &ltotal_netpay         (0,{PAY018A_C_NET_PAY}) EDIT 9999999999.99
#else
SUM(B.TOTAL_GROSS)  &ltotal_gross       (0,{PAY018A_C_TOTAL_GROSS}) EDIT 9999999999.99
SUM(B.TOTAL_TAXES)  &ltotal_taxes       (0,{PAY018A_C_TOTAL_TAXES})    EDIT 9999999999.99
SUM(B.TOTAL_DEDUCTIONS) &ltotal_dedns   (0,{PAY018A_C_TOTAL_DEDUCTIONS}) EDIT 9999999999999.99
SUM(B.NET_PAY) &ltotal_netpay           (0,{PAY018A_C_NET_PAY})          EDIT 9999999999.99
#end-if

     add &ltotal_gross  to #tot_chq_gross
     add &ltotal_taxes  to #tot_chq_taxes
     add &ltotal_dedns  to #tot_chq_ded
     add &ltotal_netpay to #tot_chq_net

from PS_PAY_CALENDAR A,
     PS_PAY_CHECK B
where
  #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif

  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = B.COMPANY
  AND A.PAYGROUP   = B.PAYGROUP
  AND A.PAY_END_DT = B.PAY_END_DT
  AND B.PAY_SHEET_SRC = 'L'
  AND EXISTS (SELECT 'x'
              from PS_PAY_EARNINGS C
              where C.COMPANY    = B.COMPANY
                    AND C.PAYGROUP   = B.PAYGROUP
                    AND C.PAY_END_DT = B.PAY_END_DT
                    AND C.OFF_CYCLE  = B.OFF_CYCLE
                    AND C.PAGE_NUM      = B.PAGE_NUM
                    AND C.LINE_NUM      = B.LINE_NUM
                    AND C.SEPCHK     = B.SEPCHK
                    AND C.PAY_LINE_STATUS IN ('C','F','V')
                    AND C.SINGLE_CHECK_USE IN ('C', 'N'))
GROUP BY A.PAYGROUP
ORDER BY A.PAYGROUP
end-SELECT

print $Pay018cn_Grand_total          (+2,1)
do Format-Number(#tot_count1, $out, '9999999')
print $out      (0,{Pay018a_C_Count})
do Format-Number(#tot_chq_gross, $out, '9999999999.99')
print $out      (0,{Pay018a_C_Total_gross})
do Format-Number(#tot_chq_taxes, $out, '9999999999.99')
print $out      (0,{Pay018a_C_Total_taxes})
do Format-Number(#tot_chq_ded, $out, '9999999999999.99')
print $out      (0,{Pay018a_C_Total_deductions})
do Format-Number(#tot_chq_net, $out, '9999999999.99')
print $out      (0,{Pay018a_C_Net_pay})

end-procedure


begin-procedure Earnings-select

move 0 to #tot_count2
move 0 to #tot_reg_earns
move 0 to #tot_reg_earns_hrs
move 0 to #tot_reg_hrs
move 0 to #tot_reg_hrly_earns
move 0 to #tot_ot_hrs
move 0 to #tot_ot_hrly_earns

evaluate $Rpt_option
 when = 'P'
   Print $Pay018cn_Pay_earn_sum           (+5,1)
 when = 'M'
   Print $Pay018cn_Pay_earn_mtd           (+5,1)
 when = 'Q'
   Print $Pay018cn_Pay_earn_qtd           (+5,1)
 when-other
   Print $Pay018cn_Pay_earn_ytd           (+5,1)
end-evaluate

print ' '                              (+3,{Pay018b_C_Paygroup})
print ' '                              (0,{Pay018b_C_Count})
print ' '                              (0,{Pay018b_C_Reg_earns})
print $Pay018cn_Hours_for              (0,{Pay018b_C_Reg_earn_hrs})
print ' '                              (0,{Pay018b_C_Reg_hrs})
print $Pay018cn_Earn_for               (0,{Pay018b_C_Reg_hrly_earns})
print ' '                              (0,{Pay018b_C_Ot_hrs})
print $Pay018cn_Earn_for               (0,{Pay018b_C_Ot_hrly_earns})

print ' '                              (+1,{Pay018b_C_Paygroup})
print ' '                              (0,{Pay018b_C_Count})
print $Pay018cn_Regular                (0,{Pay018b_C_Reg_earns})
print $Pay018cn_Regular                (0,{Pay018b_C_Reg_earn_hrs})
print $Pay018cn_Regular                (0,{Pay018b_C_Reg_hrs})
print $Pay018cn_Regular                (0,{Pay018b_C_Reg_hrly_earns})
print $Pay018cn_Overtime               (0,{Pay018b_C_Ot_hrs})
print $Pay018cn_Overtime               (0,{Pay018b_C_Ot_hrly_earns})

print $Pay018cn_Paygroup               (+1,{Pay018b_C_Paygroup})
print $Pay018cn_Count                  (0,{Pay018b_C_Count})
print $Pay018cn_Earnings               (0,{Pay018b_C_Reg_earns})
print $Pay018cn_Earnings               (0,{Pay018b_C_Reg_earn_hrs})
print $Pay018cn_Hours                  (0,{Pay018b_C_Reg_hrs})
print $Pay018cn_Hours                  (0,{Pay018b_C_Reg_hrly_earns})
print $Pay018cn_Hours                  (0,{Pay018b_C_Ot_hrs})
print $Pay018cn_Hours                  (0,{Pay018b_C_Ot_hrly_earns})

print '--------'                       (+1,{Pay018b_C_Paygroup})
print '-------'                        (0,{Pay018b_C_Count})
print '------------'                   (0,{Pay018b_C_Reg_earns})
print '--------'                       (0,{Pay018b_C_Reg_earn_hrs})
print '----------'                     (0,{Pay018b_C_Reg_hrs})
print '--------------'                 (0,{Pay018b_C_Reg_hrly_earns})
print '-----------'                    (0,{Pay018b_C_Ot_hrs})
print '-------------'                  (0,{Pay018b_C_Ot_hrly_earns})

begin-SELECT
B.PAYGROUP  &offpaygroup2  (+1,{PAY018B_C_PAYGROUP})
COUNT(*) &count2           (0,{PAY018B_C_COUNT})          EDIT 9999999

     add &count2 to #tot_count2

#ifdef DB2ALL
DECIMAL(SUM(B.REG_EARNS), 15, 3)  &tot_reg_earns       (0,{PAY018B_C_REG_EARNS})      EDIT 999999999.99
DECIMAL(SUM(B.REG_EARN_HRS), 15, 3) &tot_reg_earns_hrs (0,{PAY018B_C_REG_EARN_HRS})   EDIT 999999999
DECIMAL(SUM(B.REG_HRS * 1), 15, 3) &tot_reg_hrs        (0,{PAY018B_C_REG_HRS})        EDIT 9999999.99
DECIMAL(SUM(B.REG_HRLY_EARNS), 15, 3) &tot_reg_hrly_earns  (0,{PAY018B_C_REG_HRLY_EARNS}) EDIT 99999999999.99
DECIMAL(SUM(B.OT_HRS), 15, 3)   &tot_ot_hrs            (0,{PAY018B_C_OT_HRS})         EDIT 99999999.99
DECIMAL(SUM(B.OT_HRLY_EARNS), 15, 3) &tot_ot_hrly_earns  (0,{PAY018B_C_OT_HRLY_EARNS})  EDIT 9999999999.99
#else
SUM(B.REG_EARNS)  &tot_reg_earns          (0,{PAY018B_C_REG_EARNS})      EDIT 999999999.99
SUM(B.REG_EARN_HRS) &tot_reg_earns_hrs    (0,{PAY018B_C_REG_EARN_HRS})   EDIT 999999999
SUM(B.REG_HRS * 1)  &tot_reg_hrs          (0,{PAY018B_C_REG_HRS})        EDIT 9999999.99
SUM(B.REG_HRLY_EARNS) &tot_reg_hrly_earns (0,{PAY018B_C_REG_HRLY_EARNS}) EDIT 99999999999.99
SUM(B.OT_HRS)  &tot_ot_hrs                (0,{PAY018B_C_OT_HRS})         EDIT 99999999.99
SUM(B.OT_HRLY_EARNS) &tot_ot_hrly_earns   (0,{PAY018B_C_OT_HRLY_EARNS})  EDIT 9999999999.99
#end-if

    add &tot_reg_earns       to #tot_reg_earns
    add &tot_reg_earns_hrs   to #tot_reg_earns_hrs
    add &tot_reg_hrs         to #tot_reg_hrs
    add &tot_reg_hrly_earns  to #tot_reg_hrly_earns
    add &tot_ot_hrs          to #tot_ot_hrs
    add &tot_ot_hrly_earns   to #tot_ot_hrly_earns

FROM PS_PAY_CALENDAR A,
     PS_PAY_EARNINGS B
WHERE
  #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif

  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = B.COMPANY
  AND A.PAY_END_DT = B.PAY_END_DT
  AND A.PAYGROUP   = B.PAYGROUP
  AND B.PAY_LINE_STATUS IN ('C','F','V')
  AND B.SINGLE_CHECK_USE IN ('C', 'N')
GROUP BY B.PAYGROUP
ORDER BY B.PAYGROUP
end-SELECT

print $Pay018cn_Grand_total         (+2,1)
do Format-Number(#tot_count2, $out, '9999999')
print $out      (0,{Pay018b_C_Count})
do Format-Number(#tot_reg_earns , $out, '999999999.99')
print $out      (0,{Pay018b_C_Reg_earns})
do Format-Number(#tot_reg_earns_hrs, $out, '999999999')
print $out      (0,{Pay018b_C_Reg_earn_hrs})
do Format-Number(#tot_reg_hrs, $out, '9999999.99')
print $out      (0,{Pay018b_C_Reg_hrs})
do Format-Number(#tot_reg_hrly_earns, $out, '99999999999.99')
print $out      (0,{Pay018b_C_Reg_hrly_earns})
do Format-Number(#tot_ot_hrs, $out, '99999999.99')
print $out      (0,{Pay018b_C_Ot_hrs})
do Format-Number(#tot_ot_hrly_earns, $out, '9999999999.99')
print $out      (0,{Pay018b_C_Ot_hrly_earns})


end-procedure


begin-procedure Other-select
move 0 to #tot_count3
move 0 to #tot_oth_hrs
move 0 to #tot_oth_earns

begin-SELECT
B.PAYGROUP       &Paygroup3    (+1,{PAY018C_C_PAYGROUP}) on-break skiplines=1 before=Init-Oth-Paygroup-Totals after=Print-Oth-Paygroup-Totals
B.ERNCD          &Erncd        (0,{PAY018C_C_ERNCD})
COUNT(*)         &count3       (0,{PAY018C_C_COUNT})     EDIT 9999999

  add &count3 to #tot_count3
  add &count3 to #tot_paygroup_count3

#ifdef DB2ALL
DECIMAL(SUM(B.OTH_HRS), 15, 3)   &oth_hrs      (0,{PAY018C_C_OTH_HRS})   EDIT 9999999.99
DECIMAL(SUM(B.OTH_EARNS), 15, 3) &oth_earns    (0,{PAY018C_C_OTH_EARNS}) EDIT 999999999.99
#else
SUM(B.OTH_HRS)           &oth_hrs      (0,{PAY018C_C_OTH_HRS})   EDIT 9999999.99
SUM(B.OTH_EARNS)         &oth_earns    (0,{PAY018C_C_OTH_EARNS}) EDIT 999999999.99
#end-if

  add &oth_hrs to #tot_oth_hrs
  add &oth_hrs to #tot_paygroup_oth_hrs
  add &oth_earns to #tot_oth_earns
  add &oth_earns to #tot_paygroup_oth_earns

FROM PS_PAY_CALENDAR A,
     PS_PAY_OTH_EARNS B
WHERE
   #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif

  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = B.COMPANY
  AND A.PAY_END_DT = B.PAY_END_DT
  AND A.PAYGROUP   = B.PAYGROUP
  AND EXISTS (SELECT 'x'
              FROM PS_PAY_EARNINGS C
              WHERE C.COMPANY = B.COMPANY
                AND C.PAYGROUP = B.PAYGROUP
                AND C.PAY_END_DT = B.PAY_END_DT
                AND C.OFF_CYCLE = B.OFF_CYCLE
                AND C.PAGE_NUM = B.PAGE_NUM
                AND C.LINE_NUM = B.LINE_NUM
                AND C.ADDL_NBR = B.ADDL_NBR
                AND C.PAY_LINE_STATUS IN ('C','F','V')
                AND C.SINGLE_CHECK_USE IN ('C', 'N'))
GROUP BY B.PAYGROUP,
         B.ERNCD
ORDER BY B.PAYGROUP,
         B.ERNCD
end-SELECT

print $Pay018cn_Grand_total     (+2,1)
do Format-Number(#tot_count3, $out, '9999999')
print $out    (0,{Pay018c_C_Count})
do Format-Number(#tot_oth_hrs, $out, '9999999.99')
print $out   (0,{Pay018c_C_Oth_hrs})
do Format-Number(#tot_oth_earns, $out, '999999999.99')
print $out (0,{Pay018c_C_Oth_earns})
end-procedure

begin-procedure Print-Oth-Paygroup-Totals

print $Pay018cn_Paygroup_total        (+2,1)
do Format-Number(#tot_paygroup_count3 , $out, '9999999')
print $out    (0,{Pay018c_C_Count})
do Format-Number(#tot_paygroup_oth_hrs, $out, '9999999.99')
print $out   (0,{Pay018c_C_Oth_hrs})
do Format-Number(#tot_paygroup_oth_earns, $out, '999999999.99')
print $out (0,{Pay018c_C_Oth_earns})

end-procedure


begin-procedure Init-Oth-Paygroup-Totals

move 0 to #tot_paygroup_count3
move 0 to #tot_paygroup_oth_hrs
move 0 to #tot_paygroup_oth_earns

end-procedure

begin-procedure Special-Accum-select
move 0 to #tot_count4
move 0 to #tot_spcl_earns
print ' '                     (+1,1)

begin-SELECT
B.PAYGROUP    &Paygroup4      (+1,{PAY018D_C_PAYGROUP}) on-break skiplines=1 before=Init-Spec-Paygroup-Totals after=Print-Spec-Paygroup-Totals
B.ERNCD_SPCL  &Erncd_spcl     (0,{PAY018D_C_ERNCD_SPCL})
COUNT(*) &count4              (0,{PAY018D_C_COUNT})      EDIT 9999999

   add &count4 to #tot_count4
   add &count4 to #tot_paygroup_count4

#ifdef DB2ALL
DECIMAL(SUM(B.SPCL_EARNS), 15, 3) &spcl_earns (0,{PAY018D_C_SPCL_EARNS}) EDIT 999999999999.99
#else
SUM(B.SPCL_EARNS)    &spcl_earns (0,{PAY018D_C_SPCL_EARNS}) EDIT 999999999999.99
#end-if

   add &spcl_earns to #tot_spcl_earns
   add &spcl_earns to #tot_paygroup_spec_earns

FROM PS_PAY_CALENDAR A,
     PS_PAY_SPCL_EARNS B
WHERE
  #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif

  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = B.COMPANY
  AND A.PAY_END_DT = B.PAY_END_DT
  AND A.PAYGROUP   = B.PAYGROUP
  AND EXISTS (SELECT 'x'
              FROM PS_PAY_EARNINGS C
              WHERE C.COMPANY = B.COMPANY
                AND C.PAYGROUP = B.PAYGROUP
                AND C.PAY_END_DT = B.PAY_END_DT
                AND C.OFF_CYCLE = B.OFF_CYCLE
                AND C.PAGE_NUM = B.PAGE_NUM
                AND C.LINE_NUM = B.LINE_NUM
                AND C.PAY_LINE_STATUS IN ('C','F','V')
                AND C.SINGLE_CHECK_USE IN ('C', 'N'))
GROUP BY B.PAYGROUP,
         B.ERNCD_SPCL
ORDER BY B.PAYGROUP,
         B.ERNCD_SPCL
end-SELECT

print $Pay018cn_Grand_total   (+2,1)
do Format-Number(#tot_count4, $out, '9999999')
print $out    (0,{PAY018D_C_COUNT})
do Format-Number(#tot_spcl_earns, $out, '999999999999.99')
print $out   (0,{PAY018D_C_SPCL_EARNS})

end-procedure


begin-procedure Print-Spec-Paygroup-Totals

print $Pay018cn_Paygroup_total       (+2,1)
do Format-Number(#tot_paygroup_count4 , $out, '9999999')
print $out    (0,{PAY018D_C_COUNT})
do Format-Number(#tot_paygroup_spec_earns , $out, '999999999999.99')
print $out   (0,{PAY018D_C_SPCL_EARNS})

end-procedure


begin-procedure Init-Spec-Paygroup-Totals

move 0 to #tot_paygroup_count4
move 0 to #tot_paygroup_spec_earns

end-procedure


begin-procedure EE-Deduction-select
move 0 to #tot_count5
move 0 to #tot_ded_cur
move 0 to #tot_ded_not_taken
move 0 to #tot_ded_cur_paybk
move 0 to #tot_ded_cur_refund

begin-SELECT
B.PAYGROUP   &Paygroup5          (+1,{PAY018E_C_PAYGROUP}) on-break skiplines=1 before=Init-Ded-Paygroup-Totals after=Print-Ded-Paygroup-Totals
B.PLAN_TYPE                      (0,{PAY018E_C_PLAN_TYPE})
B.DEDCD                          (0,{PAY018E_C_DEDCD})
B.DED_CLASS                      (0,{PAY018E_C_DED_CLASS})
B.DED_SLSTX_CLASS
B.REASON_NOT_TAKEN

  if &B.DED_SLSTX_CLASS = 'B'
     print ' '                   (0,{PAY018E_C_DED_SLSTX})
  else
     print  &B.DED_SLSTX_CLASS   (0,{PAY018E_C_DED_SLSTX})
  end-if

COUNT(*) &count5                 (0,{PAY018E_C_COUNT})         EDIT 9999999

  add &count5 to #tot_count5
  add &count5 to #tot_paygroup_count5

#ifdef DB2ALL
DECIMAL(SUM(B.DED_CUR), 15, 3) &ded_cur (0,{PAY018E_C_DED_CUR}) EDIT 9999999999.99
DECIMAL(SUM(B.DED_NOT_TAKEN), 15, 3) &ded_not_taken (0,{PAY018E_C_DED_NOT_TAKEN}) EDIT 9999999999.99
DECIMAL(SUM(B.DED_CUR_PAYBK), 15, 3) &ded_cur_paybk (0,{PAY018E_C_DED_CUR_PAYBK}) EDIT 9999999999.99
DECIMAL(SUM(B.DED_CUR_REFUND), 15, 3) &ded_cur_refund (0,{PAY018E_C_DED_CUR_REFUND}) EDIT 9999999999.99
#else
SUM(B.DED_CUR)         &ded_cur          (0,{PAY018E_C_DED_CUR})    EDIT 9999999999.99
SUM(B.DED_NOT_TAKEN)   &ded_not_taken (0,{PAY018E_C_DED_NOT_TAKEN}) EDIT 9999999999.99
SUM(B.DED_CUR_PAYBK)   &ded_cur_paybk (0,{PAY018E_C_DED_CUR_PAYBK}) EDIT 9999999999.99
SUM(B.DED_CUR_REFUND)  &ded_cur_refund (0,{PAY018E_C_DED_CUR_REFUND}) EDIT 9999999999.99
#end-if

  if &Ded_Not_Taken > 0
    move 'REASON_NOT_TAKEN' to $FieldName
    move &B.Reason_Not_Taken to $FieldValue
    do Read-Translate-Table
    let $Reason_Not_Taken = &B.Reason_Not_Taken || ' ' || $XlatShortName
    print $Reason_Not_Taken  (0,{Pay018e_C_Reason_not_taken})
  end-if

  add &ded_cur to #tot_ded_cur
  add &ded_cur to #tot_paygroup_ded_cur
  add &ded_not_taken to #tot_ded_not_taken
  add &ded_not_taken to #tot_paygroup_ded_not_taken
  add &ded_cur_paybk to #tot_ded_cur_paybk
  add &ded_cur_paybk to #tot_paygroup_ded_cur_paybk
  add &ded_cur_refund to #tot_ded_cur_refund
  add &ded_cur_refund to #tot_paygroup_ded_cur_refund

FROM PS_PAY_CALENDAR A,
     PS_PAY_DEDUCTION B
WHERE
  #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif

  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = B.COMPANY
  AND A.PAY_END_DT = B.PAY_END_DT
  AND A.PAYGROUP   = B.PAYGROUP
  AND B.DED_CLASS <= 'K'
  AND EXISTS (SELECT 'x'
              FROM PS_PAY_EARNINGS C
              WHERE C.COMPANY = B.COMPANY
                AND C.PAYGROUP = B.PAYGROUP
                AND C.PAY_END_DT = B.PAY_END_DT
                AND C.OFF_CYCLE = B.OFF_CYCLE
                AND C.PAGE_NUM = B.PAGE_NUM
                AND C.LINE_NUM = B.LINE_NUM
                AND C.PAY_LINE_STATUS IN ('C','F','V')
                AND C.SINGLE_CHECK_USE IN ('C', 'N'))
GROUP BY B.PAYGROUP,
         B.PLAN_TYPE,
         B.DEDCD,
         B.DED_CLASS,
         B.DED_SLSTX_CLASS,
         B.REASON_NOT_TAKEN
ORDER BY B.PAYGROUP,
         B.PLAN_TYPE,
         B.DEDCD,
         B.DED_CLASS,
         B.DED_SLSTX_CLASS,
         B.REASON_NOT_TAKEN
end-SELECT

print $Pay018cn_Grand_total        (+2,1)
do Format-Number(#tot_count5, $out, '9999999')
print $out          (0,{Pay018e_C_Count})
do Format-Number(#tot_Ded_cur, $out, '9999999999.99')
print $out          (0,{Pay018e_C_Ded_cur})
do Format-Number(#tot_Ded_not_taken, $out, '9999999999.99')
print $out    (0,{Pay018e_C_Ded_not_taken})
do Format-Number(#tot_Ded_cur_paybk, $out, '9999999999.99')
print $out    (0,{Pay018e_C_Ded_cur_paybk})
do Format-Number(#tot_Ded_cur_refund, $out, '9999999999.99')
print $out   (0,{Pay018e_C_Ded_cur_refund})
end-procedure

begin-procedure Print-Ded-Paygroup-Totals

print $Pay018cn_Paygroup_total       (+2,1)
do Format-Number(#tot_paygroup_count5 , $out, '9999999')
print $out    (0,{Pay018e_C_Count})
do Format-Number(#tot_paygroup_Ded_cur, $out, '9999999999.99')
print $out          (0,{Pay018e_C_Ded_cur})
do Format-Number(#tot_paygroup_Ded_not_taken, $out, '9999999999.99')
print $out    (0,{Pay018e_C_Ded_not_taken})
do Format-Number(#tot_paygroup_Ded_cur_paybk, $out, '9999999999.99')
print $out    (0,{Pay018e_C_Ded_cur_paybk})
do Format-Number(#tot_paygroup_Ded_cur_refund, $out, '9999999999.99')
print $out   (0,{Pay018e_C_Ded_cur_refund})


end-procedure


begin-procedure Init-Ded-Paygroup-Totals

move 0 to #tot_paygroup_count5
move 0 to #tot_paygroup_ded_cur
move 0 to #tot_paygroup_ded_not_taken
move 0 to #tot_paygroup_ded_cur_paybk
move 0 to #tot_paygroup_ded_cur_refund

end-procedure

begin-procedure ER-Contrib-select
move 0 to #tot_count6
move 0 to #tot_ded_cur
move 0 to #tot_ded_not_taken
move 0 to #tot_ded_cur_paybk
move 0 to #tot_ded_cur_refund

begin-SELECT
F.PAYGROUP   &Paygroup6          (+1,{PAY018F_C_PAYGROUP}) on-break skiplines=1 before=Init-Contr-Paygroup-Totals after=Print-Contr-Paygroup-Totals
F.PLAN_TYPE &plan_type2          (0,{PAY018F_C_PLAN_TYPE})
F.DEDCD     &dedcd2              (0,{PAY018F_C_DEDCD})
F.DED_CLASS &ded_class2          (0,{PAY018F_C_DED_CLASS})
F.DED_SLSTX_CLASS
F.REASON_NOT_TAKEN

  if &F.DED_SLSTX_CLASS = 'B'
     print ' '                   (0,{PAY018F_C_DED_SLSTX})
  else
     print  &F.DED_SLSTX_CLASS   (0,{PAY018F_C_DED_SLSTX})
  end-if

COUNT(*) &count6                 (0,{PAY018F_C_COUNT})  EDIT 9999999

  add &count6 to #tot_count6
  add &count6 to #tot_paygroup_count6

#ifdef DB2ALL
DECIMAL(SUM(F.DED_CUR), 15, 3) &ded_cur2    (0,{PAY018F_C_DED_CUR}) EDIT 9999999999.99
DECIMAL(SUM(F.DED_NOT_TAKEN), 15, 3) &ded_not_taken2 (0,{PAY018F_C_DED_NOT_TAKEN}) EDIT 9999999999.99
DECIMAL(SUM(F.DED_CUR_PAYBK), 15, 3) &ded_cur_paybk2 (0,{PAY018F_C_DED_CUR_PAYBK}) EDIT 9999999999.99
DECIMAL(SUM(F.DED_CUR_REFUND), 15, 3) &ded_cur_refund2  (0,{PAY018F_C_DED_CUR_REFUND}) EDIT 9999999999.99
#else
SUM(F.DED_CUR)        &ded_cur2       (0,{PAY018F_C_DED_CUR}) EDIT 9999999999.99
SUM(F.DED_NOT_TAKEN)  &ded_not_taken2 (0,{PAY018F_C_DED_NOT_TAKEN}) EDIT 9999999999.99
SUM(F.DED_CUR_PAYBK)  &ded_cur_paybk2 (0,{PAY018F_C_DED_CUR_PAYBK}) EDIT 9999999999.99
SUM(F.DED_CUR_REFUND) &ded_cur_refund2 (0,{PAY018F_C_DED_CUR_REFUND}) EDIT 9999999999.99
#end-if

  if &ded_not_taken2 > 0
    move 'REASON_NOT_TAKEN' to $FieldName
    move &F.Reason_Not_Taken to $FieldValue
    do Read-Translate-Table
    let $Reason_Not_Taken = &F.Reason_Not_Taken || ' ' || $XlatShortName
    print $Reason_Not_Taken  (0,{Pay018f_C_Reason_not_taken})
  end-if

  add &ded_cur2 to #tot_ded_cur
  add &ded_cur2 to #tot_paygroup_ded_cur
  add &ded_not_taken2 to #tot_ded_not_taken
  add &ded_not_taken2 to #tot_paygroup_ded_not_taken
  add &ded_cur_paybk2 to #tot_ded_cur_paybk
  add &ded_cur_paybk2 to #tot_paygroup_ded_cur_paybk
  add &ded_cur_refund2 to #tot_ded_cur_refund
  add &ded_cur_refund2 to #tot_paygroup_ded_cur_refund

FROM PS_PAY_CALENDAR A,
     PS_PAY_DEDUCTION F
WHERE
  #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif

  AND F.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND F.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = F.COMPANY
  AND A.PAY_END_DT = F.PAY_END_DT
  AND A.PAYGROUP   = F.PAYGROUP
  AND F.DED_CLASS >= 'L'
  AND EXISTS (SELECT 'x'
              FROM PS_PAY_EARNINGS C
              WHERE C.COMPANY = F.COMPANY
                AND C.PAYGROUP = F.PAYGROUP
                AND C.PAY_END_DT = F.PAY_END_DT
                AND C.OFF_CYCLE = F.OFF_CYCLE
                AND C.PAGE_NUM = F.PAGE_NUM
                AND C.LINE_NUM = F.LINE_NUM
                AND C.PAY_LINE_STATUS IN ('C','F','V')
                AND C.SINGLE_CHECK_USE IN ('C', 'N'))
GROUP BY F.PAYGROUP,
         F.PLAN_TYPE,
         F.DEDCD,
         F.DED_CLASS,
         F.DED_SLSTX_CLASS,
         F.REASON_NOT_TAKEN
ORDER BY F.PAYGROUP,
         F.PLAN_TYPE,
         F.DEDCD,
         F.DED_CLASS,
         F.DED_SLSTX_CLASS,
         F.REASON_NOT_TAKEN
end-SELECT

print $Pay018cn_Grand_total         (+2,1)
do Format-Number(#tot_count6, $out, '9999999')
print $out          (0,{Pay018f_C_Count})
do Format-Number(#tot_Ded_cur, $out, '9999999999.99')
print $out          (0,{Pay018f_C_Ded_cur})
do Format-Number(#tot_Ded_not_taken, $out, '9999999999.99')
print $out    (0,{Pay018f_C_Ded_not_taken})
do Format-Number(#tot_Ded_cur_paybk, $out, '9999999999.99')
print $out    (0,{Pay018f_C_Ded_cur_paybk})
do Format-Number(#tot_Ded_cur_refund, $out, '9999999999.99')
print $out   (0,{Pay018f_C_Ded_cur_refund})
end-procedure

begin-procedure Print-Contr-Paygroup-Totals

print $Pay018cn_Paygroup_total        (+2,1)
do Format-Number(#tot_paygroup_count6 , $out, '9999999')
print $out    (0,{Pay018e_C_Count})
do Format-Number(#tot_paygroup_Ded_cur, $out, '9999999999.99')
print $out          (0,{Pay018f_C_Ded_cur})
do Format-Number(#tot_paygroup_Ded_not_taken, $out, '9999999999.99')
print $out    (0,{Pay018f_C_Ded_not_taken})
do Format-Number(#tot_paygroup_Ded_cur_paybk, $out, '9999999999.99')
print $out    (0,{Pay018f_C_Ded_cur_paybk})
do Format-Number(#tot_paygroup_Ded_cur_refund, $out, '9999999999.99')
print $out   (0,{Pay018f_C_Ded_cur_refund})

end-procedure


begin-procedure Init-Contr-Paygroup-Totals

move 0 to #tot_paygroup_count6
move 0 to #tot_paygroup_ded_cur
move 0 to #tot_paygroup_ded_not_taken
move 0 to #tot_paygroup_ded_cur_paybk
move 0 to #tot_paygroup_ded_cur_refund

end-procedure


begin-procedure EE-Tax-select

  move 'Y' to $First_Row
  do Init-Tax-Totals
  do Get-Tax-Class-Name
  do Init-EETax-Paygroup-Totals
  do Init-EETax-Wagels-Totals

begin-SELECT
E.PAYGROUP
E.WAGE_LOSS_PLAN
E.TAX_CLASS_CAN
E.TAX_CUR
E.TXGRS_CUR
E.NLGRS_CUR
E.TAX_NOT_TAKEN

  if $First_Row = 'Y'
     move 'N' to $First_Row
     move 0 to #tot_paygr_count7
     move 0 to #tot_wagels_count7
     move &E.Wage_loss_plan to $Wage_Loss_Plan
     move &E.Paygroup       to $Paygroup
     print &E.Paygroup      (+1,{PAY018G_C_PAYGROUP})
     do Get-Wage-loss-data
  end-if

  if &E.Paygroup  <> $Paygroup
     do Print-EETax-Wagels-Totals
     move &E.Wage_loss_plan to $Wage_Loss_Plan
     do Get-Wage-loss-data
     do Print-EETax-Paygroup-Totals
     move  &E.Paygroup  to $Paygroup
     print &E.Paygroup       (+1,{PAY018G_C_PAYGROUP})
  end-if

  if &E.Wage_loss_plan <> $Wage_Loss_Plan
     do Print-EETax-Wagels-Totals
     move &E.Wage_loss_plan to $Wage_Loss_Plan
     do Get-Wage-loss-data
  end-if

  if &E.TAX_CLASS_CAN = 'CIT'
     add 1 to #tot_paygr_count7
     add &E.TAX_CUR      to #tot_paygr_Cit_tax_cur2  round=2
     add &E.TXGRS_CUR    to #tot_paygr_Cit_txgrs_cur round=2
     add 1 to #tot_wagels_count7
     add &E.TAX_CUR      to #tot_wagels_Cit_tax_cur2  round=2
     add &E.TXGRS_CUR    to #tot_wagels_Cit_txgrs_cur round=2
  else
     if &E.TAX_CLASS_CAN = 'QIT'
        add &E.TAX_CUR      to #tot_paygr_Qit_tax_cur2  round=2
        add &E.TXGRS_CUR    to #tot_paygr_Qit_txgrs_cur round=2
        add &E.TAX_CUR      to #tot_wagels_Qit_tax_cur2  round=2
        add &E.TXGRS_CUR    to #tot_wagels_Qit_txgrs_cur round=2
     else
        if &E.TAX_CLASS_CAN = 'CPP'
           add &E.TAX_CUR      to #tot_paygr_CPP_Contrib_cur round=2
           add &E.TXGRS_CUR    to #tot_paygr_CPP_Earns_Cur   round=2
           add &E.NLGRS_CUR    to #tot_paygr_CPP_nlgrs_cur   round=2
           add &E.TAX_CUR      to #tot_wagels_CPP_Contrib_cur round=2
           add &E.TXGRS_CUR    to #tot_wagels_CPP_Earns_Cur   round=2
           add &E.NLGRS_CUR    to #tot_wagels_CPP_nlgrs_cur   round=2
        else
           if &E.TAX_CLASS_CAN = 'QPP'
              add &E.TAX_CUR      to #tot_paygr_QPP_Contrib_cur round=2
              add &E.TXGRS_CUR    to #tot_paygr_QPP_Earns_Cur   round=2
              add &E.NLGRS_CUR    to #tot_paygr_QPP_nlgrs_cur   round=2
              add &E.TAX_CUR      to #tot_wagels_QPP_Contrib_cur round=2
              add &E.TXGRS_CUR    to #tot_wagels_QPP_Earns_Cur   round=2
              add &E.NLGRS_CUR    to #tot_wagels_QPP_nlgrs_cur   round=2
           else
              if &E.TAX_CLASS_CAN = 'EIE'
                 add &E.TAX_CUR      to #tot_paygr_UI_EE_Premium_cur round=2
                 add &E.TXGRS_CUR    to #tot_paygr_UI_EE_Earns_cur   round=2
                 add &E.TAX_CUR      to #tot_wagels_UI_EE_Premium_cur round=2
                 add &E.TXGRS_CUR    to #tot_wagels_UI_EE_Earns_cur   round=2
              else
                 if &E.TAX_CLASS_CAN = 'CPA'
                    add &E.TAX_CUR      to #tot_paygr_Pension_Adj_cur  round=2
                    add &E.TAX_CUR      to #tot_wagels_Pension_Adj_cur  round=2
                 else
                    if &E.TAX_CLASS_CAN = 'T4A'
                       add &E.TAX_CUR      to #tot_paygr_T4A_Tax_cur   round=2
                       add &E.TXGRS_CUR    to #tot_paygr_T4A_Txgrs_cur round=2
                       add &E.TAX_CUR      to #tot_wagels_T4A_Tax_cur   round=2
                       add &E.TXGRS_CUR    to #tot_wagels_T4A_Txgrs_cur round=2
                    else
                       if &E.TAX_CLASS_CAN = 'RV2'
                          add &E.TAX_CUR      to #tot_paygr_RV2_Tax_cur   round=2
                          add &E.TXGRS_CUR    to #tot_paygr_RV2_Txgrs_cur round=2
                          add &E.TAX_CUR      to #tot_wagels_RV2_Tax_cur   round=2
                          add &E.TXGRS_CUR    to #tot_wagels_RV2_Txgrs_cur round=2
                       else
                          if &E.TAX_CLASS_CAN = 'PYT'
                             add &E.TAX_CUR      to #tot_paygr_Payroll_Tax_cur   round=2
                             add &E.TXGRS_CUR    to #tot_paygr_Payroll_Txgrs_cur round=2
                             add &E.TAX_CUR      to #tot_wagels_Payroll_Tax_cur   round=2
                             add &E.TXGRS_CUR    to #tot_wagels_Payroll_Txgrs_cur round=2
                          else
                             if &E.TAX_CLASS_CAN = 'QIE'
                                add &E.TAX_CUR      to #tot_paygr_QIE_Tax_cur   round=2
                                add &E.TXGRS_CUR    to #tot_paygr_QIE_Txgrs_cur round=2
                                add &E.TAX_CUR      to #tot_wagels_QIE_Tax_cur   round=2
                                add &E.TXGRS_CUR    to #tot_wagels_QIE_Txgrs_cur round=2
                             else
                                if &E.TAX_CLASS_CAN = 'ALL'
                                    add &E.TAX_NOT_TAKEN to #tot_paygr_Tax_not_taken  round=2
                                    add &E.TAX_NOT_TAKEN to #tot_wagels_Tax_not_taken round=2
                                end-if
                             end-if
                          end-if
                       end-if
                    end-if
                 end-if
              end-if
           end-if
        end-if
     end-if
  end-if

FROM PS_PAY_CALENDAR A,
     PS_PAY_TAX_CAN E
WHERE
  #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif

  AND E.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND E.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = E.COMPANY
  AND A.PAY_END_DT = E.PAY_END_DT
  AND A.PAYGROUP   = E.PAYGROUP
  AND E.TAX_CLASS_CAN IN
     ('CIT','QIT','CPP','QPP','EIE','CPA','T4A','RV2','PYT', 'ALL','QIE')
  AND EXISTS (SELECT 'x'
              FROM PS_PAY_EARNINGS C
              WHERE C.COMPANY = E.COMPANY
                AND C.PAYGROUP = E.PAYGROUP
                AND C.PAY_END_DT = E.PAY_END_DT
                AND C.OFF_CYCLE = E.OFF_CYCLE
                AND C.PAGE_NUM = E.PAGE_NUM
                AND C.LINE_NUM = E.LINE_NUM
                AND C.PAY_LINE_STATUS IN ('C','F','V')
                AND C.SINGLE_CHECK_USE IN ('C', 'N'))
ORDER BY E.PAYGROUP, E.WAGE_LOSS_PLAN,E.TAX_CLASS_CAN
end-SELECT

   do Print-EETax-Wagels-Totals
   do Print-EETax-Paygroup-Totals
   print $Pay018cn_Emp_tax_all (+2,1)
   do EE-Tax-print-Wagels-tot

end-procedure

begin-procedure EE-Tax-print-Wagels-tot

  move 'Y' to $First_Row

begin-SELECT
B.WAGE_LOSS_PLAN
B.TAX_CLASS_CAN
B.TAX_CUR
B.TXGRS_CUR
B.NLGRS_CUR
B.TAX_NOT_TAKEN

  if $First_Row = 'Y'
     move 'N' to $First_Row
     move 0 to #count7
     move &B.Wage_Loss_Plan to $Wage_Loss_Plan
     do Get-Wage-loss-data
  end-if

  if &B.WAGE_LOSS_PLAN <> $Wage_Loss_Plan
     do Wagels-Change-ee
     move &B.Wage_Loss_Plan to $Wage_Loss_Plan
     do Get-Wage-loss-data
  end-if

  if &B.TAX_CLASS_CAN = 'CIT'
     add 1 to #count7
     add &B.TAX_CUR      to #Cit_tax_cur2  round=2
     add &B.TXGRS_CUR    to #Cit_txgrs_cur round=2
  else
     if &B.TAX_CLASS_CAN = 'QIT'
        add &B.TAX_CUR      to #Qit_tax_cur2  round=2
        add &B.TXGRS_CUR    to #Qit_txgrs_cur round=2
     else
        if &B.TAX_CLASS_CAN = 'CPP'
           add &B.TAX_CUR      to #CPP_Contrib_cur round=2
           add &B.TXGRS_CUR    to #CPP_Earns_Cur   round=2
           add &B.NLGRS_CUR    to #CPP_nlgrs_cur   round=2
        else
           if &B.TAX_CLASS_CAN = 'QPP'
              add &B.TAX_CUR      to #QPP_Contrib_cur round=2
              add &B.TXGRS_CUR    to #QPP_Earns_Cur   round=2
              add &B.NLGRS_CUR    to #QPP_nlgrs_cur   round=2
           else
              if &B.TAX_CLASS_CAN = 'EIE'
                 add &B.TAX_CUR      to #UI_EE_Premium_cur round=2
                 add &B.TXGRS_CUR    to #UI_EE_Earns_cur   round=2
              else
                 if &B.TAX_CLASS_CAN = 'CPA'
                    add &B.TAX_CUR      to #Pension_Adj_cur  round=2
                 else
                    if &B.TAX_CLASS_CAN = 'T4A'
                       add &B.TAX_CUR      to #T4A_Tax_cur   round=2
                       add &B.TXGRS_CUR    to #T4A_Txgrs_cur round=2
                    else
                       if &B.TAX_CLASS_CAN = 'RV2'
                          add &B.TAX_CUR      to #RV2_Tax_cur   round=2
                          add &B.TXGRS_CUR    to #RV2_Txgrs_cur round=2
                       else
                          if &B.TAX_CLASS_CAN = 'PYT'
                             add &B.TAX_CUR      to #Payroll_Tax_cur   round=2
                             add &B.TXGRS_CUR    to #Payroll_Txgrs_cur round=2
                          else
                             if &B.TAX_CLASS_CAN = 'QIE'
                                add &B.TAX_CUR      to #QIE_Tax_cur   round=2
                                add &B.TXGRS_CUR    to #QIE_Txgrs_cur round=2
                             else
                                if &B.TAX_CLASS_CAN = 'ALL'
                                   add &B.TAX_NOT_TAKEN  to #Tax_not_taken  round=2
                                end-if
                             end-if
                          end-if
                       end-if
                    end-if
                 end-if
              end-if
           end-if
        end-if
     end-if
  end-if

FROM PS_PAY_CALENDAR A,
     PS_PAY_TAX_CAN B
WHERE
  #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif

  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = B.COMPANY
  AND A.PAY_END_DT = B.PAY_END_DT
  AND A.PAYGROUP   = B.PAYGROUP
  AND B.TAX_CLASS_CAN IN
     ('CIT','QIT','CPP','QPP','EIE','CPA','T4A','RV2','PYT', 'ALL','QIE')
  AND EXISTS (SELECT 'x'
              FROM PS_PAY_EARNINGS C
              WHERE C.COMPANY = B.COMPANY
                AND C.PAYGROUP = B.PAYGROUP
                AND C.PAY_END_DT = B.PAY_END_DT
                AND C.OFF_CYCLE = B.OFF_CYCLE
                AND C.PAGE_NUM = B.PAGE_NUM
                AND C.LINE_NUM = B.LINE_NUM
                AND C.PAY_LINE_STATUS IN ('C','F','V')
                AND C.SINGLE_CHECK_USE IN ('C', 'N'))
ORDER BY B.WAGE_LOSS_PLAN,B.TAX_CLASS_CAN
end-SELECT

  do WageLs-Change-ee
  do WageLs-Totals-ee

end-procedure

begin-procedure WageLs-Change-ee

  print $Wage_Loss_Plan    (+1,{Pay018g_C_WageLs})
  print $Canada_Bus_No     (0,{Pay018g_C_RCT})
  print #count7            (0,{Pay018g_C_Count})   edit 9999999

  print $Pay018cn_Cit      (0,{Pay018g_C_Tax_class})
  print #Cit_tax_cur2      (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #Cit_txgrs_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Qit      (+1,{Pay018g_C_Tax_class})
  print #Qit_tax_cur2      (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #Qit_txgrs_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Cpp      (+1,{Pay018g_C_Tax_class})
  print #CPP_Contrib_cur   (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #CPP_Earns_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99
  print #CPP_nlgrs_cur     (0,{Pay018g_C_Nlgrs_cur}) edit 9999999999999.99

  print $Pay018cn_Qpp      (+1,{Pay018g_C_Tax_class})
  print #QPP_Contrib_cur   (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #QPP_Earns_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99
  print #QPP_nlgrs_cur     (0,{Pay018g_C_Nlgrs_cur}) edit 9999999999999.99

  print $Pay018cn_Ei_ee    (+1,{Pay018g_C_Tax_class})
  print #UI_EE_Premium_Cur (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #UI_EE_Earns_cur   (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_QIE      (+1,{Pay018g_C_Tax_class})
  print #QIE_Tax_cur       (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #QIE_Txgrs_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Pens_adj (+1,{Pay018g_C_Tax_class})
  print #Pension_Adj_Cur   (0,{Pay018g_C_Pen_adj}) edit 9999999999.99

  print $Pay018cn_T4a      (+1,{Pay018g_C_Tax_class})
  print #T4A_Tax_Cur       (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #T4A_Txgrs_Cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Rv2      (+1,{Pay018g_C_Tax_class})      !LAF001
  print #RV2_Tax_Cur       (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #RV2_Txgrs_Cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Payroll  (+1,{Pay018g_C_Tax_class})
  print #Payroll_Tax_Cur   (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #Payroll_Txgrs_Cur (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_AllTypes (+1,{Pay018g_C_Tax_class})
  print #tax_not_taken     (0,{Pay018g_C_Tax_not_taken}) edit 9999999999.99

  print ' '                (+1,0)

  add #count7            to #Grand_tot_count7
  add #Cit_tax_cur2      to #Grand_tot_CIT_tax_cur
  add #Cit_txgrs_cur     to #Grand_tot_Cit_txgrs_cur
  add #QIT_tax_cur2      to #Grand_tot_QIT_tax_cur
  add #Qit_txgrs_cur     to #Grand_tot_Qit_txgrs_cur
  add #tax_not_taken     to #Grand_tot_tax_not_taken
  add #CPP_Contrib_cur   to #Grand_tot_CPP_Contrib_cur
  add #CPP_Earns_cur     to #Grand_tot_CPP_Earns_cur
  add #CPP_nlgrs_cur     to #Grand_tot_CPP_nlgrs_cur
  add #QPP_Contrib_cur   to #Grand_tot_QPP_Contrib_cur
  add #QPP_Earns_cur     to #Grand_tot_QPP_Earns_cur
  add #QPP_nlgrs_cur     to #Grand_tot_QPP_nlgrs_cur
  add #UI_EE_Premium_Cur to #Grand_tot_UI_EE_Premium_Cur
  add #UI_EE_Earns_cur   to #Grand_tot_UI_EE_Earns_cur
  add #QIE_Tax_cur       to #Grand_tot_QIE_tax_cur
  add #QIE_txgrs_cur     to #Grand_tot_QIE_txgrs_cur
  add #T4A_Tax_Cur       to #Grand_tot_T4A_Tax_Cur
  add #T4A_Txgrs_Cur     to #Grand_tot_T4A_Txgrs_Cur
  add #RV2_Tax_Cur       to #Grand_tot_RV2_Tax_Cur
  add #RV2_Txgrs_Cur     to #Grand_tot_RV2_Txgrs_Cur
  add #Payroll_Tax_Cur   to #Grand_tot_Payroll_Tax_Cur
  add #Payroll_Txgrs_Cur to #Grand_tot_Payroll_Txgrs_Cur
  add #Pension_Adj_Cur   to #Grand_tot_Pension_Adj_Cur

  do Init-Tax-Totals

end-procedure


begin-procedure Print-EETax-Paygroup-Totals

  print $Pay018cn_Emp_tax_paygroup (+2,1)

  print #tot_paygr_count7            (+1,{Pay018g_C_Count})   edit 9999999

  print $Pay018cn_Cit                (0,{Pay018g_C_Tax_class})
  print #tot_paygr_Cit_tax_cur2      (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_Cit_txgrs_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Qit                (+1,{Pay018g_C_Tax_class})
  print #tot_paygr_Qit_tax_cur2      (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_Qit_txgrs_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Cpp                (+1,{Pay018g_C_Tax_class})
  print #tot_paygr_CPP_Contrib_cur   (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_CPP_Earns_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99
  print #tot_paygr_CPP_nlgrs_cur     (0,{Pay018g_C_Nlgrs_cur}) edit 9999999999999.99

  print $Pay018cn_Qpp                (+1,{Pay018g_C_Tax_class})
  print #tot_paygr_QPP_Contrib_cur   (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_QPP_Earns_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99
  print #tot_paygr_QPP_nlgrs_cur     (0,{Pay018g_C_Nlgrs_cur}) edit 9999999999999.99

  print $Pay018cn_Ei_ee              (+1,{Pay018g_C_Tax_class})
  print #tot_paygr_UI_EE_Premium_Cur (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_UI_EE_Earns_cur   (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_QIE                (+1,{Pay018g_C_Tax_class})
  print #tot_paygr_QIE_Tax_cur       (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_QIE_Txgrs_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Pens_adj           (+1,{Pay018g_C_Tax_class})
  print #tot_paygr_Pension_Adj_Cur   (0,{Pay018g_C_Pen_adj}) edit 9999999999.99

  print $Pay018cn_T4a                (+1,{Pay018g_C_Tax_class})
  print #tot_paygr_T4A_Tax_Cur       (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_T4A_Txgrs_Cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Rv2                (+1,{Pay018g_C_Tax_class})      !LAF001
  print #tot_paygr_RV2_Tax_Cur       (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_RV2_Txgrs_Cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Payroll            (+1,{Pay018g_C_Tax_class})
  print #tot_paygr_Payroll_Tax_Cur   (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_Payroll_Txgrs_Cur (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_AllTypes           (+1,{Pay018g_C_Tax_class})
  print #tot_paygr_tax_not_taken     (0,{Pay018g_C_Tax_not_taken}) edit 9999999999.99

  print ' '                (+1,0)
  do Init-EETax-Paygroup-Totals

end-procedure


begin-procedure Init-EETax-Paygroup-Totals

  move 0    to #tot_paygr_count7
  move 0.00 to #tot_paygr_Cit_tax_cur2
  move 0.00 to #tot_paygr_Cit_txgrs_cur
  move 0.00 to #tot_paygr_Qit_tax_cur2
  move 0.00 to #tot_paygr_Qit_txgrs_cur
  move 0.00 to #tot_paygr_CPP_Contrib_cur
  move 0.00 to #tot_paygr_CPP_Earns_Cur
  move 0.00 to #tot_paygr_CPP_nlgrs_cur
  move 0.00 to #tot_paygr_QPP_Contrib_cur
  move 0.00 to #tot_paygr_QPP_Earns_Cur
  move 0.00 to #tot_paygr_QPP_nlgrs_cur
  move 0.00 to #tot_paygr_UI_EE_Premium_cur
  move 0.00 to #tot_paygr_UI_EE_Earns_cur
  move 0.00 to #tot_paygr_QIE_Tax_cur
  move 0.00 to #tot_paygr_QIE_Txgrs_cur
  move 0.00 to #tot_paygr_Pension_Adj_cur
  move 0.00 to #tot_paygr_T4A_Tax_cur
  move 0.00 to #tot_paygr_T4A_Txgrs_cur
  move 0.00 to #tot_paygr_RV2_Tax_cur
  move 0.00 to #tot_paygr_RV2_Txgrs_cur
  move 0.00 to #tot_paygr_Payroll_Tax_cur
  move 0.00 to #tot_paygr_Payroll_Txgrs_cur
  move 0.00 to #tot_paygr_CIT_Bonus_Tax_cur
  move 0.00 to #tot_paygr_CIT_Bonus_txgrs_cur
  move 0.00 to #tot_paygr_QIT_Bonus_Tax_cur
  move 0.00 to #tot_paygr_QIT_Bonus_txgrs_cur
  move 0.00 to #tot_paygr_Tax_not_taken

end-procedure


begin-procedure Print-EETax-Wagels-Totals

  print $Wage_Loss_Plan               (0,{Pay018g_C_WageLs})
  print $Canada_Bus_No                (0,{Pay018g_C_RCT})
  print #tot_wagels_count7            (0,{Pay018g_C_Count})   edit 9999999

  print $Pay018cn_Cit                 (0,{Pay018g_C_Tax_class})
  print #tot_wagels_Cit_tax_cur2      (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_Cit_txgrs_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Qit                 (+1,{Pay018g_C_Tax_class})
  print #tot_wagels_Qit_tax_cur2      (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_Qit_txgrs_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Cpp                 (+1,{Pay018g_C_Tax_class})
  print #tot_wagels_CPP_Contrib_cur   (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_CPP_Earns_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99
  print #tot_wagels_CPP_nlgrs_cur     (0,{Pay018g_C_Nlgrs_cur}) edit 9999999999999.99

  print $Pay018cn_Qpp                 (+1,{Pay018g_C_Tax_class})
  print #tot_wagels_QPP_Contrib_cur   (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_QPP_Earns_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99
  print #tot_wagels_QPP_nlgrs_cur     (0,{Pay018g_C_Nlgrs_cur}) edit 9999999999999.99

  print $Pay018cn_Ei_ee               (+1,{Pay018g_C_Tax_class})
  print #tot_wagels_UI_EE_Premium_Cur (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_UI_EE_Earns_cur   (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_QIE                 (+1,{Pay018g_C_Tax_class})
  print #tot_wagels_QIE_tax_cur       (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_QIE_txgrs_cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Pens_adj            (+1,{Pay018g_C_Tax_class})
  print #tot_wagels_Pension_Adj_Cur   (0,{Pay018g_C_Pen_adj}) edit 9999999999.99

  print $Pay018cn_T4a                 (+1,{Pay018g_C_Tax_class})
  print #tot_wagels_T4A_Tax_Cur       (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_T4A_Txgrs_Cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Rv2                 (+1,{Pay018g_C_Tax_class})      !LAF001
  print #tot_wagels_RV2_Tax_Cur       (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_RV2_Txgrs_Cur     (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Payroll             (+1,{Pay018g_C_Tax_class})
  print #tot_wagels_Payroll_Tax_Cur   (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_Payroll_Txgrs_Cur (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_AllTypes            (+1,{Pay018g_C_Tax_class})
  print #tot_wagels_tax_not_taken     (0,{Pay018g_C_Tax_not_taken}) edit 9999999999.99

  print ' '                (+1,0)
  do Init-EETax-Wagels-Totals

end-procedure


begin-procedure Init-EETax-Wagels-Totals

  move 0    to #tot_wagels_count7
  move 0.00 to #tot_wagels_Cit_tax_cur2
  move 0.00 to #tot_wagels_Cit_txgrs_cur
  move 0.00 to #tot_wagels_Qit_tax_cur2
  move 0.00 to #tot_wagels_Qit_txgrs_cur
  move 0.00 to #tot_wagels_CPP_Contrib_cur
  move 0.00 to #tot_wagels_CPP_Earns_Cur
  move 0.00 to #tot_wagels_CPP_nlgrs_cur
  move 0.00 to #tot_wagels_QPP_Contrib_cur
  move 0.00 to #tot_wagels_QPP_Earns_Cur
  move 0.00 to #tot_wagels_QPP_nlgrs_cur
  move 0.00 to #tot_wagels_UI_EE_Premium_cur
  move 0.00 to #tot_wagels_UI_EE_Earns_cur
  move 0.00 to #tot_wagels_QIE_tax_cur
  move 0.00 to #tot_wagels_QIE_txgrs_cur
  move 0.00 to #tot_wagels_Pension_Adj_cur
  move 0.00 to #tot_wagels_T4A_Tax_cur
  move 0.00 to #tot_wagels_T4A_Txgrs_cur
  move 0.00 to #tot_wagels_RV2_Tax_cur
  move 0.00 to #tot_wagels_RV2_Txgrs_cur
  move 0.00 to #tot_wagels_Payroll_Tax_cur
  move 0.00 to #tot_wagels_Payroll_Txgrs_cur
  move 0.00 to #tot_wagels_CIT_Bonus_Tax_cur
  move 0.00 to #tot_wagels_CIT_Bonus_txgrs_cur
  move 0.00 to #tot_wagels_QIT_Bonus_Tax_cur
  move 0.00 to #tot_wagels_QIT_Bonus_txgrs_cur
  move 0.00 to #tot_wagels_Tax_not_taken

end-procedure

begin-procedure Wage-Loss-Check-Count

  move 0 to #check_count

begin-SELECT
'x'
   add 1 to #check_count

FROM PS_PAY_CALENDAR A,
     PS_PAY_TAX_CAN B
WHERE
 #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif

  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = B.COMPANY
  AND A.PAY_END_DT = B.PAY_END_DT
  #ifdef MVS
    \$SLCTPAYGROUP\
  #else
    [$SlctPaygroup]
  #endif

  AND A.PAYGROUP   = B.PAYGROUP
  AND B.TAX_CLASS_CAN = 'CIT'
  AND B.WAGE_LOSS_PLAN = $Wage_Loss_plan
  AND EXISTS (SELECT 'x'
              FROM PS_PAY_EARNINGS C
              WHERE C.COMPANY = B.COMPANY
                AND C.PAYGROUP = B.PAYGROUP
                AND C.PAY_END_DT = B.PAY_END_DT
                AND C.OFF_CYCLE = B.OFF_CYCLE
                AND C.PAGE_NUM = B.PAGE_NUM
                AND C.LINE_NUM = B.LINE_NUM
                AND C.PAY_LINE_STATUS IN ('C','F','V')
                AND C.SINGLE_CHECK_USE IN ('C', 'N'))
end-SELECT

end-procedure

begin-procedure Init-Tax-Totals

  move 0    to #count7
  move 0.00 to #Cit_tax_cur2
  move 0.00 to #Cit_txgrs_cur
  move 0.00 to #Qit_tax_cur2
  move 0.00 to #Qit_txgrs_cur
  move 0.00 to #CPP_Contrib_cur
  move 0.00 to #CPP_Earns_Cur
  move 0.00 to #CPP_nlgrs_cur
  move 0.00 to #QPP_Contrib_cur
  move 0.00 to #QPP_Earns_Cur
  move 0.00 to #QPP_nlgrs_cur
  move 0.00 to #UI_EE_Premium_cur
  move 0.00 to #UI_EE_Earns_cur
  move 0.00 to #Pension_Adj_cur
  move 0.00 to #T4A_Tax_cur
  move 0.00 to #T4A_Txgrs_cur
  move 0.00 to #RV2_Tax_cur
  move 0.00 to #RV2_Txgrs_cur
  move 0.00 to #Payroll_Tax_cur
  move 0.00 to #Payroll_Txgrs_cur
  move 0.00 to #CIT_Bonus_Tax_cur
  move 0.00 to #CIT_Bonus_txgrs_cur
  move 0.00 to #QIT_Bonus_Tax_cur
  move 0.00 to #QIT_Bonus_txgrs_cur
  move 0.00 to #Tax_not_taken
  move 0.00 to #QIE_Tax_cur
  move 0.00 to #QIE_Txgrs_cur

end-procedure

begin-procedure Get-Tax-Class-Name

  move 'TAX_CLASS_CAN' to $FieldName

  move 'CIT'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_Cit

  move 'QIT'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_Qit

  move 'CPP'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_Cpp

  move 'QPP'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_Qpp

  move 'EIE'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_Ei_ee

  move 'EIR'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_Ei_er

  move 'CPA'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_Pens_adj

  move 'T4A'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_T4A

  move 'QIE'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_QIE

  move 'QIR'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_QIR

  move 'RV2'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_RV2

  move 'PYT'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_Payroll

  move 'HTX'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_Health

  move 'ALL'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_AllTypes

  move 'CPR'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_Cpr

  move 'QPR'           to $FieldValue
  do Read-Translate-Table
  move $XlatShortName to $Pay018cn_Qpr

end-procedure

begin-procedure WageLs-Totals-ee

  print $Pay018cn_Emp_tx_wloss      (+2,1)

  do Format-Number(#Grand_tot_count7, $out, '9999999')
  print  $out               (+2,{Pay018g_C_Count})

  print $Pay018cn_Cit       (0,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_Cit_tax_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_Cit_txgrs_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})

  print $Pay018cn_Qit      (+1,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_QIT_tax_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_Qit_txgrs_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})

  print $Pay018cn_Cpp      (+1,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_CPP_Contrib_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_CPP_Earns_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})
  do Format-Number(#Grand_tot_CPP_nlgrs_cur, $out, '9999999999999.99')
  print $out               (0,{Pay018g_C_Nlgrs_cur})

  print $Pay018cn_Qpp      (+1,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_QPP_Contrib_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_QPP_Earns_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})
  do Format-Number(#Grand_tot_QPP_nlgrs_cur, $out, '9999999999999.99')
  print $out               (0,{Pay018g_C_Nlgrs_cur})

  print $Pay018cn_Ei_ee    (+1,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_UI_EE_Premium_Cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_UI_EE_Earns_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})

  print $Pay018cn_QIE      (+1,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_QIE_tax_Cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_QIE_txgrs_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})

  print $Pay018cn_Pens_adj (+1,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_Pension_Adj_Cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Pen_adj})

  print $Pay018cn_T4a      (+1,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_T4A_Tax_Cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_T4A_Txgrs_Cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})

  print $Pay018cn_Rv2      (+1,{Pay018g_C_Tax_class})       !LAF001
  do Format-Number(#Grand_tot_RV2_Tax_Cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_RV2_Txgrs_Cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})

  print $Pay018cn_Payroll  (+1,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_Payroll_Tax_Cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_Payroll_Txgrs_Cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})

  print $Pay018cn_Alltypes   (+1,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_tax_not_taken, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_not_taken})

  let #Grand_tot_count7            = 0
  let #Grand_tot_CIT_tax_cur       = 0
  let #Grand_tot_Cit_txgrs_cur     = 0
  let #Grand_tot_QIT_tax_cur       = 0
  let #Grand_tot_Qit_txgrs_cur     = 0
  let #Grand_tot_tax_not_taken     = 0
  let #Grand_tot_CPP_Contrib_cur   = 0
  let #Grand_tot_CPP_Earns_cur     = 0
  let #Grand_tot_CPP_nlgrs_cur     = 0
  let #Grand_tot_QPP_Contrib_cur   = 0
  let #Grand_tot_QPP_Earns_cur     = 0
  let #Grand_tot_QPP_nlgrs_cur     = 0
  let #Grand_tot_UI_EE_Premium_Cur = 0
  let #Grand_tot_UI_EE_Earns_cur   = 0
  let #Grand_tot_QIE_tax_cur       = 0
  let #Grand_tot_QIE_txgrs_cur     = 0
  let #Grand_tot_T4A_Tax_Cur       = 0
  let #Grand_tot_T4A_Txgrs_Cur     = 0
  let #Grand_tot_RV2_Tax_Cur       = 0
  let #Grand_tot_RV2_Txgrs_Cur     = 0
  let #Grand_tot_Payroll_Tax_Cur   = 0
  let #Grand_tot_Payroll_Txgrs_Cur = 0
  let #Grand_tot_Pension_Adj_Cur   = 0

end-procedure


begin-procedure ER-Tax-select

  move 0 to #tot_paygr_count8
  move 0 to #tot_wagels_count8
  do Init-ERTax-Paygroup-Totals
  do Init-ERTax-Wagels-Totals
  move 'Y' to $First_Row

begin-SELECT
G.PAYGROUP
G.WAGE_LOSS_PLAN
G.TAX_CLASS_CAN
G.TAX_CUR
G.TXGRS_CUR
G.NLGRS_CUR

  if $First_Row = 'Y'
     move 'N' to $First_Row
     move &G.Wage_Loss_Plan to $Wage_Loss_Plan
     move &G.Paygroup       to $Paygroup
     print &G.Paygroup      (+1,{PAY018H_C_PAYGROUP})
     do Get-Wage-loss-data
  end-if

  if &G.Paygroup  <> $Paygroup
     let $SLCTPAYGROUP = ' AND A.PAYGROUP = ' || '''' ||$Paygroup || ''''
     do Wage-Loss-Check-Count
     add #check_count to #tot_paygr_count8
     add #check_count to #tot_wagels_count8
     do Print-ERTax-Wagels-Totals
     move &G.Wage_Loss_Plan to $Wage_Loss_Plan
     do Get-Wage-loss-data
     do Print-ERTax-Paygroup-Totals
     move  &G.Paygroup  to $Paygroup
     print &G.Paygroup       (+1,{PAY018H_C_PAYGROUP})
  end-if

  if &G.WAGE_LOSS_PLAN <> $Wage_Loss_Plan
     let $SLCTPAYGROUP = ' AND A.PAYGROUP = ' || '''' ||$Paygroup || ''''
     do Wage-Loss-Check-Count
     add #check_count to #tot_paygr_count8
     add #check_count to #tot_wagels_count8
     do Print-ERTax-Wagels-Totals
     move &G.Wage_Loss_Plan to $Wage_Loss_Plan
     do Get-Wage-loss-data
  end-if


  if &G.TAX_CLASS_CAN = 'CPP'
     add &G.TAX_CUR      to #tot_paygr_CPP_Contrib_cur2 round=2
     add &G.TXGRS_CUR    to #tot_paygr_CPP_Earns_Cur2   round=2
     add &G.NLGRS_CUR    to #tot_paygr_CPP_nlgrs_cur2   round=2
     add &G.TAX_CUR      to #tot_wagels_CPP_Contrib_cur2 round=2
     add &G.TXGRS_CUR    to #tot_wagels_CPP_Earns_Cur2   round=2
     add &G.NLGRS_CUR    to #tot_wagels_CPP_nlgrs_cur2   round=2
  else
     if &G.TAX_CLASS_CAN = 'QPP'
        add &G.TAX_CUR      to #tot_paygr_QPP_Contrib_cur2 round=2
        add &G.TXGRS_CUR    to #tot_paygr_QPP_Earns_Cur2   round=2
        add &G.NLGRS_CUR    to #tot_paygr_QPP_nlgrs_cur2   round=2
        add &G.TAX_CUR      to #tot_wagels_QPP_Contrib_cur2 round=2
        add &G.TXGRS_CUR    to #tot_wagels_QPP_Earns_Cur2   round=2
        add &G.NLGRS_CUR    to #tot_wagels_QPP_nlgrs_cur2   round=2
     else
        if &G.TAX_CLASS_CAN = 'EIR'
           add &G.TAX_CUR      to #tot_paygr_UI_ER_Premium_cur round=2
           add &G.TAX_CUR      to #tot_wagels_UI_ER_Premium_cur round=2
        else
          if &G.TAX_CLASS_CAN = 'EIE'
            add &G.TXGRS_CUR    to #tot_paygr_UI_ER_Earns_cur2 round=2
            add &G.TXGRS_CUR    to #tot_wagels_UI_ER_Earns_cur2 round=2
          else
             if &G.TAX_CLASS_CAN = 'QIR'
               add &G.TAX_CUR    to #tot_paygr_QIR_tax_cur round=2
               add &G.TAX_CUR    to #tot_wagels_QIR_tax_cur round=2
             else
                if &G.TAX_CLASS_CAN = 'QIE'
                  add &G.TXGRS_CUR    to #tot_paygr_QIE_txgrs_cur round=2
                  add &G.TXGRS_CUR    to #tot_wagels_QIE_txgrs_cur round=2
                else
                  if &G.TAX_CLASS_CAN = 'HTX'
                    add &G.TAX_CUR      to #tot_paygr_Health_tax_cur   round=2
                    add &G.TXGRS_CUR    to #tot_paygr_Health_txgrs_cur round=2
                    add &G.TAX_CUR      to #tot_wagels_Health_tax_cur   round=2
                    add &G.TXGRS_CUR    to #tot_wagels_Health_txgrs_cur round=2
                  end-if
               end-if
            end-if
          end-if
        end-if
     end-if
  end-if

FROM PS_PAY_CALENDAR A,
     PS_PAY_TAX_CAN G
WHERE
  #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif

  AND G.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND G.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = G.COMPANY
  AND A.PAY_END_DT = G.PAY_END_DT
  AND A.PAYGROUP   = G.PAYGROUP
  AND G.TAX_CLASS_CAN IN
        ('CPP','QPP','EIR', 'EIE', 'HTX', 'QIR', 'QIE')
  AND EXISTS (SELECT 'x'
              FROM PS_PAY_EARNINGS C
              WHERE C.COMPANY = G.COMPANY
                AND C.PAYGROUP = G.PAYGROUP
                AND C.PAY_END_DT = G.PAY_END_DT
                AND C.OFF_CYCLE = G.OFF_CYCLE
                AND C.PAGE_NUM = G.PAGE_NUM
                AND C.LINE_NUM = G.LINE_NUM
                AND C.PAY_LINE_STATUS IN ('C','F','V')
                AND C.SINGLE_CHECK_USE IN ('C', 'N'))
ORDER BY G.PAYGROUP, G.WAGE_LOSS_PLAN,G.TAX_CLASS_CAN
end-SELECT

  let $SLCTPAYGROUP = ' AND A.PAYGROUP = ' || '''' ||$Paygroup || ''''
  do Wage-Loss-Check-Count
  add #check_count to #tot_wagels_count8
  add #check_count to #tot_paygr_count8
  do Print-ERTax-Wagels-Totals
  do Print-ERTax-Paygroup-Totals
  print $Pay018cn_Empler_tax_all (+2,1)
  do ER-Tax-Wagels-tot
end-procedure

begin-procedure ER-Tax-Wagels-tot

  move 0 to #count8
  let #count8             = 0
  let #CPP_Contrib_cur2   = 0
  let #CPP_Earns_cur2     = 0
  let #CPP_nlgrs_cur2     = 0
  let #QPP_Contrib_cur2   = 0
  let #QPP_Earns_cur2     = 0
  let #QPP_nlgrs_cur2     = 0
  let #UI_ER_Premium_Cur  = 0
  let #UI_Earns_cur2      = 0
  let #UI_ER_Earns_cur2   = 0
  let #QIR_tax_cur        = 0
  let #QIR_txgrs_cur      = 0
  let #Health_tax_cur     = 0
  let #Health_txgrs_cur   = 0

  move 'Y' to $First_Row

begin-SELECT
B1.WAGE_LOSS_PLAN
B1.TAX_CLASS_CAN
B1.TAX_CUR
B1.TXGRS_CUR
B1.NLGRS_CUR

  if $First_Row = 'Y'
     move 'N' to $First_Row
     move &B1.Wage_Loss_Plan to $Wage_Loss_Plan
     do Get-Wage-loss-data
  end-if

  if &B1.WAGE_LOSS_PLAN <> $Wage_Loss_Plan
     let $SLCTPAYGROUP = ' AND 1 = 1 '
     do Wage-Loss-Check-Count
     move #check_count to #count8
     do Wagels-Change-er
     move &B1.Wage_Loss_Plan to $Wage_Loss_Plan
     do Get-Wage-loss-data
  end-if

  if &B1.TAX_CLASS_CAN = 'CPP'
     add &B1.TAX_CUR      to #CPP_Contrib_cur2 round=2
     add &B1.TXGRS_CUR    to #CPP_Earns_Cur2   round=2
     add &B1.NLGRS_CUR    to #CPP_nlgrs_cur2   round=2
  else
     if &B1.TAX_CLASS_CAN = 'QPP'
        add &B1.TAX_CUR      to #QPP_Contrib_cur2 round=2
        add &B1.TXGRS_CUR    to #QPP_Earns_Cur2   round=2
        add &B1.NLGRS_CUR    to #QPP_nlgrs_cur2   round=2
     else
        if &B1.TAX_CLASS_CAN = 'EIR'
           add &B1.TAX_CUR      to #UI_ER_Premium_cur round=2
        else
          if &B1.TAX_CLASS_CAN = 'EIE'
            add &B1.TXGRS_CUR    to #UI_ER_Earns_cur2   round=2
          else
            if &B1.TAX_CLASS_CAN = 'HTX'
              add &B1.TAX_CUR      to #Health_tax_cur   round=2
              add &B1.TXGRS_CUR    to #Health_txgrs_cur round=2
            else
               if &B1.TAX_CLASS_CAN = 'QIR'
                  add &B1.TAX_CUR      to #QIR_tax_cur   round=2
               else
                  if &B1.TAX_CLASS_CAN = 'QIE'
                     add &B1.TXGRS_CUR    to #QIE_txgrs_cur round=2
                  end-if
               end-if
            end-if
          end-if
        end-if
     end-if
  end-if

FROM PS_PAY_CALENDAR A,
     PS_PAY_TAX_CAN B1
WHERE
  #ifdef MVS
    \$SLCTPERIOD\
  #else
    [$SlctPeriod]
  #endif

  AND B1.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B1.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND A.COMPANY    = $Company
  AND A.COMPANY    = B1.COMPANY
  AND A.PAY_END_DT = B1.PAY_END_DT
  AND A.PAYGROUP   = B1.PAYGROUP
  AND B1.TAX_CLASS_CAN IN
        ('CPP','QPP','EIR', 'EIE', 'HTX', 'QIR', 'QIE')
  AND EXISTS (SELECT 'x'
              FROM PS_PAY_EARNINGS C
              WHERE C.COMPANY = B1.COMPANY
                AND C.PAYGROUP = B1.PAYGROUP
                AND C.PAY_END_DT = B1.PAY_END_DT
                AND C.OFF_CYCLE = B1.OFF_CYCLE
                AND C.PAGE_NUM = B1.PAGE_NUM
                AND C.LINE_NUM = B1.LINE_NUM
                AND C.PAY_LINE_STATUS IN ('C','F','V')
                AND C.SINGLE_CHECK_USE IN ('C', 'N'))
ORDER BY B1.WAGE_LOSS_PLAN,B1.TAX_CLASS_CAN
end-SELECT

  let $SLCTPAYGROUP = ' AND 1 = 1 '
  do Wage-Loss-Check-Count
  move #check_count to #count8
  do WageLs-Change-er
  do WageLs-Totals-er
end-procedure

begin-procedure WageLs-Change-er

  print $Wage_Loss_Plan     (+1,{Pay018h_C_WageLs})
  print $Canada_Bus_No      (0,{Pay018h_C_RCT})
  print #count8             (0,{Pay018h_C_Count})   edit 9999999

  print $Pay018cn_Cpr       (0,{Pay018h_C_Tax_class})
  print #CPP_Contrib_cur2   (0,{Pay018h_C_Tax_cur}) edit 9999999999.99
  print #CPP_Earns_cur2     (0,{Pay018h_C_Txgrs_cur}) edit 9999999999.99
  print #CPP_nlgrs_cur2     (0,{Pay018h_C_Nlgrs_cur}) edit 9999999999999.99

  print $Pay018cn_Qpr       (+1,{Pay018h_C_Tax_class})
  print #QPP_Contrib_cur2   (0,{Pay018h_C_Tax_cur}) edit 9999999999.99
  print #QPP_Earns_cur2     (0,{Pay018h_C_Txgrs_cur}) edit 9999999999.99
  print #QPP_nlgrs_cur2     (0,{Pay018h_C_Nlgrs_cur}) edit 9999999999999.99

  print $Pay018cn_Ei_er     (+1,{Pay018h_C_Tax_class})
  print #UI_ER_Premium_Cur  (0,{Pay018h_C_Tax_cur}) edit 9999999999.99
  print #UI_ER_Earns_cur2   (0,{Pay018h_C_Txgrs_cur}) edit 9999999999.99
  print $UI_ER_Rt           (0,{Pay018h_C_UI_ER_Rt}) edit 9.9999

  print $Pay018cn_QIR       (+1,{Pay018h_C_Tax_class})
  print #QIR_tax_cur        (0,{Pay018h_C_Tax_cur}) edit 9999999999.99
  print #QIR_txgrs_cur      (0,{Pay018h_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Health    (+1,{Pay018g_C_Tax_class})
  print #Health_Tax_Cur     (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #Health_Txgrs_Cur   (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print ' '                (+1,0)

  add #count8             to #Grand_tot_count8
  add #CPP_Contrib_cur2   to #Grand_tot_CPP_Contrib_cur
  add #CPP_Earns_cur2     to #Grand_tot_CPP_Earns_cur
  add #CPP_nlgrs_cur2     to #Grand_tot_CPP_nlgrs_cur
  add #QPP_Contrib_cur2   to #Grand_tot_QPP_Contrib_cur
  add #QPP_Earns_cur2     to #Grand_tot_QPP_Earns_cur
  add #QPP_nlgrs_cur2     to #Grand_tot_QPP_nlgrs_cur
  add #UI_ER_Premium_Cur  to #Grand_tot_UI_ER_Premium_Cur
  add #UI_ER_Earns_cur2   to #Grand_tot_UI_ER_Earns_cur
  add #QIR_tax_cur        to #Grand_tot_QIR_tax_cur
  add #QIR_txgrs_cur      to #Grand_tot_QIR_txgrs_cur
  add #Health_Tax_Cur     to #Grand_tot_Health_Tax_Cur
  add #Health_Txgrs_Cur   to #Grand_tot_Health_Txgrs_Cur

  let #count8             = 0
  let #CPP_Contrib_cur2   = 0
  let #CPP_Earns_cur2     = 0
  let #CPP_nlgrs_cur2     = 0
  let #QPP_Contrib_cur2   = 0
  let #QPP_Earns_cur2     = 0
  let #QPP_nlgrs_cur2     = 0
  let #UI_ER_Premium_Cur  = 0
  let #UI_ER_Earns_cur2   = 0
  let #QIR_tax_cur        = 0
  let #QIR_txgrs_cur      = 0
  let #Health_Tax_Cur     = 0
  let #Health_Txgrs_Cur   = 0

end-procedure


begin-procedure WageLs-Totals-er
  print $Pay018cn_Empler_tx_wloss    (+2,1)

  do Format-Number(#Grand_tot_count8, $out, '9999999')
  print  $out               (+2,{Pay018h_C_Count})

  print $Pay018cn_Cpr      (0,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_CPP_Contrib_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_CPP_Earns_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})
  do Format-Number(#Grand_tot_CPP_nlgrs_cur, $out, '9999999999999.99')
  print $out               (0,{Pay018g_C_Nlgrs_cur})

  print $Pay018cn_Qpr      (+1,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_QPP_Contrib_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_QPP_Earns_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})
  do Format-Number(#Grand_tot_QPP_nlgrs_cur, $out, '9999999999999.99')
  print $out               (0,{Pay018g_C_Nlgrs_cur})

  print $Pay018cn_Ei_er    (+1,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_UI_ER_Premium_Cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_UI_ER_Earns_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})

  print $Pay018cn_QIR      (+1,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_QIR_tax_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_QIR_txgrs_cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})

  print $Pay018cn_Health   (+1,{Pay018g_C_Tax_class})
  do Format-Number(#Grand_tot_Health_Tax_Cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Tax_cur})
  do Format-Number(#Grand_tot_Health_Txgrs_Cur, $out, '9999999999.99')
  print $out               (0,{Pay018g_C_Txgrs_cur})

  let #Grand_tot_count8            = 0
  let #Grand_tot_CPP_Contrib_cur   = 0
  let #Grand_tot_CPP_Earns_cur     = 0
  let #Grand_tot_CPP_nlgrs_cur     = 0
  let #Grand_tot_QPP_Contrib_cur   = 0
  let #Grand_tot_QPP_Earns_cur     = 0
  let #Grand_tot_QPP_nlgrs_cur     = 0
  let #Grand_tot_UI_ER_Premium_Cur = 0
  let #Grand_tot_UI_ER_Earns_cur   = 0
  let #Grand_tot_QIR_tax_Cur       = 0
  let #Grand_tot_QIR_txgrs_cur     = 0
  let #Grand_tot_Health_Tax_Cur    = 0
  let #Grand_tot_Health_Txgrs_Cur  = 0

end-procedure

begin-procedure Print-ERTax-Paygroup-Totals

  print $Pay018cn_Empler_tax_paygr    (+2,1)

  print #tot_paygr_count8             (+1,{Pay018h_C_Count})   edit 9999999

  print $Pay018cn_Cpr                 (0,{Pay018h_C_Tax_class})
  print #tot_paygr_CPP_Contrib_cur2   (0,{Pay018h_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_CPP_Earns_cur2     (0,{Pay018h_C_Txgrs_cur}) edit 9999999999.99
  print #tot_paygr_CPP_nlgrs_cur2     (0,{Pay018h_C_Nlgrs_cur}) edit 9999999999999.99

  print $Pay018cn_Qpr                  (+1,{Pay018h_C_Tax_class})
  print #tot_paygr_QPP_Contrib_cur2   (0,{Pay018h_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_QPP_Earns_cur2     (0,{Pay018h_C_Txgrs_cur}) edit 9999999999.99
  print #tot_paygr_QPP_nlgrs_cur2     (0,{Pay018h_C_Nlgrs_cur}) edit 9999999999999.99

  print $Pay018cn_Ei_er                (+1,{Pay018h_C_Tax_class})
  print #tot_paygr_UI_ER_Premium_Cur  (0,{Pay018h_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_UI_ER_Earns_cur2   (0,{Pay018h_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_QIR                 (+1,{Pay018h_C_Tax_class})
  print #tot_paygr_QIR_tax_cur        (0,{Pay018h_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_QIR_txgrs_cur      (0,{Pay018h_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Health              (+1,{Pay018g_C_Tax_class})
  print #tot_paygr_Health_Tax_Cur     (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_paygr_Health_Txgrs_Cur   (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print ' '                (+1,0)
  do Init-ERTax-Paygroup-Totals

end-procedure


begin-procedure Init-ERTax-Paygroup-Totals

  let #tot_paygr_count8             = 0
  let #tot_paygr_CPP_Contrib_cur2   = 0
  let #tot_paygr_CPP_Earns_cur2     = 0
  let #tot_paygr_CPP_nlgrs_cur2     = 0
  let #tot_paygr_QPP_Contrib_cur2   = 0
  let #tot_paygr_QPP_Earns_cur2     = 0
  let #tot_paygr_QPP_nlgrs_cur2     = 0
  let #tot_paygr_UI_ER_Premium_Cur  = 0
  let #tot_paygr_UI_Earns_cur2      = 0
  let #tot_paygr_UI_ER_Earns_cur2   = 0
  let #tot_paygr_QIR_tax_cur        = 0
  let #tot_paygr_QIR_txgrs_cur      = 0
  let #tot_paygr_Health_tax_cur     = 0
  let #tot_paygr_Health_txgrs_cur   = 0

end-procedure

begin-procedure Print-ERTax-Wagels-Totals

  print $Wage_Loss_Plan                (0,{Pay018h_C_WageLs})
  print $Canada_Bus_No                 (0,{Pay018h_C_RCT})
  print #tot_wagels_count8             (0,{Pay018h_C_Count})   edit 9999999

  print $Pay018cn_Cpr                  (0,{Pay018h_C_Tax_class})
  print #tot_wagels_CPP_Contrib_cur2   (0,{Pay018h_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_CPP_Earns_cur2     (0,{Pay018h_C_Txgrs_cur}) edit 9999999999.99
  print #tot_wagels_CPP_nlgrs_cur2     (0,{Pay018h_C_Nlgrs_cur}) edit 9999999999999.99

  print $Pay018cn_Qpr                  (+1,{Pay018h_C_Tax_class})
  print #tot_wagels_QPP_Contrib_cur2   (0,{Pay018h_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_QPP_Earns_cur2     (0,{Pay018h_C_Txgrs_cur}) edit 9999999999.99
  print #tot_wagels_QPP_nlgrs_cur2     (0,{Pay018h_C_Nlgrs_cur}) edit 9999999999999.99

  print $Pay018cn_Ei_er                (+1,{Pay018h_C_Tax_class})
  print #tot_wagels_UI_ER_Premium_Cur  (0,{Pay018h_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_UI_ER_Earns_cur2   (0,{Pay018h_C_Txgrs_cur}) edit 9999999999.99
  print $UI_ER_Rt                      (0,{Pay018h_C_UI_ER_Rt}) edit 9.9999

  print $Pay018cn_QIR                  (+1,{Pay018h_C_Tax_class})
  print #tot_wagels_QIR_tax_cur        (0,{Pay018h_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_QIR_txgrs_cur      (0,{Pay018h_C_Txgrs_cur}) edit 9999999999.99

  print $Pay018cn_Health               (+1,{Pay018g_C_Tax_class})
  print #tot_wagels_Health_Tax_Cur     (0,{Pay018g_C_Tax_cur}) edit 9999999999.99
  print #tot_wagels_Health_Txgrs_Cur   (0,{Pay018g_C_Txgrs_cur}) edit 9999999999.99

  print ' '                (+1,0)
  do Init-ERTax-Wagels-Totals

end-procedure

begin-procedure Init-ERTax-Wagels-Totals

  let #tot_wagels_count8             = 0
  let #tot_wagels_CPP_Contrib_cur2   = 0
  let #tot_wagels_CPP_Earns_cur2     = 0
  let #tot_wagels_CPP_nlgrs_cur2     = 0
  let #tot_wagels_QPP_Contrib_cur2   = 0
  let #tot_wagels_QPP_Earns_cur2     = 0
  let #tot_wagels_QPP_nlgrs_cur2     = 0
  let #tot_wagels_UI_ER_Premium_Cur  = 0
  let #tot_wagels_UI_Earns_cur2      = 0
  let #tot_wagels_UI_ER_Earns_cur2   = 0
  let #tot_wagels_QIR_tax_cur        = 0
  let #tot_wagels_QIR_txgrs_cur      = 0
  let #tot_wagels_Health_tax_cur     = 0
  let #tot_wagels_Health_txgrs_cur   = 0

end-procedure

begin-procedure Get-Wage-loss-data

begin-SELECT
W.CANADA_RCT_NO
W.CANADA_BN
W.UI_ER_RT
  move &W.Canada_Rct_No to $Canada_Bus_No
  let $BN = rtrim(&W.Canada_BN, ' ')
  if $BN <> ''
    move 'Y' to $Bus-No
    move $BN to $Canada_Bus_No
  end-if
  move &W.UI_ER_Rt      to $UI_ER_Rt

FROM  PS_WAGELS_PLAN_TBL W
WHERE W.WAGE_LOSS_PLAN  = $Wage_Loss_Plan
  AND W.COMPANY         = $Company
  AND W.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_WAGELS_PLAN_TBL
       WHERE  WAGE_LOSS_PLAN = W.WAGE_LOSS_PLAN
         AND  COMPANY        = W.COMPANY
         AND  EFFDT         <= $CheckDt)
end-SELECT

end-procedure


begin-procedure page_break

    if $End = 'Y'
      do Reset
    end-if

    new-page
end-procedure

begin-procedure Company-Change

  do Page_Break

end-procedure


begin-procedure PayEndDate-Change

  do Page_Break

end-procedure


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#include 'curdttim.sqc'  !Current Date and Time
#include 'payinit.sqc'
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#include 'reset.sqc'     !Reset Printer
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
