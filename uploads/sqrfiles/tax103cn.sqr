!***********************************************
!  TAX103CN:  TD1 Net Claim Amount Mass Update *
!             Canadian Only                    *
!***********************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2010, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2010/11/02:12:50:50                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  813289                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init
  move 'TAX103CN' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  move $Tax103cn_Title_TD1_upd to $ReportTitle

  display $ReportTitle
  do Report
  new-page
  do Invalid-EI-Flags
  do Delete-Prov-Runctl
  do Reset            !Reset printer
#ifdef PRCSSCHD
  do StdAPI-Term
#endif

end-report

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from TAX103CN  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('TAX103CN', 'TITLE_TD1_MASS_UPD' , $Tax103cn_Title_TD1_upd , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'HEADING1'           , $Tax103cn_Heading1      , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'HEADING2'           , $Tax103cn_Heading2      , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'HEADING3'           , $Tax103cn_Heading3      , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'HEADING4'           , $Tax103cn_Heading4      , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'HEADING5'           , $Tax103cn_Heading5      , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'HEADING7'           , $Tax103cn_Heading7      , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'HEADING8'           , $Tax103cn_Heading8      , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'HEADING9'           , $Tax103cn_Heading9      , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'EFF_DATE'           , $Tax103cn_Eff_date          , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'ERR_DUP_REC'        , $Tax103cn_Err_dup_rec       , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'INV_EI_STAT'        , $Tax103cn_Inv_ei_stat       , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'COMPANY'            , $Tax103cn_Company           , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'EMPLID'             , $Tax103cn_Emplid            , #dummy_width)
   do Get_Field_Information ('TAX103CN', 'EI_CALC_STAT'       , $Tax103cn_Ei_calc_stat      , #dummy_width)


end-procedure

begin-heading 7
  #Include 'stdhdgtr.sqc'
  print $Tax103cn_Heading1                                (+2,1)
  print $Tax103cn_Heading2                                (0,46)
  print $Tax103cn_Heading3                                (0,89)
  print $Tax103cn_Heading4                                (0,106)
  print $Tax103cn_Heading5                                (0,137)
  print $Tax103cn_Heading9                                (+1,44)
  print $Tax103cn_Heading7                                (0,78)
  print $Tax103cn_Heading8                                (0,126)
end-heading


begin-procedure Init

#ifdef PRCSSCHD
  do StdAPI-Init
#endif

  if $PRCS_Process_Instance = ''
     while $DateOK <> 'Y'
       do Set-Date
     end-while
  end-if

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Canadian-YrEnd-Parameters
     do Convert-Parameters
     do Format-DateTime($EffDt,$CMP-EffDt,{DEFCMP},'','')
  end-if

  do Get-Provincial-Increases

  do Format-DateTime('19970101',$EICutOffDt,{DEFCMP},'','native')
  do Format-DateTime($EICutOffDt,$CMP-EICutOffDt,{DEFCMP},'','')

  do Format-DateTime('20000701',$UpdtEffDt,{DEFCMP},'','native')
  do Format-DateTime($UpdtEffDt,$CMP-UpdtEffDt,{DEFCMP},'','')

end-procedure

begin-procedure Get-Provincial-Increases


!Setup Provincial Rates ->

  create-array name=ProvRates size=15 field=Province:char           !(1)
                                      field=Pct_Incr:number:5       !(2)
                                      field=Amt_Incr:number:5       !(3)

  let #i = 0
  let #max_i = 0


begin-SELECT
YEP.PROVINCE
YEP.PERCENT_TD1_CHANGE
YEP.AMOUNT_TD1_CHANGE

 put &YEP.PROVINCE &YEP.PERCENT_TD1_CHANGE &YEP.AMOUNT_TD1_CHANGE INTO ProvRates(#i)
 add 1 to #i
 add 1 to #max_i

FROM   PS_RC_CAN_YE_PROV YEP
WHERE  YEP.OPRID          = $Prcs_OprID
  AND  YEP.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID

end-SELECT




end-procedure


begin-procedure Prompts

  display ' '
  display 'Percentage changes will be applied before '   noline
  display 'fixed amount changes.'
  display 'If the factor is not applicable, leave it blank.'
  input $PercentChg maxlen=7 'Enter TD1 % Change' type=number
  move $PercentChg to #PercentChg
  input $AmountChg maxlen=7 'Enter TD1 Fixed Amt Change' type=number
  move $AmountChg to #AmountChg
  input $ResetLetter maxlen=1 'Reset Special Letters to Zero? (Y/N)' type=char
  uppercase $ResetLetter
  input $ResetCPP maxlen=1 'Reset CPP Subject Months to 12? (Y/N)' type=char
  uppercase $ResetCPP
  input $QCPctChg maxlen=7 'Enter Quebec TD1 % Change' type=number
  move $QCPctChg to #QCPercentChg
  input $QCAmtChg maxlen=7 'Enter Quebec TD1 Fixed Amt Change' type=number
  move $QCAmtChg to #QCAmountChg
! input $ResetQcLtr maxlen=1 'Reset Quebec Special Letters to Zero? (Y/N)' type=char
  input $QCResetLetter maxlen=1 'Reset Quebec Special Letters to Zero? (Y/N)' type=char
  uppercase $QCResetLetter
  input $ResetTD1X maxlen=1 'Reset TD1X amounts to Zero? (Y/N)' type=char
  uppercase $ResetTD1X
  input $ResetMR19CV maxlen=1 'Reset MR19-CV amounts to Zero? (Y/N)' type=char
  uppercase $ResetMR19CV
  input $ResetXProv maxlen=1 'Reset Cross Province ? (Y/N)' type=char
  uppercase $ResetXProv

end-procedure


begin-procedure Set-Date

  move 'Y' to $DateOK

  if $PRCS_Process_Instance = ''
     input $EffDt 'Enter Effective Date ({Prompt-Date})' type=char
  end-if

  move {PDelimiter} to $DDelimiter
  do Format-Datetime($EffDt, $EffDt, {Prompt-Mask},'','native')
  do Format-DateTime($EffDt,$CMP-EffDt,{DEFCMP},'','')

begin-SQL on-error=Bad-Date
UPDATE PSASOFDATE SET ASOFDATE = $EffDt
end-SQL

end-procedure


begin-procedure Bad-Date
  move 'N' to $DateOK
  display '**** This is an invalid date, please reenter ****'
end-procedure


begin-procedure Report

  do Check-CTX-Rec

begin-SELECT
A.EMPLID
A.COMPANY
A.CIT_NET_CLAIM_AMT
A.CIT_PRESCR_AREA
A.CIT_TAX_CREDITS
A.QIT_NET_CLAIM_AMT
A.QIT_OTHER_DEDUCTS
A.QIT_TAX_CREDITS
A.CPP_SUBJECT_MONTHS
A.UI_EXEMPT
A.PAYROLL_TAX_EXEMPT
A.WAGE_LOSS_PLAN
A.CIT_SPECIAL_LTRS
A.TD1_ADJUST
A.EFFDT
A.SPECIAL_CIT_STATUS
A.CIT_ADDL_AMT
A.CIT_ADDL_PCT
A.SPECIAL_QIT_STATUS
A.QIT_ADDL_AMT
A.QIT_ADDL_PCT
A.CIT_FACTOR_Y
A.CIT_FACTOR_TH
A.QIT_SPECIAL_LTRS
A.QIT_PRESCR_AREA
E.NAME
A.LAST_ACTION
A.CIT_ANNUAL_COMM
A.CIT_ANNUAL_EXP
A.QIT_ANNUAL_COMM
A.QIT_ANNUAL_EXP
A.LCF_AMT
A.UI_YEARLY_AMT
A.CIT_F_FACTOR_EE
A.CROSS_PROVINCE
A.USE_PROV_OF_RES
A.PROVINCE
A.STATUS_INDIAN
A.NON_INDEX_AMT
A.QPIP_EXEMPT
A.HIST_CPP_NLGRS_YTD
A.HIST_CPP_TAX_YTD
A.HIST_CPP_TXGRS_YTD
A.HIST_EI_TAX_YTD
A.HIST_EI_TXGRS_YTD
A.HIST_QPE_TAX_YTD
A.HIST_QPE_TXGRS_YTD
A.HIST_QPP_NLGRS_YTD
A.HIST_QPP_TAX_YTD
A.HIST_QPP_TXGRS_YTD
B.EMPL_RCD
B.EMPL_STATUS

  if &B.Empl_Status = 'D' or &B.Empl_Status = 'T'
    do Verify-Concurrent-Job-Exists
    if $Activejob = 'Y'
      do Process-Can-Tax-Data
    end-if
  else
    do Process-Can-Tax-Data
  end-if

FROM PS_CAN_TAX_DATA  A,
     PS_JOB           B,
     PS_NAMES E
WHERE (A.CIT_NET_CLAIM_AMT <> 0 OR A.CIT_SPECIAL_LTRS <> 0 OR
       A.QIT_NET_CLAIM_AMT <> 0 OR A.QIT_SPECIAL_LTRS <> 0)
  AND A.EFFDT =
      (SELECT MAX(C.EFFDT)
         FROM PS_CAN_TAX_DATA C
        WHERE C.EMPLID  = A.EMPLID
          AND C.COMPANY = A.COMPANY
          AND C.EFFDT < $Effdt)
  AND B.EMPLID    = A.EMPLID
  AND B.COMPANY   = A.COMPANY
  AND B.EMPL_RCD =
      (SELECT MIN(G.EMPL_RCD)
       FROM PS_JOB G
       WHERE G.EMPLID  = B.EMPLID
         AND G.COMPANY = B.COMPANY)
  AND B.EFFDT     =
      (SELECT MAX(D.EFFDT)
         FROM PS_JOB D
        WHERE D.EMPLID    = B.EMPLID
          AND D.COMPANY   = B.COMPANY
          AND D.EMPL_RCD = B.EMPL_RCD
          AND D.EFFDT    <= $EffDt)
  AND B.EFFSEQ    =
      (SELECT MAX(F.EFFSEQ)
         FROM PS_JOB F
        WHERE F.EMPLID    = B.EMPLID
          AND F.COMPANY   = B.COMPANY
          AND F.EMPL_RCD = B.EMPL_RCD
          AND F.EFFDT     = B.EFFDT)
  AND E.EMPLID    = A.EMPLID
  AND E.NAME_TYPE = 'PRI'
  AND E.EFFDT =
      (SELECT MAX(EX.EFFDT)
       FROM   PS_NAMES EX
       WHERE  EX.EMPLID    = E.EMPLID
         AND  EX.NAME_TYPE = E.NAME_TYPE
         AND  EX.EFFDT    <= $Effdt)
  AND NOT EXISTS
      (SELECT 'x'
       FROM PS_CAN_TAX_DATA H
       WHERE H.EMPLID   = A.EMPLID
         AND H.COMPANY  = A.COMPANY
         AND H.EFFDT    = $Effdt)
ORDER BY E.NAME ASC
end-SELECT

  do Add-Empl-Rcd-WLP

end-procedure


begin-procedure Verify-Concurrent-Job-Exists

 let $Activejob = 'N'

begin-SELECT
B1.EMPLID

 let $Activejob = 'Y'

FROM   PS_JOB           B1
WHERE  B1.EMPLID          = &A.EMPLID
  AND  B1.COMPANY         = &A.COMPANY
  AND  B1.EMPL_RCD      <> &B.EMPL_RCD
  AND  B1.EFFDT  =
       (SELECT MAX(B2.EFFDT)
        FROM PS_JOB     B2
       WHERE B2.EMPLID    = B1.EMPLID
         AND B2.COMPANY   = B1.COMPANY
         AND B2.EMPL_RCD = B1.EMPL_RCD
         AND B2.EFFDT    <= $EffDt)
  AND  B1.EFFSEQ =
       (SELECT MAX(B3.EFFSEQ)
        FROM PS_JOB     B3
       WHERE B3.EMPLID    = B1.EMPLID
         AND B3.COMPANY   = B1.COMPANY
         AND B3.EMPL_RCD = B1.EMPL_RCD
         AND B3.EFFDT     = B1.EFFDT)
  AND  B1.EMPL_STATUS NOT IN ('D', 'T')

end-SELECT

end-procedure


begin-procedure Process-Can-Tax-Data

  if $ResetLetter = 'Y'
     move 0 to #Special_Ltrs
  else
     move &A.CIT_Special_Ltrs to #Special_Ltrs
  end-if

  if $QCResetLetter = 'Y'
     move 0 to #QCSpecial_Ltrs
  else
     move &A.QIT_Special_Ltrs to #QCSpecial_Ltrs
  end-if

  if $CMP-EffDt = $CMP-UpdtEffDt
     move &A.CPP_Subject_Months to #Subject_Months
  else
        if $ResetCPP = 'Y'
            move 12 to #Subject_Months
        else
            if &A.CPP_Subject_Months < 12
               move 0  to #Subject_Months
            else
               move 12 to #Subject_Months
            end-if
        end-if
  end-if

  if $ResetTD1X = 'Y'
     move 0 to #CIT_Annual_Comm
     move 0 to #CIT_Annual_Exp
     move 0 to #CIT_F_Factor_EE
  else
     move &A.CIT_Annual_Comm to #CIT_Annual_Comm
     move &A.CIT_Annual_Exp  to #CIT_Annual_Exp
     move &A.CIT_F_FACTOR_EE to #CIT_F_Factor_EE
  end-if

  if $ResetMR19CV = 'Y'
     move 0 to #QIT_Annual_Comm
     move 0 to #QIT_Annual_Exp
  else
     move &A.QIT_Annual_Comm to #QIT_Annual_Comm
     move &A.QIT_Annual_Exp  to #QIT_Annual_Exp
  end-if

  if $ResetXProv = 'Y'
     move 'N' to $Cross_Province
     move 'Y' to $Use_Prov_Of_Res
     move ' ' to $Province
  else
     move &A.Cross_Province  to $Cross_Province
     move &A.Use_Prov_Of_Res to $Use_Prov_Of_Res
     move &A.Province        to $Province
  end-if

  move 0 to #UI_Yearly_Amt

  move &A.UI_Exempt   to $UIExemptInd
  move &A.QPIP_Exempt to $QPIPExemptInd

  if &A.CIT_Net_Claim_Amt <> 0
     do Calc-New-Net-Claim
  else
     !Initialize #Net_Claim
     move 0 to #Net_Claim
  end-if

  if &A.QIT_Net_Claim_Amt <> 0
     do QC-Calc-New-Net-Claim
  else
     !Initialize #QC_Net_Claim
     move 0 to #QC_Net_Claim
  end-if

  move &A.EffDt to $OldDt
  do Format-DateTime($OldDt,$CMP-OldDt,{DEFCMP},'','')
  do Get-DateComponents ($CMP-EffDt,#NewYear,#NewMonth,#NewDay)
  do Get-DateComponents ($CMP-OldDt,#OldYear,#OldMonth,#OldDay)

  if  #NewYear <> #OldYear

      move 0  to #HIST_CPP_NLGRS_YTD
      move 0  to #HIST_CPP_TAX_YTD
      move 0  to #HIST_CPP_TXGRS_YTD
      move 0  to #HIST_EI_TAX_YTD
      move 0  to #HIST_EI_TXGRS_YTD
      move 0  to #HIST_QPE_TAX_YTD
      move 0  to #HIST_QPE_TXGRS_YTD
      move 0  to #HIST_QPP_NLGRS_YTD
      move 0  to #HIST_QPP_TAX_YTD
      move 0  to #HIST_QPP_TXGRS_YTD
  else

      move &A.HIST_CPP_NLGRS_YTD to #HIST_CPP_NLGRS_YTD
      move &A.HIST_CPP_TAX_YTD   to #HIST_CPP_TAX_YTD
      move &A.HIST_CPP_TXGRS_YTD to #HIST_CPP_TXGRS_YTD
      move &A.HIST_EI_TAX_YTD    to #HIST_EI_TAX_YTD
      move &A.HIST_EI_TXGRS_YTD  to #HIST_EI_TXGRS_YTD
      move &A.HIST_QPE_TAX_YTD   to #HIST_QPE_TAX_YTD
      move &A.HIST_QPE_TXGRS_YTD to #HIST_QPE_TXGRS_YTD
      move &A.HIST_QPP_NLGRS_YTD to #HIST_QPP_NLGRS_YTD
      move &A.HIST_QPP_TAX_YTD   to #HIST_QPP_TAX_YTD
      move &A.HIST_QPP_TXGRS_YTD to #HIST_QPP_TXGRS_YTD
  end-if


  do Insert-New-Net-Claim
  do Write-Report
  do Process-Provincial-TD1-Info

end-procedure


begin-procedure Calc-New-Net-Claim

! Modified to prevent the TD1 adjustment from being changed
  move     &A.CIT_Net_Claim_Amt  to    #Net_Claim
  move     &A.TD1_Adjust         to    #TD1_Chg
  move     #PercentChg           to    #Work_Percent
  Multiply .01                   times #Work_Percent
  Add      1                     to    #Work_Percent
  Subtract #TD1_Chg              from  #Net_Claim
  Multiply #Work_Percent         times #Net_Claim
  Add      #AmountChg            to    #Net_Claim
  Add      #TD1_Chg              to    #Net_Claim
  let      #Net_Claim            = round(#Net_Claim, 0)

end-procedure


begin-procedure QC-Calc-New-Net-Claim

  move     &A.QIT_Net_Claim_Amt  to    #QC_Net_Claim
  move     &A.NON_INDEX_AMT      to    #QC_No_Idx
  move     #QCPercentChg         to    #QCWork_Percent
  Multiply .01                   times #QCWork_Percent
  Add      1                     to    #QCWork_Percent
  Subtract #QC_No_Idx            from  #QC_Net_Claim
  Multiply #QCWork_Percent       times #QC_Net_Claim
  Add      #QCAmountChg          to    #QC_Net_Claim
  Add      #QC_No_Idx            to    #QC_Net_Claim

  let      #Int_QC_Net_Claim     =     floor(#QC_Net_Claim/5)                   ! Round to the Nearest
  Multiply 5                     times #Int_QC_Net_Claim                        ! Multiple of 5
  let      #Aux_QC_Claim         =     #QC_Net_Claim - #Int_QC_Net_Claim
  if #Aux_QC_Claim >= 2.5
     add   5                    to     #Int_QC_Net_Claim
  end-if

  move     #Int_QC_Net_Claim    to     #QC_Net_Claim


end-procedure


begin-procedure Insert-New-Net-Claim


  if $UIExemptInd <> 'Y' and $CMP-EffDt >= $CMP-EICutOffDt
     move 'E' to $UIExemptInd
  end-if

begin-SQL

   INSERT INTO PS_CAN_TAX_DATA
              (EMPLID,
               COMPANY,
               CIT_NET_CLAIM_AMT,
               CIT_PRESCR_AREA,
               CIT_TAX_CREDITS,
               QIT_NET_CLAIM_AMT,
               QIT_OTHER_DEDUCTS,
               QIT_TAX_CREDITS,
               CPP_SUBJECT_MONTHS,
               UI_EXEMPT,
               PAYROLL_TAX_EXEMPT,
               WAGE_LOSS_PLAN,
               CIT_SPECIAL_LTRS,
               TD1_ADJUST,
               EFFDT,
               SPECIAL_CIT_STATUS,
               CIT_ADDL_AMT,
               CIT_ADDL_PCT,
               SPECIAL_QIT_STATUS,
               QIT_ADDL_AMT,
               QIT_ADDL_PCT,
               CIT_FACTOR_Y,
               CIT_FACTOR_TH,
               QIT_SPECIAL_LTRS,
               QIT_PRESCR_AREA,
               LAST_ACTION,
               CIT_ANNUAL_COMM,
               CIT_ANNUAL_EXP,
               QIT_ANNUAL_COMM,
               QIT_ANNUAL_EXP,
               LCF_AMT,
               UI_YEARLY_AMT,
               CIT_F_FACTOR_EE,
               CROSS_PROVINCE,
               USE_PROV_OF_RES,
               PROVINCE,
               STATUS_INDIAN,
               NON_INDEX_AMT,
               CREATION_DT,
               QPIP_EXEMPT,
               HIST_CPP_NLGRS_YTD,
               HIST_CPP_TAX_YTD,
               HIST_CPP_TXGRS_YTD,
               HIST_EI_TAX_YTD,
               HIST_EI_TXGRS_YTD,
               HIST_QPE_TAX_YTD,
               HIST_QPE_TXGRS_YTD,
               HIST_QPP_NLGRS_YTD,
               HIST_QPP_TAX_YTD,
               HIST_QPP_TXGRS_YTD)
   VALUES (&A.EmplID, &A.Company, #Net_Claim,
           &A.CIT_Prescr_Area,
           &A.CIT_Tax_Credits, #QC_Net_Claim,
           &A.QIT_Other_Deducts,
           &A.QIT_Tax_Credits, #Subject_Months,
           $UIExemptInd, &A.Payroll_Tax_Exempt,
           &A.Wage_Loss_Plan, #Special_Ltrs,
           &A.TD1_Adjust, $EffDt, &A.Special_CIT_Status,
           &A.CIT_Addl_Amt, &A.CIT_Addl_Pct, &A.Special_QIT_Status,
           &A.QIT_Addl_Amt, &A.QIT_Addl_Pct, &A.CIT_Factor_Y,
           &A.CIT_Factor_TH, #QCSpecial_Ltrs, &A.QIT_Prescr_Area,
           &A.Last_Action, #CIT_Annual_Comm , #CIT_Annual_Exp ,
           #QIT_Annual_Comm, #QIT_Annual_Exp , &A.LCF_Amt,
           #UI_Yearly_Amt, #CIT_F_Factor_EE,
           $Cross_Province, $Use_Prov_Of_Res, $Province, &A.Status_Indian,
           &A.NON_INDEX_AMT,$AsOfToday,$QPIPExemptInd, #HIST_CPP_NLGRS_YTD,
           #HIST_CPP_TAX_YTD, #HIST_CPP_TXGRS_YTD, #HIST_EI_TAX_YTD,
           #HIST_EI_TXGRS_YTD, #HIST_QPE_TAX_YTD, #HIST_QPE_TXGRS_YTD,
           #HIST_QPP_NLGRS_YTD, #HIST_QPP_TAX_YTD, #HIST_QPP_TXGRS_YTD)

end-SQL

end-procedure

begin-procedure Add-Empl-Rcd-WLP

begin-SELECT
A1.EMPLID
A1.COMPANY
A1.EMPL_RCD
B1.EFFDT
B1.WAGE_LOSS_PLAN

  do Insert-Empl-WLP

FROM PS_JOB A1,
     PS_EMPL_WAGELS_CAN B1
WHERE A1.EMPLID    = B1.EMPLID
  AND A1.COMPANY   = B1.COMPANY
  AND A1.EMPL_RCD = B1.EMPL_RCD
  AND A1.EFFDT =
      (SELECT MAX(A2.EFFDT)
       FROM PS_JOB A2
       WHERE A2.EMPLID    = A1.EMPLID
         AND A2.EMPL_RCD = A1.EMPL_RCD
         AND A2.COMPANY   = A1.COMPANY
         AND A2.EFFDT    <= $Effdt)
  AND A1.EFFSEQ =
      (SELECT MAX(A3.EFFSEQ)
       FROM PS_JOB A3
       WHERE A3.EMPLID    = A1.EMPLID
         AND A3.EMPL_RCD = A1.EMPL_RCD
         AND A3.COMPANY   = A1.COMPANY
         AND A3.EFFDT     = A1.EFFDT)
  AND A1.EMPL_STATUS NOT IN ('D', 'T')
  AND B1.EFFDT =
      (SELECT MAX(B2.EFFDT)
      FROM PS_EMPL_WAGELS_CAN B2
      WHERE B2.EMPLID    = B1.EMPLID
        AND B2.COMPANY   = B1.COMPANY
        AND B2.EMPL_RCD = B1.EMPL_RCD
        AND B2.EFFDT     < $Effdt)
  AND EXISTS
      (SELECT 'x' FROM PS_CAN_TAX_DATA
                  WHERE EMPLID  = A1.EMPLID
                    AND COMPANY = A1.COMPANY
                    AND EFFDT   = $Effdt)
  AND NOT EXISTS
      (SELECT 'y' FROM PS_EMPL_WAGELS_CAN
                  WHERE EMPLID    = A1.EMPLID
                    AND COMPANY   = A1.COMPANY
                    AND EMPL_RCD = A1.EMPL_RCD
                    AND EFFDT     = $Effdt)
end-SELECT

end-procedure

begin-procedure Insert-Empl-WLP

begin-SQL

  INSERT INTO PS_EMPL_WAGELS_CAN
             (EMPLID,
              COMPANY,
              EFFDT,
              EMPL_RCD,
              WAGE_LOSS_PLAN)
  VALUES (&A1.EMPLID,&A1.COMPANY,$Effdt,&A1.EMPL_RCD,&B1.WAGE_LOSS_PLAN)

end-SQL

end-procedure

begin-procedure Process-Provincial-TD1-Info

begin-SELECT
PRV1.PROVINCE
PRV1.CIT_NET_CLAIM_AMT
PRV1.TD1_ADJUST
PRV1.CIT_PRESCR_AREA
PRV1.CIT_TAX_CREDITS
PRV1.CIT_SPECIAL_LTRS
PRV1.CIT_FACTOR_Y
PRV1.CIT_FACTOR_TH
PRV1.LCF_AMT
PRV1.CIT_F_FACTOR_EE
PRV1.PIT_K3P_AMOUNT
PRV1.NON_INDEX_AMT

  move &PRV1.CIT_NET_CLAIM_AMT  to  #PRV-CIT_Net_Claim_Amt
  move &PRV1.TD1_ADJUST         to  #PRV-TD1_Adjust
  move &PRV1.CIT_PRESCR_AREA    to  #PRV-CIT_Prescr_Area
  move &PRV1.CIT_TAX_CREDITS    to  #PRV-CIT_Tax_Credits
  move &PRV1.CIT_SPECIAL_LTRS   to  #PRV-CIT_Special_Ltrs
  move &PRV1.CIT_FACTOR_Y       to  #PRV-CIT_Factor_Y
  move &PRV1.CIT_FACTOR_TH      to  #PRV-CIT_Factor_TH
  move &PRV1.LCF_AMT            to  #PRV-LCF_Amt
  move &PRV1.CIT_F_FACTOR_EE    to  #PRV-CIT_F_Factor_EE
  move &PRV1.PIT_K3P_AMOUNT     to  #PRV-PIT_K3P_Amount
  move &PRV1.NON_INDEX_AMT      to  #PRV-Non-Index



! Check for provincial increases

   let $Prov-Incr-Found = 'N'

   move 0 to #i
   if #PRV-CIT_Net_Claim_Amt <> 0
     WHILE #i < #max_i
       GET $Province #Pct_Incr #Amt_Incr from ProvRates(#i) Province Pct_Incr Amt_Incr
       if rtrim($Province,' ') = rtrim(&PRV1.PROVINCE,' ')
          let  $Prov-Incr-Found = 'Y'
          Multiply .01               times #Pct_Incr
          Add      1                 to    #Pct_Incr
          let #PRV-CIT_Net_Claim_Amt =
              #PRV-CIT_Net_Claim_Amt - #PRV-Non-Index
          let #PRV-CIT_Net_Claim_Amt =
              #PRV-CIT_Net_Claim_Amt * #Pct_Incr
          let #PRV-CIT_Net_Claim_Amt =
              #PRV-CIT_Net_Claim_Amt + #Amt_Incr
          let #PRV-CIT_Net_Claim_Amt =
              #PRV-CIT_Net_Claim_Amt + #PRV-Non-Index
          add 1 to #i
       else
          add 1 to #i
       end-if
     END-WHILE
   end-if

   let #PRV-CIT_Net_Claim_Amt = round(#PRV-CIT_Net_Claim_Amt, 0)

   do Insert-Provincial-TD1

   if  $Prov-Incr-Found = 'Y'
       let $Prt-Prov = rtrim(&PRV1.PROVINCE,' ')
       do Format-Number(&PRV1.CIT_NET_CLAIM_AMT, $PrevProvAmt, '9,999,999.99')
       do Format-Number(#PRV-CIT_Net_Claim_Amt, $NewProvAmt, '9,999,999.99')
       print $Prt-Prov                                (+1,51)
       print $PrevProvAmt                             (0,74)
       print $NewProvAmt                              (0,122)
   end-if

FROM PS_CAN_TAX_PRVDATA PRV1
WHERE PRV1.EMPLID    = &A.EMPLID
  AND PRV1.COMPANY   = &A.COMPANY
  AND PRV1.EFFDT     = &A.EFFDT
end-SELECT

end-procedure

begin-procedure Insert-Provincial-TD1

begin-SQL

  INSERT INTO PS_CAN_TAX_PRVDATA
             (EMPLID,
              COMPANY,
              EFFDT,
              PROVINCE,
              CIT_NET_CLAIM_AMT,
              TD1_ADJUST,
              CIT_PRESCR_AREA,
              CIT_TAX_CREDITS,
              CIT_SPECIAL_LTRS,
              CIT_FACTOR_Y,
              CIT_FACTOR_TH,
              LCF_AMT,
              CIT_F_FACTOR_EE,
              PIT_K3P_AMOUNT,
              NON_INDEX_AMT,
              CREATION_DT)
  VALUES (&A.EMPLID,
          &A.COMPANY,
          $Effdt,
          &PRV1.PROVINCE,
          #PRV-CIT_Net_Claim_Amt,
          #PRV-TD1_Adjust,
          #PRV-CIT_Prescr_Area,
          #PRV-CIT_Tax_Credits,
          #PRV-CIT_Special_Ltrs,
          #PRV-CIT_Factor_Y,
          #PRV-CIT_Factor_TH,
          #PRV-LCF_Amt,
          #PRV-CIT_F_Factor_EE,
          #PRV-PIT_K3P_Amount,
          &PRV1.NON_INDEX_AMT,
          $AsOfToday)

end-SQL

end-procedure

begin-procedure Write-Report
  move &A.EmplID            to $EmplID
  move &E.Name              to $Name
  move &A.Company           to $Company
  move &A.EffDt             to $PrevDt
  do Format-Number(&A.CIT_Net_Claim_Amt, $PrevAmt, '9,999,999.99')
  do Format-Number(#Net_Claim, $Net_Claim, '9,999,999.99')
  do Format-Number(&A.QIT_Net_Claim_Amt, $QC_PrevAmt, '9,999,999.99')
  do Format-Number(#QC_Net_Claim, $QC_Net_Claim, '9,999,999.99')


  print $EmplID                (+1,1)
  print $Name                  (0,16,30)
  print $Company               (0,50)
  do Format-DateTime($PrevDt, $out, {DEFDATE}, '', '')
  print $out                   (0,59,10)
  print $PrevAmt               (0,74)
  print $QC_PrevAmt            (0,91)
  do Format-DateTime($EffDt, $out, {DEFDATE}, '', '')
  print $out                   (0,108,10)
  print $Net_Claim             (0,122)
  print $QC_Net_Claim          (0,138)

end-procedure


begin-procedure Convert-Parameters

  move #RC_CAN_YE.Percent_TD1_Change   to #PercentChg
  move #RC_CAN_YE.Amount_TD1_Change    to #AmountChg
  move $RC_CAN_YE.Effdt                to $Effdt
  move $RC_CAN_YE.Reset_Letter         to $ResetLetter
  move #RC_CAN_YE.Pct_TD1_Change_QC    to #QCPercentChg
  move #RC_CAN_YE.Amt_TD1_Change_QC    to #QCAmountChg
  move $RC_CAN_YE.Reset_Letter_QC      to $QCResetLetter
  move $RC_CAN_YE.Reset_CPP_Months     to $ResetCPP
  move $RC_CAN_YE.Reset_TD1X           to $ResetTD1X
  move $RC_CAN_YE.Reset_MR19CV         to $ResetMR19CV
  move $RC_CAN_YE.Reset_Cross_Prov     to $ResetXProv

end-procedure

begin-procedure Check-CTX-Rec

begin-SELECT
AY.EMPLID
AY.COMPANY
AY.EFFDT
EY.NAME

  print &AY.EMPLID                        (+1,1)
  print &EY.NAME                          (0,16,30)
  print &AY.COMPANY                       (0,50)
  do Format-DateTime(&AY.EFFDT, $out, {DEFDATE}, '', '')
  print $Tax103cn_Eff_date                (0,+4)
  print $out                              (0,+2)
  print $Tax103cn_Err_dup_rec             (0,+4)

FROM PS_CAN_TAX_DATA AY,
     PS_NAMES EY
WHERE AY.EMPLID    = EY.EMPLID
  AND AY.EFFDT     = $Effdt
  AND EY.NAME_TYPE = 'PRI'
  AND EY.EFFDT =
      (SELECT MAX(EZ.EFFDT)
       FROM   PS_NAMES EZ
       WHERE  EZ.EMPLID    = EY.EMPLID
         AND  EZ.NAME_TYPE = EY.NAME_TYPE
         AND  EZ.EFFDT    <= $Effdt)
ORDER BY AY.COMPANY ASC, AY.EMPLID ASC

end-SELECT

end-procedure

begin-procedure Invalid-EI-Flags

begin-SELECT
AX.EMPLID
AX.COMPANY
AX.CIT_NET_CLAIM_AMT
AX.QIT_NET_CLAIM_AMT
AX.CIT_SPECIAL_LTRS
AX.QIT_SPECIAL_LTRS
AX.UI_EXEMPT
AX.EFFDT

  if &AX.UI_EXEMPT <> 'Y' and &AX.UI_EXEMPT <> 'E'

     move &AX.UI_EXEMPT to $FieldValue
     move 'UI_EXEMPT' to $FieldName
     do Read-Translate-Table

     print $Tax103cn_Inv_ei_stat             (+1, 2)
     print $Tax103cn_Company                 (0, +4)
     print &AX.COMPANY                       (0, +2)
     print $Tax103cn_Emplid                  (0, +2)
     print &AX.EMPLID                        (0, +2)
     print $Tax103cn_Eff_date                (0, +4)
     print &AX.EFFDT                         (0, +2)
     print $Tax103cn_Ei_calc_stat            (0, +4)
     print '"'                               (0, +4)
     print &AX.UI_EXEMPT                     (0, +0)
     print '" -'                             (0, +0)
     print $XlatShortName                    (0, +2)
  end-if


FROM PS_CAN_TAX_DATA  AX
WHERE (AX.CIT_NET_CLAIM_AMT <> 0 OR AX.CIT_SPECIAL_LTRS <> 0 OR
       AX.QIT_NET_CLAIM_AMT <> 0 OR AX.QIT_SPECIAL_LTRS <> 0)
  AND AX.EFFDT >= $EICutOffDt
ORDER BY AX.COMPANY ASC, AX.EMPLID ASC, AX.EFFDT DESC

end-SELECT

end-procedure

begin-procedure Delete-Prov-Runctl

begin-SQL On-Error=SQL-Error

DELETE FROM PS_RC_CAN_YE_PROV
WHERE  OPRID          = $Prcs_OprID
  AND  RUN_CNTL_ID    = $Prcs_Run_Cntl_ID

end-SQL

end-procedure

#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'reset.sqc'     !Reset Printer
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#ifdef PRCSSCHD
#Include 'stdapi.sqc'    !Update Process API
#Include 'ctxrctl1.sqc'  !Canadian Year End Process Scheduler Run Controls
#endif
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
