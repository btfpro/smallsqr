!***********************************************************************
! PER064JP:  Appointment List                                          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!          $Date:  2006/07/19:14:51:56                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'    !Set environment
begin-setup
  #Include 'ptset02.sqc'   !Printer and page-size initialization

  #DEFINE JapaneseDates

  declare-variable
    DATE    $Rh_Asofdate_date
    DATE    $Rh_Asofdate_rep
    DATE    $Rh_Publish_dt_date
  end-declare

end-setup

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  if $prcs_oprid=''
    goto last2
  end-if
  if $Rh_Flag = 'Y'
    do Process-Main-Tree
  else
    do Process-Main
  end-if
  do End-Report-Proc
  do Delete-From-AE-Tables
  do Stdapi-Term
LAST2:
end-report

!***************
begin-heading 7
!***************
  print $REPORTTITLE_Asofdate   ( 0,0) center
  print $Rh_Publish_dtfmt       (+1,155)
  print $Rh_Descr               (+1,155)

  evaluate $Rh_Action
    when = 'HIR'
    when = 'REH'
    when = 'TER'
      let $ACTION        = $Rh_Action
      let $ACTION_REASON = $Sv_Action_reason
      do  Get-ActionReason-Name
      let $REP_ACTION_REASON = RTRIM($STR_ACTION_REASON,' ') || ' ' || $ActionReasonName
      print $REP_ACTION_REASON      (+1,#col1)
  end-evaluate

  evaluate $Rh_Action
    when = 'HIR'
    when = 'REH'
      print $STR_NAME           (+2,#col1)
      print $STR_COMPANY        ( 0,#col2)
      print $STR_DEPARTMENT     ( 0,#col3)
      print $STR_SAL_ADMIN_PLAN ( 0,#col4)
      print $STR_GRADE          ( 0,#col5)
      print $STR_SUPV_LVL       ( 0,#col6)
      print $STR_LOCATION       ( 0,#col7)
      print $STR_EMPL_CLASS     ( 0,#col8)

    when = 'PRO'
      print $STR_NAME               (+3,#col1)
      print $STR_NEW_SAL_ADMIN_PLAN ( 0,#col2)
      print $STR_NEW_GRADE          ( 0,#col3)
      print $STR_CUR_SAL_ADMIN_PLAN ( 0,#col4)
      print $STR_CUR_GRADE          ( 0,#col5)

    when = 'XFR'
      print $STR_NAME               (+3,#col1)
      print $STR_NEW_COMPANY        ( 0,#col2)
      print $STR_NEW_DEPARTMENT     ( 0,#col3)
      print $STR_NEW_SUPV_LVL       ( 0,#col4)
      print $STR_CUR_COMPANY        ( 0,#col5)
      print $STR_CUR_DEPARTMENT     ( 0,#col6)
      print $STR_CUR_SUPV_LVL       ( 0,#col7)

    when = 'TER'
      print $STR_NAME           (+2,#col1)
      print $STR_COMPANY        ( 0,#col2)
      print $STR_DEPARTMENT     ( 0,#col3)
      print $STR_SUPV_LVL       ( 0,#col4)

  end-evaluate

end-heading

!***************************
begin-procedure Init-Report
!***************************
  move 'PER064JP' to $ReportID
  do Stdapi-Init
   if $prcs_oprid=''
     display ''
     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
     display ''
    goto last1
  end-if

  if $prcs_process_instance = ''
!     No Prompt
  else
    do Select-Parameters
  end-if
  do Init_Printer
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('HR')

  let $PNLGRPNAME = &RUN_CNTL_HR_JPN.PNLGRPNAME
  DO Security-Param
  DO Security-Param-JPN

  do Get_Field_Information ($ReportID, 'REPORT_TITLE_HIR', $REPORT_TITLE_HIR,    #DW)
  do Get_Field_Information ($ReportID, 'REPORT_TITLE_PRO', $REPORT_TITLE_PRO,    #DW)
  do Get_Field_Information ($ReportID, 'REPORT_TITLE_RET', $REPORT_TITLE_RET,    #DW)
  do Get_Field_Information ($ReportID, 'REPORT_TITLE_XFR', $REPORT_TITLE_XFR,    #DW)
  do Get_Field_Information ($ReportID, 'ACTION_REASON',    $STR_ACTION_REASON,   #DW)
  do Get_Field_Information ($ReportID, 'NEW',              $STR_NEW,             #DW)
  do Get_Field_Information ($ReportID, 'CURRENT',          $STR_CURRENT,         #DW)
  do Get_Field_Information ($ReportID, 'NAME',             $STR_NAME,            #DW)
  do Get_Field_Information ($ReportID, 'COMPANY',          $STR_COMPANY,         #DW)
  do Get_Field_Information ($ReportID, 'DEPARTMENT',       $STR_DEPARTMENT,      #DW)
  do Get_Field_Information ($ReportID, 'LOCATION',         $STR_LOCATION,        #DW)
  do Get_Field_Information ($ReportID, 'SUPV_LVL',         $STR_SUPV_LVL,        #DW)
  do Get_Field_Information ($ReportID, 'SUPV_LVL2',        $STR_SUPV_LVL2,       #DW)
  do Get_Field_Information ($ReportID, 'SAL_ADMIN_PLAN',   $STR_SAL_ADMIN_PLAN,  #DW)
  do Get_Field_Information ($ReportID, 'GRADE',            $STR_GRADE,           #DW)
  do Get_Field_Information ($ReportID, 'EMPL_CLASS',       $STR_EMPL_CLASS,      #DW)
  do Get_Field_Information ($ReportID, 'END',              $STR_END,             #DW)
  do Get_Field_Information ($ReportID, 'MESSAGE_TEXT',     $STR_MESSAGE_TEXT,    #DW)
  do Get_Field_Information ($ReportID, 'MESSAGE_TEXT1',    $STR_MESSAGE_TEXT1,   #DW)
  do Get_Field_Information ($ReportID, 'MESSAGE_TEXT2',    $STR_MESSAGE_TEXT2,   #DW)
  do Get_Field_Information ($ReportID, 'MESSAGE_TEXT3',    $STR_MESSAGE_TEXT3,   #DW)
  do Get_Field_Information ($ReportID, 'MESSAGE_TEXT_DEPT',$STR_MESSAGE_TEXT_DEPT, #DW)
  do Get_Field_Information ($ReportID, 'MESSAGE_TEXT_SAL', $STR_MESSAGE_TEXT_SAL,  #DW)




  if $Rh_Flag = 'Y'
    let $Select_Records  = 'PS_PERSON_NAME PN, PS_PER064JP_DATA JN, ' || $Security_Record
    let $Order_by = 'JN.ACTION_REASON,'
!   7:JN.ACTION_REASON
  else
    let $Select_Records = 'PS_PERSON_NAME P, PS_JOB J, ' || $Security_Record
    let $Order_by = 'J.ACTION_REASON,'
  end-if

! Set delimiter
  if $language_cd = 'JPN'
    let $STR_DELIMITER = ''
  else
    let $STR_DELIMITER = ' '
  end-if

! Set Column Position
  evaluate $Rh_Action
    when = 'HIR'
    when = 'REH'
      let $REPORTTITLE = $REPORT_TITLE_HIR
      let #col1 = 1     ! Name
      let #col2 = 31    ! Company
      let #col3 = 63    ! Dept
      let #col4 = 95    ! Plan
      let #col5 = 109   ! Grade
      let #col6 = 123   ! Supv_lvl
      let #col7 = 142   ! Location
      let #col8 = 156   ! Empl_class
      let $STR_MESSAGE_TEXT1 = $STR_MESSAGE_TEXT1 || '.'
      let $STR_MESSAGE_TEXT3 = ''

    when = 'PRO'
      let $REPORTTITLE = $REPORT_TITLE_PRO
      let #col1 = 1     ! Name
      let #col2 = 31    ! Plan (New)
      let #col3 = 66    ! Grade(New)
      let #col4 = 101   ! Plan (Current)
      let #col5 = 136   ! Grade(Current)
      if $Rh_Flag = 'N'
        let $Order_by = 'J.SAL_ADMIN_PLAN, J.GRADE,'
      end-if
      let $STR_NEW_SAL_ADMIN_PLAN = $STR_NEW     || $STR_DELIMITER || $STR_SAL_ADMIN_PLAN
      let $STR_NEW_GRADE          = $STR_NEW     || $STR_DELIMITER || $STR_GRADE
      let $STR_CUR_SAL_ADMIN_PLAN = $STR_CURRENT || $STR_DELIMITER || $STR_SAL_ADMIN_PLAN
      let $STR_CUR_GRADE          = $STR_CURRENT || $STR_DELIMITER || $STR_GRADE
      let $STR_MESSAGE_TEXT1 = $STR_MESSAGE_TEXT1 || $STR_MESSAGE_TEXT2 || $STR_MESSAGE_TEXT_SAL

    when = 'XFR'
      let $REPORTTITLE = $REPORT_TITLE_XFR
      let #col1 = 1     ! Name
      let #col2 = 23    ! Company  (New)
      let #col3 = 53    ! Dept     (New)
      let #col4 = 83    ! Supv_lvl (New)
      let #col5 = 103   ! Company  (Current)
      let #col6 = 133   ! Dept     (Current)
      let #col7 = 163   ! Supv_lvl (Current)
      let $Order_by = ''
      let $STR_NEW_COMPANY    = $STR_NEW     || $STR_DELIMITER || $STR_COMPANY
      let $STR_NEW_DEPARTMENT = $STR_NEW     || $STR_DELIMITER || $STR_DEPARTMENT
      let $STR_NEW_SUPV_LVL   = $STR_NEW     || $STR_DELIMITER || $STR_SUPV_LVL2
      let $STR_CUR_COMPANY    = $STR_CURRENT || $STR_DELIMITER || $STR_COMPANY
      let $STR_CUR_DEPARTMENT = $STR_CURRENT || $STR_DELIMITER || $STR_DEPARTMENT
      let $STR_CUR_SUPV_LVL   = $STR_CURRENT || $STR_DELIMITER || $STR_SUPV_LVL2
      let $STR_MESSAGE_TEXT1 = $STR_MESSAGE_TEXT1 || $STR_MESSAGE_TEXT2 || $STR_MESSAGE_TEXT_DEPT

    when = 'TER'
      let $REPORTTITLE = $REPORT_TITLE_RET
      let #col1 = 1     ! Name
      let #col2 = 31    ! Company
      let #col3 = 66    ! Dept
      let #col4 = 101   ! Supv_lvl
      let $Rh_Asofdate_rep = dateadd($Rh_Asofdate_date,'day',-1)
      let $STR_MESSAGE_TEXT1 = $STR_MESSAGE_TEXT1 || '.'
      let $STR_MESSAGE_TEXT3 = ''

  end-evaluate

! Set initial value
  let $Sv_Action_reason = ''
  let #PRINT_FLG2 = 0
  let #LINE_MAX = 53

! format Asofdate and edit report title
  if $language_cd = 'JPN'
      do Format-DateTime($Rh_Asofdate_rep,    $Rh_Asofdate_repfmt, {DEFKAN}, '', '')
      do Format-DateTime($Rh_Publish_dt_date, $Rh_Publish_dtfmt,   {DEFKAN}, '', '')
      let $REPORTTITLE_Asofdate = RTRIM($Rh_Asofdate_repfmt,' ') || $REPORTTITLE
  else
      do Format-DateTime($Rh_Asofdate_rep,    $Rh_Asofdate_repfmt, {DEFDATE}, '', '')
      do Format-DateTime($Rh_Publish_dt_date, $Rh_Publish_dtfmt,   {DEFDATE}, '', '')
      let $REPORTTITLE_Asofdate = RTRIM($REPORTTITLE,' ') || ' ' || $Rh_Asofdate_repfmt
  end-if

LAST1:
end-procedure

!**************************
begin-procedure Get-Values
!**************************
  let $language_cd        = $prcs_language_cd
  let $AsOfDate           = &RUN_CNTL_HR_JPN.ASOFDATE
  let $Rh_Asofdate        = &RUN_CNTL_HR_JPN.ASOFDATE
  let $Rh_Asofdate_date   = &RUN_CNTL_HR_JPN.ASOFDATE
  let $Rh_Asofdate_rep    = &RUN_CNTL_HR_JPN.ASOFDATE
  let $Rh_Company         = &RUN_CNTL_HR_JPN.COMPANY
  let $Rh_Action          = RTRIM(&RUN_CNTL_HR_JPN.ACTION,' ')
  let $Rh_Flag            = RTRIM(&RUN_CNTL_HR_JPN.FLAG,' ')
  let $Rh_Descr           = &RUN_CNTL_HR_JPN.DESCR
  let $Rh_Publish_dt      = &RUN_CNTL_HR_JPN.PUBLISH_DT
  let $Rh_Publish_dt_date = &RUN_CNTL_HR_JPN.PUBLISH_DT

end-procedure

!****************************
begin-procedure Process-Main
!****************************
LET $sql-statement = 'An error occurred in selecting applicable data from Job Table.'

begin-SELECT DISTINCT  ON-ERROR=SQL-Error
P.EMPLID
P.NAME
J.EMPL_RCD
J.EFFDT
J.EFFSEQ
J.ACTION
J.ACTION_REASON
J.EMPL_CLASS
J.COMPANY
J.BUSINESS_UNIT
J.SETID_DEPT
J.DEPTID
J.SUPV_LVL_ID
J.SETID_SALARY
J.SAL_ADMIN_PLAN
J.GRADE
J.SETID_LOCATION
J.LOCATION
J.REG_REGION
  let $J_Emplid         = &P.EMPLID
  let $J_Name           = &P.NAME
  let #J_Empl_rcd       = &J.EMPL_RCD
  let $J_Effdt          = &J.EFFDT
  let #J_Effseq         = &J.EFFSEQ
  let $J_Action         = &J.ACTION
  let $J_Action_reason  = &J.ACTION_REASON
  let $J_Empl_class     = &J.EMPL_CLASS
  let $J_Company        = &J.COMPANY
  let $J_Business_unit  = RTRIM(&J.BUSINESS_UNIT,' ')
  let $J_Setid_dept     = RTRIM(&J.SETID_DEPT,' ')
  let $J_Deptid         = RTRIM(&J.DEPTID,' ')
  let $J_Supv_lvl_id    = RTRIM(&J.SUPV_LVL_ID,' ')
  let $J_Setid_salary   = RTRIM(&J.SETID_SALARY,' ')
  let $J_Sal_admin_plan = RTRIM(&J.SAL_ADMIN_PLAN,' ')
  let $J_Grade          = RTRIM(&J.GRADE,' ')
  let $J_Setid_location = RTRIM(&J.SETID_LOCATION,' ')
  let $J_Location       = RTRIM(&J.LOCATION,' ')
  let $J_Reg_region     = &J.REG_REGION

  do Print-Proc-Main

FROM [PS_PERSON_NAME P, PS_JOB J, PS_FAST_SQR_SEC_VW SCRTY: $Select_Records]
WHERE P.EMPLID = J.EMPLID
  AND J.EFFDT  = $Rh_Asofdate
  AND J.EFFSEQ = (SELECT MAX(J1.EFFSEQ) FROM PS_JOB J1
                                            ,PS_RUNCTL_NTFA_JPN RN
                   WHERE J1.EMPLID   = J.EMPLID
                     AND J1.EMPL_RCD = J.EMPL_RCD
                     AND J1.EFFDT    = J.EFFDT
                     AND J1.ACTION   = $Rh_Action
                     AND J1.ACTION_REASON = RN.ACTION_REASON
                     AND RN.OPRID       = $prcs_oprid
                     AND RN.RUN_CNTL_ID = $prcs_run_cntl_id
                     AND RN.ACTION      = $Rh_Action)
  AND J.COMPANY = $Rh_Company
  [$SecurityClause]
  AND P.EMPLID = SCRTY.EMPLID
  AND J.EMPL_RCD = SCRTY.EMPL_RCD
ORDER BY  [$Order_by] P.EMPLID
end-SELECT

end-procedure

!*********************************
begin-procedure Process-Main-Tree
!*********************************
! PSTREENODE ND(dept exists), PSTREENODE NS(supv_lvl exists)

!LET $sql-statement = 'An error occurred in selecting applicable data from Job,Treenode Table.'

begin-SELECT DISTINCT  ON-ERROR=SQL-Error
JN.EMPLID
PN.NAME
JN.EMPL_RCD
JN.EFFDT
JN.EFFSEQ
JN.ACTION
JN.ACTION_REASON
JN.EMPL_CLASS
JN.COMPANY
JN.BUSINESS_UNIT
JN.SETID_DEPT
JN.DEPTID
JN.SUPV_LVL_ID
JN.SETID_SALARY
JN.SAL_ADMIN_PLAN
JN.GRADE
JN.SETID_LOCATION
JN.LOCATION
JN.REG_REGION
JN.SETID
JN.TREE_NODE_NUM
JN.TREE_NODE_NUM_END
  let $J_Emplid         = &JN.EMPLID
  let $J_Name           = &PN.NAME
  let #J_Empl_rcd       = &JN.EMPL_RCD
  let $J_Effdt          = &JN.EFFDT
  let #J_Effseq         = &JN.EFFSEQ
  let $J_Action         = &JN.ACTION
  let $J_Action_reason  = &JN.ACTION_REASON
  let $J_Empl_class     = &JN.EMPL_CLASS
  let $J_Company        = &JN.COMPANY
  let $J_Business_unit  = RTRIM(&JN.BUSINESS_UNIT,' ')
  let $J_Setid_dept     = RTRIM(&JN.SETID_DEPT,' ')
  let $J_Deptid         = RTRIM(&JN.DEPTID,' ')
  let $J_Supv_lvl_id    = RTRIM(&JN.SUPV_LVL_ID,' ')
  let $J_Setid_salary   = RTRIM(&JN.SETID_SALARY,' ')
  let $J_Sal_admin_plan = RTRIM(&JN.SAL_ADMIN_PLAN,' ')
  let $J_Grade          = RTRIM(&JN.GRADE,' ')
  let $J_Setid_location = RTRIM(&JN.SETID_LOCATION,' ')
  let $J_Location       = RTRIM(&JN.LOCATION,' ')
  let $J_Reg_region     = &JN.REG_REGION

  do Print-Proc-Main

FROM [PS_PERSON_NAME PN, PS_PER064JP_DATA JN, PS_FAST_SQR_SEC_VW SCRTY: $Select_Records]
WHERE PN.EMPLID = JN.EMPLID
  AND JN.JOBINSTANCE = #prcs_job_instance
  [$SecurityClause]
  AND PN.EMPLID = SCRTY.EMPLID
  AND JN.EMPL_RCD = SCRTY.EMPL_RCD
ORDER BY  [$Order_by] JN.SETID_DEPT, JN.TREE_NODE_NUM, JN.DEPTID, JN.TREE_NODE_NUM_END, JN.SUPV_LVL_ID, JN.EMPLID

end-SELECT

end-procedure

!*******************************
begin-procedure Print-Proc-Main
!*******************************
  let #PRINT_FLG = 1

  if $Rh_Action = 'PRO' or $Rh_Action = 'XFR'
     do Get-Job-Previous
  end-if

  if #PRINT_FLG = 1
     let #PRINT_FLG2 = 1
     evaluate $Rh_Action
       when = 'HIR'
       when = 'REH'
         do Print-Proc-HIR
       when = 'PRO'
         do Print-Proc-PRO
       when = 'XFR'
         do Print-Proc-XFR
       when = 'TER'
         do Print-Proc-RET
     end-evaluate

  end-if

end-procedure

!********************************
begin-procedure Get-Job-Previous
!********************************
LET $sql-statement = 'An error occurred in reading Previous Job Table(JOB).'

begin-SELECT  LOOPS=1 ON-ERROR=SQL-Error
JP.EMPLID
JP.EMPL_RCD
JP.EFFDT
JP.EFFSEQ
JP.COMPANY
JP.BUSINESS_UNIT
JP.SETID_DEPT
JP.DEPTID
JP.SUPV_LVL_ID
JP.SETID_SALARY
JP.SAL_ADMIN_PLAN
JP.GRADE
  let $Jp_Company        = RTRIM(&JP.COMPANY,' ')
  let $Jp_Business_unit  = RTRIM(&JP.BUSINESS_UNIT,' ')
  let $Jp_Setid_dept     = RTRIM(&JP.SETID_DEPT,' ')
  let $Jp_Deptid         = RTRIM(&JP.DEPTID,' ')
  let $Jp_Supv_lvl_id    = RTRIM(&JP.SUPV_LVL_ID,' ')
  let $Jp_Setid_salary   = RTRIM(&JP.SETID_SALARY,' ')
  let $Jp_Sal_admin_plan = RTRIM(&JP.SAL_ADMIN_PLAN,' ')
  let $Jp_Grade          = RTRIM(&JP.GRADE,' ')

  evaluate $Rh_Action
    when = 'PRO'
      if $Jp_Setid_salary   = $J_Setid_salary   and
         $Jp_Sal_admin_plan = $J_Sal_admin_plan and
         $Jp_Grade          = $J_Grade
           let #PRINT_FLG = 0
      end-if
    when = 'XFR'
      if $Jp_Setid_dept  = $J_Setid_dept  and
         $Jp_Deptid      = $J_Deptid      and
         $Jp_Supv_lvl_id = $J_Supv_lvl_id
           let #PRINT_FLG = 0
      end-if
  end-evaluate

FROM  PS_JOB JP
WHERE JP.EMPLID = $J_Emplid
AND JP.EMPL_RCD = #J_Empl_rcd
AND (JP.EFFDT < $J_Effdt
OR (JP.EFFDT = $J_Effdt
AND JP.EFFSEQ < #J_Effseq))
Order by JP.EFFDT desc, JP.EFFSEQ desc
end-select

end-procedure

!******************************
begin-procedure Print-Proc-HIR
!******************************
      do Page-Break-Proc

      print $J_Name                 (+1,#col1,30)

      let $Company = $J_Company
      do Get-Company-Data
      print $CompanyName            ( 0,#col2)

      let $DeptID = $J_Deptid
      let $BU     = $J_Business_unit
      do Get-Department-Name
      print $Deptname               ( 0,#col3)

      let $SETID_SALARY   = $J_Setid_salary
      let $SAL_ADMIN_PLAN = $J_Sal_admin_plan
      do  Get-SalAdminPlan-Name
      print $SalAdminPlanNameAbbrv  ( 0,#col4)

      let $SETID_SALARY   = $J_Setid_salary
      let $SAL_ADMIN_PLAN = $J_Sal_admin_plan
      let $GRADE          = $J_Grade
      do  Get-Grade-Name
      print $GradeNameAbbrv         ( 0,#col5)

      let $Recname = 'SUPVSR_LVL_TBL'
      let $Busunit = $BU
      do  Get-Setid ($Busunit, $Recname, $Setid)
      let $Setid_dept = $Setid
      let $SUPV_LVL_ID = $J_Supv_lvl_id
      do  Get-Supvlvl-Name
      print $SupvlvlNameAbbrv       ( 0,#col6)

      let $Setid    = $J_Setid_location
      let $Location = $J_Location
      do  Get-Location-Name
      print $LocationAbbrv          ( 0,#col7)

      let $Reg_Region = $J_Reg_region
      let $Empl_Class = $J_Empl_class
    ! input: $Reg_Region, $Empl_Class; output: $Empl_Class_Name
      do Get-Empl-Class-Name
      print $Empl_Class_Name        ( 0,#col8)

end-procedure

!******************************
begin-procedure Print-Proc-PRO
!******************************
      if #CURRENT-LINE >= #LINE_MAX
           new-page
      end-if

      print $J_Name                 (+1,#col1,30)

      let $SETID_SALARY   = $J_Setid_salary
      let $SAL_ADMIN_PLAN = $J_Sal_admin_plan
      do  Get-SalAdminPlan-Name
      print $SalAdminPlanName       ( 0,#col2)

      let $SETID_SALARY   = $J_Setid_salary
      let $SAL_ADMIN_PLAN = $J_Sal_admin_plan
      let $GRADE          = $J_Grade
      do  Get-Grade-Name
      print $GradeName              ( 0,#col3)

      if $J_Setid_salary   <> $Jp_Setid_salary   or
         $J_Sal_admin_plan <> $Jp_Sal_admin_plan
          let $SETID_SALARY   = $Jp_Setid_salary
          let $SAL_ADMIN_PLAN = $Jp_Sal_admin_plan
          do  Get-SalAdminPlan-Name
      end-if
      print $SalAdminPlanName       ( 0,#col4)

      if $J_Setid_salary   <> $Jp_Setid_salary   or
         $J_Sal_admin_plan <> $Jp_Sal_admin_plan or
         $J_Grade          <> $Jp_Grade
          let $SETID_SALARY   = $Jp_Setid_salary
          let $SAL_ADMIN_PLAN = $Jp_Sal_admin_plan
          let $GRADE          = $Jp_Grade
          do  Get-Grade-Name
      end-if
      print $GradeName              ( 0,#col5)

end-procedure

!******************************
begin-procedure Print-Proc-XFR
!******************************
      if #CURRENT-LINE >= #LINE_MAX
           new-page
      end-if

      print $J_Name                 (+1,#col1,22)

      let $Company = $J_Company
      do Get-Company-Data
      print $CompanyName            ( 0,#col2)

      let $DeptID = $J_Deptid
      let $BU     = $J_Business_unit
      do Get-Department-Name
      print $Deptname               ( 0,#col3)

      let $Recname = 'SUPVSR_LVL_TBL'
      let $Busunit = $BU
      do  Get-Setid ($Busunit, $Recname, $Setid)
      let $Setid_dept = $Setid
      let $SUPV_LVL_ID = $J_Supv_lvl_id
      do  Get-Supvlvl-Name
      print $SupvlvlNameAbbrv       ( 0,#col4)

      if $J_Company <> $Jp_Company
         let $Company = $Jp_Company
         do Get-Company-Data
      end-if
      print $CompanyName            ( 0,#col5)

      if $J_Deptid        <> $Jp_Deptid  or
         $J_Business_unit <> $Jp_Business_unit
         let $DeptID = $Jp_Deptid
         let $BU     = $Jp_Business_unit
         do Get-Department-Name
      end-if
      print $Deptname               ( 0,#col6)

      if $J_Supv_lvl_id <> $Jp_Supv_lvl_id
         let $Recname = 'SUPVSR_LVL_TBL'
         let $Busunit = $BU
         do  Get-Setid ($Busunit, $Recname, $Setid)
         let $Setid_dept = $Setid
         let $SUPV_LVL_ID = $Jp_Supv_lvl_id
         do  Get-Supvlvl-Name
      end-if
      print $SupvlvlNameAbbrv       ( 0,#col7)

end-procedure

!******************************
begin-procedure Print-Proc-RET
!******************************
      do Page-Break-Proc

      print $J_Name                 (+1,#col1,30)

      let $Company = $J_Company
      do Get-Company-Data
      print $CompanyName            ( 0,#col2)

      let $DeptID = $J_Deptid
      let $BU     = $J_Business_unit
      do Get-Department-Name
      print $Deptname               ( 0,#col3)

      let $Recname = 'SUPVSR_LVL_TBL'
      let $Busunit = $BU
      do  Get-Setid ($Busunit, $Recname, $Setid)
      let $Setid_dept = $Setid
      let $SUPV_LVL_ID = $J_Supv_lvl_id
      do  Get-Supvlvl-Name
      print $SupvlvlName            ( 0,#col4)

end-procedure

!*******************************
begin-procedure Page-Break-Proc
!*******************************
  if $Sv_Action_reason <> $J_Action_reason or #CURRENT-LINE >= #LINE_MAX
     if $Sv_Action_reason <> ''
       new-page
     end-if
     let $Sv_Action_reason = $J_Action_reason
  end-if

end-procedure


!*******************************
begin-procedure End-Report-Proc
!*******************************
  if #PRINT_FLG2 = 1
      print $STR_END               (+2,165)
  else
      print $STR_MESSAGE_TEXT      (+4,1) CENTER
      print $STR_MESSAGE_TEXT1     (+1,1) CENTER
      print $STR_MESSAGE_TEXT3     (+1,1) CENTER
  end-if

end-procedure

!***********************************************************************
! Delete-From-AE-Tables                                                *
!                                                                      *
! Called By: begin-report                                              *
!***********************************************************************

begin-procedure Delete-From-AE-Tables

begin-sql
Delete from PS_PER064JP_DATA
Where JOBINSTANCE = #prcs_job_instance
end-sql

end-procedure !Delete-From-AE-Tables

#include 'askaod.sqc'    !Ask As Of Date input
#include 'askrtcds.sqc'  !Ask Rate Code input
#Include 'rotname1.sqc'  !Rotate-Name procedure
#Include 'reset1.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date math
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'
#include 'hrsecty.sqc'     !Get SQR Security parameters
#include 'hrsectjp.sqc' !Get SQR Security parameters
#include 'hrcntljp.sqc'    !Get run control parameter values
#include 'getcodta.sqc'    !Get selected fields from the Company Table
#include 'getdptnm.sqc'    !Get selected fields from the Dept Table
#Include 'getsupjp.sqc'    !Get selected fields from the Supervisor Level ID Table
#Include 'getplnjp.sqc'    !Get selected fields from the Sal Admin Plan Table
#Include 'getgrdjp.sqc'    !Get selected fields from the Sal Grade Table
#Include 'getlocnm.sqc'    !Get selected fields from the Location Table
#Include 'getacrjp.sqc'  !Get selected fields from the Action Reason Table
#Include 'getempcl.sqc'  !Get the Employee Class Name
#Include 'getsetid.sqc'  !Get Set Id from the Tableset Record Detail
