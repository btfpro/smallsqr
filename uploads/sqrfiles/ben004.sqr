!***********************************************************************
!  BEN004:  Savings Investment Distributions Report
!           Note:  This program also creates an interface file.
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/08/29:02:27:50                                 !
!       $Release:  HR9                                                 !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'  !Set environment

begin-setup
  #Include 'ptpsl177.sqc'
end-setup

#define col_sep                  1   !Column Separator
#define col_sep2                 2   !Column Separator
#define col_sep3                 3   !Column Separator
#define col_empl_name           36   !Employee Name
#define col_benefit              3   !Benefit Record
#define col_empl_id             11   !Employee ID
#define col_empl_ded            10   !Employee Deduction
#define col_comp_contrib        10   !Company Contribution
#define col_amount              18   !Amounts


!*********************************
begin-program
!*********************************
  do Init-Report

  display 'Report Begin at: ' noline
  do display-time

  do Process-Main

  display 'Report Ended at: ' noline
  do display-time
  do print-report-end

  do StdAPI-Term
  close 10
end-program

!*********************************
begin-procedure Init-Report
!*********************************
  do Init-DateTime
  do Init-Number

  do Get-Current-DateTime
  do StdAPI-Init

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if

  move 'BEN004' to $ReportID
  do Get-Report-Language
  if $RptPeriod = 'M'
     let $ReportTitle = $BEN1-MONTHLY || ' ' ||  $BEN004-REPORTTITLE
  else
        let $ReportTitle = $BEN1-QUARTERLY  || ' ' ||  $BEN004-REPORTTITLE
  end-if

  move 'BEN004' to $ReportID
  display  'Report ID: ' noline
  display $ReportTitle

  #Include 'ldplntyp.sqc'  !Load-Lookup Table with Plan Types

  do Initialization
end-procedure

!*********************************
Begin-Procedure Report-Translation
!*********************************
! Read from BEN004 program ids
  do Init_Report_Translation($ReportID, $Language_Cd)
  do Append_Report_Translation('BEN1')

  do Get_Field_Information ('BEN004', 'REPORT_TITLE', $BEN004-REPORTTITLE, #CW)
  do Get_Field_Information ('BEN004', 'GRND_TOT',     $BEN004-GRND-TOT,    #CW)
  do Get_Field_Information ('BEN004', 'COMP_TOT',     $BEN004-COMP-TOT,    #CW)
  do Get_Field_Information ('BEN004', 'BEN_PGM_TOT',  $BEN004-BEN-PGM-TOT, #CW)
  do Get_Field_Information ('BEN004', 'PLAN_TYP_TOT', $BEN004-PLAN-TYP-TOT,#CW)
  do Get_Field_Information ('BEN004', 'BEN_PLAN_TOT', $BEN004-BEN-PLAN-TOT,#CW)
  do Get_Field_Information ('BEN004', 'CONTRIB',      $BEN004-CONTRIB,     #CW)
  do Get_Field_Information ('BEN004', 'INV_DISTR',    $BEN004-INV-DISTR,   #CW)
  do Get_Field_Information ('BEN004', 'AMT',          $BEN004-AMT,         #CW)

  do Get_Field_Information ('BEN1',   'EMPLOYEE',     $BEN1-EMPLOYEE,      #CW)
  do Get_Field_Information ('BEN1',   'NAME',         $BEN1-NAME,          #CW)
  do Get_Field_Information ('BEN1',   'COMPANY',      $BEN1-COMPANY,       #CW)
  do Get_Field_Information ('BEN1',   'DEDCTON',      $BEN1-DEDCTON,       #CW)
  do Get_Field_Information ('BEN1',   'ID',           $BEN1-ID,            #CW)
  do Get_Field_Information ('BEN1',   'PLAN_TYPE',    $BEN1-PLAN-TYPE,     #CW)
  do Get_Field_Information ('BEN1',   'CURRENCY2',    $BEN1-CURRENCY2,     #CW)
  do Get_Field_Information ('BEN1',   'BEN_PLAN3',    $BEN1-BEN-PLAN3,     #CW)
  do Get_Field_Information ('BEN1',   'BEN_PGM',      $BEN1-BEN-PGM,       #CW)
  do Get_Field_Information ('BEN1',   'BEN',          $BEN1-BEN,           #CW)
  do Get_Field_Information ('BEN1',   'RCD',          $BEN1-RCD,           #CW)
  do Get_Field_Information ('BEN1',   'END_OF_REPORT',$BEN1-END-OF-REPORT, #CW)
  do Get_Field_Information ('BEN1',   'MONTHLY-RPT',  $BEN1-MONTHLY,       #CW)
  do Get_Field_Information ('BEN1',   'QUARTERLY-RPT',$BEN1-QUARTERLY,     #CW)


End-Procedure

!*********************************
begin-procedure Initialization
!*********************************
  do Format-DateTime($AsOfDate, $ReportDate, {DEFDATE}, '', '')
  do Get-Date-Codes

  open '{IMPORTPREFIX}ben004{IMPORTSUFFIX}' as 10 for-writing record=77

  create-array name=Totals size=7 -
    field=TotalName:char field=total:number:7 field=startCol:number:7

  put $BEN004-GRND-TOT     into Totals(1) TotalName
  put $BEN004-COMP-TOT     into Totals(2) TotalName
  put $BEN004-BEN-PGM-TOT  into Totals(3) TotalName
  put $BEN004-PLAN-TYP-TOT into Totals(4) TotalName
  put $BEN004-BEN-PLAN-TOT into Totals(5) TotalName

  put 54 65 85 105 125 145 165 into Totals(0) startCol(0) startCol(1) -
    startCol(2) startCol(3) startCol(4) startCol(5) startCol(6)

  move 5 to #maxOptions

  create-array name=InvOpts size=6 -
    field=OptValue:char            -
    field=OptName:char             -
    field=OptPct:number            -
    field=startCol:number

  put  78 into InvOpts(1) startCol
  put  98 into InvOpts(2) startCol
  put 118 into InvOpts(3) startCol
  put 138 into InvOpts(4) startCol
  put 158 into InvOpts(5) startCol

end-procedure

!*********************************
begin-procedure Get-Values
!*********************************

  do Select-Parameters
  do Get-RptPeriod

  if $RptPeriod = 'M'
    move '=' to $Operator
  else
    move '<=' to $Operator
  end-if

  do Get-As-Of-Date
end-procedure

!*********************************
begin-procedure Ask-Values
!*********************************
  do Get-Reporting-Period
  if $RptPeriod = 'M'
    move '=' to $Operator
  else
    move '<=' to $Operator
  end-if

  do Ask-As-Of-Date
end-procedure

!*********************************
begin-heading 12
!*********************************
  #Include 'stdhtr09.sqc'

  do Get-Benefit-Program-Name
  print $BEN1-BEN-PGM         (+1,1)
  print $BenefitProgramName   (0,13)
  if #MultiCurr
    print $BEN1-CURRENCY2     (0,45)
    print $BenefitProgramCurr (0,+1)
  end-if

#ifdef MICROSOFT
  move $Plan_Type to $Plan_Type xxxx
#endif
#ifdef DB2ALL
  if Not (#UNICODE_ENABLED)
    move $Plan_Type to $Plan_Type xxxx
  end-if
#endif
  LookUp Plan-Types $Plan_Type $PlanDescr

  print $BEN1-PLAN-TYPE  (+1,1)
  print $PlanDescr       (0,13)

  print $BEN1-BEN-PLAN3  (+1,1)
  print $Benefit_Plan    (0,13)

  print '<-------------------'                (+2,78)
  print $BEN004-INV-DISTR                     ()
  print '------------------->'                ()

  print $BEN1-EMPLOYEE    (+1,1,{col_empl_name})
  print $BEN1-BEN         (0,+{col_sep},{col_benefit})
  print $BEN1-EMPLOYEE    (0,+{col_sep},{col_empl_id})
  print $BEN1-EMPLOYEE    (0,+{col_sep},{col_empl_ded})
  print $BEN1-COMPANY     (0,+{col_sep},{col_comp_contrib})

  print $BEN1-NAME        (+1,1,{col_empl_name})
  print $BEN1-RCD         (0,+{col_sep},{col_benefit})
  print $BEN1-ID          (0,+{col_sep},{col_empl_id})
  print $BEN1-DEDCTON     (0,+{col_sep},{col_empl_ded})
  print $BEN004-CONTRIB   (0,+{col_sep},{col_comp_contrib})

  print '='               (+1,1,{col_empl_name})            Fill
  print '='               (0,+{col_sep},{col_benefit})      Fill
  print '='               (0,+{col_sep},{col_empl_id})      Fill
  print '='               (0,+{col_sep},{col_empl_ded})     Fill
  print '='               (0,+{col_sep},{col_comp_contrib}) Fill

  print '='               (0,+{col_sep2},{col_amount})      Fill
  print '='               (0,+{col_sep2},{col_amount})      Fill
  print '='               (0,+{col_sep2},{col_amount})      Fill
  print '='               (0,+{col_sep2},{col_amount})      Fill
  print '='               (0,+{col_sep2},{col_amount})      Fill
  print '' (-1,1)

  move 1 to #i
  while #i <= #maxOptions
    get $OptName #startCol from InvOpts(#i) OptName startCol
    add 3 to #startCol
    print $OptName         (-1,#startCol,14)
    subtract 1 from #startCol
    print $BEN004-AMT      (+1,#startCol)
    add 1 to #i
  end-while
end-heading

!*********************************
begin-procedure Process-Main
!*********************************
  move $AsOfYYYY to #AsOfYYYY
  do Get-Calendar-Year-Id

let #AsOfQtr = $AsOfQtr
let #AsOfMonth = $AsOfMonth

begin-SELECT DISTINCT
J.COMPANY         ()     on-break print=never level=1 procedure=Company-Change
B.BENEFIT_PROGRAM ()     on-break print=never level=2 procedure=BenProgram-Change
A.PLAN_TYPE       ()     on-break print=never level=3 procedure=PlanType-Change
A.BENEFIT_PLAN    ()     on-break print=never level=4 procedure=BenPlan-change
P.EMPLID          (0,42,11) on-break skiplines=1 level=5 procedure=Employee-Change
E.BENEFIT_RCD_NBR ()     on-break print=never level=5 procedure=Employee-Change
  move &E.BENEFIT_RCD_NBR TO #Benefit-Rcd-Nbr
  do Format-Number(#Benefit-Rcd-Nbr, $out, '999')
  print $out (0,38)
P1.NAME            (0,1,35)
C.BENEFIT_NBR,C.EFFDT
A.DED_CLASS,A.DED_MTD,A.DED_QTD

  move &J.Company         to $Company  !for use in Standard Heading
  move &B.Benefit_Program to $BenProgram
  move &A.Plan_Type       to $Plan_Type
  move &A.Benefit_Plan    to $Benefit_Plan

  move &P.EmplID          to $EmplID   !keys required for PS_Savings_Invest
  move &E.BENEFIT_RCD_NBR    to #EmplRcd#
  move &A.Plan_Type       to $Plan_Type
  move &A.Benefit_Plan    to $Benefit_Plan
  move &C.BENEFIT_NBR        to #BENEFIT_NBR
  move &C.EffDt           to $EffDt

  move &P1.Name            to $Name     !for interface file

  if $RptPeriod = 'M'
    move &A.Ded_MTD to #Amount
  else
    move &A.Ded_QTD to #Amount
  end-if
  if &A.Ded_Class <= 'K'  !Employee Deduction
    ARRAY-ADD #Amount to TOTALS(6) TOTAL(0)
  else                    !Company Contribution
    ARRAY-ADD #Amount to TOTALS(6) TOTAL(1)
  end-if

P1.NAME_PSFORMAT

FROM  PS_PERSON P,
      PS_PERSON_NAME P1,
      PS_PER_ORG_ASGN E,
      PS_JOB J,
      PS_PRIMARY_JOBS PJ,
      PS_DEDUCTION_BAL A,
      PS_BEN_PROG_PARTIC B,
      PS_SAVINGS_PLAN C
WHERE J.BENEFIT_SYSTEM <> 'OT'
  AND E.EMPLID     = P.EMPLID
  AND P1.EMPLID     = P.EMPLID
  AND PJ.EMPLID    = E.EMPLID
  AND PJ.EMPL_RCD  = E.EMPL_RCD
  AND PJ.PRIMARY_JOB_IND = 'Y'
  AND PJ.PRIMARY_JOB_APP = 'BN'
  AND PJ.EFFDT = (SELECT MAX (PJ1.EFFDT)
                    FROM PS_PRIMARY_JOBS PJ1
                   WHERE PJ1.EMPLID = PJ.EMPLID
                     AND PJ1.PRIMARY_JOB_APP = 'BN'
                     AND PJ1.EMPL_RCD = PJ.EMPL_RCD
                     AND PJ1.EFFDT <= $AsOfDate)
  AND J.EMPLID     = E.EMPLID
  AND J.EMPL_RCD  = E.EMPL_RCD
  AND J.EFFDT =
      (SELECT MAX(J1.EFFDT)
       FROM   PS_JOB J1
       WHERE J1.EMPLID    = J.EMPLID
         AND J1.EMPL_RCD = J.EMPL_RCD
         AND J1.EFFDT    <= $AsOfDate)
  AND J.EFFSEQ =
      (SELECT MAX(J2.EFFSEQ)
       FROM   PS_JOB J2
       WHERE J2.EMPLID    = J.EMPLID
         AND J2.EMPL_RCD = J.EMPL_RCD
         AND J2.EFFDT     = J.EFFDT)
  AND C.EMPLID     = A.EMPLID
  AND C.EMPL_RCD  = E.BENEFIT_RCD_NBR
  AND C.PLAN_TYPE  = A.PLAN_TYPE
  AND C.EFFDT =
      (SELECT MAX(C1.EFFDT)
       FROM   PS_SAVINGS_PLAN C1
       WHERE  EMPLID    = C.EMPLID
         AND  EMPL_RCD = C.EMPL_RCD
         AND  PLAN_TYPE = C.PLAN_TYPE
         AND  BENEFIT_NBR  = C.BENEFIT_NBR
         AND  EFFDT    <= $AsOfDate)
  AND A.COMPANY       = J.COMPANY
  AND A.EMPLID        = E.EMPLID
  AND A.PLAN_TYPE         <> '00'  !General Deduction
  AND A.DED_QTD   <> 0
  AND A.BALANCE_ID = $Calendar_Year_Id
  AND A.BALANCE_YEAR = #AsOfYYYY
  AND A.BENEFIT_RCD_NBR = E.BENEFIT_RCD_NBR
  AND A.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_DEDUCTION_BAL A1
       WHERE  A1.COMPANY       = A.COMPANY
         AND  A1.EMPLID        = A.EMPLID
         AND  A1.PLAN_TYPE     = A.PLAN_TYPE
         AND  A1.DEDCD         = A.DEDCD
         AND  A1.DED_CLASS     = A.DED_CLASS
         AND  A1.BALANCE_ID    = A.BALANCE_ID
         AND  A1.BALANCE_YEAR  = A.BALANCE_YEAR
         AND  A1.BENEFIT_RCD_NBR = A.BENEFIT_RCD_NBR
         AND  A1.BALANCE_QTR   = #AsOfQtr
         AND  A1.BALANCE_PERIOD [$Operator] #AsOfMonth)
  AND B.EMPLID = P.EMPLID
  AND B.EMPL_RCD = E.BENEFIT_RCD_NBR
  AND B.EFFDT =
      (SELECT MAX(EFFDT)
       FROM PS_BEN_PROG_PARTIC
       WHERE EMPLID = E.EMPLID
         AND EMPL_RCD = E.BENEFIT_RCD_NBR
         AND EFFDT <= $AsOfDate)
ORDER BY J.COMPANY ASC, B.BENEFIT_PROGRAM ASC, A.PLAN_TYPE ASC, A.BENEFIT_PLAN ASC,
         P1.NAME_PSFORMAT ASC, P.EMPLID ASC, E.BENEFIT_RCD_NBR ASC
end-SELECT

  move 1 to #changeLevel
  move 'Y' to $End
  if RTRIM($Company, ' ') <> '' !implies some data selected
    do Print-Totals
  end-if
end-procedure

!*********************************
! Print Break Procedures
!*********************************
begin-procedure Company-Change
  move 2 to #changeLevel
  do Print-Totals
  new-page
end-procedure

begin-procedure BenProgram-Change
  move 3 to #changeLevel
  do Print-Totals
  new-page
end-procedure

begin-procedure PlanType-Change
  move 4 to #changeLevel
  do Print-Totals
  new-page
end-procedure

begin-procedure BenPlan-Change
  move 5 to #changeLevel
  do Print-Totals
  new-page
end-procedure

begin-procedure Employee-Change
  move 6 to #changeLevel
  do Print-Totals
end-procedure

!*********************************
begin-procedure Print-Totals
!*********************************
  do Employee-Distribution

  move 6 to #totalRow
  while #totalRow >= #changeLevel
    move #totalRow to #rollRow
    subtract 1 from #rollRow
    if #totalRow < 6  !if not the Employee's totals
      get $TotalName from Totals(#totalRow) TotalName
      print $TotalName (+2,28,24)
    end-if

    move 0 to #i
    while #i <= 6
      get #total from Totals(#totalRow) total(#i)
      get #startCol from Totals(0) startCol(#i)
      do Format-Number(#total, $out, '9999999.99mi')
      print $out (0,#startCol)
      array-add #total to Totals(#rollRow) total(#i)
      put 0 into Totals(#totalRow) total(#i)
      if #totalRow = 6             !if the Employee's totals
        if #i > 1 and #total <> 0  !if non-zero Investment Amount
          do Write-Employee-Record
        end-if
      end-if
      add 1 to #i
    end-while

    subtract 1 from #totalRow

  end-while

  if $End = 'Y'
    do Reset
  end-if
end-procedure

!*********************************
begin-procedure Employee-Distribution
!*********************************
do Load-Investment-Option

begin-SELECT
INVESTMENT_OPT,
INVESTMENT_PCT

  move 1 to #i
  WHILE #i <= #maxOptions                    !Find option in array
    GET $Option from INVOPTS(#I) OPTVALUE
    if &Investment_Opt = $Option
      break
    end-if
  add 1 to #i
  END-WHILE

  if #i <= #maxOptions
    GET #startCol from INVOPTS(#I) STARTCOL
    do Format-Number(&Investment_Pct, $out, '999.99')
    print $out (0,#startCol)
    PUT &Investment_Pct INTO INVOPTS(#I) OPTPCT
  end-if

FROM  PS_SAVINGS_INVEST
WHERE EMPLID          = $EmplID
  AND EMPL_RCD       = #EmplRcd#
  AND PLAN_TYPE       = $PlanID
  AND BENEFIT_NBR        = #BENEFIT_NBR
  AND EFFDT           = $EffDt
  AND INVESTMENT_PCT <> 0
end-SELECT

  get #Deduction    from Totals(6) total(0)
  get #Contribution from Totals(6) total(1)
  add #Deduction to #Contribution
  move 0 to #SumOptAmts

  move 1 to #i
  while #i <= #maxOptions
    get #OptPct from InvOpts(#i) OptPct
    if #OptPct <> 0
      move #Contribution to #OptAmt
      multiply #OptPct times #OptAmt
      divide 100 into #OptAmt
      do Format-Number(#OptAmt, $OptAmt, '99999999.99')
      move $OptAmt to #OptAmt
      move #i to #total
      add 1 to #total
      put #OptAmt into Totals(6) total(#total)
      add #OptAmt to #SumOptAmts
      move #total to #DifferenceOpt
      put 0 into InvOpts(#i) OptPct
    end-if
    add 1 to #i
  end-while

  if #DifferenceOpt > 1              !if enrolled in at least 1 plan
    if #SumOptAmts <> #Contribution  !if rounding error
      subtract #SumOptAmts from #Contribution
      array-add #Contribution to Totals(6) total(#DifferenceOpt)
    end-if
  end-if

end-procedure

!*********************************
begin-procedure Load-Investment-Option
!*********************************
move 0 to #i

begin-SELECT
X.INVESTMENT_OPT
X.DESCRSHORT

  move &X.INVESTMENT_OPT to $Option_ID
  move &X.DESCRSHORT to $SvgsInvtDescrAbbrv
  do Get-Svgs-Invt-Name-Lang

  add 1 to #i
  PUT $Option_ID          INTO INVOPTS(#I) OPTVALUE
  PUT $SvgsInvtDescrAbbrv INTO INVOPTS(#I) OPTNAME
  if #i = #maxOptions  !only get first 5
    EXIT-SELECT
  end-if

FROM  PS_SAVINGS_INV_TBL X
WHERE X.PLAN_TYPE = $Plan_Type
  AND X.BENEFIT_PLAN = $Benefit_Plan
  AND X.EFFDT =
      (SELECT MAX(EFFDT)
       FROM  PS_SAVINGS_INV_TBL
       WHERE PLAN_TYPE    = X.PLAN_TYPE
         AND BENEFIT_PLAN = X.BENEFIT_PLAN
         AND EFFDT       <= $AsOfDate)
end-SELECT
end-procedure

!*********************************
begin-procedure Write-Employee-Record
!*********************************
  multiply 100 times #total
  do Format-Number(#total, $total, '099999999mi')
  move #i to #OptLevel
  subtract 1 from #OptLevel
  get $OptValue from InvOpts(#OptLevel) OptValue

  write 10 from $Company:3 $AsOfDate:10 $Plan_Type:2 -
                $EmplID:11 $Name:40 $OptValue:1 $total:10
end-procedure

!*************************************
Begin-Procedure Display-Time
!*************************************

  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

End-Procedure

!*******************************
Begin-Procedure Print-Report-End
!*******************************
 move '*** ' to $REPORT-END
 concat $BEN1-END-OF-REPORT with $REPORT-END
 concat ' ***' with $REPORT-END
 print $REPORT-END (+3,1)  CENTER
End-Procedure

!***********************************************************************
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgmnm.sqc'  !Get-Benefit-Program-Name procedure
#Include 'getrptpd.sqc'  !Get-Reporting-Period procedure
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'getinvnm.sqc'  !Get-Svgs-Invt-Name-Lang procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers

#Include 'askaod.sqc'    !Get-As-Of-Date procedure
#Include 'stdapi.sqc'    !Update Process API
#Include 'bnrunctl.sqc'  !Get application run control parameters
#Include 'bngetval.sqc'  !Get BEN values mask routines
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id

#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
!***********************************************************************

