! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
!  ECPREP.SQR   Outbound EC Agent Preparation                          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
! This program reads all of the Outbound EC Agent map definitions and  *
! generates the core ECOUTMAP.SQC file that ECOUT001.SQR uses to do    *
! application specific selects and field processing.  This program     *
! should be executed whenever an outbound map is changed.              *
!                                                                      *
! CHANGE HISTORY
! 06/04/96 - Added logic to handle default processing in the Process-
! ECFIELDVALUECD routine. Now will generate code based on existence of
! source field in psrecdefn.
! 07/09/96 - Added support to for data conversion profiles. Added
! "Cvt_Profile_ID" global variable.
! 07/23/96 - Added support for sub-records. Removed code that built
! commas into select statements. This was not needed. All references
! to PSRECFIELD checks for subrecords (1 level deep). Note, needed to
! use "literal" syntax in selects due to weird SQR bug.
! 08/20/96 - Added call to "Update-Prcs-Run-Status" to update the run
! control status in process scheduler.
! 09/05/96 - Needed to support using database value in the 'Derive-Where_Clause'
! routine (in the Outbound program). This required saving the data base
! value (after the select) in a temporary variable. This variable becomes
! new input parameter to 'PutInAr'. Only fields that exist
! in DB (not just in PSBD) have saved values.
! 09/27/96 - Changed correlation table names so that they don't match
! actual table names. This fix is for DB2 support. Also added the setup
! include.
! 10/17/96 - Due to DB2 returning trailing blanks, needed to use 'rtrim'
! function for all selected character columns.
! 11/06/96 - Added code to support the database specific date/time selects
! New generated code will support the std DateTimeOut substitution
! variables. This will insure the correctly formated native DBMS date/time
! is extracted from the DB prior to flat file writing.
! 12/11/96 - Changed the file name to lower case to support case sensitive
! OS. The main ECOUT001 include statement uses lower case. Also added support
! for MVS and OS400 naming conventions.
! 01/08/97 - Updated the ECOUTMAPFLD array to contian DECIMALPOS field.
! 02/26/97 - Changed the size of the field map arrays to handle large
! 03/03/97 - Updated PS_ECOUTMAPFLD to be 300
! per incident T-MARMSTR3-0003.  This increases field map arrays to handle large
! table definitions.
! 06/14/97 - Changes necessary for CSV and Strip Files
! 02/06/98 - Ecprep criteria necessary for huge number of maps
! 03/22/99 - Updated PS_ECOUTMAPFLD to be 600
! per incident T-DYLAGA-1T9U6.  This increases field map arrays to handle large
! table definitions.
!
!**********************************************************************

#include 'setenv.sqc'

!----------------------------------------------------------------------!
!  Begin Setup
!----------------------------------------------------------------------!
begin-setup
#include "setupdb.sqc"
end-setup

!----------------------------------------------------------------------!
!  Begin Report
!----------------------------------------------------------------------!
begin-Report

   do Init-Report

end-Report


!----------------------------------------------------------------------!
! Initialize Report
!----------------------------------------------------------------------!
begin-Procedure Init-Report
   #debugh do debug-msg('Init-Report')

   do Init-Variables

   do Init-DateTime

   do Define-Prcs-Vars

   do Get-Current-DateTime

   do Get-Run-Control-Parms

   do Just-Do-It

   do Update-Prcs-Run-Status

end-procedure


!----------------------------------------------------------------------!
!  Just-Do-It
!----------------------------------------------------------------------!
begin-procedure Just-Do-It

      #debugh do debug-msg('get-import-request')

      let $more_request = 'Y'
      display 'proc oprid  '
      display $prcs_oprid
      display 'proc cntrl  '
      display $prcs_run_cntl_id
      let $prcs_oprid = rtrim($prcs_oprid, ' ')
      let $prcs_run_cntl_id = rtrim($prcs_run_cntl_id, ' ')
      display 'proc oprid  '
      display $prcs_oprid
      display 'proc cntrl  '
      display $prcs_run_cntl_id

begin-select

ECRUNCNTL.OPRID,
ECRUNCNTL.RUN_CNTL_ID,
ECRUNCNTL.ECSQCDIR

   #ifdef MVS
      let $ecoutmap_filename = 'ECOUTMAP.sqc'
   #else
   #ifdef OS400
      let $ecoutmap_filename = 'SQRINC(ECOUTMAP)'
   #else
      let $ecoutmap_filename = rtrim(&ECRUNCNTL.ECSQCDIR,' ') || 'ecoutmap.sqc'
   #endif
   #endif


   do Open-ECOUTMAP-SQC

   do Build-Evaluate-MAPID

   do Build-Process-Map

   do Build-Process-Map-Rowid

   do Build-Moves

   CLOSE 1

FROM PS_ECRUNCNTL ECRUNCNTL
WHERE ECRUNCNTL.OPRID       = $prcs_oprid
AND   ECRUNCNTL.RUN_CNTL_ID = $prcs_run_cntl_id
end-select

end-procedure


!----------------------------------------------------------------------!
!  Init-Variables
!----------------------------------------------------------------------!
begin-procedure Init-Variables
      #debugh do debug-msg('Init-Variables')

   let $Begin_Proc_Lit = 'begin-procedure '
   let $End_Proc_Lit = 'end-procedure'
   let $Begin_Proc_Debug_Lit = '   #debugh do debug-msg('
   let $Begin_Select_Lit = 'begin-select '
   let $End_Select_Lit = 'end-select '
   let $Left_Brace = '{'             ! Need this variable due to SQR keying on char for subs

   let $Single_Quote = ''''

   let $ident_count = '0'              ! to reduce size of table alias

   Create-Array name= PS_ECMAPDEFN size = 1
         field=ecmapid:char:99
         field=ectransid:char:99
         field=ectransinoutsw:char:99

   Create-Array name= PS_ECOUTMAPFLD size = 600
         field=ecmapid:char:99
         field=ecfilerowid:char:99
         field=seqno:number:99
         field=fieldname:char:99
         field=fieldtype:number:99
         field=ecstartpos:number:99
         field=length:number:99
         field=decimalpos:number:99
         field=ecfieldvaluecd:char:99
         field=ectpcvtid:char:99
         field=ecdefaultvalue:char:99
         field=ecdrivercalccd:char:99
         field=errornumber:number:99
         field=filefldval:char:99
         field=dbfldval:char:99
         field=curseqnovalue:number:99=1
         field=delimit_date:char:99
         field=year_start:number:99
         field=year_len:number:99
         field=month_start:number:99
         field=month_len:number:99
         field=day_start:number:99
         field=day_len:number:99
         field=ecpad:char:99
         field=eccap:char:99
         field=ecstrip_char:char:99


   Create-Array name= POSTPROCWRITE size = 1
          field=writevalue:char:1000

end-procedure


!----------------------------------------------------------------------!
!  Open-ECOUTMAP-SQC
!----------------------------------------------------------------------!
begin-procedure Open-ECOUTMAP-SQC
      #debugh do debug-msg('Open-ECOUTMAP-SQC')

   open $ecoutmap_filename as 1  for-writing record=132:fixed
   status = #filestat

   if #filestat = 0
      Display 'Opening ECOUTMAP.SQC file ' noline
      Display $ecoutmap_filename
   else
      Display 'Cannot ECOUTMAP.SQC file ' noline
      Display $ecoutmap_filename
      let #prcs_run_status = #prcs_run_status_error
      do Update-Prcs-Run-Status
      stop
   end-if

end-procedure


!----------------------------------------------------------------------!
!  Build-Evaluate-MAPID
!
!  The following is an example of what this section builds:
!
!   begin-procedure Evaluate-MAPID
!      #debugh do debug-msg('Evaluate-MAPID')
!
!      evaluate $ecmapid
!         when = '850 OUT'
!            do Process-Map-850ZOUT
!         when-other
!            break
!      end-evaluate
!
!   end-procedure
!
!----------------------------------------------------------------------!
begin-procedure Build-Evaluate-MAPID
   #debugh do debug-msg('Build-Evaluate-MAPID')


   do Build-Evaluate-MAPID-Header
   let #Map_Count = 0

begin-select

PS_ECMAPDEFN1.ECMAPID,
PS_ECMAPDEFN1.ECTRANSID,
PS_ECMAPDEFN1.ECTRANSINOUTSW

   let PS_ECMAPDEFN.ECMAPID(0, #Map_Count) = rtrim(&PS_ECMAPDEFN1.ECMAPID, ' ')
   let PS_ECMAPDEFN.ECTRANSID(0, #Map_Count) =  rtrim(&PS_ECMAPDEFN1.ECTRANSID , ' ')
   let PS_ECMAPDEFN.ECTRANSINOUTSW(0, #Map_Count) =  rtrim(&PS_ECMAPDEFN1.ECTRANSINOUTSW, ' ')
   do Build-Evaluate-MAPID-Lines(&PS_ECMAPDEFN1.ECMAPID)
   add 1 to #Map_Count

FROM PS_ECMAPDEFN  PS_ECMAPDEFN1
WHERE PS_ECMAPDEFN1.ECTRANSINOUTSW = 'O' AND
PS_ECMAPDEFN1.ECMAPID IN
(SELECT ECMAPID
FROM PS_ECPREPSELECT PS_ECPREPSELECT1 WHERE
PS_ECPREPSELECT1.ECMAPSEL = 'Y' AND
PS_ECPREPSELECT1.ECTRANSINOUTSW = 'O' AND
PS_ECPREPSELECT1.OPRID = $prcs_oprid AND
PS_ECPREPSELECT1.RUN_CNTL_ID = $prcs_run_cntl_id)
ORDER BY
PS_ECMAPDEFN1.ECMAPID
end-select

   do Build-Evaluate-MAPID-Footer
   #debugv display 'Global Map Count=' noline
   #debugv display #Map_Count

end-procedure


!----------------------------------------------------------------------!
!  Build-Evaluate-MAPID-Header
!----------------------------------------------------------------------!
begin-procedure Build-Evaluate-MAPID-Header
   #debugh do debug-msg('Build-Evaluate-MAPID-Header')

   let $Write_Line = ''

   do Write-ECOUTWRT-Line

   let $Write_Line = $Begin_Proc_Lit || 'Evaluate-MAPID'

   do Write-ECOUTWRT-Line

   let $Write_Line = $Begin_Proc_Debug_Lit || $Single_Quote
                   || 'Evaluate-MAPID' || $Single_Quote || ')'

   do Write-ECOUTWRT-Line

   do Write-ECOUTWRT-Line

   let $Write_Line = '   evaluate $ecmapid'

   do Write-ECOUTWRT-Line

end-procedure


!----------------------------------------------------------------------!
!  Build-Evaluate-MAPID-Lines
!----------------------------------------------------------------------!
begin-procedure Build-Evaluate-MAPID-Lines($mapid)
   #debugh do debug-msg('Build-Evaluate-MAPID-Lines')

   let $mapid_proc = rtrim($mapid,' ')
   let $mapid_proc = translate($mapid_proc,' -*/+=','ZZZZZZ')
   #debugv display 'BEML mapid proc=' noline
   #debugv display $mapid_proc

   let $_Write_Line = '      when = ' || $_Single_Quote
                   || rtrim($mapid,' ') || $_Single_Quote

   do Write-ECOUTWRT-Line

   let $_Write_Line = '         do PM-' || $mapid_proc

   do Write-ECOUTWRT-Line

end-procedure


!----------------------------------------------------------------------!
!  Build-Evaluate-MAPID-Footer
!----------------------------------------------------------------------!
begin-procedure Build-Evaluate-MAPID-Footer
   #debugh do debug-msg('Build-Evaluate-MAPID-Footer')

   let $Write_Line = '      when-other'

   do Write-ECOUTWRT-Line

   let $Write_Line = '         break'

   do Write-ECOUTWRT-Line

   let $Write_Line = '   end-evaluate'

   do Write-ECOUTWRT-Line

   do Write-ECOUTWRT-Line

   let $Write_Line = $End_Proc_Lit

   do Write-ECOUTWRT-Line

   do Write-ECOUTWRT-Line

end-procedure


!----------------------------------------------------------------------!
!  Build-Process-Map
!
!  The following is an example of what this section builds:
!
!   begin-procedure Process-Map-850ZOUT
!      #debugh do debug-msg('Process-Map-850ZOUT')
!
!      do Process-Map-850ZOUT000
!
!      if #total_write_lines >= 0
!         do Process-LUW
!      end-if
!
!   end-procedure
!
!----------------------------------------------------------------------!
begin-procedure Build-Process-Map
   #debugh do debug-msg('Build-PM')

   let #i = 0
   while #i < #Map_Count
      get $mapid
      from PS_ECMAPDEFN(0)
         ecmapid(#i)
      let $mapid_proc = rtrim($mapid,' ')
      let $mapid_proc = translate($mapid_proc,' -*/+=','ZZZZZZ')

      let $Write_Line = ''
      do Write-ECOUTWRT-Line

      let $Proc_Name = 'PM-' || $mapid_proc
      let $Write_Line = $Begin_Proc_Lit || $Proc_Name

      do Write-ECOUTWRT-Line
      let $Write_Line = $Begin_Proc_Debug_Lit || $Single_Quote
                      || $Proc_Name || $Single_Quote || ')'
      do Write-ECOUTWRT-Line
      do Write-ECOUTWRT-Line
      let $Write_Line = '   do ' || $Proc_Name || '000'
      do Write-ECOUTWRT-Line
      do Write-ECOUTWRT-Line
      let $Write_Line = '   if #total_write_lines >= 0 and $LUW_Error_Sw = '
                       || $Single_Quote || 'N' || $Single_Quote
      do Write-ECOUTWRT-Line
      let $Write_Line = '      do File-Write '
      do Write-ECOUTWRT-Line
      let $Write_Line = '   else '
      do Write-ECOUTWRT-Line
      let $Write_Line = '      do Process-LUW_Error '
      do Write-ECOUTWRT-Line
      let $Write_Line = '   end-if '
      do Write-ECOUTWRT-Line
      do Write-ECOUTWRT-Line
      let $Write_Line = $End_Proc_Lit
      do Write-ECOUTWRT-Line
      do Write-ECOUTWRT-Line
      add 1 to #i

   end-while

end-procedure


!----------------------------------------------------------------------!
!  Build-Process-Map-Rowid
!
!  The following is an example of what this section builds:
!
!   begin-procedure Process-Map-850ZOUT000
!     #debugh do debug-msg('Process-Map-850ZOUT000')
!
!      move '000' to $ecfilerowid
!
!      do Derive-Whereclause
!
!   begin-select
!
!   A850ZOUT000.ECTRANSID,
!   A850ZOUT000.ECQUEUEINSTANCE,
!   A850ZOUT000.WFEXPR_REQUEST_ID,
!   A850ZOUT000.WFEXPR_REQUESTER,
!   A850ZOUT000.BUSINESS_UNIT,
!   A850ZOUT000.DEPTID,
!   A850ZOUT000.WFEXPR_DELIVER_TO,
!   A850ZOUT000.AMOUNT,
!   A850ZOUT000.WFEXPR_RQST_DT
!
!      do Move-850ZOUT000
!
!      do File-Write-Prep
!
!      do Process-Map-850ZOUT001
!
!      add 1 to #luw_load_total
!
!      move '000' to $ecfilerowid
!
!   FROM PS_WFEXPR_HDR_EC A850ZOUT000
!   [$whereclause]
!
!   end-select
!
!   end-procedure
!
!----------------------------------------------------------------------!
begin-procedure Build-Process-Map-Rowid
   #debugh do debug-msg('Build-PM-Rowid')

   let #i = 0

   while #i < #Map_Count
      get $ecmapid
      from PS_ECMAPDEFN(0)
         ecmapid(#i)
      let $ecmapid_proc = rtrim($ecmapid,' ')
      let $ecmapid_proc = translate($ecmapid_proc,' -*/+=','ZZZZZZ')

      #debugv display 'BPMR ecmapid=' noline
      #debugv display $ecmapid
      #debugv display 'BPMR ecmapidproc=' noline
      #debugv display $ecmapid_proc

      let $ident_count = rtrim(to_char(#i),' ')

      do Loop-ECOUTMAPREC
      add 1 to #i


   end-while

end-procedure


!----------------------------------------------------------------------!
!  Loop-ECOUTMAPREC
!----------------------------------------------------------------------!
begin-procedure Loop-ECOUTMAPREC
   #debugh do debug-msg('Loop-ECOUTMAPREC')

begin-select

PS_ECOUTMAPREC1.ECFILEROWID,
PS_ECOUTMAPREC1.RECNAME

   let $ecfilerowid = rtrim(&PS_ECOUTMAPREC1.ECFILEROWID, ' ')
   let $recname     = rtrim(&PS_ECOUTMAPREC1.RECNAME, ' ')
   #debugv display 'Loop ECOUTMAPREC ecfilerowid=' noline
   #debugv display $ecfilerowid
   #debugv display 'Loop ECOUTMAPREC recname=' noline
   #debugv display $recname

   do Build-Rowid-Header

   do Build-Rowid-Select

   do Build-Rowid-Processing

   do Build-Rowid-Footer

FROM PS_ECOUTMAPREC  PS_ECOUTMAPREC1
WHERE PS_ECOUTMAPREC1.ECMAPID = $ecmapid
ORDER BY
PS_ECOUTMAPREC1.ECFILEROWID
end-select

end-procedure


!----------------------------------------------------------------------!
!  Build-Rowid-Header
!----------------------------------------------------------------------!
begin-procedure Build-Rowid-Header
   #debugh do debug-msg('Build-Rowid-Header')

   let $Write_Line = ''
   do Write-ECOUTWRT-Line
   let $Proc_Name = 'PM-' || $ecmapid_proc || $ecfilerowid
   let $Write_Line = $Begin_Proc_Lit || $Proc_Name
   do Write-ECOUTWRT-Line
   let $Write_Line = $Begin_Proc_Debug_Lit || $Single_Quote
                   || $Proc_Name || $Single_Quote || ')'
   do Write-ECOUTWRT-Line
   do Write-ECOUTWRT-Line
   let $Write_Line = '   do Derive-Whereclause($ecmapid,' ||
                     $Single_Quote || $ecfilerowid || $Single_Quote ||
                     ', $whereclause, $derive_where_sw) '
   do Write-ECOUTWRT-Line
   do Write-ECOUTWRT-Line

   let $Write_Line = '   if $LUW_Error_Sw = ' || $Single_Quote || 'Y' || $Single_Quote
   do Write-ECOUTWRT-Line
   let $Write_Line = '      do File-Write-Prep('
                     || $Single_Quote || $ecfilerowid
                   || $Single_Quote || ', $ecmapid) '
   do Write-ECOUTWRT-Line
   let $Write_Line = '      goto Exit-' || $Proc_Name
   do Write-ECOUTWRT-Line
   let $Write_Line = '   end-if '
   do Write-ECOUTWRT-Line
   let $Write_Line = '   do Reset-Sequence_Number(' ||
                     $Single_Quote || $ecfilerowid || $Single_Quote || ') '
   do Write-ECOUTWRT-Line
   do Write-ECOUTWRT-Line

   let $Write_Line = $Begin_Select_Lit
   do Write-ECOUTWRT-Line
   do Write-ECOUTWRT-Line

end-procedure


!----------------------------------------------------------------------!
!  Build-Rowid-Select
!----------------------------------------------------------------------!
begin-procedure Build-Rowid-Select
   #debugh do debug-msg('Build-Rowid-Select')

   ! STUPID BUG IN SUB SELECT FORCES USE OF LITERALS.
   let $literal_recname = $Single_Quote || $recname || $Single_Quote


begin-select

ECRECFIELD.FIELDNAME
ECRECFIELD.FIELDTYPE
ECRECFIELD.SUBRECORD

   if &ECRECFIELD.SUBRECORD = 'N'
      evaluate &ECRECFIELD.FIELDTYPE
         when = 4
            let $Write_Line = $Left_Brace || 'DateOut-Prefix}A' || $ident_count || $ecfilerowid
                || '.' || rtrim(&ECRECFIELD.FIELDNAME, ' ')
                || $Left_Brace || 'DateOut-Suffix} &A' || $ident_count || $ecfilerowid
                || '.' || rtrim(&ECRECFIELD.FIELDNAME, ' ')
         when = 5
            let $Write_Line = $Left_Brace || 'TimeOut-Prefix}A' || $ident_count || $ecfilerowid
                || '.' || rtrim(&ECRECFIELD.FIELDNAME, ' ')
                || $Left_Brace || 'TimeOut-Suffix} &A' || $ident_count || $ecfilerowid
                || '.' || rtrim(&ECRECFIELD.FIELDNAME, ' ')
         when = 6
            let $Write_Line = $Left_Brace || 'DateTimeOut-Prefix}A' || $ident_count || $ecfilerowid
                || '.' || rtrim(&ECRECFIELD.FIELDNAME, ' ')
                || $Left_Brace || 'DateTimeOut-Suffix} &A' || $ident_count || $ecfilerowid
                || '.' || rtrim(&ECRECFIELD.FIELDNAME, ' ')
        when-other
            let $Write_Line = 'A' || $ident_count || $ecfilerowid || '.'
                              || rtrim(&ECRECFIELD.FIELDNAME, ' ')
         end-evaluate
      do Write-ECOUTWRT-Line
   end-if

FROM PS_ECRECFIELD_VW ECRECFIELD
WHERE ECRECFIELD.RECNAME = [$literal_recname]
OR    (ECRECFIELD.RECNAME IN
      (SELECT FIELDNAME FROM PSRECFIELD
       WHERE RECNAME = [$literal_recname] AND SUBRECORD = 'Y' ))
end-select


end-procedure


!----------------------------------------------------------------------!
!  Build-Rowid-Processing
!----------------------------------------------------------------------!
begin-procedure Build-Rowid-Processing
   #debugh do debug-msg('Build-Rowid-Processing')

   do Write-ECOUTWRT-Line

   let $Write_Line = '   let #message_nbr = 0'
   do Write-ECOUTWRT-Line

   let $Write_Line = '   do Move-' || $ecmapid_proc || $ecfilerowid
   do Write-ECOUTWRT-Line
   do Write-ECOUTWRT-Line

   let $Write_Line = '   do File-Write-Prep('
                     || $Single_Quote || $ecfilerowid
                   || $Single_Quote || ', $ecmapid) '
   do Write-ECOUTWRT-Line
   do Write-ECOUTWRT-Line

   do Process-Children

   if $ecfilerowid = '000'
      let $Write_Line = '   if $LUW_Error_Sw = ' || $Single_Quote || 'N' || $Single_Quote
      do Write-ECOUTWRT-Line
      let $Write_Line = '      add 1 to #luw_load_total '
      do Write-ECOUTWRT-Line
      let $Write_Line = '   end-if '
      do Write-ECOUTWRT-Line
      do Write-ECOUTWRT-Line
   end-if

   let $Write_Line = '   move ' || $Single_Quote || $ecfilerowid
                   || $Single_Quote || ' to $ecfilerowid '

   do Write-ECOUTWRT-Line

end-procedure


!----------------------------------------------------------------------!
!  Process-Children
!----------------------------------------------------------------------!
begin-procedure Process-Children
   #debugh do debug-msg('Process-Children')

begin-select

PS_ECOUTMAPREC2.ECFILEROWID

   let $Write_Line = '   do PM-' || $ecmapid_proc
                   || rtrim(&PS_ECOUTMAPREC2.ECFILEROWID, ' ')

   do Write-ECOUTWRT-Line

   do Write-ECOUTWRT-Line

FROM PS_ECOUTMAPREC  PS_ECOUTMAPREC2
WHERE PS_ECOUTMAPREC2.ECMAPID = $ecmapid
AND   PS_ECOUTMAPREC2.RECNAME_PARENT = $recname
ORDER BY
PS_ECOUTMAPREC2.ECFILEROWID
end-select

end-procedure


!----------------------------------------------------------------------!
!  Build-Rowid-Footer
!----------------------------------------------------------------------!
begin-procedure Build-Rowid-Footer
   #debugh do debug-msg('Build-Rowid-Footer')

   do Write-ECOUTWRT-Line
   let $Write_Line = 'FROM PS_' || $recname || ' A'
                   || $ident_count || $ecfilerowid
   do Write-ECOUTWRT-Line
   let $Write_Line = '[$whereclause]'
   do Write-ECOUTWRT-Line
   do Write-ECOUTWRT-Line

   let $Write_Line = $End_Select_Lit
   do Write-ECOUTWRT-Line
   do Write-ECOUTWRT-Line
   let $Write_Line = 'Exit-' || $Proc_Name || ':'   ! GOTO label
   do Write-ECOUTWRT-Line

   let $Write_Line = $End_Proc_Lit
   do Write-ECOUTWRT-Line
   do Write-ECOUTWRT-Line

end-procedure


!----------------------------------------------------------------------!
!  Build-Moves
!
!  The following is an example of what this section builds:
!
!----------------------------------------------------------------------!
begin-procedure Build-Moves
   #debugh do debug-msg('Build-Moves')

   let #k= 0
   while #k < #Map_Count
      get $ecmapid
      from PS_ECMAPDEFN(0)
         ecmapid(#k)
      let $ecmapid_proc = rtrim($ecmapid,' ')
      let $ecmapid_proc = translate($ecmapid_proc,' -*/+=','ZZZZZZ')
      let $ident_count = rtrim(to_char(#k),' ')
      do Loop-ECOUTMAPREC-Moves
      add 1 to #k
   end-while

end-procedure


!----------------------------------------------------------------------!
!  Loop-ECOUTMAPREC-Moves
!----------------------------------------------------------------------!
begin-procedure Loop-ECOUTMAPREC-Moves
   #debugh do debug-msg('Loop-ECOUTMAPREC-Moves')

begin-select

PS_ECOUTMAPREC3.ECFILEROWID,
PS_ECOUTMAPREC3.RECNAME,
PS_ECOUTMAPREC3.RECNAME_FILE


   let $ecfilerowid  = rtrim(&PS_ECOUTMAPREC3.ECFILEROWID, ' ')
   let $recname      = rtrim(&PS_ECOUTMAPREC3.RECNAME, ' ')
   let $recname_file = rtrim(&PS_ECOUTMAPREC3.RECNAME_FILE, ' ')

   let #Post_Proc_Idx = -1

   do Build-Moves-Header

   do Build-Moves-Fields

   do Build-Moves-Footer

FROM PS_ECOUTMAPREC  PS_ECOUTMAPREC3
WHERE PS_ECOUTMAPREC3.ECMAPID = $ecmapid
ORDER BY
PS_ECOUTMAPREC3.ECFILEROWID
end-select

end-procedure


!----------------------------------------------------------------------!
!  Build-Moves-Header
!----------------------------------------------------------------------!
begin-procedure Build-Moves-Header
   #debugh do debug-msg('Build-Moves-Header')

   let $Write_Line = ''

   do Write-ECOUTWRT-Line

   let $Proc_Name = 'Move-' || $ecmapid_proc || $ecfilerowid

   let $Write_Line = $Begin_Proc_Lit || $Proc_Name

   do Write-ECOUTWRT-Line

   let $Write_Line = $Begin_Proc_Debug_Lit || $Single_Quote
                   || $Proc_Name || $Single_Quote || ')'

   do Write-ECOUTWRT-Line

!   let $Write_Line = '   move ' || $Single_Quote || ' ' || $Single_Quote || ' to $ext_entitycd  ! null out value'
!   do Write-ECOUTWRT-Line

   do Write-ECOUTWRT-Line

end-procedure


!----------------------------------------------------------------------!
!  Build-Moves-Footer
!----------------------------------------------------------------------!
begin-procedure Build-Moves-Footer
   #debugh do debug-msg('Build-Moves-Footer')

   let #i = 0
   while #i <= #Post_Proc_Idx
   ! output any code that needed to be defered to post processing
      get $Write_Line
      from POSTPROCWRITE(0)
           writevalue(#i)
      #debugv display 'Post Proc Write Line ' noline
      #debugv display #i
      #debugv display $Write_Line
      do Write-ECOUTWRT-Line
      add 1 to #i
   end-while
   let $Write_Line = 'Exit-' || $Proc_Name || ':'   ! GOTO Label
   do Write-ECOUTWRT-Line
   let $Write_Line = $End_Proc_Lit

   do Write-ECOUTWRT-Line

   do Write-ECOUTWRT-Line

end-procedure


!----------------------------------------------------------------------!
!  Build-Moves-Fields
!  This proc selects all of the field definitions for the current map ID.
!  It then builds the code which will insert the actual field values into
!  a holding array. Any special handling or logic needed for the field is
!  handled by calling Process-ECFIELDVALUECD. It firsts selects all the
!  field map definitions into the PSOUTMAPFLD array. This is to allow
!  special handling to have entire record field definition's at once.
!----------------------------------------------------------------------!
begin-procedure Build-Moves-Fields
   #debugh do debug-msg('Build-Moves-Fields')

   let #field_count = 0
   let #ecfilerowid_index = to_number($ecfilerowid)

begin-select

PS_ECOUTMAPFLD1.ECMAPID,
PS_ECOUTMAPFLD1.ECFILEROWID,
PS_ECOUTMAPFLD1.SEQNO,
PS_ECOUTMAPFLD1.FIELDNAME,
PS_ECOUTMAPFLD1.FIELDTYPE,
PS_ECOUTMAPFLD1.ECSTARTPOS,
PS_ECOUTMAPFLD1.LENGTH,
PS_ECOUTMAPFLD1.DECIMALPOS,
PS_ECOUTMAPFLD1.ECFIELDVALUECD,
PS_ECOUTMAPFLD1.ECTPCVTID,
PS_ECOUTMAPFLD1.ECDEFAULTVALUE,
PS_ECOUTMAPFLD1.ECDRIVERCALCCD,
PS_ECOUTMAPFLD1.DELIMIT_DATE,
PS_ECOUTMAPFLD1.YEAR_START,
PS_ECOUTMAPFLD1.YEAR_LEN,
PS_ECOUTMAPFLD1.MONTH_START,
PS_ECOUTMAPFLD1.MONTH_LEN,
PS_ECOUTMAPFLD1.DAY_START,
PS_ECOUTMAPFLD1.DAY_LEN,
PS_ECOUTMAPFLD1.ECPAD,
PS_ECOUTMAPFLD1.ECCAP,
PS_ECOUTMAPFLD1.ECSTRIP_CHAR

  do Put-PS_ECOUTMAPFLD(#field_count,#ecfilerowid_index)

   add 1 to #field_count

FROM PS_ECOUTMAPFLD PS_ECOUTMAPFLD1
WHERE PS_ECOUTMAPFLD1.ECMAPID     = $ecmapid
AND   PS_ECOUTMAPFLD1.ECFILEROWID = $ecfilerowid
ORDER BY
PS_ECOUTMAPFLD1.SEQNO
end-select

   let #i = 0
   while #i < #field_count
      do Process-ECFIELDVALUECD(#i, #ecfilerowid_index, #field_count)
      if not isblank($Write_Line)
         do Write-ECOUTWRT-Line
         let $Write_Line = '   do PutInAr($FetVal, $DBVal, '
                           || to_char(#i) || ', ' || $Single_Quote
                           || $ecfilerowid || $Single_Quote ||') '
      end-if
      do Write-ECOUTWRT-Line
      do Write-ECOUTWRT-Line
      add 1 to #i
   end-while

end-procedure


!----------------------------------------------------------------------!
!  Process-ECFIELDVALUECD
!  This proc builds the code which calculates/retrieves the actual data
!  value for the current field. It first writes code to save the retrieved
!  value from the database. It uses two case statements, the first
!  is the conversion type used during processing outbound data; the
!  second is the case where the EDI Agent actually calculates a data
!  value. Note, the last write line assignment in a case must NOT be
!  followed by a Do-ECOUTWRT-Line call. Handled by caller. To avoid
!  writing a value out, set write line to NULL.
!----------------------------------------------------------------------!
begin-procedure Process-ECFIELDVALUECD(#i, #rowid_idx, #max_fld)
   #debugh do debug-msg('Process-ECFIELDVALUECD')

   get
      #seqno
      $fieldname
      #fieldtype
      #ecstartpos
      #length
      $ecfieldvaluecd
      $ectpcvtid
      $ecdefaultvalue
      $ecdrivercalccd
   from PS_ECOUTMAPFLD(#i)
      seqno(#rowid_idx)
      fieldname(#rowid_idx)
      fieldtype(#rowid_idx)
      ecstartpos(#rowid_idx)
      length(#rowid_idx)
      ecfieldvaluecd(#rowid_idx)
      ectpcvtid(#rowid_idx)
      ecdefaultvalue(#rowid_idx)
      ecdrivercalccd(#rowid_idx)

   let #field_flag = 0
   let $literal_recname = $_Single_Quote || $_recname || $_Single_Quote
   let $literal_fieldname = $_Single_Quote || $fieldname || $_Single_Quote

begin-select                   ! Check to see if target field exists in source DB table

count(*)   &field_flag
         let #field_flag = &field_flag

FROM PSRECFIELD PSRECFIELD1
WHERE (RECNAME IN
      (SELECT FIELDNAME FROM PSRECFIELD
      WHERE RECNAME = [$literal_recname] AND SUBRECORD = 'Y' )
OR    RECNAME = [$literal_recname])
AND FIELDNAME = [$literal_fieldname]
end-select

   if #field_flag > 0
      let $_Write_Line = '   move &A' || $_ident_count || $_ecfilerowid
                         || '.' || $fieldname || ' to $DBVal '
      do Write-ECOUTWRT-Line
   end-if
   evaluate $ecfieldvaluecd
      when = 'R'        ! source record copy
         let $_Write_Line = '   move &A' || $_ident_count || $_ecfilerowid
                         || '.' || $fieldname || ' to $FetVal '

      when = 'D'        ! Default value copy

         #debugv display 'Default recname=' noline
         #debugv display $_recname
         #debugv display 'Default fieldname=' noline
         #debugv display $fieldname
         #debugv display #field_flag


         if #field_flag = 0          ! No source field exists ==> always use default
            let $_Write_Line = '   move ' || $_Single_Quote
                            || $ecdefaultvalue || $_Single_Quote
                            || ' to $FetVal '
         else      ! Test for blank value from source field, then assign default
            #debugv display 'Default field exists'
            let $_Write_Line = '   move &A' || $_ident_count || $_ecfilerowid
                             || '.' || $fieldname
                             || ' to $FetVal '
            do Write-ECOUTWRT-Line
            if #fieldtype <> 0
               let $_Write_Line = '   if $FetVal = ' || $_Single_Quote
                             || '0' || $_Single_Quote
            else
               let $_Write_Line = '   if isblank($FetVal) '
            end-if
            do Write-ECOUTWRT-Line
            let $_Write_Line = '      move ' || $_Single_Quote
                             || $ecdefaultvalue || $_Single_Quote
                             || ' to $FetVal '
            do Write-ECOUTWRT-Line
            let $_Write_Line = '   end-if '
         end-if

      when = 'T'        ! TP Cross Reference Data Element Conversion
         let $_Write_Line = '   if isblank($ec_ext_tp_id) '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '      let $in_tp_id = $Q_Ext_Tp_Id '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '   else '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '      let $in_tp_id = $ec_ext_tp_id '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '   end-if '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '   do Process-TP_Conversion_Type($Cvt_Profile_ID, '
                            || $_Single_Quote || $ectpcvtid || $_Single_Quote || ', '
                            || $_Single_Quote || 'O' || $_Single_Quote || ', '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '       &A' || $_ident_count || $_ecfilerowid
                         || '.' || $fieldname || ',  $out_value) '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '   if isblank($out_value) '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '      let #Message_Nbr = 102 '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '      let $LUW_Error_Sw = ' || $_Single_Quote || 'Y' || $_Single_Quote
         do Write-ECOUTWRT-Line
         let $_Write_Line = '      let $Error_Misc = ' || $_Single_Quote
                         || 'External ID=(' || $_Single_Quote || ' || $ec_ext_tp_id || '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '          ' || $_Single_Quote || '), Convert Type=('
                         || $ectpcvtid || '), Internal Value=(' || $_Single_Quote
         do Write-ECOUTWRT-Line
         let $_Write_Line = '          || &A'
                         || $_ident_count || $_ecfilerowid || '.' || $fieldname
                         || ' || ' || $_Single_Quote || ')' || $_Single_Quote
         do Write-ECOUTWRT-Line
         let $_Write_Line = '      goto Exit-' || $_Proc_Name
         do Write-ECOUTWRT-Line
         let $_Write_Line = '   end-if'
         do Write-ECOUTWRT-Line
         let $_Write_Line = '   move $out_value to $FetVal '

      when = 'V'        ! Convert data value specific to this map and field defn
         let $_Write_Line = '   move &A' || $_ident_count || $_ecfilerowid
                         || '.' || $fieldname
                         || ' to $in_value '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '   do Convert-Value($ECMAPID, '
                            || $_Single_Quote || $_ecfilerowid || $_Single_Quote || ', '
                            || to_char(#seqno) || ', $in_value, $Value)'
         do Write-ECOUTWRT-Line
         let $_Write_Line = '   if isblank($Value) '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '      let #Message_Nbr = 103 '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '      let $LUW_Error_Sw = ' || $_Single_Quote || 'Y' || $_Single_Quote
         do Write-ECOUTWRT-Line
         let $_Write_Line = '      let $Error_Misc = ' || $_Single_Quote
                         || 'Map ID=(' || $_Single_Quote || ' || $ECMAPID || '
         do Write-ECOUTWRT-Line
         let $_Write_Line = '         ' || $_Single_Quote
                         || '), Row ID=(' || $_ecfilerowid
                         || '), Seq No=(' || to_char(#seqno)
                         || '), Source Value=('
                         || $_Single_Quote
         do Write-ECOUTWRT-Line
         let $_Write_Line = '         || $in_value '
                         || ' || ' || $_Single_Quote || ')' || $_Single_Quote
         do Write-ECOUTWRT-Line
         let $_Write_Line = '      goto Exit-' || $_Proc_Name
         do Write-ECOUTWRT-Line
         let $_Write_Line = '   end-if'
         do Write-ECOUTWRT-Line
         let $_Write_Line = '   move $Value to $FetVal '

      when = 'I'        ! Agent value requiring special handling.
          evaluate $ecdrivercalccd
              when = 'ACT'      ! Action code to external Primary Event/Secondary
                 do Get-Driver_Calc_Fieldname('SEC',#max_fld, #row_idx, $sec_fieldname, #sec_idx)
                 let $_Write_Line = '   do Get-Event_Code($ec_profile_id, $ectransid, &A'
                         || $_ident_count || $_ecfilerowid || '.' || $fieldname || ','
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '         $pri_evt_cd, $sec_evt_cd)'
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '   do PutInAr($sec_evt_cd, $DBVal, '
                               || to_char(#sec_idx) || ', ' || $_Single_Quote
                               || $_ecfilerowid || $_Single_Quote ||') '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '   move $pri_evt_cd to $FetVal '
              when = 'DAT'
                 let $_Write_Line = '   move $AsofToday to $FetVal'
              when = 'DTM'
                 let $_Write_Line = '   move &sysdatetime to $FetVal'
              when = 'TIM'
                 let $_Write_Line = '   move $AsofNow to $FetVal'
              when = 'ECD'      ! entity code definition - no special handling
                 let $_Write_Line = '   move &A' || $_ident_count || $_ecfilerowid
                         || '.' || $fieldname
                         || ' to $FetVal '
              when = 'ECQ'      ! assign queue instance value
                 let $_Write_Line = '   move $ECQUEUEINSTANCE'
                                 || ' to $FetVal '
              when = 'ECT'      ! assign transaction id value
                 let $_Write_Line = '   move $ectransid to $FetVal'
              when = 'SEC'      ! Set write_line to NULL so that value will not be updated in array
                 let $_Write_Line = ''
              when = 'TPC'
                 let $_Write_Line = '   move &A' || $_ident_count || $_ecfilerowid
                         || '.' || $fieldname
                         || ' to $value '
                 do Write-ECOUTWRT-Line
                 do Get-Driver_Calc_Fieldname('ECD',#max_fld, #row_idx,
                         $entitycd_fieldname, #entitycd_idx)
                 let $_Write_Line = '   move &A' || $_ident_count || $_ecfilerowid
                         || '.' || $entitycd_fieldname
                         || ' to $entity_code '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '   do Get-ECENTITYCD_Type($entity_code, $ec_ext_id_sw, $entitycd_recname) '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '   if $ec_ext_id_sw = ' || $_Single_Quote || 'Y' || $_Single_Quote
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '      do Convert-Internal_Cust_Vndr($Active_Business_Unit, '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '          $value, $entity_code, $entitycd_recname, $ec_ext_tp_id) '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '      if isblank($ec_ext_tp_id) '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '         let #Message_Nbr = 104 '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '         let $LUW_Error_Sw = ' || $_Single_Quote || 'Y' || $_Single_Quote
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '         let $Error_Misc = ' || $_Single_Quote
                                 || 'Active Business Unit=(' || $_Single_Quote
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '            || $Active_Business_Unit || '
                                 || $_Single_Quote || '), Internal Value=(' || $_Single_Quote
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '            || $value || ' || $_Single_Quote
                                 || '), Entity Code=(' || $_Single_Quote || ' || $entity_code || '
                                 || $_Single_Quote || ')' || $_Single_Quote
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '         goto Exit-' || $_Proc_Name
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '      end-if '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '      move $ec_ext_tp_id to $FetVal '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '   else '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '      let $Active_Business_Unit = $value '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '      do Convert-Business_Unit($Active_Business_Unit, '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '          $entity_code, $Q_Ext_Tp_Id, $ec_int_tp_id, $ec_alias_tp_id) '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '      if isblank($ec_alias_tp_id) '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '         let #Message_Nbr = 105 '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '         let $LUW_Error_Sw = ' || $_Single_Quote || 'Y' || $_Single_Quote
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '         let $Error_Misc = ' || $_Single_Quote
                                 || 'Active Business Unit=(' || $_Single_Quote
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '            || $Active_Business_Unit || '
                                 || $_Single_Quote || '), External Trading Partner=(' || $_Single_Quote
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '            || $Q_Ext_Tp_Id || ' || $_Single_Quote
                                 || '), Entity Code=(' || $_Single_Quote || ' || $entity_code || '
                                 || $_Single_Quote || ')' || $_Single_Quote
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '         goto Exit-' || $_Proc_Name
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '      end-if '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '      move $ec_alias_tp_id to $FetVal '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '   end-if '
              when = 'SEQ'
                 let $_Write_Line = '   let #temp = PS_ECOUTMAPFLD.curseqnovalue('
                      || to_char(#i) || ', ' || to_char(#rowid_idx) || ') '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '   let $FetVal = '
                      || ' to_char(#temp)'
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '   add 1 to #temp '
                 do Write-ECOUTWRT-Line
                 let $_Write_Line = '   let PS_ECOUTMAPFLD.curseqnovalue('
                      || to_char(#i) || ', ' || to_char(#rowid_idx) || ') = #temp '
              end-evaluate
   end-evaluate

end-procedure

!----------------------------------------------------------------------!
!  Get-Driver-Calc-Fieldname
!  This proc loops through the ECOUTMAPFLD array searching for a specific
!  input driver calculation code. It returns the associated field name and its
!  index in the array.
!----------------------------------------------------------------------!
begin-procedure Get-Driver_Calc_Fieldname($drivercalccd, #max_fld, #row_idx,
               :$fieldname, :#j)
   #debugh do debug-msg('Get-Driver_Calc_Fieldname')
   #debugv display 'Input driver calc code=' noline
   #debugv display $drivercalccd

   let #j = 0
   while #j <  #max_fld
      get
          $drivercalccd_temp
          $mapid
          $fieldname
      from PS_ECOUTMAPFLD(#j)
          ECDRIVERCALCCD(#rowid_idx)
          ECMAPID(#rowid_idx)
          FIELDNAME(#rowid_idx)
      #debugv display ' driver calc=' noline
      #debugv display $drivercalccd_temp
      #debugv display '$entitycd_fieldname=' noline
      #debugv display $entitycd_fieldname
      if  $drivercalccd_temp = $drivercalccd
         break
      end-if
      add 1 to #j
   end-while
   if #j = #max_fld
      display 'Driver Calculation Code = (' noline
      display $drivercalccd noline
      display ') Not Found On Map Definition'
      display 'This Error Found for Map ID (' noline
      display $mapid
      display ') and File Row Index ('
      display #row_idx
      display '). Please correct Outbound Map.'
      let #prcs_run_status = #prcs_run_status_error
      do Update-Prcs-Run-Status
      STOP
   end-if
end-procedure

!----------------------------------------------------------------------!
!  Write-ECOUTWRT-Line
!----------------------------------------------------------------------!
begin-procedure Write-ECOUTWRT-Line

   write 1 from $Write_Line

   let $Write_Line = ''

end-procedure


!----------------------------------------------------------------------!
!  Debug-Msg
!----------------------------------------------------------------------!
begin-procedure Debug-Msg($procedure_name)
   display ' '
   display '----------------------------------'
   display $procedure_name
   display ' '
end-procedure


!----------------------------------------------------------------------!
! Called SQC Procedures                                                !
!----------------------------------------------------------------------!
   #include 'ecmapfld.sqc'
   #include 'number.sqc'
   #include 'reset.sqc'     !Reset Printer Procedure
   #include 'curdttim.sqc'  !Get Current Date Time
   #include 'datetime.sqc'  !Routines for date and time formatting
   #include 'prcsapi.sqc'   !Update Process Request API
   #include 'prcsdef.sqc'   !Update Process Request variable declare


















