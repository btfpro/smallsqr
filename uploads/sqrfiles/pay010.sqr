!********************************************************
!  PAY010:  Employees Not Processed in Current Payroll  *
!********************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/20:04:28:18                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization

begin-report
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PAY010' to $ReportID

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init

  do Get-Report-Language   ! Procedure to decide the report language
                           ! and call 'Report-Translation' procedure
                           ! that reads the language dep. text.
  move $Pay010_ReportTitle to $ReportTitle
  display $ReportTitle

  if $Prcs_Process_Instance = ''
    input $RunID maxlen=3 'Enter Payroll Run ID' type=char
    uppercase $RunID
  else
    do Select-Parameters
    let $RunID = $RC_PAY.Run_ID
  end-if

  do Array-Initialization
end-procedure

! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation
! Read from PAY010  and PAY1 program ids
   do Init_Report_Translation($ReportID,$language_cd)
   do Append_Report_Translation('PAY1')
   do Append_Report_Translation('HR')


   do Get_Field_Information ('PAY010', 'REPORT_TITLE', $Pay010_ReportTitle, #dummy_width)
   do Get_Field_Information ('PAY010', 'REG',          $Pay010_Reg,         #dummy_width)
   do Get_Field_Information ('PAY010', 'OVR',          $Pay010_Ovr,         #dummy_width)
   do Get_Field_Information ('PAY010', 'OTH',          $Pay010_Oth,         #dummy_width)
   do Get_Field_Information ('PAY010', 'EMP_NM',       $Pay010_Emp_Nm,      #dummy_width)
   do Get_Field_Information ('PAY010', 'EMP_ID',       $Pay010_Emp_Id,      #dummy_width)
   do Get_Field_Information ('PAY010', 'DEPT_ID',      $Pay010_Dept_Id,     #dummy_width)
   do Get_Field_Information ('PAY010', 'PG_LN_ADL',    $Pay010_Pg_Ln_Adl,   #dummy_width)
   do Get_Field_Information ('PAY010', 'HOURS',        $Pay010_Hours,       #dummy_width)
   do Get_Field_Information ('PAY010', 'ERNS',         $Pay010_Erns,        #dummy_width)
   do Get_Field_Information ('PAY010', 'TYPE',         $Pay010_Type,        #dummy_width)
   do Get_Field_Information ('PAY010', 'NO_DATATXT',   $Pay010_No_DataTxt,  #dummy_width)

   do Get_Field_Information ('PAY1',   'GR_TOT',       $Pay1_Gr_Tot,        #dummy_width)
   do Get_Field_Information ('PAY1',   'CMP_TOT',      $Pay1_Cmp_Tot,       #dummy_width)
   do Get_Field_Information ('PAY1',   'PAYPER_TOT',   $Pay1_PayPer_Tot,    #dummy_width)
   do Get_Field_Information ('PAY1',   'PAYGRP_TOT',   $Pay1_PayGrp_Tot,    #dummy_width)

   do Get_Field_Information ('HR',     'BUS_UNIT1',    $HR_Bus_Unit1,       #dummy_width)
   do Get_Field_Information ('HR',     'BUS_UNIT2',    $HR_Bus_Unit2,       #dummy_width)

end-procedure

begin-procedure Array-Initialization

  create-array name=Totals size=5 -
    field=TotalName:char          -
    field=total:number:5          -
    field=startCol:number:5


  put $Pay1_Gr_Tot     into Totals(1) TotalName
  put $Pay1_Cmp_Tot    into Totals(2) TotalName
  put $Pay1_PayPer_Tot into Totals(3) TotalName
  put $Pay1_PayGrp_Tot into Totals(4) TotalName

  put  92 into Totals(0) startCol(0)
  put 107 into Totals(0) startCol(1)
  put 122 into Totals(0) startCol(2)
  put 146 into Totals(0) startCol(3)
  put 161 into Totals(0) startCol(4)
end-procedure

begin-heading 8

  #Include 'stdhtr06.sqc'
  print $Hr_Bus_Unit1                                         (+2,62)
  print $Pay010_Reg                                           (0,97)
  print $Pay010_Ovr                                           (0,127)
  print $Pay010_Oth                                           (0,146)
  print $Pay010_Emp_Nm                                        (+1,1)
  print $Pay010_Emp_Id                                        (0,35)
  print $Pay010_Dept_Id                                       (0,50)
  print $Hr_Bus_Unit2                                         (0,64)
  print $Pay010_Pg_Ln_Adl                                     (0,72)
  print $Pay010_Hours                                         (0,101)
  print $Pay010_Erns                                          (0,113)
  print $Pay010_Hours                                         (0,131)
  print $Pay010_Type                                          (0,147)
  print $Pay010_Hours                                         (0,155)
  print $Pay010_Erns                                          (0,167)
end-heading


begin-procedure Process-Main
  move '*' to $Company

begin-SELECT
A.COMPANY    () on-break print=never level=1 procedure=Company-Change
A.PAY_END_DT () on-break print=never level=2 procedure=PayEndDate-Change
A.PAYGROUP   () on-break print=never level=3 procedure=PayGroup-Change

  move &A.Company    to $Company
  move &A.PayGroup   to $PayGroup
  move &A.Pay_End_Dt to $PayEndDate

  move 'N'           to $Earnings_Found

  do Get-Hours-Earnings

  if $Earnings_Found = 'N'
    print $Pay010_No_DataTxt                       (+2,2)
    print &A.PayGroup                              (0,+2)
  end-if

FROM  PS_PAY_CALENDAR A
WHERE A.RUN_ID     = $RunID
ORDER BY A.COMPANY,
         A.PAYGROUP,
         A.PAY_END_DT
end-SELECT

  if $company <> '*'
    move 1 to #changeLevel
    move 'Y' to $End
    do Print-Totals
  end-if

end-procedure


begin-procedure Get-Hours-Earnings

begin-SELECT
B.NAME             (2,1,30)
B.EMPLID           (2,35)
B.DEPTID           (2,50)
C.BUSINESS_UNIT    (2,64)
B.PAGE_NUM            (2,72)
B.LINE_NUM            (2,77)
B.OFF_CYCLE
C.REG_HRS+C.REG_EARN_HRS     &Hours    (0,99)   EDIT       B999.99MI
C.REG_PAY+C.REG_HRLY_EARNS   &Earnings (0,108)  EDIT B9,999,999.99MI
C.OT_HRS                               (0,129)  EDIT       B999.99MI
C.ADDL_NBR                                (2,80)   EDIT       B99

  move 'Y'           to $Earnings_Found

  ARRAY-ADD &Hours &Earnings &C.OT_Hrs -
    to Totals(4) total(0) total(1) total(2)

  do Get-Other-Hours-Earnings
  NEXT-LISTING NEED=3

FROM  PS_PAY_LINE B,
      PS_PAY_EARNINGS C
WHERE B.COMPANY    = &A.Company
  AND B.PAYGROUP   = &A.PayGroup
  AND B.PAY_END_DT = &A.Pay_End_Dt
  AND B.SINGLE_CHECK_USE IN ('C', 'N')
  AND C.COMPANY    = &A.Company
  AND C.PAYGROUP   = &A.PayGroup
  AND C.PAY_END_DT = &A.Pay_End_Dt
  AND C.OFF_CYCLE  = B.OFF_CYCLE
  AND C.PAGE_NUM      = B.PAGE_NUM
  AND C.LINE_NUM      = B.LINE_NUM
  AND C.OK_TO_PAY  = 'N'
  AND C.SINGLE_CHECK_USE IN ('C', 'N')
ORDER BY B.DEPTID,
         B.NAME,
         B.EMPLID,
         B.PAGE_NUM,
         B.LINE_NUM,
         C.ADDL_NBR
end-SELECT

end-procedure


begin-procedure Get-Other-Hours-Earnings
begin-SELECT
ERNCD     (0,147)
OTH_HRS   (0,153) EDIT        B999.99MI
OTH_PAY   (0,162) EDIT  B9,999,999.99MI

  ARRAY-ADD &Oth_Hrs &Oth_Pay to TOTALS(4) TOTAL(3) TOTAL(4)
  POSITION (+1)

FROM  PS_PAY_OTH_EARNS
WHERE COMPANY    = $Company
  AND PAYGROUP   = $PayGroup
  AND PAY_END_DT = $PayEndDate
  AND OFF_CYCLE  = &B.Off_Cycle
  AND PAGE_NUM      = &B.PAGE_NUM
  AND LINE_NUM      = &B.LINE_NUM
  AND ADDL_NBR      = &C.ADDL_NBR
end-SELECT
end-procedure

begin-procedure Company-Change
  move 2 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure PayEndDate-Change
  move 3 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure PayGroup-Change
  move 4 to #changeLevel
  do Print-Totals
end-procedure

begin-procedure Print-Totals
  move 4 to #totalRow

  while #totalRow >= #changeLevel

    if #current-line > 55  !don't split a total series across pages
      new-page
    end-if

    move #totalRow to #rollRow
    subtract 1 from #rollRow
    get $TotalName from Totals(#totalRow) TotalName
    print $TotalName (+2,72)
    move 0 to #i

    while #i <= 4
      get #total from Totals(#totalRow) total(#i)
      get #startCol from Totals(0) startCol(#i)
      do Format-Number(#total, $out, '999,999,999.99mi')
      print $out (0,#startCol)
      array-add #total to Totals(#rollRow) total(#i)
      put 0 into Totals(#totalRow) total(#i)
      add 1 to #i
    end-while

    subtract 1 from #totalRow
  end-while

  if $End = 'Y'
    do Reset
  end-if

  new-page
end-procedure


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#Include 'reset1.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrctl2.sqc'  !Get-Run-Control procedure
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
