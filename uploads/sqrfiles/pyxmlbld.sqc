!***********************************************************************
!  pyxmlbld.sqc:  Builds XML Elements                                  *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
! Copyright (C) 1988, 2011, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      !
!          $Date:  2011/09/13:16:58:11                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  860824                                              !
!                                                                      !
!***********************************************************************
!                                                                      !
! Call Build-XML-Line for complete XML element.                        !
! Call XML-Open-Tag to start complex elements (groupings).             !
! Call XML-Close-Tag to terminate complex elements.                    !
!**********************************************************************!

begin-procedure Build-XML-Line($xmlTagIn, $xmlValueIn, $xmlEndFlag, #FNum, #FNum2, $UserFlag)
   
   let $xmlElement = ''
!   let $xmlValueIn = ltrim(rtrim($xmlValueIn, ' '), ' ')
   do Convert-Special-Chars($xmlValueIn, $xmlValueOut)
   let $xmlValueIn = $xmlValueOut
   
   do XML-Open-Tag($xmlTagIn, $xmlTagOut)
   let $xmlElement = $xmlElement || $xmlTagOut || $xmlValueIn
   
   if $xmlEndFlag = 'Y'
       do XML-Close-Tag($xmlTagIn, $xmlTagOut)
   else
       let $xmlTagOut = ''
   end-if
   
   let $xmlElement = $xmlElement || $xmlTagOut
   
   if #FNum <> 0
      do Write-XML-Line(#FNum, $xmlElement)
   end-if
   
   if #FNum2 <> 0 and $UserFlag = 'Y'
      do Write-XML-Line(#FNum2, $xmlElement)
   end-if
   
end-procedure

begin-procedure XML-Open-Tag($xmlTagIn,:$xmlTagOut)
   let $xmlTagOut  = ''
   let $xmlTagOpen  = '<'
   let $xmlTagClose = '>'

   let $xmlTagIn = ltrim(rtrim($xmlTagIn, ' '), ' ')
   
   let $xmlTagOut = $xmlTagOpen || $xmlTagIn || $xmlTagClose
   
end-procedure

begin-procedure XML-Close-Tag($xmlTagIn,:$xmlTagOut)
   let $xmlTagOut  = ''
   let $xmlTagOpen  = '</'
   let $xmlTagClose = '>'

   let $xmlTagIn = ltrim(rtrim($xmlTagIn, ' '), ' ')
   
   let $xmlTagOut = $xmlTagOpen || $xmlTagIn || $xmlTagClose
   
end-procedure

begin-procedure Convert-Special-Chars($string_in, :$string_out)

  let $string_in   = replace($string_in, '&', '&amp;')
  let $string_in   = replace($string_in, '"', '&quot;')
  let $string_in   = replace($string_in, '<', '&lt;')
  let $string_in   = replace($string_in, '>', '&gt;')
  let $string_in   = replace($string_in, '''', '&apos;')

  let $string_out  = $string_in
end-procedure

begin-procedure Write-XML-Line(#Fnum, $xmlLine)
   
   write #Fnum from $xmlLine:200
   
end-procedure

begin-procedure Open-XML-File($FName, #FNum, :#FStat)
   
   let $FName = Rtrim(LTRIM($FName, ' '), ' ') 
   let $FName = '{IMPORTPREFIX}' || $FName || '{IMPORTSUFFIX}'

   open $FName as #FNum for-writing
         record=200:vary status = #FStat ENCODING = UTF-8
         
   if #FStat = 0
       let $xmlLine = '<?xml version="1.0" encoding="UTF-8"?>'
       do Write-XML-Line(#FNum, $xmlLine)
   end-if

end-procedure

begin-procedure Close-XML-File(#Fnum)

   close #Fnum

end-procedure