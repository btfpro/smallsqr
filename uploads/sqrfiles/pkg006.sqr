!***********************************************************************
!  PKG006:      Salary Packaging FBT Rconciliation Report              *
!                                                                      *
!  Description: Informational Report regarding the FBT Components
!***********************************************************************

!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:15:55                                 
!       $Release:  HR9                                                 
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

begin-setup

#include 'setenv.sqc'    !Set environment
#Include 'ptset02.sqc'  ! Landscape Printer and page-size initialization

end-setup

begin-report
  do Init-DateTime
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report


begin-heading 9
  #include 'stdhdg01.sqc'
  if $Company > ' '
     print 'Company:' (+1,1)
     print $Company   (0,+2)
  else
    print 'Paygroup:' (+1,1)
    print $GP_Paygroup  (0,+2)
  end-if

  print $Header1_1   (+2,1,40)
  print $Header1_2   (0,+2,11)
  print $Header1_3   (0,+2,30)
  print $Header1_4   (0,+2,3)
  print $Header1_5   (0,+5,32)
  print $Header1_6   (0,+5,32)

  print $Header2_1   (+1,1,1)
  print $Header2_2   (0,+1,10)
  print $Header2_3   (0,+1,2)
  print $Header2_4   (0,+1,10)
  print $Header2_5   (0,+1,1)
  print $Header2_6   (0,103,32)
  print $Header2_7   (0,+5,32)

  print $Header3_1   (+1,100,15)
  print $Header3_2   (0,+2,15)
  print $Header3_1   (0,+5,15)
  print $Header3_2   (0,+2,15)

end-heading

!**************************************************************************
!
! Procedure: Init-Report
!
! Description: Initialise header and run control variables.
!
!**************************************************************************
begin-procedure Init-Report

  move 'PKG006' to $ReportID
  move 'Salary Packaging FBT Reconciliation Report' to
       $ReportTitle
  display $ReportTitle

  do Stdapi-Init
  display '$prcs_process_instance: ' noline
  display $prcs_process_instance

  if $prcs_process_instance = ''
    ! no SQRW prompt
  else
    do Select-Parameters
    let $Company = $RC.Company
    if $RC.GP_Paygroup > ' '
       let $GP_Paygroup = $RC.GP_Paygroup
       let $Company     = ' '
    else
       let $GP_Paygroup = '&&&&'
    end-if
    let $YearCd = $RC.YearCd
  end-if

end-procedure

!**************************************************************************
!
! Procedure: Process-Main
!
! Description: Main processing section
!
!**************************************************************************
begin-procedure Process-Main

  ! do Get-PSOPTIONS
   do Calculate-FBT-Period

   do Format-DateTime($FBT_Begin_Date,$FBT_Begin_YR,{DEFDMY},'','')
   do Format-DateTime($FBT_End_Date,$FBT_End_YR,{DEFDMY},'','')

   let $Header1_1 = 'Type of benefits provided'
   let $Header1_2 = 'EmplId'
   let $Header1_3 = 'Name'
   let $Header1_4 = 'Rcd'
   let $Header1_5 = 'Gross Taxable value of benefits'
   let $Header1_6 = 'Gross Taxable value of benefits'
   let $Header2_1 = '('
   let $Header2_2 = $FBT_Begin_YR
   let $Header2_3 = 'to'
   let $Header2_4 = $FBT_End_YR
   let $Header2_5 = ')'
   let $Header2_6 = '($ Per Employee)'
   let $Header2_7 = '($ Per Component)'
   let $Header3_1 = 'Budget'
   let $Header3_2 = 'Actual'

   do Identify-Components

   print 'Budget'                                        (+3,100,15)
   print 'Actual'                                        (0,+2,15)
   print ' Total for the FBT Year '                      (+2,35)
   print $Yearcd                                         (0,0,4)
   print #Prt_Tot_Budget                                 (0,94,15)  edit ($$,$$$,$$9.99)
   print #Prt_Tot_Actual                                 (0,+2,15)  edit ($$,$$$,$$9.99)

end-procedure

!**************************************************************************
!
! Procedure: Calculate-FBT-Period
!
! Description: This procedure will calculate/define the period for the
!  FBT year ( 01/04 - 31/03 )
!**************************************************************************
begin-procedure Calculate-FBT-Period

  let #FBT_Begin_Year = to_number($YearCd) - 1
  let $FBT_Begin_Date = to_char (#FBT_Begin_Year) ||'0401'
  let $FBT_End_Date   = $YearCd ||'0331'

  do Format-DateTime($FBT_Begin_Date,$FBT_Begin_Date,{DEFCMP},'','native')
  do Format-DateTime($FBT_End_Date,$FBT_End_Date,{DEFCMP},'','native')
  do Convert-To-DTU-Date($FBT_End_Date, $FBT_End_Dt_dtu)
  do Convert-To-DTU-Date($FBT_Begin_Date, $FBT_Begin_Dt_dtu)
  do Format-DateTime($FBT_Begin_Date,$FBT_Begin_Dt_cmp,{DEFCMP},'','')
  do Format-DateTime($FBT_End_Date,$FBT_End_Dt_cmp,{DEFCMP},'','')

end-procedure

!**************************************************************************
!
! Procedure: Identify-Components
!
! Description: This procedure will Identify the valid Components for the
!   FBT Reporting
!
!**************************************************************************
begin-procedure Identify-Components

  let $sql-statement = 'SELECT PKG_MDL_BSE_CMP2'

begin-SELECT
CMP.COMPONENT  (+1,1,8)  on-break skiplines=2 level=1 after=Print-Component-Total
CMP.DESCR      (0,+2,30) on-break
JOB.EMPLID     (0,+2,11) on-break skiplines=1 level=2 after=Initialize-Employee
PER.NAME       (0,+2,30) on-break
JOB.EMPL_RCD   (0,+2,3)  on-break skiplines=1 level=3 after=Initialize-Employee
SUM(EXP.BUDGET_AMT)  &Sum_Bud
SUM(EXP.EXPENSE_AMT) &Sum_Exp
SUM(EXP.TAXABLE_AMT) &Sum_Txb

    let #Emp_Taxable = &Sum_Txb
    let #Emp_Actual  = &Sum_Exp
    let #Emp_Budget  = &Sum_Bud

    do Calculate-FBT-Amount

    print #Prt_Emp_Budget                (0,+3,15) edit ($$,$$$,$$9.99)
    print #Prt_Emp_Actual                (0,+2,15) edit ($$,$$$,$$9.99)

FROM PS_PKG_BSE_CMP_TBL CMP,
     PS_PKG_EXP_PER_TBL EXP,
     PS_JOB JOB,
     PS_PERSONAL_VW PER

WHERE CMP.COMPONENT_TYPE LIKE 'F%'
  AND CMP.EFFDT = (SELECT MAX(CMP1.EFFDT)
                     FROM PS_PKG_BSE_CMP_TBL CMP1
                     WHERE CMP1.COMPONENT_TYPE = CMP.COMPONENT_TYPE
                       AND CMP1.EFFDT <= $FBT_End_Date)
  AND CMP.EFF_STATUS = 'A'
  AND EXP.COMPONENT = CMP.COMPONENT
  AND EXP.ADD_COMPONENT = ' '
  AND EXP.PERIOD_END >= $FBT_Begin_Date
  AND EXP.PERIOD_END <= $FBT_End_Date
  AND JOB.EMPLID = EXP.EMPLID
  AND JOB.EMPL_RCD = EXP.EMPL_RCD
  AND JOB.EFFDT = (SELECT MAX(JOB1.EFFDT)
                          FROM PS_JOB JOB1
                          WHERE JOB1.EMPLID = JOB.EMPLID
                            AND JOB1.EMPL_RCD= JOB.EMPL_RCD
                            AND JOB1.EFFDT <= EXP.PERIOD_END)
  AND JOB.EFFSEQ = (SELECT MAX(JOB2.EFFSEQ)
                          FROM PS_JOB JOB2
                          WHERE JOB2.EMPLID = JOB.EMPLID
                            AND JOB2.EMPL_RCD = JOB.EMPL_RCD
                            AND JOB2.EFFDT = JOB.EFFDT)
  AND (JOB.COMPANY = $Company 
    OR JOB.GP_PAYGROUP = $GP_Paygroup )
  AND PER.EMPLID = JOB.EMPLID
GROUP BY CMP.COMPONENT, JOB.EMPLID, JOB.EMPL_RCD, CMP.DESCR, PER.NAME
ORDER BY CMP.COMPONENT, JOB.EMPLID, JOB.EMPL_RCD
end-SELECT

  Print '** End of Report **' (+2, 70)

end-procedure

!**************************************************************************
!
! Procedure: Calculate-FBT-Amount
!
!**************************************************************************
begin-procedure Calculate-FBT-Amount

    let #Prt_Emp_Budget = #Emp_Taxable

    if #Emp_Budget <> 0
       let #Prt_Emp_Actual = #Emp_Actual
                           * #Emp_Taxable
                           / #Emp_Budget
    else
       if #Emp_Taxable <> 0
          let #Prt_Emp_Actual = #Emp_Actual
                              + #Emp_Taxable
       else
          let #Prt_Emp_Actual = 0
       end-if
    end-if

    let #Prt_Comp_Budget = #Prt_Comp_Budget + #Prt_Emp_Budget
    let #Prt_Comp_Actual = #Prt_Comp_Actual + #Prt_Emp_Actual

    let #Prt_Tot_Budget = #Prt_Tot_Budget + #Prt_Emp_Budget
    let #Prt_Tot_Actual = #Prt_Tot_Actual + #Prt_Emp_Actual

end-procedure


!**************************************************************************
!
! Procedure: Print-Component-Total
!
!**************************************************************************
begin-procedure Print-Component-Total

    print #Prt_Comp_Budget               (0,+5,15) edit ($$,$$$,$$9.99)
    print #Prt_Comp_Actual               (0,+2,15) edit ($$,$$$,$$9.99)

    let #Prt_Comp_Budget = 0
    let #Prt_Comp_Actual = 0

end-procedure


!**************************************************************************
!
! Procedure: Initialize-Employee
!
!**************************************************************************
begin-procedure Initialize-Employee

    let #Prt_Emp_Budget = 0
    let #Prt_Emp_Actual = 0

end-procedure


 ! #Include 'getpsopt.sqc'  !Get-PSOPTIONS procedure
#Include 'pkgrnctl.sqc'  !Select-Parameters procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'stdapi.sqc'    !Routines to Update Run Status

