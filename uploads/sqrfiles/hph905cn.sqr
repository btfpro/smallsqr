!***********************************************************************
!  HPH905CN.SQR:  FT ACADEMIC TEACHING TABLE VERIFICATION REPORT       *
!***********************************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!   This module contains confidential and proprietary information      *
!   of Oracle; it is not to be copied, reproduced, or transmitted      *
!   in any form, by any means, in whole or in part, nor is it to       *
!   be used for any purpose other than that for which it is            *
!   expressly provided under the applicable license agreement.         *
!                                                                      *
!   Copyright (C) 2006 Oracle. All Rights Reserved.                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:13:21:39                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!                                                                      *
! Report Description: This report will produce the summary table       *
! verification report from the FT academic teaching survey table.      *
!                                                                      *
!  Last Modified July 24 Platform Testing Issues                       *
!              Count Field not valid most platforms                    *
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Education & Government.         *
!***********************************************************************

#include 'setenv.sqc'
#include 'setup32.sqc'

#define col1 1
#define col2 36
#define col3 44
#define col4 64
#define col5 72
#define col6 95
#define col7 105

!***********************************************************************
begin-report

  do HOUSEKEEPING
  do MAINLINE
  do WRAPUP

end-report

!***********************************************************************
! HEADING
! Begins a heading section.
!***********************************************************************
begin-heading 9

  ! Print top page heading
  #include 'stdhdg01.sqc'         ! for standard heading and AsOfDate
  print $Date_Heading             (-1) center
  print $ReportTitle2             (+2) center
  print ''                        (+2,,)
  print ' '                       (+1,{col1},34)
  print 'Female'                  (,{col2},7)
  print 'Female'                  (,{col3},19)
  print ' Male'                   (,{col4},7)
  print 'Male'                    (,{col5},22)
  print '  Total'                 (,{col6},19)
  print ' Total'                  (,{col7},)
  print 'Rank'                    (+1,{col1},34)
  print 'Count'                   (,{col2},7)
  print 'Average Salary'          (,{col3},19)
  print ' Count'                  (,{col4},7)
  print 'Average Salary'          (,{col5},22)
  print '  Count'                 (,{col6},19)
  print ' Average Salary'         (,{col7},)
  print '-'                       (+1,{col1},30) fill
  print '-'                       (,{col2},6) fill
  print '-'                       (,{col3},14) fill
  print '-'                       (,{col4},6) fill
  print '-'                       (,{col5},14) fill
  print '-'                       (,{col6},7) fill
  print '-'                       (,{col7},15) fill
  print ''                        (+1,1)

end-heading


!***********************************************************************
! HOUSEKEEPING
! Performs the application initializations.  Formats variables for use.
! Calls the procedures to get input parameters.
!***********************************************************************
begin-procedure HOUSEKEEPING

  do INIT-DATETIME
  do INIT-NUMBER
  do GET-CURRENT-DATETIME

  display 'Report Began: ' noline
  display &SysDateTime
  display ''

  do SELECT-PARAMETERS               ! Get E&G parameters
  do SELECT-REPORT-PARAMETERS        ! Get StatsCan parameters

  move 'Academic Teaching Survey Table Verification Report' to $ReportTitle
  move '' to $ReportTitle2
  move 'HPH905CN' to $ReportId

  display $ReportID noline
  display ' - ' noline
  display $ReportTitle noline
  display $Date_Heading
  display ''
  display $ReportTitle2
  display ''

  do STDAPI-INIT

end-procedure HOUSEKEEPING

!***********************************************************************
! GET-VALUES
!***********************************************************************
begin-procedure GET-VALUES
end-procedure GET-VALUES


!***********************************************************************
! GET-PARAMETER-VALUES
! Gets the run control parameters.
!***********************************************************************
begin-procedure GET-PARAMETER-VALUES

  do CONVERT-TO-DTU-DATE($FT_Rpt_Start_Dt,$FT_Start_Dtu_Dt)
  do CONVERT-TO-DTU-DATE($FT_Rpt_End_Dt,$FT_End_Dtu_Dt)

  do DTU-PARSE-DATE($FT_Start_Dtu_Dt,#dtu_startyr, #dtu_mo, #dtu_da)
  do DTU-PARSE-DATE($FT_End_Dtu_Dt,#dtu_endyr, #dtu_mo, #dtu_da)
  let #CurrRpt_Yr = #dtu_startyr

  let $Date_Heading = 'From ' || edit(#dtu_startyr,'0000') || ' - ' || edit(#dtu_endyr,'0000')

end-procedure GET-PARAMETER-VALUES


!***********************************************************************
! MAINLINE
! Performs application specific record processing.
!***********************************************************************
begin-procedure MAINLINE

  let #i = 1

  while #i < 5

     let #Rec_Found = 0

     evaluate #i

        when = 1

           let $ReportTitle2 = 'Full-Time Staff Salaries - Including Admin Posts and Medical/Dental'
           let $Procedure = 'For Report 1'
           move 'in (''0'',''2'',''4'',''5'',''7'',''9'')' to $WhereClause1
           move 'in (''0'',''1'',''2'',''9'')' to $WhereClause2
           move '<> ''0''' to $WhereClause3

        when = 2

           let $ReportTitle2 = 'Full-Time Staff Salaries - Including Admin Posts, Excluding Medical/Dental'
           let $Procedure = 'For Report 2'
           move 'in (''0'',''2'',''4'',''5'',''7'',''9'')' to $WhereClause1
           move '= ''9''' to $WhereClause2
           move '<> ''0''' to $WhereClause3


        when = 3

           let $ReportTitle2 = 'Full-Time Staff Salaries - Excluding Senior Admin Duties, Including Medical/Dental'
           let $Procedure = 'For Report 3'
           move 'in (''0'',''6'',''7'',''8'',''9'')' to $WhereClause1
           move 'in (''0'',''1'',''2'',''9'')' to $WhereClause2
           move 'in (''1'',''2'')' to $WhereClause3

        when = 4

           let $ReportTitle2 = 'Full-Time Staff Salaries - Excluding Senior Admin Duties and Medical/Dental'
           let $Procedure = 'For Report 4'
           move 'in (''0'',''6'',''7'',''8'',''9'')' to $WhereClause1
           move '= ''9''' to $WhereClause2
           move 'in (''1'',''2'')' to $WhereClause3

     end-evaluate

     do GET-REPORT-DATA

     let #i = #i + 1

  end-while

end-procedure MAINLINE


!***********************************************************************
! GET REPORT DATA
!***********************************************************************
begin-procedure GET-REPORT-DATA

  let #Males = 0
  let #Females = 0
  let #Male_Salary = 0
  let #Male_Salary_Avg = 0
  let #Female_Salary = 0
  let #Female_Salary_Avg = 0
  let #Total_Count = 0
  let #Total_Salary_Avg = 0
  let #First_Time = 1
  let #First_Line = 1
  let $Prev_Rank = ' '

  let $err-statement1='HPH905CN, Select error - GET-REPORT-DATA ' || $Procedure
  let $err-statement2='Bind Variables: #CURRRPT_YR: '|| edit(#CurrRpt_Yr,'0000') ||
                      ', $WHERECLAUSE1: ' || $WhereClause1 ||
                      ', $WHERECLAUSE2: ' || $WhereClause2 ||
                      ', $WHERECLAUSE3: ' || $WhereClause3

begin-select on-error=Error-Display
FTS1.HP_STATS_RANK_CD
FTS1.SEX
SUM(FTS1.HP_ACTUAL_SALARY)  &Sum_Salary
SUM(FTS1.HP_ADMIN_STIPENDS) &Sum_Stipends

   ! ** Count total lines for the gender selected ***
   do GENDER-COUNT

   let #Rec_Found = 1

   if #First_Time

      do GET-RANK-DESCR

      let #First_Time = 0
      let $Prev_Rank = &FTS1.HP_STATS_RANK_CD

   end-if

   if &FTS1.HP_STATS_RANK_CD <> $Prev_Rank

      let #Total_Count = #Males + #Females

     if #Total_Count = 0
        let #Total_Salary_Avg = #Male_Salary + #Female_Salary
     else
        let #Total_Salary_Avg = (#Male_Salary + #Female_Salary) / #Total_Count
     end-if

      do PRINT-DETAIL-LINE

      let #Males = 0
      let #Females = 0
      let #Male_Salary = 0
      let #Male_Salary_Avg = 0
      let #Female_Salary = 0
      let #Female_Salary_Avg = 0
      let #Total_Count = 0
      let #Total_Salary = 0

      do GET-RANK-DESCR

   end-if

   evaluate &FTS1.SEX

     when = 'M'

         let #Males = &Gender_Count
         let #Male_Salary = &Sum_Salary + &Sum_Stipends

         if #Males = 0
             let #Male_Salary_Avg = #Male_Salary
         else
             let #Male_Salary_Avg = #Male_Salary / #Males
         end-if

      when = 'F'

         let #Females = &Gender_Count
         let #Female_Salary = &Sum_Salary + &Sum_Stipends

         if #Females = 0
             let #Female_Salary_Avg = #Female_Salary
         else
             let #Female_Salary_Avg = #Female_Salary / #Females
         end-if

   end-evaluate


   let $Prev_Rank = &FTS1.HP_STATS_RANK_CD


 FROM PS_HP_FT_SURVEY FTS1
WHERE FTS1.HP_STATS_CAN_YR = #CurrRpt_Yr
  AND FTS1.HP_MM_ON_UNPAID_LV = 0
  AND FTS1.HP_STATS_RESP_CD [$WhereClause1]
  AND FTS1.HP_MED_DENT_CAT [$WhereClause2]
  AND FTS1.HP_STATS_RANK_CD [$WhereClause3]
GROUP BY FTS1.HP_STATS_RANK_CD,FTS1.SEX
ORDER BY FTS1.HP_STATS_RANK_CD,FTS1.SEX
end-SELECT

  if not #Rec_Found

     print 'NO RECORDS FOUND FOR REPORTING YEAR' (+1,,) center

  else

     let #Total_Count = #Males + #Females

     if #Total_Count = 0
        let #Total_Salary_Avg = #Male_Salary + #Female_Salary
     else
        let #Total_Salary_Avg = (#Male_Salary + #Female_Salary) / #Total_Count
     end-if

     do PRINT-DETAIL-LINE

  end-if

  if #i < 4
     new-page
  end-if


end-procedure GET-REPORT-DATA

!***********************************************************************
! GENDER-COUNT
!***********************************************************************
begin-procedure GENDER-COUNT

  let $err-statement1='HPH905CN, Select error - GENDER-COUNT ' || $Procedure
  let $err-statement2='Bind Variables: #CURRRPT_YR: '|| edit(#CurrRpt_Yr,'0000') ||
                      ', $WHERECLAUSE1: ' || $WhereClause1 ||
                      ', $WHERECLAUSE2: ' || $WhereClause2 ||
                      ', $WHERECLAUSE3: ' || $WhereClause3

begin-select on-error=Error-Display
COUNT(*)             &Gender_Count
FROM PS_HP_FT_SURVEY FTSCNT
WHERE FTSCNT.HP_STATS_CAN_YR = #CurrRpt_Yr
  AND FTSCNT.HP_MM_ON_UNPAID_LV = 0
  AND FTSCNT.SEX = &FTS1.SEX
  AND FTSCNT.HP_STATS_RESP_CD [$WhereClause1]
  AND FTSCNT.HP_MED_DENT_CAT [$WhereClause2]
  AND FTSCNT.HP_STATS_RANK_CD [$WhereClause3]
end-SELECT


end-procedure GENDER-COUNT


!***********************************************************************
! GET STATS RANK DESCR
!***********************************************************************
begin-procedure GET-RANK-DESCR

  let $Rank_Descr = 'Unknown'

  let $err-statement1='HPH905CN, Select error - GET-RANK-DESCR'
  let $err-statement2='Bind Variables: &FTS1.HP_STATS_RANK_CD: '|| &FTS1.HP_STATS_RANK_CD ||
                      ', $ASOFTODAY: ' || $AsOfToday

begin-select on-error=Error-Display
X.FIELDNAME
X.FIELDVALUE

  let $FieldName = &X.FIELDNAME
  let $FieldValue = &X.FIELDVALUE

  do Read-Translate-Table
! let $Rank_Descr = $XlatLangName
  let $Rank_Descr = $XlatLongName

 FROM PSXLATITEM X
WHERE X.FIELDNAME = 'HP_STATS_RANK_CD'
  AND X.FIELDVALUE = &FTS1.HP_STATS_RANK_CD
  AND X.EFFDT = (SELECT MAX(X1.EFFDT) FROM PSXLATITEM X1
                  WHERE X1.FIELDNAME   = 'HP_STATS_RANK_CD'
                    AND X1.FIELDVALUE  = X.FIELDVALUE
                    AND X1.EFFDT <= $AsOfToday)
  AND X.EFF_STATUS = 'A'
end-SELECT

end-procedure GET-RANK-DESCR


!***********************************************************************
! PRINT REPORT DETAIL LINE
!***********************************************************************
begin-procedure PRINT-DETAIL-LINE

  if #First_Line

     print $Rank_Descr    (+1,{col1},34)
     let #First_Line = 0

  else

     print $Rank_Descr    (+2,{col1},34)

  end-if

  print #Females           (,{col2},) edit 99,999
  print #Female_Salary_Avg (,{col3},) edit 999,999,999.99
  print #Males             (,{col4},) edit 99,999
  print #Male_Salary_Avg   (,{col5},) edit 999,999,999.99
  print #Total_Count       (,{col6},) edit 999,999
  print #Total_Salary_Avg  (,{col7},) edit 9999,999,999.99

end-procedure PRINT-DETAIL-LINE


!***********************************************************************
! WRAPUP
! Updates the reporting period table and ends the report.
!***********************************************************************
begin-procedure WRAPUP

  do UPDATE-RPTNG-PERIOD-TABLE
  do DELETE-RUN-CONTROL
  do RESET
  do STDAPI-TERM

  do GET-CURRENT-DATETIME
  display 'Report ended at: ' NoLine
  display &SysDateTime
  display ''

end-procedure WRAPUP


!***********************************************************************
! DELETE RUN CONTROL                                                   *
! Deletes run control information from run control table.              *
!***********************************************************************
begin-procedure DELETE-RUN-CONTROL

  let $err-statement1 = 'HPH905CN, Delete Error - DELETE-RUN-CONTROL'
  let $err-statement2 = 'Bind Variables: $PRCS_OPRID: '||$Prcs_OprID||
                        ', $PRCS_RUN_CNTL_ID: '||$Prcs_Run_Cntl_ID

begin-SQL On-Error=Error-Display
DELETE FROM PS_RUN_CNTL_EG
WHERE OPRID       = $Prcs_OprID
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-SQL

end-procedure DELETE-RUN-CONTROL


!***********************************************************************
! SQCs                                                                 *
!***********************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#include 'stdapi.sqc'    !Update Process API
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Date math routine
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'stderror.sqc'  !Routine for error display.
#Include 'hprnctl1.sqc'  !Routine for EG parameters
#Include 'egrnctl1.sqc'  !Get E&G run control parameters
