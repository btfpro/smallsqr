!******************************************
!  TAX004:  Multiple Worksite Report      *
!******************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/10/23:13:11:46                                 !
!       $Release:  HR9                                                 !
!      $Revision:  103                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#Include 'setup31.sqc'  !Printer and page-size initialization
#Include 'usarpt.sqc'   !Get USA variables

!***********************************************************************
begin-report
!***********************************************************************


    move 'TAX004'                   to $ReportId
    move 'Multiple Worksite Report' to $ReportTitle

    let $msg = $ReportTitle
    do  Display-Msg

    do Init-DateTime
    do Init-Number
    do Get-Current-DateTime
    do Stdapi-Init

    do Get-Quarter-Dates
    do Show-Period-Covered

    do Delete-Work-Table
    do Delete-Temp-Table
    do Init-Totals-Array
    do Load-Tax-Location-Tbl
    do Load-Min-Empl-Rcd

    do Get-Worksite-Counts
    do Get-Worksite-Wages

    do Get-State-Wage-List-Totals
    do Adjust-Biggest-Worksites

    do Produce-Outputs

    do Delete-Work-Table
    do Stdapi-Term

end-report

!***********************************************************************
begin-heading 8
!***********************************************************************

#Include 'stdhdg02.sqc'

    uppercase $ReportTitle2

    let $w = 'Quarter '||$EffQuarter||', '||$EffYear
    print $w                                (3,0)  center

    let $w = 'Fed EIN:    '||substr($FederalEin,1,2)||'-'||substr($FederalEin,3,7)
    print $w                                (+1,1)

    let $w = rtrim(upper($StateName)||' UI Number: '||$EmployerIdSut,' ')
    print $w                                (0,0)  center

    print 'Worksite (or Trade) Name '       (+2,8)

    print '  Employees in Pay Period'       (0,49)
    print '          Total'                 (0,84)

    print 'Street Address '                 (+1,8)
    print 'Which Includes the 12th of'      (0,49)
    print 'Quarterly Wages'                 (0,84)

    print 'UI-Rpt-Cd Tax-Locatn Short-Desc' (+1,8)

    print $Month1_Name                      (0,51)
    print $Month2_Name                      (0,61)
    print $Month3_Name                      (0,71)
    print '    Of Worksite'                 (0,84)

    print '-------------------------------' (+1,8)
    print '-----     -----     -----'       (0,49)
    print '  -------------'                 (0,84)

end-heading

!***********************************************************************
begin-procedure Get-Quarter-Dates
!***********************************************************************

    if $Prcs_Process_Instance = ''
        input $EffYear     maxlen=4 'Enter Year (1997,1998,etc)'
        input $EffQuarter  maxlen=1 'Enter Quarter (1,2,3,4)'
    else
        do Select-Parameters
        move #RC_Pay.Balance_Year   to $EffYear 9999
        move #RC_Pay.Balance_Qtr    to $EffQuarter 9
    end-if

    let #EffYear       = to_number($EffYear)
    let #EffQuarter    = to_number($EffQuarter)

    evaluate $EffQuarter
        when = '1'
            move '01'       to $1stmonth
            move '02'       to $2ndmonth
            move '03'       to $3rdmonth
            move '31'       to $Lastday
            move 'Jan'      to $Month1_Name
            move 'Feb'      to $Month2_Name
            move 'Mar'      to $Month3_Name
            let  $FirstCountEndDt = $EffYear||'0101'       ! search limits
            let  $LastCountEndDt  = $EffYear||'0430'
            let  $FirstWageEndDt  = TO_CHAR(#EffYear - 1)||'1130'
            let  $LastWageEndDt   = $EffYear||'0410'
            break
        when = '2'
            move '04'       to $1stmonth
            move '05'       to $2ndmonth
            move '06'       to $3rdmonth
            move '30'       to $Lastday
            move 'Apr'      to $Month1_Name
            move 'May'      to $Month2_Name
            move 'Jun'      to $Month3_Name
            let  $FirstCountEndDt = $EffYear||'0401'       ! search limits
            let  $LastCountEndDt  = $EffYear||'0731'
            let  $FirstWageEndDt  = $EffYear||'0228'
            let  $LastWageEndDt   = $EffYear||'0710'
            break
        when = '3'
            move '07'       to $1stmonth
            move '08'       to $2ndmonth
            move '09'       to $3rdmonth
            move '30'       to $Lastday
            move 'Jul'      to $Month1_Name
            move 'Aug'      to $Month2_Name
            move 'Sep'      to $Month3_Name
            let  $FirstCountEndDt = $EffYear||'0701'       ! search limits
            let  $LastCountEndDt  = $EffYear||'1031'
            let  $FirstWageEndDt  = $EffYear||'0531'
            let  $LastWageEndDt   = $EffYear||'1010'
            break
        when = '4'
            move '10'       to $1stmonth
            move '11'       to $2ndmonth
            move '12'       to $3rdmonth
            move '31'       to $Lastday
            move 'Oct'      to $Month1_Name
            move 'Nov'      to $Month2_Name
            move 'Dec'      to $Month3_Name
            let  $FirstCountEndDt = $EffYear||'1001'       ! search limits
            let  $LastCountEndDt  = TO_CHAR(#EffYear + 1)||'0131'
            let  $FirstWageEndDt  = $EffYear||'0830'
            let  $LastWageEndDt   = TO_CHAR(#EffYear + 1)||'0110'
            break
        when-other
            move    ' Eff Quarter Error '  to $Error_Msg
            do Error-Routine
            STOP
    end-evaluate

    if $FirstCountEndDt    <= $FirstWageEndDt
        let $JobBeginDt     = $FirstCountEndDt
    else
        let $JobBeginDt     = $FirstWageEndDt
    end-if

    if $LastCountEndDt     >= $LastWageEndDt
        let $JobEndDt       = $LastCountEndDt
    else
        let $JobEndDt       = $LastWageEndDt
    end-if

    let $Date_Field         =  $EffYear || $1stMonth || '01'
    do Format-DateTime($Date_Field, $First_Day_Of_Quarter, {DEFCMP},'','native')

    let $Date_Field         =  $EffYear || $3rdMonth || $Lastday
    do Format-DateTime($Date_Field, $Last_Day_Of_Quarter, {DEFCMP},'','native')

    let $12thOfMonth1       =  $EffYear || $1stMonth || '12'
    do Format-DateTime($12thOfMonth1, $12th_Of_1st_Month, {DEFCMP},'','native')

    let $12thOfMonth2       =  $EffYear || $2ndMonth || '12'
    do Format-DateTime($12thOfMonth2, $12th_Of_2nd_Month, {DEFCMP},'','native')

    let $12thOfMonth3       =  $EffYear || $3rdMonth || '12'
    do Format-DateTime($12thOfMonth3, $12th_Of_3rd_Month, {DEFCMP},'','native')

    let $Date_Field         =  $FirstCountEndDt
    do Format-DateTime($Date_Field, $FirstCountEndDt, {DEFCMP},'','native')

    let $Date_Field         =  $LastCountEndDt
    do Format-DateTime($Date_Field, $LastCountEndDt, {DEFCMP},'','native')

    let $Date_Field         =  $FirstWageEndDt
    do Format-DateTime($Date_Field, $FirstWageEndDt, {DEFCMP},'','native')

    let $Date_Field         =  $LastWageEndDt
    do Format-DateTime($Date_Field, $LastWageEndDt, {DEFCMP},'','native')

    let $Date_Field         =  $JobBeginDt
    do Format-DateTime($Date_Field, $JobBeginDt, {DEFCMP},'','native')

    let $Date_Field         =  $JobEndDt
    do Format-DateTime($Date_Field, $JobEndDt, {DEFCMP},'','native')

    let $AsOfDate           =  $Last_Day_Of_Quarter

end-procedure

!***********************************************************************
begin-procedure Show-Period-Covered
!***********************************************************************

    do Format-DateTime($First_Day_Of_Quarter, $w1, {DEFDATE}, '', '')
    do Format-DateTime($Last_Day_Of_Quarter, $w2, {DEFDATE}, '', '')
    let $msg = 'Report covers period '||$w1||' thru '||$w2
    do  Display-Msg

    do Format-DateTime($FirstCountEndDt, $w1, {DEFDATE}, '', '')
    do Format-DateTime($LastCountEndDt, $w2, {DEFDATE}, '', '')
    let $msg = 'Examining pay-period-end dates between '||$w1||' and '||$w2||' for counts'
    do  Display-Msg

    do Format-DateTime($FirstWageEndDt, $w1, {DEFDATE}, '', '')
    do Format-DateTime($LastWageEndDt, $w2, {DEFDATE}, '', '')
    let $msg = 'Examining pay-period-end dates between '||$w1||' and '||$w2||' for wages'
    do  Display-Msg

end-procedure

!***********************************************************************
begin-procedure Delete-Work-Table
!***********************************************************************

begin-SQL On-Error=Ignore

DELETE FROM PS_R_TAX004_JOB;

end-SQL

end-procedure

!***********************************************************************
begin-procedure Delete-Temp-Table
!***********************************************************************

begin-SQL On-Error=Ignore

DELETE FROM PS_R_TAX004;

end-SQL

end-procedure

!***********************************************************************
begin-procedure Init-Totals-Array
!***********************************************************************

    create-array name=Totals                -
            size=4                          -
            field=Total_Name:char           -
            field=Workers_Month1:number     -
            field=Workers_Month2:number     -
            field=Workers_Month3:number     -
            field=Qtrly_Wages:number

    put 'Grand Total (All Companies)'  into Totals(1) Total_Name
    put 'Company Total (All States)'   into Totals(2) Total_Name
    put 'State Total'                  into Totals(3) Total_Name

end-procedure

!***********************************************************************
begin-procedure Load-Tax-Location-Tbl
!***********************************************************************

    LOAD-LOOKUP
        name         = TAX_LOCATION1
        table        = PS_TAX_LOCATION1
        key          = TAX_LOCATION_CD
        return_value = STATE
        where=COUNTRY='USA'
        quiet

end-procedure

!***********************************************************************
begin-procedure Load-Min-Empl-Rcd
!***********************************************************************

    let $J_Emplid = ' '

begin-SELECT
PC.EMPLID

    if $J_Emplid      <> &PC.EMPLID
        let $J_Emplid  = &PC.EMPLID
        do Process-Job
    end-if

FROM    PS_PAY_CHECK     PC
WHERE   PC.PAY_END_DT BETWEEN $JobBeginDt
                          AND $JobEndDt
ORDER BY   PC.EMPLID

end-SELECT

end-procedure

!***********************************************************************
begin-procedure Process-Job
!***********************************************************************

begin-SELECT DISTINCT
JD.EFFDT

    let $J_Found  = 'N'
    let $J_Effdt  = &JD.EFFDT

    do Get-Active-Primary-Job

    if $J_Found   = 'N'
        do Get-Active-Secondary-Job
    end-if

    if $J_Found   = 'N'
        do Get-Inactive-Primary-Job
    end-if

    if $J_Found   = 'N'
        do Get-Inactive-Secondary-Job
    end-if

    do Insert-Work-Record

FROM    PS_JOB     JD

WHERE   JD.EMPLID = $J_Emplid
AND    (JD.EFFDT  BETWEEN $JobBeginDt
                      AND $JobEndDt
OR      JD.EFFDT  =
       (SELECT MAX(JD1.EFFDT)
        FROM   PS_JOB JD1
        WHERE  JD1.EMPLID   = JD.EMPLID
        AND    JD1.EMPL_RCD = JD.EMPL_RCD
        AND    JD1.EFFDT   <= $JobBeginDt ) )

ORDER BY   JD.EFFDT

end-SELECT

end-procedure

!***********************************************************************
begin-procedure Get-Active-Primary-Job
!***********************************************************************

begin-SELECT
APJ.EMPL_RCD
APJ.TAX_LOCATION_CD

    let $J_Found           = 'Y'
    let #J_Empl_Rcd        = &APJ.EMPL_RCD
    let $J_Tax_Location_Cd = &APJ.TAX_LOCATION_CD

FROM    PS_JOB     APJ

WHERE   APJ.EMPLID         = $J_Emplid
AND     APJ.EMPL_RCD       =
       (SELECT MIN(APJ1.EMPL_RCD)
        FROM   PS_JOB APJ1
        WHERE  APJ1.EMPLID          = APJ.EMPLID
        AND    APJ1.EFFDT           =
              (SELECT MAX(APJ2.EFFDT)
               FROM   PS_JOB APJ2
               WHERE  APJ2.EMPLID   = APJ1.EMPLID
               AND    APJ2.EMPL_RCD = APJ1.EMPL_RCD
               AND    APJ2.EFFDT   <= $J_Effdt )
        AND    APJ1.EFFSEQ          =
              (SELECT MAX(APJ3.EFFSEQ)
               FROM   PS_JOB APJ3
               WHERE  APJ3.EMPLID   = APJ1.EMPLID
               AND    APJ3.EMPL_RCD = APJ1.EMPL_RCD
               AND    APJ3.EFFDT    = APJ1.EFFDT )
        AND    APJ1.JOB_INDICATOR   = 'P'
        AND    APJ1.EMPL_STATUS     = 'A' )
AND     APJ.EFFDT          =
       (SELECT MAX(APJ4.EFFDT)
        FROM   PS_JOB APJ4
        WHERE  APJ4.EMPLID          = APJ.EMPLID
        AND    APJ4.EMPL_RCD        = APJ.EMPL_RCD
        AND    APJ4.EFFDT          <= $J_Effdt )
AND     APJ.EFFSEQ         =
       (SELECT MAX(APJ5.EFFSEQ)
        FROM   PS_JOB APJ5
        WHERE  APJ5.EMPLID          = APJ.EMPLID
        AND    APJ5.EMPL_RCD        = APJ.EMPL_RCD
        AND    APJ5.EFFDT           = APJ.EFFDT )

end-SELECT

end-procedure

!***********************************************************************
begin-procedure Get-Active-Secondary-Job
!***********************************************************************

begin-SELECT
ASJ.EMPL_RCD
ASJ.TAX_LOCATION_CD

    let $J_Found           = 'Y'
    let #J_Empl_Rcd        = &ASJ.EMPL_RCD
    let $J_Tax_Location_Cd = &ASJ.TAX_LOCATION_CD

FROM    PS_JOB     ASJ

WHERE   ASJ.EMPLID         = $J_Emplid
AND     ASJ.EMPL_RCD       =
       (SELECT MIN(ASJ1.EMPL_RCD)
        FROM   PS_JOB ASJ1
        WHERE  ASJ1.EMPLID          = ASJ.EMPLID
        AND    ASJ1.EFFDT           =
              (SELECT MAX(ASJ2.EFFDT)
               FROM   PS_JOB ASJ2
               WHERE  ASJ2.EMPLID   = ASJ1.EMPLID
               AND    ASJ2.EMPL_RCD = ASJ1.EMPL_RCD
               AND    ASJ2.EFFDT   <= $J_Effdt )
        AND    ASJ1.EFFSEQ          =
              (SELECT MAX(ASJ3.EFFSEQ)
               FROM   PS_JOB ASJ3
               WHERE  ASJ3.EMPLID   = ASJ1.EMPLID
               AND    ASJ3.EMPL_RCD = ASJ1.EMPL_RCD
               AND    ASJ3.EFFDT    = ASJ1.EFFDT )
        AND    ASJ1.EMPL_STATUS     = 'A' )
AND     ASJ.EFFDT          =
       (SELECT MAX(ASJ4.EFFDT)
        FROM   PS_JOB ASJ4
        WHERE  ASJ4.EMPLID          = ASJ.EMPLID
        AND    ASJ4.EMPL_RCD        = ASJ.EMPL_RCD
        AND    ASJ4.EFFDT          <= $J_Effdt )
AND     ASJ.EFFSEQ         =
       (SELECT MAX(ASJ5.EFFSEQ)
        FROM   PS_JOB ASJ5
        WHERE  ASJ5.EMPLID          = ASJ.EMPLID
        AND    ASJ5.EMPL_RCD        = ASJ.EMPL_RCD
        AND    ASJ5.EFFDT           = ASJ.EFFDT )

end-SELECT

end-procedure

!***********************************************************************
begin-procedure Get-Inactive-Primary-Job
!***********************************************************************

begin-SELECT
IPJ.EMPL_RCD
IPJ.TAX_LOCATION_CD

    let $J_Found           = 'Y'
    let #J_Empl_Rcd        = &IPJ.EMPL_RCD
    let $J_Tax_Location_Cd = &IPJ.TAX_LOCATION_CD

FROM    PS_JOB     IPJ

WHERE   IPJ.EMPLID         = $J_Emplid
AND     IPJ.EMPL_RCD       =
       (SELECT MIN(IPJ1.EMPL_RCD)
        FROM   PS_JOB IPJ1
        WHERE  IPJ1.EMPLID          = IPJ.EMPLID
        AND    IPJ1.EFFDT           =
              (SELECT MAX(IPJ2.EFFDT)
               FROM   PS_JOB IPJ2
               WHERE  IPJ2.EMPLID   = IPJ1.EMPLID
               AND    IPJ2.EMPL_RCD = IPJ1.EMPL_RCD
               AND    IPJ2.EFFDT   <= $J_Effdt )
        AND    IPJ1.EFFSEQ          =
              (SELECT MAX(IPJ3.EFFSEQ)
               FROM   PS_JOB IPJ3
               WHERE  IPJ3.EMPLID   = IPJ1.EMPLID
               AND    IPJ3.EMPL_RCD = IPJ1.EMPL_RCD
               AND    IPJ3.EFFDT    = IPJ1.EFFDT )
        AND    IPJ1.JOB_INDICATOR   = 'P' )
AND     IPJ.EFFDT          =
       (SELECT MAX(IPJ4.EFFDT)
        FROM   PS_JOB IPJ4
        WHERE  IPJ4.EMPLID          = IPJ.EMPLID
        AND    IPJ4.EMPL_RCD        = IPJ.EMPL_RCD
        AND    IPJ4.EFFDT          <= $J_Effdt )
AND     IPJ.EFFSEQ         =
       (SELECT MAX(IPJ5.EFFSEQ)
        FROM   PS_JOB IPJ5
        WHERE  IPJ5.EMPLID          = IPJ.EMPLID
        AND    IPJ5.EMPL_RCD        = IPJ.EMPL_RCD
        AND    IPJ5.EFFDT           = IPJ.EFFDT )

end-SELECT

end-procedure

!***********************************************************************
begin-procedure Get-Inactive-Secondary-Job
!***********************************************************************

begin-SELECT
ISJ.EMPL_RCD
ISJ.TAX_LOCATION_CD

    let $J_Found           = 'Y'
    let #J_Empl_Rcd        = &ISJ.EMPL_RCD
    let $J_Tax_Location_Cd = &ISJ.TAX_LOCATION_CD

FROM    PS_JOB     ISJ

WHERE   ISJ.EMPLID         = $J_Emplid
AND     ISJ.EMPL_RCD       =
       (SELECT MIN(ISJ1.EMPL_RCD)
        FROM   PS_JOB ISJ1
        WHERE  ISJ1.EMPLID          = ISJ.EMPLID
        AND    ISJ1.EFFDT           =
              (SELECT MAX(ISJ2.EFFDT)
               FROM   PS_JOB ISJ2
               WHERE  ISJ2.EMPLID   = ISJ1.EMPLID
               AND    ISJ2.EMPL_RCD = ISJ1.EMPL_RCD
               AND    ISJ2.EFFDT   <= $J_Effdt )
        AND    ISJ1.EFFSEQ          =
              (SELECT MAX(ISJ3.EFFSEQ)
               FROM   PS_JOB ISJ3
               WHERE  ISJ3.EMPLID   = ISJ1.EMPLID
               AND    ISJ3.EMPL_RCD = ISJ1.EMPL_RCD
               AND    ISJ3.EFFDT    = ISJ1.EFFDT ) )
AND     ISJ.EFFDT          =
       (SELECT MAX(ISJ4.EFFDT)
        FROM   PS_JOB ISJ4
        WHERE  ISJ4.EMPLID          = ISJ.EMPLID
        AND    ISJ4.EMPL_RCD        = ISJ.EMPL_RCD
        AND    ISJ4.EFFDT          <= $J_Effdt )
AND     ISJ.EFFSEQ         =
       (SELECT MAX(ISJ5.EFFSEQ)
        FROM   PS_JOB ISJ5
        WHERE  ISJ5.EMPLID          = ISJ.EMPLID
        AND    ISJ5.EMPL_RCD        = ISJ.EMPL_RCD
        AND    ISJ5.EFFDT           = ISJ.EFFDT )

end-SELECT

end-procedure

!***********************************************************************
begin-procedure Insert-Work-Record
!***********************************************************************

begin-SQL On-Error=InSert-Error

INSERT INTO PS_R_TAX004_JOB (EMPLID,
                             EFFDT,
                             EMPL_RCD,
                             TAX_LOCATION_CD)
            VALUES          ($J_Emplid,
                             $J_Effdt,
                             #J_Empl_Rcd,
                             $J_Tax_Location_Cd)
end-SQL

end-procedure

!***********************************************************************
begin-procedure Get-Worksite-Counts
!***********************************************************************

begin-SELECT
E.COMPANY
E.EMPLID
E.EARNS_BEGIN_DT
E.EARNS_END_DT
T1.STATE
J1.TAX_LOCATION_CD

#ifdef DB2ALL
DECIMAL(SUM(T1.NLGRS_CUR),15,3) &CUR_EARNS
#else
SUM(T1.NLGRS_CUR) &CUR_EARNS
#endif

    if &CUR_EARNS <= 0
        goto Get-Worksite-Bypass
    end-if

    do Format-DateTime(&E.EARNS_BEGIN_DT, $EarnsBeginDt, {DEFCMP},'','')
    do Format-DateTime(&E.EARNS_END_DT, $EarnsEndDt, {DEFCMP},'','')

    move 0 to #Cnt1
    move 0 to #Cnt2
    move 0 to #Cnt3

    if  $EarnsBeginDt          <= $12thOfMonth1
        if $EarnsEndDt         >= $12thOfMonth1
            if &E.EMPLID       <> $Emplid1
                move &E.EMPLID to $Emplid1
                move 1         to #Cnt1
            end-if
        end-if
    end-if

    if  $EarnsBeginDt          <= $12thOfMonth2
        if $EarnsEndDt         >= $12thOfMonth2
            if &E.EMPLID       <> $Emplid2
                move &E.EMPLID to $Emplid2
                move 1         to #Cnt2
            end-if
        end-if
    end-if

    if  $EarnsBeginDt          <= $12thOfMonth3
        if $EarnsEndDt         >= $12thOfMonth3
            if &E.EMPLID       <> $Emplid3
                move &E.EMPLID to $Emplid3
                move 1         to #Cnt3
            end-if
        end-if
    end-if

    let #Cnt0 = #Cnt1 + #Cnt2 + #Cnt3

    if  #Cnt0 > 0

        let $Company        = &E.COMPANY
        let $SutState       = rtrim(&T1.STATE,' ')
        let $TaxLocationCd  = &J1.TAX_LOCATION_CD

        do Get-Existing-Worksite

        let #Workers_Month1 = #Workers_Month1 + #Cnt1
        let #Workers_Month2 = #Workers_Month2 + #Cnt2
        let #Workers_Month3 = #Workers_Month3 + #Cnt3

        if #RecordExists
            do Update-Existing-Worksite
        else
            do Add-New-Worksite
        end-if
    end-if

Get-Worksite-Bypass:

FROM    PS_PAY_EARNINGS      E,
        PS_PAY_TAX          T1,
        PS_R_TAX004_JOB     J1

WHERE   E.PAY_END_DT        BETWEEN $FirstCountEndDt
                                AND $LastCountEndDt
AND     E.PAY_LINE_STATUS   = 'F'
AND   (($12th_Of_1st_Month BETWEEN E.EARNS_BEGIN_DT
                               AND E.EARNS_END_DT)
OR     ($12th_Of_2nd_Month BETWEEN E.EARNS_BEGIN_DT
                               AND E.EARNS_END_DT)
OR     ($12th_of_3rd_month BETWEEN E.EARNS_BEGIN_DT
                               AND E.EARNS_END_DT))

AND     T1.COMPANY          = E.COMPANY
AND     T1.PAYGROUP         = E.PAYGROUP
AND     T1.PAY_END_DT       = E.PAY_END_DT
AND     T1.OFF_CYCLE        = E.OFF_CYCLE
AND     T1.PAGE_NUM         = E.PAGE_NUM
AND     T1.LINE_NUM         = E.LINE_NUM
AND     T1.SEPCHK           = E.SEPCHK
AND     T1.STATE     NOT LIKE '$U%'
AND     T1.LOCALITY         = ' '
AND     T1.TAX_CLASS        = 'U'

AND     J1.EMPLID           = E.EMPLID
AND     J1.EFFDT            =
       (SELECT MAX(WC.EFFDT)
        FROM   PS_R_TAX004_JOB WC
        WHERE  WC.EMPLID    = J1.EMPLID
        AND    WC.EFFDT    <= E.PAY_END_DT )

GROUP BY    E.COMPANY,
            E.EMPLID,
            E.EARNS_BEGIN_DT,
            E.EARNS_END_DT,
            T1.STATE,
            J1.TAX_LOCATION_CD

end-SELECT

end-procedure

!***********************************************************************
begin-procedure Get-Worksite-Wages
!***********************************************************************

begin-SELECT

K.COMPANY
T2.STATE
J2.TAX_LOCATION_CD

#ifdef DB2ALL
DECIMAL(SUM(T2.NLGRS_CUR),15,3) &CUR_WAGES
#else
SUM(T2.NLGRS_CUR) &CUR_WAGES
#endif

    let $Company       = &K.COMPANY
    let $SutState      = rtrim(&T2.STATE,' ')
    let $TaxLocationCd = &J2.TAX_LOCATION_CD

    do Get-Existing-Worksite

    let #Qtrly_Wages = #Qtrly_Wages + &CUR_WAGES

    if #RecordExists
        do Update-Existing-Worksite
    else
        do Add-New-Worksite
    end-if

FROM   PS_PAY_CHECK      K,
       PS_PAY_TAX       T2,
       PS_R_TAX004_JOB  J2

WHERE  K.PAY_END_DT   BETWEEN $FirstWageEndDt
                          AND $LastWageEndDt
AND    K.CHECK_DT     BETWEEN $First_Day_Of_Quarter
                          AND $Last_Day_Of_Quarter
AND    K.PAYCHECK_STATUS   IN ('F','A','R')

AND    T2.COMPANY           = K.COMPANY
AND    T2.PAYGROUP          = K.PAYGROUP
AND    T2.PAY_END_DT        = K.PAY_END_DT
AND    T2.OFF_CYCLE         = K.OFF_CYCLE
AND    T2.PAGE_NUM          = K.PAGE_NUM
AND    T2.LINE_NUM          = K.LINE_NUM
AND    T2.SEPCHK            = K.SEPCHK
AND    T2.STATE      NOT LIKE '$U%'
AND    T2.LOCALITY          = ' '
AND    T2.TAX_CLASS         = 'U'

AND    J2.EMPLID            = K.EMPLID
AND    J2.EFFDT             =
        (SELECT MAX(WW.EFFDT)
         FROM   PS_R_TAX004_JOB WW
         WHERE  WW.EMPLID   = J2.EMPLID
         AND    WW.EFFDT   <= K.PAY_END_DT )

GROUP BY K.COMPANY,
         T2.STATE,
         J2.TAX_LOCATION_CD

end-SELECT

end-procedure

!***********************************************************************
begin-procedure Get-State-Wage-List-Totals
!***********************************************************************

    move 'ZSWL'       to $LocationState
    move 'SWL-TOTAL'  to $TaxLocationCd
    move '3'          to $OutOfStateLoc

    do Get-Calendar-Year-Id

begin-SELECT
TB.COMPANY
TB.STATE

#ifdef DB2ALL
DECIMAL(SUM(TB.NLGRS_QTD),15,3) &QTRLY_WAGES
#else
SUM(TB.NLGRS_QTD) &QTRLY_WAGES
#endif

    move &TB.COMPANY    to $Company
    let $SutState        = rtrim(&TB.STATE,' ')
    move &QTRLY_WAGES   to #Qtrly_Wages

    do Add-New-Worksite

FROM  PS_TAX_BALANCE    TB, PS_COMPANY_TBL CP

WHERE TB.COMPANY         = CP.COMPANY
AND   CP.EFF_STATUS      = 'A'
AND   CP.EFFDT =
      (SELECT MAX(CP1.EFFDT)
       FROM   PS_COMPANY_TBL CP1
       WHERE  CP1.COMPANY = CP.COMPANY
         AND  CP1.EFFDT  <= $AsOfDate)
AND   CP.TAX_REPORT_TYPE IN ('2', 'P')
AND   TB.BALANCE_ID     = $Calendar_Year_Id
AND   TB.BALANCE_YEAR   = #EffYear
AND   TB.BALANCE_QTR    = #EffQuarter
AND   TB.STATE   NOT LIKE '$U%'
AND   TB.LOCALITY       = ' '
AND   TB.TAX_CLASS      = 'U'

AND   TB.BALANCE_PERIOD =
     (SELECT MAX(BALANCE_PERIOD)
      FROM  PS_TAX_BALANCE
      WHERE EMPLID          = TB.EMPLID
      AND   COMPANY         = TB.COMPANY
      AND   BALANCE_ID      = TB.BALANCE_ID
      AND   BALANCE_YEAR    = TB.BALANCE_YEAR
      AND   BALANCE_QTR     = TB.BALANCE_QTR
      AND   STATE           = TB.STATE
      AND   LOCALITY        = TB.LOCALITY
      AND   TAX_CLASS       = TB.TAX_CLASS)

AND   TB.NLGRS_QTD      > 0

GROUP BY TB.COMPANY,
         TB.STATE
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Adjust-Biggest-Worksites
!***********************************************************************

    move 0  to #StateMwrTotal
    move 0  to #StateSwlTotal
    move 0  to #BiggestSiteTotal

!****************
!  Find each SUT-state's biggest worksite and adjust it so the Multiple
!  Worksite Report (MWR) total equals the State Wage List (SWL) total.
!****************

begin-SELECT
W0.COMPANY       () on-break print=never level=1 after=Apply-Adjustment
W0.SUT_STATE     () on-break print=never level=1 after=Apply-Adjustment
W0.LOCATION_STATE
W0.TAX_LOCATION_CD
W0.QTRLY_WAGES

    move &W0.COMPANY           to $Company
    let $SutState               = rtrim(&W0.SUT_STATE,' ')
    let $LocationState          = rtrim(&W0.LOCATION_STATE,' ')

    if $LocationState           = 'ZSWL'

       move &W0.QTRLY_WAGES    to #StateSwlTotal
    else

       add  &W0.QTRLY_WAGES    to #StateMwrTotal

       if &W0.QTRLY_WAGES           > #BiggestSiteTotal
          move &W0.QTRLY_WAGES     to #BiggestSiteTotal
          move $LocationState      to $BiggestSiteState
          move &W0.TAX_LOCATION_CD to $BiggestSiteCd
       end-if
    end-if

FROM PS_R_TAX004    W0
ORDER BY W0.COMPANY,
         W0.SUT_STATE,
         W0.LOCATION_STATE,
         W0.TAX_LOCATION_CD
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Apply-Adjustment
!***********************************************************************

    let #AdjustmentAmt = #StateSwlTotal - #StateMwrTotal

!****************
!  Save adjustment amount and location code of biggest site in SUT state
!****************

    if #AdjustmentAmt        >= +.01
    or #AdjustmentAmt        <= -.01

       move 'ZADJ'           to $LocationState
       move $BiggestSiteCd   to $TaxLocationCd
       move '3'              to $OutOfStateLoc
       move #AdjustmentAmt   to #Qtrly_Wages

       do Add-New-Worksite

!****************
!  Apply adjustment amount to biggest site
!****************

       move $BiggestSiteState  to $LocationState

       do Get-Existing-Worksite

       let #Qtrly_Wages = #Qtrly_Wages + #AdjustmentAmt

       if #RecordExists
           do Update-Existing-Worksite
       else
           do Add-New-Worksite
       end-if

    end-if

    move ' '  to $BiggestSiteState
    move ' '  to $BiggestSiteCd
    move 0    to #BiggestSiteTotal
    move 0    to #StateMwrTotal
    move 0    to #StateSwlTotal

end-procedure

!***********************************************************************
begin-procedure Get-Existing-Worksite
!***********************************************************************

    LOOKUP TAX_LOCATION1 $TaxLocationCd $LocationState

    if $LocationState <> ''
        let $LocationState = rtrim($LocationState,' ')
    else
        let $LocationState = '  '
    end-if

    if $LastCompany = $Company
        if $LastSutState = $SutState
            if $LastLocationState = $LocationState
                if $LastTaxLocationCd = $TaxLocationCd
                    if #RecordExists
                        goto Get-Existing-Exit
                    end-if
                end-if
            end-if
        end-if
    end-if

    let $LastCompany        = $Company
    let $LastSutState       = $SutState
    let $LastLocationState  = $LocationState
    let $LastTaxLocationCd  = $TaxLocationCd

    let #RecordExists   = 0

    let #Workers_Month1 = 0
    let #Workers_Month2 = 0
    let #Workers_Month3 = 0
    let #Qtrly_Wages    = 0

begin-SELECT
W1.COMPANY
W1.TAX_LOCATION_CD
W1.WORKERS_MONTH1
W1.WORKERS_MONTH2
W1.WORKERS_MONTH3
W1.QTRLY_WAGES

    let #RecordExists   = -1

    let #Workers_Month1 = &W1.WORKERS_MONTH1
    let #Workers_Month2 = &W1.WORKERS_MONTH2
    let #Workers_Month3 = &W1.WORKERS_MONTH3
    let #Qtrly_Wages    = &W1.QTRLY_WAGES

FROM PS_R_TAX004  W1

WHERE  W1.COMPANY          = $Company
AND    W1.SUT_STATE        = $SutState
AND    W1.LOCATION_STATE   = $LocationState
AND    W1.TAX_LOCATION_CD  = $TaxLocationCd

end-SELECT

Get-Existing-Exit:

end-procedure

!***********************************************************************
begin-procedure Update-Existing-Worksite
!***********************************************************************

begin-SQL On-Error=UpDate-Error

UPDATE PS_R_TAX004  SET WORKERS_MONTH1  = #Workers_Month1,
                        WORKERS_MONTH2  = #Workers_Month2,
                        WORKERS_MONTH3  = #Workers_Month3,
                        QTRLY_WAGES     = #Qtrly_Wages

WHERE   COMPANY         = $Company
AND     SUT_STATE       = $SutState
AND     LOCATION_STATE  = $LocationState
AND     TAX_LOCATION_CD = $TaxLocationCd

end-SQL

end-procedure

!***********************************************************************
begin-procedure Add-New-Worksite
!***********************************************************************

    if $OutOfStateLoc      <> '3'               ! test for recon rec
        if $LocationState   = $SutState         ! for sort sequence
            move '0'       to $OutOfStateLoc
        else
            move '1'       to $OutOfStateLoc
        end-if
    end-if

begin-SQL On-Error=InSert-Error

INSERT INTO PS_R_TAX004 (COMPANY,
                        SUT_STATE,
                        LOCATION_STATE,
                        TAX_LOCATION_CD,
                        OUT_OF_STATE_LOC,
                        WORKERS_MONTH1,
                        WORKERS_MONTH2,
                        WORKERS_MONTH3,
                        QTRLY_WAGES)
            VALUES     ($Company,
                        $SutState,
                        $LocationState,
                        $TaxLocationCd,
                        $OutOfStateLoc,
                        #Workers_Month1,
                        #Workers_Month2,
                        #Workers_Month3,
                        #Qtrly_Wages);

end-SQL

  let $LastCompany        = $Company
  let $LastSutState       = $SutState
  let $LastLocationState  = $LocationState
  let $LastTaxLocationCd  = $TaxLocationCd

end-procedure

!***********************************************************************
begin-procedure Produce-Outputs
!***********************************************************************

    do Open-MWR-File

begin-SELECT
W2.COMPANY      () on-break print=never level=1 procedure=Company-Change
W2.SUT_STATE    () on-break print=never level=2 procedure=State-Change
W2.OUT_OF_STATE_LOC
W2.LOCATION_STATE
W2.TAX_LOCATION_CD
W2.WORKERS_MONTH1
W2.WORKERS_MONTH2
W2.WORKERS_MONTH3
W2.QTRLY_WAGES

    let $Company            = &W2.COMPANY
    let $SutState           = rtrim(&W2.SUT_STATE,' ')
    let $LocationState      = rtrim(&W2.LOCATION_STATE,' ')
    let $State              = $SutState         ! for heading
    let $TaxLocationCd      = &W2.TAX_LOCATION_CD

    if &W2.COMPANY         <> $CompanyHold
        let $CompanyHold    = &W2.COMPANY
        do Get-Company-Data
        do Format-Number(&CT.FEDERAL_EIN, $FederalEin, '099999999')
        let $StateHold      = ' '
    end-if

    if $SutState           <> $StateHold
        let $StateHold      = $SutState
        do Get-State-Tax-Data
        let $EmployerIdSut  = &EMPLOYER_ID_SUT
    end-if

!****************
!   Print worksite and write MWR record
!****************

    if $LocationState       < 'ZADJ'
        do Get-Tax-Location-Name        ! in gettxlnm.sqc
        do Get-UI-Report-Code
        do Print-Worksite

        do Write-MWR-Record

        ARRAY-ADD       &W2.WORKERS_MONTH1  -
                        &W2.WORKERS_MONTH2  -
                        &W2.WORKERS_MONTH3  -
                        &W2.QTRLY_WAGES     -
        to Totals(3)    Workers_Month1      -
                        Workers_Month2      -
                        Workers_Month3      -
                        Qtrly_Wages
    else

!****************
!    Use adjustment record to create footnote
!****************

      if $LocationState     = 'ZADJ'
        do Format-Number(&W2.QTRLY_WAGES,$Qtrly_Wages,'999,999,999')
        let $Qtrly_Wages  = ltrim($Qtrly_Wages,' ')
        let $AdjFootnote  = 'NOTE:  An unreconciled difference of $'||  -
            $Qtrly_Wages||' between this report and TAX002'||           -
            $SutState||' has been posted to Tax-Location '||            -
            rtrim(&W2.TAX_LOCATION_CD,' ')||'.'
      end-if
    end-if

FROM PS_R_TAX004    W2
ORDER BY W2.COMPANY,
         W2.SUT_STATE,
         W2.OUT_OF_STATE_LOC,
         W2.LOCATION_STATE,
         W2.TAX_LOCATION_CD
end-SELECT

    let #ChangeLevel    =  1
    let #EndOfWorksites = -1
    do Print-Totals

    do Close-MWR-File

end-procedure

!***********************************************************************
begin-procedure Print-Worksite
!***********************************************************************

    if  $LocationState  <>  $SutState
    and $TaxLocationCd   > ' '
        next-listing need=6
        while #Current-Line < 10
            position (+1,1)
        end-while
        print '*** Out-of-state worksite ***'   (+1,8)
    else
        next-listing need=5
        while #Current-Line < 10
            position (+1,1)
        end-while
    end-if

    print $LocationName                         (+1,8)

    do Format-Number(&W2.WORKERS_MONTH1, $Workers_Month1, '999,999')
    do Format-Number(&W2.WORKERS_MONTH2, $Workers_Month2, '999,999')
    do Format-Number(&W2.WORKERS_MONTH3, $Workers_Month3, '999,999')
    do Format-Number(&W2.QTRLY_WAGES,    $Qtrly_Wages, '999,999,999')

    print $Workers_Month1           (0,47)
    print $Workers_Month2           (0,57)
    print $Workers_Month3           (0,67)
    print $Qtrly_Wages              (0,88)

    print $LocationStreet1          (+1,8)
    if $LocationStreet2 <> ''
        print $LocationStreet2      (+1,8)
    end-if

    let   $work = $LocationCity||', '||$LocationState||'   '||$LocationZip
    print $work                     (+1,8)

    print $UiRptCode                (+1,8)
    print $TaxLocationCd            (0,18)
    print $LocationAbbrv            (0,29)

end-procedure

!***********************************************************************
 begin-procedure Get-UI-Report-Code
!***********************************************************************

    move ' ' to $UiRptCode

begin-SELECT
U.UI_RPT_CODE

    move &U.UI_RPT_CODE to $UiRptCode

FROM PS_CO_UI_RPTCD_TBL U

WHERE U.COMPANY         = $Company
  AND U.LOCATION        = $TaxLocationCd
  AND U.EFFDT           =
     (SELECT MAX(EFFDT)
        FROM PS_CO_UI_RPTCD_TBL
       WHERE COMPANY    = U.COMPANY
         AND LOCATION   = U.LOCATION
         AND EFFDT     <= $AsOfDate )
end-SELECT

end-procedure

!***********************************************************************
begin-procedure Open-MWR-File
!***********************************************************************

    let $RefYy      = substr($EffYear,3,2)

#ifdef OS400
    let $FileId     = '{IMPORTPREFIX}TAX004(T'||$RefYy||$EffQuarter||')'
#else
    let $FileId     = '{IMPORTPREFIX}TAX004.'||$RefYy||$EffQuarter
#end-if

    open $FileId   as 10  for-writing
            record  = 350:fixed
            status  = #error10
    if #error10     = 0
        let #open10 = -1
    else
        let $msg    = 'Open error on '||$FileId
        do  Display-Msg
        STOP QUIET
    end-if

end-procedure

!***********************************************************************
begin-procedure Write-MWR-Record
!***********************************************************************

    let $StateAbbrev = rtrim(&W2.SUT_STATE,' ')
    do Get-FIPS-Code

    let $w = rtrim(translate($EmployerIdSut,'#&*-,./','       '),' ')
    unstring $w by ' ' into $w1 $w2 $w3 $w4 $w5 $w6 $w7 $w8
    string $w1 $w2 $w3 $w4 $w5 $w6 $w7 $w8 by '' into $w
    let #l = length($w)                 ! may have alpha
    if #l < 10
        let $EmployerIdSut10 = substr('0000000000',1,10 - #l)||$w
    else
        let $EmployerIdSut10 = substr($w,1,10)
    end-if

    let $w = rtrim(translate($UiRptCode,'#&*-,./','       '),' ')
    unstring $w by ' ' into $w1 $w2 $w3 $w4 $w5
    string $w1 $w2 $w3 $w4 $w5 by '' into $w
    let #l = length($w)
    if #l < 5                           ! may have alpha
        let $UiRptCode5     = substr('00000',1,5 - #l)||$w
    else
        let $UiRptCode5     = substr($w,1,5)
    end-if

    let $LocationName       = upper($LocationName)
    let $LocationStreet1    = upper($LocationStreet1)
    let $LocationCity       = upper($LocationCity)

    let $w = rtrim(translate($LocationZip,'#&*-,./','       '),' ')
    unstring $w by ' ' into $Zip5 $Zip4
    let $w                  = '0000'||$Zip4
    let $Zip4               = substr($w,length($w) - 3,4)

    let $LegalName          = rtrim(upper($CompanyName),' ')
    if  $LegalName          = rtrim($LocationName,' ')
        let $LegalName      = ' '
    end-if

    let $WorksiteDesc       = rtrim(upper($TaxLocationCd),' ')
    let $LocationAbbrv      = rtrim(upper($LocationAbbrv),' ')
    if  $WorksiteDesc      <> $LocationAbbrv
        let $WorksiteDesc   = $WorksiteDesc||' '||$LocationAbbrv
    end-if

    do Format-Number(&W2.WORKERS_MONTH1, $Workers_Month1, '099999')
    do Format-Number(&W2.WORKERS_MONTH2, $Workers_Month2, '099999')
    do Format-Number(&W2.WORKERS_MONTH3, $Workers_Month3, '099999')
    do Format-Number(&W2.QTRLY_WAGES,    $Qtrly_Wages, '0999999999')

    if #open10
        write 10 from
            '02':2                      !   1 -   2  Program Code
            '1':1                       !   3 -   3  Record Type
            $FipsCode:2                 !   4 -   5  Reference State
            $EmployerIdSut10:10         !   6 -  15  UI Account Number
            $UiRptCode5:5               !  16 -  20  Reporting Unit Number
            $FederalEin:9               !  21 -  29  EIN
            $LocationName:35            !  30 -  64  Worksite (or Trade) Name
            $LocationStreet1:35         !  65 -  99  Worksite Address
            $LocationCity:30            ! 100 - 129  Worksite City
            $LocationState:2            ! 130 - 131  Worksite State
            $Zip5:5                     ! 132 - 136  Worksite ZIP
            $Zip4:4                     ! 137 - 140  Worksite +4
            '00':2                      ! 141 - 142  Delivery-Point Barcode
            '  ':2                      ! 143 - 144  Primary Comment Code
            '  ':2                      ! 145 - 146  Secondary Comment Code
            '  ':2                      ! 147 - 148  Third Comment Code
            $EffYear:4                  ! 149 - 152  Reference yyyy
            $EffQuarter:1               ! 153 - 153  Reference q
            $LegalName:35               ! 154 - 188  Legal Name
            $WorksiteDesc:35            ! 189 - 223  Worksite Description
            $Workers_Month1:6           ! 224 - 229  Month 1 Employment
            $Workers_Month2:6           ! 230 - 235  Month 2 Employment
            $Workers_Month3:6           ! 236 - 241  Month 3 Employment
            $Qtrly_Wages:10             ! 242 - 251  Quarterly Wages
            ' ':50                      ! 252 - 301  Comments
            ' ':21                      ! 302 - 322  EDI Center Field
            ' ':28                      ! 323 - 350  Reserved

        let #MwrRecCnt = #MwrRecCnt + 1

    end-if

end-procedure

!***********************************************************************
begin-procedure Get-FIPS-Code
!***********************************************************************

    if $UspsCodes      = ''
        let $UspsCodes = 'AL AK AZ AR CA CO CT DE DC FL GA HI ID IL '|| -
                         'IN IA KS KY LA ME MD MA MI MN MS MO MT NE '|| -
                         'NV NH NJ NM NY NC ND OH OK OR PA PR RI SC '|| -
                         'SD TN TX UT VT VA VI WA WV WI WY XX'
        let $FipsCodes = '01 02 04 05 06 08 09 10 11 12 13 15 16 17 '|| -
                         '18 19 20 21 22 23 24 25 26 27 28 29 30 31 '|| -
                         '32 33 34 35 36 37 38 39 40 41 42 72 44 45 '|| -
                         '46 47 48 49 50 51 78 53 54 55 56 00'
    end-if

    let #UspsIdx    = 1
    let $FipsCode   = ''

    while $FipsCode         = ''
        let $UspsCode       = substr($UspsCodes,#UspsIdx,2)
        if  $UspsCode       = $StateAbbrev
        or  $UspsCode       = 'XX'
            let $FipsCode   = substr($FipsCodes,#UspsIdx,2)
        else
            let #UspsIdx    = #UspsIdx + 3
        end-if
    end-while

end-procedure

!***********************************************************************
begin-procedure Close-MWR-File
!***********************************************************************

    if #open10
        close 10
    end-if

    do Format-Number(#MwrRecCnt, $w, '99,9999')
    let $msg =  ' '||ltrim($w,' ')||' MWR records are in '||$FileId
    do  Display-Msg

end-procedure

!***********************************************************************
begin-procedure Company-Change
!***********************************************************************

    let #ChangeLevel    = 2
    do Print-Totals

end-procedure

!***********************************************************************
begin-procedure State-Change
!***********************************************************************

    let #ChangeLevel    = 3
    do Print-Totals

end-procedure

!***********************************************************************
begin-procedure Print-Totals
!***********************************************************************

    let #TotalRow       = 3

    while #TotalRow    >= #ChangeLevel

        let #RollRow    = #TotalRow - 1

        get $Total_Name from Totals(#TotalRow) Total_Name

        if #TotalRow    = 3
            next-listing need=6
            while #Current-Line < 10
                position (+1,1)
            end-while
            print $Total_Name   (+2,8)
        else
            next-listing need=4
            while #Current-Line < 10
                position (+1,1)
            end-while
            print $Total_Name   (+3,8)
        end-if

        get                     #Workers_Month1     -
                                #Workers_Month2     -
                                #Workers_Month3     -
                                #Qtrly_Wages        -
        from Totals(#TotalRow)  Workers_Month1      -
                                Workers_Month2      -
                                Workers_Month3      -
                                Qtrly_Wages

        do Format-Number(#Workers_Month1, $Workers_Month1, '999,999')
        do Format-Number(#Workers_Month2, $Workers_Month2, '999,999')
        do Format-Number(#Workers_Month3, $Workers_Month3, '999,999')
        do Format-Number(#Qtrly_Wages,    $Qtrly_Wages,    '999,999,999')

        print $Workers_Month1   (0,47)
        print $Workers_Month2   (0,57)
        print $Workers_Month3   (0,67)

        print $Qtrly_Wages      (0,88)

!****************
!    Print adjustment footnote (if any)
!****************

        if  #TotalRow       = 3
        and $AdjFootnote    > ' '
            print $AdjFootnote  (+3,1)
            move ' '   to $AdjFootnote
        end-if

!****************
!    Roll totals
!****************

        array-add               #Workers_Month1     -
                                #Workers_Month2     -
                                #Workers_Month3     -
                                #Qtrly_Wages        -
        to Totals(#RollRow)     Workers_Month1      -
                                Workers_Month2      -
                                Workers_Month3      -
                                Qtrly_Wages

        put                     0                   -
                                0                   -
                                0                   -
                                0                   -
        into Totals(#TotalRow)  Workers_Month1      -
                                Workers_Month2      -
                                Workers_Month3      -
                                Qtrly_Wages

        let #TotalRow   = #TotalRow - 1
    end-while

    if #EndOfWorksites
        do Reset
    end-if

    new-page

end-procedure

!***********************************************************************
begin-procedure Insert-Error
!***********************************************************************

    let $msg = 'INSERT ERROR'
    do  Display-Msg

end-procedure

!***********************************************************************
begin-procedure UpDate-Error
!***********************************************************************

    let $msg = 'UPDATE ERROR'
    do  Display-Msg

end-procedure

!***********************************************************************
begin-procedure Ignore
!***********************************************************************

!   dummy procedure to avoid SQL error message

end-procedure

!***********************************************************************
begin-procedure Error-Routine
!***********************************************************************

    let $msg = $Error_Msg
    do  Display-Msg
    STOP

end-procedure

!***********************************************************************
begin-procedure Display-Msg
!***********************************************************************

    let $w = $ReportId||' - '||$msg
    display ' '
    display $w

end-procedure

!***********************************************************************

#Include 'gettxlnm.sqc'     !Get-Tax-Location-Name procedure
#Include 'getstdta.sqc'     !Get-State-Tax-Data procedure
#Include 'getcodta.sqc'     !Get-Company-Data procedure
#Include 'getbalid.sqc'     !Get-Calendar-Year-Id
#Include 'reset1.sqc'        !Reset printer procedure
#Include 'curdttim.sqc'     !Get-Current-DateTime procedure
#Include 'datetime.sqc'     !Routines for date and time formatting
#Include 'number.sqc'       !Routines to format numbers
#Include 'stdapi.sqc'       !Update Process API
#Include 'payrctl2.sqc'     !Get-Run-Control procedure
