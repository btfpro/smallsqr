!***********************************************************
!  PER027:  VETS-100 Report -- Federally specified format  *
!***********************************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2007 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2007/08/08:20:39:55                                 !
!       $Release:  HR9                                                 !
!    $Resolution:  689848                                              !
!
!                                                                      *
!***********************************************************************
!
!***********************************************************************
! Modified for Education & Government                                  *
! HP99999       Release 8 Technical Merge                              *
!***********************************************************************

! Uncomment the following line to have debug values put into the sqr.log
! #DEFINE DEBUGPER027

#include 'setenv.sqc'   !Set environment

! No printout for this process, so manually include #setupdb.sqc
!----------------------------------------------------------------------
Begin-Setup
#include 'setupdb.sqc'
End-Setup

!----------------------------------------------------------------------
!---------Program------------------------------------------------------
!----------------------------------------------------------------------
! This process will load the V100_TEMP_TBL with the statistics for
! one or more Headquarter unit and its controlled establishments
!
! Digital files for submission or informational reports can be created
! from the information stored in the temp table by using the related
! processes available in the same panel group as this process.
!
! After a digital file is created for submission, the values from the
! temp table are copied into a history table where they will be
! available for reference and comparison.
!----------------------------------------------------------------------
Begin-Program

#IFDEF DEBUGPER027
  DISPLAY 'FLOW: Begin Program'
#ENDIF


  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Init-Array

  ! Set our row count variable to 0
  !------------------------------------------------------------
  LET #V100_Row = 0

  ! If we're only running for one HQ Unit, populate the dynamic
  ! where clause with a conditional to limit to the appropriate
  ! establishments
  !------------------------------------------------------------
  !*******Begin Resolution 631970*******
  EVALUATE $ReportChoice   
           WHEN = '1'                       !Establishments in Company
             LET $Where-Clause = 'AND G.COMPANY ='  || $Quote || $COMPANY || $Quote
             LET $Row-Where-Clause = 'WHERE V100_HIRING_LOC IN (SELECT B.ESTABID FROM PS_COMPANY_TBL A, PS_ESTAB_TBL B WHERE A.COMPANY=B.COMPANY AND A.COMPANY=' || $Quote || $COMPANY || $Quote || ')'
             BREAK
      
           WHEN = '2'                       !Single Establishment
!Begin Of Incident 1481930001 
             LET $Where-Clause = 'AND (F.ESTABID = ' || $Quote || $Estab || $Quote || 'OR F.ESTABID = (SELECT FF.CTL_ESTABID FROM PS_ESTAB_TBL_USA FF 
             WHERE FF.ESTABID = ' || $Quote || $Estab || $Quote || 'AND FF.EFFDT = (SELECT MAX(EFFDT) FROM PS_ESTAB_TBL WHERE  ESTABID = FF.ESTABID AND EFFDT <=' || $Quote || $ThruDate || $Quote || ')))'
             LET $Row-Where-Clause = 'WHERE CTL_ESTABID = (SELECT FF.CTL_ESTABID FROM PS_ESTAB_TBL_USA FF WHERE FF.ESTABID = ' || $Quote || $Estab || $Quote || 
             'AND FF.EFFDT = (SELECT MAX(EFFDT) FROM PS_ESTAB_TBL WHERE  ESTABID = FF.ESTABID AND EFFDT <=' || $Quote || $ThruDate || $Quote || '))'
!End Of Incident 1481930001
             BREAK
             
           WHEN = '3'                       !Headquarter and Ctl Establishment
           !***********Begin Incident 1369213004 *************
             !LET $Where-Clause = 'AND F.CTL_ESTABID = ' || $Quote || $CtlEstabID || $Quote
             LET $Where-Clause = 'AND F1.CTL_ESTABID = ' || $Quote || $CtlEstabID || $Quote
           !***********End Incident 1369213004 *************  
             LET $Row-Where-Clause = 'WHERE CTL_ESTABID = ' || $Quote || $CtlEstabID || $Quote  
             BREAK
             
           WHEN-OTHER                            !All Establishment
             LET $Where-Clause = ''
             LET $Row-Where-Clause = ''
             BREAK
    
  END-EVALUATE
  !IF $ReportChoice = '3'
  !   LET $Where-Clause = 'AND F.CTL_ESTABID = ' || $Quote || $CtlEstabID || $Quote
  !   LET $Row-Where-Clause = 'WHERE CTL_ESTABID = ' || $Quote || $CtlEstabID || $Quote
  !ELSE
  !   LET $Where-Clause = ''
  !   LET $Row-Where-Clause = ''
  !END-IF
  !*******End Resolution 631970*******


  !-------------------------------------------
  ! We need to clear the temp tables for the
  ! appropriate estabs
  !-------------------------------------------
  DO Clear-Temp-Tables


  ! Begin the process - main SQL Select Loop
  !------------------------------------------------------------
  DO Process-Main


  ! Update the Process Scheduler
  !------------------------------------------------------------
  DO Stdapi-Term

End-Program

!----------------------------------------------------------------------
!---------Init-Report--------------------------------------------------
!----------------------------------------------------------------------
! We need to get the calendar year from the process instance
!----------------------------------------------------------------------

begin-procedure Init-Report
#IFDEF DEBUGPER027
  DISPLAY 'FLOW: Init-Report'
#ENDIF

  move 'PER027' to $ReportID
  move 'Vets 100 Federal Contractors Report' to $ReportTitle

  display $ReportTitle

#IFDEF DEBUGPER027
  display 'Report ID: ' NOLINE
  display $ReportID
#ENDIF

  do Stdapi-Init

  if $prcs_process_instance = ''
     display ''
     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT,PLEASE USE PROCESS SCHEDULER.'
     display ''
     STOP QUIET
  else
     do Select-Parameters
  end-if

end-procedure

!----------------------------------------------------------------------
!---------Get-Values---------------------------------------------------
!----------------------------------------------------------------------
! Fetch run control parameters
!----------------------------------------------------------------------
begin-procedure Get-Values
#IFDEF DEBUGPER027
  DISPLAY 'FLOW: Get-Values'
#ENDIF

   do Get-From-Thru-Date
   do Get-Run-Scope
   do Get-CTL_ESTABID
   !*******Begin Resolution 631970*******
   do Get-Company
   do Get-Establishment
   !*******End Resolution 631970*******
   LET $Quote = ''''

! We need to calculate $EndingPeriod in MMDDYYYY from $Thrudate
!--------------------------------------------------------------
LET $Year4 = '1'
LET $DDelimiter = ''
DO format-datetime($ThruDate, $EndingPeriod, {DEFMDY} , '', '')

#IFDEF DEBUGPER027
  DISPLAY '   $FromDate: ' NOLINE
  DISPLAY $FromDate
  DISPLAY '   $ThruDate: ' NOLINE
  DISPLAY $ThruDate
  !*******Begin Resolution 631970*******
  DISPLAY '   $COMPANY: ' NOLINE
  DISPLAY $COMPANY
  DISPLAY '   $Estab: ' NOLINE
  DISPLAY $Estab
  !*******End Resolution 631970*******
  DISPLAY '   $CtlEstabID: ' NOLINE
  DISPLAY $CtlEstabID
  DISPLAY '   $ReportChoice: ' NOLINE
  DISPLAY $ReportChoice
  DISPLAY '   $Continue: ' NOLINE
  DISPLAY $Continue
#ENDIF

end-procedure Get-Values
!----------------------------------------------------------------------
!-----------Init-Array-------------------------------------------------
!----------------------------------------------------------------------
! Row zero not used to keep the numbers in synch with the translate
! values for EEO Job Code
!----------------------------------------------------------------------
Begin-Procedure Init-Array
#IFDEF DEBUGPER027
  DISPLAY 'FLOW: Init-Array'
#ENDIF
  CREATE-ARRAY NAME=VetsArray  SIZE=11 FIELD=L:Number
                                       FIELD=M:Number
                                       FIELD=N:Number
                                       FIELD=O:Number
                                       FIELD=P:Number
                                       FIELD=Q:Number
                                       FIELD=R:Number
                                       FIELD=S:Number
                                       FIELD=label:char


End-Procedure Init-Array

!----------------------------------------------------------------------
!---------Process-Main-------------------------------------------------
!----------------------------------------------------------------------
! This routine will be run once - this SQL loop controls the flow of
! the program.
!----------------------------------------------------------------------
begin-procedure Process-Main

! Debugging stuff
!----------------------------------------------------
#IFDEF DEBUGPER027
  DISPLAY 'FLOW: Process-Main'
#ENDIF

begin-SELECT
 !***********Begin Incident 1369213004 *************
 !F.CTL_ESTABID ()            ON-BREAK PRINT=NEVER PROCEDURE=Reset-Row-Count
F1.CTL_ESTABID ()            ON-BREAK PRINT=NEVER PROCEDURE=Reset-Row-Count
F.COMPANY
F.HQUNIT
E.ESTABID
F.DESCR
F.ADDRESS1
F.CITY
F.COUNTY
F.STATE
F.POSTAL
H.COUNTRY
 !F.NAICS
 !F.DUN_BRADSTREET_NBR
 !F.VETS_100_UNIT_NBR
 !F.EEO_GOV_CONTRACTOR
F1.NAICS
F1.DUN_BRADSTREET_NBR
F1.VETS_100_UNIT_NBR
F1.EEO_GOV_CONTRACTOR
!***********End Incident 1369213004 ************* 
G.FEDERAL_EIN

! We need to store information about the HQ Unit
! so that we can use it for each subsidiary estab
!----------------------------------------------------
  MOVE &E.ESTABID to $EstabID

  IF &F.HQUNIT = 'Y'

    ! Save HQ values for use as parent company
    !---------------------------------------------
    !***********Begin Incident 1369213004 *************
    !LET $CTL_ESTABID = rtrim(&F.CTL_ESTABID,' ')
    LET $CTL_ESTABID = rtrim(&F1.CTL_ESTABID,' ')
    !***********End Incident 1369213004 ************* 
    LET $Estab_ID = $CTL_ESTABID
    LET $HQ_City   = rtrim(&F.CITY,' ')
    LET $HQ_County = rtrim(&F.COUNTY,' ')
    LET $HQ_Descr = rtrim(&F.DESCR,' ')
    LET $HQ_Address1 = rtrim(&F.ADDRESS1,' ')
    LET $HQ_State = rtrim(&F.STATE,' ')
    LET $HQ_Postal = rtrim(&F.POSTAL,' ')
    LET $HQ_Country = rtrim(&H.COUNTRY,' ')
    !***********Begin Incident 1369213004 *************
    !LET $HQ_NAICS = rtrim(&F.NAICS,' ')
    !LET $HQ_DUNS = rtrim(&F.DUN_BRADSTREET_NBR,' ')
    LET $HQ_NAICS = rtrim(&F1.NAICS,' ')
    LET $HQ_DUNS = rtrim(&F1.DUN_BRADSTREET_NBR,' ')
    !***********End Incident 1369213004 ************* 
    LET #HQ_EIN = &G.FEDERAL_EIN
    !***********Begin Incident 1369213004 *************
    !LET $HQ_Vets_Number = rtrim(&F.VETS_100_UNIT_NBR,' ')
    LET $HQ_Vets_Number = rtrim(&F1.VETS_100_UNIT_NBR,' ')
    !***********End Incident 1369213004 ************* 


    ! Hiring location values blank for HQ
    !---------------------------------------------
    LET $Estab_City   = ' '
    LET $Estab_County = ' '
    LET $Estab_Descr = ' '
    LET $Estab_Address1 = ' '
    LET $Estab_State = ' '
    LET $Estab_Postal = ' '
    LET $Estab_NAICS = $HQ_NAICS
    LET $Estab_DUNS = $HQ_DUNS
    LET #Estab_EIN = #HQ_EIN
    LET $Estab_Vets_Number = $HQ_Vets_Number

  ELSE
    ! We will RTrim all values so we don't have problems
    ! on inserting into the temp table
    !----------------------------------------------------
    LET $Estab_ID = rtrim(&E.ESTABID,' ')
    LET $Estab_City   = rtrim(&F.CITY,' ')
    LET $Estab_County = rtrim(&F.COUNTY,' ')
    LET $Estab_Descr = rtrim(&F.DESCR,' ')
    LET $Estab_Address1 = rtrim(&F.ADDRESS1,' ')
    LET $Estab_State = rtrim(&F.STATE,' ')
    LET $Estab_Postal = rtrim(&F.POSTAL,' ')


    ! If location has no NAICS, use HQ NAICS
    !----------------------------------------------------
    !***********Begin Incident 1369213004 *************
    !LET $Estab_NAICS = rtrim(&F.NAICS,' ')
    LET $Estab_NAICS = rtrim(&F1.NAICS,' ')
    !***********End Incident 1369213004 ************* 
    IF IsBlank($Estab_NAICS)
       LET $Estab_NAICS = $HQ_NAICS
    END-IF

    ! If location has no DUNS, use HQ DUNS
    !----------------------------------------------------
    !***********Begin Incident 1369213004 *************
    !LET $Estab_DUNS = rtrim(&F.DUN_BRADSTREET_NBR,' ')
    LET $Estab_DUNS = rtrim(&F1.DUN_BRADSTREET_NBR,' ')
    !***********End Incident 1369213004 *************     
    IF IsBlank($Estab_DUNS)
       LET $Estab_DUNS = $HQ_DUNS
    END-IF

    ! If location has no EIN, use HQ EIN
    !----------------------------------------------------
     LET #Estab_EIN = &G.FEDERAL_EIN
    IF #Estab_EIN = 0
      LET #Estab_EIN = #HQ_EIN
    END-IF

    ! If location has no VETS 100 Number, use HQ Number
    !----------------------------------------------------
    !***********Begin Incident 1369213004 *************
    !LET $Estab_Vets_Number = rtrim(&F.VETS_100_UNIT_NBR,' ')
    LET $Estab_Vets_Number = rtrim(&F1.VETS_100_UNIT_NBR,' ')
    !***********End Incident 1369213004 *************     
    IF IsBlank($Estab_Vets_Number)
       LET $Estab_Vets_Number = $HQ_Vets_Number
    END-IF

  END-IF

! If the location is in the USA and it's a government
! contractor or subcontractor, or if it's a HQ unit
! then we need to process the establishment, else
! we ignore it.
!----------------------------------------------------

!***********Begin Incident 1369213004 *************
  !IF &F.HQUNIT = 'Y' OR (&H.COUNTRY = 'USA' AND &F.EEO_GOV_CONTRACTOR != 'N')
  IF &F.HQUNIT = 'Y' OR (&H.COUNTRY = 'USA' AND &F1.EEO_GOV_CONTRACTOR != 'N')
!***********End Incident 1369213004 *************     

     ! Reset values from last run, if any...
     !--------------------------------------
     CLEAR-ARRAY NAME=VetsArray
     LET #Minimum_EEs = 0
     LET #Maximum_EEs = 0
     DO Determine-Form-Type
     DO Create-Estab-Row

     ! Increment our row count variable
     !----------------------------------------------------
     ADD 1 to #V100_Row

     ! If it's a headquarter unit outside the US, we will
     ! populate with zeros only
     !---------------------------------------------------
     !***********Begin Incident 1369213004 *************
     !IF &H.COUNTRY = 'USA' AND &F.EEO_GOV_CONTRACTOR != 'N'
     IF &H.COUNTRY = 'USA' AND &F1.EEO_GOV_CONTRACTOR != 'N'
     !***********End Incident 1369213004 *************    
         DO Process-Estab-For-EEs
         DO Process-Estab-For-Disabled-Vets
         DO Process-Estab-For-New-Hires
         DO Process-Estab-For-New-Hires2
         DO Process-Estab-For-Disabled-New-Hires
         DO Process-Estab-For-Disabled-New-Hires2
         DO Process-Estab-For-Newly-Separated-New-Hires
         DO Calculate-Min-Max-EEs
     END-IF

     DO Update-Estab-Totals
  END-IF

FROM  PS_ESTAB_US_VW E,
      PS_ESTAB_TBL F,
      PS_ESTAB_TBL_USA F1,     !***********Incident 1369213004
      PS_COMPANY_TBL G,
      PS_REG_REGION_TBL H
WHERE E.ESTABID = F.ESTABID
  AND F.COMPANY    = G.COMPANY
  AND F.REG_REGION = H.REG_REGION
  AND F.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_ESTAB_TBL
       WHERE  ESTABID = F.ESTABID
         AND  EFFDT  <= $ThruDate)
  AND  F.EFF_STATUS = 'A'
  AND G.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_COMPANY_TBL
       WHERE  COMPANY = G.COMPANY
         AND  EFFDT  <= $ThruDate)
   !***********Begin Incident 1369213004 *************
   !AND F.EEO_GOV_CONTRACTOR <> 'N'
  AND F1.EEO_GOV_CONTRACTOR <> 'N' 
  AND F.ESTABID=F1.ESTABID
  AND F.EFFDT=F1.EFFDT
   !***********End Incident 1369213004 *************    

  [$Where-Clause]

! Flow is controlled by the ORDER BY clause - which
! relies on the establishment table being set up
! correctly.
!----------------------------------------------------
 !***********Begin Incident 1369213004 *************
 !ORDER BY F.CTL_ESTABID, F.HQUNIT desc, F.COMPANY, E.ESTABID
ORDER BY F1.CTL_ESTABID, F.HQUNIT desc, F.COMPANY, E.ESTABID
 !***********End Incident 1369213004 *************    

end-SELECT
end-procedure

!----------------------------------------------------------------------
!---------Process-Estab-For-EEs----------------------------------------
!----------------------------------------------------------------------
! This routine runs once for each US or HQ estab and calculates columns
! M, & N - which are total vet EEs
!----------------------------------------------------------------------
begin-procedure Process-Estab-For-EEs

! Put Debug information in the log
!----------------------------------------------------
#IFDEF DEBUGPER027
  DISPLAY 'FLOW: Process-Estab-For-EEs'
     DISPLAY '   Establishment: ' NOLINE
     DISPLAY &E.ESTABID
     DISPLAY '   Controlling Estab: ' NOLINE
     !***********Begin Incident 1369213004 *************
     !DISPLAY &F.CTL_ESTABID
     DISPLAY &F1.CTL_ESTABID
     !***********End Incident 1369213004 *************    
     DISPLAY '   Country: ' NOLINE
     DISPLAY &H.COUNTRY
#ENDIF

! Calculate totals for this estab for Vietnam and
! Other eligible Vets
!----------------------------------------------------

BEGIN-SELECT
JC.EEO1CODE
A.MILITARY_STATUS
COUNT(*)          &Count

   
   IF &JC.EEO1CODE = 'A' OR &JC.EEO1CODE = 'B'
      LET #EEO1CODE = 1
   ELSE
      LET #EEO1CODE = TO_NUMBER(&JC.EEO1CODE)
   END-IF


! Column M - Vietnam Era Vets
!            EEs who are both Viet and Other Vets
!            are counted twice - this is correct
!            according to the VA even though the
!            regs and doc don't make it clear
!----------------------------------------------------
  IF &A.MILITARY_STATUS = '3' OR &A.MILITARY_STATUS = '9'
      ARRAY-ADD &Count TO VetsArray(#EEO1CODE) M
      ARRAY-ADD &Count TO VetsArray(10) M
  END-IF

! Column N - Other Eligible Vets
!            EEs who are both Viet and Other Vets
!            are counted twice - this is correct
!            according to the VA even though the
!            regs and doc don't make it clear
!----------------------------------------------------
  IF &A.MILITARY_STATUS = '4' OR &A.MILITARY_STATUS = '9'
     ARRAY-ADD &Count TO VetsArray(#EEO1CODE) N
     ARRAY-ADD &Count TO VetsArray(10) N
  END-IF


FROM  PS_PERS_DATA_USA A,
      PS_JOB J,
      PS_JOBCODE_TBL JC,
      PS_ESTAB_TBL E
WHERE J.PER_ORG = 'EMP'
  AND J.REG_TEMP   = 'R'                         ! Regular Employees only
  AND A.MILITARY_STATUS IN ('3','4','9')         ! Vet
  AND A.EMPLID = J.EMPLID
  AND J.JOB_INDICATOR = 'P'
  AND A.EFFDT =
      (SELECT MAX(A1.EFFDT)
       FROM   PS_PERS_DATA_USA A1
       WHERE  A1.EMPLID = A.EMPLID
         AND  A1.EFFDT  <= $ThruDate)
! AND J.EMPL_RCD = (SELECT MIN(B1.EMPL_RCD)
!                    FROM PS_JOB B1
!                    WHERE B1.EMPLID = J.EMPLID)
  AND J.EFFDT =
               (SELECT MAX(J1.EFFDT)
                FROM PS_JOB J1
                WHERE J1.EMPLID  = J.EMPLID
                AND J1.EMPL_RCD = J.EMPL_RCD
                AND J1.EFFDT <= $ThruDate)
  AND J.EFFSEQ =
      (SELECT MAX(J2.EFFSEQ)
       FROM PS_JOB J2
       WHERE J2.EMPLID = J.EMPLID
         AND J2.EMPL_RCD = J.EMPL_RCD
         AND J2.EFFDT = J.EFFDT)
  AND (J.EMPL_STATUS IN ('A', 'L', 'S', 'P', 'W') !HP99999
          AND J.EFFDT <= $ThruDate)
          
 !********************Begin Resolution 304104**********************************
 !      OR (J.EMPL_STATUS = 'T'
 !        AND J.EFFDT > $FromDate))
 !********************End Resolution 304104**********************************
          
  AND JC.JOBCODE = J.JOBCODE
  AND JC.SETID = J.SETID_JOBCODE
  AND JC.EFFDT =
      (SELECT MAX(JC1.EFFDT)
       FROM PS_JOBCODE_TBL JC1
       WHERE JC1.JOBCODE = JC.JOBCODE
       AND JC1.SETID = JC.SETID
       !***************BEGIN RESOLUTION - 609241 **************
       !AND JC1.EFFDT <= J.EFFDT)
       AND JC1.EFFDT <= $ThruDate)
       !***************END RESOLUTION - 609241 **************
  AND J.EEO_CLASS     <> 'E'   !Exclude from counts
  AND JC.EEO1CODE     <> 'N'   !Not counted for EEO reporting
  AND E.ESTABID = J.ESTABID
  AND E.ESTABID = $EstabID
  AND E.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_ESTAB_TBL
       WHERE  ESTABID = E.ESTABID
         AND  EFFDT  <= $ThruDate)
  AND  E.EFF_STATUS = 'A'

GROUP BY JC.EEO1CODE, A.MILITARY_STATUS

end-SELECT



end-procedure Process-Estab-For-EEs

!----------------------------------------------------------------------
!---------Process-Estab-For-New-Hires----------------------------------
! This routine runs once for each US or HQ estab and calculates columns
! O, P, Q, and R - which are total & vet new hires exclusive of EEs
! that were hired as temporary employees and were converted to regular
!----------------------------------------------------------------------
begin-procedure Process-Estab-For-New-Hires
#IFDEF DEBUGPER027
  DISPLAY 'FLOW: Process-Estab-For-New-Hires'
#ENDIF

! We need to calculate the previous 12 months - we can't use
! From and Thru Dates for the new hire calculation
!-----------------------------------------------------------
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($ThruDate, $out, {DEFYMD}, '', '')
  do dtu-add-months($out, -12, $prev_12_mo)
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($prev_12_mo, $prev_12_mo, {DEFYMD}, '', 'native')


! This select statement pulls out all new hires
!----------------------------------------------------
begin-SELECT
JC2.EEO1CODE
A2.MILITARY_STATUS
COUNT(*)            &EE_Count

   
   IF &JC2.EEO1CODE = 'A' OR &JC2.EEO1CODE = 'B'
      LET #EEO1CODE = 1
   ELSE
      LET #EEO1CODE = TO_NUMBER(&JC2.EEO1CODE)
   END-IF


   ! If Vietnam or Both
   !-----------------------------------------------------
   IF &A2.MILITARY_STATUS = '3' or &A2.MILITARY_STATUS = '9'
      ARRAY-ADD &EE_Count TO VetsArray(#EEO1CODE) P
      ARRAY-ADD &EE_COUNT TO VetsArray(10) P
   END-IF

   ! If Other Eligible or Both
   !-----------------------------------------------------
   IF &A2.MILITARY_STATUS = '4' or &A2.MILITARY_STATUS = '9'
      ARRAY-ADD &EE_Count TO VetsArray(#EEO1CODE) R
      ARRAY-ADD &EE_COUNT TO VetsArray(10) R
   END-IF

   ! Add to total count no matter what
   !-----------------------------------------------------
   ARRAY-ADD &EE_Count TO VetsArray(#EEO1CODE) S
   ARRAY-ADD &EE_COUNT TO VetsArray(10) S

FROM  PS_PERS_DATA_USA A2,
      PS_JOB J2,
      PS_JOBCODE_TBL JC2
WHERE J2.PER_ORG = 'EMP'
  AND A2.EMPLID = J2.EMPLID
  AND A2.EFFDT =
      (SELECT MAX(A2A.EFFDT)
       FROM   PS_PERS_DATA_USA A2A
       WHERE  A2A.EMPLID = A2.EMPLID
         AND  A2A.EFFDT  <= $ThruDate)
  AND J2.EFFDT = (SELECT MAX(J7.EFFDT)
                  FROM PS_JOB J7
                  WHERE J7.EMPLID = J2.EMPLID
                    AND J7.EMPL_RCD = J2.EMPL_RCD
                    AND J7.EFFDT Between $Prev_12_mo and $ThruDate
                    AND J7.ACTION IN ('HIR','REH')
                    AND J7.REG_TEMP   = 'R' )
  AND J2.EFFSEQ = (SELECT MAX (J71.EFFSEQ)
                   FROM PS_JOB J71
                   WHERE J71.EMPLID = J2.EMPLID
                     AND J71.EMPL_RCD = J2.EMPL_RCD
                     AND J71.EFFDT = J2.EFFDT)
  AND J2.JOB_INDICATOR = 'P'
! AND J2.EMPL_RCD = (SELECT MIN (EMPL_RCD)
!                    FROM PS_JOB J2A
!                    WHERE J2A.EMPLID = J2.EMPLID  )
  AND JC2.JOBCODE = J2.JOBCODE
  AND JC2.SETID = J2.SETID_JOBCODE
  AND JC2.EFFDT =
      (SELECT MAX(EFFDT)
       FROM PS_JOBCODE_TBL JC3
       WHERE JC3.JOBCODE = JC2.JOBCODE
       AND JC3.SETID = JC2.SETID
       AND JC3.EFFDT <= J2.EFFDT)
  AND J2.EEO_CLASS  <> 'E'
  AND JC2.EEO1CODE  <> 'N'
  AND J2.ESTABID    = $EstabID
!*************BEGIN RESOLUTION 1369213004*************
  
    AND J2.ACTION IN ('HIR','REH')
      
!*************END RESOLUTION 1369213004***************

GROUP BY JC2.EEO1CODE, A2.MILITARY_STATUS
end-SELECT

end-procedure Process-Estab-For-New-Hires

!----------------------------------------------------------------------
!---------Process-Estab-For-New-Hires2----------------------------------
! This routine runs once for each US or HQ estab and calculates columns
! O, P, Q, and R - which are total & vet new hires.  This sums employees
! that have moved from temporary to regular status during the reporting
! period.
!----------------------------------------------------------------------
begin-procedure Process-Estab-For-New-Hires2
#IFDEF DEBUGPER027
  DISPLAY 'FLOW: Process-Estab-For-New-Hires-2'
#ENDIF

! This select statement pulls out all new hires
!----------------------------------------------------
begin-SELECT
JC22.EEO1CODE
A22.MILITARY_STATUS
COUNT(*)            &EE_Count2

   
   IF &JC22.EEO1CODE = 'A' OR &JC22.EEO1CODE = 'B'
      LET #EEO1CODE = 1
   ELSE
      LET #EEO1CODE = TO_NUMBER(&JC22.EEO1CODE)
   END-IF



   ! If Vietnam or Both
   !-----------------------------------------------------
   IF &A22.MILITARY_STATUS = '3' or &A22.MILITARY_STATUS = '9'
      ARRAY-ADD &EE_Count2 TO VetsArray(#EEO1CODE) P
      ARRAY-ADD &EE_COUNT2 TO VetsArray(10) P
   END-IF

   ! If Other Eligible or Both
   !-----------------------------------------------------
   IF &A22.MILITARY_STATUS = '4' or &A22.MILITARY_STATUS = '9'
      ARRAY-ADD &EE_Count2 TO VetsArray(#EEO1CODE) R
      ARRAY-ADD &EE_COUNT2 TO VetsArray(10) R
   END-IF

   ! Add to total count no matter what
   !-----------------------------------------------------
   ARRAY-ADD &EE_Count2 TO VetsArray(#EEO1CODE) S
   ARRAY-ADD &EE_COUNT2 TO VetsArray(10) S

FROM  PS_PERS_DATA_USA A22,
      PS_JOB J22,
      PS_JOBCODE_TBL JC22
WHERE J22.PER_ORG = 'EMP'
  AND A22.EMPLID = J22.EMPLID
  
! ******************************** Begin Resolution - 305396 ******************
!  AND A22.EFFDT =
!      (SELECT MAX(A22A.EFFDT)
!       FROM   PS_PERS_DATA_USA A22A
!       WHERE  A22A.EMPLID = A22.EMPLID
!         AND  A22A.EFFDT  <= $ThruDate)
! ******************************** End Resolution - 305396   ******************
  AND J22.EFFDT = (SELECT MIN(J3.EFFDT) FROM PS_JOB J3
                   WHERE J22.EMPLID = J3.EMPLID
                     AND J22.EMPL_RCD = J3.EMPL_RCD
                     AND J3.REG_TEMP = 'R'
                     AND J3.EMPL_STATUS IN ('A','L','S','P','W'))

! ******************************** Begin Resolution - 305396 ******************
!                    AND J3.EFFDT between $Prev_12_mo and $ThruDate)
! ******************************** End Resolution - 305396   ******************
! ******************************** Begin Resolution - 574117   ******************
                  !AND J22.EFFSEQ = (SELECT MIN(J5.EFFSEQ) FROM PS_JOB J5
                   AND J22.EFFSEQ = (SELECT MAX(J5.EFFSEQ) FROM PS_JOB J5
! ******************************** Begin Resolution - 574117   ******************
                      WHERE J5.EMPLID = J22.EMPLID
                        AND J5.EMPL_RCD = J22.EMPL_RCD
                        AND J5.EFFDT = J22.EFFDT)
  AND J22.ACTION NOT IN ('HIR','REH')
  AND J22.EFFDT between $Prev_12_mo and $ThruDate
  AND J22.JOB_INDICATOR = 'P'
! AND J22.EMPL_RCD = (SELECT MIN (EMPL_RCD)
!                     FROM PS_JOB J22A
!                     WHERE J22A.EMPLID = J22.EMPLID)
  AND JC22.JOBCODE = J22.JOBCODE
  AND JC22.SETID = J22.SETID_JOBCODE
  AND JC22.EFFDT =
      (SELECT MAX(EFFDT)
       FROM PS_JOBCODE_TBL JC3
       WHERE JC3.JOBCODE = JC22.JOBCODE
       AND JC3.SETID = JC22.SETID
       AND JC3.EFFDT <= J22.EFFDT)
  AND J22.EEO_CLASS  <> 'E'
  AND JC22.EEO1CODE  <> 'N'
  AND J22.ESTABID = $EstabID
  AND exists (select 'X'
                from PS_JOB EXJ
               where J22.EMPLID    = EXJ.EMPLID
                     AND EXJ.EMPL_RCD = J22.EMPL_RCD
                     
  ! ******************************** Begin Resolution - 305396 ******************
                 AND EXJ.REG_TEMP = 'R'
  !              AND EXJ.REG_TEMP <> 'R'
  ! ******************************** End Resolution - 305396   ******************
  
                 AND EXJ.EMPL_STATUS IN ('A','L','S','P','W')
                 
  ! ******************************** Begin Resolution - 305396 ******************
             AND EXJ.EFFDT between $Prev_12_mo and $ThruDate
                     AND ((EXJ.EFFDT < J22.EFFDT)
                     OR (EXJ.EFFDT = J22.EFFDT
                     AND EXJ.EFFSEQ = (SELECT MAX(EFFSEQ) 
                                       FROM PS_JOB PJ
                                       WHERE PJ.EMPLID = EXJ.EMPLID
                                       AND PJ.EMPL_RCD = EXJ.EMPL_RCD
                                       AND EXJ.REG_TEMP = 'R'
! ******************************** Begin Resolution - 574117   ******************
                                !AND EXJ.EMPL_STATUS = 'A'  
                                      AND EXJ.EMPL_STATUS IN ('A','L','S','P','W')
! ******************************** End Resolution - 574117 **********************
  
  
                                       AND PJ.EFFDT = EXJ.EFFDT))))  
                   
  !                   AND EXJ.EFFDT = (select max(EFFDT)
  !                                    from PS_JOB PJ
  !                                    where PJ.EMPLID      = EXJ.EMPLID
  !                                    and PJ.EMPL_RCD   = EXJ.EMPL_RCD
  !                                    and (PJ.EFFDT      < $Prev_12_mo
  !                                    or (PJ.EFFDT     = $Prev_12_mo
  !                                    and PJ.EFFSEQ    < EXJ.EFFSEQ))))
  ! ******************************** End Resolution - 305396   ******************
  
  GROUP BY JC22.EEO1CODE, A22.MILITARY_STATUS
end-SELECT

end-procedure Process-Estab-For-New-Hires2
!----------------------------------------------------------------------
!---------Process-Estab-For-Disabled-New-Hires-------------------------
! This routine runs once for each US or HQ estab and calculates columns
! O, P, Q, and R - which are total & vet new hires
!----------------------------------------------------------------------
begin-procedure Process-Estab-For-Disabled-New-Hires
#IFDEF DEBUGPER027
  DISPLAY 'FLOW: Process-Estab-For-Disabled-New-Hires'
#ENDIF

! This select statement pulls out all special disabled new hires
!----------------------------------------------------
begin-SELECT
DJC2.EEO1CODE
COUNT(*)            &DEE_Count

   
   IF &DJC2.EEO1CODE = 'A' OR &DJC2.EEO1CODE = 'B'
      LET #EEO1CODE = 1
   ELSE
      LET #EEO1CODE = TO_NUMBER(&DJC2.EEO1CODE)
   END-IF



   ! Column O - Disabled Vet New Hires
   !-----------------------------------------------
   ARRAY-ADD &DEE_Count TO VetsArray(#EEO1CODE) O
   ARRAY-ADD &DEE_Count TO VetsArray(10) O

FROM  PS_JOB DJ2,
      PS_JOBCODE_TBL DJC2,
      PS_DISABILITY DDIS
WHERE DDIS.EMPLID = DJ2.EMPLID
  AND DDIS.DISABLED_VET = 'Y'
  AND DJ2.EFFDT = (SELECT MAX(J77.EFFDT)
                   FROM PS_JOB J77
                   WHERE J77.EMPLID = DJ2.EMPLID
                     AND J77.EMPL_RCD = DJ2.EMPL_RCD
                     AND J77.EFFDT Between $Prev_12_mo and $ThruDate
                     AND J77.ACTION IN ('HIR','REH')
                     AND J77.REG_TEMP   = 'R' )
  AND DJ2.EFFSEQ = (SELECT MAX (J771.EFFSEQ)
                    FROM PS_JOB J771
                    WHERE J771.EMPLID = DJ2.EMPLID
                      AND J771.EMPL_RCD = DJ2.EMPL_RCD
                      AND J771.EFFDT = DJ2.EFFDT)
  AND DJ2.JOB_INDICATOR = 'P'
! AND DJ2.EMPL_RCD = (SELECT MIN (EMPL_RCD)
!                     FROM PS_JOB DJ2A
!                     WHERE DJ2A.EMPLID = DJ2.EMPLID  )
  AND DJC2.JOBCODE = DJ2.JOBCODE
  AND DJC2.SETID = DJ2.SETID_JOBCODE
  AND DJC2.EFFDT = (SELECT MAX(EFFDT)
                    FROM PS_JOBCODE_TBL DJC3
                    WHERE DJC3.JOBCODE = DJC2.JOBCODE
                      AND DJC3.SETID = DJC2.SETID
                      AND DJC3.EFFDT <= DJ2.EFFDT)
  AND DJ2.EEO_CLASS  <> 'E'            !"E" means exclude from counts
  AND DJC2.EEO1CODE  <> 'N'            !"N" means not counted for reptg purposes
  AND DJ2.ESTABID    = $EstabID
GROUP BY DJC2.EEO1CODE
end-SELECT

end-procedure Process-Estab-For-Disabled-New-Hires
!----------------------------------------------------------------------
!---------Process-Estab-For-Newly-Separated-New-Hires------------------
! This routine runs once for each US or HQ estab and calculates columns
! O, P, Q, and R - which are total & vet new hires
!----------------------------------------------------------------------
begin-procedure Process-Estab-For-Newly-Separated-New-Hires
#IFDEF DEBUGPER027
  DISPLAY 'FLOW: Process-Estab-For-Newly-Separated-New-Hires'
#ENDIF

! This select statement pulls out all Newly-Separated new hires
!----------------------------------------------------
begin-SELECT
MDJC.EEO1CODE
COUNT(*)            &NS_Count

   
   IF &MDJC.EEO1CODE = 'A' OR &MDJC.EEO1CODE = 'B'
      LET #EEO1CODE = 1
   ELSE
      LET #EEO1CODE = TO_NUMBER(&MDJC.EEO1CODE)
   END-IF



   ! Column Q - Newly Separated New Hires
   !-----------------------------------------------
   ARRAY-ADD &NS_Count TO VetsArray(#EEO1CODE) Q
   ARRAY-ADD &NS_Count TO VetsArray(10) Q

FROM  PS_JOB MDJ,
      PS_JOBCODE_TBL MDJC,
      PS_PERS_MILIT_USA MD
WHERE MD.EMPLID = MDJ.EMPLID
  AND MD.MIL_DISCHRG_DT_USA Between $Prev_12_mo and $ThruDate
  AND MDJ.EFFDT = (SELECT MAX(MDJ1.EFFDT)
                   FROM PS_JOB MDJ1
                   WHERE MDJ1.EMPLID = MDJ.EMPLID
                     AND MDJ1.EMPL_RCD = MDJ.EMPL_RCD
                     AND MDJ1.EFFDT Between $Prev_12_mo and $ThruDate
                     AND MDJ1.ACTION IN ('HIR','REH')
                     AND MDJ1.REG_TEMP   = 'R' )
  AND MDJ.EFFSEQ = (SELECT MAX (MDJ2.EFFSEQ)
                    FROM PS_JOB MDJ2
                    WHERE MDJ2.EMPLID = MDJ.EMPLID
                      AND MDJ2.EMPL_RCD = MDJ.EMPL_RCD
                      AND MDJ2.EFFDT = MDJ.EFFDT)
  AND MDJ.JOB_INDICATOR = 'P'
! AND MDJ.EMPL_RCD = (SELECT MIN (EMPL_RCD)
!                     FROM PS_JOB MDJ3
!                     WHERE MDJ3.EMPLID = MDJ.EMPLID  )
  AND MDJC.JOBCODE = MDJ.JOBCODE
  AND MDJC.SETID = MDJ.SETID_JOBCODE
  AND MDJC.EFFDT = (SELECT MAX(MDJC1.EFFDT)
                    FROM PS_JOBCODE_TBL MDJC1
                    WHERE MDJC1.JOBCODE = MDJC.JOBCODE
                      AND MDJC1.SETID = MDJC.SETID
                      
                  !******BEGIN RESOLUTION 301241*************
                  
                      AND MDJC1.EFFDT <= MDJ.EFFDT)
                      
                  !******END RESOLUTION 301241*************** 
                  
                      
                   !******BEGIN RESOLUTION 301241*************
                  
                    !AND MDJC1.EFFDT <= MDJC.EFFDT)
                      
                  !******END RESOLUTION 301241*************** 
                  
  AND MDJ.EEO_CLASS  <> 'E'            !"E" means exclude from counts
  AND MDJC.EEO1CODE  <> 'N'            !"N" means not counted for reptg purposes
  AND MDJ.ESTABID    = $EstabID
GROUP BY MDJC.EEO1CODE
end-SELECT

end-procedure Process-Estab-For-Newly-Separated-New-Hires

!----------------------------------------------------------------------
!---------Clear-Temp-Tables--------------------------------------------
!----------------------------------------------------------------------
! This routine will delete values from the PER027 temp tables
!----------------------------------------------------------------------
begin-procedure Clear-Temp-Tables
#IFDEF DEBUGPER027
  DISPLAY 'FLOW: Clear-Temp-Tables'
#ENDIF

BEGIN-SELECT
COUNT(*) &Exists
   LET #Exists = &Exists
FROM PS_V100_TEMP_TBL
[$Row-Where-Clause]
END-SELECT

IF #Exists != 0
BEGIN-SQL
DELETE FROM PS_V100_TEMP_TBL
[$Row-Where-Clause]
END-SQL
END-IF

end-procedure Clear-Temp-Tables

!----------------------------------------------------------------------
!---------Process-Estab-For-Disabled-Vets------------------------------
!----------------------------------------------------------------------
! This routine will check to see if an employee is a special disabled
! veteran - had to do this in a separate statement to avoid an
! outer join
!----------------------------------------------------------------------
begin-procedure Process-Estab-For-Disabled-Vets
BEGIN-SELECT
JCNH.EEO1CODE
COUNT(*)     &NH_Count

  
   IF &JCNH.EEO1CODE = 'A' OR &JCNH.EEO1CODE = 'B'
      LET #EEO1CODE = 1
   ELSE
      LET #EEO1CODE = TO_NUMBER(&JCNH.EEO1CODE)
   END-IF



! Column L - Special Disabled Vets
!-----------------------------------------------------
  ARRAY-ADD &NH_Count TO VetsArray(#EEO1CODE) L
  ARRAY-ADD &NH_Count TO VetsArray(10) L


FROM  PS_JOB JNH,
      PS_JOBCODE_TBL JCNH,
      PS_ESTAB_TBL ENH,
      PS_DISABILITY NH1
WHERE JNH.REG_TEMP   = 'R'                         ! Regular Employees only
  AND JNH.JOB_INDICATOR = 'P'
! AND JNH.EMPL_RCD = (SELECT MIN(B1NH.EMPL_RCD)
!                     FROM PS_JOB B1NH
!                     WHERE B1NH.EMPLID = JNH.EMPLID)
  AND JNH.EFFDT = (SELECT MAX(J1NH.EFFDT)
                   FROM PS_JOB J1NH
                   WHERE J1NH.EMPLID  = JNH.EMPLID
                     AND J1NH.EMPL_RCD = JNH.EMPL_RCD
                     AND J1NH.EFFDT <= $ThruDate)
  AND JNH.EFFSEQ = (SELECT MAX(J2NH.EFFSEQ)
                    FROM PS_JOB J2NH
                    WHERE J2NH.EMPLID = JNH.EMPLID
                      AND J2NH.EMPL_RCD = JNH.EMPL_RCD
                      AND J2NH.EFFDT = JNH.EFFDT)
  AND ((JNH.EMPL_STATUS IN ('A','L','S','P','W') AND JNH.EFFDT <= $ThruDate)
        OR (JNH.EMPL_STATUS NOT IN ('A','L','S','P','W') AND JNH.EFFDT BETWEEN $FromDate AND $ThruDate)
        OR (JNH.EMPL_STATUS IN ('P', 'W') AND JNH.EFFDT <= $FromDate))
  AND JCNH.JOBCODE = JNH.JOBCODE
  AND NH1.DISABLED_VET = 'Y'
  AND JCNH.SETID = JNH.SETID_JOBCODE
  AND JCNH.EFFDT =
      (SELECT MAX(JC1NH.EFFDT)
       FROM PS_JOBCODE_TBL JC1NH
       WHERE JC1NH.JOBCODE = JCNH.JOBCODE
       AND JC1NH.SETID = JCNH.SETID
       AND JC1NH.EFFDT <= JNH.EFFDT)
  AND JNH.EEO_CLASS     <> 'E'   !Exclude from counts
  AND JCNH.EEO1CODE     <> 'N'   !Not counted for EEO reporting
  AND ENH.ESTABID       = JNH.ESTABID
  AND ENH.ESTABID = $EstabID
  AND ENH.EFFDT =
      (SELECT MAX(EFFDT)
       FROM   PS_ESTAB_TBL
       WHERE  ESTABID = ENH.ESTABID
         AND  EFFDT  <= $ThruDate)
  AND  ENH.EFF_STATUS = 'A'
  AND NH1.EMPLID = JNH.EMPLID

GROUP BY JCNH.EEO1CODE

end-SELECT

end-procedure Process-Estab-For-Disabled-Vets
!----------------------------------------------------------------------
!---------Process-Estab-For-Disabled-New-Hires2------------------------
!----------------------------------------------------------------------
! This routine runs once for each US or HQ estab and calculates columns
! O, P, Q, and R - which are total & vet new hires - where the EE was
! hired as a temporary employee and then converted to regular
!----------------------------------------------------------------------
begin-procedure Process-Estab-For-Disabled-New-Hires2
#IFDEF DEBUGPER027
  DISPLAY 'FLOW: Process-Estab-For-Disabled-New-Hires2'
#ENDIF

! This select statement pulls out all special disabled new hires
!----------------------------------------------------
begin-SELECT
DJC22.EEO1CODE
COUNT(*)            &DEE_Count2

   
   IF &DJC22.EEO1CODE = 'A' OR &DJC22.EEO1CODE = 'B'
      LET #EEO1CODE = 1
   ELSE
      LET #EEO1CODE = TO_NUMBER(&DJC22.EEO1CODE)
   END-IF



   ! Column O Disabled Vet New Hires
   !-----------------------------------------------
   ARRAY-ADD &DEE_Count2 TO VetsArray(#EEO1CODE) O
   ARRAY-ADD &DEE_Count2 TO VetsArray(10) O


FROM  PS_JOB DJ22,
      PS_JOBCODE_TBL DJC22,
      PS_DISABILITY DDIS2
WHERE DDIS2.EMPLID = DJ22.EMPLID
  AND DDIS2.DISABLED_VET = 'Y'
  AND DJ22.EFFDT = (SELECT MIN(J3.EFFDT) FROM PS_JOB J3
                    WHERE DJ22.EMPLID = J3.EMPLID
                      AND DJ22.EMPL_RCD = J3.EMPL_RCD
                      AND J3.REG_TEMP = 'R'
                      AND J3.EMPL_STATUS IN ('A','L','S','P','W'))
  AND DJ22.EFFSEQ = (SELECT MIN(J5.EFFSEQ) FROM PS_JOB J5
                      WHERE J5.EMPLID = DJ22.EMPLID
                        AND J5.EMPL_RCD = DJ22.EMPL_RCD
                        AND J5.EFFDT = DJ22.EFFDT)
  AND DJ22.ACTION NOT IN ('HIR','REH')
  
! ******************************** Begin Resolution - 305396 ******************
!  AND DJ22.EFFDT BETWEEN $Prev_12_mo AND $ThruDate
! ******************************** End Resolution - 305396   ******************

  AND DJ22.JOB_INDICATOR = 'P'
! AND DJ22.EMPL_RCD = (SELECT MIN (EMPL_RCD)
!                      FROM PS_JOB DJ22A
!                      WHERE DJ22A.EMPLID = DJ22.EMPLID  )
  AND DJC22.JOBCODE = DJ22.JOBCODE
  AND DJC22.SETID = DJ22.SETID_JOBCODE
  AND DJC22.EFFDT =
      (SELECT MAX(EFFDT)
       FROM PS_JOBCODE_TBL DJC3
       WHERE DJC3.JOBCODE = DJC22.JOBCODE
       AND DJC3.SETID = DJC22.SETID
       AND DJC3.EFFDT <= DJ22.EFFDT)
  AND DJ22.EEO_CLASS  <> 'E'            !"E" means exclude from counts
  AND DJC22.EEO1CODE  <> 'N'            !"N" means not counted for reptg purposes
  AND DJ22.ESTABID = $EstabID
  
! ******************************** Begin Resolution - 305396 ******************
  AND exists (select 'X'
                 from PS_JOB DEXJ
                where DJ22.EMPLID    = DEXJ.EMPLID
                      AND DEXJ.EMPL_RCD = DJ22.EMPL_RCD
                    AND DEXJ.REG_TEMP = 'R'
                      AND DEXJ.EMPL_STATUS IN ('A','L','S','P','W')
                      AND DEXJ.EFFDT between $Prev_12_mo and $ThruDate
                      AND ((DEXJ.EFFDT < DJ22.EFFDT)
                      OR (DEXJ.EFFDT = DJ22.EFFDT
                      AND DEXJ.EFFSEQ = (SELECT MAX(EFFSEQ) 
                                      FROM PS_JOB DPJ
                                      WHERE DPJ.EMPLID = DEXJ.EMPLID
                                      AND DPJ.EMPL_RCD = DEXJ.EMPL_RCD
                                  AND DEXJ.REG_TEMP = 'R'
                                      AND DEXJ.EMPL_STATUS IN ('A','L','S','P','W')
                                      AND DPJ.EFFDT = DEXJ.EFFDT))))
! ******************************** End Resolution - 305396   ******************

GROUP BY DJC22.EEO1CODE
end-SELECT

end-procedure Process-Estab-For-Disabled-New-Hires2
!----------------------------------------------------------------------
!---------Create-Estab-Row---------------------------------------------
!----------------------------------------------------------------------
! This routine will create a row in PS_V100_TEMP_TBL with zeros in all
! the total rows.
!----------------------------------------------------------------------
begin-procedure Create-Estab-Row
#IFDEF DEBUGPER027
   DISPLAY 'FLOW: Create-Estab-Row'
#ENDIF

DO Scrub-Insert-Values

!***********Begin Incident 1369213004 *************
!DISPLAY '  &F.CTL_ESTABID ' NOLINE
     !DISPLAY &F.CTL_ESTABID
DISPLAY '  &F1.CTL_ESTABID ' NOLINE
     DISPLAY &F1.CTL_ESTABID
!***********End Incident 1369213004 ************* 

DISPLAY ' #V100_Row ' NOLINE
     DISPLAY #V100_Row

DISPLAY ' $Estab_Vets_Number ' NOLINE
     DISPLAY $Estab_Vets_Number

DISPLAY '$EndingPeriod' NOLINE
     DISPLAY $EndingPeriod

!***********Begin Incident 1369213004 *************
!DISPLAY '&F.EEO_GOV_CONTRACTOR' NOLINE
     !DISPLAY &F.EEO_GOV_CONTRACTOR
DISPLAY '&F1.EEO_GOV_CONTRACTOR' NOLINE
     DISPLAY &F1.EEO_GOV_CONTRACTOR
!***********End Incident 1369213004 ************* 

DISPLAY '$Form-Type' NOLINE
         DISPLAY $Form-Type

DISPLAY ' $HQ_Descr' NOLINE
     DISPLAY $HQ_Descr

DISPLAY ' $HQ_Address1 ' NOLINE
     DISPLAY $HQ_Address1

DISPLAY ' $HQ_City ' NOLINE
     DISPLAY $HQ_City

DISPLAY ' $HQ_County ' NOLINE
     DISPLAY $HQ_County
DISPLAY ' $HQ_State ' NOLINE
     DISPLAY $HQ_State

DISPLAY ' $HQ_Postal ' NOLINE
     DISPLAY $HQ_Postal

DISPLAY ' &E.ESTABID ' NOLINE
     DISPLAY &E.ESTABID

DISPLAY ' $Estab_Descr ' NOLINE
     DISPLAY $Estab_Descr

DISPLAY ' $Estab_Address1 ' NOLINE
     DISPLAY $Estab_Address1

DISPLAY ' $Estab_City ' NOLINE
     DISPLAY $Estab_City

DISPLAY ' $Estab_County ' NOLINE
     DISPLAY $Estab_County

DISPLAY ' $Estab_State ' NOLINE
     DISPLAY $Estab_State
DISPLAY ' $Estab_Postal ' NOLINE
     DISPLAY $Estab_Postal

DISPLAY ' $Estab_NAICS ' NOLINE
     DISPLAY $Estab_NAICS

DISPLAY ' $Estab_DUNS ' NOLINE
     DISPLAY $Estab_DUNS

DISPLAY ' $Estab_EIN' NOLINE
     DISPLAY $Estab_EIN


BEGIN-SQL
INSERT INTO PS_V100_TEMP_TBL( CTL_ESTABID
,V100_ROW
,V100_COMPANY_NO
, V100_ENDING_PD
, V100_ORG_TYPE
, V100_FORM_TYPE
, V100_MSCNUMBER
, V100_PARENT_CO
, V100_STREET
, V100_CITY
, V100_COUNTY
, V100_STATE
, V100_ZIPCODE
, V100_HIRING_LOC
, V100_HL_NAME
, V100_HL_STREET
, V100_HL_CITY
, V100_HL_COUNTY
, V100_HL_STATE
, V100_HL_ZIP
, V100_SIC
, V100_NAICS
, V100_DUNS_NUM
, V100_EIN
, V100_L1
, V100_M1
, V100_N1
, V100_O1
, V100_P1
, V100_Q1
, V100_R1
, V100_S1
, V100_L2
, V100_M2
, V100_N2
, V100_O2
, V100_P2
, V100_Q2
, V100_R2
, V100_S2
, V100_L3
, V100_M3
, V100_N3
, V100_O3
, V100_P3
, V100_Q3
, V100_R3
, V100_S3
, V100_L4
, V100_M4
, V100_N4
, V100_O4
, V100_P4
, V100_Q4
, V100_R4
, V100_S4
, V100_L5
, V100_M5
, V100_N5
, V100_O5
, V100_P5
, V100_Q5
, V100_R5
, V100_S5
, V100_L6
, V100_M6
, V100_N6
, V100_O6
, V100_P6
, V100_Q6
, V100_R6
, V100_S6
, V100_L7
, V100_M7
, V100_N7
, V100_O7
, V100_P7
, V100_Q7
, V100_R7
, V100_S7
, V100_L8
, V100_M8
, V100_N8
, V100_O8
, V100_P8
, V100_Q8
, V100_R8
, V100_S8
, V100_L9
, V100_M9
, V100_N9
, V100_O9
, V100_P9
, V100_Q9
, V100_R9
, V100_S9
, V100_L10
, V100_M10
, V100_N10
, V100_O10
, V100_P10
, V100_Q10
, V100_R10
, V100_S10
, V100_MAX_NUMBER
, V100_MIN_NUMBER)
VALUES
(
&F1.CTL_ESTABID            !***********Incident 1369213004
,#V100_Row
,$Estab_Vets_Number
,$EndingPeriod
,&F1.EEO_GOV_CONTRACTOR    !***********Incident 1369213004
,$Form-Type
,0                     ! This value only needed for consolidated forms
,$HQ_Descr             ! Parent company name
,$HQ_Address1          ! Parent company street address
,$HQ_City              ! Parent company city
,$HQ_County            ! Parent company county
,$HQ_State             ! Parent company state
,$HQ_Postal            ! Parent company zip
,&E.ESTABID            ! This field is for our reference number
,$Estab_Descr          ! Hiring location name
,$Estab_Address1       ! Hiring location address
,$Estab_City           ! Hiring location city
,$Estab_County         ! Hiring location county
,$Estab_State          ! Hiring location state
,$Estab_Postal         ! Hiring location zip
,' '                   ! SIC Code no longer used for VETS reporting
,$Estab_NAICS          ! Hiring location or HQ Std. Industry Code
,$Estab_DUNS           ! Hiring location or HQ Dun & Bradstreet #
,$Estab_EIN            ! Hiring location or parent EIN
,0,0,0,0,0,0,0,0       ! L1 - S1
,0,0,0,0,0,0,0,0       ! L2 - S2
,0,0,0,0,0,0,0,0       ! L3 - S3
,0,0,0,0,0,0,0,0       ! L4 - S4
,0,0,0,0,0,0,0,0       ! L5 - S5
,0,0,0,0,0,0,0,0       ! L6 - S6
,0,0,0,0,0,0,0,0       ! L7 - S7
,0,0,0,0,0,0,0,0       ! L8 - S8
,0,0,0,0,0,0,0,0       ! L9 - S9
,0,0,0,0,0,0,0,0       ! L10 - S10
,0                     ! Maximum regular employees during period
,0                     ! Minimum regular employees during period
)
END-SQL

end-procedure Create-Estab-Row


!----------------------------------------------------------------------
!---------Determine-Form-Type------------------------------------------
!----------------------------------------------------------------------
! This routine will determine what the form type is for the current
! establishment - Single Estab, Multiple Estab Headquarters, or
! Multiple Establishment-Hiring Location. This report does not
! generate the optional state consolidated report - with a purely
! digital report, there is no advantage to doing so, and there is a
! performance hit involved in treating less-than-50 establishments
! differently.
!----------------------------------------------------------------------
begin-procedure Determine-Form-Type
#IFDEF DEBUGPER027
   DISPLAY 'FLOW: Determine-Form-Type'
#ENDIF
IF &F.HQUNIT = 'N'
   LET $Form-Type = 'MHL'
ELSE

BEGIN-SELECT
COUNT(*) &Estab_Count
  IF &Estab_Count > 1
     LET $Form-Type = 'MHQ'
  ELSE
     LET $Form-Type = 'S'
  END-IF
  !***********Begin Incident 1369213004 *************
FROM PS_ESTAB_TBL FT,
PS_ESTAB_TBL_USA FT1        
WHERE FT1.CTL_ESTABID = &E.ESTABID
  AND FT1.EFFDT =   
      (SELECT MAX(C.EFFDT)
       FROM   PS_ESTAB_TBL_USA C
       WHERE  FT1.CTL_ESTABID = C.ESTABID
         AND  C.EFFDT  <= $ThruDate)
  AND  FT.EFF_STATUS = 'A'
  AND FT.ESTABID=FT1.ESTABID
  AND FT.EFFDT=FT1.EFFDT
  !***********End Incident 1369213004 ************* 
END-SELECT
END-IF
end-procedure Determine-Form-Type

!----------------------------------------------------------------------
!---------Scrub-Insert-Values------------------------------------------
!----------------------------------------------------------------------
! This routine makes sure that all the values we are inserting into
! the temporary Vets 100 table are valid and won't cause an
! execution problem
!----------------------------------------------------------------------
begin-procedure Scrub-Insert-Values
#IFDEF DEBUGPER027
   DISPLAY 'FLOW: Scrub-Insert-Values'
#ENDIF

! The city and county come from 30 character fields and must be
! truncated to 20 before insert
!--------------------------------------------------------------
IF length($HQ_County) >= 20
    LET $HQ_County = substr($HQ_County, 1, 20)
END-IF
IF length($HQ_City) >= 20
    LET $HQ_City = substr($HQ_City, 1, 20)
END-IF

IF length($Estab_County) >= 20
    LET $Estab_County = substr($Estab_County, 1, 20)
END-IF
IF length($Estab_City) >= 20
    LET $Estab_City = substr($Estab_City, 1, 20)
END-IF
if length($HQ_State) >= 3
    LET $HQ_State= substr($HQ_State, 1, 2)
END-IF

! EIN is stored as a number, we need it as a character
!--------------------------------------------------------------
LET $Estab_EIN = to_char(#Estab_EIN)

! PeopleSoft's Postal field allows 12 characters, we only have
! 10 to use...
!--------------------------------------------------------------
IF length($HQ_Postal) >= 20
    LET $HQ_Postal = substr($HQ_Postal, 1, 20)
    DISPLAY '    WARNING: Headquarter Postal code truncated'
END-IF
IF length($Estab_Postal) >= 20
    LET $Estab_Postal = substr($Estab_Postal, 1, 20)
    DISPLAY '    WARNING: Establishment Postal code truncated'
END-IF

! Cannot insert null values - but don't want to crash, so
! populate with a space and warn
!--------------------------------------------------------------
IF IsNull($Estab_DUNS)
   LET $Estab_DUNS = ' '
   DISPLAY '    WARNING: DUNS Number missing'
END-IF
IF IsNull($Estab_NAICS)
   LET $Estab_NAICS = ' '
   DISPLAY '    WARNING: NAICS Number missing'
END-IF
If IsNull($Estab_Vets_Number)
   LET $Estab_Vets_Number = ' '
   DISPLAY '    WARNING: Vets 100 Unit Number missing'
END-IF
IF IsNull($HQ_County)
   Let $HQ_County = ' '
   DISPLAY '    WARNING: Headquarter County missing'
END-IF
IF IsNull($Estab_County)
   Let $Estab_County = ' '
   DISPLAY '    WARNING: Hiring Location county missing'
END-IF
IF IsNull($HQ_Descr)
   Let $HQ_Descr = ' '
   DISPLAY '    WARNING: Headquarter Name missing'
END-IF
IF IsNull($HQ_Address1)
   Let $HQ_Address1 = ' '
   DISPLAY '    WARNING: Headquarter Address missing'
END-IF
IF IsNull($HQ_City)
   Let $HQ_City = ' '
   DISPLAY '    WARNING: Headquarter City missing'
END-IF
IF IsNull($HQ_State)
   Let $HQ_State = ' '
   DISPLAY '    WARNING: Headquarter State missing'
END-IF
IF IsNull($HQ_Postal)
   Let $HQ_Postal = ' '
   DISPLAY '    WARNING: Headquarter Zip Code missing'
END-IF
IF IsNull($Estab_Address1)
   Let $Estab_Address1 = ' '
   DISPLAY '    WARNING: Hiring Location address missing'
END-IF
IF IsNull($Estab_City)
   Let $Estab_City = ' '
   DISPLAY '    WARNING: Hiring Location city missing'
END-IF
IF IsNull($Estab_State)
   Let $Estab_State = ' '
   DISPLAY '    WARNING: Hiring Location state missing'
END-IF
IF IsNull($Estab_Postal)
   Let $Estab_Postal = ' '
   DISPLAY '    WARNING: Hiring Location zip code missing'
END-IF
IF IsNull($Estab_NAICS)
   Let $Estab_NAICS = ' '
   DISPLAY '    WARNING: Hiring Location NAICS code missing'
END-IF
IF IsNull($Estab_DUNS)
   Let $Estab_DUNS = ' '
   DISPLAY '    WARNING: Hiring Location DUNS Number missing'
END-IF
IF IsNull($Estab_EIN)
   Let $Estab_EIN = ' '
   DISPLAY '    WARNING: Hiring Location Federal EIN missing'
END-IF

end-procedure Scrub-Insert-Values

!----------------------------------------------------------------------
!---------Update-Estab-Totals------------------------------------------
!----------------------------------------------------------------------
! This routine takes the values stored in our temporary count variables
! and transfers over to the appropriate row in the temp table
!----------------------------------------------------------------------
begin-procedure Update-Estab-Totals
#IFDEF DEBUGPER027
   DISPLAY 'FLOW: Update-Estab-Totals'
#ENDIF

! SQR doesn't allow array syntax embedded in SQL, so...
!--------------------------------------------------------
 Get #L1 FROM VetsArray(1) L
 Get #L2 FROM VetsArray(2) L
 Get #L3 FROM VetsArray(3) L
 Get #L4 FROM VetsArray(4) L
 Get #L5 FROM VetsArray(5) L
 Get #L6 FROM VetsArray(6) L
 Get #L7 FROM VetsArray(7) L
 Get #L8 FROM VetsArray(8) L
 Get #L9 FROM VetsArray(9) L
 Get #L10 FROM VetsArray(10) L

 Get #M1 FROM VetsArray(1) M
 Get #M2 FROM VetsArray(2) M
 Get #M3 FROM VetsArray(3) M
 Get #M4 FROM VetsArray(4) M
 Get #M5 FROM VetsArray(5) M
 Get #M6 FROM VetsArray(6) M
 Get #M7 FROM VetsArray(7) M
 Get #M8 FROM VetsArray(8) M
 Get #M9 FROM VetsArray(9) M
 Get #M10 FROM VetsArray(10) M

 Get #N1 FROM VetsArray(1) N
 Get #N2 FROM VetsArray(2) N
 Get #N3 FROM VetsArray(3) N
 Get #N4 FROM VetsArray(4) N
 Get #N5 FROM VetsArray(5) N
 Get #N6 FROM VetsArray(6) N
 Get #N7 FROM VetsArray(7) N
 Get #N8 FROM VetsArray(8) N
 Get #N9 FROM VetsArray(9) N
 Get #N10 FROM VetsArray(10) N

 Get #O1 FROM VetsArray(1) O
 Get #O2 FROM VetsArray(2) O
 Get #O3 FROM VetsArray(3) O
 Get #O4 FROM VetsArray(4) O
 Get #O5 FROM VetsArray(5) O
 Get #O6 FROM VetsArray(6) O
 Get #O7 FROM VetsArray(7) O
 Get #O8 FROM VetsArray(8) O
 Get #O9 FROM VetsArray(9) O
 Get #O10 FROM VetsArray(10) O

 Get #P1 FROM VetsArray(1) P
 Get #P2 FROM VetsArray(2) P
 Get #P3 FROM VetsArray(3) P
 Get #P4 FROM VetsArray(4) P
 Get #P5 FROM VetsArray(5) P
 Get #P6 FROM VetsArray(6) P
 Get #P7 FROM VetsArray(7) P
 Get #P8 FROM VetsArray(8) P
 Get #P9 FROM VetsArray(9) P
 Get #P10 FROM VetsArray(10) P

 Get #Q1 FROM VetsArray(1) Q
 Get #Q2 FROM VetsArray(2) Q
 Get #Q3 FROM VetsArray(3) Q
 Get #Q4 FROM VetsArray(4) Q
 Get #Q5 FROM VetsArray(5) Q
 Get #Q6 FROM VetsArray(6) Q
 Get #Q7 FROM VetsArray(7) Q
 Get #Q8 FROM VetsArray(8) Q
 Get #Q9 FROM VetsArray(9) Q
 Get #Q10 FROM VetsArray(10) Q

 Get #R1 FROM VetsArray(1) R
 Get #R2 FROM VetsArray(2) R
 Get #R3 FROM VetsArray(3) R
 Get #R4 FROM VetsArray(4) R
 Get #R5 FROM VetsArray(5) R
 Get #R6 FROM VetsArray(6) R
 Get #R7 FROM VetsArray(7) R
 Get #R8 FROM VetsArray(8) R
 Get #R9 FROM VetsArray(9) R
 Get #R10 FROM VetsArray(10) R

 Get #S1 FROM VetsArray(1) S
 Get #S2 FROM VetsArray(2) S
 Get #S3 FROM VetsArray(3) S
 Get #S4 FROM VetsArray(4) S
 Get #S5 FROM VetsArray(5) S
 Get #S6 FROM VetsArray(6) S
 Get #S7 FROM VetsArray(7) S
 Get #S8 FROM VetsArray(8) S
 Get #S9 FROM VetsArray(9) S
 Get #S10 FROM VetsArray(10) S

LET #PriorRow = #V100_Row - 1
! Insert the values into the temp table
!------------------------------------------------
BEGIN-SQL
UPDATE PS_V100_TEMP_TBL
SET V100_L1 = #L1,
V100_L2 = #L2,
V100_L3 = #L3,
V100_L4 = #L4,
V100_L5 = #L5,
V100_L6 = #L6,
V100_L7 = #L7,
V100_L8 = #L8,
V100_L9 = #L9,
V100_L10 = #L10,
V100_M1 = #M1,
V100_M2 = #M2,
V100_M3 = #M3,
V100_M4 = #M4,
V100_M5 = #M5,
V100_M6 = #M6,
V100_M7 = #M7,
V100_M8 = #M8,
V100_M9 = #M9,
V100_M10 = #M10,
V100_N1 = #N1,
V100_N2 = #N2,
V100_N3 = #N3,
V100_N4 = #N4,
V100_N5 = #N5,
V100_N6 = #N6,
V100_N7 = #N7,
V100_N8 = #N8,
V100_N9 = #N9,
V100_N10 = #N10,
V100_O1 = #O1,
V100_O2 = #O2,
V100_O3 = #O3,
V100_O4 = #O4,
V100_O5 = #O5,
V100_O6 = #O6,
V100_O7 = #O7,
V100_O8 = #O8,
V100_O9 = #O9,
V100_O10 = #O10,
V100_P1 = #P1,
V100_P2 = #P2,
V100_P3 = #P3,
V100_P4 = #P4,
V100_P5 = #P5,
V100_P6 = #P6,
V100_P7 = #P7,
V100_P8 = #P8,
V100_P9 = #P9,
V100_P10 = #P10,
V100_Q1 = #Q1,
V100_Q2 = #Q2,
V100_Q3 = #Q3,
V100_Q4 = #Q4,
V100_Q5 = #Q5,
V100_Q6 = #Q6,
V100_Q7 = #Q7,
V100_Q8 = #Q8,
V100_Q9 = #Q9,
V100_Q10 = #Q10,
V100_R1 = #R1,
V100_R2 = #R2,
V100_R3 = #R3,
V100_R4 = #R4,
V100_R5 = #R5,
V100_R6 = #R6,
V100_R7 = #R7,
V100_R8 = #R8,
V100_R9 = #R9,
V100_R10 = #R10,
V100_S1 = #S1,
V100_S2 = #S2,
V100_S3 = #S3,
V100_S4 = #S4,
V100_S5 = #S5,
V100_S6 = #S6,
V100_S7 = #S7,
V100_S8 = #S8,
V100_S9 = #S9,
V100_S10 = #S10,
V100_MAX_NUMBER = #Maximum_EEs,
V100_MIN_NUMBER = #Minimum_EEs
WHERE CTL_ESTABID = $CTL_ESTABID
  AND V100_ROW = #PriorRow
END-SQL
end-procedure Update-Estab-Totals


!----------------------------------------------------------------------
!---------Calculate-Min-Max-EEs----------------------------------------
!----------------------------------------------------------------------
! This routine will calcualte the maximum and minimum number of
! employees in the given period
!----------------------------------------------------------------------
begin-procedure Calculate-Min-Max-EEs
#IFDEF DEBUGPER027
   DISPLAY 'FLOW: Calculate-Min-Max-EEs'
#ENDIF
!------------------------------------------------------------
! The VA has given no guidance as to how to calculate this.
!
! This routine uses the least processor-intensive method that
! is recommended by the EEAC based upon the assumptions that
! we can make about a system.
!
! If your payroll or other system calculates and stores
! minimum or maximum employees calculated with a greater
! degree of accuracy then is done here, for example, as part
! of running payroll. If this information is pre-calculated
! for you, you may wish to customize this routine and
! "piggyback" by grabbing the results whence they are stored.
!
! Please note that the routine used here is generally believed
! to be sufficient for compliance, but there are no actual
! guidelines or published decisions that addresses this.
! In light of how long this report can take to run, it seemed
! prudent to use the least taxing method of calculation.
!
! We take the number of employees on the first and last days
! of the covered period ($FromDate & $ThruDate) and use
! the higher as the max, and the lower as the minimum.
!------------------------------------------------------------

! First, we'll grab the number of employees on the first
! day of the covered Period
!---------------------------------------------------------
BEGIN-SELECT
COUNT(*)  &THE_COUNT

      LET #COUNT_ONE = &THE_COUNT

 FROM PS_JOB ZZ
WHERE ZZ.EMPL_STATUS IN ('A','L','S','P','W')
  AND ZZ.EFFDT = (SELECT MAX(ZZ1.EFFDT)
                  FROM PS_JOB ZZ1
                  WHERE ZZ1.EMPLID = ZZ.EMPLID
                    AND ZZ1.EMPL_RCD = ZZ.EMPL_RCD
                    AND ZZ1.EFFDT <= $FromDate)
  AND ZZ.EFFSEQ = (SELECT MAX(ZZ2.EFFSEQ)
                   FROM PS_JOB ZZ2
                   WHERE ZZ2.EMPLID = ZZ.EMPLID
                     AND ZZ2.EMPL_RCD = ZZ.EMPL_RCD
                     AND ZZ2.EFFDT = ZZ.EFFDT)
  AND ZZ.JOB_INDICATOR = 'P'
! AND ZZ.EMPL_RCD = (SELECT MIN(ZZ3.EMPL_RCD)
!                     FROM PS_JOB ZZ3
!                     WHERE ZZ3.EMPLID = ZZ.EMPLID
!                       AND ZZ3.EMPL_RCD = ZZ.EMPL_RCD
!                       AND ZZ3.EFFDT = ZZ.EFFDT
!                       AND ZZ3.EFFSEQ = ZZ.EFFSEQ)
  AND ZZ.REG_TEMP = 'R'
!*********************Begin Resolution 603834************************************
   AND ZZ.PER_ORG='EMP'
!*********************End Resolution 603834************************************
  AND ZZ.ESTABID = $Estab_ID

END-SELECT

! Next, we'll grab the number of employees on the last
! day of the covered Period
!---------------------------------------------------------
BEGIN-SELECT
COUNT(*)  &THE_COUNT2

      LET #COUNT_TWO = &THE_COUNT2

 FROM PS_JOB ZZZ
WHERE ZZZ.EMPL_STATUS IN ('A','L','S','P','W')
  AND ZZZ.EFFDT = (SELECT MAX(ZZZ1.EFFDT)
                  FROM PS_JOB ZZZ1
                  WHERE ZZZ1.EMPLID = ZZZ.EMPLID
                    AND ZZZ1.EMPL_RCD = ZZZ.EMPL_RCD
                    AND ZZZ1.EFFDT <= $ThruDate)
  AND ZZZ.EFFSEQ = (SELECT MAX(ZZZ2.EFFSEQ)
                   FROM PS_JOB ZZZ2
                   WHERE ZZZ2.EMPLID = ZZZ.EMPLID
                     AND ZZZ2.EMPL_RCD = ZZZ.EMPL_RCD
                     AND ZZZ2.EFFDT = ZZZ.EFFDT)
  AND ZZZ.JOB_INDICATOR = 'P'
! AND ZZZ.EMPL_RCD = (SELECT MIN(ZZZ3.EMPL_RCD)
!                     FROM PS_JOB ZZZ3
!                     WHERE ZZZ3.EMPLID = ZZZ.EMPLID
!                       AND ZZZ3.EMPL_RCD = ZZZ.EMPL_RCD
!                       AND ZZZ3.EFFDT = ZZZ.EFFDT
!                       AND ZZZ3.EFFSEQ = ZZZ.EFFSEQ)
  AND ZZZ.REG_TEMP = 'R'
!*********************Begin Resolution 603834************************************
   AND ZZZ.PER_ORG='EMP'
!*********************End Resolution 603834************************************
  AND ZZZ.ESTABID = $Estab_ID

END-SELECT

! The higher becomes the max, the lower becomes min
!-------------------------------------------------------
IF #COUNT_TWO > #COUNT_ONE
    LET #Minimum_EEs = #COUNT_ONE
    LET #Maximum_EEs = #COUNT_TWO
ELSE
    LET #Minimum_EEs = #COUNT_TWO
    LET #Maximum_EEs = #COUNT_ONE
END-IF

end-procedure Calculate-Min-Max-EEs

!----------------------------------------------------------------------
!---------Reset-Row-Count----------------------------------------------
!----------------------------------------------------------------------
! We use as a separate row count for each CTL_ESTABID so that the
! report can be run by HQ Unit or for all without duplicating any
! effort.
!----------------------------------------------------------------------
begin-procedure Reset-Row-Count
#IFDEF DEBUGPER027
   DISPLAY 'FLOW: Reset-Row-Count'
#ENDIF
LET #V100_Row = 0
end-procedure Reset-Row-Count
!----------------------------------------------------------------------
!---------SQCs---------------------------------------------------------
!----------------------------------------------------------------------
#include 'stdapi.sqc'      !Routine to update run status
#include 'rgrnctl1.sqc'    !Get run control parameter values
#include 'rggetval.sqc'    !Get values mask routines
#include 'askcalyr.sqc'    !Ask Calendar Year input
#Include 'curdttim.sqc'    !Get-Current-DateTime procedure
#Include 'datetime.sqc'    !Routines for date and time formatting
#Include 'datemath.sqc'    !Routines for date and time calculations
#Include 'number.sqc'      !Routines to format numbers
