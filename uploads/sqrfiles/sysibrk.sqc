! ***************************************************************!
!  This software and related documentation are provided under a!
!  license agreement containing restrictions on use and!
!  disclosure and are protected by intellectual property!
!  laws. Except as expressly permitted in your license agreement!
!  or allowed by law, you may not use, copy, reproduce,!
!  translate, broadcast, modify, license, transmit, distribute,!
!  exhibit, perform, publish or display any part, in any form or!
!  by any means. Reverse engineering, disassembly, or!
!  decompilation of this software, unless required by law for!
!  interoperability, is prohibited.!
!  The information contained herein is subject to change without!
!  notice and is not warranted to be error-free. If you find any!
!  errors, please report them to us in writing.!
!  !
!  Copyright (C) 1988, 2011, Oracle and/or its affiliates.!
!  All Rights Reserved.!
! ***************************************************************!
 
 
!                                                                    !
!***********************************************************************
! SYSIBRK: Integration Broker Audits
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************

!----------------------------------------------------------------------!
! Procedure: SYS-IBRK Audits                                           !
! Descr:     System for Integration Broker  (Introduced in PT848)      !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-Main
    let $ErrorFound = 'N'
    let $AuditTitle = 'Integration Broker Audits'

    do SYSIBRK-01
    do SYSIBRK-02
    do SYSIBRK-03
    do SYSIBRK-04
    do SYSIBRK-05
    do SYSIBRK-06
    do SYSIBRK-07
    do SYSIBRK-08
    do SYSIBRK-09
    do SYSIBRK-10
    do SYSIBRK-11
    do SYSIBRK-12
    do SYSIBRK-13
    do SYSIBRK-14
    do SYSIBRK-15
    do SYSIBRK-16
    do SYSIBRK-17
    do SYSIBRK-18
    do SYSIBRK-19
    do SYSIBRK-20
    do SYSIBRK-21
    do SYSIBRK-22
    do SYSIBRK-23
    do SYSIBRK-24
    do SYSIBRK-25

    if $ErrorFound = 'N'
        do PrintSummaryRecord
    end-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-01                                                !
! Descr:     IB message parts referencing a msg/vers that doesn't exist!
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-01

   let $AuditDescr = '(IBRK-01) : IB Message parts referencing a non-existing msg/vers: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Message'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Version'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Ref Message'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'Ref Version'
    let #Column4len = lengthp($Column4Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61
    let #Start4          = 91

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)


begin-SELECT on-Error=Rpt-SQL-Error
P.MSGNAME                &IBRK01_MSGNAME
P.APMSGVER               &IBRK01_APMSGVER
P.IB_MSGNAME             &IBRK01_IB_MSGNAME
P.IB_MSGVERSION          &IBRK01_IB_MSGVERS

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK01_MSGNAME     (+1, #Start1)
   print &IBRK01_APMSGVER    ( 0, #Start2)
   print &IBRK01_IB_MSGNAME  ( 0, #Start3)
   print &IBRK01_IB_MSGVERS  ( 0, #Start4)

FROM PSMSGPARTS P
WHERE NOT EXISTS (SELECT 'X' FROM PSMSGVER V WHERE V.MSGNAME = P.IB_MSGNAME
AND V.APMSGVER = P.IB_MSGVERSION)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-02                                                !
! Descr:     Rowset based messages referencing non-existing records    !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-02

   let $AuditDescr = '(IBRK-02) : Rowset based messages referencing non-existing records: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Message'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Version'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Record'
    let #Column3len = lengthp($Column3Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
R.MSGNAME                &IBRK02_MSGNAME
R.APMSGVER               &IBRK02_APMSGVER
R.RECNAME                &IBRK02_RECNAME

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK02_MSGNAME     (+1, #Start1)
   print &IBRK02_APMSGVER    ( 0, #Start2)
   print &IBRK02_RECNAME     ( 0, #Start3)

FROM PSMSGREC R
WHERE NOT EXISTS (SELECT 'X' FROM PSRECDEFN D WHERE D.RECNAME = R.RECNAME)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-03                                                !
! Descr:     Container messages referencing non-part messages          !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-03

   let $AuditDescr = '(IBRK-03) : Container messages referencing non-part msgs: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Message'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Version'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Part Message'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'Part Version'
    let #Column4len = lengthp($Column4Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61
    let #Start4          = 91

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
M.MSGNAME                &IBRK03_MSGNAME
P.APMSGVER               &IBRK03_APMSGVER
P.IB_MSGNAME             &IBRK03_IB_MSGNAME
P.IB_MSGVERSION          &IBRK03_IB_MSGVERS

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK03_MSGNAME     (+1, #Start1)
   print &IBRK03_APMSGVER    ( 0, #Start2)
   print &IBRK03_IB_MSGNAME  ( 0, #Start3)
   print &IBRK03_IB_MSGVERS  ( 0, #Start4)

FROM PSMSGVER M, PSMSGPARTS P
WHERE M.MSGNAME = P.MSGNAME AND M.APMSGVER = P.APMSGVER AND
NOT EXISTS (SELECT 'X' FROM PSMSGVER V WHERE V.MSGNAME = P.IB_MSGNAME AND
V.APMSGVER = P.IB_MSGVERSION AND V.IB_PARTS = 1)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-04                                                !
! Descr:     IB Service Operation with missing default version         !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-04

   let $AuditDescr = '(IBRK-04) : Service Operation with missing default vers: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Service Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Default Version'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 31

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
O.IB_OPERATIONNAME       &IBRK04_OPER
O.DEFAULTVER             &IBRK04_DVER

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK04_OPER        (+1, #Start1)
   print &IBRK04_DVER        ( 0, #Start2)

FROM PSOPERATION O
WHERE NOT EXISTS (SELECT 'X' FROM PSOPRVERDFN V WHERE 
V.IB_OPERATIONNAME = O.IB_OPERATIONNAME AND V.VERSIONNAME = O.DEFAULTVER)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-05                                                !
! Descr:     IB Service with missing operation                         !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-05

   let $AuditDescr = '(IBRK-05) : Service with missing operation: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Service Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Service'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 31

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
S.IB_OPERATIONNAME       &IBRK05_OPER
S.IB_SERVICENAME         &IBRK05_SERV

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK05_OPER        (+1, #Start1)
   print &IBRK05_SERV        ( 0, #Start2)

FROM PSSERVICEOPR S
WHERE NOT EXISTS (SELECT 'X' FROM PSOPERATION O WHERE O.IB_OPERATIONNAME = S.IB_OPERATIONNAME)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-06                                                !
! Descr:     IB Service Operation version with missing operation       !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-06

   let $AuditDescr = '(IBRK-06) : Service Operation version with missing operation: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Service Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Version'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 31

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
O.IB_OPERATIONNAME       &IBRK06_OPER
O.VERSIONNAME            &IBRK06_VERS

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK06_OPER        (+1, #Start1)
   print &IBRK06_VERS        ( 0, #Start2)

FROM PSOPRVERDFN O
WHERE NOT EXISTS (SELECT 'X' FROM PSOPERATION P WHERE O.IB_OPERATIONNAME = P.IB_OPERATIONNAME)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-07                                                !
! Descr:     IB Handlers with missing service operations               !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-07

   let $AuditDescr = '(IBRK-07) : IB Handlers with missing operations: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Service Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Handler'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 31

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
H.IB_OPERATIONNAME       &IBRK07_OPER
H.HANDLERNAME            &IBRK07_HAND

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK07_OPER        (+1, #Start1)
   print &IBRK07_HAND        ( 0, #Start2)

FROM PSOPRHDLR H
WHERE NOT EXISTS (SELECT 'X' FROM PSOPERATION P WHERE H.IB_OPERATIONNAME = P.IB_OPERATIONNAME)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-08                                                !
! Descr:     IB Routing referencing invalid service operation          !
! Note:  All routing queries ignore routing IB_ADMIN_ROUTING wich is a !
! special routing used for the upgrade to 8.48 and should be ignored.  !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-08

   let $AuditDescr = '(IBRK-08) : IB Routing referencing invalid service operation: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Routing'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Operation'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Version'
    let #Column3len = lengthp($Column3Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
R.ROUTINGDEFNNAME        &IBRK08_ROUT
R.IB_OPERATIONNAME       &IBRK08_OPER
R.VERSIONNAME            &IBRK08_VERS

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK08_ROUT        (+1, #Start1)
   print &IBRK08_OPER        ( 0, #Start2)
   print &IBRK08_VERS        ( 0, #Start3)

FROM PSIBRTNGDEFN R
WHERE R.ROUTINGDEFNNAME <> 'IB_ADMIN_ROUTING' AND
NOT EXISTS (SELECT 'X' FROM PSOPRVERDFN O
WHERE O.IB_OPERATIONNAME = R.IB_OPERATIONNAME AND O.VERSIONNAME = R.VERSIONNAME)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-09                                                !
! Descr:     IB Routing referencing invalid nodes                      !
! Note:  All routing queries ignore routing IB_ADMIN_ROUTING wich is a !
! special routing used for the upgrade to 8.48 and should be ignored.  !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-09

   let $AuditDescr = '(IBRK-09) : IB Routing referencing invalid nodes: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Routing'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Send Node'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Receive Node'
    let #Column3len = lengthp($Column3Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
R.ROUTINGDEFNNAME        &IBRK09_ROUT
R.SENDERNODENAME         &IBRK09_SEND
R.RECEIVERNODENAME       &IBRK09_RECV

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK09_ROUT        (+1, #Start1)
   print &IBRK09_SEND        ( 0, #Start2)
   print &IBRK09_RECV        ( 0, #Start3)

FROM PSIBRTNGDEFN R
WHERE R.ROUTINGDEFNNAME <> 'IB_ADMIN_ROUTING' AND
(R.SENDERNODENAME <> '~~ANY~~' AND 
NOT EXISTS (SELECT 'X' FROM PSMSGNODEDEFN N WHERE N.MSGNODENAME = R.SENDERNODENAME))
OR 
(R.RECEIVERNODENAME <> '~~ANY~~' AND 
NOT EXISTS (SELECT 'X' FROM PSMSGNODEDEFN N WHERE N.MSGNODENAME = R.RECEIVERNODENAME))
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-10                                                !
! Descr:     IB Routing referencing invalid handlers                   !
! Note:  All routing queries ignore routing IB_ADMIN_ROUTING wich is a !
! special routing used for the upgrade to 8.48 and should be ignored.  !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-10

   let $AuditDescr = '(IBRK-10) : IB Routing referencing invalid handlers: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Routing'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'On Send Handler'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'On Receive Handler'
    let #Column3len = lengthp($Column3Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
R.ROUTINGDEFNNAME        &IBRK10_ROUT
R.ONSNDHDLRNAME          &IBRK10_SEND
R.ONRCVHDLRNAME          &IBRK10_RECV

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK10_ROUT        (+1, #Start1)
   print &IBRK10_SEND        ( 0, #Start2)
   print &IBRK10_RECV        ( 0, #Start3)

FROM PSIBRTNGDEFN R
WHERE R.ROUTINGDEFNNAME <> 'IB_ADMIN_ROUTING' AND
(R.ONSNDHDLRNAME <> ' ' AND
NOT EXISTS (SELECT 'X' FROM PSOPRHDLR H WHERE 
H.IB_OPERATIONNAME = R.IB_OPERATIONNAME AND H.HANDLERNAME = R.ONSNDHDLRNAME))
OR (ONRCVHDLRNAME <> ' ' AND
NOT EXISTS (SELECT 'X' FROM PSOPRHDLR H WHERE 
H.IB_OPERATIONNAME = R.IB_OPERATIONNAME AND H.HANDLERNAME = R.ONRCVHDLRNAME))
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-11                                                !
! Descr:     IB Routing referencing invalid AE transforms              !
! Note:  All routing queries ignore routing IB_ADMIN_ROUTING wich is a !
! special routing used for the upgrade to 8.48 and should be ignored.  !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-11

   let $AuditDescr = '(IBRK-11) : IB Routing referencing invalid AE transforms: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Routing'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Parameter'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Transform'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'Transform 2'
    let #Column4len = lengthp($Column4Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61
    let #Start4          = 91

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
R.ROUTINGDEFNNAME        &IBRK11_ROUT
R.PARAMETERNAME          &IBRK11_PARM
R.XFRMNAME               &IBRK11_T1
R.XFRMNAME_SECOND        &IBRK11_T2

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK11_ROUT        (+1, #Start1)
   print &IBRK11_PARM        ( 0, #Start2)
   print &IBRK11_T1          ( 0, #Start3)
   print &IBRK11_T2          ( 0, #Start4)

FROM PSRTNGDFNPARM R
WHERE R.ROUTINGDEFNNAME <> 'IB_ADMIN_ROUTING' AND
(R.XFRMNAME <> ' ' AND NOT EXISTS (SELECT 'X' FROM PSAEAPPLDEFN A 
WHERE A.AE_APPLID = R.XFRMNAME AND A.AEPROGTYPE = '4'))
OR
(R.XFRMNAME_SECOND <> ' ' AND NOT EXISTS (SELECT 'X' FROM PSAEAPPLDEFN A 
WHERE A.AE_APPLID = R.XFRMNAME_SECOND AND A.AEPROGTYPE = '4'))
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-12                                                !
! Descr:     IB Routing referencing invalid Messages                   !
! Note:  All routing queries ignore routing IB_ADMIN_ROUTING wich is a !
! special routing used for the upgrade to 8.48 and should be ignored.  !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-12

   let $AuditDescr = '(IBRK-12) : IB Routing referencing invalid messages: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Routing'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Parameter'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'In Message'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'Out Message'
    let #Column4len = lengthp($Column4Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61
    let #Start4          = 91

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
R.ROUTINGDEFNNAME        &IBRK12_ROUT
R.PARAMETERNAME          &IBRK12_PARM
R.INMSGNAME              &IBRK12_M1
R.OUTMSGNAME             &IBRK12_M2

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK12_ROUT        (+1, #Start1)
   print &IBRK12_PARM        ( 0, #Start2)
   print &IBRK12_M1          ( 0, #Start3)
   print &IBRK12_M2          ( 0, #Start4)

FROM PSRTNGDFNPARM R
WHERE R.ROUTINGDEFNNAME <> 'IB_ADMIN_ROUTING' AND
(R.INMSGNAME <> ' ' AND NOT EXISTS (SELECT 'X' FROM PSMSGVER V WHERE 
V.MSGNAME = R.INMSGNAME AND V.APMSGVER = R.INMSGVERSION))
OR
(R.OUTMSGNAME <> ' ' AND NOT EXISTS (SELECT 'X' FROM PSMSGVER V WHERE 
V.MSGNAME = R.OUTMSGNAME AND V.APMSGVER = R.OUTMSGVERSION))
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-13                                                !
! Descr:     IB Serv Oper Version referencing invalid msg              !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-13

   let $AuditDescr = '(IBRK-13) : IB Serv Oper Vers with invalid message: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Service Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Version'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Message'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'Version'
    let #Column4len = lengthp($Column4Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61
    let #Start4          = 91

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
V.IB_OPERATIONNAME       &IBRK13_OPER
V.VERSIONNAME            &IBRK13_VERS
V.MSGNAME                &IBRK13_MSG
V.IB_MSGVERSION          &IBRK13_MVER

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK13_OPER        (+1, #Start1)
   print &IBRK13_VERS        ( 0, #Start2)
   print &IBRK13_MSG         ( 0, #Start3)
   print &IBRK13_MVER        ( 0, #Start4)

FROM PSOPRVERDFNPARM V
WHERE V.MSGNAME <> ' ' AND V.IB_MSGVERSION <> ' ' AND
NOT EXISTS (SELECT 'X' FROM PSMSGVER M, PSMSGDEFN D WHERE M.MSGNAME = V.MSGNAME 
AND M.APMSGVER = V.IB_MSGVERSION AND M.MSGNAME = D.MSGNAME)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-14                                                !
! Descr:     IB Serv Oper Version referencing invalid queue            !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-14

   let $AuditDescr = '(IBRK-14) : IB Serv Oper Vers with invalid queue: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Service Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Version'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Parameter'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'Queue'
    let #Column4len = lengthp($Column4Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61
    let #Start4          = 91

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
V.IB_OPERATIONNAME       &IBRK14_OPER
V.VERSIONNAME            &IBRK14_VERS
V.PARAMETERNAME          &IBRK14_PARM
V.QUEUENAME              &IBRK14_QUEUE

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK14_OPER        (+1, #Start1)
   print &IBRK14_VERS        ( 0, #Start2)
   print &IBRK14_PARM        ( 0, #Start3)
   print &IBRK14_QUEUE       ( 0, #Start4)

FROM PSOPRVERDFNPARM V
WHERE V.QUEUENAME <> ' ' AND
NOT EXISTS (SELECT 'X' FROM PSQUEUEDEFN Q WHERE Q.QUEUENAME = V.QUEUENAME)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-15                                                !
! Descr:     IB Serv Oper Version referencing invalid AE Transform     !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-15

   let $AuditDescr = '(IBRK-15) : IB Serv Oper Vers with invalid transform: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Service Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Version'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'In Transform'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'Out Transform'
    let #Column4len = lengthp($Column4Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61
    let #Start4          = 91

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
V.IB_OPERATIONNAME       &IBRK15_OPER
V.VERSIONNAME            &IBRK15_VERS
V.XFRMNAME               &IBRK15_T1
V.OUTXFRMNAME            &IBRK15_T2

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK15_OPER        (+1, #Start1)
   print &IBRK15_VERS        ( 0, #Start2)
   print &IBRK15_T1          ( 0, #Start3)
   print &IBRK15_T2          ( 0, #Start4)

FROM PSOPRVERDFNPARM V
WHERE (V.XFRMNAME <> ' ' AND NOT EXISTS 
(SELECT 'X' FROM PSAEAPPLDEFN A WHERE 
A.AE_APPLID = V.XFRMNAME AND A.AEPROGTYPE = '4'))
OR
(V.OUTXFRMNAME <> ' ' AND NOT EXISTS 
(SELECT 'X' FROM PSAEAPPLDEFN A WHERE 
A.AE_APPLID = V.OUTXFRMNAME AND A.AEPROGTYPE = '4'))
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-16                                                !
! Descr:     IB Serv Oper Version with validation turned on referencing!
!   messages with no schema.                                           ! 
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-16

   let $AuditDescr = '(IBRK-16) : IB Serv Oper Vers with messages missing schema: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Service Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Version'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Message'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'Msg Version'
    let #Column4len = lengthp($Column4Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61
    let #Start4          = 91

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
V.IB_OPERATIONNAME       &IBRK16_OPER
V.VERSIONNAME            &IBRK16_VERS
P.MSGNAME                &IBRK16_MSG
P.IB_MSGVERSION          &IBRK16_MVER

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK16_OPER        (+1, #Start1)
   print &IBRK16_VERS        ( 0, #Start2)
   print &IBRK16_MSG         ( 0, #Start3)
   print &IBRK16_MVER        ( 0, #Start4)

FROM PSOPRVERDFN V, PSOPRVERDFNPARM P
WHERE V.IB_OPERATIONNAME = P.IB_OPERATIONNAME AND
V.VERSIONNAME = P.VERSIONNAME AND
V.IB_VALIDATION = 'Y' AND
P.MSGNAME <> ' ' AND P.IB_MSGVERSION <> ' ' AND
NOT EXISTS (SELECT 'X' FROM PSMSGVER M, PSIBSCMADFN S 
WHERE M.MSGNAME = S.MSGNAME AND
M.APMSGVER = S.APMSGVER AND M.MSGNAME = P.MSGNAME AND 
M.APMSGVER = P.IB_MSGVERSION)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-17                                                !
! Descr:     IB CI Handlers referencing invalid component interface    !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-17

   let $AuditDescr = '(IBRK-17) : IB CI handlers referencing invalid CIs: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Service Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Handler'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Component Interface'
    let #Column3len = lengthp($Column3Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
C.IB_OPERATIONNAME       &IBRK17_OPER
C.HANDLERNAME            &IBRK17_HAND
C.BCNAME                 &IBRK17_CI

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK17_OPER        (+1, #Start1)
   print &IBRK17_HAND        ( 0, #Start2)
   print &IBRK17_CI          ( 0, #Start3)

FROM PSOPERATIONCI C
WHERE C.BCNAME <> ' ' AND NOT EXISTS 
(SELECT 'X' FROM PSBCDEFN B WHERE B.BCNAME = C.BCNAME)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-18                                                !
! Descr:     IB Handler referencing invalid App. Class                 !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-18

   let $AuditDescr = '(IBRK-18) : IB Handler referencing invalid App. Class: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Service Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Handler'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Package Root'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'App Class ID'
    let #Column4len = lengthp($Column4Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61
    let #Start4          = 91

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
A.IB_OPERATIONNAME       &IBRK18_OPER
A.HANDLERNAME            &IBRK18_HAND
A.PACKAGEROOT            &IBRK18_PACK
A.APPCLASSID             &IBRK18_APP

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK18_OPER        (+1, #Start1)
   print &IBRK18_HAND        ( 0, #Start2)
   print &IBRK18_PACK        ( 0, #Start3)
   print &IBRK18_APP         ( 0, #Start4)

FROM PSOPERATIONAC A
WHERE (A.QUALIFYPATH = ' ' AND NOT EXISTS 
(SELECT 'X' FROM PSAPPCLASSDEFN D WHERE 
D.PACKAGEROOT = A.PACKAGEROOT AND D.QUALIFYPATH = ':' AND
A.APPCLASSID = D.APPCLASSID))
OR (A.QUALIFYPATH <> ' ' AND NOT EXISTS 
(SELECT 'X' FROM PSAPPCLASSDEFN D WHERE 
D.PACKAGEROOT = A.PACKAGEROOT AND D.QUALIFYPATH = A.QUALIFYPATH
AND A.APPCLASSID = D.APPCLASSID))
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-19                                                !
! Descr:     Part message with no schema                               !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-19

   let $AuditDescr = '(IBRK-19) : Part message with no schema: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Message'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Version'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 31

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
M.MSGNAME                &IBRK19_MSG
M.APMSGVER               &IBRK19_VERS

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK19_MSG         (+1, #Start1)
   print &IBRK19_VERS        ( 0, #Start2)

FROM PSMSGVER M
WHERE M.IB_PARTS = 1 AND
NOT EXISTS (SELECT 'X' FROM PSIBSCMADFN S WHERE 
S.MSGNAME = M.MSGNAME AND S.APMSGVER = M.APMSGVER)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-20                                                !
! Descr:     Container message with no schema                          !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-20

   let $AuditDescr = '(IBRK-20) : Container message with no schema: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Message'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Version'
    let #Column2len = lengthp($Column2Name)

    let #Start1          = 1
    let #Start2          = 31

    let #numofhdr        = 2

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)

begin-SELECT on-Error=Rpt-SQL-Error
P.MSGNAME                &IBRK20_MSG
P.APMSGVER               &IBRK20_VERS

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK20_MSG         (+1, #Start1)
   print &IBRK20_VERS        ( 0, #Start2)

FROM PSMSGPARTS P
WHERE NOT EXISTS (SELECT 'X' FROM PSIBSCMADFN S WHERE 
S.MSGNAME = P.MSGNAME AND S.APMSGVER = P.APMSGVER)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-21                                                !
! Descr:     Operations with duplicate active routings                 !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-21

   let $AuditDescr = '(IBRK-21) : Operations with duplicate routings: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Version'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Routing'
    let #Column3len = lengthp($Column3Name)


    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
R.IB_OPERATIONNAME       &IBRK21_OPR
R.VERSIONNAME            &IBRK21_VERS
R.ROUTINGDEFNNAME        &IBRK21_RTNG

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK21_OPR         (+1, #Start1)
   print &IBRK21_VERS        ( 0, #Start2)
   print &IBRK21_RTNG        ( 0, #Start3)

FROM PSIBRTNGDEFN R
WHERE R.SENDERNODENAME = R.RECEIVERNODENAME
AND EFF_STATUS = 'A' 
AND 1 < (SELECT COUNT(*) FROM PSIBRTNGDEFN C WHERE C.IB_OPERATIONNAME = R.IB_OPERATIONNAME AND
C.VERSIONNAME = R.VERSIONNAME AND C.EFF_STATUS = 'A' AND C.SENDERNODENAME = C.RECEIVERNODENAME)
ORDER BY R.IB_OPERATIONNAME
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-22                                                !
! Descr:     Operations with duplicate active ANY routings             !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-22

   let $AuditDescr = '(IBRK-22) : Operations with duplicate ANY routings: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Version'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Routing'
    let #Column3len = lengthp($Column3Name)


    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61

    let #numofhdr        = 3

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)

begin-SELECT on-Error=Rpt-SQL-Error
R.IB_OPERATIONNAME       &IBRK22_OPR
R.VERSIONNAME            &IBRK22_VERS
R.ROUTINGDEFNNAME        &IBRK22_RTNG

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK22_OPR         (+1, #Start1)
   print &IBRK22_VERS        ( 0, #Start2)
   print &IBRK22_RTNG        ( 0, #Start3)

FROM PSIBRTNGDEFN R
WHERE R.SENDERNODENAME = '~~ANY~~'
AND EFF_STATUS = 'A' 
AND 1 < (SELECT COUNT(*) FROM PSIBRTNGDEFN C WHERE C.IB_OPERATIONNAME = R.IB_OPERATIONNAME AND
C.VERSIONNAME = R.VERSIONNAME AND C.EFF_STATUS = 'A' AND C.SENDERNODENAME = '~~ANY~~')
ORDER BY R.IB_OPERATIONNAME
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

!----------------------------------------------------------------------!
! Procedure: SYSIBRK-23                                                !
! Descr:     IB Operation with no Service Relationship                 !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-23

   let $AuditDescr = '(IBRK-23) : Operation with no Service: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Service Operation'
    let #Column1len = lengthp($Column1Name)

    let #Start1          = 1

    let #numofhdr        = 1

    put $Column1Name #Start1 #Column1len into printarray(0)

begin-SELECT on-Error=Rpt-SQL-Error
O.IB_OPERATIONNAME       &IBRK23_OPER

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK23_OPER        (+1, #Start1)

FROM PSOPERATION O
WHERE NOT EXISTS (SELECT 'X' FROM PSSERVICEOPR S WHERE S.IB_OPERATIONNAME = O.IB_OPERATIONNAME)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------!
! Procedure: SYSIBRK-24                                                !
! Descr:     IB Bulk Load Handler referencing invalid message          !
!----------------------------------------------------------------------!
begin-procedure SYSIBRK-24

   let $AuditDescr = '(IBRK-24) : IB Bulk Load Handler referencing invalid message: '

#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'Service Operation'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'Handler'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'Message Name'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'Version'
    let #Column4len = lengthp($Column4Name)

    let #Start1          = 1
    let #Start2          = 31
    let #Start3          = 61
    let #Start4          = 91

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)

begin-SELECT on-Error=Rpt-SQL-Error
D.IB_OPERATIONNAME       &IBRK24_OPER
D.HANDLERNAME            &IBRK24_HAND
D.IB_MSGNAME             &IBRK24_MSG
D.IB_MSGVERSION          &IBRK24_VER

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK24_OPER        (+1, #Start1)
   print &IBRK24_HAND        ( 0, #Start2)
   print &IBRK24_MSG         ( 0, #Start3)
   print &IBRK24_VER         ( 0, #Start4)

FROM PSOPERATIONDMS D
WHERE D.IB_MSGNAME <> ' ' AND D.IB_MSGVERSION <> ' ' AND NOT EXISTS
(SELECT 'X' FROM PSMSGVER V WHERE V.MSGNAME = D.IB_MSGNAME AND 
V.APMSGVER = D.IB_MSGVERSION)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure


!----------------------------------------------------------------------------!
! Procedure: SYSIBRK-25                                                      !
! Descr:     IB PSOPERATIONAC referencing a handlername that doesn't exist   !
!----------------------------------------------------------------------------!
begin-procedure SYSIBRK-25
   
   let $AuditDescr = '(IBRK-25) : IBOPERATIONAC REFERENCEING HANDLER THAT DOES NOT EXIST: '
   
#ifdef debugd
    show 'Starting: ' $AuditDescr
    date-time () {PTHMSM} &StrDateTime
    let $StrDateTime = strtodate(&StrDateTime,{PTHMSM})
    show 'StartTime   : ' &StrDateTime
#end-if

    let #rows            =  0
    let $DetailErrFound  = 'N'

    let $Column1Name = 'IB_OPERATIONNAME'
    let #Column1len = lengthp($Column1Name)
    let $Column2Name = 'HANDLERNAME'
    let #Column2len = lengthp($Column2Name)
    let $Column3Name = 'PACKAGEID'
    let #Column3len = lengthp($Column3Name)
    let $Column4Name = 'PACKAGEROOT'
    let #Column4len = lengthp($Column4Name)

    let #Start1          = 1  
    let #Start2          = 31
    let #Start3          = 61
    let #Start4          = 91

    let #numofhdr        = 4

    put $Column1Name #Start1 #Column1len into printarray(0)
    put $Column2Name #Start2 #Column2len into printarray(1)
    put $Column3Name #Start3 #Column3len into printarray(2)
    put $Column4Name #Start4 #Column4len into printarray(3)


begin-SELECT on-Error=Rpt-SQL-Error
P.IB_OPERATIONNAME     &IBRK25_IB_OPERATIONNAME
P.HANDLERNAME          &IBRK25_HANDLERNAME
P.PACKAGEID            &IBRK25_PACKAGEID
P.PACKAGEROOT          &IBRK25_PACKAGEROOT

 if (((#current-line + #rowstoadd) > #sqr-max-lines) and $DetailErrFound = 'Y') or ($DetailErrFound = 'N')
       move 'Y' to $DetailErrFound
       do PrintSectionHeadings
   end-if
   let #rows = #rows +1

   print &IBRK25_IB_OPERATIONNAME     (+1, #Start1)
   print &IBRK25_HANDLERNAME          ( 0, #Start2)
   print &IBRK25_PACKAGEID            ( 0, #Start3)
   print &IBRK25_PACKAGEROOT          ( 0, #Start4)

FROM  PSOPERATIONAC P
WHERE NOT EXISTS (SELECT 'X' FROM PSOPRHDLR H WHERE P.IB_OPERATIONNAME = H.IB_OPERATIONNAME 
AND P.HANDLERNAME = H.HANDLERNAME)
end-select

   do End-Section

#ifdef debugd
    date-time () {PTHMSM} &EndDateTime
    show 'EndTime     : ' &EndDateTime
    let $EndDateTime = strtodate(&EndDateTime,{PTHMSM})
    let #ElapsedTime = datediff($EndDateTime, $StrDateTime,'second')
    show 'Elapsed Time: ' #ElapsedTime edit 9999,999.999 ' (seconds)'
    show 'Exiting : ' $AuditDescr
    show ' '
#End-if

end-procedure

