!****************************************
!  PAY013:  Employee Earnings Snapshot  *
!****************************************
!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                $Date:  2006/07/06:12:59:13                           
!             $Release:  HR9                                           
!            $Revision:  103                                           
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'    !Set environment
#Include 'setup31.sqc'   !Printer and page-size initialization
#Include 'reset.sqc'     !Reset printer procedure
#Include 'getasodt.sqc'  !Get-As-Of-Date procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id

begin-report
  do Init-Report
  do Get-Key-Loop
  do Reset
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PAY013' to $ReportID
  move 'Employee Earnings Snapshot' to $ReportTitle
  display $ReportTitle

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Calendar-Year-Id
  do Get-Current-DateTime

  if $Prcs_Process_Instance = ''
    display 'Dates entered will be treated as month-end for payroll balances.'
    do Get-As-Of-Date
  else
    do Select-Parameters-As-Of-Date
  end-if

  do Get-Date-Codes
  move $AsOfYYYY to #AsOfYYYY
end-procedure

begin-heading 7
  #Include 'stdhdg09.sqc'
  print '                                           Hire    Last Date' (+3,1)
  print '     Service     Term.     Leave    Empl  Reg/  Full/  FLSA  Empl'  ()
  print 'Employee Name               Employee ID    Date      Hired  ' (+1,1)
  print '       Date      Date      Return   Stat  Temp  Part   Stat  Type'  ()
end-heading

begin-procedure Get-Key-Loop
  if $Prcs_Process_Instance = ''
    while 1 = 1
      display 'Enter Employee ID or partial Last Name or leave blank to exit.'
      input $key maxlen=30 'Search key (Name is case sensitive)'
      if RTRIM($key, ' ') = ''
        break
      end-if
      move $key to $Name
      concat '%' with $Name
      UPPERCASE $key
      do Process-Main
    end-while
  else
    do Update-As-Of-Date
    do Select-Parameters-Search-Key
  end-if
end-procedure


begin-procedure Update-As-Of-Date
begin-SQL on-error=Bad-Date
UPDATE PSASOFDATE SET ASOFDATE=$ASOFDATE
end-SQL
end-procedure


begin-procedure Select-Parameters-As-Of-Date
begin-select

P1.ASOFDATE

FROM  PS_RC_PAY013_1 P1
WHERE P1.OPRID          = $Prcs_OprID
AND   P1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
end-select

  let  $AsOfDate         = &P1.AsOfDate

end-procedure

begin-procedure Select-Parameters-Search-Key

  let $Prev_EmplID  = ' '
  let #Prev_EmplRcd = 0

  let #SubTot_MTD = 0
  let #SubTot_QTD = 0
  let #SubTot_YTD = 0

begin-select

P2.SEARCH_KEY

      move &P2.SEARCH_KEY to $Key  xxxxxxxxxxx
      UPPERCASE $key
      move &P2.SEARCH_KEY to $Name
      let $Key  = RTrim($Key,' ')
      let $Name = RTrim($Name,' ')
      concat '%' with $Name

      do Process-Main

FROM  PS_RC_PAY013_2 P2
WHERE P2.OPRID          = $Prcs_OprID
AND   P2.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID

end-select

  if $Name = ''        !No rows retrieved by SELECT
      do Process-Main
  else
      if $Empl_Found = 'Y'
          do Print-SubTotal
          do Print-Grand-Total
      end-if
  end-if

end-procedure


begin-procedure Process-Main

  let $Empl_Found = 'N'

begin-SELECT
A.COMPANY

A.NAME                         
A.EMPLID                      
A.EMPL_RCD
A.HIRE_DT
A.SERVICE_DT
A.REHIRE_DT                    
A.TERMINATION_DT               
A.EXPECTED_RETURN_DT           

A.EMPL_STATUS                   
A.REG_TEMP                      
A.FULL_PART_TIME                
A.FLSA_STATUS                   
A.EMPL_TYPE                     
A.JOBCODE                       
A.JOBTITLE_ABBRV                
A.DEPTID                        
A.DEPTNAME_ABBRV                
A.BUSINESS_UNIT                 
A.PAYGROUP                      
A.COMPRATE                                   
A.MONTHLY_RT                    
A.ANNUAL_RT

FT.FREQUENCY_TYPE                     
NM.NAME_PSFORMAT


  if &A.EmplID <> $Prev_EmplID
      if $Prev_EmplID = ' '
         move &A.EmplID   to $Prev_EmplID
         move &A.Empl_Rcd to #Prev_EmplRcd
         do Print-Employee-Info
         do Check-Total-Gross
      else
         do Print-SubTotal
         do Print-Grand-Total
         NEW-PAGE
         do Print-Employee-Info
         move &A.EmplID   to $Prev_EmplID
         move &A.Empl_Rcd to #Prev_EmplRcd
         do Check-Total-Gross
      end-if
  else
      if &A.Empl_Rcd <> #Prev_EmplRcd
          do Print-SubTotal
          NEW-PAGE
          do Print-Employee-Info
          move &A.Empl_Rcd to #Prev_EmplRcd
      end-if
  end-if


  move 'Y' to $Empl_Found
  move  0  to #Erncd_Cnt
  do List-Earnings

FROM  PS_PERSONNEL A, PS_FREQUENCY_TBL FT, PS_PERSON_NAME NM

WHERE (NM.EMPLID = $key
   OR NM.NAME_PSFORMAT LIKE $Name)
   AND  A.COMP_FREQUENCY = FT.FREQUENCY_ID
   AND FT.EFF_STATUS     = 'A'
   AND FT.EFFDT          =
      (SELECT MAX(FT1.EFFDT)
      FROM PS_FREQUENCY_TBL FT1
      WHERE FT1.FREQUENCY_ID   = FT.FREQUENCY_ID
        AND FT1.EFF_STATUS     = FT.EFF_STATUS
        AND FT1.EFFDT         <= A.EFFDT)
   AND A.EMPLID = NM.EMPLID
end-SELECT
end-procedure


begin-procedure Print-Employee-Info

  move &A.COMPANY to $Company  !for the Heading

  print &A.NAME                          (+2,1)
  print &A.EMPLID                        (0,29)

  do Format-DateTime(&A.Hire_Dt, $out, {DEFDATE}, '', '')
  print $out                             (0,41)

  do Format-DateTime(&A.Service_Dt, $out, {DEFDATE}, '', '')
  print $out                             (0,63)

  if not IsNull(&A.Rehire_Dt)
    do Format-DateTime(&A.Rehire_Dt, $out, {DEFDATE}, '', '')
    print $out                           (0,52)
  end-if

  if not IsNull(&A.Termination_Dt)
    do Format-DateTime(&A.Termination_Dt, $out, {DEFDATE}, '', '')
    print $out                           (0,74)
  end-if

  if not IsNull(&A.Expected_Return_Dt)
    do Format-DateTime(&A.Expected_Return_Dt, $out, {DEFDATE}, '', '')
    print $out                           (0,85)
  end-if

  print &A.EMPL_STATUS                   (0,98)
  print &A.REG_TEMP                      (0,104)
  print &A.FULL_PART_TIME                (0,110)
  print &A.FLSA_STATUS                   (0,117)
  print &A.EMPL_TYPE                     (0,123)

  print 'Job'                                                                 (+6,1)
  print 'Code    Title       Dept. ID    Dept. Name     Business Unit'        (+1,1)

  print &A.JOBCODE                       (+2,1)
  print &A.JOBTITLE_ABBRV                (0,9)
  print &A.DEPTID                        (0,21)
  print &A.DEPTNAME_ABBRV                (0,33)
  print &A.BUSINESS_UNIT                 (0,52)

  print ' Pay           Comp Rate    Comp          Monthly             Annual      Earn' (+6,1)
  print '         Current        QTD            YTD'             ()
  print 'Group                       Freq Type       Rate               Rate       Code' (+1,1)
  print '          Month       Earnings       Earnings'          ()
 
  print &A.PAYGROUP                      (+2,2)
  print &A.COMPRATE                      (0,6)  EDIT 999999999,999.999999
  print &FT.FREQUENCY_TYPE               (0,30)
  print &A.MONTHLY_RT                    (0,32) EDIT 999999999,999.999999
  print &A.ANNUAL_RT                     (0,53) EDIT 999999999,999.999999

end-procedure


begin-procedure Check-Total-Gross

  move $AsOfQtr   to #AsOfQtr    !current Quarter
  move $AsOfMonth to #AsOfMonth  !current Month
  do Get-Check-YTD
  move &C.Total_Gross_YTD to #TotalGrossYTD
  move &C.Total_Gross_YTD to #TotalGrossQTD
  move &C.Total_Gross_YTD to #TotalGrossMTD

  if #AsOfMonth > 1
    subtract 1 from #AsOfMonth
    do Get-Check-YTD
    subtract &C.Total_Gross_YTD from #TotalGrossMTD
    add 1 to #AsOfMonth
  end-if

  if #AsOfQtr > 1
    subtract 1 from #AsOfQtr
    do Get-Check-YTD
    subtract &C.Total_Gross_YTD from #TotalGrossQTD
    add 1 to #AsOfQtr
  end-if

end-procedure


begin-procedure Get-Check-YTD

  do Format-Number(#AsOfQtr, $PreQtrCd, '0')
  do Format-Number(#AsOfMonth, $PreMnthCd, '00')
  do Format-Number(#AsOfMonth, $PreAsOfMth, '00')
  move #AsOfYYYY  to #PreAsOfYr
  move #AsOfQtr  to  #PreQtrCd
  move #AsOfMonth  to  #PreMnthCd

begin-SELECT Loops=1
C.TOTAL_GROSS_YTD
C.BALANCE_PERIOD
FROM  PS_CHECK_YTD C
WHERE C.EMPLID        = &A.EmplID
  AND C.COMPANY       = &A.Company
  AND C.BALANCE_ID =  $Calendar_Year_Id
  AND C.BALANCE_YEAR = #PreAsOfYr
  AND C.BALANCE_QTR  <= #PreQtrCd
  AND C.BALANCE_PERIOD <= #PreMnthCd
ORDER BY C.BALANCE_PERIOD DESC
end-SELECT

end-procedure


begin-procedure List-Earnings

begin-SELECT

B.ERNCD   &B.ERNCD

  if #Erncd_Cnt = 0
     print &B.ERNCD   (0,75) 
  else
     print &B.ERNCD   (+1,75)
  end-if

  add 1 to #Erncd_Cnt


#ifdef DB2ALL
DECIMAL(SUM(B.GRS_YTD),15,3)   &B.Grs_YTD
DECIMAL(SUM(B.GRS_QTD),15,3)   &B.Grs_QTD
DECIMAL(SUM(B.GRS_MTD),15,3)   &B.Grs_MTD
#else
SUM(B.GRS_YTD)         &B.Grs_YTD
SUM(B.GRS_QTD)         &B.Grs_QTD
SUM(B.GRS_MTD)         &B.Grs_MTD
#endif


B.BALANCE_QTR,B.BALANCE_PERIOD

  print  &B.Grs_YTD   (0,111) edit 99,999,999.99mi
  add    &B.Grs_YTD to #SubTot_YTD

  if &B.BALANCE_PERIOD <> #AsOfMonth
     print 0          (0,81) edit 99,999,999.99mi
  else
     print &B.Grs_MTD (0,81) edit 99,999,999.99mi
     add   &B.Grs_MTD to #SubTot_MTD
  end-if
  if &B.Balance_Qtr <> #AsOfQtr
     print 0        (0,96) edit 99,999,999.99mi
  else
     print &B.Grs_QTD (0,96) edit 99,999,999.99mi
     add   &B.Grs_QTD to #SubTot_QTD
  end-if

FROM  PS_EARNINGS_BAL B
WHERE B.EMPLID        = &A.EMPLID
  AND B.EMPL_RCD      = &A.EMPL_RCD
  AND B.COMPANY       = &A.COMPANY
  AND B.SPCL_BALANCE  = 'N'
  AND B.BALANCE_ID = $Calendar_Year_Id
  AND B.BALANCE_YEAR = #AsOfYYYY
  AND B.BALANCE_PERIOD =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_EARNINGS_BAL
       WHERE  EMPLID        = &A.EMPLID
         AND  EMPL_RCD      = &A.EMPL_RCD
         AND  COMPANY       = &A.COMPANY
         AND  ERNCD         = B.ERNCD
         AND  SPCL_BALANCE  = B.SPCL_BALANCE
         AND  BALANCE_ID    = B.BALANCE_ID
         AND  BALANCE_YEAR  = B.BALANCE_YEAR
         AND  BALANCE_PERIOD      <= #AsOfMonth)
GROUP BY B.ERNCD,B.BALANCE_QTR,B.BALANCE_PERIOD
end-SELECT

end-procedure


begin-procedure Print-SubTotal

  print 'SUBTOTAL'       (+2,69)
  do Format-Number(#SubTot_MTD, $out, '99,999,999.99mi')
  print $out (0,81)
  do Format-Number(#SubTot_QTD, $out, '99,999,999.99mi')
  print $out (0,96)
  do Format-Number(#SubTot_YTD, $out, '99,999,999.99mi')
  print $out (0,111)

  let #SubTot_MTD = 0
  let #SubTot_QTD = 0
  let #SubTot_YTD = 0

end-procedure


begin-procedure Print-Grand-Total

  print 'GRAND TOTAL'      (+3,69)
  do Format-Number(#TotalGrossMTD, $out, '99,999,999.99mi')
  print $out (0,81)
  do Format-Number(#TotalGrossQTD, $out, '99,999,999.99mi')
  print $out (0,96)
  do Format-Number(#TotalGrossYTD, $out, '99,999,999.99mi')
  print $out (0,111)

end-procedure
