!***********************************************************************
!  PKG007:      Salary Packaging Package Details Report                *
!                                                                      *
!  Description: This SQR lists the amounts budgeted for each component *
!               of a package in each pay period.                       *

!                                                                      *
!***********************************************************************

!***********************************************************************
!                                                                      *
!               Confidentiality Information:                           *
!                                                                      *
!                                                                      *
! This module contains confidential and proprietary information        *
! of Oracle; it is not to be copied, reproduced, or transmitted        *
! in any form, by any means, in whole or in part, nor is it to         *
! be used for any purpose other than that for which it is              *
! expressly provided under the applicable license agreement.           *
!                                                                      *
! Copyright (C) 2006 Oracle. All Rights Reserved.                      *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2006/07/19:15:16:30                                 !
!       $Release:  HR9                                                 !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************


begin-setup 
#include 'setenv.sqc'    !Set environment
#Include 'ptset02.sqc'  ! Landscape Printer and page-size initialization
end-setup

begin-report
  do Init-DateTime
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report

begin-heading 8
  #Include 'stdhdg01.sqc'
  Print $Header1 (+2, 1)
  Print $Header2 (+2, 1)
  Print $Header3 (+1, 1)
  Print $Header4 (0, 169)
end-heading


!**************************************************************************
!
! Procedure: Init-Report
!
! Description: Initialise header and run control variables.
!
!**************************************************************************
begin-procedure Init-Report

  move 'PKG007' to $ReportID
  move 'Salary Packaging Package Details Report' to
       $ReportTitle
  display $ReportTitle

  do Stdapi-Init
  display '$prcs_process_instance: ' noline
  display $prcs_process_instance

  if IsBlank($prcs_process_instance)
    ! no SQRW prompt
  else
    do Select-Parameters
  end-if

  let $sql-statement = 'SELECT PS_JOB'
  begin-SELECT on-error=SQL-Error
J.COMPANY
J.PAYGROUP
J.GP_PAYGROUP
     FROM PS_JOB J
    WHERE J.EMPLID    = $RC.Emplid
      AND J.EMPL_RCD= #RC.Empl_Rcd
      AND J.EFFDT     = (SELECT MAX(J2.EFFDT)
                           FROM PS_JOB J2
                          WHERE J2.EMPLID    = J.EMPLID
                            AND J2.EMPL_RCD  = J.EMPL_RCD
                            AND J2.EFFDT    <= &RC.Thru_Dt)
      AND J.EFFSEQ    = (SELECT MAX(J3.EFFSEQ)
                           FROM PS_JOB J3
                          WHERE J3.EMPLID    = J.EMPLID
                            AND J3.EMPL_RCD  = J.EMPL_RCD
                            AND J3.EFFDT     = J.EFFDT)
  end-SELECT

  CREATE-ARRAY Name=Pay_Calendar  Size=30
               Field=Pay_End:char
               Field=Per_Total:number

  let $Header0 = ''
  let $sql-statement = 'SELECT PS_PERSON_NAME'
  begin-SELECT on-error=SQL-Error
P.NAME
     FROM PS_PERSON_NAME P
    WHERE P.EMPLID = $RC.Emplid
  end-SELECT

  let $Param_Emp_Rcd = Edit(#RC.Empl_Rcd, '99')
  let $Header1 = 'For Employee ' || $RC.Emplid || $Param_Emp_Rcd || '  ' || &P.Name
  let $Header2 = 'Component/Addnl Comp '
  let $Header3 = '                  '
  let $Header4 = 'Total'

  if Not IsBlank(&J.GP_Paygroup)
     let $Cal_Company     = ' '
     let $Cal_Paygroup    = ' '
     let $Cal_GP_Paygroup = &J.GP_Paygroup
  else
     let $Cal_Company     = &J.Company
     let $Cal_Paygroup    = &J.Paygroup
     let $Cal_GP_Paygroup = ' '
  end-if


  do Load-PKG-Calendar

  end-procedure

!**************************************************************************
!
! Procedure: Load-PKG-Calendar
!
! Description: In HR only installation - calandar is loaded from PKG_CALENDAR
!              table
!
!**************************************************************************
begin-procedure Load-PKG-Calendar

! Load Pay Calendar into array

  let #Num_Pays  = #Zero
  let #Per_Total = #Zero
  let #Ind       = #Zero


  let $sql-statement = 'SELECT PS_PKG_CALENDAR'
  begin-SELECT on-error=SQL-Error
C.PAY_BEGIN_DT
C.PAY_END_DT

    IF #Num_Pays  < 28
      do Format-DateTime(&C.Pay_End_Dt, $Pay_Dt, {DEFDMY}, '', '')
      if #Num_Pays > 12
          let $Header3 = $Header3 || ' ' || $Pay_Dt
      else
          let $Header2 = $Header2 || ' ' || $Pay_Dt
      end-if

      let #Num_Pays = #Num_Pays + 1
      do Convert-To-DTU-Date(&C.Pay_End_Dt, $End_Dt)
      PUT $End_Dt #Per_Total INTO Pay_Calendar(#Num_Pays) Pay_End Per_Total
    END-IF
    let #ind = #ind + 1

     FROM PS_PKG_CALENDAR C

    WHERE C.COMPANY     = $Cal_Company     
      AND C.PAYGROUP    = $Cal_Paygroup
      AND C.GP_PAYGROUP = $Cal_GP_Paygroup
      AND C.PAY_END_DT BETWEEN &RC.From_Dt AND &RC.Thru_Dt
    ORDER BY C.PAY_END_DT
  end-SELECT

    IF #ind  > 28
      display '**** Number of periods exceeded 28 - only first 28 will be displayed **** '
      display '**** Totals will be displayed for the whole Package duration         **** '
    end-if

end-procedure




!**************************************************************************
!
! Procedure: Process-Main
!
! Description: Main processing section
!
!**************************************************************************
begin-procedure Process-Main

  let $Last_Comp = ' '
  let $Last_Add_Comp = ' '
  let $First_Line = 'Y'
  

  let $sql-statement = ' PS_JOB'
  begin-SELECT on-error=SQL-Error
E.COMPONENT
E.ADD_COMPONENT
E.PERIOD_END
E.BUDGET_AMT

    if &E.COMPONENT != $Last_Comp or &E.ADD_COMPONENT != $Last_Add_Comp

        if $First_Line = 'N'
            let #Comp_Total = #Comp_Total + #Period_Total
            let $Period_Amt = Edit(#Period_Total, '9999999.99')

            GET #Per_Total from Pay_Calendar(#Cal_Idx) Per_Total
            let #Per_Total = #Per_Total + #Period_Total
            PUT #Per_Total into Pay_Calendar(#Cal_Idx) Per_Total

            PRINT $Period_Amt (0, +1)
            let $Comp_Amt = Edit(#Comp_Total, '9999999.99')
            PRINT $Comp_Amt (0, 165)
        end-if

        let $First_Line = 'N'

        let #Cal_Idx = 1
        GET $Cal_End FROM Pay_Calendar(#Cal_Idx) Pay_End

        Print &E.Component (+2, 2)
        Print &E.Add_Component (0, 11)
        Print ' ' (0, 20)

        let #Col = 1
        let #Comp_Total = 0
        let #Period_Total = #Zero

        let $Last_Add_Comp = &E.Add_Component
        let $Last_Comp = &E.Component
    end-if

    do Convert-To-DTU-Date(&E.Period_End, $Pay_Per_Cmp)

    WHILE $Pay_Per_Cmp > $Cal_End and #Cal_Idx < #Num_Pays

        let #Comp_Total = #Comp_Total + #Period_Total
        let $Period_Amt = Edit(#Period_Total, '9999999.99')

        GET #Per_Total FROM Pay_Calendar(#Cal_Idx) Per_Total
        let #Per_Total = #Per_Total + #Period_Total
        PUT #Per_Total INTO Pay_Calendar(#Cal_Idx) Per_Total

        PRINT $Period_Amt (0, +1)

        let #Col = #Col + 1
        if #Col > 13
            let #Col = 1
            Print ' ' (+1, 18)
        end-if

        let #Period_Total = 0

        let #Cal_Idx = #Cal_Idx + 1
        GET $Cal_End #Per_Amt FROM Pay_Calendar(#Cal_Idx) Pay_End Per_Total

    end-WHILE

    let #Period_Total = #Period_Total + &E.Budget_Amt

     FROM PS_PKG_EXP_PER_TBL E
    WHERE E.EMPLID           = $RC.Emplid
      AND E.EMPL_RCD       = #RC.Empl_Rcd
      and E.PERIOD_END BETWEEN &RC.From_Dt AND &RC.Thru_Dt
    ORDER BY E.COMPONENT, E.ADD_COMPONENT, E.PERIOD_END
  end-SELECT

  let #Comp_Total = #Comp_Total + #Period_Total
  let $Period_Amt = Edit(#Period_Total, '9999999.99')
  GET #Per_Total from Pay_Calendar(#Cal_Idx) Per_Total
  let #Per_Total = #Per_Total + #Period_Total
  PUT #Per_Total into Pay_Calendar(#Cal_Idx) Per_Total
  if $First_Line = 'N'
      PRINT $Period_Amt (0, +1)
      let $Comp_Amt = Edit(#Comp_Total, '9999999.99')
      PRINT $Comp_Amt (0, 165)
  end-if

  PRINT 'Total:      ' (+2, 9)

  let #Grand_Total = #Zero
  let #Cal_Idx = 1
  let #Col = 1

  WHILE #Cal_Idx <= #Num_Pays
      GET #Per_Total FROM Pay_Calendar(#Cal_Idx) Per_Total
 
      let #Grand_Total = #Grand_Total + #Per_Total
      let $Per_Amt = Edit(#Per_Total, '9999999.99')
      PRINT $Per_Amt (0, +1)
      let #Col = #Col + 1
      if #Col > 13
          PRINT ' ' (+1, 18)
          let #Col = 1
      end-if
      let #Cal_Idx = #Cal_Idx + 1
  end-WHILE

  let $Comp_Amt = Edit(#Grand_Total, '9999999.99')
  PRINT $Comp_Amt (0, 165)

end-procedure

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'number.sqc'    !Routines to format numbers
#Include 'pkgrnctl.sqc'  !Select-Parameters procedure


